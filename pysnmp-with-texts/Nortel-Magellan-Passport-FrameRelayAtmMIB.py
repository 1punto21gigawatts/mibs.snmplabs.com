#
# PySNMP MIB module Nortel-Magellan-Passport-FrameRelayAtmMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-FrameRelayAtmMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:27:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
Gauge32, PassportCounter64, DisplayString, StorageType, Integer32, RowPointer, Counter32, Unsigned32, InterfaceIndex, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Gauge32", "PassportCounter64", "DisplayString", "StorageType", "Integer32", "RowPointer", "Counter32", "Unsigned32", "InterfaceIndex", "RowStatus")
AsciiString, Unsigned64, Link, IntegerSequence, NonReplicated, HexString, EnterpriseDateAndTime = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiString", "Unsigned64", "Link", "IntegerSequence", "NonReplicated", "HexString", "EnterpriseDateAndTime")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ObjectIdentity, Bits, IpAddress, ModuleIdentity, MibIdentifier, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, NotificationType, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Bits", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "NotificationType", "Counter32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
frameRelayAtmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51))
frAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72))
frAtmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 1), )
if mibBuilder.loadTexts: frAtmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmRowStatusTable.setDescription('This entry controls the addition and deletion of frAtm components.')
frAtmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"))
if mibBuilder.loadTexts: frAtmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmRowStatusEntry.setDescription('A single entry in the table represents a single frAtm component.')
frAtmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtm components. These components can be added and deleted.')
frAtmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmStorageType.setDescription('This variable represents the storage type value for the frAtm tables.')
frAtmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: frAtmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmIndex.setDescription('This variable represents the index for the frAtm tables.')
frAtmCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 10), )
if mibBuilder.loadTexts: frAtmCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
frAtmCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"))
if mibBuilder.loadTexts: frAtmCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCidDataEntry.setDescription('An entry in the frAtmCidDataTable.')
frAtmCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
frAtmStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11), )
if mibBuilder.loadTexts: frAtmStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
frAtmStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"))
if mibBuilder.loadTexts: frAtmStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmStateEntry.setDescription('An entry in the frAtmStateTable.')
frAtmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
frAtmOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
frAtmUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
frAtmAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
frAtmProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
frAtmControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
frAtmAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
frAtmStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
frAtmUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
frAtmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 12), )
if mibBuilder.loadTexts: frAtmStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmStatsTable.setDescription('FrUni/n Statistics This group contains the statistics about the operational behavior of the service at the interface level.')
frAtmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"))
if mibBuilder.loadTexts: frAtmStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmStatsEntry.setDescription('An entry in the frAtmStatsTable.')
frAtmLastUnknownDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLastUnknownDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLastUnknownDlci.setDescription('This attribute identifies the most recent DLCI which user frames were received on for which a DLCI has not been provisioned on the port.')
frAtmUnknownDlciFramesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmUnknownDlciFramesFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmUnknownDlciFramesFromIf.setDescription('This attribute contains a count of the number of frames received from the interface with an unknown DLCI (DLCI which is not provisioned). When the maximum is reached the count wraps to zero.')
frAtmInvalidHeaderFramesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmInvalidHeaderFramesFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmInvalidHeaderFramesFromIf.setDescription('This attribute counts the number of frames received from the interface with an invalid header format. When the maximum is reached the count wraps to zero.')
frAtmIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 13), )
if mibBuilder.loadTexts: frAtmIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
frAtmIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"))
if mibBuilder.loadTexts: frAtmIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmIfEntryEntry.setDescription('An entry in the frAtmIfEntryTable.')
frAtmIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
frAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 13, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
frAtmOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 14), )
if mibBuilder.loadTexts: frAtmOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
frAtmOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"))
if mibBuilder.loadTexts: frAtmOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmOperStatusEntry.setDescription('An entry in the frAtmOperStatusTable.')
frAtmSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
frAtmEmissionPriorityQsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 15), )
if mibBuilder.loadTexts: frAtmEmissionPriorityQsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmEmissionPriorityQsTable.setDescription('This group contains the provisionable attribute to specifie the number of Frame Relay egress emission priority queues to be used on that Frame Relay Interface')
frAtmEmissionPriorityQsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"))
if mibBuilder.loadTexts: frAtmEmissionPriorityQsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmEmissionPriorityQsEntry.setDescription('An entry in the frAtmEmissionPriorityQsTable.')
frAtmNumberOfEmissionQs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmNumberOfEmissionQs.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmNumberOfEmissionQs.setDescription('This attribute specifies the number of egress emission priority queues that will be used for that Frame Relay interface. The possible values of this attribute are 2 or 4: For V.35, V.11, HSSI, E1, DS1, E3, DS3 or 8pDS1 the possible values are: 2 (in which case they are hardware queues), or 4 (in which case they are software queues). For DS1C, E1C or DS3C the possible values are 2, 4 (in all cases they are software queues).')
frAtmFrmToIfByQueueTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 341), )
if mibBuilder.loadTexts: frAtmFrmToIfByQueueTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFrmToIfByQueueTable.setDescription('This attribute counts the total number of frames transmitted to the interface per egress emission priority queue since the component has been activated. There is potientially a maximum of 4 emission priority queues. The number of available egress queues varies according to the value of the provisionable attribute numberOfEmissionQs. Egress queue 0 has the lowest priority, while egress queue 3 has the highest priority. The queue values are only indicated when the numberOfEmissionQs is set to 4 queues.')
frAtmFrmToIfByQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 341, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmFrmToIfByQueueIndex"))
if mibBuilder.loadTexts: frAtmFrmToIfByQueueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFrmToIfByQueueEntry.setDescription('An entry in the frAtmFrmToIfByQueueTable.')
frAtmFrmToIfByQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 341, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: frAtmFrmToIfByQueueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFrmToIfByQueueIndex.setDescription('This variable represents the index for the frAtmFrmToIfByQueueTable.')
frAtmFrmToIfByQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 341, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFrmToIfByQueueValue.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFrmToIfByQueueValue.setDescription('This variable represents an individual value for the frAtmFrmToIfByQueueTable.')
frAtmOctetToIfByQueueTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 342), )
if mibBuilder.loadTexts: frAtmOctetToIfByQueueTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmOctetToIfByQueueTable.setDescription('This attribute counts the total number of octets transmitted from the service to the interface per emission priority queue since the component has been activated. There is potientially a maximum of 4 emission priority queues. The number of available egress queues varies according to the value of the provisionable attribute numberOfEmissionQs. Egress queue 0 has the lowest priority, while egress queue 3 has the highest priority.')
frAtmOctetToIfByQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 342, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmOctetToIfByQueueIndex"))
if mibBuilder.loadTexts: frAtmOctetToIfByQueueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmOctetToIfByQueueEntry.setDescription('An entry in the frAtmOctetToIfByQueueTable.')
frAtmOctetToIfByQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 342, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: frAtmOctetToIfByQueueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmOctetToIfByQueueIndex.setDescription('This variable represents the index for the frAtmOctetToIfByQueueTable.')
frAtmOctetToIfByQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 342, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmOctetToIfByQueueValue.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmOctetToIfByQueueValue.setDescription('This variable represents an individual value for the frAtmOctetToIfByQueueTable.')
frAtmFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2))
frAtmFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 1), )
if mibBuilder.loadTexts: frAtmFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmFramer components.')
frAtmFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmFramerIndex"))
if mibBuilder.loadTexts: frAtmFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerRowStatusEntry.setDescription('A single entry in the table represents a single frAtmFramer component.')
frAtmFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmFramer components. These components can be added and deleted.')
frAtmFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerStorageType.setDescription('This variable represents the storage type value for the frAtmFramer tables.')
frAtmFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerIndex.setDescription('This variable represents the index for the frAtmFramer tables.')
frAtmFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 10), )
if mibBuilder.loadTexts: frAtmFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
frAtmFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmFramerIndex"))
if mibBuilder.loadTexts: frAtmFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerProvEntry.setDescription('An entry in the frAtmFramerProvTable.')
frAtmFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
frAtmFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 11), )
if mibBuilder.loadTexts: frAtmFramerLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerLinkTable.setDescription('This group contains attributes defining the framing of data on the link interface.')
frAtmFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmFramerIndex"))
if mibBuilder.loadTexts: frAtmFramerLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerLinkEntry.setDescription('An entry in the frAtmFramerLinkTable.')
frAtmFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmFramerFlagsBetweenFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerFlagsBetweenFrames.setDescription('This attribute defines the number of flags that are inserted between frames sent to the link interface.')
frAtmFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 12), )
if mibBuilder.loadTexts: frAtmFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frAtmFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmFramerIndex"))
if mibBuilder.loadTexts: frAtmFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerStateEntry.setDescription('An entry in the frAtmFramerStateTable.')
frAtmFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frAtmFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frAtmFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frAtmFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13), )
if mibBuilder.loadTexts: frAtmFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
frAtmFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmFramerIndex"))
if mibBuilder.loadTexts: frAtmFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerStatsEntry.setDescription('An entry in the frAtmFramerStatsTable.')
frAtmFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerFrmToIf.setDescription('The number of frames transmitted to the link interface by Framer. Note: This does not include the number of frames transmitted directly to the hardware queue, thus bypassing the Framer component.')
frAtmFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerFrmFromIf.setDescription('The number of frames received from the link interface by Framer.')
frAtmFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerOctetFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerOctetFromIf.setDescription('The number of bytes received from the link interface by Framer.')
frAtmFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerAborts.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerAborts.setDescription('This attribute is the total number of aborts received.')
frAtmFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerCrcErrors.setDescription('This attribute is the total number of frames with CRC errors, occurring in the receive direction from the link.')
frAtmFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerLrcErrors.setDescription('This attribute is the total number of frames with LRC errors, occurring in the Tx link prior to transmission onto the link.')
frAtmFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerNonOctetErrors.setDescription('This attribute is the total number of frames that were non octet aligned.')
frAtmFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerOverruns.setDescription('This attribute is the total number of frames received from the link for which overruns occurred.')
frAtmFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerUnderruns.setDescription('This attribute is the total number of frames transmitted to the link for which underruns occurred.')
frAtmFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerLargeFrmErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerLargeFrmErrors.setDescription('This attribute is the total number of frames received which were too large. The frame execeeded the maximumFrameLengthLimit provisioned attribute or it contained more than the 255 block hardware limit.')
frAtmFramerFrmModeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerFrmModeErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerFrmModeErrors.setDescription('This attribute is the total number of frames detected with framing mode errors. A framingModeError is flagged when frames are inconsistent with the specified framingType, that is when interrupting frames are used while running in hdlc mode.')
frAtmFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 14), )
if mibBuilder.loadTexts: frAtmFramerUtilTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerUtilTable.setDescription('This group contains the link utilizaiton operational data for a Framer component.')
frAtmFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmFramerIndex"))
if mibBuilder.loadTexts: frAtmFramerUtilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerUtilEntry.setDescription('An entry in the frAtmFramerUtilTable.')
frAtmFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerNormPrioLinkUtilToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerNormPrioLinkUtilToIf.setDescription('This attribute is the utilization of the normal and high priority data traffic (interruptable traffic) sent to the link as a percentage of the available bandwidth on the link. Note that this includes traffic with Transfer Priorities (TP) of 0, 6 and 9 and/or Emission Priority of 2 and 3. The utilization is the average for the last minute.')
frAtmFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 2, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmFramerNormPrioLinkUtilFromIf.setDescription('This attribute is the utilization of the normal and high priority data traffic (interruptable traffic) received from the link as a percentage of the available bandwidth on the link. Note that this includes traffic with Transfer Priorities (TP) of 0, 6 and 9 and/or Emission Priority of 2 and 3. The utilization is the average for the last minute.')
frAtmLmi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3))
frAtmLmiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 1), )
if mibBuilder.loadTexts: frAtmLmiRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmLmi components.')
frAtmLmiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmLmiIndex"))
if mibBuilder.loadTexts: frAtmLmiRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiRowStatusEntry.setDescription('A single entry in the table represents a single frAtmLmi component.')
frAtmLmiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmLmi components. These components cannot be added nor deleted.')
frAtmLmiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmLmiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiStorageType.setDescription('This variable represents the storage type value for the frAtmLmi tables.')
frAtmLmiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmLmiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiIndex.setDescription('This variable represents the index for the frAtmLmi tables.')
frAtmLmiParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10), )
if mibBuilder.loadTexts: frAtmLmiParmsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiParmsTable.setDescription('This group contains the provisionable attributes of the LMI component.')
frAtmLmiParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmLmiIndex"))
if mibBuilder.loadTexts: frAtmLmiParmsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiParmsEntry.setDescription('An entry in the frAtmLmiParmsTable.')
frAtmLmiProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("vendorForum", 1), ("ansi", 2), ("itu", 3), ("autoConfigure", 4))).clone('autoConfigure')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiProcedures.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiProcedures.setDescription('This attribute selects the procedures to be used for the Local Management Interface. The following procedures are supported: none: no Local Management Interface procedures are running on this interface. This accommodates Frame Relay user equipment that has not implemented any LMI procedures. The remaining attributes of this group are ignored. vendorForum: Local Management Interface procedures from the Vendor Forum specification are supported on this interface. DLCI 1023 is used for the LMI protocol. This value cannot be used if the side attribute is both. ansi: Local Management Interface procedures from the ANSI specification are supported. DLCI 0 is used for the LMI protocol. itu: Local Management Interface procedures from the ITU-T specification are supported. DLCI 0 is used for the LMI protocol. Was previously ccitt. autoConfigure: The interface determines automatically which Local Management Interface procedures to use. This value cannot be used if the side attribute is user. The procedures currently in use can be seen in the operational attribute opProcedures.')
frAtmLmiAsyncStatusReport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiAsyncStatusReport.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiAsyncStatusReport.setDescription('This attribute selects the use of asynchronous PVC status report procedures as specified in ANSI, CCITT, and Vendor Forum. This attribute can be set to on or off. If procedures is set to none, this attribute is ignored.')
frAtmLmiErrorEventThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiErrorEventThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiErrorEventThreshold.setDescription('An event is defined as follows: (1) receipt of a STATUS ENQUIRY message; or (2) expiration of timer T392. An error event is (1) nonreceipt of STATUS ENQUIRY in T392 seconds; (2) invalid contents of a LMI message; (3) invalid receive sequence number. This attribute specifies the number of error events which, if they occur within eventCount events, cause a protocol error condition. The condition is cleared after eventCount sequential correct events occur. This attribute corresponds to the nN2 parameter described in the Vendor Forum Specification. It must be less than or equal to eventCount.')
frAtmLmiEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiEventCount.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiEventCount.setDescription('This attribute specifies the number of contiguous events within which no more than eventErrorThreshold error events are allowed. This attribute corresponds to the nN3 parameter described in the Vendor Forum Specification. It must be greater than or equal to errorEventThreshold.')
frAtmLmiCheckPointTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), )).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiCheckPointTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiCheckPointTimer.setDescription('This attribute selects the time (in seconds) within which a STATUS ENQUIRY message is expected. This attribute corresponds to the nT2 parameter described in the Vendor Forum Specification. It must be less than messageCountTimer.')
frAtmLmiMessageCountTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), )).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiMessageCountTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiMessageCountTimer.setDescription('This attribute selects the time (in seconds) within which at most five (this is a fixed value and corresponds to maximum message count in VendorForum) STATUS ENQUIRY messages are expected. This attribute applies only when the lmiProcedures is set to vendorForum. messageCountTimer must always be greater than checkPointTimer.')
frAtmLmiIgnoreActiveBit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiIgnoreActiveBit.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiIgnoreActiveBit.setDescription('This attribute specifies whether the Frame Relay LMI Active Bit (A-bit) has a bearing on the transfer of user data across this Frame Relay interface for both directions of traffic flow. When this attribute is set to yes, the A-bit status of a user DLCI connection does not affect data transfer. When this attribute is set to no, data received from the local interface will be discarded if an A-bit =0 condition exists towards the local user. Data being sent to the local interface is discarded if an A-bit = 0 condition exists towards the subnet.')
frAtmLmiSide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("network", 0), ("user", 1), ("both", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiSide.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiSide.setDescription('This attribute can be set to user, network, or both. When this attribute is set to user, USP LMI procedures are running. When this attribute is set to network, NSP LMI procedures are running. When this attribute is set to both, USPNSP LMI procedures are running. When the value is both, the procedures attribute must not be set to vendorForum. Setting the value to user when the procedures attribute is set to autoConfigure is disallowed semantically.')
frAtmLmiPvcConfigParmsInFsr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiPvcConfigParmsInFsr.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiPvcConfigParmsInFsr.setDescription('When this attribute is set to yes, additional Q.933 information elements are included in the LMI Full Status message to facilitate CPE PVC parameter configuring. When set to yes, the Check Prov command fails if the Lmi side is not set to network. When set to yes, Check Prov fails if the number of DLCIs on the FrUni is greater than 300. If the service is not a FrUni this attribute is ignored.')
frAtmLmiStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 11), )
if mibBuilder.loadTexts: frAtmLmiStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frAtmLmiStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmLmiIndex"))
if mibBuilder.loadTexts: frAtmLmiStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiStateEntry.setDescription('An entry in the frAtmLmiStateTable.')
frAtmLmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frAtmLmiOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frAtmLmiUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frAtmLmiPsiTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 12), )
if mibBuilder.loadTexts: frAtmLmiPsiTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiPsiTable.setDescription('This group provides the protocol status of the Local Management Interface.')
frAtmLmiPsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmLmiIndex"))
if mibBuilder.loadTexts: frAtmLmiPsiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiPsiEntry.setDescription('An entry in the frAtmLmiPsiTable.')
frAtmLmiProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("errorCondition", 0), ("normalCondition", 1), ("configuring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiProtocolStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiProtocolStatus.setDescription('This attribute indicates whether the LMI is in an error condition or whether the LMI procedures are behaving normally. When operating with no LMI protocol, this attribute is always set to normalCondition. When operating with LMI procedures, this attribute is set to errorCondition after n392 of the last n393 events are in error. The consequence of an errorCondition is that all DLCIs on this interface will become inactive in both directions. The errorCondition is cleared and a normalCondition is indicated when a sufficient number of events have occurred without error. In ANSI, this occurs when n393 consecutive good events take place. If the procedures attribute is set to autoConfigure, this attribute is set to configuring while adaptive LMI determines which LMI procedures are running on the link. A single LMI error event during auto configuration causes the attribute value to change to errorCondition. If during configuring no LMI message is received, an LMI errorCondition is raised after n392 x t392 seconds.')
frAtmLmiOpProcedures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("vendorForum", 1), ("ansi", 2), ("itu", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiOpProcedures.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiOpProcedures.setDescription('The opProcedures attribute indicates the procedures being used for the Local Management Interface. This attribute should be ignored if protocolStatus is not normalCondition. The following procedures are supported: none: Local Management Interface procedures are not running on this interface. This accommodates Frame Relay user equipment that has not implemented any LMI procedures. vendorForum: Local Management Interface procedures from the Vendor Forum specification are running on this interface. DLCI 1023 is used for the LMI protocol. ansi: Local Management Interface procedures from the ANSI specification are running. DLCI 0 is used for the LMI protocol. itu: Local Management Interface procedures from the ITU-T specification are running. DLCI 0 is used for the LMI protocol. Was previously ccitt. unknown: Local Management Interface procedures have yet to be determined by Adaptive LMI.')
frAtmLmiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13), )
if mibBuilder.loadTexts: frAtmLmiStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiStatsTable.setDescription('This group contains the operational statistics for the Frame Relay Local Management Interface.')
frAtmLmiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmLmiIndex"))
if mibBuilder.loadTexts: frAtmLmiStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiStatsEntry.setDescription('An entry in the frAtmLmiStatsTable.')
frAtmLmiKeepAliveStatusToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiKeepAliveStatusToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiKeepAliveStatusToIf.setDescription('This attribute counts the number of Local Management Interface keep alive status messages sent to the external user device in response to a status enquiry for keep alive status. When the maximum count is exceeded it wraps to zero.')
frAtmLmiFullStatusToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiFullStatusToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiFullStatusToIf.setDescription('This attribute counts the number of Local Management Interface full status messages sent to the external user device in response to a status enquiry for keep alive or full status. When the maximum count is reached it wraps to zero.')
frAtmLmiKeepAliveStatusEnqFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiKeepAliveStatusEnqFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiKeepAliveStatusEnqFromIf.setDescription('This attribute counts the number of Local Management Interface valid keep alive status enquiry messages received from the external user device. When the maximum count is reached it wraps to zero.')
frAtmLmiFullStatusEnqFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiFullStatusEnqFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiFullStatusEnqFromIf.setDescription('This attribute counts the number of Local Management Interface valid full status enquiry messages received from the external user device. When the maximum count is reached it wraps to zero.')
frAtmLmiNetworkSideEventHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiNetworkSideEventHistory.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiNetworkSideEventHistory.setDescription("This attribute displays the Local Management Interface network side procedure event history in order of occurrence. An event is represented by a single symbol. A '+' symbol indicates a good event. An 'X' symbol indicates a protocol error event. The leftmost event is the most recent to occur. The provisioned eventCount (nN3/ N393) dictates the maximum number of events displayed. A good event is triggered by receipt of a valid status enquiry message. An error event is one of three possibilities, either a nT2/T392 timer expiry, receipt of a status enquiry message with bad sequence numbers, or when lmiProcedures is provisioned to vendorForum and we receive more than nN4 status enquiry messages within the provisioned messageCountTimer (nT3).")
frAtmLmiProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiProtocolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiProtocolErrors.setDescription('This attribute counts the number of Local Management Interface protocol errors. It is the sum of the sequence (sequenceErrors), timeout (pollingVerifTimeouts) and too many status enquiry messages received within the messageCountTimer (nT3) errors. The too many status enquiries error only applies when lmiProcedures is set to vendorForum. When the maximum count is exceeded it wraps to zero.')
frAtmLmiUnexpectedIes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiUnexpectedIes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiUnexpectedIes.setDescription('This attribute counts the number of Local Management Interface frames received with an Information Element identifier that is unknown or unexpected. An unexpected Information Element is not a protocol error. When the maximum count is reached, this counter wraps to zero.')
frAtmLmiSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiSequenceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiSequenceErrors.setDescription('This attribute counts the number of Local Management Interface Status Enquiry message sequence errors. A sequence error is receipt of a Status Enquiry message with a receive sequence number not equal to the last send sequence number. When the maximum count is reached the counter wraps to zero.')
frAtmLmiUnexpectedReports = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiUnexpectedReports.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiUnexpectedReports.setDescription('This attribute counts the number of Local Management Interface frames received with an unknown or unexpected report type. An unexpected report type is not a protocol error. When the maximum count is reached the counter wraps to zero.')
frAtmLmiPollingVerifTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiPollingVerifTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiPollingVerifTimeouts.setDescription('This attribute counts the number of checkPointTImer (t392) timer expiries occurring on the Local Management Interface. When the maximum count is reached the counter wraps to zero.')
frAtmLmiKeepAliveEnqToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiKeepAliveEnqToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiKeepAliveEnqToIf.setDescription('This attribute counts the number of Local Management Interface keep alive enquiry status messages sent to the external user device for keep alive status. When the maximum count is reached it wraps to zero.')
frAtmLmiFullStatusEnqToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiFullStatusEnqToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiFullStatusEnqToIf.setDescription('This attribute counts the number of Local Management Interface full status messages sent to the external user device in response to a status enquiry for keep alive or full status. When the maximum count is reached it wraps to zero.')
frAtmLmiUserSideEventHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 13), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiUserSideEventHistory.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiUserSideEventHistory.setDescription("This attribute displays the Local Management Interface user side procedure event history in order of occurrence. An event is represented by a single symbol. A '+' symbol indicates a good event. An 'X' symbol indicates a protocol error event. The left most event is the most recent to occur. The provisioned eventCount (nN3/ N393) dictates the maximum number of events displayed. A good event is triggered by receipt of a valid status message. An error event is either a nT1/T391 timer expiry or receipt of a status message with bad sequence numbers.")
frAtmLmiStatusSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiStatusSequenceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiStatusSequenceErrors.setDescription('This attribute counts the number of Local Management Interface Status message sequence errors. A sequence error is receipt of a Status message with a receive sequence number not equal to the last send sequence number. When the maximum count is reached the counter wraps to zero.')
frAtmLmiNoStatusReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmLmiNoStatusReportCount.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiNoStatusReportCount.setDescription('This attribute counts the number of times when no status report or an invalid status report comes from the external network. This attribute is incremented in two cases: i) after a status enquiry is sent out and T391 timer expires without having a status report received. ii) an invalid status report is received. When the maximum count is reached it wraps to zero.')
frAtmLmiUspParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 14), )
if mibBuilder.loadTexts: frAtmLmiUspParmsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiUspParmsTable.setDescription('This group contains the provisionable attributes of the Local Management Interface user side procedure.')
frAtmLmiUspParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmLmiIndex"))
if mibBuilder.loadTexts: frAtmLmiUspParmsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiUspParmsEntry.setDescription('An entry in the frAtmLmiUspParmsTable.')
frAtmLmiFullStatusPollingCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiFullStatusPollingCycles.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiFullStatusPollingCycles.setDescription('This attribute specifies how frequently the Frame Relay UNI service should initiate a Status Enquiry for a full PVC status report. A polling cycle is a Status Enquiry and Status Report exchange. This attribute is used only if the side attribute is either user or both.')
frAtmLmiLinkVerificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 3, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(15, 15), ValueRangeConstraint(20, 20), ValueRangeConstraint(25, 25), ValueRangeConstraint(30, 30), )).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmLmiLinkVerificationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmLmiLinkVerificationTimer.setDescription('This attribute specifies how frequently the Frame Relay UNI service should initiate a Status Enquiry for link integrity verification. It must be less than checkPointTimer (t392). When the Lmi side is network, this attribute is ignored.')
frAtmDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4))
frAtmDlciRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 1), )
if mibBuilder.loadTexts: frAtmDlciRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlci components.')
frAtmDlciRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"))
if mibBuilder.loadTexts: frAtmDlciRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlci component.')
frAtmDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlci components. These components can be added and deleted.')
frAtmDlciComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciStorageType.setDescription('This variable represents the storage type value for the frAtmDlci tables.')
frAtmDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: frAtmDlciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciIndex.setDescription('This variable represents the index for the frAtmDlci tables.')
frAtmDlciStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 10), )
if mibBuilder.loadTexts: frAtmDlciStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frAtmDlciStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"))
if mibBuilder.loadTexts: frAtmDlciStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciStateEntry.setDescription('An entry in the frAtmDlciStateTable.')
frAtmDlciAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frAtmDlciOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frAtmDlciUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frAtmDlciABitTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 11), )
if mibBuilder.loadTexts: frAtmDlciABitTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciABitTable.setDescription('This group contains the A-Bit status information for this Data Link Connection Identifier.')
frAtmDlciABitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"))
if mibBuilder.loadTexts: frAtmDlciABitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciABitEntry.setDescription('An entry in the frAtmDlciABitTable.')
frAtmDlciABitStatusToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciABitStatusToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciABitStatusToIf.setDescription("This attribute contains the most recent A-bit status sent to the interface. The A-bit status is part of the LMI protocol, and indicates the remote end's willingness to accept data from the local interface. When an inactive setting is sent out, the Frame Relay service will discard any data offered from the local interface. When an active setting is sent out, the Frame Relay service tries to process all data offered from the local interface.")
frAtmDlciABitReasonToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 0), ("remoteUserSignaled", 1), ("localLmiError", 2), ("remoteLmiError", 3), ("localLinkDown", 4), ("remoteLinkDown", 5), ("pvcDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciABitReasonToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciABitReasonToIf.setDescription('This attribute provides the reason (if any) for an inactive status to be sent to the interface. This reason is notApplicable for an active status.')
frAtmDlciABitStatusFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciABitStatusFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciABitStatusFromIf.setDescription('This attribute indicates the most recent A-Bit status received from the interface.')
frAtmDlciABitReasonFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 0), ("remoteUserSignaled", 1), ("localLmiError", 2), ("localLinkDown", 4), ("pvcDown", 6), ("missingFromLmiReport", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciABitReasonFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciABitReasonFromIf.setDescription('This attribute provides the reason (if any) for an inactive status to be sent to the subnet. The value is notApplicable when the aBitStatusFromIf attribute is active. The value is remoteUserSignaled if the remote interface originating the A-Bit status detects that the virtual circuit is down at the remote network through the LMI protocol. The remote interface must be running network site LMI protocol for this A-Bit status reason to be sent. The value is localLmiError if the LMI protocol is down at this interface. The value is localLinkDown if the physical link is disabled at this interface. The value is pvcDown if no A-Bit status has been sent to this interface from the local network. The value is missingFromLmiReport if the remote interface did not provide a reason along with the inactive A-Bit status. DESCRIPTION')
frAtmDlciSpOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12), )
if mibBuilder.loadTexts: frAtmDlciSpOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpOpTable.setDescription('This group contains service parameters for the Dlci component.')
frAtmDlciSpOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"))
if mibBuilder.loadTexts: frAtmDlciSpOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpOpEntry.setDescription('An entry in the frAtmDlciSpOpTable.')
frAtmDlciMaximumFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8187))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciMaximumFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciMaximumFrameSize.setDescription('This attribute indicates the maximum number of octets which can be included in the information field. This definition does not include the FrameRelay header and CRC octets. This attribute corresponds to the dN1 parameter described in the Vendor Forum Specification.')
frAtmDlciRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciRateEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciRateEnforcement.setDescription('This attribute indicates whether rate enforcement is in effect for this user Data Link Connection on this FrAtm interface. When rate enforcement is on, Committed Information Rate (CIR) and DE=1 traffic will be measured and enforced. When rate enforcement is off, all frames from the user will be accepted and no modifications to the frame with respect to the DE bit will be made.')
frAtmDlciCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciCommittedInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciCommittedInformationRate.setDescription('This attribute indicates the committed information rate (CIR) in bits per second (bit/s) and represents the rate at which the network agrees to transfer information under normal conditions when rateEnforcement is on. This rate is measured over a measurement interval (t). This attribute is not applicable when rateEnforcement is off.')
frAtmDlciCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciCommittedBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciCommittedBurstSize.setDescription('This attribute indicates the committed burst size (Bc) in bits and represents the amount of data that a network agrees to transfer under normal conditions over a measurement interval (t) when rateEnforcement is on. Data marked with DE=1 is not accounted for in committed burst size. This attribute is not applicable when rateEnforcement is off.')
frAtmDlciExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciExcessBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciExcessBurstSize.setDescription('This attribute indicates the excess burst size (Be) in bits and represents the amount of uncommitted data that the network attempts to deliver over measurement interval (t) when rateEnforcement is on. Data marked DE=1 by the user or by the network is accounted for here. This attribute is not applicable ignored when rateEnforcement is off.')
frAtmDlciMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciMeasurementInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciMeasurementInterval.setDescription('This attribute indicates the time interval over which rates and burst sizes are measured. This attribute is not applicable when rateEnforcement is off.')
frAtmDlciEmissionPriorityToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciEmissionPriorityToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEmissionPriorityToIf.setDescription('This attribute indicates the emission priority of frames sent to the interface. If the value of FrAtm/n numberOfEmissionQs is 2, set the value of this attribute to either 0 or 1; if the value of FrAtm/n numberOfEmissionQs is 4, set the value of this attribute to one of 0, 1, 2, 3.')
frAtmDlciDlciType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("serviceInterworking", 0), ("networkInterworking", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDlciType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDlciType.setDescription('This attribute indicates the type of DLCI. A value of serviceInterworking indicates that a FrAtm/n Dlci/n Siwf component is present. A value of networkInterworking indicates that a FrAtm/n Dlci/n Niwf component is present.')
frAtmDlciTroubled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciTroubled.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciTroubled.setDescription('This attribute indicates whether or not the connection is in a troubled state. Connections may become troubled for the following reasons; if CAC failed to admit the call, or if one of the attributes aBitStatusToIf, aBitStatusFromIf goes inactive; otherwise it is set to no.')
frAtmDlciTroubledReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notApplicable", 0), ("notAdmitted", 1))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciTroubledReason.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciTroubledReason.setDescription('This attribute provides the reason (if any) for a troubled connection. A value of notApplicable indicates no current failures; either Connection Admission Control (CAC) is off, or call was admitted. A value of notAdmitted indicates the CAC algorithm fails to admit this connection. Check if there is a sufficient bandwidth allocation.')
frAtmDlciStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13), )
if mibBuilder.loadTexts: frAtmDlciStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciStatsTable.setDescription('This group contains the operational statistics for the Frame Relay Data Link Connection Identifier.')
frAtmDlciStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"))
if mibBuilder.loadTexts: frAtmDlciStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciStatsEntry.setDescription('An entry in the frAtmDlciStatsTable.')
frAtmDlciFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciFrmToIf.setDescription('This attribute counts the number of frames sent to the interface. When the maximum count is reached, the count wraps to zero.')
frAtmDlciFecnFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciFecnFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciFecnFrmToIf.setDescription('This attribute counts the number of frames sent to the interface with the Forward Explicit Congestion Notification (FECN) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciBecnFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciBecnFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciBecnFrmToIf.setDescription('This attribute counts the number of frames sent to the interface with the Backward Explicit Congestion Notification (BECN) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDeFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDeFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDeFrmToIf.setDescription('This attribute counts the number of frames sent to the interface with the Discard Eligibility (DE) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscCongestedToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscCongestedToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscCongestedToIf.setDescription('This attribute counts the number of frame discards at the Frame Relay service due to local congestion in the direction toward the interface. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscDeCongestedToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscDeCongestedToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscDeCongestedToIf.setDescription('This attribute counts the number of discarded frames, with the Discard Eligibility (DE) bit set, at the Frame Relay service, due to local congestion in the direction toward the interface. When the maximum count is reached, the count wraps to zero.')
frAtmDlciFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciFrmFromIf.setDescription('This attribute counts the number of frames received from the interface. Frames that are discarded due to error or excess are not counted. When the maximum count is reached, the count wraps to zero.')
frAtmDlciFecnFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciFecnFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciFecnFrmFromIf.setDescription('This attribute counts the number of frames received from the interface with the Forward Explicit Congestion Notification (FECN) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciBecnFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciBecnFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciBecnFrmFromIf.setDescription('This attribute counts the number of frames received from the interface with the Backward Explicit Congestion Notification (BECN) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciEfciFrmFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciEfciFrmFromNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEfciFrmFromNetwork.setDescription('This attribute counts the number of frames received from the interworking function with the Explicit Forward Congestion Indication (EFCI) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDeFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDeFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDeFrmFromIf.setDescription('This attribute counts the number of frames received from the interface with the Discard Eligibility (DE) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciExcessFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciExcessFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciExcessFrmFromIf.setDescription('This attribute counts the number of frames received from the interface with the Discard Eligibility (DE) bit clear, but subsequently set by the network due to rate enforcement. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscExcessFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscExcessFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscExcessFromIf.setDescription('This attribute counts the number of frames which were discarded due to rate enforcement. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscFrameAbit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscFrameAbit.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscFrameAbit.setDescription('This attribute counts the number of frame discards at the Frame Relay Service, due to an inactive PVC status, in the direction toward the interworking function. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscCongestedFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscCongestedFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscCongestedFromIf.setDescription('This attribute counts the number of frame discards at the Frame Relay service due to local congestion in the direction toward the interworking function. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscDeCongestedFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscDeCongestedFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscDeCongestedFromIf.setDescription('This attribute counts the number of discarded frames, with the Discard Eligibility (DE) bit set due to local congestion in the direction toward the interworking function. When the maximum count is reached, the count wraps to zero.')
frAtmDlciErrorShortFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciErrorShortFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciErrorShortFrmFromIf.setDescription('This attribute counts the number of frames received with 0 octets in the information field. When the maximum count is reached, the count wraps to zero.')
frAtmDlciErrorLongFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciErrorLongFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciErrorLongFrmFromIf.setDescription('This attribute counts the number of frames received with number of octets in the information field greater than the subscribed maximum. When the maximum count is reached, the count wraps to zero. The hardware ignores frame lengths greater than the hardware receive buffer, and therfore does not includes them in this count.')
frAtmDlciBecnFrmSetByService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciBecnFrmSetByService.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciBecnFrmSetByService.setDescription('This attribute counts the number of frames with BECN set by the Frame Relay service. It is incremented when the Frame Relay service sets BECN on a frame upon detecting local congestion. This count is incremented regardless of whether the frame already bears a set BECN bit since its use is to determine the place of congestion. When the maximum count is reached, the count wraps to zero.')
frAtmDlciBytesToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciBytesToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciBytesToIf.setDescription('This attribute counts the number of bytes sent out the interface. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDeBytesToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDeBytesToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDeBytesToIf.setDescription('This attribute counts the number of bytes sent to the interface with the Discard Eligibility (DE) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscCongestedToIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscCongestedToIfBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscCongestedToIfBytes.setDescription('This attribute counts the number of byte discards at the Frame Relay service due to local congestion in the direction toward the link. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscDeCongestedToIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscDeCongestedToIfBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscDeCongestedToIfBytes.setDescription('This attribute counts the number of discard eligible (DE=1) byte discards at the Frame Relay service due to local congestion in the direction toward the link. When the maximum count is reached, the count wraps to zero.')
frAtmDlciBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciBytesFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciBytesFromIf.setDescription('This attribute counts the number of bytes received from the interface. Bytes that are discarded due to error or excess are not counted. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDeBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDeBytesFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDeBytesFromIf.setDescription('This attribute counts the number of bytes received from the interface with the Discard Eligibility (DE) bit set. When the maximum count is reached, the count wraps to zero.')
frAtmDlciExcessBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciExcessBytesFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciExcessBytesFromIf.setDescription('This attribute counts the number of bytes received from the interface with the Discard Eligibility (DE) bit clear, but subsequently set by the network due to rate enforcement. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscExcessFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscExcessFromIfBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscExcessFromIfBytes.setDescription('This attribute counts the number of bytes which were discarded due to rate enforcement. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscByteAbit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscByteAbit.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscByteAbit.setDescription('This attribute counts the bytes number of which were discarded due to the A-bit being turned off. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscCongestedFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscCongestedFromIfBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscCongestedFromIfBytes.setDescription('This attribute counts the number of byte discards at the Frame Relay service due to local congestion in the direction toward the interworking function. When the maximum count is reached, the count wraps to zero.')
frAtmDlciDiscDeCongestedFromIfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscDeCongestedFromIfBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscDeCongestedFromIfBytes.setDescription('This attribute counts the number of discard eligible (DE=1) byte discards at the Frame Relay service due to local congestion in the direction toward the interworking function. When the maximum count is reached, the count wraps to zero.')
frAtmDlciErrorShortBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciErrorShortBytesFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciErrorShortBytesFromIf.setDescription('This attribute counts the number of bytes received with 0 octets in the information field. When the maximum count is reached, the count wraps to zero.')
frAtmDlciErrorLongBytesFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 13, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciErrorLongBytesFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciErrorLongBytesFromIf.setDescription('This attribute counts the number of bytes received when the number of octets in the information field is greater than the subscribed maximum. The hardware ignores bytes lengths greater than the hardware receive buffer and therefore does not include them in this count. When the maximum count is reached, the count wraps to zero.')
frAtmDlciCalldTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 14), )
if mibBuilder.loadTexts: frAtmDlciCalldTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciCalldTable.setDescription('This group contains the operational values for the FrAtm Dlci call data. If the accountingEnabled attribute is no, then this group except for accountingEnabled is not displayed.')
frAtmDlciCalldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"))
if mibBuilder.loadTexts: frAtmDlciCalldEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciCalldEntry.setDescription('An entry in the frAtmDlciCalldTable.')
frAtmDlciAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciAccountingEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciAccountingEnabled.setDescription('This attribute indicates whether accounting is enabled. To enable accounting, the FrAtm Ca accountCollection attribute must be non- empty and FrAtm Dlci Sp accounting attribute must be on.')
frAtmDlciAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciAccountingEnd.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciAccountingEnd.setDescription('This attribute indicates whether this DLCI represents the called or calling end of the connection. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 14, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 28)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciCorrelationTag.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciCorrelationTag.setDescription('This attribute indicates the unique string which identifies this connection. The value of this operational attribute can be provisioned in the correlationTag attribute of either the Siwf Npvc, Siwf Spvc, or Niwf Spvc subcomponents. For the Siwf Spvc and Niwf Spvc cases, when the provisionable correlationTag is an empty string, then this attribute receives the value of a system- generated correlationTag. Downstream processing uses this attribute to correlate accounting records issued at different nodes in the network. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciIntTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15), )
if mibBuilder.loadTexts: frAtmDlciIntTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciIntTable.setDescription('This group contains the operational statistics for the FrAtm Dlci interval data.')
frAtmDlciIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"))
if mibBuilder.loadTexts: frAtmDlciIntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciIntEntry.setDescription('An entry in the frAtmDlciIntTable.')
frAtmDlciStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 1), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciStartTime.setDescription('This attribute indicates the start time of this interval. A new interval is started each time an accounting record is generated and call at a setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciTotalIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 2), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciTotalIngressBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciTotalIngressBytes.setDescription('This attribute counts the total payload bytes in received from the link since the start of the interval. To calculate total valid payload bytes received from link, subtract discardedBytes from this attribute. The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated or at call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciTotalEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 3), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciTotalEgressBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciTotalEgressBytes.setDescription('This attribute counts the total payload bytes sent to the link since the start of the interval. The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated or at call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciEirIngressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 4), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciEirIngressBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEirIngressBytes.setDescription('This attribute counts the total valid payload bytes in frames with the Discard Eligibility (DE) bit set to 1 received from the link since the start of the interval. Subtract this attribute and discardedBytes from totalIngressBytes to calculate total valid payload bytes in frames received from the link, with the DE bit set to 0. The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated or at call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciEirEgressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 5), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciEirEgressBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEirEgressBytes.setDescription('This attribute counts the total valid payload bytes in frames with the Discard Eligibility (DE) bit set sent to the link since the start of the interval. Subtract the value of this attribute from totalEgressBytes to calculate total valid payload bytes in frames, with DE set to 0, sent to the link. The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated or at call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 6), Unsigned64().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscardedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscardedBytes.setDescription('This attribute counts the total payload bytes in invalid frames received from the link and discarded at the DLCI since the start of the interval. This count is a sum of octets in frames discarded due to: frames too long or too short; A-Bit off; or to rate enforcement. The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated or at call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciTotalIngressFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciTotalIngressFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciTotalIngressFrames.setDescription('This attribute counts the total number of frames received from the link since the start of the interval. To calculate the total valid number of frames received from the link, subtract discardedFrames from this attribute. The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated or at call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciTotalEgressFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciTotalEgressFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciTotalEgressFrames.setDescription('This attribute counts the total number of frames sent to the link since the start of the interval. The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated or at call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciEirIngressFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciEirIngressFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEirIngressFrames.setDescription('This attribute counts the number of valid frames with the Discard Eligibility (DE) bit set to 1 received from the link since the start of the interval. Subtract this attribute and discardedFrames from totalIngressFrames to calculate total valid frames received from the link, with the DE bit set to 0. The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated or at call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciEirEgressFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciEirEgressFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEirEgressFrames.setDescription('This attribute counts the number of frames with the Discard Eligibility (DE) bit set sent to the link since the start of the interval. Subtract the value of this attribute from totalEgressFrames to calculate total frames, with DE set to 0, sent to the link.The start of the interval is captured in the startTime attribute. The count is reset to zero when an accounting record is generated call setup. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciDiscardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciDiscardedFrames.setDescription('This attribute counts the number of invalid frames received from the link and discarded at the DLCI. The count is reset to zero when an accounting record is generated or at call setup. The count is a sum of frames discarded due to: frames too long or too short; A-Bit is off; or rate enforcement. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciElapsedDifference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 15, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciElapsedDifference.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciElapsedDifference.setDescription('This attribute indicates the elapsed time representing the of this interval data. It is the elapsed time in 0.1 second increments since the start of the interval. If the accountingEnabled attribute is no, then this attribute is not displayed.')
frAtmDlciSp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2))
frAtmDlciSpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 1), )
if mibBuilder.loadTexts: frAtmDlciSpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciSp components.')
frAtmDlciSpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSpIndex"))
if mibBuilder.loadTexts: frAtmDlciSpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciSp component.')
frAtmDlciSpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciSp components. These components cannot be added nor deleted.')
frAtmDlciSpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciSpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpStorageType.setDescription('This variable represents the storage type value for the frAtmDlciSp tables.')
frAtmDlciSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciSpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpIndex.setDescription('This variable represents the index for the frAtmDlciSp tables.')
frAtmDlciSpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10), )
if mibBuilder.loadTexts: frAtmDlciSpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpProvTable.setDescription('This group contains the provisionable attributes for the Data Link Connection Identifier. These attributes reflect the service parameters specific to this instance of DLCI. The congestion control attributes in this group are defined in T1.606 Addendum 1.')
frAtmDlciSpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSpIndex"))
if mibBuilder.loadTexts: frAtmDlciSpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpProvEntry.setDescription('An entry in the frAtmDlciSpProvTable.')
frAtmDlciSpMaximumFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8187)).clone(2100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpMaximumFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpMaximumFrameSize.setDescription('This attribute specifies the maximum number of octets which may be included in the information field. The Frame Relay header and CRC octets are not included in this definition. This attribute corresponds to the dN1 parameter described in the Vendor Forum Specification.')
frAtmDlciSpRateEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpRateEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpRateEnforcement.setDescription('This attribute specifies whether rate enforcement is in effect for this user data link connection. When rateEnforcement is on, the CIR and De=1 traffic will be measured and enforced. When rateEnforcement is off, all frames from the user are accepted and no modifications to the frame with respect to the De bit will be made.')
frAtmDlciSpCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpCommittedInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpCommittedInformationRate.setDescription('This attribute specifies the committed information rate (CIR). It represents the rate at which the network agrees to transfer information under normal conditions when rate enforcement is in effect. When rate enforcement is not in effect, this attribute is ignored. Determination of the actual CIR is based on committedInformationRate, committedBurstSize and a measurement interval. The measurement interval is determined internally when committedInformationRate has a non-zero value. Otherwise, it is based on measurementInterval which must be explicitly provisioned. Note: The committedBurstSize must have a value of 0 when rate enforcement is in effect and committedInformationRate has a value of 0.')
frAtmDlciSpCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpCommittedBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpCommittedBurstSize.setDescription('This attribute specifies the committed burst size (Bc). It represents the amount of data that a network agrees to transfer under normal conditions over a measurement interval when rate enforcement is in effect. Data marked DE=1 is not accounted for in the committed burst size. When rate enforcement is not in effect, this attribute is ignored. Note: The committedInformationRate must have a value of 0 when rate enforcement is in effect and committedBurstSize has a value of 0.')
frAtmDlciSpExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpExcessBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpExcessBurstSize.setDescription('This attribute specifies the excess burst size (Be). It represents the amount of uncommitted data that the network will attempt to deliver over a measurement interval when rate enforcement is in effect. Data marked DE=1 by the user or by the network is accounted for here. committedInformationRate, committedBurstSize, and excessBurstSize cannot all be zero when rate enforcement is in effect.')
frAtmDlciSpMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpMeasurementInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpMeasurementInterval.setDescription('This attribute specifies the time interval over which rates and burst sizes are measured when rate enforcement is in effect. When rate enforcement is in effect and both committedInformationRate and committedBurstSize have values of zero, this attribute must have a non-zero value. When rate enforcement is not in effect or when committedInformationRate and committedBurstSize have non-zero values, this attribute is ignored. When committedInformationRate and committedBurstSize have non-zero values, the time interval is internally calculated. In this situation, measurementInterval is ignored, and it does not represent the time interval.')
frAtmDlciSpEmissionPriorityToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("low", 0), ("high", 3))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpEmissionPriorityToIf.setStatus('obsolete')
if mibBuilder.loadTexts: frAtmDlciSpEmissionPriorityToIf.setDescription('This attribute specifies the emission priority of frames sent to the interface. The high priority frames in the high priority frame queue will be served before the low priority frames in the low priority queue. This attribute is obsoleted. During migration, its value will be transferred to emissionPriToIf.')
frAtmDlciSpEmissionPrioToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpEmissionPrioToIf.setStatus('obsolete')
if mibBuilder.loadTexts: frAtmDlciSpEmissionPrioToIf.setDescription('This attribute specifies the emission priority of frames sent to the interface. Frames in a higher priority queue will be sent before frames in a lower priority queue. The value of this attribute must be greater than or equal to 0, and less than the value of the provisionable attribute numberOfEmissionQs.')
frAtmDlciSpAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSpAccounting.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSpAccounting.setDescription('This attribute allows the operator to control accounting for this DLCI. To enable accounting data collection and record generation, the value of this attribute must be on and at least one of the accountCollection reasons in the FrAtm Ca component must be set.')
frAtmDlciSiwf = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3))
frAtmDlciSiwfRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 1), )
if mibBuilder.loadTexts: frAtmDlciSiwfRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciSiwf components.')
frAtmDlciSiwfRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciSiwf component.')
frAtmDlciSiwfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciSiwf components. These components can be added and deleted.')
frAtmDlciSiwfComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciSiwfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfStorageType.setDescription('This variable represents the storage type value for the frAtmDlciSiwf tables.')
frAtmDlciSiwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciSiwfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfIndex.setDescription('This variable represents the index for the frAtmDlciSiwf tables.')
frAtmDlciSiwfConnOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 11), )
if mibBuilder.loadTexts: frAtmDlciSiwfConnOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfConnOpTable.setDescription('This group contains operational attributes for the ATM connection.')
frAtmDlciSiwfConnOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfConnOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfConnOpEntry.setDescription('An entry in the frAtmDlciSiwfConnOpTable.')
frAtmDlciSiwfDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dp1", 1), ("dp2", 2), ("dp3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfDiscardPriority.setDescription('This attribute indicates the discard priority of frames sent to and received from the ATM connection. When discardPriority is dp3 the frames belonging to this connection will be discarded first when the FrAtm/n Dlci/n Siwf and the ATM End-Point experience congestion. When discardPriority is dp2 the frames belonging to this connection will be discarded after all the dp3 priority frames are discarded when the FrAtm/n Dlci/n Siwf and the ATM End-Point experience congestion. When discardPriority is dp1 the frames belonging to this connection will be discarded after all the dp2 and dp3 priority frames are discarded when the FrAtm/n Dlci/n Siwf and the ATM End-Point experience congestion.')
frAtmDlciSiwfAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("ubr", 0), ("cbr", 1), ("rtVbr", 2), ("nrtVbr", 3), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmServiceCategory.setDescription('This attribute indicates the ATM service category that is used for this connection. This attribute is only displayed for SPVCs.')
frAtmDlciSiwfTrafficParmConvPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("notApplicable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfTrafficParmConvPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfTrafficParmConvPolicy.setDescription('This attribute indicates the traffic parameter conversion policy that is being used for this connection. For Npvcs, this attribute is not displayed. Policy 3 characterizes the traffic in the following way: - ATM traffic descriptor type 6 is selected - ATM service category rtVbr and nrtVbr supported only - PCR0+1 is based on AR - SCR0+1 is based on CIR and EIR - MBS0+1 is based on Bc, Be, CIR, EIR and AR - Takes into account that the instantaneous rate of the frame relay stream can be above CIR and up to the AR. Policy 4 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected. Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by UPC traffic policer. - PCR0+1 is based on AR - SCR0 is based on CIR - MBS0 is based on Bc, CIR, and AR - There is no direct characterization of EIR. The allowed EIR can be derived using the difference between the AR and CIR. Policy 5 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected. Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by UPC traffic policer - ATM service category rtVbr and nrtVbr supported only - PCR0+1 is based on CIR and EIR - SCR0 is based on the CIR - MBS0 is based on the CIR - The maximum PCR is no longer based on the AR but rather on the CIR and EIR or CIR. Policy 6 characterizes the traffic in the following way: - ATM traffic descriptor type 3 is selected - ATM service category ubr, cbr, rtVbr and nrtVbr supported only - PCR0+1 is based only on CIR. DESCRIPTION')
frAtmDlciSiwfAvgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8187))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfAvgFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAvgFrameSize.setDescription('This attribute indicates the average frame size that is used for this connection as part of the traffic parameter conversion policy. Average frame size is not applicable for Npvcs, and therefore it is not displayed.')
frAtmDlciSiwfRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 11, 1, 8), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfRemoteAddress.setDescription('This attribute indicates the remote address (native E.164, native X.121 or NSAP) for this connection. This attribute is only diplayed for SPVCs.')
frAtmDlciSiwfRemoteConnectionIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 11, 1, 9), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfRemoteConnectionIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfRemoteConnectionIdentifier.setDescription("This attribute indicates the remote connection identifier. This identifier is either a remote Atm Vpi.Vci logical channel number or a remote Frame Relay Dlci logical channel number. The remote Atm Vpi.Vci logical channel number is displayed as 'Vpi.Vci'. and the remote Frame Relay Dlci logical channel number is displayed as '0.remoteDlci'. For NPVCs, this attribute is not diplayed.")
frAtmDlciSiwfSdOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12), )
if mibBuilder.loadTexts: frAtmDlciSiwfSdOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdOpTable.setDescription('This group contains operational information for a Siwf component.')
frAtmDlciSiwfSdOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfSdOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdOpEntry.setDescription('An entry in the frAtmDlciSiwfSdOpTable.')
frAtmDlciSiwfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("translationMode", 0), ("transparentMode", 1), ("speTranslationMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfMode.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfMode.setDescription('This attribute indicates the mode of interoperability between the Frame Relay and ATM connections regarding upper layer protocol encapsulations. A value of translationMode indicates that the interworking function performs translation between RFC 1490 and RFC 1483 encapsulated headers, including routed protocol translation, bridged protocol translation, and connection oriented protocol translation (except for RFC 1490 connection oriented protocol without RFC 1490 header, which is done in speTranslationMode). A value of transparentMode indicates that the interworking function forwards data without altering the upper layer user protocol encapsulation. Transparent mode is selected when the upper layer user protocol encapsulation methods are compatible between terminal equipments. A value of speTranslationMode indicates that the interworking function performs single protocol translation between RFC 1490 with no header and RFC 1483 encapsulated packets.')
frAtmDlciSiwfDeToClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfDeToClpMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfDeToClpMapping.setDescription('This attribute indicates the type of DE to CLP mapping that is performed in the Frame Relay to ATM direction. A value of preserve indicates that the DE field in a Q.922 core frame is copied to the ATM CLP field of every cell containing the information of that frame. A value of always0 indicates that the CLP field of every generated ATM cell is always 0. A value of always1 indicates that the CLP field of every generated ATM cell is always1.')
frAtmDlciSiwfClpToDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfClpToDeMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfClpToDeMapping.setDescription('This attribute indicates the type of CLP to DE mapping that is performed in the ATM to Frame Relay direction. A value of preserve indicates that the DE field of the Q.922 Core frame is set when one or more ATM cells belonging to an AAL5 frame have their CLP field set. A value of always0 indicates that the DE field of the Q.922 Core frame is always set to 0. A value of always1 indicates that the DE field of the Q.922 Core frame is always set to 1.')
frAtmDlciSiwfFecnToEfciMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("always0", 0), ("preserve", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfFecnToEfciMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfFecnToEfciMapping.setDescription('This attribute indicates the type of FECN to EFCI mapping that is performed in the Frame Relay to ATM direction. A value of preserve indicates that the FECN field in a Q.922 Core frame is copied directly to the ATM EFCI field of every cell. A value of always0 indicates that the EFCI field in every ATM cell generated is set to 0.')
frAtmDlciSiwfCrToUuMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("always0", 0), ("preserve", 2))).clone('preserve')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfCrToUuMapping.setStatus('obsolete')
if mibBuilder.loadTexts: frAtmDlciSiwfCrToUuMapping.setDescription('This attribute indicates the type of CR to UU mapping that is performed in the Frame Relay to ATM direction. A value of preserve indicates that the CR field in the Q.922 Core frame is mapped directly to the ATM UU field of every cell generated by the AAL5 segmentation process. A value of always0 indicates that the UU field in every ATM cell generated is set to 0.')
frAtmDlciSiwfTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 253))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("notApplicable", 253)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfTransferPriority.setDescription('This attribute indicates the transfer priority used to establish the connection. For Npvcs, the value will be notApplicable.')
frAtmDlciSiwfAssignedBandwidthPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfAssignedBandwidthPool.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAssignedBandwidthPool.setDescription('This attribute specifies the bandwidth pool which is used by this Dlci.')
frAtmDlciSiwfSiwfSpvcOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13), )
if mibBuilder.loadTexts: frAtmDlciSiwfSiwfSpvcOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSiwfSpvcOpTable.setDescription('This group contains operational attributes for the FrAtm Dlci Siwf Spvc connection.')
frAtmDlciSiwfSiwfSpvcOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfSiwfSpvcOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSiwfSpvcOpEntry.setDescription('An entry in the frAtmDlciSiwfSiwfSpvcOpTable.')
frAtmDlciSiwfPeakCellRate0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfPeakCellRate0.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfPeakCellRate0.setDescription('This attribute indicates the Peak Cell Rate (PCR) of the ATM VCC to which this interworking function is linked for all cells (with CLP=0 and CLP=1). The pcr0 is derived from the remote end traffic parameters using the conversion policy of the transferPriorityMapping. For NPVCs, this attribute is not displayed.')
frAtmDlciSiwfPeakCellRate01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfPeakCellRate01.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfPeakCellRate01.setDescription('This attribute indicates the Peak Cell Rate (PCR) of the ATM VCC to which this interworking function is linked for all cells (with CLP=0 and CLP=1). The pcr01 is derived from the remote end traffic parameters using the conversion policy of the transferPriorityMapping. For NPVCs, this attribute is not displayed.')
frAtmDlciSiwfSustainedCellRate0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfSustainedCellRate0.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSustainedCellRate0.setDescription('This attribute indicates the Sustained Cell Rate (SCR) of the ATM VCC to which this interworking function is linked for high priority cells (with CLP=0). The scr0 is derived from the remote end traffic parameters using the conversion policy of the transferPriorityMapping. For NPVCs, this attribute is not dispalyed.')
frAtmDlciSiwfSustainedCellRate01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfSustainedCellRate01.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSustainedCellRate01.setDescription('This attribute indicates the Sustained Cell Rate (SCR) of the ATM VCC that to which this interworking function is linked for all cells (with CLP=0 and CLP=1). The scr01 is derived from the remote end traffic parameters using the conversion policy of the transferPriorityMapping. For NPVCs, this attribute is not dispalyed.')
frAtmDlciSiwfMaximumBurstSize0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfMaximumBurstSize0.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfMaximumBurstSize0.setDescription('This attribute indicates the Maximum Burst Size (MBS) of the ATM VCC to which this interworking function is linked for high priority cells (with CLP=0). The mbs0 is derived from the remote end traffic parameters using the conversion policy of the transferPriorityMapping. For NPVCs, this attribute is not dispalyed.')
frAtmDlciSiwfMaximumBurstSize01 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfMaximumBurstSize01.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfMaximumBurstSize01.setDescription('This attribute indicates the Maximum Burst Size (MBS) of the ATM VCC to which this interworking function is linked for all cells (with CLP=0 and CLP=1). The mbs01 is derived from the remote end traffic parameters using the conversion policy of the transferPriorityMapping. For NPVCs, this attribute is not displayed.')
frAtmDlciSiwfEquivalentBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfEquivalentBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfEquivalentBitRate.setDescription('This attribute indicates the access reserved bandwidth for this FR- ATM connection when CAC is on. If a connection is subcribed to CIR only or CIR plus EIR service, the EBR reserved is CIR. If a connection is subcribed to EIR only service, the EBR reserved is 0.')
frAtmDlciSiwfType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("master", 0), ("slave", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfType.setDescription('This attribute indicates if the component provisioned is a calling or called end. If the value is master, the Dlci Siwf Spvc component is provisioned as a calling end and is responsible for originating the call to set up the ATM VCC. If the value is slave, this Dlci Siwf component is provisioned as a called end and is responsible for terminating call setup requests from the remote end. This attribute is not displayed for NPVCs.')
frAtmDlciSiwfVccClearCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfVccClearCause.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfVccClearCause.setDescription('This attribute indicates the cause value of the last release message received from the network. This attribute is not displayed for NPVCs. Please refer to ATM User-Network Interface Specification for possible clear causes.')
frAtmDlciSiwfVccCauseDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 13, 1, 15), HexString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfVccCauseDiag.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfVccCauseDiag.setDescription('This attribute indicates the diagnostic value of the last release message received from the network. This attribute is not displayed for NPVCs. Please refer to ATM User-Network Interface Specification for possible diagnostic values.')
frAtmDlciSiwfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 14), )
if mibBuilder.loadTexts: frAtmDlciSiwfStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfStatsTable.setDescription('This group contains statistics for the Siwf component.')
frAtmDlciSiwfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfStatsEntry.setDescription('An entry in the frAtmDlciSiwfStatsTable.')
frAtmDlciSiwfUnknown1490Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfUnknown1490Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfUnknown1490Frames.setDescription('This attribute counts the number of frames received from the interface that have a frame header that is not recognized by the RFC 1490. When the maximum count is reached, it wraps to zero.')
frAtmDlciSiwfInvalid1490Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfInvalid1490Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfInvalid1490Frames.setDescription('This attribute counts the number of frames received from the interface that have an invalid frame header. An invalid frame header occurs when the frame has less than the expected number of bytes. When the maximum count is reached, the count wraps to zero.')
frAtmDlciSiwfLastUnknown1490ProtocolHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 14, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfLastUnknown1490ProtocolHeader.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfLastUnknown1490ProtocolHeader.setDescription('This attribute contains the most recent unrecognized protocol header that was received from the interface. All the RFC 1490 protocols described in sections 5.3.1.1 through 5.3.1.3 of FRF.8 are supported, except ARP is not supported.')
frAtmDlciSiwfUnknown1483Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfUnknown1483Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfUnknown1483Frames.setDescription('This attribute counts the number of frames received from the ATM connection that have a frame header that is not recognized by the RFC 1483. When the maximum count is reached, it wraps to zero.')
frAtmDlciSiwfInvalid1483Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfInvalid1483Frames.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfInvalid1483Frames.setDescription('This attribute counts the number of frames received from the ATM connection that have an invalid frame header. An invalid frame header occurs when the frame has less than the expected number of bytes. When the maximum count is reached, it wraps to zero.')
frAtmDlciSiwfLastUnknown1483ProtocolHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 14, 1, 6), HexString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfLastUnknown1483ProtocolHeader.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfLastUnknown1483ProtocolHeader.setDescription('This attribute identifies the most recent unrecognized protocol header that was received from the ATM connection. All the RFC 1483 protocols described in sections 5.3.1.1 through 5.3.1.3 of FRF.8 are supported except ARP.')
frAtmDlciSiwfSd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2))
frAtmDlciSiwfSdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 1), )
if mibBuilder.loadTexts: frAtmDlciSiwfSdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciSiwfSd components.')
frAtmDlciSiwfSdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfSdIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfSdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciSiwfSd component.')
frAtmDlciSiwfSdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciSiwfSd components. These components can be added and deleted.')
frAtmDlciSiwfSdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfSdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciSiwfSdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfSdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdStorageType.setDescription('This variable represents the storage type value for the frAtmDlciSiwfSd tables.')
frAtmDlciSiwfSdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciSiwfSdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdIndex.setDescription('This variable represents the index for the frAtmDlciSiwfSd tables.')
frAtmDlciSiwfSdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 10), )
if mibBuilder.loadTexts: frAtmDlciSiwfSdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdProvTable.setDescription('This group contains provisionable attributes for the parent Siwf component.')
frAtmDlciSiwfSdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfSdIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfSdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdProvEntry.setDescription('An entry in the frAtmDlciSiwfSdProvTable.')
frAtmDlciSiwfSdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("translationMode", 0), ("transparentMode", 1), ("speTranslationMode", 2), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSdMode.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdMode.setDescription('This attribute specifies the mode of interoperability between the Frame Relay and ATM connections regarding upper layer protocol encapsulations. When translationMode is selected, the interworking function performs translations between RFC 1490 and RFC 1483 encapsulated headers, including routed protocol translation, bridged protocol translation, and connection oriented protocol translation (except for RFC 1490 connection oriented protocol without RFC 1490 header, which is done in speTranslationMode). A value of transparentMode indicates that the interworking function forwards data without altering the upper layer user protocol encapsulation. Transparent mode is selected when the upper layer user protocol encapsulation methods are compatible between terminal equipments. A value of speTranslationMode indicates that the interworking function performs single protocol translation between RFC 1490 with no header and RFC 1483 encapsulated packets. The default value is sameAsInterface, which means as defined in FrAtm/n Ca sdMode.')
frAtmDlciSiwfSdDeToClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSdDeToClpMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdDeToClpMapping.setDescription('This attribute specifies the DE to CLP mapping that is performed in the Frame Relay to ATM direction. When preserve is selected, the DE field in the Q.922 core frame is mapped to the ATM CLP field of every cell generated by the segmentation process of the AAL5 PDU containing the information of that frame. When always0 is selected, the CLP field of every ATM cell generated by the segmentation process of the AAL5 PDU containing the information of that frame is always set to 0. When always1 is selected, the CLP field of every ATM cell generated by the segmentation process of the AAL5 PDU containing the information of that frame is always set to 1.')
frAtmDlciSiwfSdClpToDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSdClpToDeMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdClpToDeMapping.setDescription('This attribute specifies the type of CLP to DE mapping that is performed in the ATM to Frame Relay to direction. When preserve is selected, the DE field of the Q.922 Core frame is set when one or more ATM cells belonging to an AAL5 frame have their CLP field set. When always0 is selected, the DE field of the Q.922 Core frame is always set to 0. When always1 is selected, the DE field of the Q.922 Core frame is always set to 1.')
frAtmDlciSiwfSdFecnToEfciMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 255))).clone(namedValues=NamedValues(("always0", 0), ("preserve", 2), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSdFecnToEfciMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSdFecnToEfciMapping.setDescription('This attribute specifies the type of FECN to EFCI mapping that is performed in the Frame Relay to ATM direction. When preserve is selected, the FECN field in the Q.922 Core frame is mapped directly to the ATM EFCI field of every cell generated by the AAL5 segmentation process. When always0 is selected, the EFCI field in every ATM cell generated is set to 0.')
frAtmDlciSiwfSdCrToUuMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 255))).clone(namedValues=NamedValues(("always0", 0), ("preserve", 2), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSdCrToUuMapping.setStatus('obsolete')
if mibBuilder.loadTexts: frAtmDlciSiwfSdCrToUuMapping.setDescription('This attribute indicates the type of CR to UU mapping that is performed in the Frame Relay to ATM direction. A value of preserve indicates that the CR field in the Q.922 Core frame is mapped directly to the ATM UU field of every cell generated by the AAL5 segmentation process. A value of always0 indicates that the UU field in every ATM cell generated is set to 0.')
frAtmDlciSiwfNPvc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3))
frAtmDlciSiwfNPvcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 1), )
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciSiwfNPvc components.')
frAtmDlciSiwfNPvcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfNPvcIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciSiwfNPvc component.')
frAtmDlciSiwfNPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciSiwfNPvc components. These components can be added and deleted.')
frAtmDlciSiwfNPvcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciSiwfNPvcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcStorageType.setDescription('This variable represents the storage type value for the frAtmDlciSiwfNPvc tables.')
frAtmDlciSiwfNPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcIndex.setDescription('This variable represents the index for the frAtmDlciSiwfNPvc tables.')
frAtmDlciSiwfNPvcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 10), )
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcProvTable.setDescription('This group contains provisionable attributes for the NPvc component.')
frAtmDlciSiwfNPvcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfNPvcIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcProvEntry.setDescription('An entry in the frAtmDlciSiwfNPvcProvTable.')
frAtmDlciSiwfNPvcAtmConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcAtmConnection.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcAtmConnection.setDescription('This attribute specifies the ATM connection to which the interworking function is linked. The ATM connection must be linked to an ATM end-point. For example AtmIf/m Vcc/m Nep.')
frAtmDlciSiwfNPvcCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 10, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 28)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcCorrelationTag.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcCorrelationTag.setDescription('This attribute specifies a unique string, set by the operator, which identifies the call for accounting purposes. Downstream processing uses this attribute to correlate accounting records issued at different nodes in the network. Normally, this value is provisioned with the same value at each end of the connection. If the value of accountingEnabled is no, this attribute has no effect. This attribute is also visible in the FrAtm Dlci component when accounting is enabled.')
frAtmDlciSiwfNPvcSiwfNpvcOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 11), )
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcSiwfNpvcOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcSiwfNpvcOpTable.setDescription('This group contains the operational attributes for the FrAtm Dlci Siwf Npvc connection.')
frAtmDlciSiwfNPvcSiwfNpvcOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfNPvcIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcSiwfNpvcOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcSiwfNpvcOpEntry.setDescription('An entry in the frAtmDlciSiwfNPvcSiwfNpvcOpTable.')
frAtmDlciSiwfNPvcConnectionToAtm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 3, 11, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcConnectionToAtm.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfNPvcConnectionToAtm.setDescription('This attribute indicates the ATM connection to which the interworking function is linked.')
frAtmDlciSiwfSPvc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4))
frAtmDlciSiwfSPvcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 1), )
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciSiwfSPvc components.')
frAtmDlciSiwfSPvcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfSPvcIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciSiwfSPvc component.')
frAtmDlciSiwfSPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciSiwfSPvc components. These components can be added and deleted.')
frAtmDlciSiwfSPvcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciSiwfSPvcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcStorageType.setDescription('This variable represents the storage type value for the frAtmDlciSiwfSPvc tables.')
frAtmDlciSiwfSPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcIndex.setDescription('This variable represents the index for the frAtmDlciSiwfSPvc tables.')
frAtmDlciSiwfSPvcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 10), )
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcProvTable.setDescription('This group contains provisionable attributes for the soft PVC component.')
frAtmDlciSiwfSPvcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfSPvcIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcProvEntry.setDescription('An entry in the frAtmDlciSiwfSPvcProvTable.')
frAtmDlciSiwfSPvcRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 44))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRemoteAddress.setDescription("This attribute specifies the remote address of the SPVC. It is represented as a prefix NPI string and a sequence of up to 15 digits to specify either a native (E.164 or X.121) address format or Atm End System Address(AESA) in ISO NSAP format. For example: native E.164 = 'e.upto15digits' native X.121 = 'x.upto14digits' NSAP E.164 ATM address = 'n.upto15digits.ESI.SEL' NSAP address = '40 hexadecimal digits'")
frAtmDlciSiwfSPvcRemoteConnectionIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 10, 1, 3), IntegerSequence().subtype(subtypeSpec=ValueSizeConstraint(3, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRemoteConnectionIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcRemoteConnectionIdentifier.setDescription("This attribute specifies the remote connection identifier. The identifier is either a remote Atm Vpi.Vci logical channel number assignment or a remote Frame Relay Dlci logical channel number assignment. The remote Atm Vpi.Vci logical channel number is input as 'Vpi.Vci'. and the remote Frame Relay Dlci logical channel number is input as '0.remoteDlci'.")
frAtmDlciSiwfSPvcCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 4, 10, 1, 4), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 28)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcCorrelationTag.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfSPvcCorrelationTag.setDescription('This attribute specifies the unique string, set by the operator, which identifies the call for accounting purposes. Downstream processing uses this attribute to correlate accounting records issued at different nodes in the network. If the value of accountingEnabled is no, this attribute has no effect. This attribute is also visible in the FrAtm Dlci component when accounting is enabled. When this attribute is an empty string, the operational correlationTag attribute in the FrAtm Dlci component receives the value of a system-generated correlationTag.')
frAtmDlciSiwfQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5))
frAtmDlciSiwfQoSRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 1), )
if mibBuilder.loadTexts: frAtmDlciSiwfQoSRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciSiwfQoS components.')
frAtmDlciSiwfQoSRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfQoSIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfQoSRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciSiwfQoS component.')
frAtmDlciSiwfQoSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfQoSRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciSiwfQoS components. These components can be added and deleted.')
frAtmDlciSiwfQoSComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfQoSComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciSiwfQoSStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfQoSStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSStorageType.setDescription('This variable represents the storage type value for the frAtmDlciSiwfQoS tables.')
frAtmDlciSiwfQoSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciSiwfQoSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSIndex.setDescription('This variable represents the index for the frAtmDlciSiwfQoS tables.')
frAtmDlciSiwfQoSProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 10), )
if mibBuilder.loadTexts: frAtmDlciSiwfQoSProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSProvTable.setDescription('This group contains the provisionable quality of service attributes for the Qos component.')
frAtmDlciSiwfQoSProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfQoSIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfQoSProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSProvEntry.setDescription('An entry in the frAtmDlciSiwfQoSProvTable.')
frAtmDlciSiwfQoSEmissionPriorityToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("deriveFromTp", 254), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfQoSEmissionPriorityToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSEmissionPriorityToIf.setDescription('This attribute specifies the emission priority of frames sent to the FrAtm interface. Frames in a higher priority queue, represented by a numerically higher number, will be sent before frames in a lower priority queue. The value of this attribute is interpreted according to the value of the provisionable attribute numberOfEmissionQs under the parent FrAtm component. If the numberOfEmissionQs attribute is set to 2, emissionPriorityToIf value of 0 is mapped to emission priority queue 0 representing a lower priority queue, and emissionPriorityToIf values of 1, 2, and 3 are mapped to emission priority queue 1 representing the highest priority queue. If the numberOfEmissionQs is set to 4, the emissionPriorityToIf values are directly assigned to the emission priority queues. A value of deriveFromTp specifies that the emission priority is to be extracted from the Mod Frs AtmNet Tpm/n component using the transferPriority attribute. A value of sameAsInterface specifies that the emission priority is to be extracted from the FrAtm Ca component using the niwfEmissionPriorityToIf attribute.')
frAtmDlciSiwfQoSTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciSiwfQoSTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfQoSTransferPriority.setDescription('This attribute specifies the transfer priority of frames sent to the ATM connection using this particular Dlci. In the Frame Relay to ATM direction, the tp is used to select the ATM service category of the connection. In the ATM to Frame Relay direction, the tp is used to select the FrAtm emission priority queue. A value of sameAsInterface specifies that the emission priority is to be extracted from the FrAtm Ca component using the siwfTransferPriority attribute. DESCRIPTION')
frAtmDlciSiwfAtmCon = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6))
frAtmDlciSiwfAtmConRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 1), )
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciSiwfAtmCon components.')
frAtmDlciSiwfAtmConRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfAtmConIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciSiwfAtmCon component.')
frAtmDlciSiwfAtmConRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciSiwfAtmCon components. These components cannot be added nor deleted.')
frAtmDlciSiwfAtmConComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciSiwfAtmConStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConStorageType.setDescription('This variable represents the storage type value for the frAtmDlciSiwfAtmCon tables.')
frAtmDlciSiwfAtmConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConIndex.setDescription('This variable represents the index for the frAtmDlciSiwfAtmCon tables.')
frAtmDlciSiwfAtmConOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 10), )
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConOperTable.setDescription('This attribute group contains the operational attributes for the NapAtmConnection component.')
frAtmDlciSiwfAtmConOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciSiwfAtmConIndex"))
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConOperEntry.setDescription('An entry in the frAtmDlciSiwfAtmConOperTable.')
frAtmDlciSiwfAtmConNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 3, 6, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciSiwfAtmConNextHop.setDescription('This attribute shows the component name of the AtmIf Vcc Ep or AtmCon component to which this switched connection is established.')
frAtmDlciNiwf = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4))
frAtmDlciNiwfRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 1), )
if mibBuilder.loadTexts: frAtmDlciNiwfRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciNiwf components.')
frAtmDlciNiwfRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfIndex"))
if mibBuilder.loadTexts: frAtmDlciNiwfRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciNiwf component.')
frAtmDlciNiwfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciNiwf components. These components can be added and deleted.')
frAtmDlciNiwfComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciNiwfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfStorageType.setDescription('This variable represents the storage type value for the frAtmDlciNiwf tables.')
frAtmDlciNiwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciNiwfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfIndex.setDescription('This variable represents the index for the frAtmDlciNiwf tables.')
frAtmDlciNiwfOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10), )
if mibBuilder.loadTexts: frAtmDlciNiwfOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfOperTable.setDescription('This group contains operational networking description information for a Niwf component.')
frAtmDlciNiwfOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfIndex"))
if mibBuilder.loadTexts: frAtmDlciNiwfOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfOperEntry.setDescription('An entry in the frAtmDlciNiwfOperTable.')
frAtmDlciNiwfDeToClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfDeToClpMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfDeToClpMapping.setDescription('This attribute indicates the type of DE to CLP mapping that is performed in the Frame Relay to ATM direction. A value of preserve indicates that the DE field in the Q.922 core frame copies to the CLP field of every ATM cell containing the frame. A value of always0 indicates that the CLP field of every ATM cell is always set to 0. A value of always1 indicates that the CLP field of every ATM cell is always set to 1.')
frAtmDlciNiwfClpToDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("preserve", 2), ("transparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfClpToDeMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfClpToDeMapping.setDescription('This attribute indicates the type of CLP to DE mapping that is performed in the ATM to Frame Relay direction. A value of preserve indicates that the DE field of the Q.922 core frame is set when one or more ATM cells belonging to the frame has its CLP field set, or when the DE field of the FR-SSCS PDU is set. A value of transparent indicates that the DE field of the Q.922 core frame copies directly from the DE field of the FR-SSCS PDU.')
frAtmDlciNiwfTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfTransferPriority.setDescription('This attribute indicates the transfer priority in use for a specific connection. This is the transfer priority that the local Frame Relay network uses for this connection to an ATM network. In the Frame Relay to ATM direction, the tp selects the FRF.5 End Point which multiplexes the frames. In the ATM to Frame Relay direction, the tp selects the default FrAtm emission priority queue to be used by this Dlci.')
frAtmDlciNiwfAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("ubr", 0), ("cbr", 1), ("rtVbr", 2), ("nrtVbr", 3), ("scNotAvailable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfAtmServiceCategory.setDescription('This attribute indicates the ATM service category that was mapped for this connection. A value of scNotAvailable indicates that atmServiceCategory is not yet available for this connection.')
frAtmDlciNiwfTrafficParmConvPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6))).clone(namedValues=NamedValues(("policyNotAvailable", 0), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfTrafficParmConvPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfTrafficParmConvPolicy.setDescription('This attribute indicates the traffic parameter conversion policy that is used for this connection. Policy 3 characterizes the traffic in the following way: - ATM traffic descriptor type 6 is selected. - PCR(0+1) is based on the ATM link rate. - SCR(0+1) is based on the CIR and EIR. - MB(0+1) is based on Bc, Be, CIR, EIR and AR. - Takes into account that the instantaneous rate of the frame relay stream can be above CIR and up to the AR. Policy 4 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected. Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by UPC traffic policer. - PCR(0+1) is based on AR. - SCR(0) is based on the CIR. - MBS(0) is based on Bc, CIR, and AR. - There is no direct characterization of EIR. The allowed EIR can be derived using the difference between the AR and CIR. Policy 5 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected. Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by UPC traffic policer. - PCR(0+1) is based on the CIR and EIR. - SCR(0) is based on the CIR. - MBS(0) is based on the CIR. - The maximum PCR is no longer based on the AR but rather on the CIR and EIR. Policy 6 characterizes the traffic in the following way: - ATM traffic descriptor type 3 is selected. - PCR(0+1) is based only on the CIR policyNotAvailable indicates that the trafficParmConvPolicy is not yet available for this connection.')
frAtmDlciNiwfAvgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8187))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfAvgFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfAvgFrameSize.setDescription('This attribute indicates the average frame size that was used for this connection as part of the traffic parameter conversion policy. A value of zero indicates that the avgFrameSize is not yet available for this connection.')
frAtmDlciNiwfEquivalentBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfEquivalentBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfEquivalentBitRate.setDescription('This attribute indicates the access reserved bandwidth for this FR- ATM connection when CAC is on. If a connection is subcribed to CIR only or CIR plus EIR service, the EBR reserved is CIR. If a connection is subcribed to EIR only service, the EBR reserved is 0.')
frAtmDlciNiwfAtmDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 8), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfAtmDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfAtmDlci.setDescription('This attribute displays the DLCI logical channel used inside the ATM VCC. A null value indicates that the atmDlci is not yet available for this connection.')
frAtmDlciNiwfAssignedBandwidthPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfAssignedBandwidthPool.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfAssignedBandwidthPool.setDescription('This attribute specifies the bandwidth pool which is used by this Dlci.')
frAtmDlciNiwfSpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2))
frAtmDlciNiwfSpvcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 1), )
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciNiwfSpvc components.')
frAtmDlciNiwfSpvcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfSpvcIndex"))
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciNiwfSpvc component.')
frAtmDlciNiwfSpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciNiwfSpvc components. These components cannot be added nor deleted.')
frAtmDlciNiwfSpvcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciNiwfSpvcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcStorageType.setDescription('This variable represents the storage type value for the frAtmDlciNiwfSpvc tables.')
frAtmDlciNiwfSpvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcIndex.setDescription('This variable represents the index for the frAtmDlciNiwfSpvc tables.')
frAtmDlciNiwfSpvcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 10), )
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcProvTable.setDescription('This group contains the provisionable attributes for the soft PVC component.')
frAtmDlciNiwfSpvcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfSpvcIndex"))
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcProvEntry.setDescription('An entry in the frAtmDlciNiwfSpvcProvTable.')
frAtmDlciNiwfSpvcRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRemoteAddress.setDescription("This attribute specifies the remote address of the SPVC. It is represented as a prefix NPI string and a sequence of up to 15 digits to specify either a native E.164 or native X.121 address format. For example, native E.164 = 'e.upto15digits'.")
frAtmDlciNiwfSpvcRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 1007), ValueRangeConstraint(1022, 1022), )).clone(1022)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRemoteDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcRemoteDlci.setDescription('This attribute specifies the remote connection identifier. This identifier is the DLCI logical channel number assignment used inside the ATM pipe.')
frAtmDlciNiwfSpvcCorrelationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 2, 10, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 28)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcCorrelationTag.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfSpvcCorrelationTag.setDescription('This attribute specifies aunique string, set by the operator, which identifies the call for accounting purposes. Downstream processing uses this attribute to correlate accounting records issued at different nodes in the network. Normally, the attribute is provisioned with the same value at both ends of the connection. If the value of accountingEnabled is no, this attribute has no effect. This attribute is also visible in the FrAtm Dlci component when accounting is enabled. When this attribute is an empty string, the operational correlationTag attribute in the FrAtm Dlci component receives the value of a system-generated correlationTag.')
frAtmDlciNiwfNd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3))
frAtmDlciNiwfNdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 1), )
if mibBuilder.loadTexts: frAtmDlciNiwfNdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciNiwfNd components.')
frAtmDlciNiwfNdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfNdIndex"))
if mibBuilder.loadTexts: frAtmDlciNiwfNdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciNiwfNd component.')
frAtmDlciNiwfNdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfNdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciNiwfNd components. These components can be added and deleted.')
frAtmDlciNiwfNdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfNdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciNiwfNdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfNdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdStorageType.setDescription('This variable represents the storage type value for the frAtmDlciNiwfNd tables.')
frAtmDlciNiwfNdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciNiwfNdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdIndex.setDescription('This variable represents the index for the frAtmDlciNiwfNd tables.')
frAtmDlciNiwfNdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 10), )
if mibBuilder.loadTexts: frAtmDlciNiwfNdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdProvTable.setDescription('This group contains provisionable attributes for the parent Niwf component.')
frAtmDlciNiwfNdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfNdIndex"))
if mibBuilder.loadTexts: frAtmDlciNiwfNdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdProvEntry.setDescription('An entry in the frAtmDlciNiwfNdProvTable.')
frAtmDlciNiwfNdDeToClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfNdDeToClpMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdDeToClpMapping.setDescription('This attribute specifies the type of DE to CLP mapping performs in the Frame Relay to ATM direction. When preserve is selected, the DE field in the Q.922 core frame copies to the CLP field of every ATM cell containing the frame. When always0 is selected, the CLP field of every ATM cell is always set to 0. When always1 is selected, the CLP field of every ATM cell is always set to 1.')
frAtmDlciNiwfNdClpToDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("preserve", 2), ("transparent", 3), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfNdClpToDeMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfNdClpToDeMapping.setDescription('This attribute specifies the type of CLP to DE mapping performs in the ATM to Frame Relay direction. When preserve is selected, the DE field of the Q.922 core frame is set when one or more ATM cells belonging the frame has its CLP field set, or when the DE field of the FR-SSCS PDU is set. When transparent is selected, the DE field of the Q.922 core frame copies directly from the DE field of the FR-SSCS PDU.')
frAtmDlciNiwfNdTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfNdTransferPriority.setStatus('obsolete')
if mibBuilder.loadTexts: frAtmDlciNiwfNdTransferPriority.setDescription('This attribute specifies the transfer priority of frames sent to and received from the ATM connection. In the Frame Relay to ATM direction, the tp selects the FRF.5 End Point which multiplexes the frames. In the ATM to Frame Relay direction, the tp is applied to frames on a per-DLCI basis. This attribute is obsoleted. During migration, its value will be transfered to the QualityOfService transferPriority.')
frAtmDlciNiwfQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4))
frAtmDlciNiwfQoSRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 1), )
if mibBuilder.loadTexts: frAtmDlciNiwfQoSRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciNiwfQoS components.')
frAtmDlciNiwfQoSRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfQoSIndex"))
if mibBuilder.loadTexts: frAtmDlciNiwfQoSRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciNiwfQoS component.')
frAtmDlciNiwfQoSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfQoSRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciNiwfQoS components. These components can be added and deleted.')
frAtmDlciNiwfQoSComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfQoSComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciNiwfQoSStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciNiwfQoSStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSStorageType.setDescription('This variable represents the storage type value for the frAtmDlciNiwfQoS tables.')
frAtmDlciNiwfQoSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciNiwfQoSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSIndex.setDescription('This variable represents the index for the frAtmDlciNiwfQoS tables.')
frAtmDlciNiwfQoSProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 10), )
if mibBuilder.loadTexts: frAtmDlciNiwfQoSProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSProvTable.setDescription('This group contains the provisionable quality of service attributes for the Qos component.')
frAtmDlciNiwfQoSProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciNiwfQoSIndex"))
if mibBuilder.loadTexts: frAtmDlciNiwfQoSProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSProvEntry.setDescription('An entry in the frAtmDlciNiwfQoSProvTable.')
frAtmDlciNiwfQoSEmissionPriorityToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("deriveFromTp", 254), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfQoSEmissionPriorityToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSEmissionPriorityToIf.setDescription('This attribute specifies the emission priority of frames sent to the FrAtm interface. Frames in a higher priority queue, depicted by a numerically higher number, are sent before frames in a lower priority queue. The value of this attribute is interpreted according to the value of the provisionable attribute numberOfEmissionQs under the parent FrAtm component. If the numberOfEmissionQs attribute is set to 2, emissionPriorityToIf value of 0 maps to emission priority queue 0 representing a lower priority queue, and emissionPriorityToIf values of 1, 2, and 3 map to emission priority queue 1 representing the highest priority queue. If the numberOfEmissionQs is set to 4, the emissionPriorityToIf values are directly assigned to the emission priority queues. A value of deriveFromTp specifies that the emission priority is to be extracted from the Mod Frs AtmNet Tpm/n component using the transferPriority attribute. A value of sameAsInterface specifies that the emission priority is extracts from the FrAtm Ca component using the niwfEmissionPriorityToIf attribute.')
frAtmDlciNiwfQoSTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 4, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("sameAsInterface", 255))).clone('sameAsInterface')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciNiwfQoSTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciNiwfQoSTransferPriority.setDescription('This attribute specifies the transfer priority of frames sent to the ATM connection. In the Frame Relay to ATM direction, the tp selects the FRF.5 End Point which multiplexes the frames. In the ATM to Frame Relay direction, the tp selects the default FrAtm emission priority queue to be used by this DLCI. A value of sameAsInterface specifies that the emission priority is to be extracted from the FrAtm Ca component using the niwfTransferPriority attribute. DESCRIPTION')
frAtmDlciEgSp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5))
frAtmDlciEgSpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 1), )
if mibBuilder.loadTexts: frAtmDlciEgSpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmDlciEgSp components.')
frAtmDlciEgSpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciEgSpIndex"))
if mibBuilder.loadTexts: frAtmDlciEgSpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpRowStatusEntry.setDescription('A single entry in the table represents a single frAtmDlciEgSp component.')
frAtmDlciEgSpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciEgSpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmDlciEgSp components. These components can be added and deleted.')
frAtmDlciEgSpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciEgSpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmDlciEgSpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmDlciEgSpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpStorageType.setDescription('This variable represents the storage type value for the frAtmDlciEgSp tables.')
frAtmDlciEgSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmDlciEgSpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpIndex.setDescription('This variable represents the index for the frAtmDlciEgSp tables.')
frAtmDlciEgSpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 10), )
if mibBuilder.loadTexts: frAtmDlciEgSpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpProvTable.setDescription('This group contains the provisionable attributes of the egress direction for the Data Link Connection Identifier. These attributes reflect the service parameters for the egress direction specific to this instance of Dlci.')
frAtmDlciEgSpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmDlciEgSpIndex"))
if mibBuilder.loadTexts: frAtmDlciEgSpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpProvEntry.setDescription('An entry in the frAtmDlciEgSpProvTable.')
frAtmDlciEgSpCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciEgSpCommittedInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpCommittedInformationRate.setDescription('This attribute specifies the committed information rate (CIR) for the egress direction. It is used for bandwidth reservation for the purpose of performing a Call Admission Control (CAC) function towards the egress link. This attribute is not used to perform rate enforcement towards the egress link.')
frAtmDlciEgSpCommittedBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciEgSpCommittedBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpCommittedBurstSize.setDescription('This attribute specifies the committed burst size (Bc) for the egress direction. It is used for bandwidth reservation for the purpose of performing a Call Admission Control (CAC) function towards the egress link. This attribute is not used to perform rate enforcement towards the egress link.')
frAtmDlciEgSpExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciEgSpExcessBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpExcessBurstSize.setDescription('This attribute specifies the excess burst size (Be) for the egress direction. It is used for bandwidth reservation for the purpose of performing a Call Admission Control (CAC) function towards the egress link. This attribute is not used to perform rate enforcement towards the egress link.')
frAtmDlciEgSpMeasurementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 4, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmDlciEgSpMeasurementInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmDlciEgSpMeasurementInterval.setDescription('This attribute specifies the time interval for the egress direction. It is used for bandwidth reservation for the purpose of performing a Call Admission Control (CAC) function towards the egress link. This attribute is not used to perform rate enforcement towards the egress link.')
frAtmVFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5))
frAtmVFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 1), )
if mibBuilder.loadTexts: frAtmVFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmVFramer components.')
frAtmVFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmVFramerIndex"))
if mibBuilder.loadTexts: frAtmVFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerRowStatusEntry.setDescription('A single entry in the table represents a single frAtmVFramer component.')
frAtmVFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmVFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmVFramer components. These components can be added and deleted.')
frAtmVFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmVFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmVFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmVFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerStorageType.setDescription('This variable represents the storage type value for the frAtmVFramer tables.')
frAtmVFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmVFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerIndex.setDescription('This variable represents the index for the frAtmVFramer tables.')
frAtmVFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 10), )
if mibBuilder.loadTexts: frAtmVFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerProvTable.setDescription('This group contains provisionable attributes for the VirtualFramer component.')
frAtmVFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmVFramerIndex"))
if mibBuilder.loadTexts: frAtmVFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerProvEntry.setDescription('An entry in the frAtmVFramerProvTable.')
frAtmVFramerOtherVirtualFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmVFramerOtherVirtualFramer.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerOtherVirtualFramer.setDescription('This attribute specifies the other VirtualFramer to which the service is linked, for example, FrUni/n VirtualFramer, FrDte/n VirtualFramer.')
frAtmVFramerLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 10, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmVFramerLogicalProcessor.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerLogicalProcessor.setDescription('This attribute specifies the logical processor on which the service component will reside.')
frAtmVFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 11), )
if mibBuilder.loadTexts: frAtmVFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
frAtmVFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmVFramerIndex"))
if mibBuilder.loadTexts: frAtmVFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerStateEntry.setDescription('An entry in the frAtmVFramerStateTable.')
frAtmVFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmVFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
frAtmVFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmVFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
frAtmVFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmVFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
frAtmVFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 12), )
if mibBuilder.loadTexts: frAtmVFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerStatsTable.setDescription('This group contains the operational statistics data for a VirtualFramer component.')
frAtmVFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmVFramerIndex"))
if mibBuilder.loadTexts: frAtmVFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerStatsEntry.setDescription('An entry in the frAtmVFramerStatsTable.')
frAtmVFramerFrmToOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 12, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmVFramerFrmToOtherVFramer.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerFrmToOtherVFramer.setDescription('This attribute counts the frames transmitted to the otherVirtualFramer.')
frAtmVFramerFrmFromOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 12, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmVFramerFrmFromOtherVFramer.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerFrmFromOtherVFramer.setDescription('This attribute counts the frames received from the otherVirtualFramer.')
frAtmVFramerOctetFromOtherVFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 5, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmVFramerOctetFromOtherVFramer.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmVFramerOctetFromOtherVFramer.setDescription('This attribute counts the octets received from the otherVirtualFramer.')
frAtmAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6))
frAtmAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 1), )
if mibBuilder.loadTexts: frAtmAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmAddr components.')
frAtmAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmAddrIndex"))
if mibBuilder.loadTexts: frAtmAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrRowStatusEntry.setDescription('A single entry in the table represents a single frAtmAddr component.')
frAtmAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmAddr components. These components can be added and deleted.')
frAtmAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrStorageType.setDescription('This variable represents the storage type value for the frAtmAddr tables.')
frAtmAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrIndex.setDescription('This variable represents the index for the frAtmAddr tables.')
frAtmAddrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 10), )
if mibBuilder.loadTexts: frAtmAddrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrProvTable.setDescription('This group specifies the address of the FrAtm Interface.')
frAtmAddrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmAddrIndex"))
if mibBuilder.loadTexts: frAtmAddrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrProvEntry.setDescription('An entry in the frAtmAddrProvTable.')
frAtmAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmAddrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrAddress.setDescription("This attribute contains digits which form the unique identifier of the customer. It is the equivalent of the telephone number in the telephone network (either native E.164 or X.121 address formats). For example, E.164 prefix 'e.613722', X.121 prefix 'x.302'.")
frAtmAddrAddrOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 11), )
if mibBuilder.loadTexts: frAtmAddrAddrOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrAddrOpTable.setDescription('This group display the address of the FrAtm Interface.')
frAtmAddrAddrOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmAddrIndex"))
if mibBuilder.loadTexts: frAtmAddrAddrOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrAddrOpEntry.setDescription('An entry in the frAtmAddrAddrOpTable.')
frAtmAddrMyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 6, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmAddrMyAddress.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmAddrMyAddress.setDescription("This attribute displays the parent FRATM component's address in the ISO NSAP format.")
frAtmCa = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7))
frAtmCaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 1), )
if mibBuilder.loadTexts: frAtmCaRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmCa components.')
frAtmCaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"))
if mibBuilder.loadTexts: frAtmCaRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaRowStatusEntry.setDescription('A single entry in the table represents a single frAtmCa component.')
frAtmCaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmCa components. These components cannot be added nor deleted.')
frAtmCaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmCaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaStorageType.setDescription('This variable represents the storage type value for the frAtmCa tables.')
frAtmCaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: frAtmCaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaIndex.setDescription('This variable represents the index for the frAtmCa tables.')
frAtmCaProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 10), )
if mibBuilder.loadTexts: frAtmCaProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaProvTable.setDescription('This attribute group contains the common provisionable attributes of the Ca component.')
frAtmCaProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"))
if mibBuilder.loadTexts: frAtmCaProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaProvEntry.setDescription('An entry in the frAtmCaProvTable.')
frAtmCaCallAdmissionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaCallAdmissionControl.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaCallAdmissionControl.setDescription('This attribute specifies the control to turn on Call Admission Control (CAC). The default value for CAC is off.')
frAtmCaOverrideLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 520000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaOverrideLinkRate.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaOverrideLinkRate.setDescription('This attribute allows the link rate to be overridden for this interface. This allows the user to specify a value other than the actual physical link rate computed when a Framer component is provisioned. In the absence of a Framer component, or when a VirtualFramer component is provisioned, this value needs to be explictly set to provide an equivalent link rate. This attribute provides control on the amount of bandwidth available for performing CAC. This attribute also provides the requested amount of bandwidth that is negotiated across an ATM network for traffic conversion polices 3 and 4, since these policies are a function of the access rate.')
frAtmCaSdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 11), )
if mibBuilder.loadTexts: frAtmCaSdTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSdTable.setDescription('This group contains provisionable service interworking attributes for the FrAtm component. The attributes defined in this group provide the defaults for all the connections on the FrAtm interface.')
frAtmCaSdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"))
if mibBuilder.loadTexts: frAtmCaSdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSdEntry.setDescription('An entry in the frAtmCaSdTable.')
frAtmCaSdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("translationMode", 0), ("transparentMode", 1), ("speTranslationMode", 2))).clone('translationMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaSdMode.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSdMode.setDescription('This attribute specifies the mode of interoperability between the Frame Relay and ATM connections regarding upper layer protocol encapsulations. This is used as the default for all the connections on the interface. When translationMode is selected, the interworking function performs translations between RFC1490 and RFC1483 encapsulated headers. This includes routed protocol translation, bridged protocol translation, and connection oriented protocol translation (except for RFC 1490 connection oriented protocol without RFC 1490 header, which is done in speTranslationMode). A value of transparentMode indicates that the interworking function is forwarding data without altering the upper layer user protocol encapsulation. Use transparent mode when the upper layer user protocol encapsulation methods are compatible between terminal equipments. A value of speTranslationMode indicates that the interworking function performs single protocol translation between RFC1490 with no header and RFC1483 encapsulated packets.')
frAtmCaSdDeToClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2))).clone('preserve')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaSdDeToClpMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSdDeToClpMapping.setDescription('This attribute specifies the DE to CLP mapping that is performed in the Frame Relay to ATM direction. This is used as the default for all the connections on the interface. When preserve is selected, the DE field in a Q.922 core frame copies to the ATM CLP field of every cell containing the information of that frame. When always0 is selected, the CLP field of every generated ATM cell is always 0. When always1 is selected, the CLP field of every generated ATM cell is always 1.')
frAtmCaSdClpToDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2))).clone('preserve')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaSdClpToDeMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSdClpToDeMapping.setDescription('This attribute specifies the type of CLP to DE mapping that is performed in the ATM to Frame Relay direction. When preserve is selected, the DE field of the Q.922 core frame is set when one or more ATM cells belonging to an AAL5 frame has its CLP field set. When always0 is selected, the DE field of the Q.922 core frame is always set to 0. When always1 is selected, the DE field of the Q.922 core frame is always set to 1.')
frAtmCaSdFecnToEfciMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("always0", 0), ("preserve", 2))).clone('preserve')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaSdFecnToEfciMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSdFecnToEfciMapping.setDescription('This attribute specifies the type of FECN to EFCI mapping that is performed in the Frame Relay to ATM direction. When preserve is selected, the FECN field in the Q.922 Core frame maps directly to the ATM EFCI field of every cell generated by the AAL5 segmentation process. When always0 is selected, the EFCI field in every ATM cell generated is set to 0.')
frAtmCaSdCrToUuMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("always0", 0), ("preserve", 2))).clone('preserve')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaSdCrToUuMapping.setStatus('obsolete')
if mibBuilder.loadTexts: frAtmCaSdCrToUuMapping.setDescription('This attribute indicates the type of CR to UU mapping that is performed in the Frame Relay to ATM direction. A value of preserve indicates that the CR field in the Q.922 Core frame maps directly to the ATM UU field of every cell generated by the AAL5 segmentation process. A value of always0 indicates that the UU field in every ATM cell generated is set to 0.')
frAtmCaNdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 12), )
if mibBuilder.loadTexts: frAtmCaNdTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaNdTable.setDescription('This group contains the default provisionable networking attributes for the FrAtm component.')
frAtmCaNdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"))
if mibBuilder.loadTexts: frAtmCaNdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaNdEntry.setDescription('An entry in the frAtmCaNdTable.')
frAtmCaNdDeToClpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("always0", 0), ("always1", 1), ("preserve", 2))).clone('preserve')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaNdDeToClpMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaNdDeToClpMapping.setDescription('This attribute specifies the type of DE to CLP mapping to be performed in the Frame Relay to ATM direction. When preserve is selected, the DE field in the Q.922 core frame copies to the CLP field of every ATM cell containing the frame. When always0 is selected, the CLP field of every ATM cell is always set to 0. When always1 is selected, the CLP field of every ATM cell is always set to 1.')
frAtmCaNdClpToDeMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("preserve", 2), ("transparent", 3))).clone('preserve')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaNdClpToDeMapping.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaNdClpToDeMapping.setDescription('This attribute specifies the type of CLP to DE mapping to be performed in the ATM to Frame Relay direction. When preserve is selected, the DE field of the Q.922 core frame is set when one or more ATM cells belonging to the frame has its CLP field set, or when the DE field of the FR-SSCS PDU is set. When transparent is selected, the DE field of the Q.922 core frame copies directly from the DE field of the FR-SSCS PDU.')
frAtmCaIfQoSTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 13), )
if mibBuilder.loadTexts: frAtmCaIfQoSTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaIfQoSTable.setDescription('This attribute group contains the provisionable quality of service attributes for the parent FrAtm interface.')
frAtmCaIfQoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"))
if mibBuilder.loadTexts: frAtmCaIfQoSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaIfQoSEntry.setDescription('An entry in the frAtmCaIfQoSTable.')
frAtmCaSiwfEmissionPriorityToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 254))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("deriveFromTp", 254))).clone('n0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaSiwfEmissionPriorityToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSiwfEmissionPriorityToIf.setDescription('This attribute specifies the emission priority of frames sent to this FrAtm interface from its service interworking functions. Frames in a higher priority queue, designated by a numerically higher number, are sent before frames in a lower priority queue. The value of this attribute is interpreted according to the value of the provisionable attribute numberOfEmissionQs under the parent FrAtm component. If the numberOfEmissionQs attribute is set to 2, siwfEmissionPriorityToIf value of 0 maps to emission priority queue 0 representing a lower priority queue, and siwfEmissionPriorityToIf values of 1, 2 or 3 map to emission priority queue 1 representing the highest priority queue. If the numberOfEmissionQs is set to 4, the siwfEmissionPriorityToIf values directly map to the emission priority queues. A value of deriveFromTp specifies that the emission priority is extracted from the Mod Frs AtmNet Tpm/n component using the siwfTransferPriority attribute. The siwfEmissionPriorityToIf can also be overridden on a per connection basis by setting the emissionPriorityToIf attribute in the FrAtm Dlci Siwf Qos component.')
frAtmCaSiwfTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaSiwfTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSiwfTransferPriority.setDescription('This attribute specifies the transfer priority of frames sent to and received from the ATM connection, through the service interworking functions of this interface. In the Frame Relay to ATM direction, the stp selects the ATM service category of the connection. In the ATM to Frame Relay direction, the stp selects the FrAtm emission priority queue. The siwfTransferPriority can also be overridden on a per connection basis by setting the transferPriority atribute in the FrAtm Dlci Siwf Qos component.')
frAtmCaNiwfEmissionPriorityToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 254))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("deriveFromTp", 254))).clone('deriveFromTp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaNiwfEmissionPriorityToIf.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaNiwfEmissionPriorityToIf.setDescription('This attribute specifies the emission priority of frames sent to this FrAtm interface from its network interworking functions. Frames in a higher priority queue are sent before frames in a lower priority queue. The value of this attribute is interpreted according to the value of the provisionable attribute numberOfEmissionQs under the parent FrAtm component. If the numberOfEmissionQs attribute is set to 2, niwfEmissionPriorityToIf value of 0 maps to emission priority queue 0 representing a lower priority queue, and niwfEmissionPriorityToIf values of 1, 2 or 3 map to emission priority queue 1 representing the highest priority queue. If the numberOfEmissionQs is set to 4, the emissionPrioToIf values directly assign to the emission priority queues. A value of deriveFromTp specifies that the emission priority is extracted from the Mod Frs AtmNet Tpm/n component using the niwfTransferPriority attribute. The niwfEmissionPriorityToIf can also be overridden on a per connection basis by setting the emissionPriorityToIf atribute in the FrAtm Dlci Niwf Qos component.')
frAtmCaNiwfTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaNiwfTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaNiwfTransferPriority.setDescription('This attribute specifies the transfer priority of frames sent to and received from the ATM connection, through the network interworking functions of this interface. In the Frame Relay to ATM direction, the ntp selects the Frf5EndPoint which multiplexes the frames. In the ATM to Frame Relay direction, the ntp selects the default FrAtm emission priority queue. The niwfTransferPriority can also be overridden on a per connection basis by setting the transferPriority atribute in the FrAtm Dlci Niwf Qos component.')
frAtmCaOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 14), )
if mibBuilder.loadTexts: frAtmCaOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaOpTable.setDescription('This attribute group contains the operational status of the Ca component.')
frAtmCaOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"))
if mibBuilder.loadTexts: frAtmCaOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaOpEntry.setDescription('An entry in the frAtmCaOpTable.')
frAtmCaLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 520000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaLinkRate.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaLinkRate.setDescription('This attribute indicates the link rate. If the provisionable attribute, overrideLinkRate, under the Ca component is 0, then the link rate reported is the actual link rate of the port or channel. Otherwise, the link rate reported is the overrideLinkRate provisioned under the Ca component.')
frAtmCaNailedUpPvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaNailedUpPvcs.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaNailedUpPvcs.setDescription('This attribute indicates the number of nailed-Up PVCs currently provisioned on this interface.')
frAtmCaTroubledDlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 14, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaTroubledDlcis.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTroubledDlcis.setDescription('This attribute indicates the total number of DLCIs that are disabled and are experiencing problems. This counter increments as a result of the following problem scenarios: Abit down, PVC down, local CAC failure, or call setup failure due to network problem.')
frAtmCaSoftPvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 14, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaSoftPvcs.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaSoftPvcs.setDescription('This attribute indicates the number of soft PVCs currently provisioned on this interface.')
frAtmCaAccountingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 15), )
if mibBuilder.loadTexts: frAtmCaAccountingOptionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaAccountingOptionsTable.setDescription('This group contains the common provisioned attributes for accounting on a FrAtm.')
frAtmCaAccountingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"))
if mibBuilder.loadTexts: frAtmCaAccountingOptionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaAccountingOptionsEntry.setDescription('An entry in the frAtmCaAccountingOptionsTable.')
frAtmCaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaAccountClass.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaAccountClass.setDescription('This attribute specifies the accounting class, which is reserved for network operations usage. Its value is an arbitrary number. The accounting records the value of this attribute.')
frAtmCaAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaAccountCollection.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaAccountCollection.setDescription('This attribute controls accounting data collection at the interface level. It contains the following values: bill, test, study, audit, force which are used to specify the reason(s) for which accounting records are collected. If the bill, test, study and audit options are selected in the accountCollection field, accounting records are collected for bill, test, study, or audit purposes. If the force option is selected in the accountCollection field, accounting records are collected regardless of whether other reasons are provisioned. If no reason is provisioned for this attribute, then accounting data collection does not occur. Description of bits: bill(0) test(1) study(2) audit(3) force(4)')
frAtmCaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 15, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaServiceExchange.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaServiceExchange.setDescription('This attribute is an arbitrary number, which is reserved for network operations usage. It is recorded in the accounting record.')
frAtmCaBwPoolTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 365), )
if mibBuilder.loadTexts: frAtmCaBwPoolTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaBwPoolTable.setDescription('Port capacity is partitioned into 16 pools (pool 0 through pool 15). This attribute specifies the percentage of port capacity that is allowed for each pool. The percentage for each pool ranges from 0% to 1000%. It allows for under or over subscription of the port. Under subscription occurs when the sum of the percentage assigned to the 16 pools is less than 100%. Over subscription occurs when the sum of the percentage for the 16 pools exceeds 100%. The sum of the percentage assigned to the 16 pools cannot exceed 1000%. The default is full sharing of port capacity without pre-set partitions between transfer priorities.')
frAtmCaBwPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 365, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaBwPoolIndex"))
if mibBuilder.loadTexts: frAtmCaBwPoolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaBwPoolEntry.setDescription('An entry in the frAtmCaBwPoolTable.')
frAtmCaBwPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 365, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: frAtmCaBwPoolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaBwPoolIndex.setDescription('This variable represents the frAtmCaBwPoolTable specific index for the frAtmCaBwPoolTable.')
frAtmCaBwPoolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 365, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaBwPoolValue.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaBwPoolValue.setDescription('This variable represents an individual value for the frAtmCaBwPoolTable.')
frAtmCaPoolProvBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 366), )
if mibBuilder.loadTexts: frAtmCaPoolProvBwTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolProvBwTable.setDescription('This attribute indicates the total bandwidth requested for provisioned connections from each bandwidth pool. Total bandwidth for a given pool can be oversubcribed or undersubcribed.')
frAtmCaPoolProvBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 366, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaPoolProvBwIndex"))
if mibBuilder.loadTexts: frAtmCaPoolProvBwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolProvBwEntry.setDescription('An entry in the frAtmCaPoolProvBwTable.')
frAtmCaPoolProvBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 366, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: frAtmCaPoolProvBwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolProvBwIndex.setDescription('This variable represents the frAtmCaPoolProvBwTable specific index for the frAtmCaPoolProvBwTable.')
frAtmCaPoolProvBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 366, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 520000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaPoolProvBwValue.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolProvBwValue.setDescription('This variable represents an individual value for the frAtmCaPoolProvBwTable.')
frAtmCaPoolAvailBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 367), )
if mibBuilder.loadTexts: frAtmCaPoolAvailBwTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolAvailBwTable.setDescription('This attribute indicates the total available bandwidth from the bandwidth pool.')
frAtmCaPoolAvailBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 367, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaPoolAvailBwIndex"))
if mibBuilder.loadTexts: frAtmCaPoolAvailBwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolAvailBwEntry.setDescription('An entry in the frAtmCaPoolAvailBwTable.')
frAtmCaPoolAvailBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 367, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: frAtmCaPoolAvailBwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolAvailBwIndex.setDescription('This variable represents the frAtmCaPoolAvailBwTable specific index for the frAtmCaPoolAvailBwTable.')
frAtmCaPoolAvailBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 367, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 52000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaPoolAvailBwValue.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolAvailBwValue.setDescription('This variable represents an individual value for the frAtmCaPoolAvailBwTable.')
frAtmCaPoolAdmitBwTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 380), )
if mibBuilder.loadTexts: frAtmCaPoolAdmitBwTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolAdmitBwTable.setDescription('This attribute indicates the total admitted bandwidth from each bandwidth pool. Each value is the sum of the equivalent bit rates of the admitted connections.')
frAtmCaPoolAdmitBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 380, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaPoolAdmitBwIndex"))
if mibBuilder.loadTexts: frAtmCaPoolAdmitBwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolAdmitBwEntry.setDescription('An entry in the frAtmCaPoolAdmitBwTable.')
frAtmCaPoolAdmitBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 380, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: frAtmCaPoolAdmitBwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolAdmitBwIndex.setDescription('This variable represents the frAtmCaPoolAdmitBwTable specific index for the frAtmCaPoolAdmitBwTable.')
frAtmCaPoolAdmitBwValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 380, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 520000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaPoolAdmitBwValue.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaPoolAdmitBwValue.setDescription('This variable represents an individual value for the frAtmCaPoolAdmitBwTable.')
frAtmCaTpm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2))
frAtmCaTpmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 1), )
if mibBuilder.loadTexts: frAtmCaTpmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmRowStatusTable.setDescription('This entry controls the addition and deletion of frAtmCaTpm components.')
frAtmCaTpmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaTpmIndex"))
if mibBuilder.loadTexts: frAtmCaTpmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmRowStatusEntry.setDescription('A single entry in the table represents a single frAtmCaTpm component.')
frAtmCaTpmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaTpmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmRowStatus.setDescription('This variable is used as the basis for SNMP naming of frAtmCaTpm components. These components can be added and deleted.')
frAtmCaTpmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaTpmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
frAtmCaTpmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAtmCaTpmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmStorageType.setDescription('This variable represents the storage type value for the frAtmCaTpm tables.')
frAtmCaTpmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: frAtmCaTpmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmIndex.setDescription('This variable represents the index for the frAtmCaTpm tables.')
frAtmCaTpmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 10), )
if mibBuilder.loadTexts: frAtmCaTpmProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmProvTable.setDescription('This attribute group contains the provisionable attributes of the Tpm component at this interface.')
frAtmCaTpmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaIndex"), (0, "Nortel-Magellan-Passport-FrameRelayAtmMIB", "frAtmCaTpmIndex"))
if mibBuilder.loadTexts: frAtmCaTpmProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmProvEntry.setDescription('An entry in the frAtmCaTpmProvTable.')
frAtmCaTpmAssignedBandwidthPool = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 255))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9), ("n10", 10), ("n11", 11), ("n12", 12), ("n13", 13), ("n14", 14), ("n15", 15), ("samePoolAsModule", 255))).clone('samePoolAsModule')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaTpmAssignedBandwidthPool.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmAssignedBandwidthPool.setDescription('This attribute specifies the bandwidth pool that supports this transfer priority at this interface.')
frAtmCaTpmTrafficParmConvPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sameAsModule", 0), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6))).clone('sameAsModule')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaTpmTrafficParmConvPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmTrafficParmConvPolicy.setDescription('This attribute specifies the traffic parameter conversion policy to use for a specific transfer priority for specifying equivalent bandwidth rate at the FrAtm interface. Policy 3 characterizes the traffic in the following way: - ATM traffic descriptor type 6 is selected - ATM service category rtVbr and nrtVbr supported only - PCR0+1 is based on AR - SCR0+1 is based on CIR and EIR - MBS0+1 is based on Bc, Be, CIR, EIR and AR - Takes into account that the instantaneous rate of the Frame Relay stream can be above CIR and up to the AR. Policy 4 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected. Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by the UPC traffic policer. - PCR0+1 is based on AR - ATM service category rtVbr and nrtVbr supported only - SCR0 is based on CIR - MBS0 is based on Bc, CIR, and AR - There is no direct characterization of EIR. The allowed EIR can be derived using the difference between the AR and CIR. Policy 5 characterizes the traffic in the following way: - ATM traffic descriptor type 7 or 8 is selected. Type 7 is chosen when non-conforming cells are to be discarded and type 8 when non-conforming cells are tagged by the UPC traffic policer. - ATM service category rtVbr and nrtVbr supported only - PCR0+1 is based on CIR for descriptor type 7 - PCR0+1 is based on CIR and EIR for descriptor type 8 - SCR0 is based on CIR - MBS0 is based on Bc, CIR, and AR - The maximum PCR is no longer based on the AR but rather on the CIR and EIR or CIR Policy 6 characterizes the traffic in the following way: - ATM traffic descriptor type 3 is selected - ATM service category ubr, cbr, rtVbr and nrtVbr supported only - PCR0+1 is based only on CIR. The default value sameAsModule implies the trafficParmConversionPolicy of Mod Frs AtmNet Tpm/n is as defined as Mod Frs AtmNet Tpm/n.')
frAtmCaTpmAverageFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 72, 7, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8187))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAtmCaTpmAverageFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: frAtmCaTpmAverageFrameSize.setDescription('This attribute specifies the average frame size at the FrAtm interface for connections using this transfer priority. If a value of 0 is specified, the average frame size defined in Mod Frs AtmNet Tpm/n avgFrameSize attribute is used.')
frameRelayAtmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51, 1))
frameRelayAtmGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51, 1, 5))
frameRelayAtmGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51, 1, 5, 2))
frameRelayAtmGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51, 1, 5, 2, 2))
frameRelayAtmCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51, 3))
frameRelayAtmCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51, 3, 5))
frameRelayAtmCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51, 3, 5, 2))
frameRelayAtmCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 51, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-FrameRelayAtmMIB", frAtmDlciSiwfQoSProvEntry=frAtmDlciSiwfQoSProvEntry, frAtmDlciRowStatusEntry=frAtmDlciRowStatusEntry, frAtmDlciSpMaximumFrameSize=frAtmDlciSpMaximumFrameSize, frAtmDlciEfciFrmFromNetwork=frAtmDlciEfciFrmFromNetwork, frAtmDlciSiwfMode=frAtmDlciSiwfMode, frAtmDlciSiwfQoSStorageType=frAtmDlciSiwfQoSStorageType, frAtmDlciNiwf=frAtmDlciNiwf, frAtmDlciSiwfLastUnknown1483ProtocolHeader=frAtmDlciSiwfLastUnknown1483ProtocolHeader, frAtmLmiLinkVerificationTimer=frAtmLmiLinkVerificationTimer, frameRelayAtmCapabilities=frameRelayAtmCapabilities, frAtmAddrRowStatusTable=frAtmAddrRowStatusTable, frAtmDlciSiwfRowStatusTable=frAtmDlciSiwfRowStatusTable, frAtmDlciIndex=frAtmDlciIndex, frAtmDlciSiwfRemoteConnectionIdentifier=frAtmDlciSiwfRemoteConnectionIdentifier, frAtmDlciSiwfSdRowStatusTable=frAtmDlciSiwfSdRowStatusTable, frAtmDlciErrorLongBytesFromIf=frAtmDlciErrorLongBytesFromIf, frAtmDlciSpEmissionPrioToIf=frAtmDlciSpEmissionPrioToIf, frAtmAddrRowStatusEntry=frAtmAddrRowStatusEntry, frAtmDlciSiwfNPvcStorageType=frAtmDlciSiwfNPvcStorageType, frAtmLmiStatsTable=frAtmLmiStatsTable, frAtmCaNailedUpPvcs=frAtmCaNailedUpPvcs, frAtmDlciRowStatusTable=frAtmDlciRowStatusTable, frAtmFramerProvTable=frAtmFramerProvTable, frameRelayAtmCapabilitiesBE01=frameRelayAtmCapabilitiesBE01, frAtmDlciEgSp=frAtmDlciEgSp, frAtmDlciSiwfSPvcProvTable=frAtmDlciSiwfSPvcProvTable, frAtmDlciSiwfSPvcComponentName=frAtmDlciSiwfSPvcComponentName, frAtmDlciEgSpCommittedInformationRate=frAtmDlciEgSpCommittedInformationRate, frAtmDlciSiwfSdDeToClpMapping=frAtmDlciSiwfSdDeToClpMapping, frAtmDlciSiwfPeakCellRate0=frAtmDlciSiwfPeakCellRate0, frAtmDlciCommittedBurstSize=frAtmDlciCommittedBurstSize, frAtmDlciTotalEgressFrames=frAtmDlciTotalEgressFrames, frAtmDlciSiwfAtmConOperTable=frAtmDlciSiwfAtmConOperTable, frAtmDlciUsageState=frAtmDlciUsageState, frAtmCa=frAtmCa, frAtmVFramerRowStatusEntry=frAtmVFramerRowStatusEntry, frAtmRowStatusTable=frAtmRowStatusTable, frAtmDlciNiwfOperTable=frAtmDlciNiwfOperTable, frAtmFramerStateEntry=frAtmFramerStateEntry, frAtmDlciMaximumFrameSize=frAtmDlciMaximumFrameSize, frAtmDlciRateEnforcement=frAtmDlciRateEnforcement, frAtmDlciNiwfAssignedBandwidthPool=frAtmDlciNiwfAssignedBandwidthPool, frAtmDlciSiwfQoSRowStatus=frAtmDlciSiwfQoSRowStatus, frAtmFramerFrmFromIf=frAtmFramerFrmFromIf, frAtmDlciEgSpRowStatus=frAtmDlciEgSpRowStatus, frAtmCaBwPoolIndex=frAtmCaBwPoolIndex, frAtmVFramerStateEntry=frAtmVFramerStateEntry, frAtmDlciNiwfSpvcRowStatus=frAtmDlciNiwfSpvcRowStatus, frAtmFramerComponentName=frAtmFramerComponentName, frAtmDlciDiscardedBytes=frAtmDlciDiscardedBytes, frAtmDlciIntEntry=frAtmDlciIntEntry, frAtmDlciNiwfQoSRowStatusTable=frAtmDlciNiwfQoSRowStatusTable, frAtmDlciSiwfTrafficParmConvPolicy=frAtmDlciSiwfTrafficParmConvPolicy, frAtmCaSdCrToUuMapping=frAtmCaSdCrToUuMapping, frAtmCaComponentName=frAtmCaComponentName, frAtmDlciNiwfClpToDeMapping=frAtmDlciNiwfClpToDeMapping, frAtmDlciFecnFrmToIf=frAtmDlciFecnFrmToIf, frAtmDlciAccountingEnabled=frAtmDlciAccountingEnabled, frAtmDlciEirIngressBytes=frAtmDlciEirIngressBytes, frAtmDlciSiwfAtmConRowStatus=frAtmDlciSiwfAtmConRowStatus, frAtmVFramerStatsTable=frAtmVFramerStatsTable, frAtmControlStatus=frAtmControlStatus, frAtmCaNdClpToDeMapping=frAtmCaNdClpToDeMapping, frAtmNumberOfEmissionQs=frAtmNumberOfEmissionQs, frAtmDlciSpOpEntry=frAtmDlciSpOpEntry, frAtmCaPoolProvBwTable=frAtmCaPoolProvBwTable, frAtmDlciNiwfSpvcRowStatusEntry=frAtmDlciNiwfSpvcRowStatusEntry, frAtmFramerOverruns=frAtmFramerOverruns, frAtmDlciNiwfNdProvEntry=frAtmDlciNiwfNdProvEntry, frAtmDlciNiwfSpvcStorageType=frAtmDlciNiwfSpvcStorageType, frAtmDlciDlciType=frAtmDlciDlciType, frAtmCaPoolAdmitBwEntry=frAtmCaPoolAdmitBwEntry, frAtmDlciSiwfComponentName=frAtmDlciSiwfComponentName, frAtmDlciSpIndex=frAtmDlciSpIndex, frAtmVFramerComponentName=frAtmVFramerComponentName, frAtmLmiUnexpectedReports=frAtmLmiUnexpectedReports, frAtmLmi=frAtmLmi, frAtmDlciSiwfQoSComponentName=frAtmDlciSiwfQoSComponentName, frAtmCaSdFecnToEfciMapping=frAtmCaSdFecnToEfciMapping, frAtmDlciSpRowStatusTable=frAtmDlciSpRowStatusTable, frAtmDlciSiwfSdFecnToEfciMapping=frAtmDlciSiwfSdFecnToEfciMapping, frAtmFramerInterfaceName=frAtmFramerInterfaceName, frAtmDlciSpCommittedInformationRate=frAtmDlciSpCommittedInformationRate, frAtmEmissionPriorityQsTable=frAtmEmissionPriorityQsTable, frAtmLmiFullStatusToIf=frAtmLmiFullStatusToIf, frAtmDlciDeFrmToIf=frAtmDlciDeFrmToIf, frAtmDlciDeFrmFromIf=frAtmDlciDeFrmFromIf, frAtmFramerLrcErrors=frAtmFramerLrcErrors, frAtmDlciSiwfSdOpEntry=frAtmDlciSiwfSdOpEntry, frAtmDlciSpProvEntry=frAtmDlciSpProvEntry, frAtmLmiComponentName=frAtmLmiComponentName, frAtmDlciSiwfSustainedCellRate01=frAtmDlciSiwfSustainedCellRate01, frAtmFramerStorageType=frAtmFramerStorageType, frAtmLmiFullStatusPollingCycles=frAtmLmiFullStatusPollingCycles, frAtmDlciBecnFrmToIf=frAtmDlciBecnFrmToIf, frAtmLmiParmsEntry=frAtmLmiParmsEntry, frAtmDlciSiwfSdRowStatusEntry=frAtmDlciSiwfSdRowStatusEntry, frAtmDlciSiwfQoSProvTable=frAtmDlciSiwfQoSProvTable, frAtmFramerLargeFrmErrors=frAtmFramerLargeFrmErrors, frAtmProceduralStatus=frAtmProceduralStatus, frAtmDlciSiwfMaximumBurstSize01=frAtmDlciSiwfMaximumBurstSize01, frAtmDlciCalldEntry=frAtmDlciCalldEntry, frAtmDlciSiwfSdMode=frAtmDlciSiwfSdMode, frAtmDlciTotalEgressBytes=frAtmDlciTotalEgressBytes, frAtmDlciSiwfSustainedCellRate0=frAtmDlciSiwfSustainedCellRate0, frAtmDlciSiwfNPvcComponentName=frAtmDlciSiwfNPvcComponentName, frAtmDlciNiwfAtmDlci=frAtmDlciNiwfAtmDlci, frAtmUnknownDlciFramesFromIf=frAtmUnknownDlciFramesFromIf, frAtmVFramerLogicalProcessor=frAtmVFramerLogicalProcessor, frAtmCaTpm=frAtmCaTpm, frAtmCaBwPoolTable=frAtmCaBwPoolTable, frAtmCaPoolProvBwEntry=frAtmCaPoolProvBwEntry, frAtmDlciNiwfNdRowStatusTable=frAtmDlciNiwfNdRowStatusTable, frAtmDlciNiwfNd=frAtmDlciNiwfNd, frAtmDlciNiwfStorageType=frAtmDlciNiwfStorageType, frAtmDlciEgSpIndex=frAtmDlciEgSpIndex, frAtmDlciSiwfInvalid1483Frames=frAtmDlciSiwfInvalid1483Frames, frAtmDlciNiwfSpvc=frAtmDlciNiwfSpvc, frAtmDlciNiwfAvgFrameSize=frAtmDlciNiwfAvgFrameSize, frAtmDlciOperationalState=frAtmDlciOperationalState, frAtmCaPoolProvBwIndex=frAtmCaPoolProvBwIndex, frAtmDlciSiwfSPvcRemoteAddress=frAtmDlciSiwfSPvcRemoteAddress, frAtmDlciFecnFrmFromIf=frAtmDlciFecnFrmFromIf, frAtmDlciBytesToIf=frAtmDlciBytesToIf, frAtmFramerOctetFromIf=frAtmFramerOctetFromIf, frAtmDlciDiscCongestedFromIf=frAtmDlciDiscCongestedFromIf, frAtmDlciNiwfTrafficParmConvPolicy=frAtmDlciNiwfTrafficParmConvPolicy, frAtmDlciSiwfVccClearCause=frAtmDlciSiwfVccClearCause, frAtmDlciSiwfSdOpTable=frAtmDlciSiwfSdOpTable, frAtmDlciEgSpMeasurementInterval=frAtmDlciEgSpMeasurementInterval, frAtmIndex=frAtmIndex, frAtmCaOpTable=frAtmCaOpTable, frAtmLmiEventCount=frAtmLmiEventCount, frAtmFramerFlagsBetweenFrames=frAtmFramerFlagsBetweenFrames, frAtmDlciSiwfNPvcSiwfNpvcOpTable=frAtmDlciSiwfNPvcSiwfNpvcOpTable, frAtmDlciBecnFrmFromIf=frAtmDlciBecnFrmFromIf, frAtmDlciSpRowStatusEntry=frAtmDlciSpRowStatusEntry, frAtmCaPoolAvailBwTable=frAtmCaPoolAvailBwTable, frAtmCaPoolAvailBwValue=frAtmCaPoolAvailBwValue, frAtmLmiPsiTable=frAtmLmiPsiTable, frAtmDlciSiwfSiwfSpvcOpTable=frAtmDlciSiwfSiwfSpvcOpTable, frAtmDlciSiwfType=frAtmDlciSiwfType, frAtmAddrProvEntry=frAtmAddrProvEntry, frAtmDlciSiwfCrToUuMapping=frAtmDlciSiwfCrToUuMapping, frAtmVFramerProvEntry=frAtmVFramerProvEntry, frAtmVFramer=frAtmVFramer, frAtmDlciDiscFrameAbit=frAtmDlciDiscFrameAbit, frAtmDlciSiwfQoS=frAtmDlciSiwfQoS, frAtmAddrStorageType=frAtmAddrStorageType, frAtmDlciBecnFrmSetByService=frAtmDlciBecnFrmSetByService, frAtmIfEntryTable=frAtmIfEntryTable, frAtmFramerAdminState=frAtmFramerAdminState, frAtmCaTpmProvTable=frAtmCaTpmProvTable, frAtmCaIfQoSTable=frAtmCaIfQoSTable, frAtmDlciSiwfQoSRowStatusTable=frAtmDlciSiwfQoSRowStatusTable, frAtmDlciSiwfAtmConStorageType=frAtmDlciSiwfAtmConStorageType, frAtmCaTpmComponentName=frAtmCaTpmComponentName, frAtmDlciNiwfQoSProvEntry=frAtmDlciNiwfQoSProvEntry, frAtmDlciDeBytesToIf=frAtmDlciDeBytesToIf, frAtmDlciSiwfPeakCellRate01=frAtmDlciSiwfPeakCellRate01, frAtmCaNiwfTransferPriority=frAtmCaNiwfTransferPriority, frAtmDlciSiwfStatsTable=frAtmDlciSiwfStatsTable, frAtmCaSdMode=frAtmCaSdMode, frAtmCaStorageType=frAtmCaStorageType, frAtmStandbyStatus=frAtmStandbyStatus, frAtmDlciNiwfNdClpToDeMapping=frAtmDlciNiwfNdClpToDeMapping, frAtmDlciSiwfAvgFrameSize=frAtmDlciSiwfAvgFrameSize, frAtmAddrIndex=frAtmAddrIndex, frAtmDlciDiscExcessFromIfBytes=frAtmDlciDiscExcessFromIfBytes, frAtmStatsTable=frAtmStatsTable, frAtmDlciSiwfLastUnknown1490ProtocolHeader=frAtmDlciSiwfLastUnknown1490ProtocolHeader, frAtmDlciEgSpExcessBurstSize=frAtmDlciEgSpExcessBurstSize, frAtmOperStatusEntry=frAtmOperStatusEntry, frAtmDlciSiwfQoSEmissionPriorityToIf=frAtmDlciSiwfQoSEmissionPriorityToIf, frAtmDlciErrorShortBytesFromIf=frAtmDlciErrorShortBytesFromIf, frAtmDlciNiwfQoSRowStatusEntry=frAtmDlciNiwfQoSRowStatusEntry, frAtmDlciDiscCongestedToIf=frAtmDlciDiscCongestedToIf, frAtmDlciNiwfQoSRowStatus=frAtmDlciNiwfQoSRowStatus, frAtmDlciSpEmissionPriorityToIf=frAtmDlciSpEmissionPriorityToIf, frAtmAddr=frAtmAddr, frAtmDlciSiwfNPvcIndex=frAtmDlciSiwfNPvcIndex, frAtmDlciSpRateEnforcement=frAtmDlciSpRateEnforcement, frAtmOperStatusTable=frAtmOperStatusTable, frAtmDlciSiwfAtmServiceCategory=frAtmDlciSiwfAtmServiceCategory, frAtmLmiUspParmsEntry=frAtmLmiUspParmsEntry, frAtmDlciSiwfAtmConOperEntry=frAtmDlciSiwfAtmConOperEntry, frAtmDlciTotalIngressFrames=frAtmDlciTotalIngressFrames, frAtmDlciNiwfRowStatusTable=frAtmDlciNiwfRowStatusTable, frAtmFramerFrmModeErrors=frAtmFramerFrmModeErrors, frAtmDlciSiwfAtmConComponentName=frAtmDlciSiwfAtmConComponentName, frAtmDlciNiwfSpvcRemoteDlci=frAtmDlciNiwfSpvcRemoteDlci, frAtmCaNdEntry=frAtmCaNdEntry, frAtmDlciABitStatusToIf=frAtmDlciABitStatusToIf, frAtmCaTpmAssignedBandwidthPool=frAtmCaTpmAssignedBandwidthPool, frAtmCaProvTable=frAtmCaProvTable, frAtmCaNiwfEmissionPriorityToIf=frAtmCaNiwfEmissionPriorityToIf, frAtmDlciStateEntry=frAtmDlciStateEntry, frAtmDlciNiwfSpvcRowStatusTable=frAtmDlciNiwfSpvcRowStatusTable, frAtmCaBwPoolValue=frAtmCaBwPoolValue, frAtmDlciNiwfNdRowStatus=frAtmDlciNiwfNdRowStatus, frAtmDlciSiwfSdRowStatus=frAtmDlciSiwfSdRowStatus, frAtmDlciErrorShortFrmFromIf=frAtmDlciErrorShortFrmFromIf, frAtmDlciSpAccounting=frAtmDlciSpAccounting, frAtmDlciSpRowStatus=frAtmDlciSpRowStatus, frAtmCaTpmRowStatus=frAtmCaTpmRowStatus, frAtmDlciSiwfRowStatusEntry=frAtmDlciSiwfRowStatusEntry, frAtmCaSoftPvcs=frAtmCaSoftPvcs, frAtmDlciTroubled=frAtmDlciTroubled, frAtmCaIndex=frAtmCaIndex, frAtmLmiSide=frAtmLmiSide, frAtmFramerOperationalState=frAtmFramerOperationalState, frAtmCaNdDeToClpMapping=frAtmCaNdDeToClpMapping, frAtmFramerFrmToIf=frAtmFramerFrmToIf, frAtmFramerNormPrioLinkUtilToIf=frAtmFramerNormPrioLinkUtilToIf, frAtmDlciNiwfComponentName=frAtmDlciNiwfComponentName, frAtmAddrAddrOpEntry=frAtmAddrAddrOpEntry, frAtmVFramerOperationalState=frAtmVFramerOperationalState, frAtmDlciNiwfTransferPriority=frAtmDlciNiwfTransferPriority, frAtmVFramerProvTable=frAtmVFramerProvTable, frAtmDlciDiscCongestedToIfBytes=frAtmDlciDiscCongestedToIfBytes, frAtmFramerUtilTable=frAtmFramerUtilTable, frAtm=frAtm, frAtmDlciABitEntry=frAtmDlciABitEntry, frAtmDlciCommittedInformationRate=frAtmDlciCommittedInformationRate, frAtmDlci=frAtmDlci, frAtmFramerNormPrioLinkUtilFromIf=frAtmFramerNormPrioLinkUtilFromIf, frAtmLmiStatusSequenceErrors=frAtmLmiStatusSequenceErrors, frAtmLmiAdminState=frAtmLmiAdminState, frAtmVFramerRowStatusTable=frAtmVFramerRowStatusTable, frAtmLmiKeepAliveStatusToIf=frAtmLmiKeepAliveStatusToIf, frAtmLmiUnexpectedIes=frAtmLmiUnexpectedIes, frAtmDlciRowStatus=frAtmDlciRowStatus, frAtmCaOpEntry=frAtmCaOpEntry, frAtmFramerAborts=frAtmFramerAborts, frAtmFrmToIfByQueueIndex=frAtmFrmToIfByQueueIndex, frAtmDlciAdminState=frAtmDlciAdminState, frAtmDlciSiwfAssignedBandwidthPool=frAtmDlciSiwfAssignedBandwidthPool, frAtmCaSdEntry=frAtmCaSdEntry, frAtmLmiIndex=frAtmLmiIndex, frAtmCaSiwfTransferPriority=frAtmCaSiwfTransferPriority, frAtmDlciNiwfEquivalentBitRate=frAtmDlciNiwfEquivalentBitRate, frAtmFramerProvEntry=frAtmFramerProvEntry, frAtmCaPoolAdmitBwIndex=frAtmCaPoolAdmitBwIndex, frAtmAddrAddrOpTable=frAtmAddrAddrOpTable, frAtmLmiNoStatusReportCount=frAtmLmiNoStatusReportCount, frAtmDlciSiwfSPvcRowStatus=frAtmDlciSiwfSPvcRowStatus, frAtmDlciNiwfNdComponentName=frAtmDlciNiwfNdComponentName, frAtmDlciNiwfNdStorageType=frAtmDlciNiwfNdStorageType, frAtmDlciABitReasonFromIf=frAtmDlciABitReasonFromIf, frAtmCaRowStatus=frAtmCaRowStatus, frAtmAvailabilityStatus=frAtmAvailabilityStatus, frAtmDlciSpCommittedBurstSize=frAtmDlciSpCommittedBurstSize, frAtmDlciNiwfNdProvTable=frAtmDlciNiwfNdProvTable, frAtmFramerUtilEntry=frAtmFramerUtilEntry)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-FrameRelayAtmMIB", frAtmDlciComponentName=frAtmDlciComponentName, frAtmOctetToIfByQueueEntry=frAtmOctetToIfByQueueEntry, frAtmDlciSiwfNPvcProvTable=frAtmDlciSiwfNPvcProvTable, frAtmVFramerStateTable=frAtmVFramerStateTable, frAtmDlciSiwfSPvcCorrelationTag=frAtmDlciSiwfSPvcCorrelationTag, frAtmDlciSiwfNPvcAtmConnection=frAtmDlciSiwfNPvcAtmConnection, frAtmDlciSpOpTable=frAtmDlciSpOpTable, frAtmCaPoolAdmitBwValue=frAtmCaPoolAdmitBwValue, frAtmDlciSiwfNPvcProvEntry=frAtmDlciSiwfNPvcProvEntry, frAtmDlciMeasurementInterval=frAtmDlciMeasurementInterval, frAtmVFramerFrmFromOtherVFramer=frAtmVFramerFrmFromOtherVFramer, frAtmVFramerRowStatus=frAtmVFramerRowStatus, frAtmDlciSiwfIndex=frAtmDlciSiwfIndex, frAtmFramerRowStatusTable=frAtmFramerRowStatusTable, frAtmDlciNiwfQoSProvTable=frAtmDlciNiwfQoSProvTable, frAtmAddrAddress=frAtmAddrAddress, frameRelayAtmMIB=frameRelayAtmMIB, frAtmDlciSiwfNPvcRowStatusTable=frAtmDlciSiwfNPvcRowStatusTable, frAtmStateEntry=frAtmStateEntry, frAtmFramerUsageState=frAtmFramerUsageState, frAtmDlciElapsedDifference=frAtmDlciElapsedDifference, frAtmFramerStateTable=frAtmFramerStateTable, frAtmDlciSpComponentName=frAtmDlciSpComponentName, frAtmDlciNiwfNdTransferPriority=frAtmDlciNiwfNdTransferPriority, frAtmFramerNonOctetErrors=frAtmFramerNonOctetErrors, frAtmStorageType=frAtmStorageType, frAtmDlciSiwfStorageType=frAtmDlciSiwfStorageType, frAtmDlciSiwfUnknown1483Frames=frAtmDlciSiwfUnknown1483Frames, frAtmDlciSiwfSPvcRowStatusTable=frAtmDlciSiwfSPvcRowStatusTable, frAtmDlciABitTable=frAtmDlciABitTable, frAtmDlciEgSpCommittedBurstSize=frAtmDlciEgSpCommittedBurstSize, frAtmDlciNiwfQoS=frAtmDlciNiwfQoS, frAtmStatsEntry=frAtmStatsEntry, frAtmFramerIndex=frAtmFramerIndex, frAtmDlciSiwfNPvcRowStatus=frAtmDlciSiwfNPvcRowStatus, frAtmLmiProtocolStatus=frAtmLmiProtocolStatus, frAtmFramerLinkEntry=frAtmFramerLinkEntry, frAtmSnmpOperStatus=frAtmSnmpOperStatus, frAtmCaAccountClass=frAtmCaAccountClass, frAtmDlciNiwfIndex=frAtmDlciNiwfIndex, frAtmCaBwPoolEntry=frAtmCaBwPoolEntry, frAtmDlciNiwfAtmServiceCategory=frAtmDlciNiwfAtmServiceCategory, frAtmIfIndex=frAtmIfIndex, frAtmVFramerAdminState=frAtmVFramerAdminState, frAtmDlciNiwfQoSTransferPriority=frAtmDlciNiwfQoSTransferPriority, frAtmLmiUsageState=frAtmLmiUsageState, frAtmCaProvEntry=frAtmCaProvEntry, frAtmLastUnknownDlci=frAtmLastUnknownDlci, frAtmFrmToIfByQueueEntry=frAtmFrmToIfByQueueEntry, frAtmCaNdTable=frAtmCaNdTable, frAtmDlciFrmFromIf=frAtmDlciFrmFromIf, frAtmDlciStatsEntry=frAtmDlciStatsEntry, frAtmOctetToIfByQueueTable=frAtmOctetToIfByQueueTable, frAtmLmiKeepAliveStatusEnqFromIf=frAtmLmiKeepAliveStatusEnqFromIf, frAtmDlciSiwfSdProvEntry=frAtmDlciSiwfSdProvEntry, frAtmRowStatus=frAtmRowStatus, frAtmLmiRowStatusTable=frAtmLmiRowStatusTable, frAtmCaTpmStorageType=frAtmCaTpmStorageType, frAtmFramerRowStatus=frAtmFramerRowStatus, frAtmCaAccountCollection=frAtmCaAccountCollection, frAtmCaTroubledDlcis=frAtmCaTroubledDlcis, frAtmLmiRowStatusEntry=frAtmLmiRowStatusEntry, frAtmDlciSiwfAtmConIndex=frAtmDlciSiwfAtmConIndex, frAtmFramerLinkTable=frAtmFramerLinkTable, frAtmDlciSiwfSPvcIndex=frAtmDlciSiwfSPvcIndex, frAtmRowStatusEntry=frAtmRowStatusEntry, frAtmLmiUspParmsTable=frAtmLmiUspParmsTable, frAtmDlciStatsTable=frAtmDlciStatsTable, frAtmCaTpmAverageFrameSize=frAtmCaTpmAverageFrameSize, frAtmFramerCrcErrors=frAtmFramerCrcErrors, frAtmCaPoolProvBwValue=frAtmCaPoolProvBwValue, frAtmFrmToIfByQueueValue=frAtmFrmToIfByQueueValue, frAtmDlciNiwfNdDeToClpMapping=frAtmDlciNiwfNdDeToClpMapping, frAtmLmiParmsTable=frAtmLmiParmsTable, frAtmDlciDiscDeCongestedToIfBytes=frAtmDlciDiscDeCongestedToIfBytes, frAtmDlciSiwfSiwfSpvcOpEntry=frAtmDlciSiwfSiwfSpvcOpEntry, frAtmDlciSiwfAtmConRowStatusEntry=frAtmDlciSiwfAtmConRowStatusEntry, frAtmLmiCheckPointTimer=frAtmLmiCheckPointTimer, frAtmLmiKeepAliveEnqToIf=frAtmLmiKeepAliveEnqToIf, frAtmCaAccountingOptionsTable=frAtmCaAccountingOptionsTable, frAtmDlciNiwfSpvcRemoteAddress=frAtmDlciNiwfSpvcRemoteAddress, frAtmDlciSiwf=frAtmDlciSiwf, frAtmLmiOperationalState=frAtmLmiOperationalState, frAtmDlciSiwfConnOpTable=frAtmDlciSiwfConnOpTable, frAtmAddrProvTable=frAtmAddrProvTable, frAtmFramerStatsEntry=frAtmFramerStatsEntry, frAtmCaTpmRowStatusEntry=frAtmCaTpmRowStatusEntry, frAtmLmiPsiEntry=frAtmLmiPsiEntry, frAtmDlciNiwfQoSComponentName=frAtmDlciNiwfQoSComponentName, frAtmCaTpmRowStatusTable=frAtmCaTpmRowStatusTable, frAtmVFramerOtherVirtualFramer=frAtmVFramerOtherVirtualFramer, frAtmVFramerUsageState=frAtmVFramerUsageState, frAtmDlciExcessBytesFromIf=frAtmDlciExcessBytesFromIf, frAtmDlciNiwfSpvcCorrelationTag=frAtmDlciNiwfSpvcCorrelationTag, frAtmDlciSiwfClpToDeMapping=frAtmDlciSiwfClpToDeMapping, frAtmDlciNiwfRowStatus=frAtmDlciNiwfRowStatus, frAtmInvalidHeaderFramesFromIf=frAtmInvalidHeaderFramesFromIf, frAtmLmiMessageCountTimer=frAtmLmiMessageCountTimer, frAtmCaCallAdmissionControl=frAtmCaCallAdmissionControl, frAtmDlciSiwfNPvcConnectionToAtm=frAtmDlciSiwfNPvcConnectionToAtm, frAtmCaPoolAdmitBwTable=frAtmCaPoolAdmitBwTable, frAtmDlciEgSpComponentName=frAtmDlciEgSpComponentName, frAtmCidDataEntry=frAtmCidDataEntry, frAtmCaAccountingOptionsEntry=frAtmCaAccountingOptionsEntry, frAtmAddrComponentName=frAtmAddrComponentName, frAtmDlciNiwfSpvcComponentName=frAtmDlciNiwfSpvcComponentName, frAtmDlciEirEgressFrames=frAtmDlciEirEgressFrames, frAtmDlciDiscCongestedFromIfBytes=frAtmDlciDiscCongestedFromIfBytes, frAtmDlciStartTime=frAtmDlciStartTime, frAtmLmiFullStatusEnqFromIf=frAtmLmiFullStatusEnqFromIf, frAtmDlciABitStatusFromIf=frAtmDlciABitStatusFromIf, frAtmDlciSiwfMaximumBurstSize0=frAtmDlciSiwfMaximumBurstSize0, frAtmDlciBytesFromIf=frAtmDlciBytesFromIf, frAtmCaTpmIndex=frAtmCaTpmIndex, frAtmLmiIgnoreActiveBit=frAtmLmiIgnoreActiveBit, frAtmDlciSiwfSPvcProvEntry=frAtmDlciSiwfSPvcProvEntry, frAtmDlciSiwfAtmConRowStatusTable=frAtmDlciSiwfAtmConRowStatusTable, frameRelayAtmGroupBE01A=frameRelayAtmGroupBE01A, frAtmDlciNiwfSpvcProvEntry=frAtmDlciNiwfSpvcProvEntry, frAtmDlciFrmToIf=frAtmDlciFrmToIf, frAtmDlciNiwfQoSIndex=frAtmDlciNiwfQoSIndex, frAtmUsageState=frAtmUsageState, frAtmDlciDiscardedFrames=frAtmDlciDiscardedFrames, frAtmDlciSiwfSdProvTable=frAtmDlciSiwfSdProvTable, frAtmDlciSiwfSdIndex=frAtmDlciSiwfSdIndex, frAtmFramerUnderruns=frAtmFramerUnderruns, frAtmDlciSiwfSPvcRowStatusEntry=frAtmDlciSiwfSPvcRowStatusEntry, frAtmAddrMyAddress=frAtmAddrMyAddress, frAtmDlciEgSpProvEntry=frAtmDlciEgSpProvEntry, frAtmAdminState=frAtmAdminState, frAtmDlciSiwfSdCrToUuMapping=frAtmDlciSiwfSdCrToUuMapping, frameRelayAtmGroupBE=frameRelayAtmGroupBE, frAtmDlciDiscDeCongestedFromIf=frAtmDlciDiscDeCongestedFromIf, frAtmDlciSiwfSdComponentName=frAtmDlciSiwfSdComponentName, frAtmDlciDiscExcessFromIf=frAtmDlciDiscExcessFromIf, frAtmDlciStorageType=frAtmDlciStorageType, frAtmDlciTotalIngressBytes=frAtmDlciTotalIngressBytes, frAtmCaServiceExchange=frAtmCaServiceExchange, frAtmDlciNiwfRowStatusEntry=frAtmDlciNiwfRowStatusEntry, frAtmFramer=frAtmFramer, frAtmDlciSiwfRemoteAddress=frAtmDlciSiwfRemoteAddress, frAtmVFramerStatsEntry=frAtmVFramerStatsEntry, frAtmDlciSiwfDiscardPriority=frAtmDlciSiwfDiscardPriority, frAtmLmiStorageType=frAtmLmiStorageType, frAtmLmiFullStatusEnqToIf=frAtmLmiFullStatusEnqToIf, frAtmDlciSiwfSdStorageType=frAtmDlciSiwfSdStorageType, frAtmVFramerIndex=frAtmVFramerIndex, frAtmDlciNiwfQoSStorageType=frAtmDlciNiwfQoSStorageType, frAtmAddrRowStatus=frAtmAddrRowStatus, frAtmCaIfQoSEntry=frAtmCaIfQoSEntry, frAtmCaPoolAvailBwIndex=frAtmCaPoolAvailBwIndex, frAtmDlciEgSpRowStatusEntry=frAtmDlciEgSpRowStatusEntry, frAtmOctetToIfByQueueValue=frAtmOctetToIfByQueueValue, frAtmDlciSiwfInvalid1490Frames=frAtmDlciSiwfInvalid1490Frames, frAtmDlciSiwfAtmConNextHop=frAtmDlciSiwfAtmConNextHop, frAtmDlciSiwfAtmCon=frAtmDlciSiwfAtmCon, frAtmLmiPvcConfigParmsInFsr=frAtmLmiPvcConfigParmsInFsr, frAtmCaRowStatusTable=frAtmCaRowStatusTable, frAtmDlciNiwfOperEntry=frAtmDlciNiwfOperEntry, frAtmDlciDiscByteAbit=frAtmDlciDiscByteAbit, frAtmDlciEgSpStorageType=frAtmDlciEgSpStorageType, frAtmCaRowStatusEntry=frAtmCaRowStatusEntry, frAtmDlciDeBytesFromIf=frAtmDlciDeBytesFromIf, frAtmStateTable=frAtmStateTable, frAtmAlarmStatus=frAtmAlarmStatus, frAtmLmiStateEntry=frAtmLmiStateEntry, frAtmDlciSiwfSPvc=frAtmDlciSiwfSPvc, frAtmDlciSiwfFecnToEfciMapping=frAtmDlciSiwfFecnToEfciMapping, frAtmDlciEgSpRowStatusTable=frAtmDlciEgSpRowStatusTable, frAtmCaOverrideLinkRate=frAtmCaOverrideLinkRate, frAtmDlciSiwfTransferPriority=frAtmDlciSiwfTransferPriority, frAtmDlciSiwfConnOpEntry=frAtmDlciSiwfConnOpEntry, frAtmCaSiwfEmissionPriorityToIf=frAtmCaSiwfEmissionPriorityToIf, frameRelayAtmGroupBE01=frameRelayAtmGroupBE01, frAtmDlciNiwfSpvcProvTable=frAtmDlciNiwfSpvcProvTable, frAtmDlciNiwfQoSEmissionPriorityToIf=frAtmDlciNiwfQoSEmissionPriorityToIf, frAtmDlciSpProvTable=frAtmDlciSpProvTable, frAtmDlciSiwfQoSIndex=frAtmDlciSiwfQoSIndex, frAtmDlciSiwfRowStatus=frAtmDlciSiwfRowStatus, frAtmDlciSiwfSdClpToDeMapping=frAtmDlciSiwfSdClpToDeMapping, frAtmVFramerFrmToOtherVFramer=frAtmVFramerFrmToOtherVFramer, frAtmDlciSiwfNPvcCorrelationTag=frAtmDlciSiwfNPvcCorrelationTag, frAtmCustomerIdentifier=frAtmCustomerIdentifier, frAtmDlciEirEgressBytes=frAtmDlciEirEgressBytes, frAtmDlciSiwfVccCauseDiag=frAtmDlciSiwfVccCauseDiag, frameRelayAtmCapabilitiesBE=frameRelayAtmCapabilitiesBE, frAtmLmiNetworkSideEventHistory=frAtmLmiNetworkSideEventHistory, frAtmDlciSiwfSPvcRemoteConnectionIdentifier=frAtmDlciSiwfSPvcRemoteConnectionIdentifier, frAtmLmiRowStatus=frAtmLmiRowStatus, frAtmDlciSiwfNPvc=frAtmDlciSiwfNPvc, frAtmCaSdDeToClpMapping=frAtmCaSdDeToClpMapping, frAtmVFramerOctetFromOtherVFramer=frAtmVFramerOctetFromOtherVFramer, frAtmCaTpmTrafficParmConvPolicy=frAtmCaTpmTrafficParmConvPolicy, frAtmDlciDiscDeCongestedFromIfBytes=frAtmDlciDiscDeCongestedFromIfBytes, frAtmLmiUserSideEventHistory=frAtmLmiUserSideEventHistory, frAtmDlciABitReasonToIf=frAtmDlciABitReasonToIf, frAtmDlciSpExcessBurstSize=frAtmDlciSpExcessBurstSize, frAtmCaPoolAvailBwEntry=frAtmCaPoolAvailBwEntry, frAtmDlciEmissionPriorityToIf=frAtmDlciEmissionPriorityToIf, frAtmDlciSpStorageType=frAtmDlciSpStorageType, frAtmDlciEirIngressFrames=frAtmDlciEirIngressFrames, frAtmCaTpmProvEntry=frAtmCaTpmProvEntry, frAtmDlciDiscDeCongestedToIf=frAtmDlciDiscDeCongestedToIf, frAtmFramerStatsTable=frAtmFramerStatsTable, frAtmLmiOpProcedures=frAtmLmiOpProcedures, frAtmDlciSiwfStatsEntry=frAtmDlciSiwfStatsEntry, frAtmDlciCalldTable=frAtmDlciCalldTable, frAtmCaLinkRate=frAtmCaLinkRate, frAtmDlciTroubledReason=frAtmDlciTroubledReason, frAtmDlciSp=frAtmDlciSp, frAtmDlciExcessFrmFromIf=frAtmDlciExcessFrmFromIf, frAtmCaSdClpToDeMapping=frAtmCaSdClpToDeMapping, frAtmDlciStateTable=frAtmDlciStateTable, frAtmDlciSiwfQoSRowStatusEntry=frAtmDlciSiwfQoSRowStatusEntry, frAtmVFramerStorageType=frAtmVFramerStorageType, frAtmDlciSiwfSd=frAtmDlciSiwfSd, frAtmCaSdTable=frAtmCaSdTable, frAtmDlciSiwfSPvcStorageType=frAtmDlciSiwfSPvcStorageType, frAtmCidDataTable=frAtmCidDataTable, frAtmDlciNiwfSpvcIndex=frAtmDlciNiwfSpvcIndex, frAtmComponentName=frAtmComponentName, frAtmLmiStatsEntry=frAtmLmiStatsEntry, frAtmDlciSiwfUnknown1490Frames=frAtmDlciSiwfUnknown1490Frames, frAtmDlciSiwfDeToClpMapping=frAtmDlciSiwfDeToClpMapping, frAtmDlciNiwfNdIndex=frAtmDlciNiwfNdIndex, frAtmLmiProcedures=frAtmLmiProcedures, frAtmDlciSiwfNPvcSiwfNpvcOpEntry=frAtmDlciSiwfNPvcSiwfNpvcOpEntry, frAtmDlciSiwfNPvcRowStatusEntry=frAtmDlciSiwfNPvcRowStatusEntry, frAtmOperationalState=frAtmOperationalState, frAtmDlciSiwfQoSTransferPriority=frAtmDlciSiwfQoSTransferPriority, frAtmLmiSequenceErrors=frAtmLmiSequenceErrors, frAtmDlciIntTable=frAtmDlciIntTable, frAtmDlciAccountingEnd=frAtmDlciAccountingEnd, frAtmDlciExcessBurstSize=frAtmDlciExcessBurstSize, frAtmIfEntryEntry=frAtmIfEntryEntry, frAtmDlciSiwfEquivalentBitRate=frAtmDlciSiwfEquivalentBitRate, frAtmDlciEgSpProvTable=frAtmDlciEgSpProvTable, frAtmDlciSpMeasurementInterval=frAtmDlciSpMeasurementInterval, frAtmLmiPollingVerifTimeouts=frAtmLmiPollingVerifTimeouts, frAtmUnknownStatus=frAtmUnknownStatus, frAtmDlciNiwfDeToClpMapping=frAtmDlciNiwfDeToClpMapping, frAtmDlciNiwfNdRowStatusEntry=frAtmDlciNiwfNdRowStatusEntry, frAtmLmiAsyncStatusReport=frAtmLmiAsyncStatusReport, frAtmIfAdminStatus=frAtmIfAdminStatus, frAtmEmissionPriorityQsEntry=frAtmEmissionPriorityQsEntry, frAtmDlciCorrelationTag=frAtmDlciCorrelationTag, frAtmLmiErrorEventThreshold=frAtmLmiErrorEventThreshold, frameRelayAtmCapabilitiesBE01A=frameRelayAtmCapabilitiesBE01A, frAtmFrmToIfByQueueTable=frAtmFrmToIfByQueueTable, frAtmOctetToIfByQueueIndex=frAtmOctetToIfByQueueIndex, frAtmLmiStateTable=frAtmLmiStateTable, frAtmDlciErrorLongFrmFromIf=frAtmDlciErrorLongFrmFromIf, frAtmFramerRowStatusEntry=frAtmFramerRowStatusEntry, frameRelayAtmGroup=frameRelayAtmGroup)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-FrameRelayAtmMIB", frAtmLmiProtocolErrors=frAtmLmiProtocolErrors)
