#
# PySNMP MIB module NBS-META-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBS-META-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndex, nbs = mibBuilder.importSymbols("NBS-CMMC-MIB", "InterfaceIndex", "nbs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, TimeTicks, MibIdentifier, Gauge32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, iso, Integer32, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "TimeTicks", "MibIdentifier", "Gauge32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "iso", "Integer32", "Unsigned32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
metaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 205))
if mibBuilder.loadTexts: metaMib.setLastUpdated('200808110000Z')
if mibBuilder.loadTexts: metaMib.setOrganization('NBS')
if mibBuilder.loadTexts: metaMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: metaMib.setDescription('MIB for representing NBS FDRNIX private information')
metaMibGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 205, 1))
if mibBuilder.loadTexts: metaMibGrp.setStatus('current')
if mibBuilder.loadTexts: metaMibGrp.setDescription('Meta MIB')
metaMibFeatureTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 205, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibFeatureTableSize.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureTableSize.setDescription('The number of rows in the metaMibFeature table')
metaMibFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 629, 205, 1, 2), )
if mibBuilder.loadTexts: metaMibFeatureTable.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureTable.setDescription('List of features a hardware device might implement.')
metaMibFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 205, 1, 2, 1), ).setIndexNames((0, "NBS-META-MIB", "metaMibFeatureID"))
if mibBuilder.loadTexts: metaMibFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureEntry.setDescription('A specific feature')
metaMibFeatureID = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: metaMibFeatureID.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureID.setDescription('Unique identifier for this feature')
metaMibFeatureFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibFeatureFamily.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureFamily.setDescription('Family of this feature')
metaMibFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibFeatureName.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureName.setDescription('Name of this feature')
metaMibFeatureDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibFeatureDesc.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureDesc.setDescription('Description of this feature and its settings')
metaMibFeatureUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibFeatureUnits.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureUnits.setDescription('The units used in this feature')
metaMibFeatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enum", 1), ("string", 2), ("integer", 3), ("float", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibFeatureType.setStatus('current')
if mibBuilder.loadTexts: metaMibFeatureType.setDescription('Data type')
metaMibVariableTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 205, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibVariableTableSize.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableTableSize.setDescription('The number of rows in the metaMibVariable table')
metaMibVariableTable = MibTable((1, 3, 6, 1, 4, 1, 629, 205, 1, 4), )
if mibBuilder.loadTexts: metaMibVariableTable.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableTable.setDescription('List of variables a specific device implements.')
metaMibVariableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1), ).setIndexNames((0, "NBS-META-MIB", "metaMibVariableIfIndex"), (0, "NBS-META-MIB", "metaMibVariableID"))
if mibBuilder.loadTexts: metaMibVariableEntry.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableEntry.setDescription('A specific feature')
metaMibVariableIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: metaMibVariableIfIndex.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableIfIndex.setDescription('What CCSSPPP does this belong to? If SS and PPP are zero, this belongs to a chassis. If PPP is zero, this belongs to a slot.')
metaMibVariableID = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: metaMibVariableID.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableID.setDescription('Index into metaMibFeatureTable (metaMibFeatureID).')
metaMibVariableCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibVariableCaps.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableCaps.setDescription('A list of comma separated strings that indicate what values this variable supports. Ranges and string lengths are expressed as a two item list (MIN,MAX). A zero length string indicates this variable is read only.')
metaMibVariableDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibVariableDefault.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableDefault.setDescription('Default value of this variable. It may report a zero length string if FeatureType is string.')
metaMibVariableJumper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibVariableJumper.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableJumper.setDescription("Current jumper setting for this variable. If the current jumper setting cannot be reported: - VariableJumper will report 'N/A' if FeatureType is string. - VariableJumper will be zero length otherwise. If FeatureType is string, a zero length VariableJumper is a valid value.")
metaMibVariableOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibVariableOper.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableOper.setDescription("Current operational value for this variable. If the current operational value cannot be reported: - VariableOper will report 'N/A' if FeatureType is string. - VariableOper will be zero length otherwise. If VariableOper reports not supported, but VariableCaps reports non-zero length, this variable is write-only due to hardware limitations. If FeatureType is string, a zero length VariableOper is a valid value.")
metaMibVariableAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: metaMibVariableAdmin.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableAdmin.setDescription('Administrative value of this variable. If the administrative value cannot be set for this variable, VariableCaps will report a zero length string when read. Writing zero length values are only permitted if FeatureType is string and VariableCaps permits it. Otherwise, zero length strings will be rejected. If FeatureType is string, a zero length VariableAdmin is a valid value.')
metaMibVariableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 205, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metaMibVariableStatus.setStatus('current')
if mibBuilder.loadTexts: metaMibVariableStatus.setDescription('Messages relating to this variable')
mibBuilder.exportSymbols("NBS-META-MIB", metaMibFeatureTableSize=metaMibFeatureTableSize, metaMibFeatureName=metaMibFeatureName, metaMibVariableID=metaMibVariableID, metaMibVariableTable=metaMibVariableTable, metaMibVariableAdmin=metaMibVariableAdmin, metaMibFeatureUnits=metaMibFeatureUnits, metaMibVariableIfIndex=metaMibVariableIfIndex, metaMibVariableEntry=metaMibVariableEntry, metaMibGrp=metaMibGrp, PYSNMP_MODULE_ID=metaMib, metaMibVariableOper=metaMibVariableOper, metaMibFeatureFamily=metaMibFeatureFamily, metaMib=metaMib, metaMibVariableTableSize=metaMibVariableTableSize, metaMibFeatureDesc=metaMibFeatureDesc, metaMibFeatureID=metaMibFeatureID, metaMibVariableCaps=metaMibVariableCaps, metaMibVariableJumper=metaMibVariableJumper, metaMibVariableDefault=metaMibVariableDefault, metaMibFeatureTable=metaMibFeatureTable, metaMibFeatureEntry=metaMibFeatureEntry, metaMibVariableStatus=metaMibVariableStatus, metaMibFeatureType=metaMibFeatureType)
