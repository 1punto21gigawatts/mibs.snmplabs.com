#
# PySNMP MIB module NETSCREEN-VPN-GATEWAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-VPN-GATEWAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
netscreenVpnMibModule, netscreenVpn = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpnMibModule", "netscreenVpn")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, NotificationType, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, Unsigned32, ObjectIdentity, Gauge32, Bits, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "NotificationType", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "Gauge32", "Bits", "iso", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenVpnGatewayMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 4))
netscreenVpnGatewayMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-13 00:00', '2001-09-28 00:00', '2001-05-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenVpnGatewayMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No comment', 'Creation date',))
if mibBuilder.loadTexts: netscreenVpnGatewayMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenVpnGatewayMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenVpnGatewayMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenVpnGatewayMibModule.setDescription('This module defines NetScreen private MIBs for Gateway VPN configuration')
nsVpnGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 4))
nsVpnGwTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1), )
if mibBuilder.loadTexts: nsVpnGwTable.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwTable.setDescription('Remote tunnel gateway table collects tunnel gateway configurations.')
nsVpnGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1), ).setIndexNames((0, "NETSCREEN-VPN-GATEWAY-MIB", "nsVpnGwIndex"))
if mibBuilder.loadTexts: nsVpnGwEntry.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwEntry.setDescription('Each entry in the nsVpnGwTable holds a set of configuration parameters associated with an instance of tunnel gateway.')
nsVpnGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwIndex.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwIndex.setDescription('A unique value for ike gateway table. Its value ranges between 0 and 65535 and may not be contiguous.')
nsVpnGwName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwName.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwName.setDescription('Tunnel gateway name.')
nsVpnGwRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("static-ip", 0), ("dynamic-ip", 1), ("dialup-user", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwRemoteType.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwRemoteType.setDescription('Remote tunnel gateway type.It shows whether the gateway use static ip, dynamic ip or dialup user.')
nsVpnGwRemoteStaticIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwRemoteStaticIp.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwRemoteStaticIp.setDescription('ip address of static-ip gateway.')
nsVpnGwRemotePeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwRemotePeerId.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwRemotePeerId.setDescription('Remote gateway peer id, which can be used for static-ip and dynamic ip gateway. This is optional for the static-ip gateway.')
nsVpnGwDialup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwDialup.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwDialup.setDescription('Remote gateway dialup user or group')
nsVpnGwInitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("main", 0), ("aggressive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwInitMode.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwInitMode.setDescription('Phase 1 can take place in either Main mode or Aggressive mode.')
nsVpnGwPhOnePropOne = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPhOnePropOne.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwPhOnePropOne.setDescription('Phase 1 Proposal one.')
nsVpnGwPhOnePropTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPhOnePropTwo.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwPhOnePropTwo.setDescription('Phase 1 Proposal two.')
nsVpnGwPhOnePropThree = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPhOnePropThree.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwPhOnePropThree.setDescription('Phase 1 Proposal three.')
nsVpnGwPhOnePropFour = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPhOnePropFour.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwPhOnePropFour.setDescription('Phase 1 Proposal four.')
nsVpnGwCertLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwCertLocal.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwCertLocal.setDescription('Local Certificate configuration for preferred certification.(optional)')
nsVpnGwPeerCa = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPeerCa.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwPeerCa.setDescription('Preferred Peer CA(optional)')
nsVpnGwPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 0), ("pkcs7", 1), ("pgp", 2), ("dns", 3), ("x509-sig", 4), ("x509-ke", 5), ("keerberos", 6), ("crl", 7), ("arl", 8), ("spki", 9), ("x509-att", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwPeerType.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwPeerType.setDescription('Peer Type(optional)')
nsVpnGwVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnGwVsys.setStatus('current')
if mibBuilder.loadTexts: nsVpnGwVsys.setDescription('vsys this gateway configuration belongs to.')
mibBuilder.exportSymbols("NETSCREEN-VPN-GATEWAY-MIB", nsVpnGwVsys=nsVpnGwVsys, nsVpnGwPeerType=nsVpnGwPeerType, nsVpnGwCertLocal=nsVpnGwCertLocal, nsVpnGwRemotePeerId=nsVpnGwRemotePeerId, nsVpnGwPeerCa=nsVpnGwPeerCa, nsVpnGwRemoteStaticIp=nsVpnGwRemoteStaticIp, nsVpnGwPhOnePropOne=nsVpnGwPhOnePropOne, nsVpnGateway=nsVpnGateway, nsVpnGwIndex=nsVpnGwIndex, nsVpnGwInitMode=nsVpnGwInitMode, PYSNMP_MODULE_ID=netscreenVpnGatewayMibModule, nsVpnGwName=nsVpnGwName, nsVpnGwPhOnePropTwo=nsVpnGwPhOnePropTwo, nsVpnGwDialup=nsVpnGwDialup, nsVpnGwTable=nsVpnGwTable, nsVpnGwRemoteType=nsVpnGwRemoteType, netscreenVpnGatewayMibModule=netscreenVpnGatewayMibModule, nsVpnGwPhOnePropFour=nsVpnGwPhOnePropFour, nsVpnGwPhOnePropThree=nsVpnGwPhOnePropThree, nsVpnGwEntry=nsVpnGwEntry)
