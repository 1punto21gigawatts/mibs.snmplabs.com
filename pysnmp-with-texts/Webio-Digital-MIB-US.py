#
# PySNMP MIB module Webio-Digital-MIB-US (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Webio-Digital-MIB-US
# Produced by pysmi-0.3.4 at Wed May  1 15:39:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, Integer32, Counter64, enterprises, TimeTicks, Gauge32, IpAddress, Counter32, Unsigned32, ModuleIdentity, ObjectIdentity, MibIdentifier, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Integer32", "Counter64", "enterprises", "TimeTicks", "Gauge32", "IpAddress", "Counter32", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
wut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040))
wtComServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1))
wtWebio = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2))
wtWebioEA12x12 = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4))
wtWebioEA2x2 = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13))
wtWebioEA24oem = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14))
wtWebioEA12x6Rel = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19))
wtWebAlarm6x6 = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20))
wtWebCount6 = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22))
wtWebioEA6x6 = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24))
wtWebioEA2x2ERP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25))
wtWebioEA12x6RelERP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26))
wtIpWatcher = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27))
wtWebioEA2x2_24V = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30))
wtWebioEA2x2ERP_24V = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31))
wtIpWatcher_24V = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32))
wtTrapReceiver2x2 = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33))
wtWebioEA2x2InOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1))
wtWebioEA2x2SessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 2))
wtWebioEA2x2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3))
wtWebioEA2x2Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 4))
wtWebioEA2x2Device = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1))
wtWebioEA2x2Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2))
wtWebioEA2x2Manufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 3))
wtWebioEA2x2Text = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 1))
wtWebioEA2x2TimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2))
wtWebioEA2x2Basic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3))
wtWebioEA2x2OutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 4))
wtWebioEA2x2Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5))
wtWebioEA2x2Network = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 1))
wtWebioEA2x2HTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 2))
wtWebioEA2x2Mail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3))
wtWebioEA2x2SNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 4))
wtWebioEA2x2UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 5))
wtWebioEA2x2Binary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6))
wtWebioEA2x2Syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 7))
wtWebioEA2x2FTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 8))
wtWebioEA2x2TimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1))
wtWebioEA2x2TimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 2))
wtWebioEA2x2DeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 3))
wtWebioEA12x12InOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1))
wtWebioEA12x12SessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 2))
wtWebioEA12x12Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3))
wtWebioEA12x12Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 4))
wtWebioEA12x12Device = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1))
wtWebioEA12x12Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2))
wtWebioEA12x12Manufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 3))
wtWebioEA12x12Text = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 1))
wtWebioEA12x12TimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2))
wtWebioEA12x12Basic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3))
wtWebioEA12x12OutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 4))
wtWebioEA12x12Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5))
wtWebioEA12x12Network = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 1))
wtWebioEA12x12HTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 2))
wtWebioEA12x12Mail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3))
wtWebioEA12x12SNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 4))
wtWebioEA12x12UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 5))
wtWebioEA12x12Binary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6))
wtWebioEA12x12Syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 7))
wtWebioEA12x12FTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 8))
wtWebioEA12x12TimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1))
wtWebioEA12x12TimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 2))
wtWebioEA12x12DeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 3))
wtWebioEA24oemInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1))
wtWebioEA24oemSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 2))
wtWebioEA24oemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3))
wtWebioEA24oemDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 4))
wtWebioEA24oemDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1))
wtWebioEA24oemPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2))
wtWebioEA24oemManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 3))
wtWebioEA24oemText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 1))
wtWebioEA24oemTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2))
wtWebioEA24oemBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3))
wtWebioEA24oemOutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 4))
wtWebioEA24oemAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5))
wtWebioEA24oemNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 1))
wtWebioEA24oemHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 2))
wtWebioEA24oemMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3))
wtWebioEA24oemSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 4))
wtWebioEA24oemUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 5))
wtWebioEA24oemBinary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6))
wtWebioEA24oemSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 7))
wtWebioEA24oemFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 8))
wtWebioEA24oemTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1))
wtWebioEA24oemTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 2))
wtWebioEA24oemDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 3))
wtWebioEA12x6RelInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1))
wtWebioEA12x6RelSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 2))
wtWebioEA12x6RelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3))
wtWebioEA12x6RelDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 4))
wtWebioEA12x6RelDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1))
wtWebioEA12x6RelPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2))
wtWebioEA12x6RelManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 3))
wtWebioEA12x6RelText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 1))
wtWebioEA12x6RelTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2))
wtWebioEA12x6RelBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3))
wtWebioEA12x6RelOutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 4))
wtWebioEA12x6RelAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5))
wtWebioEA12x6RelNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 1))
wtWebioEA12x6RelHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 2))
wtWebioEA12x6RelMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3))
wtWebioEA12x6RelSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 4))
wtWebioEA12x6RelUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 5))
wtWebioEA12x6RelBinary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6))
wtWebioEA12x6RelSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 7))
wtWebioEA12x6RelFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 8))
wtWebioEA12x6RelTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1))
wtWebioEA12x6RelTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 2))
wtWebioEA12x6RelDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 3))
wtWebAlarm6x6InOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1))
wtWebAlarm6x6SessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 2))
wtWebAlarm6x6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3))
wtWebAlarm6x6Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 4))
wtWebAlarm6x6Device = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1))
wtWebAlarm6x6Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2))
wtWebAlarm6x6Manufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 3))
wtWebAlarm6x6Text = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 1))
wtWebAlarm6x6TimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2))
wtWebAlarm6x6Basic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3))
wtWebAlarm6x6Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5))
wtWebAlarm6x6Network = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 1))
wtWebAlarm6x6HTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 2))
wtWebAlarm6x6Mail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3))
wtWebAlarm6x6SNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 4))
wtWebAlarm6x6UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 5))
wtWebAlarm6x6Syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 7))
wtWebAlarm6x6FTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 8))
wtWebAlarm6x6TimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1))
wtWebAlarm6x6TimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 2))
wtWebAlarm6x6DeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 3))
wtWebCount6InOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1))
wtWebCount6SessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 2))
wtWebCount6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3))
wtWebCount6Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 4))
wtWebCount6Device = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1))
wtWebCount6Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2))
wtWebCount6Manufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 3))
wtWebCount6Text = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 1))
wtWebCount6TimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2))
wtWebCount6Basic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3))
wtWebCount6Report = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5))
wtWebCount6Network = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 1))
wtWebCount6HTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 2))
wtWebCount6Mail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3))
wtWebCount6SNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 4))
wtWebCount6UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 5))
wtWebCount6Syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 7))
wtWebCount6FTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 8))
wtWebCount6TimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1))
wtWebCount6TimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 2))
wtWebCount6DeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 3))
wtWebioEA6x6InOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1))
wtWebioEA6x6SessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 2))
wtWebioEA6x6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3))
wtWebioEA6x6Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 4))
wtWebioEA6x6Device = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1))
wtWebioEA6x6Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2))
wtWebioEA6x6Manufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 3))
wtWebioEA6x6Text = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 1))
wtWebioEA6x6TimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2))
wtWebioEA6x6Basic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3))
wtWebioEA6x6OutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 4))
wtWebioEA6x6Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5))
wtWebioEA6x6Network = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 1))
wtWebioEA6x6HTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 2))
wtWebioEA6x6Mail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3))
wtWebioEA6x6SNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 4))
wtWebioEA6x6UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 5))
wtWebioEA6x6Binary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6))
wtWebioEA6x6Syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 7))
wtWebioEA6x6FTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 8))
wtWebioEA6x6TimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1))
wtWebioEA6x6TimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 2))
wtWebioEA6x6DeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 3))
wtWebioEA2x2ERPInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1))
wtWebioEA2x2ERPSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 2))
wtWebioEA2x2ERPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3))
wtWebioEA2x2ERPDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 4))
wtWebioEA2x2ERPDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1))
wtWebioEA2x2ERPPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2))
wtWebioEA2x2ERPManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 3))
wtWebioEA2x2ERPText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 1))
wtWebioEA2x2ERPTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2))
wtWebioEA2x2ERPBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3))
wtWebioEA2x2ERPOutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 4))
wtWebioEA2x2ERPAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5))
wtWebioEA2x2ERPNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 1))
wtWebioEA2x2ERPHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 2))
wtWebioEA2x2ERPMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3))
wtWebioEA2x2ERPSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 4))
wtWebioEA2x2ERPUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 5))
wtWebioEA2x2ERPBinary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6))
wtWebioEA2x2ERPSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 7))
wtWebioEA2x2ERPFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 8))
wtWebioEA2x2ERPWayBack = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 10))
wtWebioEA2x2ERPTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1))
wtWebioEA2x2ERPTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 2))
wtWebioEA2x2ERPDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 3))
wtWebioEA12x6RelERPInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1))
wtWebioEA12x6RelERPSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 2))
wtWebioEA12x6RelERPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3))
wtWebioEA12x6RelERPDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 4))
wtWebioEA12x6RelERPDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1))
wtWebioEA12x6RelERPPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2))
wtWebioEA12x6RelERPManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 3))
wtWebioEA12x6RelERPText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 1))
wtWebioEA12x6RelERPTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2))
wtWebioEA12x6RelERPBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3))
wtWebioEA12x6RelERPOutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 4))
wtWebioEA12x6RelERPAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5))
wtWebioEA12x6RelERPNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 1))
wtWebioEA12x6RelERPHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 2))
wtWebioEA12x6RelERPMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3))
wtWebioEA12x6RelERPSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 4))
wtWebioEA12x6RelERPUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 5))
wtWebioEA12x6RelERPBinary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6))
wtWebioEA12x6RelERPSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 7))
wtWebioEA12x6RelERPFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 8))
wtWebioEA12x6RelERPWayBack = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 10))
wtWebioEA12x6RelERPTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1))
wtWebioEA12x6RelERPTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 2))
wtWebioEA12x6RelERPDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 3))
wtIpWatcherInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1))
wtIpWatcherSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 2))
wtIpWatcherConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3))
wtIpWatcherDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 4))
wtIpWatcherDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1))
wtIpWatcherPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2))
wtIpWatcherManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 3))
wtIpWatcherText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 1))
wtIpWatcherTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2))
wtIpWatcherBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3))
wtIpWatcherAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5))
wtIpWatcherNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 1))
wtIpWatcherHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 2))
wtIpWatcherMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3))
wtIpWatcherSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 4))
wtIpWatcherUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 5))
wtIpWatcherSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 7))
wtIpWatcherFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 8))
wtIpWatcherIpList = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11))
wtIpWatcherTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1))
wtIpWatcherTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 2))
wtIpWatcherDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 3))
wtWebioEA2x2_24VInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1))
wtWebioEA2x2_24VSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 2))
wtWebioEA2x2_24VConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3))
wtWebioEA2x2_24VDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 4))
wtWebioEA2x2_24VDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1))
wtWebioEA2x2_24VPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2))
wtWebioEA2x2_24VManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 3))
wtWebioEA2x2_24VText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 1))
wtWebioEA2x2_24VTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2))
wtWebioEA2x2_24VBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3))
wtWebioEA2x2_24VOutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 4))
wtWebioEA2x2_24VAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5))
wtWebioEA2x2_24VNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 1))
wtWebioEA2x2_24VHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 2))
wtWebioEA2x2_24VMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3))
wtWebioEA2x2_24VSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 4))
wtWebioEA2x2_24VUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 5))
wtWebioEA2x2_24VBinary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6))
wtWebioEA2x2_24VSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 7))
wtWebioEA2x2_24VFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 8))
wtWebioEA2x2_24VTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1))
wtWebioEA2x2_24VTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 2))
wtWebioEA2x2_24VDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 3))
wtWebioEA2x2ERP_24VInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1))
wtWebioEA2x2ERP_24VSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 2))
wtWebioEA2x2ERP_24VConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3))
wtWebioEA2x2ERP_24VDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 4))
wtWebioEA2x2ERP_24VDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1))
wtWebioEA2x2ERP_24VPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2))
wtWebioEA2x2ERP_24VManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 3))
wtWebioEA2x2ERP_24VText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 1))
wtWebioEA2x2ERP_24VTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2))
wtWebioEA2x2ERP_24VBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3))
wtWebioEA2x2ERP_24VOutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 4))
wtWebioEA2x2ERP_24VAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5))
wtWebioEA2x2ERP_24VNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 1))
wtWebioEA2x2ERP_24VHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 2))
wtWebioEA2x2ERP_24VMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3))
wtWebioEA2x2ERP_24VSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 4))
wtWebioEA2x2ERP_24VUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 5))
wtWebioEA2x2ERP_24VBinary = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6))
wtWebioEA2x2ERP_24VSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 7))
wtWebioEA2x2ERP_24VFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 8))
wtWebioEA2x2ERP_24VWayBack = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 10))
wtWebioEA2x2ERP_24VTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1))
wtWebioEA2x2ERP_24VTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 2))
wtWebioEA2x2ERP_24VDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 3))
wtIpWatcher_24VInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1))
wtIpWatcher_24VSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 2))
wtIpWatcher_24VConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3))
wtIpWatcher_24VDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 4))
wtIpWatcher_24VDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1))
wtIpWatcher_24VPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2))
wtIpWatcher_24VManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 3))
wtIpWatcher_24VText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 1))
wtIpWatcher_24VTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2))
wtIpWatcher_24VBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3))
wtIpWatcher_24VOutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 4))
wtIpWatcher_24VAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5))
wtIpWatcher_24VNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 1))
wtIpWatcher_24VHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 2))
wtIpWatcher_24VMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3))
wtIpWatcher_24VSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 4))
wtIpWatcher_24VUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 5))
wtIpWatcher_24VSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 7))
wtIpWatcher_24VFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 8))
wtIpWatcher_24VIpList = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11))
wtIpWatcher_24VTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1))
wtIpWatcher_24VTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 2))
wtIpWatcher_24VDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 3))
wtTrapReceiver2x2InOut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1))
wtTrapReceiver2x2SessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 2))
wtTrapReceiver2x2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3))
wtTrapReceiver2x2Diag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 4))
wtTrapReceiver2x2Device = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1))
wtTrapReceiver2x2Ports = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 2))
wtTrapReceiver2x2Manufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 3))
wtTrapReceiver2x2Text = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 1))
wtTrapReceiver2x2TimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2))
wtTrapReceiver2x2Basic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3))
wtTrapReceiver2x2OutputMode = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 4))
wtTrapReceiver2x2Action = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5))
wtTrapReceiver2x2PrepareInEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6))
wtTrapReceiver2x2PrepareOutEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 7))
wtTrapReceiver2x2Network = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 1))
wtTrapReceiver2x2HTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 2))
wtTrapReceiver2x2Mail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3))
wtTrapReceiver2x2SNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 4))
wtTrapReceiver2x2UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 5))
wtTrapReceiver2x2Syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 7))
wtTrapReceiver2x2FTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 8))
wtTrapReceiver2x2TimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1))
wtTrapReceiver2x2TimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 2))
wtTrapReceiver2x2DeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 3))
wtTrapReceiver2x2WatchList = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1))
wtTrapReceiver2x2InEvSystemTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 2))
wtTrapReceiver2x2InEvButtons = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 3))
wtTrapReceiver2x2InEvInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 4))
wtTrapReceiver2x2OutEvOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 7, 1))
wtWebioEA2x2Inputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2Inputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2Inputs.setDescription('Number of idependent inputs.')
wtWebioEA2x2Outputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2Outputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2Outputs.setDescription('Number of idependent outputs.')
wtWebioEA2x2InputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2InputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputTable.setDescription('List of input indices.')
wtWebioEA2x2InputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2InputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2InputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputEntry.setDescription('Number of the inputs.')
wtWebioEA2x2InputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2InputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputNo.setDescription('Index numbers of the inputs.')
wtWebioEA2x2InputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2InputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputCounter.setDescription('Value of the input counter.')
wtWebioEA2x2InputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2InputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebioEA2x2InputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2InputState-OFF", 0), ("wtWebioEA2x2InputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2InputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputState.setDescription('Value of a single input bit.')
wtWebioEA2x2InputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2InputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1')
wtWebioEA2x2OutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA2x2OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputTable.setDescription('List of output indices.')
wtWebioEA2x2OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2OutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputEntry.setDescription('Number of the outputs.')
wtWebioEA2x2OutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2OutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputNo.setDescription('Output number.')
wtWebioEA2x2OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2OutputState-OFF", 0), ("wtWebioEA2x2OutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2OutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputState.setDescription('Value of a single output bit.')
wtWebioEA2x2OutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1 Bit 2-7: ungenutzt')
wtWebioEA2x2SetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1')
wtWebioEA2x2SessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA2x2SessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA2x2SessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2SessCntrl-NoSession", 0), ("wtWebioEA2x2SessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA2x2SessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA2x2SessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA2x2SessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA2x2DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA2x2DeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2DeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA2x2DeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2DeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA2x2DeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2DeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA2x2TzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2TzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2TzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA2x2TzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2TzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2TzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA2x2TzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2TzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2TzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA2x2StTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA2x2StTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA2x2StTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA2x2StTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2StartMonth-January", 1), ("wtWebioEA2x2StartMonth-February", 2), ("wtWebioEA2x2StartMonth-March", 3), ("wtWebioEA2x2StartMonth-April", 4), ("wtWebioEA2x2StartMonth-May", 5), ("wtWebioEA2x2StartMonth-June", 6), ("wtWebioEA2x2StartMonth-July", 7), ("wtWebioEA2x2StartMonth-August", 8), ("wtWebioEA2x2StartMonth-September", 9), ("wtWebioEA2x2StartMonth-October", 10), ("wtWebioEA2x2StartMonth-November", 11), ("wtWebioEA2x2StartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA2x2StTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA2x2StartMode-first", 1), ("wtWebioEA2x2StartMode-second", 2), ("wtWebioEA2x2StartMode-third", 3), ("wtWebioEA2x2StartMode-fourth", 4), ("wtWebioEA2x2StartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA2x2StTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA2x2StartWday-Sunday", 1), ("wtWebioEA2x2StartWday-Monday", 2), ("wtWebioEA2x2StartWday-Tuesday", 3), ("wtWebioEA2x2StartWday-Thursday", 4), ("wtWebioEA2x2StartWday-Wednesday", 5), ("wtWebioEA2x2StartWday-Friday", 6), ("wtWebioEA2x2StartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA2x2StTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA2x2StTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA2x2StTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2StopMonth-January", 1), ("wtWebioEA2x2StopMonth-February", 2), ("wtWebioEA2x2StopMonth-March", 3), ("wtWebioEA2x2StopMonth-April", 4), ("wtWebioEA2x2StopMonth-May", 5), ("wtWebioEA2x2StopMonth-June", 6), ("wtWebioEA2x2StopMonth-July", 7), ("wtWebioEA2x2StopMonth-August", 8), ("wtWebioEA2x2StopMonth-September", 9), ("wtWebioEA2x2StopMonth-October", 10), ("wtWebioEA2x2StopMonth-November", 11), ("wtWebioEA2x2StopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA2x2StTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA2x2StopMode-first", 1), ("wtWebioEA2x2StopMode-second", 2), ("wtWebioEA2x2StopMode-third", 3), ("wtWebioEA2x2StopMode-fourth", 4), ("wtWebioEA2x2StopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA2x2StTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA2x2StopWday-Sunday", 1), ("wtWebioEA2x2StopWday-Monday", 2), ("wtWebioEA2x2StopWday-Tuesday", 3), ("wtWebioEA2x2StopWday-Thursday", 4), ("wtWebioEA2x2StopWday-Wednesday", 5), ("wtWebioEA2x2StopWday-Friday", 6), ("wtWebioEA2x2StopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA2x2StTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA2x2StTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2StTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA2x2TimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2TimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2TimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA2x2TimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2TimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2TimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA2x2TsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2TsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2TsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA2x2TsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2TsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2TsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA2x2ClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA2x2ClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA2x2ClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA2x2ClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2ClockMonth-January", 1), ("wtWebioEA2x2ClockMonth-February", 2), ("wtWebioEA2x2ClockMonth-March", 3), ("wtWebioEA2x2ClockMonth-April", 4), ("wtWebioEA2x2ClockMonth-May", 5), ("wtWebioEA2x2ClockMonth-June", 6), ("wtWebioEA2x2ClockMonth-July", 7), ("wtWebioEA2x2ClockMonth-August", 8), ("wtWebioEA2x2ClockMonth-September", 9), ("wtWebioEA2x2ClockMonth-October", 10), ("wtWebioEA2x2ClockMonth-November", 11), ("wtWebioEA2x2ClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA2x2ClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA2x2IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2IpAddress.setDescription('IP address of the Webio')
wtWebioEA2x2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA2x2Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2Gateway.setDescription('Gateway of the Webio')
wtWebioEA2x2DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2DnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA2x2DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2DnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA2x2AddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA2x2Startup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2Startup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2Startup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA2x2GetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2GetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2GetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA2x2HttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2HttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2HttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2HttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2HttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2HttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA2x2MailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MailAdName.setDescription('Device name for mail administration.')
wtWebioEA2x2MailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MailReply.setDescription('Reply address for the mail server.')
wtWebioEA2x2MailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA2x2MailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA2x2MailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA2x2MailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA2x2MailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MailAuthPassword.setDescription('Authentication password.')
wtWebioEA2x2MailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA2x2SnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA2x2SnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA2x2SnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA2x2SnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA2x2SnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebioEA2x2UdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2UdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2UdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA2x2UdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2UdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2UdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA2x2UdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2UdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2UdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA2x2BinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA2x2BinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2BinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryIfTable.setDescription('Table of indices.')
wtWebioEA2x2BinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2BinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA2x2BinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA2x2BinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA2x2BinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA2x2BinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2BinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA2x2BinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryEntry.setDescription('Binary properties.')
wtWebioEA2x2BinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA2x2BinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2BinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2BinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2BinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2BinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA2x2BinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA2x2BinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA2x2BinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA2x2BinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2BinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA2x2BinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2BinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2BinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA2x2BinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA2x2BinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2BinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA2x2BinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2BinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA2x2BinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA2x2BinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA2x2BinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2BinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA2x2SyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA2x2SyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA2x2SyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA2x2SyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA2x2FTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2FTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2FTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA2x2FTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2FTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2FTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA2x2FTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2FTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2FTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA2x2FTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2FTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2FTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA2x2FTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2FTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2FTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA2x2FTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2FTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2FTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA2x2FTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2FTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2FTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA2x2OutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA2x2OutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA2x2OutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2OutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2OutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA2x2OutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2OutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA2x2SafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2SafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2SafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA2x2LoadControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2LoadControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2LoadControlEnable.setDescription('Here the function of automatic load control can be enabled. All output were tested in pairs (0-1). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Load Control enable')
wtWebioEA2x2AlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmCount.setDescription('Number of independent alarms.')
wtWebioEA2x2AlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2AlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA2x2AlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2AlarmNo"))
if mibBuilder.loadTexts: wtWebioEA2x2AlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA2x2AlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA2x2AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA2x2AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2AlarmNo"))
if mibBuilder.loadTexts: wtWebioEA2x2AlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA2x2AlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital inputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital inputs 0-1 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: ANY bits of digital inputs 0-1')
wtWebioEA2x2AlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: ANY bits of digital outputs 0-1')
wtWebioEA2x2AlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : Load Control')
wtWebioEA2x2AlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA2x2AlarmInputTrigger are not considered.')
wtWebioEA2x2AlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA2x2AlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtWebioEA2x2AlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA2x2AlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA2x2AlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA2x2AlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA2x2AlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA2x2AlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA2x2AlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA2x2AlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA2x2AlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA2x2AlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA2x2AlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA2x2AlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA2x2AlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA2x2AlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA2x2AlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA2x2AlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA2x2AlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA2x2AlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA2x2AlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA2x2AlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebioEA2x2AlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA2x2AlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebioEA2x2AlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebioEA2x2AlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebioEA2x2AlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA2x2AlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2AlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebioEA2x2LoadControlView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2LoadControlView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2LoadControlView.setDescription('Here the result of automatic load control can be read. All output were tested in pairs (0-1). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0-1: outputs 0-1.')
wtWebioEA2x2LCShutDownView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 1, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2LCShutDownView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2LCShutDownView.setDescription('Here the result of the automatic load control shut down can be read. All outputs remain switched of, until a zero is written into this variable. But previously all loads should be inspected. High current (short circuit), a broken supply line or a defect load (i.e. lamp) may be a shut down reason. If no load is detected, the load control unit suspend automaticly the control of the corresponding output pair. All controlled output could be identified reading the variable wtWebioEA2x2LoadControlEnable. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an ouput. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0-1: outputs 0-1.')
wtWebioEA2x2InputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA2x2InputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA2x2InputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2InputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2InputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2InputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA2x2PortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortInputName.setDescription('Name of the input.')
wtWebioEA2x2PortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortInputText.setDescription('Description of the input.')
wtWebioEA2x2PortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. Selection for input 0-1: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Bidirectional counter enable Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable')
wtWebioEA2x2PortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA2x2PortInputBicountPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortInputBicountPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortInputBicountPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA2x2PortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebioEA2x2OutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2OutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA2x2OutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2OutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2OutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2OutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA2x2PortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortOutputName.setDescription('Name of the output.')
wtWebioEA2x2PortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortOutputText.setDescription('Description of the output.')
wtWebioEA2x2PortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortOutputGroupMode.setDescription('It is possible to connect outputs together to increase the output current. This could be done by connecting 2 or 4 outputs in a group together. All bits of such a group has to be set all together in the same way. This variable configures this group scheme. If one ouput bit of a group is set, all other output bits of the same group will be set in the same manner. More than one configuration must not be selected. Selection for ouputs 0-1: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : ouputs 0,1 disconnected (default) Bit 1 : ouputs 0+1 connected')
wtWebioEA2x2PortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA2x2PortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA2x2PortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA2x2PortLogicInputInverter) 3. Logical combination (wtWebioEA2x2PortLogicFunction) 4. Inverting the result if necessary (wtWebioEA2x2PortLogicOutputInverter) OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-1 : inputs 0-1')
wtWebioEA2x2PortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-1 : inputs 0-1')
wtWebioEA2x2PortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA2x2PortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA2x2PortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA2x2PortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2PortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2PortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA2x2PortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA2x2MfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MfName.setDescription('Manufacturer company name')
wtWebioEA2x2MfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MfAddr.setDescription('Manufacturer address.')
wtWebioEA2x2MfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MfHotline.setDescription('Manufacturer hotline.')
wtWebioEA2x2MfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA2x2MfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2MfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2MfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA2x2DiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2DiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA2x2DiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2DiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA2x2DiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2DiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA2x2DiagErrorMessage. Errors are numbered from 1 to wtWebioEA2x2DiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA2x2DiagErrorMessage.')
wtWebioEA2x2DiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2DiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DiagErrorMessage.setDescription('Using wtWebioEA2x2DiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA2x2DiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA2x2DiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2DiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA2x2Alert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2Alert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2Alert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2AlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 13) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2DiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA2x2DiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA2x2AlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Inputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12Inputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12Inputs.setDescription('Number of idependent inputs.')
wtWebioEA12x12Outputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12Outputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12Outputs.setDescription('Number of idependent outputs.')
wtWebioEA12x12InputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA12x12InputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputTable.setDescription('List of input indices.')
wtWebioEA12x12InputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12InputNo"))
if mibBuilder.loadTexts: wtWebioEA12x12InputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputEntry.setDescription('Number of the inputs.')
wtWebioEA12x12InputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12InputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputNo.setDescription('Index numbers of the inputs.')
wtWebioEA12x12InputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12InputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputCounter.setDescription('Value of the input counter.')
wtWebioEA12x12InputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12InputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebioEA12x12InputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA12x12InputState-OFF", 0), ("wtWebioEA12x12InputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12InputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputState.setDescription('Value of a single input bit.')
wtWebioEA12x12InputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12InputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital outputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital outputs 0-7')
wtWebioEA12x12OutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA12x12OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputTable.setDescription('List of output indices.')
wtWebioEA12x12OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12OutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x12OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputEntry.setDescription('Number of the outputs.')
wtWebioEA12x12OutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12OutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputNo.setDescription('Output number.')
wtWebioEA12x12OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA12x12OutputState-OFF", 0), ("wtWebioEA12x12OutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12OutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputState.setDescription('Value of a single output bit.')
wtWebioEA12x12OutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital outputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital outputs 0-7')
wtWebioEA12x12SetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3, Bit 0-3: Mask for digital outputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Mask for digital outputs 0-7 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7, Bit 0-3: Level of digital outputs 8-11 Bit 4-7: unused OCTET 8, Bit 0-7: Level of digital outputs 0-7')
wtWebioEA12x12SessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA12x12SessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA12x12SessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA12x12SessCntrl-NoSession", 0), ("wtWebioEA12x12SessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA12x12SessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA12x12SessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA12x12SessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA12x12DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA12x12DeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12DeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA12x12DeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12DeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA12x12DeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12DeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA12x12TzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12TzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12TzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA12x12TzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12TzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12TzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA12x12TzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12TzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12TzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA12x12StTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA12x12StTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA12x12StTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA12x12StTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x12StartMonth-January", 1), ("wtWebioEA12x12StartMonth-February", 2), ("wtWebioEA12x12StartMonth-March", 3), ("wtWebioEA12x12StartMonth-April", 4), ("wtWebioEA12x12StartMonth-May", 5), ("wtWebioEA12x12StartMonth-June", 6), ("wtWebioEA12x12StartMonth-July", 7), ("wtWebioEA12x12StartMonth-August", 8), ("wtWebioEA12x12StartMonth-September", 9), ("wtWebioEA12x12StartMonth-October", 10), ("wtWebioEA12x12StartMonth-November", 11), ("wtWebioEA12x12StartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA12x12StTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA12x12StartMode-first", 1), ("wtWebioEA12x12StartMode-second", 2), ("wtWebioEA12x12StartMode-third", 3), ("wtWebioEA12x12StartMode-fourth", 4), ("wtWebioEA12x12StartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA12x12StTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA12x12StartWday-Sunday", 1), ("wtWebioEA12x12StartWday-Monday", 2), ("wtWebioEA12x12StartWday-Tuesday", 3), ("wtWebioEA12x12StartWday-Thursday", 4), ("wtWebioEA12x12StartWday-Wednesday", 5), ("wtWebioEA12x12StartWday-Friday", 6), ("wtWebioEA12x12StartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA12x12StTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA12x12StTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA12x12StTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x12StopMonth-January", 1), ("wtWebioEA12x12StopMonth-February", 2), ("wtWebioEA12x12StopMonth-March", 3), ("wtWebioEA12x12StopMonth-April", 4), ("wtWebioEA12x12StopMonth-May", 5), ("wtWebioEA12x12StopMonth-June", 6), ("wtWebioEA12x12StopMonth-July", 7), ("wtWebioEA12x12StopMonth-August", 8), ("wtWebioEA12x12StopMonth-September", 9), ("wtWebioEA12x12StopMonth-October", 10), ("wtWebioEA12x12StopMonth-November", 11), ("wtWebioEA12x12StopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA12x12StTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA12x12StopMode-first", 1), ("wtWebioEA12x12StopMode-second", 2), ("wtWebioEA12x12StopMode-third", 3), ("wtWebioEA12x12StopMode-fourth", 4), ("wtWebioEA12x12StopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA12x12StTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA12x12StopWday-Sunday", 1), ("wtWebioEA12x12StopWday-Monday", 2), ("wtWebioEA12x12StopWday-Tuesday", 3), ("wtWebioEA12x12StopWday-Thursday", 4), ("wtWebioEA12x12StopWday-Wednesday", 5), ("wtWebioEA12x12StopWday-Friday", 6), ("wtWebioEA12x12StopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA12x12StTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA12x12StTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12StTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA12x12TimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12TimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12TimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA12x12TimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12TimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12TimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA12x12TsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12TsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12TsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA12x12TsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12TsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12TsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA12x12ClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12ClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12ClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA12x12ClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12ClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12ClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA12x12ClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12ClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12ClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA12x12ClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x12ClockMonth-January", 1), ("wtWebioEA12x12ClockMonth-February", 2), ("wtWebioEA12x12ClockMonth-March", 3), ("wtWebioEA12x12ClockMonth-April", 4), ("wtWebioEA12x12ClockMonth-May", 5), ("wtWebioEA12x12ClockMonth-June", 6), ("wtWebioEA12x12ClockMonth-July", 7), ("wtWebioEA12x12ClockMonth-August", 8), ("wtWebioEA12x12ClockMonth-September", 9), ("wtWebioEA12x12ClockMonth-October", 10), ("wtWebioEA12x12ClockMonth-November", 11), ("wtWebioEA12x12ClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12ClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12ClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA12x12ClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12ClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12ClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA12x12IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12IpAddress.setDescription('IP address of the Webio')
wtWebioEA12x12SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA12x12Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12Gateway.setDescription('Gateway of the Webio')
wtWebioEA12x12DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12DnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA12x12DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12DnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA12x12AddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA12x12Startup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12Startup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12Startup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA12x12GetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12GetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12GetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA12x12HttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12HttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12HttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x12HttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12HttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12HttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA12x12MailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MailAdName.setDescription('Device name for mail administration.')
wtWebioEA12x12MailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MailReply.setDescription('Reply address for the mail server.')
wtWebioEA12x12MailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA12x12MailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA12x12MailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA12x12MailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA12x12MailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MailAuthPassword.setDescription('Authentication password.')
wtWebioEA12x12MailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA12x12SnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA12x12SnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA12x12SnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA12x12SnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA12x12SnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebioEA12x12UdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12UdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12UdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA12x12UdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12UdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12UdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA12x12UdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12UdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12UdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA12x12BinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA12x12BinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA12x12BinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryIfTable.setDescription('Table of indices.')
wtWebioEA12x12BinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12BinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA12x12BinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA12x12BinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA12x12BinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA12x12BinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12BinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA12x12BinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryEntry.setDescription('Binary properties.')
wtWebioEA12x12BinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA12x12BinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x12BinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x12BinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x12BinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x12BinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA12x12BinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA12x12BinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA12x12BinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA12x12BinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x12BinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA12x12BinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x12BinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x12BinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA12x12BinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA12x12BinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x12BinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA12x12BinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x12BinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA12x12BinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA12x12BinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA12x12BinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12BinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA12x12SyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA12x12SyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA12x12SyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA12x12SyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA12x12FTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12FTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12FTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA12x12FTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12FTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12FTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA12x12FTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12FTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12FTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA12x12FTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12FTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12FTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA12x12FTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12FTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12FTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA12x12FTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12FTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12FTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA12x12FTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12FTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12FTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA12x12OutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA12x12OutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA12x12OutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12OutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x12OutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA12x12OutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12OutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA12x12SafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12SafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12SafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA12x12LoadControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12LoadControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12LoadControlEnable.setDescription('Here the function of automatic load control can be enabled. All output were tested in pairs (0-1, 2-3, 4-5, 6-7, 8-9, 10-11). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Load Control enable')
wtWebioEA12x12AlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmCount.setDescription('Number of independent alarms.')
wtWebioEA12x12AlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA12x12AlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA12x12AlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12AlarmNo"))
if mibBuilder.loadTexts: wtWebioEA12x12AlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA12x12AlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA12x12AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA12x12AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12AlarmNo"))
if mibBuilder.loadTexts: wtWebioEA12x12AlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA12x12AlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3, Bit 0-3: Mask for digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Mask for digital inputs 0-7 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7, Bit 0-3: Level of digital inputs 8-11 Bit 4-7: unused OCTET 8, Bit 0-7: Level of digital inputs 0-7 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 10: unsused OCTET 11, Bit 0-7 : ANY bits of digital inputs 8-11 Bit 12-15 : unused OCTET 12, Bit 0-7 : ANY bits of digital inputs 0-7')
wtWebioEA12x12AlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3, Bit 0-3: Mask for digital outputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Mask for digital outputs 0-7 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7, Bit 0-3: Level of digital outputs 8-11 Bit 4-7: unused OCTET 8, Bit 0-7: Level of digital outputs 0-7 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 11, Bit 0-7 : ANY bits of digital inputs 8-11 Bit 12-15 : unused OCTET 12, Bit 0-7 : ANY bits of digital inputs 0-7')
wtWebioEA12x12AlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : Load Control')
wtWebioEA12x12AlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA12x12AlarmInputTrigger are not considered.')
wtWebioEA12x12AlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA12x12AlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtWebioEA12x12AlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA12x12AlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA12x12AlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA12x12AlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA12x12AlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA12x12AlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA12x12AlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA12x12AlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA12x12AlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA12x12AlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA12x12AlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA12x12AlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA12x12AlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA12x12AlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA12x12AlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA12x12AlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA12x12AlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA12x12AlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA12x12AlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA12x12AlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebioEA12x12AlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA12x12AlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebioEA12x12AlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebioEA12x12AlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebioEA12x12AlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA12x12AlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12AlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebioEA12x12LoadControlView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12LoadControlView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12LoadControlView.setDescription('Here the result of automatic load control can be read. All output were tested in pairs (0-1, 2-3, 4-5, 6-7, 8-9, 10-11). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: Bit 4-7: unused Bit 0-3: outputs 8-11 Octet 4: Bit 0-7: outputs 0-7.')
wtWebioEA12x12LCShutDownView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 1, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12LCShutDownView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12LCShutDownView.setDescription('Here the result of the automatic load control shut down can be read. All outputs remain switched of, until a zero is written into this variable. But previously all loads should be inspected. High current (short circuit), a broken supply line or a defect load (i.e. lamp) may be a shut down reason. If no load is detected, the load control unit suspend automaticly the control of the corresponding output pair. All controlled output could be identified reading the variable wtWebioEA12x12LoadControlEnable. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: Bit 4-7: unused Bit 0-3: outputs 8-11 Octet 4: Bit 0-7: outputs 0-7.')
wtWebioEA12x12InputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA12x12InputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA12x12InputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12InputNo"))
if mibBuilder.loadTexts: wtWebioEA12x12InputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12InputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA12x12PortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortInputName.setDescription('Name of the input.')
wtWebioEA12x12PortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortInputText.setDescription('Description of the input.')
wtWebioEA12x12PortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, with each set of octets corresponding to an input. Bit 0 corresponds to the LSB. Selection for input 0-3: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 3-7: unused Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable Selection for inputs 4-11: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Counter clear on read Bit 0 : Change detection enable (default)')
wtWebioEA12x12PortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA12x12PortInputBicountPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortInputBicountPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortInputBicountPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA12x12PortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebioEA12x12OutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA12x12OutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA12x12OutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x12OutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x12OutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12OutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA12x12PortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortOutputName.setDescription('Name of the output.')
wtWebioEA12x12PortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortOutputText.setDescription('Description of the output.')
wtWebioEA12x12PortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortOutputGroupMode.setDescription('It is possible to connect outputs together to increase the output current. This could be done by connecting 2 or 4 outputs in a group together. All bits of such a group has to be set all together in the same way. This variable configures this group scheme. If one output bit of a group is set, all other output bits of the same group will be set in the same manner. More than one configuration must not be selected. Selection for outputs 0-3: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : outputs 0,1,2,3 disconnected (default) Bit 1 : outputs 0+1, 2+3 connected Bit 2 : outputs 0+1+2+3 connected Bit 3-7 : unused Selection for outputs 4-7: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : outputs 4, 5, 6, 7 disconnected (default) Bit 1 : outputs 4+5, 6+7 connected Bit 2 : outputs 4+5+6+7 connected Bit 3-7 : unused Selection for outputs 8-11: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : outputs 8, 9, 10, 11 disconnected (default) Bit 1 : outputs 8+9, 10+11 connected Bit 2 : outputs 8+9+10+11 connected Bit 3-7 : unused')
wtWebioEA12x12PortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA12x12PortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA12x12PortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA12x12PortLogicInputInverter) 3. Logical combination (wtWebioEA12x12PortLogicFunction) 4. Inverting the result if necessary (wtWebioEA12x12PortLogicOutputInverter) OCTET 1: unused OCTET 2: unused OCTET 3: Bit 0-3 : inputs 8-11 Bit 4-7 : unused OCTET 4: Bit 0-7 : inputs 0-7')
wtWebioEA12x12PortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: unused OCTET 3: Bit 0-3 : inputs 8-11 Bit 4-7 : unused OCTET 4: Bit 0-7 : inputs 0-7')
wtWebioEA12x12PortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA12x12PortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA12x12PortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA12x12PortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12PortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12PortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA12x12PortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA12x12MfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MfName.setDescription('Manufacturer company name')
wtWebioEA12x12MfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MfAddr.setDescription('Manufacturer address.')
wtWebioEA12x12MfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MfHotline.setDescription('Manufacturer hotline.')
wtWebioEA12x12MfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA12x12MfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12MfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12MfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA12x12DiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12DiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA12x12DiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12DiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA12x12DiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x12DiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA12x12DiagErrorMessage. Errors are numbered from 1 to wtWebioEA12x12DiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA12x12DiagErrorMessage.')
wtWebioEA12x12DiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x12DiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DiagErrorMessage.setDescription('Using wtWebioEA12x12DiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA12x12DiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA12x12DiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x12DiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA12x12Alert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12Alert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x12Alert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x12AlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 4) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x12DiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA12x12DiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA12x12AlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemInputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemInputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputs.setDescription('Number of independent inputs.')
wtWebioEA24oemOutputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputs.setDescription('Number of independent outputs.')
wtWebioEA24oemInputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA24oemInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputTable.setDescription('List of input indices.')
wtWebioEA24oemInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemInputNo"))
if mibBuilder.loadTexts: wtWebioEA24oemInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputEntry.setDescription('Numbers of the inputs.')
wtWebioEA24oemInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputNo.setDescription('Index numbers of the inputs.')
wtWebioEA24oemInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputCounter.setDescription('Value of the input counter.')
wtWebioEA24oemInputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemInputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputCounterClear.setDescription('Value of the input counter. After reading this counter will be cleared.')
wtWebioEA24oemInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA24oemInputState-OFF", 0), ("wtWebioEA24oemInputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemInputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputState.setDescription('Value of a single input bit.')
wtWebioEA24oemInputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: Bit 0-7 : inputs 16 - 23 OCTET 3: Bit 0-7 : inputs 8 - 15 OCTET 4: Bit 0-7 : inputs 0 - 7')
wtWebioEA24oemOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA24oemOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputTable.setDescription('List of output indices.')
wtWebioEA24oemOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemOutputNo"))
if mibBuilder.loadTexts: wtWebioEA24oemOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputEntry.setDescription('Numbers of the outputs.')
wtWebioEA24oemOutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemOutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputNo.setDescription('Index numbers of the outputs.')
wtWebioEA24oemOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA24oemOutputState-OFF", 0), ("wtWebioEA24oemOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputState.setDescription('Value of a single output bit.')
wtWebioEA24oemOutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: Bit 0-7: Digital outputs 16-23 OCTET 3, Bit 0-7: Digital outputs 8-15 OCTET 4, Bit 0-7: Digital outputs 0-7')
wtWebioEA24oemSetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1: unused OCTET 2: Bit 0-7: Mask for digital outputs 16-23 OCTET 3, Bit 0-7: Mask for digital outputs 8-15 OCTET 4, Bit 0-7: Mask for digital outputs 0-7 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5: unused OCTET 6: Bit 0-7: Level of digital outputs 16-23 OCTET 7, Bit 0-7: Level of digital outputs 8-15 OCTET 8, Bit 0-7: Level of digital outputs 0-7')
wtWebioEA24oemSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA24oemSessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA24oemSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA24oemSessCntrl-NoSession", 0), ("wtWebioEA24oemSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA24oemSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA24oemSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA24oemSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA24oemDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA24oemDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA24oemDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA24oemDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA24oemTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA24oemTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA24oemTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA24oemStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA24oemStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA24oemStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA24oemStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA24oemStartMonth-January", 1), ("wtWebioEA24oemStartMonth-February", 2), ("wtWebioEA24oemStartMonth-March", 3), ("wtWebioEA24oemStartMonth-April", 4), ("wtWebioEA24oemStartMonth-May", 5), ("wtWebioEA24oemStartMonth-June", 6), ("wtWebioEA24oemStartMonth-July", 7), ("wtWebioEA24oemStartMonth-August", 8), ("wtWebioEA24oemStartMonth-September", 9), ("wtWebioEA24oemStartMonth-October", 10), ("wtWebioEA24oemStartMonth-November", 11), ("wtWebioEA24oemStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA24oemStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA24oemStartMode-first", 1), ("wtWebioEA24oemStartMode-second", 2), ("wtWebioEA24oemStartMode-third", 3), ("wtWebioEA24oemStartMode-fourth", 4), ("wtWebioEA24oemStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA24oemStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA24oemStartWday-Sunday", 1), ("wtWebioEA24oemStartWday-Monday", 2), ("wtWebioEA24oemStartWday-Tuesday", 3), ("wtWebioEA24oemStartWday-Thursday", 4), ("wtWebioEA24oemStartWday-Wednesday", 5), ("wtWebioEA24oemStartWday-Friday", 6), ("wtWebioEA24oemStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA24oemStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA24oemStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA24oemStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA24oemStopMonth-January", 1), ("wtWebioEA24oemStopMonth-February", 2), ("wtWebioEA24oemStopMonth-March", 3), ("wtWebioEA24oemStopMonth-April", 4), ("wtWebioEA24oemStopMonth-May", 5), ("wtWebioEA24oemStopMonth-June", 6), ("wtWebioEA24oemStopMonth-July", 7), ("wtWebioEA24oemStopMonth-August", 8), ("wtWebioEA24oemStopMonth-September", 9), ("wtWebioEA24oemStopMonth-October", 10), ("wtWebioEA24oemStopMonth-November", 11), ("wtWebioEA24oemStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA24oemStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA24oemStopMode-first", 1), ("wtWebioEA24oemStopMode-second", 2), ("wtWebioEA24oemStopMode-third", 3), ("wtWebioEA24oemStopMode-fourth", 4), ("wtWebioEA24oemStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA24oemStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA24oemStopWday-Sunday", 1), ("wtWebioEA24oemStopWday-Monday", 2), ("wtWebioEA24oemStopWday-Tuesday", 3), ("wtWebioEA24oemStopWday-Thursday", 4), ("wtWebioEA24oemStopWday-Wednesday", 5), ("wtWebioEA24oemStopWday-Friday", 6), ("wtWebioEA24oemStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA24oemStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA24oemStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA24oemTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA24oemTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA24oemTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA24oemTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA24oemClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA24oemClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA24oemClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA24oemClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA24oemClockMonth-January", 1), ("wtWebioEA24oemClockMonth-February", 2), ("wtWebioEA24oemClockMonth-March", 3), ("wtWebioEA24oemClockMonth-April", 4), ("wtWebioEA24oemClockMonth-May", 5), ("wtWebioEA24oemClockMonth-June", 6), ("wtWebioEA24oemClockMonth-July", 7), ("wtWebioEA24oemClockMonth-August", 8), ("wtWebioEA24oemClockMonth-September", 9), ("wtWebioEA24oemClockMonth-October", 10), ("wtWebioEA24oemClockMonth-November", 11), ("wtWebioEA24oemClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA24oemClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA24oemIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemIpAddress.setDescription('IP address of the Webio')
wtWebioEA24oemSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA24oemGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemGateway.setDescription('Gateway of the Webio')
wtWebioEA24oemDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA24oemDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA24oemAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA24oemStartup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemStartup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemStartup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA24oemGetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemGetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemGetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA24oemHttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemHttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemHttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: Bit 0-7 : inputs 16 - 23 OCTET 3: Bit 0-7 : inputs 8 - 15 OCTET 4: Bit 0-7 : inputs 0 - 7')
wtWebioEA24oemHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA24oemMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMailAdName.setDescription('Device name for mail administration.')
wtWebioEA24oemMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMailReply.setDescription('Reply address for the mail server.')
wtWebioEA24oemMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA24oemMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA24oemMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA24oemMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA24oemMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMailAuthPassword.setDescription('Authentication password.')
wtWebioEA24oemMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA24oemSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA24oemSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA24oemSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA24oemSnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA24oemSnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2-7: unused')
wtWebioEA24oemUdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemUdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemUdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA24oemUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA24oemUdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemUdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemUdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA24oemBinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA24oemBinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA24oemBinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryIfTable.setDescription('Table of indices.')
wtWebioEA24oemBinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA24oemBinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA24oemBinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA24oemBinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA24oemBinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA24oemBinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryEntry.setDescription('Binary properties.')
wtWebioEA24oemBinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA24oemBinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA24oemBinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: Bit 0-7 : inputs 16 - 23 OCTET 3: Bit 0-7 : inputs 8 - 15 OCTET 4: Bit 0-7 : inputs 0 - 7')
wtWebioEA24oemBinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA24oemBinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA24oemBinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA24oemBinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA24oemBinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA24oemBinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA24oemBinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: Bit 0-7 : inputs 16 - 23 OCTET 3: Bit 0-7 : inputs 8 - 15 OCTET 4: Bit 0-7 : inputs 0 - 7')
wtWebioEA24oemBinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA24oemBinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA24oemBinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA24oemBinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA24oemBinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA24oemBinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: Bit 0-7 : inputs 16 - 23 OCTET 3: Bit 0-7 : inputs 8 - 15 OCTET 4: Bit 0-7 : inputs 0 - 7')
wtWebioEA24oemBinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA24oemBinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA24oemBinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA24oemBinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA24oemBinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA24oemBinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemBinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA24oemSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA24oemSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA24oemSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA24oemSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA24oemFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA24oemFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA24oemFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemFTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA24oemFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemFTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA24oemFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemFTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA24oemFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA24oemFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA24oemOutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA24oemOutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA24oemOutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemOutputNo"))
if mibBuilder.loadTexts: wtWebioEA24oemOutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA24oemOutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemOutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA24oemSafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemSafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemSafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA24oemLoadControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemLoadControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemLoadControlEnable.setDescription('Here the function of automatic load control can be enabled. All output were tested in pairs (0-1, 2-3, 4-5, 6-7, 8-9, 10-11). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Load Control enable')
wtWebioEA24oemAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmCount.setDescription('Number of independent alarms.')
wtWebioEA24oemAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA24oemAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA24oemAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA24oemAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA24oemAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA24oemAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA24oemAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA24oemAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA24oemAlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2: Bit 0-7: Mask for digital inputs 16-23 OCTET 3, Bit 0-7: Mask for digital inputs 8-15 OCTET 4, Bit 0-7: Mask for digital inputs 0-7 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6: Bit 0-7: Level of digital inputs 16-23 OCTET 7, Bit 0-7: Level of digital inputs 8-15 OCTET 8, Bit 0-7: Level of digital inputs 0-7 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10, Bit 0-7: ANY bits of digital inputs 16-23 OCTET 11, Bit 0-7: ANY bits of digital inputs 8-15 OCTET 12, Bit 0-7: ANY bits of digital inputs 0-7')
wtWebioEA24oemAlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2: Bit 0-7: Mask for digital outputs 16-23 OCTET 3, Bit 0-7: Mask for digital outputs 8-15 OCTET 4, Bit 0-7: Mask for digital outputs 0-7 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6: Bit 0-7: Level of digital outputs 16-23 OCTET 7, Bit 0-7: Level of digital outputs 8-15 OCTET 8, Bit 0-7: Level of digital outputs 0-7 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10, Bit 0-7: ANY bits of digital outputs 16-23 OCTET 11, Bit 0-7: ANY bits of digital outputs 8-15 OCTET 12, Bit 0-7: ANY bits of digital outputs 0-7')
wtWebioEA24oemAlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : Load Control')
wtWebioEA24oemAlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA24oemAlarmInputTrigger are not considered.')
wtWebioEA24oemAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA24oemAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4-7: unused')
wtWebioEA24oemAlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA24oemAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA24oemAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA24oemAlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA24oemAlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA24oemAlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA24oemAlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA24oemAlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA24oemAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA24oemAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA24oemAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA24oemAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA24oemAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA24oemAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA24oemAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA24oemAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA24oemAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA24oemAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA24oemAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA24oemLoadControlView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemLoadControlView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemLoadControlView.setDescription('Here the result of automatic load control can be read. All output were tested in pairs (0-1, 2-3, 4-5, 6-7, 8-9, 10-11). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused OCTET 2: Bit 0-7 : outputs 16 - 23 OCTET 3: Bit 0-7 : outputs 8 - 15 OCTET 4: Bit 0-7 : outputs 0 - 7')
wtWebioEA24oemLCShutDownView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 1, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemLCShutDownView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemLCShutDownView.setDescription('Here the result of the automatic load control shut down can be read. All outputs remain switched of, until a zero is written into this variable. But previously all loads should be inspected. High current (short circuit), a broken supply line or a defect load (i.e. lamp) may be a shut down reason. If no load is detected, the load control unit suspend automaticly the control of the corresponding output pair. All controlled output could be identified reading the variable wtWebioEA24oemLoadControlEnable. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused OCTET 2: Bit 0-7 : outputs 16 - 23 OCTET 3: Bit 0-7 : outputs 8 - 15 OCTET 4: Bit 0-7 : outputs 0 - 7')
wtWebioEA24oemInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA24oemInputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA24oemInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemInputNo"))
if mibBuilder.loadTexts: wtWebioEA24oemInputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemInputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA24oemPortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortInputName.setDescription('Name of the input.')
wtWebioEA24oemPortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortInputText.setDescription('Description of the input.')
wtWebioEA24oemPortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, with each set of octets corresponding to an input. Bit 0 corresponds to the LSB. Selection for input 0-3: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable Selection for inputs 4-11: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Counter clear on read Bit 0 : Change detection enable (default)')
wtWebioEA24oemPortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA24oemOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA24oemOutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA24oemOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA24oemOutputNo"))
if mibBuilder.loadTexts: wtWebioEA24oemOutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemOutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA24oemPortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortOutputName.setDescription('Name of the output.')
wtWebioEA24oemPortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortOutputText.setDescription('Description of the output.')
wtWebioEA24oemPortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortOutputGroupMode.setDescription('It is possible to connect outputs together to increase the output current. This could be done by connecting 2 or 4 outputs in a group together. All bits of such a group has to be set all together in the same way. This variable configures this group scheme. If one output bit of a group is set, all other output bits of the same group will be set in the same manner. More than one configuration must not be selected. Selection for outputs 0-3: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : outputs 0,1,2,3 disconnected (default) Bit 1 : outputs 0+1, 2+3 connected Bit 2 : outputs 0+1+2+3 connected Bit 3-7 : unused Selection for outputs 4-7: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : outputs 4, 5, 6, 7 disconnected (default) Bit 1 : outputs 4+5, 6+7 connected Bit 2 : outputs 4+5+6+7 connected Bit 3-7 : unused Selection for outputs 8-11: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : outputs 8, 9, 10, 11 disconnected (default) Bit 1 : outputs 8+9, 10+11 connected Bit 2 : outputs 8+9+10+11 connected Bit 3-7 : unused Selection for outputs 12-15: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : outputs 12,13,14,15 disconnected (default) Bit 1 : outputs 12+13,14+15 connected Bit 2 : outputs 12+13+14+15 connected Bit 3-7 : unused Selection for outputs 16-19: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : outputs 16,17,18,19 disconnected (default) Bit 1 : outputs 16+17,18+19 connected Bit 2 : outputs 16+17+18+19 connected Bit 3-7 : unused Selection for outputs 20-23: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : outputs 20,21,22,23 disconnected (default) Bit 1 : outputs 20+21,22+23 connected Bit 2 : outputs 20+21+22+23 connected Bit 3-7 : unused')
wtWebioEA24oemPortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA24oemPortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA24oemPortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA24oemPortLogicInputInverter) 3. Logical combination (wtWebioEA24oemPortLogicFunction) 4. Inverting the result if necessary (wtWebioEA24oemPortLogicOutputInverter) OCTET 1: unused OCTET 2: Bit 0-7 : inputs 16 - 23 OCTET 3: Bit 0-7 : inputs 8 - 15 OCTET 4: Bit 0-7 : inputs 0 - 7')
wtWebioEA24oemPortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: Bit 0-7 : inputs 16 - 23 OCTET 3: Bit 0-7 : inputs 8 - 15 OCTET 4: Bit 0-7 : inputs 0 - 7')
wtWebioEA24oemPortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA24oemPortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA24oemPortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA24oemPortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemPortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemPortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA24oemPortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : ungenutzt')
wtWebioEA24oemMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMfName.setDescription('Manufacturer company name')
wtWebioEA24oemMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMfAddr.setDescription('Manufacturer address.')
wtWebioEA24oemMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMfHotline.setDescription('Manufacturer hotline.')
wtWebioEA24oemMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA24oemMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA24oemDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA24oemDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA24oemDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA24oemDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA24oemDiagErrorMessage. Errors are numbered from 1 to wtWebioEA24oemDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA24oemDiagErrorMessage.')
wtWebioEA24oemDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA24oemDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDiagErrorMessage.setDescription('Using wtWebioEA24oemDiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA24oemDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA24oemDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA24oemDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA24oemAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,53)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,54)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,55)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,56)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,57)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,58)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,59)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,60)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,61)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,62)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,63)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,64)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,65)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert13.setDescription('This SNMP trap is generated when Alarm 13 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,66)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert14.setDescription('This SNMP trap is generated when Alarm 14 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,67)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert15.setDescription('This SNMP trap is generated when Alarm 15 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,68)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert16.setDescription('This SNMP trap is generated when Alarm 16 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert17.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert18.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert19.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert20.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert21.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert22.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert23.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert24.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert25 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert25.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert26 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert26.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert27 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert27.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert28 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert28.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert29 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,83)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert29.setDescription('This SNMP trap is generated when Alarm 13 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert30 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,84)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert30.setDescription('This SNMP trap is generated when Alarm 14 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert31 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,85)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert31.setDescription('This SNMP trap is generated when Alarm 15 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlert32 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,86)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA24oemAlert32.setDescription('This SNMP trap is generated when Alarm 16 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA24oemAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 14) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA24oemDiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA24oemDiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA24oemAlertDiag.setDescription('Dieser SNMP-Trap wird generiert, wenn eine Diagnose/Error-Message ausgelst wurde, das SNMP-Trap-Enable gesetzt ist und SNMP in Enable freigegeben ist.')
wtWebioEA12x6RelInputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelInputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputs.setDescription('Number of idependent inputs.')
wtWebioEA12x6RelOutputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputs.setDescription('Number of independent outputs.')
wtWebioEA12x6RelInputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA12x6RelInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputTable.setDescription('List of input indices.')
wtWebioEA12x6RelInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelInputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputEntry.setDescription('Number of the inputs.')
wtWebioEA12x6RelInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputNo.setDescription('Index numbers of the inputs.')
wtWebioEA12x6RelInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputCounter.setDescription('Value of the input counter.')
wtWebioEA12x6RelInputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelInputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebioEA12x6RelInputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputTable.setDescription('List of output indices.')
wtWebioEA12x6RelOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelOutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputEntry.setDescription('Number of the outputs.')
wtWebioEA12x6RelOutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputNo.setDescription('Output number.')
wtWebioEA12x6RelOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA12x6RelOutputState-OFF", 0), ("wtWebioEA12x6OutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputState.setDescription('Setting and reading of the states of the outputs.')
wtWebioEA12x6RelOutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-5: Digital outputs 0-5')
wtWebioEA12x6RelSetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4 : Bit 0-5: Mask for digital outputs 0-5 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8 : Bit 0-5: Level of digital outputs 0-5')
wtWebioEA12x6RelSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA12x6RelSessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA12x6RelSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA12x6RelSessCntrl-NoSession", 0), ("wtWebioEA12x6RelSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA12x6RelSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA12x6RelSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA12x6RelSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA12x6RelDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA12x6RelDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA12x6RelDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA12x6RelDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA12x6RelTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA12x6RelTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA12x6RelTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA12x6RelStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA12x6RelStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA12x6RelStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA12x6RelStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x6RelStartMonth-January", 1), ("wtWebioEA12x6RelStartMonth-February", 2), ("wtWebioEA12x6RelStartMonth-March", 3), ("wtWebioEA12x6RelStartMonth-April", 4), ("wtWebioEA12x6RelStartMonth-May", 5), ("wtWebioEA12x6RelStartMonth-June", 6), ("wtWebioEA12x6RelStartMonth-July", 7), ("wtWebioEA12x6RelStartMonth-August", 8), ("wtWebioEA12x6RelStartMonth-September", 9), ("wtWebioEA12x6RelStartMonth-October", 10), ("wtWebioEA12x6RelStartMonth-November", 11), ("wtWebioEA12x6RelStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA12x6RelStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA12x6RelStartMode-first", 1), ("wtWebioEA12x6RelStartMode-second", 2), ("wtWebioEA12x6RelStartMode-third", 3), ("wtWebioEA12x6RelStartMode-fourth", 4), ("wtWebioEA12x6RelStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA12x6RelStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA12x6RelStartWday-Sunday", 1), ("wtWebioEA12x6RelStartWday-Monday", 2), ("wtWebioEA12x6RelStartWday-Tuesday", 3), ("wtWebioEA12x6RelStartWday-Thursday", 4), ("wtWebioEA12x6RelStartWday-Wednesday", 5), ("wtWebioEA12x6RelStartWday-Friday", 6), ("wtWebioEA12x6RelStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA12x6RelStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA12x6RelStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA12x6RelStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x6RelStopMonth-January", 1), ("wtWebioEA12x6RelStopMonth-February", 2), ("wtWebioEA12x6RelStopMonth-March", 3), ("wtWebioEA12x6RelStopMonth-April", 4), ("wtWebioEA12x6RelStopMonth-May", 5), ("wtWebioEA12x6RelStopMonth-June", 6), ("wtWebioEA12x6RelStopMonth-July", 7), ("wtWebioEA12x6RelStopMonth-August", 8), ("wtWebioEA12x6RelStopMonth-September", 9), ("wtWebioEA12x6RelStopMonth-October", 10), ("wtWebioEA12x6RelStopMonth-November", 11), ("wtWebioEA12x6RelStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA12x6RelStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA12x6RelStopMode-first", 1), ("wtWebioEA12x6RelStopMode-second", 2), ("wtWebioEA12x6RelStopMode-third", 3), ("wtWebioEA12x6RelStopMode-fourth", 4), ("wtWebioEA12x6RelStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA12x6RelStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA12x6RelStopWday-Sunday", 1), ("wtWebioEA12x6RelStopWday-Monday", 2), ("wtWebioEA12x6RelStopWday-Tuesday", 3), ("wtWebioEA12x6RelStopWday-Thursday", 4), ("wtWebioEA12x6RelStopWday-Wednesday", 5), ("wtWebioEA12x6RelStopWday-Friday", 6), ("wtWebioEA12x6RelStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA12x6RelStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA12x6RelStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA12x6RelTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA12x6RelTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA12x6RelTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA12x6RelTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA12x6RelClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA12x6RelClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA12x6RelClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA12x6RelClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x6RelClockMonth-January", 1), ("wtWebioEA12x6RelClockMonth-February", 2), ("wtWebioEA12x6RelClockMonth-March", 3), ("wtWebioEA12x6RelClockMonth-April", 4), ("wtWebioEA12x6RelClockMonth-May", 5), ("wtWebioEA12x6RelClockMonth-June", 6), ("wtWebioEA12x6RelClockMonth-July", 7), ("wtWebioEA12x6RelClockMonth-August", 8), ("wtWebioEA12x6RelClockMonth-September", 9), ("wtWebioEA12x6RelClockMonth-October", 10), ("wtWebioEA12x6RelClockMonth-November", 11), ("wtWebioEA12x6RelClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA12x6RelClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA12x6RelIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelIpAddress.setDescription('IP address of the Webio')
wtWebioEA12x6RelSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA12x6RelGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelGateway.setDescription('Gateway of the Webio')
wtWebioEA12x6RelDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA12x6RelDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA12x6RelAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA12x6RelStartup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelStartup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelStartup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA12x6RelGetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelGetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelGetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA12x6RelHttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelHttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelHttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA12x6RelMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMailAdName.setDescription('Device name for mail administration.')
wtWebioEA12x6RelMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMailReply.setDescription('Reply address for the mail server.')
wtWebioEA12x6RelMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA12x6RelMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA12x6RelMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA12x6RelMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA12x6RelMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMailAuthPassword.setDescription('Authentication password.')
wtWebioEA12x6RelMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA12x6RelSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA12x6RelSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA12x6RelSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA12x6RelSnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA12x6RelSnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebioEA12x6RelUdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelUdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelUdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA12x6RelUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA12x6RelUdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelUdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelUdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA12x6RelBinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA12x6RelBinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryIfTable.setDescription('Table of indices.')
wtWebioEA12x6RelBinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA12x6RelBinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA12x6RelBinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA12x6RelBinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryEntry.setDescription('Binary properties.')
wtWebioEA12x6RelBinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA12x6RelBinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x6RelBinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelBinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x6RelBinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x6RelBinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA12x6RelBinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA12x6RelBinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA12x6RelBinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA12x6RelBinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelBinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA12x6RelBinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x6RelBinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x6RelBinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA12x6RelBinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA12x6RelBinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelBinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA12x6RelBinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x6RelBinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA12x6RelBinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA12x6RelBinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA12x6RelBinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelBinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA12x6RelSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA12x6RelSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA12x6RelSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA12x6RelSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA12x6RelFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA12x6RelFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA12x6RelFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA12x6RelFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA12x6RelFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA12x6RelFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA12x6RelFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA12x6RelOutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA12x6RelOutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelOutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA12x6RelOutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, with each set of octets corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA12x6RelSafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelSafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelSafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA12x6RelAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmCount.setDescription('Number of independent alarms.')
wtWebioEA12x6RelAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA12x6RelAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA12x6RelAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA12x6RelAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA12x6RelAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA12x6RelAlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3, Bit 0-3: Mask for digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Mask for digital inputs 0-7 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7, Bit 0-3: Level of digital inputs 8-11 Bit 4-7: unused OCTET 8, Bit 0-7: Level of digital inputs 0-7 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 11, Bit 0-7 : ANY bits of digital inputs 8-11 Bit 12-15 : unused OCTET 12, Bit 0-7 : ANY bits of digital inputs 0-7')
wtWebioEA12x6RelAlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-5: Mask for digital outputs 0-5 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-5: Level of digital outputs 0-5 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 10: unused OCTET 11: unused OCTET 12: Bit 0-5: ANY bits of digital outputs 0-5')
wtWebioEA12x6RelAlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : Load Control')
wtWebioEA12x6RelAlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA12x6RelAlarmInputTrigger are not considered.')
wtWebioEA12x6RelAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA12x6RelAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtWebioEA12x6RelAlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA12x6RelAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA12x6RelAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA12x6RelAlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA12x6RelAlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA12x6RelAlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA12x6RelAlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA12x6RelAlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA12x6RelAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA12x6RelAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA12x6RelAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA12x6RelAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA12x6RelAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA12x6RelAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA12x6RelAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA12x6RelAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA12x6RelAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA12x6RelAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA12x6RelAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA12x6RelAlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebioEA12x6RelAlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA12x6RelAlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebioEA12x6RelAlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebioEA12x6RelAlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebioEA12x6RelAlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA12x6RelAlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelAlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebioEA12x6RelInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA12x6RelInputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA12x6RelInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelInputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelInputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelInputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA12x6RelPortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputName.setDescription('Name of the input.')
wtWebioEA12x6RelPortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputText.setDescription('Description of the input.')
wtWebioEA12x6RelPortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. Selection for input 0-3: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 3-7: unused Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable Selection for inputs 4-11: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Counter clear on read Bit 0 : Change detection enable (default)')
wtWebioEA12x6RelPortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA12x6RelPortInputBicountPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputBicountPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputBicountPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA12x6RelPortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebioEA12x6RelOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA12x6RelOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelOutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelOutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA12x6RelPortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortOutputName.setDescription('Name of the output.')
wtWebioEA12x6RelPortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortOutputText.setDescription('Description of the output.')
wtWebioEA12x6RelPortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortOutputGroupMode.setDescription('Unused in this device 57634')
wtWebioEA12x6RelPortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH=Relais closed, 0=LOW Relais open) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA12x6RelPortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA12x6RelPortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA12x6RelPortLogicInputInverter) 3. Logical combination (wtWebioEA12x6RelPortLogicFunction) 4. Inverting the result if necessary (wtWebioEA12x6RelPortLogicOutputInverter) OCTET 1: unused OCTET 2: unused OCTET 3: Bit 0-3 : inputs 8-11 Bit 4-7 : unused OCTET 4: Bit 0-7 : inputs 0-7')
wtWebioEA12x6RelPortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: unused OCTET 3: Bit 0-3 : inputs 8-11 Bit 4-7 : unused OCTET 4: Bit 0-7 : inputs 0-7')
wtWebioEA12x6RelPortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA12x6RelPortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA12x6RelPortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA12x6RelPortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelPortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelPortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA12x6RelPortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA12x6RelMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMfName.setDescription('Manufacturer company name')
wtWebioEA12x6RelMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMfAddr.setDescription('Manufacturer address.')
wtWebioEA12x6RelMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMfHotline.setDescription('Manufacturer hotline.')
wtWebioEA12x6RelMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA12x6RelMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA12x6RelMfOrderNo = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelMfOrderNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelMfOrderNo.setDescription('Manufacturer part number.')
wtWebioEA12x6RelDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA12x6RelDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA12x6RelDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA12x6RelDiagErrorMessage. Errors are numbered from 1 to wtWebioEA12x6RelDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA12x6RelDiagErrorMessage.')
wtWebioEA12x6RelDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagErrorMessage.setDescription('Using wtWebioEA12x6RelDiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA12x6RelDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA12x6RelAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 19) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelDiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA12x6RelDiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA12x6RelAlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Inputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6Inputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6Inputs.setDescription('Number of idependent inputs.')
wtWebAlarm6x6Outputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6Outputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6Outputs.setDescription('Number of independent outputs.')
wtWebAlarm6x6InputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 3), )
if mibBuilder.loadTexts: wtWebAlarm6x6InputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputTable.setDescription('List of input indices.')
wtWebAlarm6x6InputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebAlarm6x6InputNo"))
if mibBuilder.loadTexts: wtWebAlarm6x6InputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputEntry.setDescription('Number of the inputs.')
wtWebAlarm6x6InputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6InputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputNo.setDescription('Index numbers of the inputs.')
wtWebAlarm6x6InputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6InputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputCounter.setDescription('Value of the input counter.')
wtWebAlarm6x6InputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6InputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebAlarm6x6InputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebAlarm6x6InputState-OFF", 0), ("wtWebAlarm6x6InputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6InputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputState.setDescription('States of the inputs.')
wtWebAlarm6x6InputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6InputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-5: Digital inputs 0-5 Bit 6-7: unused')
wtWebAlarm6x6OutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 5), )
if mibBuilder.loadTexts: wtWebAlarm6x6OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6OutputTable.setDescription('List of output indices.')
wtWebAlarm6x6OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebAlarm6x6OutputNo"))
if mibBuilder.loadTexts: wtWebAlarm6x6OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6OutputEntry.setDescription('Number of the outputs.')
wtWebAlarm6x6OutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6OutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6OutputNo.setDescription('Output number.')
wtWebAlarm6x6OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebAlarm6x6OutputState-OFF", 0), ("wtWebAlarm6x6OutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6OutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6OutputState.setDescription('States of the outputs.')
wtWebAlarm6x6OutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6OutputValue.setDescription('This variable is used to read the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-5: Digital outputs 0-5')
wtWebAlarm6x6AlarmOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 8), )
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmOutputTable.setDescription('List of alarm indices..')
wtWebAlarm6x6AlarmOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 8, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmNo"))
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmOutputEntry.setDescription('Index reference.')
wtWebAlarm6x6AlarmOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebAlarm6x6AlarmOutputState-OFF", 0), ("wtWebAlarm6x6AlarmOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmOutputState.setDescription('State of the alarm.')
wtWebAlarm6x6AlarmTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebAlarm6x6AlarmTriggerState-OFF", 0), ("wtWebAlarm6x6AlarmTriggerState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTriggerState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTriggerState.setDescription('State of the trigger condition.')
wtWebAlarm6x6SessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebAlarm6x6SessCntrlLogout. When read this variable provides a string of length zero.')
wtWebAlarm6x6SessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebAlarm6x6SessCntrl-NoSession", 0), ("wtWebAlarm6x6SessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebAlarm6x6SessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebAlarm6x6SessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebAlarm6x6SessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebAlarm6x6DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebAlarm6x6DeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6DeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebAlarm6x6DeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6DeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebAlarm6x6DeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6DeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebAlarm6x6TzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6TzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6TzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebAlarm6x6TzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6TzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6TzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebAlarm6x6TzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6TzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6TzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebAlarm6x6StTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebAlarm6x6StTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebAlarm6x6StTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebAlarm6x6StTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebAlarm6x6StartMonth-January", 1), ("wtWebAlarm6x6StartMonth-February", 2), ("wtWebAlarm6x6StartMonth-March", 3), ("wtWebAlarm6x6StartMonth-April", 4), ("wtWebAlarm6x6StartMonth-May", 5), ("wtWebAlarm6x6StartMonth-June", 6), ("wtWebAlarm6x6StartMonth-July", 7), ("wtWebAlarm6x6StartMonth-August", 8), ("wtWebAlarm6x6StartMonth-September", 9), ("wtWebAlarm6x6StartMonth-October", 10), ("wtWebAlarm6x6StartMonth-November", 11), ("wtWebAlarm6x6StartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebAlarm6x6StTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebAlarm6x6StartMode-first", 1), ("wtWebAlarm6x6StartMode-second", 2), ("wtWebAlarm6x6StartMode-third", 3), ("wtWebAlarm6x6StartMode-fourth", 4), ("wtWebAlarm6x6StartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebAlarm6x6StTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebAlarm6x6StartWday-Sunday", 1), ("wtWebAlarm6x6StartWday-Monday", 2), ("wtWebAlarm6x6StartWday-Tuesday", 3), ("wtWebAlarm6x6StartWday-Thursday", 4), ("wtWebAlarm6x6StartWday-Wednesday", 5), ("wtWebAlarm6x6StartWday-Friday", 6), ("wtWebAlarm6x6StartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebAlarm6x6StTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebAlarm6x6StTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebAlarm6x6StTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebAlarm6x6StopMonth-January", 1), ("wtWebAlarm6x6StopMonth-February", 2), ("wtWebAlarm6x6StopMonth-March", 3), ("wtWebAlarm6x6StopMonth-April", 4), ("wtWebAlarm6x6StopMonth-May", 5), ("wtWebAlarm6x6StopMonth-June", 6), ("wtWebAlarm6x6StopMonth-July", 7), ("wtWebAlarm6x6StopMonth-August", 8), ("wtWebAlarm6x6StopMonth-September", 9), ("wtWebAlarm6x6StopMonth-October", 10), ("wtWebAlarm6x6StopMonth-November", 11), ("wtWebAlarm6x6StopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebAlarm6x6StTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebAlarm6x6StopMode-first", 1), ("wtWebAlarm6x6StopMode-second", 2), ("wtWebAlarm6x6StopMode-third", 3), ("wtWebAlarm6x6StopMode-fourth", 4), ("wtWebAlarm6x6StopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebAlarm6x6StTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebAlarm6x6StopWday-Sunday", 1), ("wtWebAlarm6x6StopWday-Monday", 2), ("wtWebAlarm6x6StopWday-Tuesday", 3), ("wtWebAlarm6x6StopWday-Thursday", 4), ("wtWebAlarm6x6StopWday-Wednesday", 5), ("wtWebAlarm6x6StopWday-Friday", 6), ("wtWebAlarm6x6StopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebAlarm6x6StTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebAlarm6x6StTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6StTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebAlarm6x6TimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6TimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6TimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebAlarm6x6TimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6TimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6TimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebAlarm6x6TsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6TsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6TsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebAlarm6x6TsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6TsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6TsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebAlarm6x6ClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6ClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6ClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebAlarm6x6ClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6ClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6ClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebAlarm6x6ClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6ClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6ClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebAlarm6x6ClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebAlarm6x6ClockMonth-January", 1), ("wtWebAlarm6x6ClockMonth-February", 2), ("wtWebAlarm6x6ClockMonth-March", 3), ("wtWebAlarm6x6ClockMonth-April", 4), ("wtWebAlarm6x6ClockMonth-May", 5), ("wtWebAlarm6x6ClockMonth-June", 6), ("wtWebAlarm6x6ClockMonth-July", 7), ("wtWebAlarm6x6ClockMonth-August", 8), ("wtWebAlarm6x6ClockMonth-September", 9), ("wtWebAlarm6x6ClockMonth-October", 10), ("wtWebAlarm6x6ClockMonth-November", 11), ("wtWebAlarm6x6ClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6ClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6ClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebAlarm6x6ClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6ClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6ClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebAlarm6x6IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6IpAddress.setDescription('IP address of the Webio')
wtWebAlarm6x6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SubnetMask.setDescription('Subnet mask of the Webio')
wtWebAlarm6x6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6Gateway.setDescription('Gateway of the Webio')
wtWebAlarm6x6DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6DnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebAlarm6x6DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6DnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebAlarm6x6AddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebAlarm6x6HttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6HttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6HttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebAlarm6x6MailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MailAdName.setDescription('Device name for mail administration.')
wtWebAlarm6x6MailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MailReply.setDescription('Reply address for the mail server.')
wtWebAlarm6x6MailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MailServer.setDescription('Name or IP address of the mail server.')
wtWebAlarm6x6MailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebAlarm6x6MailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebAlarm6x6MailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebAlarm6x6MailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MailAuthPassword.setDescription('Authentication password.')
wtWebAlarm6x6MailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebAlarm6x6SnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebAlarm6x6SnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpCommunityStringRead.setDescription('Community string read only')
wtWebAlarm6x6SnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebAlarm6x6SnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebAlarm6x6SnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebAlarm6x6UdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6UdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6UdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebAlarm6x6UdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6UdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6UdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebAlarm6x6UdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6UdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6UdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebAlarm6x6SyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebAlarm6x6SyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebAlarm6x6SyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebAlarm6x6SyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6SyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6SyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebAlarm6x6FTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6FTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6FTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebAlarm6x6FTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6FTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6FTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebAlarm6x6FTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6FTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6FTPUserName.setDescription('FTP Loggin: user name.')
wtWebAlarm6x6FTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6FTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6FTPPassword.setDescription('FTP Loggin: user password.')
wtWebAlarm6x6FTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6FTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6FTPAccount.setDescription('FTP Loggin: name of account.')
wtWebAlarm6x6FTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6FTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6FTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebAlarm6x6FTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6FTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6FTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebAlarm6x6AlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmCount.setDescription('Number of independent alarms.')
wtWebAlarm6x6AlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmIfTable.setDescription('List of alarm indices.')
wtWebAlarm6x6AlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmNo"))
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebAlarm6x6AlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmNo.setDescription('Numbers of the alarms.')
wtWebAlarm6x6AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebAlarm6x6AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmNo"))
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebAlarm6x6AlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3: unused OCTET 4, Bit 0-5: Mask for digital inputs 0-5 Bit 6-7: unused OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-5: Level of digital inputs 0-5 Bit 6-7: unused OCTETS 9-12 contain the counter bit (1=ON, 0=OFF). Inputs masked with the counter bit trigger an alarm when the corresponding counter reaching the wtWebAlarm6x6AlarmMaxCounterValue. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-5: Counter bits of digital inputs 0-5 Bit 6-7: unused.')
wtWebAlarm6x6AlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebAlarm6x6AlarmInputTrigger are not considered.')
wtWebAlarm6x6AlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmInterval.setDescription('Send interval for alarm messages.')
wtWebAlarm6x6AlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Output Switch Enable Bit 1: Mail Enable Bit 2: SNMP Trap enable Bit 3: UDP enable Bit 4: unused Bit 5: TCP Client enable Bit 6: Syslog Messages enable Bit 7: FTP Client enable')
wtWebAlarm6x6AlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebAlarm6x6AlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebAlarm6x6AlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebAlarm6x6AlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebAlarm6x6AlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebAlarm6x6AlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebAlarm6x6AlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebAlarm6x6AlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebAlarm6x6AlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebAlarm6x6AlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebAlarm6x6AlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebAlarm6x6AlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebAlarm6x6AlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebAlarm6x6AlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebAlarm6x6AlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebAlarm6x6AlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebAlarm6x6AlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebAlarm6x6AlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebAlarm6x6AlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebAlarm6x6AlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailReleaseText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebAlarm6x6AlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebAlarm6x6AlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebAlarm6x6AlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebAlarm6x6AlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebAlarm6x6AlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebAlarm6x6AlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmName.setDescription('Name of the alarm.')
wtWebAlarm6x6AlarmGlobalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmGlobalEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmGlobalEnable.setDescription('Binary coded alarm activation: Die OCTETS werden bitweise interpretiert. Bit 0 entspricht dem LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 1-7: unused Bit 0 : Alarm enable')
wtWebAlarm6x6AlarmCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 35), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmCounterClear.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Counter clear on Alarm acknowledge Bit 0 : Counter clear on Alarm send')
wtWebAlarm6x6AlarmAckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 36), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmAckEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmAckEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Software acknowledge enable Bit 0 : Hardware acknowledge enable')
wtWebAlarm6x6AlarmAckPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmAckPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmAckPort.setDescription('Number of the input, which clears the alarm (1-6).')
wtWebAlarm6x6AlarmSetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSetPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSetPort.setDescription('Number of the output, which will be set by this alarm (1-6). The configuration of pulse mode and polarity defined in the port output section is used.')
wtWebAlarm6x6AlarmMailTrgClearSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 39), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailTrgClearSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailTrgClearSubject.setDescription('Subject line for alarm mail.')
wtWebAlarm6x6AlarmMailTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 40), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailTrgClearText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebAlarm6x6AlarmSnmpTrapTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 41), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpTrapTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpTrapTrgClearText.setDescription('This text appears in the trap body.')
wtWebAlarm6x6AlarmUdpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 42), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpTrgClearText.setDescription('This text appears in the UDP trap body.')
wtWebAlarm6x6AlarmTcpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 43), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpTrgClearText.setDescription('This text appears in the TCP trap body.')
wtWebAlarm6x6AlarmSyslogTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 44), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogTrgClearText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebAlarm6x6AlarmFtpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 45), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpTrgClearText.setDescription('Message text to store on the FTP server.')
wtWebAlarm6x6AlarmMailTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 46), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmMailTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtWebAlarm6x6AlarmSnmpTrapTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 47), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpTrapTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSnmpTrapTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtWebAlarm6x6AlarmUdpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 48), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmUdpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtWebAlarm6x6AlarmTcpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 49), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmTcpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtWebAlarm6x6AlarmSyslogTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 50), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmSyslogTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtWebAlarm6x6AlarmFtpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 1, 5, 3, 1, 51), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6AlarmFtpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtWebAlarm6x6InputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebAlarm6x6InputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputPortTable.setDescription('List of settings depending on the input number.')
wtWebAlarm6x6InputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebAlarm6x6InputNo"))
if mibBuilder.loadTexts: wtWebAlarm6x6InputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6InputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebAlarm6x6PortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputName.setDescription('Name of the input.')
wtWebAlarm6x6PortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputText.setDescription('Description of the input.')
wtWebAlarm6x6PortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebAlarm6x6PortInputPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebAlarm6x6PortInputCounterSet = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputCounterSet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortInputCounterSet.setDescription('Writing to this variable presets the counter, while reading returns the actual value.')
wtWebAlarm6x6OutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebAlarm6x6OutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6OutputPortTable.setDescription('List of settings depending on the output number.')
wtWebAlarm6x6OutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebAlarm6x6OutputNo"))
if mibBuilder.loadTexts: wtWebAlarm6x6OutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6OutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebAlarm6x6PortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortOutputName.setDescription('Name of the output.')
wtWebAlarm6x6PortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortOutputText.setDescription('Description of the output.')
wtWebAlarm6x6PortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortPulseDuration.setDescription('Pulse length in 1/100 sec. Setting this value to zero, disables the pulse output.')
wtWebAlarm6x6PortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6PortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6PortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebAlarm6x6PortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebAlarm6x6MfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MfName.setDescription('Manufacturer company name')
wtWebAlarm6x6MfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MfAddr.setDescription('Manufacturer address.')
wtWebAlarm6x6MfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MfHotline.setDescription('Manufacturer hotline.')
wtWebAlarm6x6MfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MfInternet.setDescription('Manufacturer Internet address.')
wtWebAlarm6x6MfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebAlarm6x6MfOrderNo = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6MfOrderNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6MfOrderNo.setDescription('Manufacturer part number.')
wtWebAlarm6x6DiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6DiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebAlarm6x6DiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6DiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebAlarm6x6DiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebAlarm6x6DiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebAlarm6x6DiagErrorMessage. Errors are numbered from 1 to wtWebAlarm6x6DiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebAlarm6x6DiagErrorMessage.')
wtWebAlarm6x6DiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebAlarm6x6DiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DiagErrorMessage.setDescription('Using wtWebAlarm6x6DiagErrorIndex as an index, the appropriate message is available.')
wtWebAlarm6x6DiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebAlarm6x6DiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebAlarm6x6DiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebAlarm6x6Alert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert25 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,91)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert25.setDescription('This SNMP trap is generated when the trigger of the Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert26 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,92)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert26.setDescription('This SNMP trap is generated when the trigger of the Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert27 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,93)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert27.setDescription('This SNMP trap is generated when the trigger of the Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert28 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,94)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert28.setDescription('This SNMP trap is generated when the trigger of the Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert29 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,95)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert29.setDescription('This SNMP trap is generated when the trigger of the Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert30 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,96)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert30.setDescription('This SNMP trap is generated when the trigger of the Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert31 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,97)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert31.setDescription('This SNMP trap is generated when the trigger of the Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert32 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,98)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert32.setDescription('This SNMP trap is generated when the trigger of the Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert33 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,99)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert33.setDescription('This SNMP trap is generated when the trigger of the Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert34 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,100)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert34.setDescription('This SNMP trap is generated when the trigger of the Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert35 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,101)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert35.setDescription('This SNMP trap is generated when the trigger of the Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6Alert36 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,102)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6AlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtWebAlarm6x6Alert36.setDescription('This SNMP trap is generated when the trigger of the Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebAlarm6x6AlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 20) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebAlarm6x6DiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebAlarm6x6DiagErrorMessage"))
if mibBuilder.loadTexts: wtWebAlarm6x6AlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Inputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6Inputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6Inputs.setDescription('Number of idependent inputs.')
wtWebCount6Outputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6Outputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6Outputs.setDescription('Number of independent outputs.')
wtWebCount6InputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 3), )
if mibBuilder.loadTexts: wtWebCount6InputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputTable.setDescription('List of input indices.')
wtWebCount6InputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebCount6InputNo"))
if mibBuilder.loadTexts: wtWebCount6InputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputEntry.setDescription('Number of the inputs.')
wtWebCount6InputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6InputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputNo.setDescription('Index numbers of the inputs.')
wtWebCount6InputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6InputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputCounter.setDescription('Value of the input counter.')
wtWebCount6InputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6InputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebCount6InputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebCount6InputState-OFF", 0), ("wtWebCount6InputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6InputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputState.setDescription('Tates of the inputs.')
wtWebCount6InputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6InputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-5: Digital inputs 0-5 Bit 6-7: unused')
wtWebCount6ReportOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 8), )
if mibBuilder.loadTexts: wtWebCount6ReportOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportOutputTable.setDescription('List of Report indices..')
wtWebCount6ReportOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 8, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebCount6ReportNo"))
if mibBuilder.loadTexts: wtWebCount6ReportOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportOutputEntry.setDescription('Index reference.')
wtWebCount6ReportOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebCount6ReportOutputState-OFF", 0), ("wtWebCount6ReportOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportOutputState.setDescription('State of the Report.')
wtWebCount6ReportTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebCount6ReportTriggerState-OFF", 0), ("wtWebCount6ReportTriggerState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6ReportTriggerState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportTriggerState.setDescription('State of the trigger condition.')
wtWebCount6SessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebCount6SessCntrlLogout. When read this variable provides a string of length zero.')
wtWebCount6SessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebCount6SessCntrl-NoSession", 0), ("wtWebCount6SessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6SessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebCount6SessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebCount6SessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebCount6SessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebCount6DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebCount6DeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6DeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebCount6DeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6DeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebCount6DeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6DeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebCount6TzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6TzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6TzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebCount6TzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6TzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6TzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebCount6TzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6TzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6TzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebCount6StTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebCount6StTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebCount6StTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebCount6StTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebCount6StartMonth-January", 1), ("wtWebCount6StartMonth-February", 2), ("wtWebCount6StartMonth-March", 3), ("wtWebCount6StartMonth-April", 4), ("wtWebCount6StartMonth-May", 5), ("wtWebCount6StartMonth-June", 6), ("wtWebCount6StartMonth-July", 7), ("wtWebCount6StartMonth-August", 8), ("wtWebCount6StartMonth-September", 9), ("wtWebCount6StartMonth-October", 10), ("wtWebCount6StartMonth-November", 11), ("wtWebCount6StartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebCount6StTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebCount6StartMode-first", 1), ("wtWebCount6StartMode-second", 2), ("wtWebCount6StartMode-third", 3), ("wtWebCount6StartMode-fourth", 4), ("wtWebCount6StartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebCount6StTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebCount6StartWday-Sunday", 1), ("wtWebCount6StartWday-Monday", 2), ("wtWebCount6StartWday-Tuesday", 3), ("wtWebCount6StartWday-Thursday", 4), ("wtWebCount6StartWday-Wednesday", 5), ("wtWebCount6StartWday-Friday", 6), ("wtWebCount6StartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebCount6StTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebCount6StTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebCount6StTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebCount6StopMonth-January", 1), ("wtWebCount6StopMonth-February", 2), ("wtWebCount6StopMonth-March", 3), ("wtWebCount6StopMonth-April", 4), ("wtWebCount6StopMonth-May", 5), ("wtWebCount6StopMonth-June", 6), ("wtWebCount6StopMonth-July", 7), ("wtWebCount6StopMonth-August", 8), ("wtWebCount6StopMonth-September", 9), ("wtWebCount6StopMonth-October", 10), ("wtWebCount6StopMonth-November", 11), ("wtWebCount6StopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebCount6StTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebCount6StopMode-first", 1), ("wtWebCount6StopMode-second", 2), ("wtWebCount6StopMode-third", 3), ("wtWebCount6StopMode-fourth", 4), ("wtWebCount6StopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebCount6StTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebCount6StopWday-Sunday", 1), ("wtWebCount6StopWday-Monday", 2), ("wtWebCount6StopWday-Tuesday", 3), ("wtWebCount6StopWday-Thursday", 4), ("wtWebCount6StopWday-Wednesday", 5), ("wtWebCount6StopWday-Friday", 6), ("wtWebCount6StopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebCount6StTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebCount6StTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6StTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6StTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebCount6TimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6TimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6TimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebCount6TimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6TimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6TimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebCount6TsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6TsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6TsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebCount6TsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6TsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6TsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebCount6ClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebCount6ClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebCount6ClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebCount6ClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebCount6ClockMonth-January", 1), ("wtWebCount6ClockMonth-February", 2), ("wtWebCount6ClockMonth-March", 3), ("wtWebCount6ClockMonth-April", 4), ("wtWebCount6ClockMonth-May", 5), ("wtWebCount6ClockMonth-June", 6), ("wtWebCount6ClockMonth-July", 7), ("wtWebCount6ClockMonth-August", 8), ("wtWebCount6ClockMonth-September", 9), ("wtWebCount6ClockMonth-October", 10), ("wtWebCount6ClockMonth-November", 11), ("wtWebCount6ClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebCount6ClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebCount6IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6IpAddress.setDescription('IP address of the Webio')
wtWebCount6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SubnetMask.setDescription('Subnet mask of the Webio')
wtWebCount6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6Gateway.setDescription('Gateway of the Webio')
wtWebCount6DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6DnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebCount6DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6DnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebCount6AddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6AddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6AddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebCount6HttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6HttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6HttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebCount6MailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MailAdName.setDescription('Device name for mail administration.')
wtWebCount6MailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MailReply.setDescription('Reply address for the mail server.')
wtWebCount6MailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MailServer.setDescription('Name or IP address of the mail server.')
wtWebCount6MailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebCount6MailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebCount6MailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebCount6MailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MailAuthPassword.setDescription('Authentication password.')
wtWebCount6MailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebCount6SnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebCount6SnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SnmpCommunityStringRead.setDescription('Community string read only')
wtWebCount6SnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebCount6SnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebCount6SnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebCount6UdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6UdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6UdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebCount6UdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6UdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6UdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebCount6UdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6UdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6UdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebCount6SyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebCount6SyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebCount6SyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebCount6SyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6SyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6SyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebCount6FTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6FTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6FTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebCount6FTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6FTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6FTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebCount6FTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6FTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6FTPUserName.setDescription('FTP Loggin: user name.')
wtWebCount6FTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6FTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6FTPPassword.setDescription('FTP Loggin: user password.')
wtWebCount6FTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6FTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6FTPAccount.setDescription('FTP Loggin: name of account.')
wtWebCount6FTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6FTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6FTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebCount6FTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6FTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6FTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebCount6ReportCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6ReportCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportCount.setDescription('Number of independent Reports.')
wtWebCount6ReportIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebCount6ReportIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportIfTable.setDescription('List of Report indices.')
wtWebCount6ReportIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebCount6ReportNo"))
if mibBuilder.loadTexts: wtWebCount6ReportIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportIfEntry.setDescription('Numbers of the Reports.')
wtWebCount6ReportNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6ReportNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportNo.setDescription('Numbers of the Reports.')
wtWebCount6ReportTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebCount6ReportTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportTable.setDescription('List of settings depending on the Report number.')
wtWebCount6ReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebCount6ReportNo"))
if mibBuilder.loadTexts: wtWebCount6ReportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportEntry.setDescription('Report parameters of the individual Reports.')
wtWebCount6ReportInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3: unused OCTET 4, Bit 0-5: Mask for digital inputs 0-5 Bit 6-7: unused OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-5: Level of digital inputs 0-5 Bit 6-7: unused OCTETS 9-12 contain the counter bit (1=ON, 0=OFF). Inputs masked with the counter bit trigger an Report when the corresponding counter reaching the wtWebCount6ReportMaxCounterValue. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-5: Counter bits of digital inputs 0-5 Bit 6-7: unused.')
wtWebCount6ReportSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 7 : Timer OFF Bit 6 : Time Window Bit 5 : unused Bit 4 : unused Bit 3 : unused Bit 2 : unused Bit 1 : Timer Bit 0 : unused')
wtWebCount6ReportMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding Report is triggered. Input counters with its mask bit unset in wtWebCount6ReportInputTrigger are not considered.')
wtWebCount6ReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportInterval.setDescription('Send interval for Report messages.')
wtWebCount6ReportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportEnable.setDescription('Binary coded Report enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Output Switch Enable Bit 1: Mail Enable Bit 2: SNMP Trap enable Bit 3: UDP enable Bit 4: unused Bit 5: TCP Client enable Bit 6: Syslog Messages enable Bit 7: FTP Client enable')
wtWebCount6ReportMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportMailAddr.setDescription('E-Mail address for sending the Report mail to.')
wtWebCount6ReportMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportMailSubject.setDescription('Subject line for Report mail.')
wtWebCount6ReportMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportMailText.setDescription('Report mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebCount6ReportSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebCount6ReportSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebCount6ReportUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebCount6ReportUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebCount6ReportUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportUdpText.setDescription('This text appears in the UDP trap body.')
wtWebCount6ReportTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebCount6ReportTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebCount6ReportTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportTcpText.setDescription('This text appears in the TCP trap body.')
wtWebCount6ReportSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebCount6ReportSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebCount6ReportSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebCount6ReportFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebCount6ReportFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportFtpFileName.setDescription('Name of the file including path informations.')
wtWebCount6ReportFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportFtpText.setDescription('Message text to store on the FTP server.')
wtWebCount6ReportFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebCount6ReportTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a report, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebCount6ReportName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportName.setDescription('Name of the Report.')
wtWebCount6ReportGlobalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportGlobalEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportGlobalEnable.setDescription('Binary coded Report activation: Die OCTETS werden bitweise interpretiert. Bit 0 entspricht dem LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 1-7: unused Bit 0 : Report enable')
wtWebCount6ReportCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 35), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportCounterClear.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 1-7: unused Bit 0 : Counter clear on Report send')
wtWebCount6ReportRateOfChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 52), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportRateOfChange.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportRateOfChange.setDescription('This variable configures a max. counter value within a time slot. If an input counter value exceeds this max. value, the corresponding Report is triggered. Input counters with its mask bit unset in wtWebCount6ReportInputTrigger are not considered. A value of Zero disable the tracing of rate of change.')
wtWebCount6ReportRateOfChangeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 53), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportRateOfChangeWindow.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportRateOfChangeWindow.setDescription('This variable configures the time slot of wtWebCount6ReportRateOfChange. Input counters with its mask bit unset in wtWebCount6ReportInputTrigger are not considered. A value of Zero disable the tracing of rate of change.')
wtWebCount6ReportRateOfChangeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 1, 5, 3, 1, 54), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6ReportRateOfChangeMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6ReportRateOfChangeMode.setDescription('Binary coded options: Minimum mode: a report will be send if the count of pulses is lower than the given pulse count in wtWebCount6ReportRateOfChange. Maximum mode: a report will be send if the count of pulses is greater than the pulse count given in wtWebCount6ReportRateOfChange. The OCTETS are interpreted bit-by-bit, use only one bit at a time. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 1-7: unused Bit 2 : Maximum Mode Bit 1 : Minimum Mode Bit 0 : Rate of Change OFF')
wtWebCount6InputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebCount6InputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputPortTable.setDescription('List of settings depending on the input number.')
wtWebCount6InputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebCount6InputNo"))
if mibBuilder.loadTexts: wtWebCount6InputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6InputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebCount6PortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputName.setDescription('Name of the input.')
wtWebCount6PortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputText.setDescription('Description of the input.')
wtWebCount6PortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputMode.setDescription('Binary coded modes: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. Selection for input 0-1: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Bidirectional counter enable Bit 2 : unused Bit 1 : Change detection enable Bit 0 : unused')
wtWebCount6PortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebCount6PortInputPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebCount6PortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebCount6PortInputCounterSet = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputCounterSet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputCounterSet.setDescription('Writing to this variable presets the counter, while reading returns the actual value.')
wtWebCount6PortInputCounterScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputCounterScale.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputCounterScale.setDescription('Conversion factor for this counter.')
wtWebCount6PortInputCounterUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 2, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6PortInputCounterUnit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6PortInputCounterUnit.setDescription('Unit for this counter.')
wtWebCount6MfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MfName.setDescription('Manufacturer company name')
wtWebCount6MfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MfAddr.setDescription('Manufacturer address.')
wtWebCount6MfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MfHotline.setDescription('Manufacturer hotline.')
wtWebCount6MfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MfInternet.setDescription('Manufacturer Internet address.')
wtWebCount6MfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebCount6MfOrderNo = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6MfOrderNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6MfOrderNo.setDescription('Manufacturer part number.')
wtWebCount6DiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6DiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebCount6DiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6DiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebCount6DiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebCount6DiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebCount6DiagErrorMessage. Errors are numbered from 1 to wtWebCount6DiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebCount6DiagErrorMessage.')
wtWebCount6DiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebCount6DiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DiagErrorMessage.setDescription('Using wtWebCount6DiagErrorIndex as an index, the appropriate message is available.')
wtWebCount6DiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebCount6DiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebCount6DiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebCount6Alert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert1.setDescription('This SNMP trap is generated when Report 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert2.setDescription('This SNMP trap is generated when Report 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert3.setDescription('This SNMP trap is generated when Report 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert4.setDescription('This SNMP trap is generated when Report 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert5.setDescription('This SNMP trap is generated when Report 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert6.setDescription('This SNMP trap is generated when Report 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert7.setDescription('This SNMP trap is generated when Report 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert8.setDescription('This SNMP trap is generated when Report 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert9.setDescription('This SNMP trap is generated when Report 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert10.setDescription('This SNMP trap is generated when Report 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert11.setDescription('This SNMP trap is generated when Report 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6Alert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtWebCount6Alert12.setDescription('This SNMP trap is generated when Report 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebCount6AlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 22) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebCount6DiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebCount6DiagErrorMessage"))
if mibBuilder.loadTexts: wtWebCount6AlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Inputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6Inputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6Inputs.setDescription('Number of idependent inputs.')
wtWebioEA6x6Outputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6Outputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6Outputs.setDescription('Number of idependent outputs.')
wtWebioEA6x6InputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA6x6InputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputTable.setDescription('List of input indices.')
wtWebioEA6x6InputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6InputNo"))
if mibBuilder.loadTexts: wtWebioEA6x6InputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputEntry.setDescription('Number of the inputs.')
wtWebioEA6x6InputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6InputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputNo.setDescription('Index numbers of the inputs.')
wtWebioEA6x6InputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6InputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputCounter.setDescription('Value of the input counter.')
wtWebioEA6x6InputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6InputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebioEA6x6InputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA6x6InputState-OFF", 0), ("wtWebioEA6x6InputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6InputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputState.setDescription('Value of a single input bit.')
wtWebioEA6x6InputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6InputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, unused OCTET 4, Bit 0-5: Digital outputs 0-5 Bit 6-7: unused')
wtWebioEA6x6OutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA6x6OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputTable.setDescription('List of output indices.')
wtWebioEA6x6OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6OutputNo"))
if mibBuilder.loadTexts: wtWebioEA6x6OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputEntry.setDescription('Number of the outputs.')
wtWebioEA6x6OutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6OutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputNo.setDescription('Output number.')
wtWebioEA6x6OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA6x6OutputState-OFF", 0), ("wtWebioEA6x6OutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6OutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputState.setDescription('Value of a single output bit.')
wtWebioEA6x6OutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, unused OCTET 4, Bit 0-5: Digital outputs 0-5 Bit 6-7: unused')
wtWebioEA6x6SetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4 : Bit 0-5: Mask for digital outputs 0-5 Bit 6-7: unused OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8 : Bit 0-5: Level of digital outputs 0-5 Bit 6-7: unused')
wtWebioEA6x6SessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA6x6SessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA6x6SessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA6x6SessCntrl-NoSession", 0), ("wtWebioEA6x6SessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA6x6SessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA6x6SessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA6x6SessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA6x6DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA6x6DeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6DeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA6x6DeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6DeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA6x6DeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6DeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA6x6TzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6TzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6TzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA6x6TzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6TzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6TzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA6x6TzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6TzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6TzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA6x6StTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA6x6StTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA6x6StTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA6x6StTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA6x6StartMonth-January", 1), ("wtWebioEA6x6StartMonth-February", 2), ("wtWebioEA6x6StartMonth-March", 3), ("wtWebioEA6x6StartMonth-April", 4), ("wtWebioEA6x6StartMonth-May", 5), ("wtWebioEA6x6StartMonth-June", 6), ("wtWebioEA6x6StartMonth-July", 7), ("wtWebioEA6x6StartMonth-August", 8), ("wtWebioEA6x6StartMonth-September", 9), ("wtWebioEA6x6StartMonth-October", 10), ("wtWebioEA6x6StartMonth-November", 11), ("wtWebioEA6x6StartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA6x6StTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA6x6StartMode-first", 1), ("wtWebioEA6x6StartMode-second", 2), ("wtWebioEA6x6StartMode-third", 3), ("wtWebioEA6x6StartMode-fourth", 4), ("wtWebioEA6x6StartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA6x6StTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA6x6StartWday-Sunday", 1), ("wtWebioEA6x6StartWday-Monday", 2), ("wtWebioEA6x6StartWday-Tuesday", 3), ("wtWebioEA6x6StartWday-Thursday", 4), ("wtWebioEA6x6StartWday-Wednesday", 5), ("wtWebioEA6x6StartWday-Friday", 6), ("wtWebioEA6x6StartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA6x6StTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA6x6StTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA6x6StTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA6x6StopMonth-January", 1), ("wtWebioEA6x6StopMonth-February", 2), ("wtWebioEA6x6StopMonth-March", 3), ("wtWebioEA6x6StopMonth-April", 4), ("wtWebioEA6x6StopMonth-May", 5), ("wtWebioEA6x6StopMonth-June", 6), ("wtWebioEA6x6StopMonth-July", 7), ("wtWebioEA6x6StopMonth-August", 8), ("wtWebioEA6x6StopMonth-September", 9), ("wtWebioEA6x6StopMonth-October", 10), ("wtWebioEA6x6StopMonth-November", 11), ("wtWebioEA6x6StopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA6x6StTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA6x6StopMode-first", 1), ("wtWebioEA6x6StopMode-second", 2), ("wtWebioEA6x6StopMode-third", 3), ("wtWebioEA6x6StopMode-fourth", 4), ("wtWebioEA6x6StopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA6x6StTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA6x6StopWday-Sunday", 1), ("wtWebioEA6x6StopWday-Monday", 2), ("wtWebioEA6x6StopWday-Tuesday", 3), ("wtWebioEA6x6StopWday-Thursday", 4), ("wtWebioEA6x6StopWday-Wednesday", 5), ("wtWebioEA6x6StopWday-Friday", 6), ("wtWebioEA6x6StopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA6x6StTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA6x6StTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6StTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA6x6TimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6TimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6TimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA6x6TimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6TimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6TimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA6x6TsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6TsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6TsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA6x6TsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6TsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6TsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA6x6ClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6ClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6ClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA6x6ClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6ClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6ClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA6x6ClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6ClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6ClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA6x6ClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA6x6ClockMonth-January", 1), ("wtWebioEA6x6ClockMonth-February", 2), ("wtWebioEA6x6ClockMonth-March", 3), ("wtWebioEA6x6ClockMonth-April", 4), ("wtWebioEA6x6ClockMonth-May", 5), ("wtWebioEA6x6ClockMonth-June", 6), ("wtWebioEA6x6ClockMonth-July", 7), ("wtWebioEA6x6ClockMonth-August", 8), ("wtWebioEA6x6ClockMonth-September", 9), ("wtWebioEA6x6ClockMonth-October", 10), ("wtWebioEA6x6ClockMonth-November", 11), ("wtWebioEA6x6ClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6ClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6ClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA6x6ClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6ClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6ClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA6x6IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6IpAddress.setDescription('IP address of the Webio')
wtWebioEA6x6SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA6x6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6Gateway.setDescription('Gateway of the Webio')
wtWebioEA6x6DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6DnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA6x6DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6DnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA6x6AddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA6x6Startup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6Startup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6Startup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA6x6GetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6GetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6GetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA6x6HttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6HttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6HttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-5: Digital inputs 0-5 Bit 6-7: unused')
wtWebioEA6x6HttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6HttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6HttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA6x6MailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MailAdName.setDescription('Device name for mail administration.')
wtWebioEA6x6MailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MailReply.setDescription('Reply address for the mail server.')
wtWebioEA6x6MailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA6x6MailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA6x6MailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA6x6MailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA6x6MailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MailAuthPassword.setDescription('Authentication password.')
wtWebioEA6x6MailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA6x6SnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA6x6SnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA6x6SnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA6x6SnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA6x6SnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebioEA6x6UdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6UdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6UdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA6x6UdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6UdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6UdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA6x6UdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6UdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6UdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA6x6BinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA6x6BinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA6x6BinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryIfTable.setDescription('Table of indices.')
wtWebioEA6x6BinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6BinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA6x6BinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA6x6BinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA6x6BinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA6x6BinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6BinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA6x6BinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryEntry.setDescription('Binary properties.')
wtWebioEA6x6BinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA6x6BinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA6x6BinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-5: Digital inputs 0-5 Bit 6-7: unused')
wtWebioEA6x6BinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA6x6BinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA6x6BinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA6x6BinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA6x6BinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA6x6BinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA6x6BinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-5: Digital inputs 0-5 Bit 6-7: unused')
wtWebioEA6x6BinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA6x6BinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA6x6BinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA6x6BinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA6x6BinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA6x6BinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-5: Digital inputs 0-5 Bit 6-7: unused')
wtWebioEA6x6BinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA6x6BinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA6x6BinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA6x6BinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA6x6BinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA6x6BinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6BinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA6x6SyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA6x6SyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA6x6SyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA6x6SyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA6x6FTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6FTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6FTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA6x6FTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6FTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6FTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA6x6FTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6FTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6FTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA6x6FTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6FTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6FTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA6x6FTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6FTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6FTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA6x6FTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6FTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6FTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA6x6FTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6FTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6FTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA6x6OutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA6x6OutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA6x6OutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6OutputNo"))
if mibBuilder.loadTexts: wtWebioEA6x6OutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA6x6OutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6OutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA6x6SafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6SafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6SafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA6x6AlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmCount.setDescription('Number of independent alarms.')
wtWebioEA6x6AlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA6x6AlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA6x6AlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6AlarmNo"))
if mibBuilder.loadTexts: wtWebioEA6x6AlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA6x6AlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA6x6AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA6x6AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6AlarmNo"))
if mibBuilder.loadTexts: wtWebioEA6x6AlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA6x6AlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-5: Mask for digital inputs 0-5 Bit 6-7: unused OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-5: Level of digital inputs 0-5 Bit 6-7: unused OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-5: ANY bits of digital inputs 0-5 Bit 6-7: unused')
wtWebioEA6x6AlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-5: Mask for digital outputs 0-5 Bit 6-7: unused OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-5: Level of digital outputs 0-5 Bit 6-7: unused OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-5: ANY bits of digital outputs 0-5 Bit 6-7: unused')
wtWebioEA6x6AlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : Load Control')
wtWebioEA6x6AlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA6x6AlarmInputTrigger are not considered.')
wtWebioEA6x6AlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA6x6AlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtWebioEA6x6AlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA6x6AlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA6x6AlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA6x6AlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA6x6AlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA6x6AlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA6x6AlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA6x6AlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA6x6AlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA6x6AlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA6x6AlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA6x6AlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA6x6AlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA6x6AlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA6x6AlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA6x6AlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA6x6AlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA6x6AlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA6x6AlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA6x6AlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebioEA6x6AlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA6x6AlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebioEA6x6AlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebioEA6x6AlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebioEA6x6AlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA6x6AlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6AlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebioEA6x6InputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA6x6InputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA6x6InputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6InputNo"))
if mibBuilder.loadTexts: wtWebioEA6x6InputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6InputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA6x6PortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortInputName.setDescription('Name of the input.')
wtWebioEA6x6PortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortInputText.setDescription('Description of the input.')
wtWebioEA6x6PortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, with each set of octets corresponding to an input. Bit 0 corresponds to the LSB. Selection for input 0-3: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 3-7: unused Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable Selection for inputs 4-5: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Counter clear on read Bit 0 : Change detection enable (default)')
wtWebioEA6x6PortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA6x6PortInputBicountPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortInputBicountPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortInputBicountPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA6x6PortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebioEA6x6OutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA6x6OutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA6x6OutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA6x6OutputNo"))
if mibBuilder.loadTexts: wtWebioEA6x6OutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6OutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA6x6PortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortOutputName.setDescription('Name of the output.')
wtWebioEA6x6PortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortOutputText.setDescription('Description of the output.')
wtWebioEA6x6PortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortOutputGroupMode.setDescription('It is possible to connect outputs together to increase the output current. This could be done by connecting 2 or 4 outputs in a group together. All bits of such a group has to be set all together in the same way. This variable configures this group scheme. If one output bit of a group is set, all other output bits of the same group will be set in the same manner. More than one configuration must not be selected. Selection for outputs 0-3: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : outputs 0,1,2,3 disconnected (default) Bit 1 : outputs 0+1, 2+3 connected Bit 2 : outputs 0+1+2+3 connected Bit 3-7 : unused Selection for outputs 4-7: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : outputs 4, 5 disconnected (default) Bit 1 : outputs 4+5 connected Bit 2-7 : unused Selection for outputs 8-11: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: unused')
wtWebioEA6x6PortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA6x6PortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA6x6PortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA6x6PortLogicInputInverter) 3. Logical combination (wtWebioEA6x6PortLogicFunction) 4. Inverting the result if necessary (wtWebioEA6x6PortLogicOutputInverter) OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-5 : inputs 0-5 Bit 6-7 : unused')
wtWebioEA6x6PortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-5 : inputs 0-5 Bit 6-7 : unused')
wtWebioEA6x6PortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA6x6PortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA6x6PortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA6x6PortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6PortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6PortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA6x6PortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA6x6MfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MfName.setDescription('Manufacturer company name')
wtWebioEA6x6MfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MfAddr.setDescription('Manufacturer address.')
wtWebioEA6x6MfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MfHotline.setDescription('Manufacturer hotline.')
wtWebioEA6x6MfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA6x6MfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6MfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6MfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA6x6DiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6DiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA6x6DiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6DiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA6x6DiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA6x6DiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA6x6DiagErrorMessage. Errors are numbered from 1 to wtWebioEA6x6DiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA6x6DiagErrorMessage.')
wtWebioEA6x6DiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA6x6DiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DiagErrorMessage.setDescription('Using wtWebioEA6x6DiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA6x6DiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA6x6DiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA6x6DiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA6x6Alert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6Alert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6AlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA6x6Alert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA6x6AlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 24) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA6x6DiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA6x6DiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA6x6AlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPInputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputs.setDescription('Number of idependent inputs.')
wtWebioEA2x2ERPOutputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputs.setDescription('Number of idependent outputs.')
wtWebioEA2x2ERPInputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputTable.setDescription('List of input indices.')
wtWebioEA2x2ERPInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPInputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputEntry.setDescription('Number of the inputs.')
wtWebioEA2x2ERPInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputNo.setDescription('Index numbers of the inputs.')
wtWebioEA2x2ERPInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputCounter.setDescription('Value of the input counter.')
wtWebioEA2x2ERPInputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebioEA2x2ERPInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPInputState-OFF", 0), ("wtWebioEA2x2ERPInputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputState.setDescription('Value of a single input bit.')
wtWebioEA2x2ERPInputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1')
wtWebioEA2x2ERPOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputTable.setDescription('List of output indices.')
wtWebioEA2x2ERPOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputEntry.setDescription('Number of the outputs.')
wtWebioEA2x2ERPOutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputNo.setDescription('Output number.')
wtWebioEA2x2ERPOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPOutputState-OFF", 0), ("wtWebioEA2x2ERPOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputState.setDescription('Value of a single output bit.')
wtWebioEA2x2ERPOutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1 Bit 2-7: ungenutzt')
wtWebioEA2x2ERPSetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1')
wtWebioEA2x2ERPSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA2x2ERPSessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA2x2ERPSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPSessCntrl-NoSession", 0), ("wtWebioEA2x2ERPSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA2x2ERPSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA2x2ERPSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA2x2ERPSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA2x2ERPDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA2x2ERPDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA2x2ERPDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA2x2ERPDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA2x2ERPTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA2x2ERPTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA2x2ERPTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA2x2ERPStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA2x2ERPStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA2x2ERPStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA2x2ERPStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPStartMonth-January", 1), ("wtWebioEA2x2ERPStartMonth-February", 2), ("wtWebioEA2x2ERPStartMonth-March", 3), ("wtWebioEA2x2ERPStartMonth-April", 4), ("wtWebioEA2x2ERPStartMonth-May", 5), ("wtWebioEA2x2ERPStartMonth-June", 6), ("wtWebioEA2x2ERPStartMonth-July", 7), ("wtWebioEA2x2ERPStartMonth-August", 8), ("wtWebioEA2x2ERPStartMonth-September", 9), ("wtWebioEA2x2ERPStartMonth-October", 10), ("wtWebioEA2x2ERPStartMonth-November", 11), ("wtWebioEA2x2ERPStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA2x2ERPStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPStartMode-first", 1), ("wtWebioEA2x2ERPStartMode-second", 2), ("wtWebioEA2x2ERPStartMode-third", 3), ("wtWebioEA2x2ERPStartMode-fourth", 4), ("wtWebioEA2x2ERPStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA2x2ERPStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPStartWday-Sunday", 1), ("wtWebioEA2x2ERPStartWday-Monday", 2), ("wtWebioEA2x2ERPStartWday-Tuesday", 3), ("wtWebioEA2x2ERPStartWday-Thursday", 4), ("wtWebioEA2x2ERPStartWday-Wednesday", 5), ("wtWebioEA2x2ERPStartWday-Friday", 6), ("wtWebioEA2x2ERPStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA2x2ERPStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA2x2ERPStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA2x2ERPStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPStopMonth-January", 1), ("wtWebioEA2x2ERPStopMonth-February", 2), ("wtWebioEA2x2ERPStopMonth-March", 3), ("wtWebioEA2x2ERPStopMonth-April", 4), ("wtWebioEA2x2ERPStopMonth-May", 5), ("wtWebioEA2x2ERPStopMonth-June", 6), ("wtWebioEA2x2ERPStopMonth-July", 7), ("wtWebioEA2x2ERPStopMonth-August", 8), ("wtWebioEA2x2ERPStopMonth-September", 9), ("wtWebioEA2x2ERPStopMonth-October", 10), ("wtWebioEA2x2ERPStopMonth-November", 11), ("wtWebioEA2x2ERPStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA2x2ERPStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPStopMode-first", 1), ("wtWebioEA2x2ERPStopMode-second", 2), ("wtWebioEA2x2ERPStopMode-third", 3), ("wtWebioEA2x2ERPStopMode-fourth", 4), ("wtWebioEA2x2ERPStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA2x2ERPStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPStopWday-Sunday", 1), ("wtWebioEA2x2ERPStopWday-Monday", 2), ("wtWebioEA2x2ERPStopWday-Tuesday", 3), ("wtWebioEA2x2ERPStopWday-Thursday", 4), ("wtWebioEA2x2ERPStopWday-Wednesday", 5), ("wtWebioEA2x2ERPStopWday-Friday", 6), ("wtWebioEA2x2ERPStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA2x2ERPStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA2x2ERPStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA2x2ERPTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA2x2ERPTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA2x2ERPTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA2x2ERPTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA2x2ERPClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA2x2ERPClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA2x2ERPClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA2x2ERPClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2ERPClockMonth-January", 1), ("wtWebioEA2x2ERPClockMonth-February", 2), ("wtWebioEA2x2ERPClockMonth-March", 3), ("wtWebioEA2x2ERPClockMonth-April", 4), ("wtWebioEA2x2ERPClockMonth-May", 5), ("wtWebioEA2x2ERPClockMonth-June", 6), ("wtWebioEA2x2ERPClockMonth-July", 7), ("wtWebioEA2x2ERPClockMonth-August", 8), ("wtWebioEA2x2ERPClockMonth-September", 9), ("wtWebioEA2x2ERPClockMonth-October", 10), ("wtWebioEA2x2ERPClockMonth-November", 11), ("wtWebioEA2x2ERPClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA2x2ERPClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA2x2ERPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPIpAddress.setDescription('IP address of the Webio')
wtWebioEA2x2ERPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA2x2ERPGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPGateway.setDescription('Gateway of the Webio')
wtWebioEA2x2ERPDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA2x2ERPDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA2x2ERPAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA2x2ERPStartup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPStartup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPStartup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA2x2ERPGetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPGetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPGetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA2x2ERPHttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPHttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPHttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2ERPHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA2x2ERPMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailAdName.setDescription('Device name for mail administration.')
wtWebioEA2x2ERPMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailReply.setDescription('Reply address for the mail server.')
wtWebioEA2x2ERPMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA2x2ERPMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA2x2ERPMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA2x2ERPMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA2x2ERPMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailAuthPassword.setDescription('Authentication password.')
wtWebioEA2x2ERPMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA2x2ERPSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA2x2ERPSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA2x2ERPSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA2x2ERPSnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA2x2ERPSnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebioEA2x2ERPUdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPUdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPUdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA2x2ERPUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA2x2ERPUdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPUdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPUdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA2x2ERPBinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA2x2ERPBinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryIfTable.setDescription('Table of indices.')
wtWebioEA2x2ERPBinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA2x2ERPBinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA2x2ERPBinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA2x2ERPBinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryEntry.setDescription('Binary properties.')
wtWebioEA2x2ERPBinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA2x2ERPBinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2ERPBinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2ERPBinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2ERPBinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2ERPBinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA2x2ERPBinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA2x2ERPBinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA2x2ERPBinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA2x2ERPBinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2ERPBinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA2x2ERPBinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2ERPBinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2ERPBinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA2x2ERPBinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA2x2ERPBinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2ERPBinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA2x2ERPBinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2ERPBinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA2x2ERPBinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA2x2ERPBinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA2x2ERPBinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPBinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA2x2ERPSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA2x2ERPSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA2x2ERPSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA2x2ERPSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA2x2ERPFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA2x2ERPFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA2x2ERPFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA2x2ERPFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA2x2ERPFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA2x2ERPFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA2x2ERPFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA2x2ERPWayBackEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 10, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackEnable.setDescription('Set Bit 0 to enable WayBack: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : WayBack enable')
wtWebioEA2x2ERPWayBackServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA2x2ERPWayBackFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackFTPPassword.setDescription('WayBack FTP Loggin: Password of the user.')
wtWebioEA2x2ERPWayBackFTPResponse = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 10, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackFTPResponse.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackFTPResponse.setDescription('WayBack FTP response: return message after login.')
wtWebioEA2x2ERPWayBackFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 3, 10, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackFTPTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPWayBackFTPTimeOut.setDescription('WayBack FTP Timeout: a request must be finished within this periode of time.')
wtWebioEA2x2ERPOutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA2x2ERPOutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA2x2ERPOutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA2x2ERPSafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPSafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPSafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA2x2ERPLoadControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPLoadControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPLoadControlEnable.setDescription('Here the function of automatic load control can be enabled. All output were tested in pairs (0-1). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Load Control enable')
wtWebioEA2x2ERPAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmCount.setDescription('Number of independent alarms.')
wtWebioEA2x2ERPAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA2x2ERPAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA2x2ERPAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA2x2ERPAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA2x2ERPAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA2x2ERPAlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital inputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital inputs 0-1 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: ANY bits of digital inputs 0-1')
wtWebioEA2x2ERPAlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: ANY bits of digital outputs 0-1')
wtWebioEA2x2ERPAlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : Load Control')
wtWebioEA2x2ERPAlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA2x2ERPAlarmInputTrigger are not considered.')
wtWebioEA2x2ERPAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA2x2ERPAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtWebioEA2x2ERPAlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA2x2ERPAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA2x2ERPAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA2x2ERPAlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA2x2ERPAlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA2x2ERPAlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA2x2ERPAlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA2x2ERPAlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA2x2ERPAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA2x2ERPAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA2x2ERPAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA2x2ERPAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA2x2ERPAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA2x2ERPAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA2x2ERPAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA2x2ERPAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA2x2ERPAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA2x2ERPAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA2x2ERPAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA2x2ERPAlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebioEA2x2ERPAlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA2x2ERPAlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebioEA2x2ERPAlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebioEA2x2ERPAlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebioEA2x2ERPAlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA2x2ERPAlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebioEA2x2ERPLoadControlView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPLoadControlView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPLoadControlView.setDescription('Here the result of automatic load control can be read. All output were tested in pairs (0-1). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0-1: outputs 0-1.')
wtWebioEA2x2ERPLCShutDownView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 1, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPLCShutDownView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPLCShutDownView.setDescription('Here the result of the automatic load control shut down can be read. All outputs remain switched of, until a zero is written into this variable. But previously all loads should be inspected. High current (short circuit), a broken supply line or a defect load (i.e. lamp) may be a shut down reason. If no load is detected, the load control unit suspend automaticly the control of the corresponding output pair. All controlled output could be identified reading the variable wtWebioEA2x2ERPLoadControlEnable. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an ouput. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0-1: outputs 0-1.')
wtWebioEA2x2ERPInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA2x2ERPInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPInputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPInputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA2x2ERPPortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputName.setDescription('Name of the input.')
wtWebioEA2x2ERPPortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputText.setDescription('Description of the input.')
wtWebioEA2x2ERPPortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. Selection for input 0-1: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Bidirectional counter enable Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable')
wtWebioEA2x2ERPPortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA2x2ERPPortInputBicountPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputBicountPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputBicountPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA2x2ERPPortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebioEA2x2ERPOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA2x2ERPOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERPOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPOutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA2x2ERPPortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortOutputName.setDescription('Name of the output.')
wtWebioEA2x2ERPPortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortOutputText.setDescription('Description of the output.')
wtWebioEA2x2ERPPortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortOutputGroupMode.setDescription('It is possible to connect outputs together to increase the output current. This could be done by connecting 2 or 4 outputs in a group together. All bits of such a group has to be set all together in the same way. This variable configures this group scheme. If one ouput bit of a group is set, all other output bits of the same group will be set in the same manner. More than one configuration must not be selected. Selection for ouputs 0-1: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : ouputs 0,1 disconnected (default) Bit 1 : ouputs 0+1 connected')
wtWebioEA2x2ERPPortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA2x2ERPPortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA2x2ERPPortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA2x2ERPPortLogicInputInverter) 3. Logical combination (wtWebioEA2x2ERPPortLogicFunction) 4. Inverting the result if necessary (wtWebioEA2x2ERPPortLogicOutputInverter) OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-1 : inputs 0-1')
wtWebioEA2x2ERPPortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-1 : inputs 0-1')
wtWebioEA2x2ERPPortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA2x2ERPPortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA2x2ERPPortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA2x2ERPPortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPPortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA2x2ERPPortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA2x2ERPMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfName.setDescription('Manufacturer company name')
wtWebioEA2x2ERPMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfAddr.setDescription('Manufacturer address.')
wtWebioEA2x2ERPMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfHotline.setDescription('Manufacturer hotline.')
wtWebioEA2x2ERPMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA2x2ERPMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA2x2ERPDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA2x2ERPDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA2x2ERPDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA2x2ERPDiagErrorMessage. Errors are numbered from 1 to wtWebioEA2x2ERPDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA2x2ERPDiagErrorMessage.')
wtWebioEA2x2ERPDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagErrorMessage.setDescription('Using wtWebioEA2x2ERPDiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA2x2ERPDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERPDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA2x2ERPAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERPAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 25) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERPDiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA2x2ERPDiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA2x2ERPAlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPInputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputs.setDescription('Number of idependent inputs.')
wtWebioEA12x6RelERPOutputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputs.setDescription('Number of independent outputs.')
wtWebioEA12x6RelERPInputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputTable.setDescription('List of input indices.')
wtWebioEA12x6RelERPInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPInputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputEntry.setDescription('Number of the inputs.')
wtWebioEA12x6RelERPInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputNo.setDescription('Index numbers of the inputs.')
wtWebioEA12x6RelERPInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputCounter.setDescription('Value of the input counter.')
wtWebioEA12x6RelERPInputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebioEA12x6RelERPInputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelERPOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputTable.setDescription('List of output indices.')
wtWebioEA12x6RelERPOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPOutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputEntry.setDescription('Number of the outputs.')
wtWebioEA12x6RelERPOutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputNo.setDescription('Output number.')
wtWebioEA12x6RelERPOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPOutputState-OFF", 0), ("wtWebioEA12x6OutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputState.setDescription('Setting and reading of the states of the outputs.')
wtWebioEA12x6RelERPOutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-5: Digital outputs 0-5')
wtWebioEA12x6RelERPSetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4 : Bit 0-5: Mask for digital outputs 0-5 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8 : Bit 0-5: Level of digital outputs 0-5')
wtWebioEA12x6RelERPSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA12x6RelERPSessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA12x6RelERPSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPSessCntrl-NoSession", 0), ("wtWebioEA12x6RelERPSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA12x6RelERPSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA12x6RelERPSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA12x6RelERPSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA12x6RelERPDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA12x6RelERPDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA12x6RelERPDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA12x6RelERPDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA12x6RelERPTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA12x6RelERPTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA12x6RelERPTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA12x6RelERPStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA12x6RelERPStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA12x6RelERPStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA12x6RelERPStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPStartMonth-January", 1), ("wtWebioEA12x6RelERPStartMonth-February", 2), ("wtWebioEA12x6RelERPStartMonth-March", 3), ("wtWebioEA12x6RelERPStartMonth-April", 4), ("wtWebioEA12x6RelERPStartMonth-May", 5), ("wtWebioEA12x6RelERPStartMonth-June", 6), ("wtWebioEA12x6RelERPStartMonth-July", 7), ("wtWebioEA12x6RelERPStartMonth-August", 8), ("wtWebioEA12x6RelERPStartMonth-September", 9), ("wtWebioEA12x6RelERPStartMonth-October", 10), ("wtWebioEA12x6RelERPStartMonth-November", 11), ("wtWebioEA12x6RelERPStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA12x6RelERPStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPStartMode-first", 1), ("wtWebioEA12x6RelERPStartMode-second", 2), ("wtWebioEA12x6RelERPStartMode-third", 3), ("wtWebioEA12x6RelERPStartMode-fourth", 4), ("wtWebioEA12x6RelERPStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA12x6RelERPStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPStartWday-Sunday", 1), ("wtWebioEA12x6RelERPStartWday-Monday", 2), ("wtWebioEA12x6RelERPStartWday-Tuesday", 3), ("wtWebioEA12x6RelERPStartWday-Thursday", 4), ("wtWebioEA12x6RelERPStartWday-Wednesday", 5), ("wtWebioEA12x6RelERPStartWday-Friday", 6), ("wtWebioEA12x6RelERPStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA12x6RelERPStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA12x6RelERPStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA12x6RelERPStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPStopMonth-January", 1), ("wtWebioEA12x6RelERPStopMonth-February", 2), ("wtWebioEA12x6RelERPStopMonth-March", 3), ("wtWebioEA12x6RelERPStopMonth-April", 4), ("wtWebioEA12x6RelERPStopMonth-May", 5), ("wtWebioEA12x6RelERPStopMonth-June", 6), ("wtWebioEA12x6RelERPStopMonth-July", 7), ("wtWebioEA12x6RelERPStopMonth-August", 8), ("wtWebioEA12x6RelERPStopMonth-September", 9), ("wtWebioEA12x6RelERPStopMonth-October", 10), ("wtWebioEA12x6RelERPStopMonth-November", 11), ("wtWebioEA12x6RelERPStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA12x6RelERPStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPStopMode-first", 1), ("wtWebioEA12x6RelERPStopMode-second", 2), ("wtWebioEA12x6RelERPStopMode-third", 3), ("wtWebioEA12x6RelERPStopMode-fourth", 4), ("wtWebioEA12x6RelERPStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA12x6RelERPStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPStopWday-Sunday", 1), ("wtWebioEA12x6RelERPStopWday-Monday", 2), ("wtWebioEA12x6RelERPStopWday-Tuesday", 3), ("wtWebioEA12x6RelERPStopWday-Thursday", 4), ("wtWebioEA12x6RelERPStopWday-Wednesday", 5), ("wtWebioEA12x6RelERPStopWday-Friday", 6), ("wtWebioEA12x6RelERPStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA12x6RelERPStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA12x6RelERPStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA12x6RelERPTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA12x6RelERPTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA12x6RelERPTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA12x6RelERPTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA12x6RelERPClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA12x6RelERPClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA12x6RelERPClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA12x6RelERPClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA12x6RelERPClockMonth-January", 1), ("wtWebioEA12x6RelERPClockMonth-February", 2), ("wtWebioEA12x6RelERPClockMonth-March", 3), ("wtWebioEA12x6RelERPClockMonth-April", 4), ("wtWebioEA12x6RelERPClockMonth-May", 5), ("wtWebioEA12x6RelERPClockMonth-June", 6), ("wtWebioEA12x6RelERPClockMonth-July", 7), ("wtWebioEA12x6RelERPClockMonth-August", 8), ("wtWebioEA12x6RelERPClockMonth-September", 9), ("wtWebioEA12x6RelERPClockMonth-October", 10), ("wtWebioEA12x6RelERPClockMonth-November", 11), ("wtWebioEA12x6RelERPClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA12x6RelERPClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA12x6RelERPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPIpAddress.setDescription('IP address of the Webio')
wtWebioEA12x6RelERPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA12x6RelERPGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPGateway.setDescription('Gateway of the Webio')
wtWebioEA12x6RelERPDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA12x6RelERPDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA12x6RelERPAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA12x6RelERPStartup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStartup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPStartup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA12x6RelERPGetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPGetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPGetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA12x6RelERPHttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPHttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPHttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelERPHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA12x6RelERPMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailAdName.setDescription('Device name for mail administration.')
wtWebioEA12x6RelERPMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailReply.setDescription('Reply address for the mail server.')
wtWebioEA12x6RelERPMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA12x6RelERPMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA12x6RelERPMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA12x6RelERPMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA12x6RelERPMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailAuthPassword.setDescription('Authentication password.')
wtWebioEA12x6RelERPMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA12x6RelERPSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA12x6RelERPSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA12x6RelERPSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA12x6RelERPSnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA12x6RelERPSnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebioEA12x6RelERPUdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPUdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPUdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA12x6RelERPUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA12x6RelERPUdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPUdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPUdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA12x6RelERPBinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA12x6RelERPBinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryIfTable.setDescription('Table of indices.')
wtWebioEA12x6RelERPBinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA12x6RelERPBinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA12x6RelERPBinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA12x6RelERPBinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryEntry.setDescription('Binary properties.')
wtWebioEA12x6RelERPBinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA12x6RelERPBinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x6RelERPBinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelERPBinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x6RelERPBinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x6RelERPBinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA12x6RelERPBinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA12x6RelERPBinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA12x6RelERPBinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA12x6RelERPBinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelERPBinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA12x6RelERPBinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x6RelERPBinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA12x6RelERPBinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA12x6RelERPBinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA12x6RelERPBinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3, Bit 0-3: Digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Digital inputs 0-7')
wtWebioEA12x6RelERPBinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA12x6RelERPBinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA12x6RelERPBinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA12x6RelERPBinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA12x6RelERPBinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA12x6RelERPBinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPBinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA12x6RelERPSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA12x6RelERPSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA12x6RelERPSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA12x6RelERPSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA12x6RelERPFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA12x6RelERPFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA12x6RelERPFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA12x6RelERPFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA12x6RelERPFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA12x6RelERPFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA12x6RelERPFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA12x6RelERPWayBackEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 10, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackEnable.setDescription('Set Bit 0 to enable WayBack: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : WayBack enable')
wtWebioEA12x6RelERPWayBackServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA12x6RelERPWayBackFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackFTPPassword.setDescription('WayBack FTP Loggin: Password of the user.')
wtWebioEA12x6RelERPWayBackFTPResponse = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 10, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackFTPResponse.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackFTPResponse.setDescription('WayBack FTP response: return message after login.')
wtWebioEA12x6RelERPWayBackFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 3, 10, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackFTPTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPWayBackFTPTimeOut.setDescription('WayBack FTP Timeout: a request must be finished within this periode of time.')
wtWebioEA12x6RelERPOutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA12x6RelERPOutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPOutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA12x6RelERPOutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, with each set of octets corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA12x6RelERPSafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPSafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA12x6RelERPAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmCount.setDescription('Number of independent alarms.')
wtWebioEA12x6RelERPAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA12x6RelERPAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA12x6RelERPAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA12x6RelERPAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA12x6RelERPAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA12x6RelERPAlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3, Bit 0-3: Mask for digital inputs 8-11 Bit 4-7: unused OCTET 4, Bit 0-7: Mask for digital inputs 0-7 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7, Bit 0-3: Level of digital inputs 8-11 Bit 4-7: unused OCTET 8, Bit 0-7: Level of digital inputs 0-7 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 11, Bit 0-7 : ANY bits of digital inputs 8-11 Bit 12-15 : unused OCTET 12, Bit 0-7 : ANY bits of digital inputs 0-7')
wtWebioEA12x6RelERPAlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-5: Mask for digital outputs 0-5 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-5: Level of digital outputs 0-5 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9 : unused OCTET 10: unused OCTET 11: unused OCTET 12: Bit 0-5: ANY bits of digital outputs 0-5')
wtWebioEA12x6RelERPAlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : Load Control')
wtWebioEA12x6RelERPAlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA12x6RelERPAlarmInputTrigger are not considered.')
wtWebioEA12x6RelERPAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA12x6RelERPAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtWebioEA12x6RelERPAlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA12x6RelERPAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA12x6RelERPAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA12x6RelERPAlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA12x6RelERPAlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA12x6RelERPAlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA12x6RelERPAlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA12x6RelERPAlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA12x6RelERPAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA12x6RelERPAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA12x6RelERPAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA12x6RelERPAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA12x6RelERPAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA12x6RelERPAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA12x6RelERPAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA12x6RelERPAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA12x6RelERPAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA12x6RelERPAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA12x6RelERPAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA12x6RelERPAlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebioEA12x6RelERPAlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebioEA12x6RelERPAlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebioEA12x6RelERPAlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebioEA12x6RelERPAlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA12x6RelERPAlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebioEA12x6RelERPInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA12x6RelERPInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPInputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPInputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA12x6RelERPPortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputName.setDescription('Name of the input.')
wtWebioEA12x6RelERPPortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputText.setDescription('Description of the input.')
wtWebioEA12x6RelERPPortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. Selection for input 0-3: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 3-7: unused Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable Selection for inputs 4-11: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Counter clear on read Bit 0 : Change detection enable (default)')
wtWebioEA12x6RelERPPortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA12x6RelERPPortInputBicountPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputBicountPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputBicountPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA12x6RelERPPortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebioEA12x6RelERPOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA12x6RelERPOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA12x6RelERPOutputNo"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPOutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA12x6RelERPPortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortOutputName.setDescription('Name of the output.')
wtWebioEA12x6RelERPPortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortOutputText.setDescription('Description of the output.')
wtWebioEA12x6RelERPPortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortOutputGroupMode.setDescription('Unused in this device 57634')
wtWebioEA12x6RelERPPortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH=Relais closed, 0=LOW Relais open) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA12x6RelERPPortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA12x6RelERPPortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA12x6RelERPPortLogicInputInverter) 3. Logical combination (wtWebioEA12x6RelERPPortLogicFunction) 4. Inverting the result if necessary (wtWebioEA12x6RelERPPortLogicOutputInverter) OCTET 1: unused OCTET 2: unused OCTET 3: Bit 0-3 : inputs 8-11 Bit 4-7 : unused OCTET 4: Bit 0-7 : inputs 0-7')
wtWebioEA12x6RelERPPortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: unused OCTET 3: Bit 0-3 : inputs 8-11 Bit 4-7 : unused OCTET 4: Bit 0-7 : inputs 0-7')
wtWebioEA12x6RelERPPortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA12x6RelERPPortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA12x6RelERPPortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA12x6RelERPPortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPPortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA12x6RelERPPortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA12x6RelERPMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfName.setDescription('Manufacturer company name')
wtWebioEA12x6RelERPMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfAddr.setDescription('Manufacturer address.')
wtWebioEA12x6RelERPMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfHotline.setDescription('Manufacturer hotline.')
wtWebioEA12x6RelERPMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA12x6RelERPMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA12x6RelERPMfOrderNo = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfOrderNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPMfOrderNo.setDescription('Manufacturer part number.')
wtWebioEA12x6RelERPDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA12x6RelERPDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA12x6RelERPDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA12x6RelERPDiagErrorMessage. Errors are numbered from 1 to wtWebioEA12x6RelERPDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA12x6RelERPDiagErrorMessage.')
wtWebioEA12x6RelERPDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagErrorMessage.setDescription('Using wtWebioEA12x6RelERPDiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA12x6RelERPDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA12x6RelERPDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA12x6RelERPAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA12x6RelERPAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 26) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPDiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA12x6RelERPDiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA12x6RelERPAlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherInputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherInputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputs.setDescription('Number of idependent inputs.')
wtIpWatcherOutputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherOutputs.setDescription('Number of idependent outputs.')
wtIpWatcherInputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 3), )
if mibBuilder.loadTexts: wtIpWatcherInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputTable.setDescription('List of input indices.')
wtIpWatcherInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherInputNo"))
if mibBuilder.loadTexts: wtIpWatcherInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputEntry.setDescription('Number of the inputs.')
wtIpWatcherInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputNo.setDescription('Index numbers of the inputs.')
wtIpWatcherInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputCounter.setDescription('Value of the input counter.')
wtIpWatcherInputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherInputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputCounterClear.setDescription('Clears the input counter after returning its value.')
wtIpWatcherInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcherInputState-OFF", 0), ("wtIpWatcherInputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherInputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputState.setDescription('Value of a single input bit.')
wtIpWatcherInputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1')
wtIpWatcherOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 5), )
if mibBuilder.loadTexts: wtIpWatcherOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherOutputTable.setDescription('List of output indices.')
wtIpWatcherOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherOutputNo"))
if mibBuilder.loadTexts: wtIpWatcherOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherOutputEntry.setDescription('Number of the outputs.')
wtIpWatcherOutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherOutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherOutputNo.setDescription('Output number.')
wtIpWatcherOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcherOutputState-OFF", 0), ("wtIpWatcherOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherOutputState.setDescription('Value of a single output bit.')
wtIpWatcherOutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherOutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1 Bit 2-7: ungenutzt')
wtIpWatcherSetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1')
wtIpWatcherAlarmOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 8), )
if mibBuilder.loadTexts: wtIpWatcherAlarmOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmOutputTable.setDescription('List of alarm indices..')
wtIpWatcherAlarmOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 8, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherAlarmNo"))
if mibBuilder.loadTexts: wtIpWatcherAlarmOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmOutputEntry.setDescription('Index reference.')
wtIpWatcherAlarmOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcherAlarmOutputState-OFF", 0), ("wtIpWatcherAlarmOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmOutputState.setDescription('State of the alarm.')
wtIpWatcherAlarmTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcherAlarmTriggerState-OFF", 0), ("wtIpWatcherAlarmTriggerState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherAlarmTriggerState.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTriggerState.setDescription('State of the trigger condition.')
wtIpWatcherSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtIpWatcherSessCntrlLogout. When read this variable provides a string of length zero.')
wtIpWatcherSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcherSessCntrl-NoSession", 0), ("wtIpWatcherSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtIpWatcherSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtIpWatcherSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtIpWatcherSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtIpWatcherDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDeviceName.setDescription('Name of the Webio, which is user definable.')
wtIpWatcherDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDeviceText.setDescription('Description of the Webio, which is user definable.')
wtIpWatcherDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtIpWatcherDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtIpWatcherTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtIpWatcherTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtIpWatcherTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtIpWatcherStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtIpWatcherStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtIpWatcherStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtIpWatcherStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtIpWatcherStartMonth-January", 1), ("wtIpWatcherStartMonth-February", 2), ("wtIpWatcherStartMonth-March", 3), ("wtIpWatcherStartMonth-April", 4), ("wtIpWatcherStartMonth-May", 5), ("wtIpWatcherStartMonth-June", 6), ("wtIpWatcherStartMonth-July", 7), ("wtIpWatcherStartMonth-August", 8), ("wtIpWatcherStartMonth-September", 9), ("wtIpWatcherStartMonth-October", 10), ("wtIpWatcherStartMonth-November", 11), ("wtIpWatcherStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtIpWatcherStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtIpWatcherStartMode-first", 1), ("wtIpWatcherStartMode-second", 2), ("wtIpWatcherStartMode-third", 3), ("wtIpWatcherStartMode-fourth", 4), ("wtIpWatcherStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtIpWatcherStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtIpWatcherStartWday-Sunday", 1), ("wtIpWatcherStartWday-Monday", 2), ("wtIpWatcherStartWday-Tuesday", 3), ("wtIpWatcherStartWday-Thursday", 4), ("wtIpWatcherStartWday-Wednesday", 5), ("wtIpWatcherStartWday-Friday", 6), ("wtIpWatcherStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtIpWatcherStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtIpWatcherStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtIpWatcherStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtIpWatcherStopMonth-January", 1), ("wtIpWatcherStopMonth-February", 2), ("wtIpWatcherStopMonth-March", 3), ("wtIpWatcherStopMonth-April", 4), ("wtIpWatcherStopMonth-May", 5), ("wtIpWatcherStopMonth-June", 6), ("wtIpWatcherStopMonth-July", 7), ("wtIpWatcherStopMonth-August", 8), ("wtIpWatcherStopMonth-September", 9), ("wtIpWatcherStopMonth-October", 10), ("wtIpWatcherStopMonth-November", 11), ("wtIpWatcherStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtIpWatcherStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtIpWatcherStopMode-first", 1), ("wtIpWatcherStopMode-second", 2), ("wtIpWatcherStopMode-third", 3), ("wtIpWatcherStopMode-fourth", 4), ("wtIpWatcherStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtIpWatcherStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtIpWatcherStopWday-Sunday", 1), ("wtIpWatcherStopWday-Monday", 2), ("wtIpWatcherStopWday-Tuesday", 3), ("wtIpWatcherStopWday-Thursday", 4), ("wtIpWatcherStopWday-Wednesday", 5), ("wtIpWatcherStopWday-Friday", 6), ("wtIpWatcherStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtIpWatcherStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtIpWatcherStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtIpWatcherTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtIpWatcherTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtIpWatcherTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtIpWatcherTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtIpWatcherClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtIpWatcherClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtIpWatcherClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtIpWatcherClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtIpWatcherClockMonth-January", 1), ("wtIpWatcherClockMonth-February", 2), ("wtIpWatcherClockMonth-March", 3), ("wtIpWatcherClockMonth-April", 4), ("wtIpWatcherClockMonth-May", 5), ("wtIpWatcherClockMonth-June", 6), ("wtIpWatcherClockMonth-July", 7), ("wtIpWatcherClockMonth-August", 8), ("wtIpWatcherClockMonth-September", 9), ("wtIpWatcherClockMonth-October", 10), ("wtIpWatcherClockMonth-November", 11), ("wtIpWatcherClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtIpWatcherClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtIpWatcherIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpAddress.setDescription('IP address of the Webio')
wtIpWatcherSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSubnetMask.setDescription('Subnet mask of the Webio')
wtIpWatcherGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherGateway.setDescription('Gateway of the Webio')
wtIpWatcherDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtIpWatcherDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtIpWatcherAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtIpWatcherHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtIpWatcherMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMailAdName.setDescription('Device name for mail administration.')
wtIpWatcherMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMailReply.setDescription('Reply address for the mail server.')
wtIpWatcherMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMailServer.setDescription('Name or IP address of the mail server.')
wtIpWatcherMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtIpWatcherMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtIpWatcherMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMailAuthUser.setDescription('Name of the user to be authenticated.')
wtIpWatcherMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMailAuthPassword.setDescription('Authentication password.')
wtIpWatcherMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtIpWatcherSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtIpWatcherSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSnmpCommunityStringRead.setDescription('Community string read only')
wtIpWatcherSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtIpWatcherSnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtIpWatcherSnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtIpWatcherUdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherUdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherUdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtIpWatcherUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtIpWatcherUdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherUdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherUdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtIpWatcherSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtIpWatcherSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtIpWatcherSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtIpWatcherSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtIpWatcherFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtIpWatcherFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtIpWatcherFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherFTPUserName.setDescription('FTP Loggin: user name.')
wtIpWatcherFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherFTPPassword.setDescription('FTP Loggin: user password.')
wtIpWatcherFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherFTPAccount.setDescription('FTP Loggin: name of account.')
wtIpWatcherFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtIpWatcherFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtIpWatcherIpListCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherIpListCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListCount.setDescription('Number of Ip addresses.')
wtIpWatcherIpListIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 2), )
if mibBuilder.loadTexts: wtIpWatcherIpListIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListIfTable.setDescription('Table of inices.')
wtIpWatcherIpListIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherIpListNo"))
if mibBuilder.loadTexts: wtIpWatcherIpListIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListIfEntry.setDescription('Table entry.')
wtIpWatcherIpListNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherIpListNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListNo.setDescription('List number of this entry.')
wtIpWatcherIpListTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 3), )
if mibBuilder.loadTexts: wtIpWatcherIpListTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListTable.setDescription('List of ip addresses.')
wtIpWatcherIpListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherIpListNo"))
if mibBuilder.loadTexts: wtIpWatcherIpListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListEntry.setDescription('List entry.')
wtIpWatcherIpListName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherIpListName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListName.setDescription('Name or IP address.')
wtIpWatcherIpListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherIpListPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListPort.setDescription('Port number, zero in the case of broadcast or Ping.')
wtIpWatcherIpListService = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherIpListService.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListService.setDescription('Binary coded scan mode, only one mode can be selected at a particular time: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Ping enable Bit 1-7: unused')
wtIpWatcherIpListEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherIpListEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: enabled in Alarm 1 Bit 1: enabled in Alarm 2 Bit 2: enabled in Alarm 3 Bit 3: enabled in Alarm 4 Bit 4-7: unused')
wtIpWatcherIpListAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 3, 11, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherIpListAlias.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherIpListAlias.setDescription('Alias Name')
wtIpWatcherAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmCount.setDescription('Number of independent alarms.')
wtIpWatcherAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtIpWatcherAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmIfTable.setDescription('List of alarm indices.')
wtIpWatcherAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherAlarmNo"))
if mibBuilder.loadTexts: wtIpWatcherAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmIfEntry.setDescription('Numbers of the alarms.')
wtIpWatcherAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmNo.setDescription('Numbers of the alarms.')
wtIpWatcherAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtIpWatcherAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTable.setDescription('List of settings depending on the alarm number.')
wtIpWatcherAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherAlarmNo"))
if mibBuilder.loadTexts: wtIpWatcherAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtIpWatcherAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmInterval.setDescription('Send interval for alarm messages.')
wtIpWatcherAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtIpWatcherAlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtIpWatcherAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtIpWatcherAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtIpWatcherAlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtIpWatcherAlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtIpWatcherAlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtIpWatcherAlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtIpWatcherAlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtIpWatcherAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtIpWatcherAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtIpWatcherAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtIpWatcherAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtIpWatcherAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtIpWatcherAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtIpWatcherAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtIpWatcherAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtIpWatcherAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtIpWatcherAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtIpWatcherAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtIpWatcherAlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtIpWatcherAlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtIpWatcherAlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtIpWatcherAlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtIpWatcherAlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtIpWatcherAlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtIpWatcherAlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtIpWatcherAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmName.setDescription('Name of the alarm.')
wtIpWatcherAlarmGlobalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmGlobalEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmGlobalEnable.setDescription('Binary coded alarm activation: Die OCTETS werden bitweise interpretiert. Bit 0 entspricht dem LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 1-7: unused Bit 0 : Alarm enable')
wtIpWatcherAlarmCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 35), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmCounterClear.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Counter clear on Alarm acknowledge Bit 0 : Counter clear on Alarm send')
wtIpWatcherAlarmAckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 36), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmAckEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmAckEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Software acknowledge enable Bit 0 : Hardware acknowledge enable')
wtIpWatcherAlarmAckPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmAckPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmAckPort.setDescription('Number of the input, which clears the alarm (1-6).')
wtIpWatcherAlarmSetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSetPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSetPort.setDescription('Number of the output, which will be set by this alarm (1-6). The configuration of pulse mode and polarity defined in the port output section is used.')
wtIpWatcherAlarmMailTrgClearSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 39), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmMailTrgClearSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmMailTrgClearSubject.setDescription('Subject line for alarm mail.')
wtIpWatcherAlarmMailTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 40), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmMailTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmMailTrgClearText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtIpWatcherAlarmSnmpTrapTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 41), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpTrapTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpTrapTrgClearText.setDescription('This text appears in the trap body.')
wtIpWatcherAlarmUdpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 42), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpTrgClearText.setDescription('This text appears in the UDP trap body.')
wtIpWatcherAlarmTcpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 43), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpTrgClearText.setDescription('This text appears in the TCP trap body.')
wtIpWatcherAlarmSyslogTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 44), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogTrgClearText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtIpWatcherAlarmFtpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 45), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpTrgClearText.setDescription('Message text to store on the FTP server.')
wtIpWatcherAlarmMailTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 46), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmMailTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmMailTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcherAlarmSnmpTrapTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 47), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpTrapTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSnmpTrapTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcherAlarmUdpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 48), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmUdpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcherAlarmTcpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 49), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTcpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcherAlarmSyslogTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 50), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmSyslogTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcherAlarmFtpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 51), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmFtpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcherAlarmTriggerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmTriggerCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmTriggerCount.setDescription('Alarm will be send if the trigger condition occours TriggerCount times.')
wtIpWatcherAlarmPollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 1, 5, 3, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherAlarmPollingRate.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherAlarmPollingRate.setDescription('Time in seconds.')
wtIpWatcherInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 1), )
if mibBuilder.loadTexts: wtIpWatcherInputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputPortTable.setDescription('List of settings depending on the input number.')
wtIpWatcherInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherInputNo"))
if mibBuilder.loadTexts: wtIpWatcherInputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherInputPortEntry.setDescription('Input parameter for the individual inputs.')
wtIpWatcherPortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherPortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherPortInputName.setDescription('Name of the input.')
wtIpWatcherPortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherPortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherPortInputText.setDescription('Description of the input.')
wtIpWatcherPortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherPortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherPortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtIpWatcherOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 2), )
if mibBuilder.loadTexts: wtIpWatcherOutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherOutputPortTable.setDescription('List of settings depending on the output number.')
wtIpWatcherOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcherOutputNo"))
if mibBuilder.loadTexts: wtIpWatcherOutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherOutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtIpWatcherPortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherPortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherPortOutputName.setDescription('Name of the output.')
wtIpWatcherPortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherPortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherPortOutputText.setDescription('Description of the output.')
wtIpWatcherPortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherPortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherPortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtIpWatcherPortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherPortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherPortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtIpWatcherPortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtIpWatcherMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMfName.setDescription('Manufacturer company name')
wtIpWatcherMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMfAddr.setDescription('Manufacturer address.')
wtIpWatcherMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMfHotline.setDescription('Manufacturer hotline.')
wtIpWatcherMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMfInternet.setDescription('Manufacturer Internet address.')
wtIpWatcherMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtIpWatcherDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDiagErrorCount.setDescription('Number of entries in the error memory.')
wtIpWatcherDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtIpWatcherDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcherDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtIpWatcherDiagErrorMessage. Errors are numbered from 1 to wtIpWatcherDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtIpWatcherDiagErrorMessage.')
wtIpWatcherDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcherDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDiagErrorMessage.setDescription('Using wtIpWatcherDiagErrorIndex as an index, the appropriate message is available.')
wtIpWatcherDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtIpWatcherDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcherDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtIpWatcherAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcherAlert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcherAlert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert25 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,91)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert25.setDescription('This SNMP trap is generated when the trigger of the Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert26 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,92)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert26.setDescription('This SNMP trap is generated when the trigger of the Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert27 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,93)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert27.setDescription('This SNMP trap is generated when the trigger of the Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert28 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,94)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert28.setDescription('This SNMP trap is generated when the trigger of the Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert29 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,95)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert29.setDescription('This SNMP trap is generated when the trigger of the Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert30 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,96)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert30.setDescription('This SNMP trap is generated when the trigger of the Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert31 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,97)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert31.setDescription('This SNMP trap is generated when the trigger of the Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert32 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,98)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert32.setDescription('This SNMP trap is generated when the trigger of the Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert33 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,99)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert33.setDescription('This SNMP trap is generated when the trigger of the Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert34 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,100)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert34.setDescription('This SNMP trap is generated when the trigger of the Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert35 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,101)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert35.setDescription('This SNMP trap is generated when the trigger of the Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlert36 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,102)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcherAlert36.setDescription('This SNMP trap is generated when the trigger of the Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcherAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 27) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcherDiagErrorIndex"), ("Webio-Digital-MIB-US", "wtIpWatcherDiagErrorMessage"))
if mibBuilder.loadTexts: wtIpWatcherAlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VInputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputs.setDescription('Number of idependent inputs.')
wtWebioEA2x2_24VOutputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputs.setDescription('Number of idependent outputs.')
wtWebioEA2x2_24VInputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputTable.setDescription('List of input indices.')
wtWebioEA2x2_24VInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VInputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputEntry.setDescription('Number of the inputs.')
wtWebioEA2x2_24VInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputNo.setDescription('Index numbers of the inputs.')
wtWebioEA2x2_24VInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputCounter.setDescription('Value of the input counter.')
wtWebioEA2x2_24VInputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebioEA2x2_24VInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VInputState-OFF", 0), ("wtWebioEA2x2_24VInputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputState.setDescription('Value of a single input bit.')
wtWebioEA2x2_24VInputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1')
wtWebioEA2x2_24VOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputTable.setDescription('List of output indices.')
wtWebioEA2x2_24VOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputEntry.setDescription('Number of the outputs.')
wtWebioEA2x2_24VOutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputNo.setDescription('Output number.')
wtWebioEA2x2_24VOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VOutputState-OFF", 0), ("wtWebioEA2x2_24VOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputState.setDescription('Value of a single output bit.')
wtWebioEA2x2_24VOutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1 Bit 2-7: ungenutzt')
wtWebioEA2x2_24VSetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1')
wtWebioEA2x2_24VSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA2x2_24VSessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA2x2_24VSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VSessCntrl-NoSession", 0), ("wtWebioEA2x2_24VSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA2x2_24VSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA2x2_24VSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA2x2_24VSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA2x2_24VDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA2x2_24VDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA2x2_24VDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA2x2_24VDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA2x2_24VTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA2x2_24VTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA2x2_24VTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA2x2_24VStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA2x2_24VStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA2x2_24VStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA2x2_24VStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VStartMonth-January", 1), ("wtWebioEA2x2_24VStartMonth-February", 2), ("wtWebioEA2x2_24VStartMonth-March", 3), ("wtWebioEA2x2_24VStartMonth-April", 4), ("wtWebioEA2x2_24VStartMonth-May", 5), ("wtWebioEA2x2_24VStartMonth-June", 6), ("wtWebioEA2x2_24VStartMonth-July", 7), ("wtWebioEA2x2_24VStartMonth-August", 8), ("wtWebioEA2x2_24VStartMonth-September", 9), ("wtWebioEA2x2_24VStartMonth-October", 10), ("wtWebioEA2x2_24VStartMonth-November", 11), ("wtWebioEA2x2_24VStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA2x2_24VStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VStartMode-first", 1), ("wtWebioEA2x2_24VStartMode-second", 2), ("wtWebioEA2x2_24VStartMode-third", 3), ("wtWebioEA2x2_24VStartMode-fourth", 4), ("wtWebioEA2x2_24VStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA2x2_24VStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VStartWday-Sunday", 1), ("wtWebioEA2x2_24VStartWday-Monday", 2), ("wtWebioEA2x2_24VStartWday-Tuesday", 3), ("wtWebioEA2x2_24VStartWday-Thursday", 4), ("wtWebioEA2x2_24VStartWday-Wednesday", 5), ("wtWebioEA2x2_24VStartWday-Friday", 6), ("wtWebioEA2x2_24VStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA2x2_24VStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA2x2_24VStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA2x2_24VStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VStopMonth-January", 1), ("wtWebioEA2x2_24VStopMonth-February", 2), ("wtWebioEA2x2_24VStopMonth-March", 3), ("wtWebioEA2x2_24VStopMonth-April", 4), ("wtWebioEA2x2_24VStopMonth-May", 5), ("wtWebioEA2x2_24VStopMonth-June", 6), ("wtWebioEA2x2_24VStopMonth-July", 7), ("wtWebioEA2x2_24VStopMonth-August", 8), ("wtWebioEA2x2_24VStopMonth-September", 9), ("wtWebioEA2x2_24VStopMonth-October", 10), ("wtWebioEA2x2_24VStopMonth-November", 11), ("wtWebioEA2x2_24VStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA2x2_24VStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VStopMode-first", 1), ("wtWebioEA2x2_24VStopMode-second", 2), ("wtWebioEA2x2_24VStopMode-third", 3), ("wtWebioEA2x2_24VStopMode-fourth", 4), ("wtWebioEA2x2_24VStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA2x2_24VStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VStopWday-Sunday", 1), ("wtWebioEA2x2_24VStopWday-Monday", 2), ("wtWebioEA2x2_24VStopWday-Tuesday", 3), ("wtWebioEA2x2_24VStopWday-Thursday", 4), ("wtWebioEA2x2_24VStopWday-Wednesday", 5), ("wtWebioEA2x2_24VStopWday-Friday", 6), ("wtWebioEA2x2_24VStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA2x2_24VStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA2x2_24VStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA2x2_24VTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA2x2_24VTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA2x2_24VTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA2x2_24VTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA2x2_24VClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA2x2_24VClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA2x2_24VClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA2x2_24VClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2_24VClockMonth-January", 1), ("wtWebioEA2x2_24VClockMonth-February", 2), ("wtWebioEA2x2_24VClockMonth-March", 3), ("wtWebioEA2x2_24VClockMonth-April", 4), ("wtWebioEA2x2_24VClockMonth-May", 5), ("wtWebioEA2x2_24VClockMonth-June", 6), ("wtWebioEA2x2_24VClockMonth-July", 7), ("wtWebioEA2x2_24VClockMonth-August", 8), ("wtWebioEA2x2_24VClockMonth-September", 9), ("wtWebioEA2x2_24VClockMonth-October", 10), ("wtWebioEA2x2_24VClockMonth-November", 11), ("wtWebioEA2x2_24VClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA2x2_24VClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA2x2_24VIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VIpAddress.setDescription('IP address of the Webio')
wtWebioEA2x2_24VSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA2x2_24VGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VGateway.setDescription('Gateway of the Webio')
wtWebioEA2x2_24VDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA2x2_24VDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA2x2_24VAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA2x2_24VStartup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VStartup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VStartup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA2x2_24VGetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VGetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VGetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA2x2_24VHttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VHttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VHttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2_24VHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA2x2_24VMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailAdName.setDescription('Device name for mail administration.')
wtWebioEA2x2_24VMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailReply.setDescription('Reply address for the mail server.')
wtWebioEA2x2_24VMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA2x2_24VMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA2x2_24VMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA2x2_24VMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA2x2_24VMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailAuthPassword.setDescription('Authentication password.')
wtWebioEA2x2_24VMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA2x2_24VSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA2x2_24VSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA2x2_24VSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA2x2_24VSnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA2x2_24VSnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebioEA2x2_24VUdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VUdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VUdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA2x2_24VUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA2x2_24VUdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VUdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VUdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA2x2_24VBinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA2x2_24VBinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryIfTable.setDescription('Table of indices.')
wtWebioEA2x2_24VBinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA2x2_24VBinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA2x2_24VBinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA2x2_24VBinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryEntry.setDescription('Binary properties.')
wtWebioEA2x2_24VBinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA2x2_24VBinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2_24VBinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2_24VBinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2_24VBinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2_24VBinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA2x2_24VBinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA2x2_24VBinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA2x2_24VBinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA2x2_24VBinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2_24VBinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA2x2_24VBinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2_24VBinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2_24VBinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA2x2_24VBinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA2x2_24VBinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2_24VBinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA2x2_24VBinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2_24VBinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA2x2_24VBinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA2x2_24VBinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA2x2_24VBinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VBinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA2x2_24VSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA2x2_24VSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA2x2_24VSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA2x2_24VSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA2x2_24VFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA2x2_24VFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA2x2_24VFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA2x2_24VFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA2x2_24VFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA2x2_24VFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA2x2_24VFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA2x2_24VOutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA2x2_24VOutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA2x2_24VOutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA2x2_24VSafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VSafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VSafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA2x2_24VPowerSupplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPowerSupplyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPowerSupplyEnable.setDescription('Setting this enable bit turns on the intarnal 24V power supply of the outputs. All currents out must not exceed 150mA. At overcurrent condition the power supply will be shut down automatically. To reset the ocvercurrent protection circuit write 1 into wtWebioEA2x2_24VDiagErrorClear. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Power Supply enable')
wtWebioEA2x2_24VAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmCount.setDescription('Number of independent alarms.')
wtWebioEA2x2_24VAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA2x2_24VAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA2x2_24VAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA2x2_24VAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA2x2_24VAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA2x2_24VAlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital inputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital inputs 0-1 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: ANY bits of digital inputs 0-1')
wtWebioEA2x2_24VAlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: ANY bits of digital outputs 0-1')
wtWebioEA2x2_24VAlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : unused')
wtWebioEA2x2_24VAlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA2x2_24VAlarmInputTrigger are not considered.')
wtWebioEA2x2_24VAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA2x2_24VAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtWebioEA2x2_24VAlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA2x2_24VAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA2x2_24VAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA2x2_24VAlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA2x2_24VAlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA2x2_24VAlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA2x2_24VAlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA2x2_24VAlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA2x2_24VAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA2x2_24VAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA2x2_24VAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA2x2_24VAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA2x2_24VAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA2x2_24VAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA2x2_24VAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA2x2_24VAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA2x2_24VAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA2x2_24VAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA2x2_24VAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA2x2_24VAlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebioEA2x2_24VAlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA2x2_24VAlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebioEA2x2_24VAlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebioEA2x2_24VAlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebioEA2x2_24VAlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA2x2_24VAlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebioEA2x2_24VInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA2x2_24VInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VInputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VInputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA2x2_24VPortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputName.setDescription('Name of the input.')
wtWebioEA2x2_24VPortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputText.setDescription('Description of the input.')
wtWebioEA2x2_24VPortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. Selection for input 0-1: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Bidirectional counter enable Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable')
wtWebioEA2x2_24VPortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA2x2_24VPortInputBicountPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputBicountPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputBicountPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA2x2_24VPortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebioEA2x2_24VOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA2x2_24VOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2_24VOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VOutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA2x2_24VPortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortOutputName.setDescription('Name of the output.')
wtWebioEA2x2_24VPortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortOutputText.setDescription('Description of the output.')
wtWebioEA2x2_24VPortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortOutputGroupMode.setDescription('It is possible to connect outputs together to increase the output current. This could be done by connecting 2 or 4 outputs in a group together. All bits of such a group has to be set all together in the same way. This variable configures this group scheme. If one ouput bit of a group is set, all other output bits of the same group will be set in the same manner. More than one configuration must not be selected. Selection for ouputs 0-1: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : ouputs 0,1 disconnected (default) Bit 1 : ouputs 0+1 connected')
wtWebioEA2x2_24VPortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA2x2_24VPortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA2x2_24VPortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA2x2_24VPortLogicInputInverter) 3. Logical combination (wtWebioEA2x2_24VPortLogicFunction) 4. Inverting the result if necessary (wtWebioEA2x2_24VPortLogicOutputInverter) OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-1 : inputs 0-1')
wtWebioEA2x2_24VPortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-1 : inputs 0-1')
wtWebioEA2x2_24VPortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA2x2_24VPortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA2x2_24VPortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA2x2_24VPortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VPortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA2x2_24VPortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA2x2_24VMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfName.setDescription('Manufacturer company name')
wtWebioEA2x2_24VMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfAddr.setDescription('Manufacturer address.')
wtWebioEA2x2_24VMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfHotline.setDescription('Manufacturer hotline.')
wtWebioEA2x2_24VMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA2x2_24VMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA2x2_24VDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA2x2_24VDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA2x2_24VDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA2x2_24VDiagErrorMessage. Errors are numbered from 1 to wtWebioEA2x2_24VDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA2x2_24VDiagErrorMessage.')
wtWebioEA2x2_24VDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagErrorMessage.setDescription('Using wtWebioEA2x2_24VDiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA2x2_24VDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2_24VDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA2x2_24VAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2_24VAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 30) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2_24VDiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA2x2_24VDiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA2x2_24VAlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VInputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputs.setDescription('Number of idependent inputs.')
wtWebioEA2x2ERP_24VOutputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputs.setDescription('Number of idependent outputs.')
wtWebioEA2x2ERP_24VInputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputTable.setDescription('List of input indices.')
wtWebioEA2x2ERP_24VInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VInputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputEntry.setDescription('Number of the inputs.')
wtWebioEA2x2ERP_24VInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputNo.setDescription('Index numbers of the inputs.')
wtWebioEA2x2ERP_24VInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputCounter.setDescription('Value of the input counter.')
wtWebioEA2x2ERP_24VInputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputCounterClear.setDescription('Clears the input counter after returning its value.')
wtWebioEA2x2ERP_24VInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VInputState-OFF", 0), ("wtWebioEA2x2ERP_24VInputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputState.setDescription('Value of a single input bit.')
wtWebioEA2x2ERP_24VInputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1')
wtWebioEA2x2ERP_24VOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 5), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputTable.setDescription('List of output indices.')
wtWebioEA2x2ERP_24VOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputEntry.setDescription('Number of the outputs.')
wtWebioEA2x2ERP_24VOutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputNo.setDescription('Output number.')
wtWebioEA2x2ERP_24VOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VOutputState-OFF", 0), ("wtWebioEA2x2ERP_24VOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputState.setDescription('Value of a single output bit.')
wtWebioEA2x2ERP_24VOutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1 Bit 2-7: ungenutzt')
wtWebioEA2x2ERP_24VSetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1')
wtWebioEA2x2ERP_24VSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebioEA2x2ERP_24VSessCntrlLogout. When read this variable provides a string of length zero.')
wtWebioEA2x2ERP_24VSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VSessCntrl-NoSession", 0), ("wtWebioEA2x2ERP_24VSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebioEA2x2ERP_24VSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebioEA2x2ERP_24VSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebioEA2x2ERP_24VSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebioEA2x2ERP_24VDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebioEA2x2ERP_24VDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebioEA2x2ERP_24VDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebioEA2x2ERP_24VDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebioEA2x2ERP_24VTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebioEA2x2ERP_24VTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebioEA2x2ERP_24VTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebioEA2x2ERP_24VStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebioEA2x2ERP_24VStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebioEA2x2ERP_24VStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebioEA2x2ERP_24VStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VStartMonth-January", 1), ("wtWebioEA2x2ERP_24VStartMonth-February", 2), ("wtWebioEA2x2ERP_24VStartMonth-March", 3), ("wtWebioEA2x2ERP_24VStartMonth-April", 4), ("wtWebioEA2x2ERP_24VStartMonth-May", 5), ("wtWebioEA2x2ERP_24VStartMonth-June", 6), ("wtWebioEA2x2ERP_24VStartMonth-July", 7), ("wtWebioEA2x2ERP_24VStartMonth-August", 8), ("wtWebioEA2x2ERP_24VStartMonth-September", 9), ("wtWebioEA2x2ERP_24VStartMonth-October", 10), ("wtWebioEA2x2ERP_24VStartMonth-November", 11), ("wtWebioEA2x2ERP_24VStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebioEA2x2ERP_24VStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VStartMode-first", 1), ("wtWebioEA2x2ERP_24VStartMode-second", 2), ("wtWebioEA2x2ERP_24VStartMode-third", 3), ("wtWebioEA2x2ERP_24VStartMode-fourth", 4), ("wtWebioEA2x2ERP_24VStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebioEA2x2ERP_24VStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VStartWday-Sunday", 1), ("wtWebioEA2x2ERP_24VStartWday-Monday", 2), ("wtWebioEA2x2ERP_24VStartWday-Tuesday", 3), ("wtWebioEA2x2ERP_24VStartWday-Thursday", 4), ("wtWebioEA2x2ERP_24VStartWday-Wednesday", 5), ("wtWebioEA2x2ERP_24VStartWday-Friday", 6), ("wtWebioEA2x2ERP_24VStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebioEA2x2ERP_24VStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA2x2ERP_24VStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebioEA2x2ERP_24VStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VStopMonth-January", 1), ("wtWebioEA2x2ERP_24VStopMonth-February", 2), ("wtWebioEA2x2ERP_24VStopMonth-March", 3), ("wtWebioEA2x2ERP_24VStopMonth-April", 4), ("wtWebioEA2x2ERP_24VStopMonth-May", 5), ("wtWebioEA2x2ERP_24VStopMonth-June", 6), ("wtWebioEA2x2ERP_24VStopMonth-July", 7), ("wtWebioEA2x2ERP_24VStopMonth-August", 8), ("wtWebioEA2x2ERP_24VStopMonth-September", 9), ("wtWebioEA2x2ERP_24VStopMonth-October", 10), ("wtWebioEA2x2ERP_24VStopMonth-November", 11), ("wtWebioEA2x2ERP_24VStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebioEA2x2ERP_24VStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VStopMode-first", 1), ("wtWebioEA2x2ERP_24VStopMode-second", 2), ("wtWebioEA2x2ERP_24VStopMode-third", 3), ("wtWebioEA2x2ERP_24VStopMode-fourth", 4), ("wtWebioEA2x2ERP_24VStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebioEA2x2ERP_24VStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VStopWday-Sunday", 1), ("wtWebioEA2x2ERP_24VStopWday-Monday", 2), ("wtWebioEA2x2ERP_24VStopWday-Tuesday", 3), ("wtWebioEA2x2ERP_24VStopWday-Thursday", 4), ("wtWebioEA2x2ERP_24VStopWday-Wednesday", 5), ("wtWebioEA2x2ERP_24VStopWday-Friday", 6), ("wtWebioEA2x2ERP_24VStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebioEA2x2ERP_24VStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA2x2ERP_24VStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebioEA2x2ERP_24VTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebioEA2x2ERP_24VTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebioEA2x2ERP_24VTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebioEA2x2ERP_24VTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebioEA2x2ERP_24VClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebioEA2x2ERP_24VClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebioEA2x2ERP_24VClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebioEA2x2ERP_24VClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebioEA2x2ERP_24VClockMonth-January", 1), ("wtWebioEA2x2ERP_24VClockMonth-February", 2), ("wtWebioEA2x2ERP_24VClockMonth-March", 3), ("wtWebioEA2x2ERP_24VClockMonth-April", 4), ("wtWebioEA2x2ERP_24VClockMonth-May", 5), ("wtWebioEA2x2ERP_24VClockMonth-June", 6), ("wtWebioEA2x2ERP_24VClockMonth-July", 7), ("wtWebioEA2x2ERP_24VClockMonth-August", 8), ("wtWebioEA2x2ERP_24VClockMonth-September", 9), ("wtWebioEA2x2ERP_24VClockMonth-October", 10), ("wtWebioEA2x2ERP_24VClockMonth-November", 11), ("wtWebioEA2x2ERP_24VClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebioEA2x2ERP_24VClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebioEA2x2ERP_24VIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VIpAddress.setDescription('IP address of the Webio')
wtWebioEA2x2ERP_24VSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSubnetMask.setDescription('Subnet mask of the Webio')
wtWebioEA2x2ERP_24VGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VGateway.setDescription('Gateway of the Webio')
wtWebioEA2x2ERP_24VDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebioEA2x2ERP_24VDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebioEA2x2ERP_24VAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtWebioEA2x2ERP_24VStartup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStartup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VStartup.setDescription('Binary coded start page, more than one page must not be selected: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2: user.htm Bit 1: home.htm Bit 0: index.htm')
wtWebioEA2x2ERP_24VGetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VGetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VGetHeaderEnable.setDescription('If bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device (Header) or a HTTP header (HTTP): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebioEA2x2ERP_24VHttpInputTrigger = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VHttpInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VHttpInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2ERP_24VHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebioEA2x2ERP_24VMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailAdName.setDescription('Device name for mail administration.')
wtWebioEA2x2ERP_24VMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailReply.setDescription('Reply address for the mail server.')
wtWebioEA2x2ERP_24VMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailServer.setDescription('Name or IP address of the mail server.')
wtWebioEA2x2ERP_24VMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebioEA2x2ERP_24VMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebioEA2x2ERP_24VMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebioEA2x2ERP_24VMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailAuthPassword.setDescription('Authentication password.')
wtWebioEA2x2ERP_24VMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebioEA2x2ERP_24VSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebioEA2x2ERP_24VSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpCommunityStringRead.setDescription('Community string read only')
wtWebioEA2x2ERP_24VSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebioEA2x2ERP_24VSnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebioEA2x2ERP_24VSnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtWebioEA2x2ERP_24VUdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VUdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VUdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebioEA2x2ERP_24VUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebioEA2x2ERP_24VUdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VUdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VUdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtWebioEA2x2ERP_24VBinaryModeCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryModeCount.setDescription('Number of independent binary channels.')
wtWebioEA2x2ERP_24VBinaryIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryIfTable.setDescription('Table of indices.')
wtWebioEA2x2ERP_24VBinaryIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryIfEntry.setDescription('Indices of the binary channels.')
wtWebioEA2x2ERP_24VBinaryModeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryModeNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryModeNo.setDescription('Number of the binary channel.')
wtWebioEA2x2ERP_24VBinaryTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTable.setDescription('Table of properties of the binary mode.')
wtWebioEA2x2ERP_24VBinaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VBinaryModeNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryEntry.setDescription('Binary properties.')
wtWebioEA2x2ERP_24VBinaryOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryOperationMode.setDescription('Selection of the operation mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : UDP Peer Bit 1 : TCP Client Bit 0 : TCP Server')
wtWebioEA2x2ERP_24VBinaryTcpServerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpServerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpServerLocalPort.setDescription('Local TCP port for data exchange in this server mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2ERP_24VBinaryTcpServerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpServerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpServerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2ERP_24VBinaryTcpServerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpServerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpServerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 4-7: unused Bit 3 : OPC Device Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2ERP_24VBinaryTcpClientLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientLocalPort.setDescription('Local TCP port for data exchange in this client mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2ERP_24VBinaryTcpClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientServerPort.setDescription('Port number of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server port to zero.')
wtWebioEA2x2ERP_24VBinaryTcpClientServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientServerIpAddr.setDescription('Ip address of the server. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the server IP address to 0.0.0.0.')
wtWebioEA2x2ERP_24VBinaryTcpClientServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientServerPassword.setDescription('Building a connection may be protected by the administrator password of the server. Enter the server password to establish the connection, if a server administrator password exists.')
wtWebioEA2x2ERP_24VBinaryTcpClientInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientInactivity.setDescription('Connection timeout in 100ms. If no data are exchanged within the specified time, the device closes the connection to the server. The value 0 deactivates the timer. Using the Box2Box mode this function is disabled.')
wtWebioEA2x2ERP_24VBinaryTcpClientInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2ERP_24VBinaryTcpClientInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured application. A interval of zero stopps the periodical sending.')
wtWebioEA2x2ERP_24VBinaryTcpClientApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2ERP_24VBinaryUdpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerLocalPort.setDescription('Local UDP port for data exchange in this peer to peer mode. This port number must be unique within the device. Reserved port number must not be used (refere to the manual).')
wtWebioEA2x2ERP_24VBinaryUdpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerRemotePort.setDescription('Port number of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote port to zero.')
wtWebioEA2x2ERP_24VBinaryUdpPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerRemoteIpAddr.setDescription('Ip address of the remote device. A complete set of port number, IP address and a valid input/output mask starts this mode. No data exchange take place when setting the remote device IP address to 0.0.0.0.')
wtWebioEA2x2ERP_24VBinaryUdpPeerInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerInputTrigger.setDescription('Every change on the inputs causes their state to be transmitted to the remote device. To minimize data traffic, individual inputs may be exempted from this rule. Nevertheless every transmission will contain all input bits. If a bit is set (1), a change of state on the corresponding input triggers a transmission. If the bit is not set (0), no transmission takes place. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital inputs 0-1')
wtWebioEA2x2ERP_24VBinaryUdpPeerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerInterval.setDescription('Configurable interval with a 100ms base, in which the Webio device sends data to the configured remote device. A interval of zero stopps the periodical sending.')
wtWebioEA2x2ERP_24VBinaryUdpPeerApplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerApplicationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryUdpPeerApplicationMode.setDescription('Selection of the application mode: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : Box2Box Slave Bit 1 : Compatible 50xxx Bit 0 : Default')
wtWebioEA2x2ERP_24VBinaryConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryConnectedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryConnectedPort.setDescription('Port number of the remote device, after connection has been established. In case of no connection or missing port informations a zero will be read.')
wtWebioEA2x2ERP_24VBinaryConnectedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryConnectedIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryConnectedIpAddr.setDescription('IP address of the remote device, after connection has been established. In case of no connection or missing port informations 0.0.0.0 will be read.')
wtWebioEA2x2ERP_24VBinaryTcpServerClientHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpServerClientHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpServerClientHttpPort.setDescription('HTTP port number of the remote device at TCP Server Mode. If an mailfunction occurs status informations will be send to this port. Not used at mode Compatible 50xxx.')
wtWebioEA2x2ERP_24VBinaryTcpClientServerHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientServerHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VBinaryTcpClientServerHttpPort.setDescription('HTTP port number of the remote device at TCP Client Mode. In the operating mode Box2Box connection status informations will be exchanged through this port.')
wtWebioEA2x2ERP_24VSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebioEA2x2ERP_24VSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebioEA2x2ERP_24VSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebioEA2x2ERP_24VSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebioEA2x2ERP_24VFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebioEA2x2ERP_24VFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA2x2ERP_24VFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPUserName.setDescription('FTP Loggin: user name.')
wtWebioEA2x2ERP_24VFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPPassword.setDescription('FTP Loggin: user password.')
wtWebioEA2x2ERP_24VFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPAccount.setDescription('FTP Loggin: name of account.')
wtWebioEA2x2ERP_24VFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebioEA2x2ERP_24VFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebioEA2x2ERP_24VWayBackEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 10, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackEnable.setDescription('Set Bit 0 to enable WayBack: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : WayBack enable')
wtWebioEA2x2ERP_24VWayBackServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebioEA2x2ERP_24VWayBackFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackFTPPassword.setDescription('WayBack FTP Loggin: Password of the user.')
wtWebioEA2x2ERP_24VWayBackFTPResponse = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 10, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackFTPResponse.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackFTPResponse.setDescription('WayBack FTP response: return message after login.')
wtWebioEA2x2ERP_24VWayBackFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 3, 10, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackFTPTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VWayBackFTPTimeOut.setDescription('WayBack FTP Timeout: a request must be finished within this periode of time.')
wtWebioEA2x2ERP_24VOutputModeTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 4, 1), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputModeTable.setDescription('Table of output mode configurations dependent on the output indices.')
wtWebioEA2x2ERP_24VOutputModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputModeEntry.setDescription('Output mode configurations of the individual outputs.')
wtWebioEA2x2ERP_24VOutputModeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputModeBit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputModeBit.setDescription('This binary coded output mode defines the individual operation mode for any output. More than one mode must not be selected. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 6-7: unused Bit 5 : Logic Bit 4 : Binary 2 Bit 3 : Binary 1 Bit 2 : SNMP Bit 1 : UDP ASCII Bit 0 : HTTP')
wtWebioEA2x2ERP_24VSafetyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSafetyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VSafetyTimeout.setDescription('After this period of time (multiple of 100ms) without receiving data outputs switch to their Safety States. For each output a independend safety state could be defined.')
wtWebioEA2x2ERP_24VLoadControlEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VLoadControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VLoadControlEnable.setDescription('Here the function of automatic load control can be enabled. All output were tested in pairs (0-1). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Load Control enable')
wtWebioEA2x2ERP_24VPowerSupplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPowerSupplyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPowerSupplyEnable.setDescription('Setting this enable bit turns on the intarnal 24V power supply of the outputs. All currents out must not exceed 150mA. At overcurrent condition the power supply will be shut down automatically. To reset the ocvercurrent protection circuit write 1 into wtWebioEA2x2DiagErrorClear. Internal power supply is a feature of 57638 only. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Power Supply enable')
wtWebioEA2x2ERP_24VAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmCount.setDescription('Number of independent alarms.')
wtWebioEA2x2ERP_24VAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmIfTable.setDescription('List of alarm indices.')
wtWebioEA2x2ERP_24VAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebioEA2x2ERP_24VAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmNo.setDescription('Numbers of the alarms.')
wtWebioEA2x2ERP_24VAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebioEA2x2ERP_24VAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebioEA2x2ERP_24VAlarmInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital inputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the inputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital inputs 0-1 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Inputs masked with the any bit trigger with any change of the corresponding input bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: ANY bits of digital inputs 0-1')
wtWebioEA2x2ERP_24VAlarmOutputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmOutputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmOutputTrigger.setDescription('This variable allows setting of individual output trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1 OCTETS 9-12 contain the ANY bit (1=ON, 0=OFF). Outputs masked with the any bit trigger with any change of the corresponding output bit. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: ANY bits of digital outputs 0-1')
wtWebioEA2x2ERP_24VAlarmSystemTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSystemTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSystemTrigger.setDescription('Binary coded trigger conditions: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Warm Start Bit 2 : Cold Start Bit 1 : Timer Bit 0 : Load Control')
wtWebioEA2x2ERP_24VAlarmMaxCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMaxCounterValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMaxCounterValue.setDescription('This variable configures a max. counter value. If an input counter value exceeds this max. value, the corresponding alarm is triggered. Input counters with its mask bit unset in wtWebioEA2x2ERP_24VAlarmInputTrigger are not considered.')
wtWebioEA2x2ERP_24VAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmInterval.setDescription('Send interval for alarm messages.')
wtWebioEA2x2ERP_24VAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtWebioEA2x2ERP_24VAlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebioEA2x2ERP_24VAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebioEA2x2ERP_24VAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA2x2ERP_24VAlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtWebioEA2x2ERP_24VAlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtWebioEA2x2ERP_24VAlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA2x2ERP_24VAlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtWebioEA2x2ERP_24VAlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtWebioEA2x2ERP_24VAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA2x2ERP_24VAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtWebioEA2x2ERP_24VAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtWebioEA2x2ERP_24VAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA2x2ERP_24VAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebioEA2x2ERP_24VAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA2x2ERP_24VAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebioEA2x2ERP_24VAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebioEA2x2ERP_24VAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebioEA2x2ERP_24VAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebioEA2x2ERP_24VAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebioEA2x2ERP_24VAlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtWebioEA2x2ERP_24VAlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtWebioEA2x2ERP_24VAlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtWebioEA2x2ERP_24VAlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtWebioEA2x2ERP_24VAlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebioEA2x2ERP_24VAlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtWebioEA2x2ERP_24VLoadControlView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VLoadControlView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VLoadControlView.setDescription('Here the result of automatic load control can be read. All output were tested in pairs (0-1). If an error occours at one output, both output of an pair will be switched of. For a properly function of the load control each output of a pair have to has a load. If there is no existing load, a pull down resistor can be used. Outputs with no load are automaticly detected and not part of the control function. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0-1: outputs 0-1.')
wtWebioEA2x2ERP_24VLCShutDownView = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 1, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VLCShutDownView.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VLCShutDownView.setDescription('Here the result of the automatic load control shut down can be read. All outputs remain switched of, until a zero is written into this variable. But previously all loads should be inspected. High current (short circuit), a broken supply line or a defect load (i.e. lamp) may be a shut down reason. If no load is detected, the load control unit suspend automaticly the control of the corresponding output pair. All controlled output could be identified reading the variable wtWebioEA2x2ERP_24VLoadControlEnable. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an ouput. Bit 0 corresponds to the LSB. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0-1: outputs 0-1.')
wtWebioEA2x2ERP_24VInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputPortTable.setDescription('List of settings depending on the input number.')
wtWebioEA2x2ERP_24VInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VInputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VInputPortEntry.setDescription('Input parameter for the individual inputs.')
wtWebioEA2x2ERP_24VPortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputName.setDescription('Name of the input.')
wtWebioEA2x2ERP_24VPortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputText.setDescription('Description of the input.')
wtWebioEA2x2ERP_24VPortInputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputMode.setDescription('Binary coded modes: Selecting short pulse detection enable by setting the corresponding bit to 1 enables interrupt support for counting. Only positive edges are accepted as trigger source. The maximum counting frequenz equals 2000 Hz. This mode is available for inputs 0-3 only. Selecting counter clear on read by setting the corresponding bit to 1 enables the corresponding counter to be cleared automatically every time it is read, except HTTP reading with user rights. The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. Selection for input 0-1: OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Bidirectional counter enable Bit 2 : Counter clear on read Bit 1 : Change detection enable (default) Bit 0 : Short Pulse detection enable')
wtWebioEA2x2ERP_24VPortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtWebioEA2x2ERP_24VPortInputBicountPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputBicountPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputBicountPulsePolarity.setDescription('This value defines the polarity of the input pulse. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA2x2ERP_24VPortInputBicountInactivTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputBicountInactivTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortInputBicountInactivTimeout.setDescription('Pulse chains with a duration shorter than here specified (in 1/10 sek), are ignored.')
wtWebioEA2x2ERP_24VOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2), )
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputPortTable.setDescription('List of settings depending on the output number.')
wtWebioEA2x2ERP_24VOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VOutputNo"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VOutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtWebioEA2x2ERP_24VPortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortOutputName.setDescription('Name of the output.')
wtWebioEA2x2ERP_24VPortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortOutputText.setDescription('Description of the output.')
wtWebioEA2x2ERP_24VPortOutputGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortOutputGroupMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortOutputGroupMode.setDescription('It is possible to connect outputs together to increase the output current. This could be done by connecting 2 or 4 outputs in a group together. All bits of such a group has to be set all together in the same way. This variable configures this group scheme. If one ouput bit of a group is set, all other output bits of the same group will be set in the same manner. More than one configuration must not be selected. Selection for ouputs 0-1: Octet 1: unused Octet 2: unused Octet 3: unused OCTET 4: Bit 0 : ouputs 0,1 disconnected (default) Bit 1 : ouputs 0+1 connected')
wtWebioEA2x2ERP_24VPortOutputSafetyState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortOutputSafetyState.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortOutputSafetyState.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 1-7: unused Bit 0 : Mask for digital output OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs to be changed should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 1-7: unused Bit 0 : Level of digital output')
wtWebioEA2x2ERP_24VPortLogicInputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortLogicInputMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortLogicInputMask.setDescription('Selecting one of these inputs by setting the corresponding bit to 1 enables the logic function for the output identified by the index within this table. The calculation take place in 4 steps: 1. Selecting inputs (wtWebioEA2x2ERP_24VPortLogicInputMask) 2. Inverting inputs if necessary (wtWebioEA2x2ERP_24VPortLogicInputInverter) 3. Logical combination (wtWebioEA2x2ERP_24VPortLogicFunction) 4. Inverting the result if necessary (wtWebioEA2x2ERP_24VPortLogicOutputInverter) OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-1 : inputs 0-1')
wtWebioEA2x2ERP_24VPortLogicInputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortLogicInputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortLogicInputInverter.setDescription('Every input bit selected here will be inverted. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0-1 : inputs 0-1')
wtWebioEA2x2ERP_24VPortLogicFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortLogicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortLogicFunction.setDescription('This determines the logic function. No more than one function may be selected. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : logic function OR (default) Bit 1 : logic function AND Bit 2-7 : unused')
wtWebioEA2x2ERP_24VPortLogicOutputInverter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortLogicOutputInverter.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortLogicOutputInverter.setDescription('The logical operation result could be inverteted by setting the corresponding bit to 1. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : Output Inverter enable Bit 1-7 : unused')
wtWebioEA2x2ERP_24VPortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtWebioEA2x2ERP_24VPortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VPortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtWebioEA2x2ERP_24VPortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtWebioEA2x2ERP_24VMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfName.setDescription('Manufacturer company name')
wtWebioEA2x2ERP_24VMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfAddr.setDescription('Manufacturer address.')
wtWebioEA2x2ERP_24VMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfHotline.setDescription('Manufacturer hotline.')
wtWebioEA2x2ERP_24VMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfInternet.setDescription('Manufacturer Internet address.')
wtWebioEA2x2ERP_24VMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebioEA2x2ERP_24VDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebioEA2x2ERP_24VDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebioEA2x2ERP_24VDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebioEA2x2ERP_24VDiagErrorMessage. Errors are numbered from 1 to wtWebioEA2x2ERP_24VDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebioEA2x2ERP_24VDiagErrorMessage.')
wtWebioEA2x2ERP_24VDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagErrorMessage.setDescription('Using wtWebioEA2x2ERP_24VDiagErrorIndex as an index, the appropriate message is available.')
wtWebioEA2x2ERP_24VDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebioEA2x2ERP_24VAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtWebioEA2x2ERP_24VAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 31) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VDiagErrorIndex"), ("Webio-Digital-MIB-US", "wtWebioEA2x2ERP_24VDiagErrorMessage"))
if mibBuilder.loadTexts: wtWebioEA2x2ERP_24VAlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VInputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VInputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputs.setDescription('Number of idependent inputs.')
wtIpWatcher_24VOutputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VOutputs.setDescription('Number of idependent outputs.')
wtIpWatcher_24VInputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 3), )
if mibBuilder.loadTexts: wtIpWatcher_24VInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputTable.setDescription('List of input indices.')
wtIpWatcher_24VInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VInputNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputEntry.setDescription('Number of the inputs.')
wtIpWatcher_24VInputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VInputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputNo.setDescription('Index numbers of the inputs.')
wtIpWatcher_24VInputCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VInputCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputCounter.setDescription('Value of the input counter.')
wtIpWatcher_24VInputCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VInputCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputCounterClear.setDescription('Clears the input counter after returning its value.')
wtIpWatcher_24VInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcher_24VInputState-OFF", 0), ("wtIpWatcher_24VInputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VInputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputState.setDescription('Value of a single input bit.')
wtIpWatcher_24VInputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1')
wtIpWatcher_24VOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 5), )
if mibBuilder.loadTexts: wtIpWatcher_24VOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VOutputTable.setDescription('List of output indices.')
wtIpWatcher_24VOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VOutputNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VOutputEntry.setDescription('Number of the outputs.')
wtIpWatcher_24VOutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VOutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VOutputNo.setDescription('Output number.')
wtIpWatcher_24VOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcher_24VOutputState-OFF", 0), ("wtIpWatcher_24VOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VOutputState.setDescription('Value of a single output bit.')
wtIpWatcher_24VOutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VOutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VOutputValue.setDescription('This variable is used to read and write the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1 Bit 2-7: ungenutzt')
wtIpWatcher_24VSetOutput = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSetOutput.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSetOutput.setDescription('This variable allows setting of individual digital outputs. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. The first two OCTETS contain the mask which determines which of the outputs are to be set (corresponding bit = 1) and which outputs are to remain unchanged (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1')
wtIpWatcher_24VAlarmOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 8), )
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmOutputTable.setDescription('List of alarm indices..')
wtIpWatcher_24VAlarmOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 8, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmOutputEntry.setDescription('Index reference.')
wtIpWatcher_24VAlarmOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcher_24VAlarmOutputState-OFF", 0), ("wtIpWatcher_24VAlarmOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmOutputState.setDescription('State of the alarm.')
wtIpWatcher_24VAlarmTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcher_24VAlarmTriggerState-OFF", 0), ("wtIpWatcher_24VAlarmTriggerState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTriggerState.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTriggerState.setDescription('State of the trigger condition.')
wtIpWatcher_24VSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtIpWatcher_24VSessCntrlLogout. When read this variable provides a string of length zero.')
wtIpWatcher_24VSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtIpWatcher_24VSessCntrl-NoSession", 0), ("wtIpWatcher_24VSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtIpWatcher_24VSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtIpWatcher_24VSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtIpWatcher_24VSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtIpWatcher_24VDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDeviceName.setDescription('Name of the Webio, which is user definable.')
wtIpWatcher_24VDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDeviceText.setDescription('Description of the Webio, which is user definable.')
wtIpWatcher_24VDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtIpWatcher_24VDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtIpWatcher_24VTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtIpWatcher_24VTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtIpWatcher_24VTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtIpWatcher_24VStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtIpWatcher_24VStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtIpWatcher_24VStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtIpWatcher_24VStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtIpWatcher_24VStartMonth-January", 1), ("wtIpWatcher_24VStartMonth-February", 2), ("wtIpWatcher_24VStartMonth-March", 3), ("wtIpWatcher_24VStartMonth-April", 4), ("wtIpWatcher_24VStartMonth-May", 5), ("wtIpWatcher_24VStartMonth-June", 6), ("wtIpWatcher_24VStartMonth-July", 7), ("wtIpWatcher_24VStartMonth-August", 8), ("wtIpWatcher_24VStartMonth-September", 9), ("wtIpWatcher_24VStartMonth-October", 10), ("wtIpWatcher_24VStartMonth-November", 11), ("wtIpWatcher_24VStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtIpWatcher_24VStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtIpWatcher_24VStartMode-first", 1), ("wtIpWatcher_24VStartMode-second", 2), ("wtIpWatcher_24VStartMode-third", 3), ("wtIpWatcher_24VStartMode-fourth", 4), ("wtIpWatcher_24VStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtIpWatcher_24VStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtIpWatcher_24VStartWday-Sunday", 1), ("wtIpWatcher_24VStartWday-Monday", 2), ("wtIpWatcher_24VStartWday-Tuesday", 3), ("wtIpWatcher_24VStartWday-Thursday", 4), ("wtIpWatcher_24VStartWday-Wednesday", 5), ("wtIpWatcher_24VStartWday-Friday", 6), ("wtIpWatcher_24VStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtIpWatcher_24VStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtIpWatcher_24VStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtIpWatcher_24VStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtIpWatcher_24VStopMonth-January", 1), ("wtIpWatcher_24VStopMonth-February", 2), ("wtIpWatcher_24VStopMonth-March", 3), ("wtIpWatcher_24VStopMonth-April", 4), ("wtIpWatcher_24VStopMonth-May", 5), ("wtIpWatcher_24VStopMonth-June", 6), ("wtIpWatcher_24VStopMonth-July", 7), ("wtIpWatcher_24VStopMonth-August", 8), ("wtIpWatcher_24VStopMonth-September", 9), ("wtIpWatcher_24VStopMonth-October", 10), ("wtIpWatcher_24VStopMonth-November", 11), ("wtIpWatcher_24VStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtIpWatcher_24VStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtIpWatcher_24VStopMode-first", 1), ("wtIpWatcher_24VStopMode-second", 2), ("wtIpWatcher_24VStopMode-third", 3), ("wtIpWatcher_24VStopMode-fourth", 4), ("wtIpWatcher_24VStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtIpWatcher_24VStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtIpWatcher_24VStopWday-Sunday", 1), ("wtIpWatcher_24VStopWday-Monday", 2), ("wtIpWatcher_24VStopWday-Tuesday", 3), ("wtIpWatcher_24VStopWday-Thursday", 4), ("wtIpWatcher_24VStopWday-Wednesday", 5), ("wtIpWatcher_24VStopWday-Friday", 6), ("wtIpWatcher_24VStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtIpWatcher_24VStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtIpWatcher_24VStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtIpWatcher_24VTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtIpWatcher_24VTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtIpWatcher_24VTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtIpWatcher_24VTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtIpWatcher_24VClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtIpWatcher_24VClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtIpWatcher_24VClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtIpWatcher_24VClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtIpWatcher_24VClockMonth-January", 1), ("wtIpWatcher_24VClockMonth-February", 2), ("wtIpWatcher_24VClockMonth-March", 3), ("wtIpWatcher_24VClockMonth-April", 4), ("wtIpWatcher_24VClockMonth-May", 5), ("wtIpWatcher_24VClockMonth-June", 6), ("wtIpWatcher_24VClockMonth-July", 7), ("wtIpWatcher_24VClockMonth-August", 8), ("wtIpWatcher_24VClockMonth-September", 9), ("wtIpWatcher_24VClockMonth-October", 10), ("wtIpWatcher_24VClockMonth-November", 11), ("wtIpWatcher_24VClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtIpWatcher_24VClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtIpWatcher_24VIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpAddress.setDescription('IP address of the Webio')
wtIpWatcher_24VSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSubnetMask.setDescription('Subnet mask of the Webio')
wtIpWatcher_24VGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VGateway.setDescription('Gateway of the Webio')
wtIpWatcher_24VDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtIpWatcher_24VDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtIpWatcher_24VAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtIpWatcher_24VHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtIpWatcher_24VMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMailAdName.setDescription('Device name for mail administration.')
wtIpWatcher_24VMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMailReply.setDescription('Reply address for the mail server.')
wtIpWatcher_24VMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMailServer.setDescription('Name or IP address of the mail server.')
wtIpWatcher_24VMailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtIpWatcher_24VMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtIpWatcher_24VMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMailAuthUser.setDescription('Name of the user to be authenticated.')
wtIpWatcher_24VMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMailAuthPassword.setDescription('Authentication password.')
wtIpWatcher_24VMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtIpWatcher_24VSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtIpWatcher_24VSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpCommunityStringRead.setDescription('Community string read only')
wtIpWatcher_24VSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtIpWatcher_24VSnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtIpWatcher_24VSnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtIpWatcher_24VUdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VUdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VUdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtIpWatcher_24VUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtIpWatcher_24VUdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VUdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VUdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtIpWatcher_24VSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtIpWatcher_24VSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtIpWatcher_24VSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtIpWatcher_24VSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtIpWatcher_24VFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtIpWatcher_24VFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtIpWatcher_24VFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VFTPUserName.setDescription('FTP Loggin: user name.')
wtIpWatcher_24VFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VFTPPassword.setDescription('FTP Loggin: user password.')
wtIpWatcher_24VFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VFTPAccount.setDescription('FTP Loggin: name of account.')
wtIpWatcher_24VFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtIpWatcher_24VFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtIpWatcher_24VIpListCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VIpListCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListCount.setDescription('Number of Ip addresses.')
wtIpWatcher_24VIpListIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 2), )
if mibBuilder.loadTexts: wtIpWatcher_24VIpListIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListIfTable.setDescription('Table of inices.')
wtIpWatcher_24VIpListIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VIpListNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VIpListIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListIfEntry.setDescription('Table entry.')
wtIpWatcher_24VIpListNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VIpListNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListNo.setDescription('List number of this entry.')
wtIpWatcher_24VIpListTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 3), )
if mibBuilder.loadTexts: wtIpWatcher_24VIpListTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListTable.setDescription('List of ip addresses.')
wtIpWatcher_24VIpListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VIpListNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VIpListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListEntry.setDescription('List entry.')
wtIpWatcher_24VIpListName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VIpListName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListName.setDescription('Name or IP address.')
wtIpWatcher_24VIpListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VIpListPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListPort.setDescription('Port number, zero in the case of broadcast or Ping.')
wtIpWatcher_24VIpListService = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VIpListService.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListService.setDescription('Binary coded scan mode, only one mode can be selected at a particular time: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Ping enable Bit 1-7: unused')
wtIpWatcher_24VIpListEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VIpListEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: enabled in Alarm 1 Bit 1: enabled in Alarm 2 Bit 2: enabled in Alarm 3 Bit 3: enabled in Alarm 4 Bit 4-7: unused')
wtIpWatcher_24VIpListAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 3, 11, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VIpListAlias.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VIpListAlias.setDescription('Alias Name')
wtIpWatcher_24VPowerSupplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VPowerSupplyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VPowerSupplyEnable.setDescription('Setting this enable bit turns on the intarnal 24V power supply of the outputs. All currents out must not exceed 150mA. At overcurrent condition the power supply will be shut down automatically. To reset the ocvercurrent protection circuit write 1 into wtIpWatcher_24VDiagErrorClear. Internal power supply is a feature of 57655 only. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Power Supply enable')
wtIpWatcher_24VAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmCount.setDescription('Number of independent alarms.')
wtIpWatcher_24VAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmIfTable.setDescription('List of alarm indices.')
wtIpWatcher_24VAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmIfEntry.setDescription('Numbers of the alarms.')
wtIpWatcher_24VAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmNo.setDescription('Numbers of the alarms.')
wtIpWatcher_24VAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTable.setDescription('List of settings depending on the alarm number.')
wtIpWatcher_24VAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtIpWatcher_24VAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmInterval.setDescription('Send interval for alarm messages.')
wtIpWatcher_24VAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtIpWatcher_24VAlarmMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtIpWatcher_24VAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtIpWatcher_24VAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtIpWatcher_24VAlarmSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtIpWatcher_24VAlarmSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpTrapText.setDescription('This text appears in the trap body.')
wtIpWatcher_24VAlarmUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtIpWatcher_24VAlarmUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtIpWatcher_24VAlarmUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpText.setDescription('This text appears in the UDP trap body.')
wtIpWatcher_24VAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtIpWatcher_24VAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtIpWatcher_24VAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpText.setDescription('This text appears in the TCP trap body.')
wtIpWatcher_24VAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtIpWatcher_24VAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtIpWatcher_24VAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtIpWatcher_24VAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtIpWatcher_24VAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtIpWatcher_24VAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtIpWatcher_24VAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtIpWatcher_24VAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtIpWatcher_24VAlarmMailReleaseSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailReleaseSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailReleaseSubject.setDescription('Subject line for alarm mail.')
wtIpWatcher_24VAlarmMailReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailReleaseText.setDescription('Release Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtIpWatcher_24VAlarmSnmpTrapReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpTrapReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpTrapReleaseText.setDescription('This text appears in the trap body.')
wtIpWatcher_24VAlarmUdpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpReleaseText.setDescription('This text appears in the UDP trap body.')
wtIpWatcher_24VAlarmTcpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpReleaseText.setDescription('This text appears in the TCP trap body.')
wtIpWatcher_24VAlarmSyslogReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogReleaseText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtIpWatcher_24VAlarmFtpReleaseText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpReleaseText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpReleaseText.setDescription('Message text to store on the FTP server.')
wtIpWatcher_24VAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmName.setDescription('Name of the alarm.')
wtIpWatcher_24VAlarmGlobalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmGlobalEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmGlobalEnable.setDescription('Binary coded alarm activation: Die OCTETS werden bitweise interpretiert. Bit 0 entspricht dem LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 1-7: unused Bit 0 : Alarm enable')
wtIpWatcher_24VAlarmCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 35), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmCounterClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmCounterClear.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Counter clear on Alarm acknowledge Bit 0 : Counter clear on Alarm send')
wtIpWatcher_24VAlarmAckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 36), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmAckEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmAckEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 2-7: unused Bit 1 : Software acknowledge enable Bit 0 : Hardware acknowledge enable')
wtIpWatcher_24VAlarmAckPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmAckPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmAckPort.setDescription('Number of the input, which clears the alarm (1-6).')
wtIpWatcher_24VAlarmSetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSetPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSetPort.setDescription('Number of the output, which will be set by this alarm (1-6). The configuration of pulse mode and polarity defined in the port output section is used.')
wtIpWatcher_24VAlarmMailTrgClearSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 39), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailTrgClearSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailTrgClearSubject.setDescription('Subject line for alarm mail.')
wtIpWatcher_24VAlarmMailTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 40), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailTrgClearText.setDescription('Alarm mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtIpWatcher_24VAlarmSnmpTrapTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 41), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpTrapTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpTrapTrgClearText.setDescription('This text appears in the trap body.')
wtIpWatcher_24VAlarmUdpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 42), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpTrgClearText.setDescription('This text appears in the UDP trap body.')
wtIpWatcher_24VAlarmTcpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 43), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpTrgClearText.setDescription('This text appears in the TCP trap body.')
wtIpWatcher_24VAlarmSyslogTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 44), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogTrgClearText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtIpWatcher_24VAlarmFtpTrgClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 45), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpTrgClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpTrgClearText.setDescription('Message text to store on the FTP server.')
wtIpWatcher_24VAlarmMailTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 46), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmMailTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcher_24VAlarmSnmpTrapTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 47), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpTrapTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSnmpTrapTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcher_24VAlarmUdpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 48), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmUdpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcher_24VAlarmTcpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 49), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTcpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcher_24VAlarmSyslogTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 50), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmSyslogTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcher_24VAlarmFtpTrapTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 51), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpTrapTxEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmFtpTrapTxEnable.setDescription('Binary coded options: The OCTETS are interpreted bit-by-bit. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 4-7: unused Bit 3 : Alarm OFF message enable Bit 2 : Trigger OFF message enable Bit 1 : Re-Trigger message enable Bit 0 : Alarm ON message enable')
wtIpWatcher_24VAlarmTriggerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTriggerCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmTriggerCount.setDescription('Alarm will be send if the trigger condition occours TriggerCount times.')
wtIpWatcher_24VAlarmPollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 1, 5, 3, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmPollingRate.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VAlarmPollingRate.setDescription('Time in seconds.')
wtIpWatcher_24VInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 1), )
if mibBuilder.loadTexts: wtIpWatcher_24VInputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputPortTable.setDescription('List of settings depending on the input number.')
wtIpWatcher_24VInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VInputNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VInputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VInputPortEntry.setDescription('Input parameter for the individual inputs.')
wtIpWatcher_24VPortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VPortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VPortInputName.setDescription('Name of the input.')
wtIpWatcher_24VPortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VPortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VPortInputText.setDescription('Description of the input.')
wtIpWatcher_24VPortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VPortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VPortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtIpWatcher_24VOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 2), )
if mibBuilder.loadTexts: wtIpWatcher_24VOutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VOutputPortTable.setDescription('List of settings depending on the output number.')
wtIpWatcher_24VOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtIpWatcher_24VOutputNo"))
if mibBuilder.loadTexts: wtIpWatcher_24VOutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VOutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtIpWatcher_24VPortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 2, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VPortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VPortOutputName.setDescription('Name of the output.')
wtIpWatcher_24VPortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VPortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VPortOutputText.setDescription('Description of the output.')
wtIpWatcher_24VPortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VPortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VPortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtIpWatcher_24VPortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VPortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VPortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtIpWatcher_24VPortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtIpWatcher_24VMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMfName.setDescription('Manufacturer company name')
wtIpWatcher_24VMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMfAddr.setDescription('Manufacturer address.')
wtIpWatcher_24VMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMfHotline.setDescription('Manufacturer hotline.')
wtIpWatcher_24VMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMfInternet.setDescription('Manufacturer Internet address.')
wtIpWatcher_24VMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtIpWatcher_24VDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDiagErrorCount.setDescription('Number of entries in the error memory.')
wtIpWatcher_24VDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtIpWatcher_24VDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtIpWatcher_24VDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtIpWatcher_24VDiagErrorMessage. Errors are numbered from 1 to wtIpWatcher_24VDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtIpWatcher_24VDiagErrorMessage.')
wtIpWatcher_24VDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtIpWatcher_24VDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDiagErrorMessage.setDescription('Using wtIpWatcher_24VDiagErrorIndex as an index, the appropriate message is available.')
wtIpWatcher_24VDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtIpWatcher_24VDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtIpWatcher_24VDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtIpWatcher_24VAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert9.setDescription('This SNMP trap is generated when Alarm 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert10.setDescription('This SNMP trap is generated when Alarm 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert11.setDescription('This SNMP trap is generated when Alarm 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert12.setDescription('This SNMP trap is generated when Alarm 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,71)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert13.setDescription('This SNMP trap is generated when Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,72)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert14.setDescription('This SNMP trap is generated when Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,73)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert15.setDescription('This SNMP trap is generated when Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,74)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert16.setDescription('This SNMP trap is generated when Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert17 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,75)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert17.setDescription('This SNMP trap is generated when Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert18 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,76)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert18.setDescription('This SNMP trap is generated when Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert19 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,77)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert19.setDescription('This SNMP trap is generated when Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert20 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,78)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert20.setDescription('This SNMP trap is generated when Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert21 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,79)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert21.setDescription('This SNMP trap is generated when Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert22 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,80)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert22.setDescription('This SNMP trap is generated when Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert23 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,81)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert23.setDescription('This SNMP trap is generated when Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert24 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,82)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapReleaseText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert24.setDescription('This SNMP trap is generated when Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert25 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,91)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert25.setDescription('This SNMP trap is generated when the trigger of the Alarm 1 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert26 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,92)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert26.setDescription('This SNMP trap is generated when the trigger of the Alarm 2 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert27 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,93)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert27.setDescription('This SNMP trap is generated when the trigger of the Alarm 3 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert28 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,94)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert28.setDescription('This SNMP trap is generated when the trigger of the Alarm 4 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert29 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,95)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert29.setDescription('This SNMP trap is generated when the trigger of the Alarm 5 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert30 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,96)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert30.setDescription('This SNMP trap is generated when the trigger of the Alarm 6 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert31 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,97)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert31.setDescription('This SNMP trap is generated when the trigger of the Alarm 7 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert32 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,98)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert32.setDescription('This SNMP trap is generated when the trigger of the Alarm 8 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert33 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,99)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert33.setDescription('This SNMP trap is generated when the trigger of the Alarm 9 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert34 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,100)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert34.setDescription('This SNMP trap is generated when the trigger of the Alarm 10 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert35 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,101)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert35.setDescription('This SNMP trap is generated when the trigger of the Alarm 11 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlert36 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,102)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VAlarmSnmpTrapTrgClearText"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlert36.setDescription('This SNMP trap is generated when the trigger of the Alarm 12 was released, SNMP trap enable is set and SNMP is enabled.')
wtIpWatcher_24VAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 32) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtIpWatcher_24VDiagErrorIndex"), ("Webio-Digital-MIB-US", "wtIpWatcher_24VDiagErrorMessage"))
if mibBuilder.loadTexts: wtIpWatcher_24VAlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Inputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2Inputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2Inputs.setDescription('Number of idependent inputs.')
wtTrapReceiver2x2Outputs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2Outputs.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2Outputs.setDescription('Number of idependent outputs.')
wtTrapReceiver2x2InputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 3), )
if mibBuilder.loadTexts: wtTrapReceiver2x2InputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2InputTable.setDescription('List of input indices.')
wtTrapReceiver2x2InputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2InputNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2InputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2InputEntry.setDescription('Number of the inputs.')
wtTrapReceiver2x2InputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2InputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2InputNo.setDescription('Index numbers of the inputs.')
wtTrapReceiver2x2InputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtTrapReceiver2x2InputState-OFF", 0), ("wtTrapReceiver2x2InputState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2InputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2InputState.setDescription('Value of a single input bit.')
wtTrapReceiver2x2InputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2InputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2InputValue.setDescription('This variable is used to read the inputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1')
wtTrapReceiver2x2OutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 5), )
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputTable.setDescription('List of output indices.')
wtTrapReceiver2x2OutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 5, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2OutputNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputEntry.setDescription('Number of the outputs.')
wtTrapReceiver2x2OutputNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputNo.setDescription('Output number.')
wtTrapReceiver2x2OutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtTrapReceiver2x2OutputState-OFF", 0), ("wtTrapReceiver2x2OutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputState.setDescription('Value of a single output bit.')
wtTrapReceiver2x2OutputValue = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputValue.setDescription('This variable is used to read the outputs of the digital I/O port. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 0-1: Digital outputs 0-1 Bit 2-7: ungenutzt')
wtTrapReceiver2x2ActionOutputTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 8), )
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionOutputTable.setDescription('List of alarm indices..')
wtTrapReceiver2x2ActionOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 8, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionOutputEntry.setDescription('Index reference.')
wtTrapReceiver2x2ActionOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtTrapReceiver2x2ActionOutputState-OFF", 0), ("wtTrapReceiver2x2ActionOutputState-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionOutputState.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionOutputState.setDescription('State of the alarm.')
wtTrapReceiver2x2ActionTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtTrapReceiver2x2ActionTriggerState-OFF", 0), ("wtTrapReceiver2x2ActionTriggerState-ON", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTriggerState.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTriggerState.setDescription('State of the trigger condition.')
wtTrapReceiver2x2SystemTimerTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 9), )
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerTable.setDescription('List of system timer.')
wtTrapReceiver2x2SystemTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 9, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2SystemTimerNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerEntry.setDescription('Number of the system timer.')
wtTrapReceiver2x2SystemTimerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerNo.setDescription('Index number of the system timer.')
wtTrapReceiver2x2ButtonTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 10), )
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonTable.setDescription('List of buttons.')
wtTrapReceiver2x2ButtonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 10, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2ButtonNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonEntry.setDescription('Number of the button.')
wtTrapReceiver2x2ButtonNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonNo.setDescription('Index numder of the button.')
wtTrapReceiver2x2SessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtTrapReceiver2x2SessCntrlLogout. When read this variable provides a string of length zero.')
wtTrapReceiver2x2SessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtTrapReceiver2x2SessCntrl-NoSession", 0), ("wtTrapReceiver2x2SessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtTrapReceiver2x2SessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtTrapReceiver2x2SessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtTrapReceiver2x2SessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtTrapReceiver2x2DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DeviceName.setDescription('Name of the Webio, which is user definable.')
wtTrapReceiver2x2DeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2DeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DeviceText.setDescription('Description of the Webio, which is user definable.')
wtTrapReceiver2x2DeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2DeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtTrapReceiver2x2DeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2DeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtTrapReceiver2x2TzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2TzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2TzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtTrapReceiver2x2TzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2TzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2TzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtTrapReceiver2x2TzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2TzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2TzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtTrapReceiver2x2StTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtTrapReceiver2x2StTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtTrapReceiver2x2StTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtTrapReceiver2x2StTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtTrapReceiver2x2StartMonth-January", 1), ("wtTrapReceiver2x2StartMonth-February", 2), ("wtTrapReceiver2x2StartMonth-March", 3), ("wtTrapReceiver2x2StartMonth-April", 4), ("wtTrapReceiver2x2StartMonth-May", 5), ("wtTrapReceiver2x2StartMonth-June", 6), ("wtTrapReceiver2x2StartMonth-July", 7), ("wtTrapReceiver2x2StartMonth-August", 8), ("wtTrapReceiver2x2StartMonth-September", 9), ("wtTrapReceiver2x2StartMonth-October", 10), ("wtTrapReceiver2x2StartMonth-November", 11), ("wtTrapReceiver2x2StartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtTrapReceiver2x2StTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtTrapReceiver2x2StartMode-first", 1), ("wtTrapReceiver2x2StartMode-second", 2), ("wtTrapReceiver2x2StartMode-third", 3), ("wtTrapReceiver2x2StartMode-fourth", 4), ("wtTrapReceiver2x2StartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtTrapReceiver2x2StTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtTrapReceiver2x2StartWday-Sunday", 1), ("wtTrapReceiver2x2StartWday-Monday", 2), ("wtTrapReceiver2x2StartWday-Tuesday", 3), ("wtTrapReceiver2x2StartWday-Thursday", 4), ("wtTrapReceiver2x2StartWday-Wednesday", 5), ("wtTrapReceiver2x2StartWday-Friday", 6), ("wtTrapReceiver2x2StartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtTrapReceiver2x2StTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtTrapReceiver2x2StTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtTrapReceiver2x2StTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtTrapReceiver2x2StopMonth-January", 1), ("wtTrapReceiver2x2StopMonth-February", 2), ("wtTrapReceiver2x2StopMonth-March", 3), ("wtTrapReceiver2x2StopMonth-April", 4), ("wtTrapReceiver2x2StopMonth-May", 5), ("wtTrapReceiver2x2StopMonth-June", 6), ("wtTrapReceiver2x2StopMonth-July", 7), ("wtTrapReceiver2x2StopMonth-August", 8), ("wtTrapReceiver2x2StopMonth-September", 9), ("wtTrapReceiver2x2StopMonth-October", 10), ("wtTrapReceiver2x2StopMonth-November", 11), ("wtTrapReceiver2x2StopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtTrapReceiver2x2StTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtTrapReceiver2x2StopMode-first", 1), ("wtTrapReceiver2x2StopMode-second", 2), ("wtTrapReceiver2x2StopMode-third", 3), ("wtTrapReceiver2x2StopMode-fourth", 4), ("wtTrapReceiver2x2StopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtTrapReceiver2x2StTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtTrapReceiver2x2StopWday-Sunday", 1), ("wtTrapReceiver2x2StopWday-Monday", 2), ("wtTrapReceiver2x2StopWday-Tuesday", 3), ("wtTrapReceiver2x2StopWday-Thursday", 4), ("wtTrapReceiver2x2StopWday-Wednesday", 5), ("wtTrapReceiver2x2StopWday-Friday", 6), ("wtTrapReceiver2x2StopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtTrapReceiver2x2StTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtTrapReceiver2x2StTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2StTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtTrapReceiver2x2TimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2TimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2TimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtTrapReceiver2x2TimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2TimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2TimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtTrapReceiver2x2TsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2TsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2TsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtTrapReceiver2x2TsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2TsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2TsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtTrapReceiver2x2ClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtTrapReceiver2x2ClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtTrapReceiver2x2ClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtTrapReceiver2x2ClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtTrapReceiver2x2ClockMonth-January", 1), ("wtTrapReceiver2x2ClockMonth-February", 2), ("wtTrapReceiver2x2ClockMonth-March", 3), ("wtTrapReceiver2x2ClockMonth-April", 4), ("wtTrapReceiver2x2ClockMonth-May", 5), ("wtTrapReceiver2x2ClockMonth-June", 6), ("wtTrapReceiver2x2ClockMonth-July", 7), ("wtTrapReceiver2x2ClockMonth-August", 8), ("wtTrapReceiver2x2ClockMonth-September", 9), ("wtTrapReceiver2x2ClockMonth-October", 10), ("wtTrapReceiver2x2ClockMonth-November", 11), ("wtTrapReceiver2x2ClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtTrapReceiver2x2ClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtTrapReceiver2x2IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2IpAddress.setDescription('IP address of the Webio')
wtTrapReceiver2x2SubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SubnetMask.setDescription('Subnet mask of the Webio')
wtTrapReceiver2x2Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2Gateway.setDescription('Gateway of the Webio')
wtTrapReceiver2x2DnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2DnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtTrapReceiver2x2DnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2DnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtTrapReceiver2x2AddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2AddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2AddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP enable Bit 0: BOOTP enable')
wtTrapReceiver2x2HttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2HttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2HttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtTrapReceiver2x2MailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MailAdName.setDescription('Device name for mail administration.')
wtTrapReceiver2x2MailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MailReply.setDescription('Reply address for the mail server.')
wtTrapReceiver2x2MailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MailServer.setDescription('Name or IP address of the mail server.')
wtTrapReceiver2x2MailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtTrapReceiver2x2MailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtTrapReceiver2x2MailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MailAuthUser.setDescription('Name of the user to be authenticated.')
wtTrapReceiver2x2MailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MailAuthPassword.setDescription('Authentication password.')
wtTrapReceiver2x2MailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtTrapReceiver2x2SnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtTrapReceiver2x2SnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpCommunityStringRead.setDescription('Community string read only')
wtTrapReceiver2x2SnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtTrapReceiver2x2SnmpSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtTrapReceiver2x2SnmpSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SnmpSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag messages Bit 3-7: unused')
wtTrapReceiver2x2UdpAdminPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2UdpAdminPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2UdpAdminPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtTrapReceiver2x2UdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2UdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2UdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtTrapReceiver2x2UdpRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2UdpRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2UdpRemotePort.setDescription('Udp remote port setting. If this value is set to zero, the source port read from a request will be used as destination port for the answer. A non zero value forced the destination port to this value.')
wtTrapReceiver2x2SyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtTrapReceiver2x2SyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtTrapReceiver2x2SyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtTrapReceiver2x2SyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2SyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtTrapReceiver2x2FTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtTrapReceiver2x2FTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtTrapReceiver2x2FTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPUserName.setDescription('FTP Loggin: user name.')
wtTrapReceiver2x2FTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPPassword.setDescription('FTP Loggin: user password.')
wtTrapReceiver2x2FTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPAccount.setDescription('FTP Loggin: name of account.')
wtTrapReceiver2x2FTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtTrapReceiver2x2FTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2FTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtTrapReceiver2x2WatchListCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListCount.setDescription('Number of Ip addresses.')
wtTrapReceiver2x2WatchListIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 2), )
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListIfTable.setDescription('Table of inices.')
wtTrapReceiver2x2WatchListIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2WatchListNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListIfEntry.setDescription('Table entry.')
wtTrapReceiver2x2WatchListNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListNo.setDescription('List number of this entry.')
wtTrapReceiver2x2WatchListTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3), )
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListTable.setDescription('List of ip addresses.')
wtTrapReceiver2x2WatchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2WatchListNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListEntry.setDescription('List entry.')
wtTrapReceiver2x2WatchListName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListName.setDescription('Name or IP address.')
wtTrapReceiver2x2WatchListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListPort.setDescription('Port number, zero in the case of broadcast or Ping.')
wtTrapReceiver2x2WatchListService = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListService.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListService.setDescription('Binary coded scan mode, only one mode can be selected at a particular time: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: unused Bit 1: unused Bit 2: SNMP Trap reveive enable Bit 3: Syslog receive enable Bit 4-7: unused')
wtTrapReceiver2x2WatchListEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: Bit 0: enabled in Report 9 Bit 1: enabled in Report 10 Bit 2: enabled in Report 11 Bit 3: enabled in Report 12 Bit 4-7: unused Octet 4: Bit 0: enabled in Report 1 Bit 1: enabled in Report 2 Bit 2: enabled in Report 3 Bit 3: enabled in Report 4 Bit 4: enabled in Report 5 Bit 5: enabled in Report 6 Bit 6: enabled in Report 7 Bit 7: enabled in Report 8')
wtTrapReceiver2x2WatchListAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListAlias.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListAlias.setDescription('Alias Name')
wtTrapReceiver2x2WatchListTrapNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtTrapReceiver2x2WatchListTrapNo-ColdStart", 0), ("wtTrapReceiver2x2WatchListTrapNo-WarmStart", 1), ("wtTrapReceiver2x2WatchListTrapNo-LinkDown", 2), ("wtTrapReceiver2x2WatchListTrapNo-LinkUp", 3), ("wtTrapReceiver2x2WatchListTrapNo-AuthFailure", 4), ("wtTrapReceiver2x2WatchListTrapNo-EPGneighborLoss", 5), ("wtTrapReceiver2x2WatchListTrapNo-EnterpriseSpecific", 6), ("wtTrapReceiver2x2WatchListTrapNo-WildCard", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListTrapNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListTrapNo.setDescription('SNMP Trap No: this filter is only active, if SNMP Trap reveive enable in wtTrapReceiver2x2WatchListService is set.')
wtTrapReceiver2x2WatchListSpecificNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListSpecificNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListSpecificNo.setDescription('SNMP Specific No: this filter is only active, if SNMP Trap reveive enable in wtTrapReceiver2x2WatchListService is set.')
wtTrapReceiver2x2WatchListFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("wtTrapReceiver2x2WatchListFacility-Emergency", 0), ("wtTrapReceiver2x2WatchListFacility-Alert", 1), ("wtTrapReceiver2x2WatchListFacility-Critical", 2), ("wtTrapReceiver2x2WatchListFacility-Error", 3), ("wtTrapReceiver2x2WatchListFacility-Warning", 4), ("wtTrapReceiver2x2WatchListFacility-Notice", 5), ("wtTrapReceiver2x2WatchListFacility-Informational", 6), ("wtTrapReceiver2x2WatchListFacility-Debug", 7), ("wtTrapReceiver2x2WatchListFacility-WildCard", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListFacility.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListFacility.setDescription('Syslog message level Facility: this filter is only active, if Syslog receive enable in wtTrapReceiver2x2WatchListService is set.')
wtTrapReceiver2x2WatchListSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("wtTrapReceiver2x2WatchListSeverity-kernel_messages", 0), ("wtTrapReceiver2x2WatchListSeverity-user_level_messages", 1), ("wtTrapReceiver2x2WatchListSeverity-mail_system", 2), ("wtTrapReceiver2x2WatchListSeverity-system_daemons", 3), ("wtTrapReceiver2x2WatchListSeverity-security_authorization_messages", 4), ("wtTrapReceiver2x2WatchListSeverity-messages_generated_internaly_by_syslogd", 5), ("wtTrapReceiver2x2WatchListSeverity-line_printer_subsystem", 6), ("wtTrapReceiver2x2WatchListSeverity-network_news_subsystem", 7), ("wtTrapReceiver2x2WatchListSeverity-UUCP_subsystem", 8), ("wtTrapReceiver2x2WatchListSeverity-clock_daemon", 9), ("wtTrapReceiver2x2WatchListSeverity-security_authorization_messages_private", 10), ("wtTrapReceiver2x2WatchListSeverity-FTP_daemon", 11), ("wtTrapReceiver2x2WatchListSeverity-NTP_subsystem", 12), ("wtTrapReceiver2x2WatchListSeverity-log_audit", 13), ("wtTrapReceiver2x2WatchListSeverity-log_alert", 14), ("wtTrapReceiver2x2WatchListSeverity-clock_daemon_15", 15), ("wtTrapReceiver2x2WatchListSeverity-local0", 16), ("wtTrapReceiver2x2WatchListSeverity-local1", 17), ("wtTrapReceiver2x2WatchListSeverity-local2", 18), ("wtTrapReceiver2x2WatchListSeverity-local3", 19), ("wtTrapReceiver2x2WatchListSeverity-local4", 20), ("wtTrapReceiver2x2WatchListSeverity-local5", 21), ("wtTrapReceiver2x2WatchListSeverity-local6", 22), ("wtTrapReceiver2x2WatchListSeverity-local7", 23), ("wtTrapReceiver2x2WatchListSeverity-WildCard", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2WatchListSeverity.setDescription('Syslog message level Severity: this filter is only active, if Syslog receive enable in wtTrapReceiver2x2WatchListService is set.')
wtTrapReceiver2x2PowerSupplyEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 4, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PowerSupplyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PowerSupplyEnable.setDescription('Setting this enable bit turns on the intarnal 24V power supply of the outputs. All currents out must not exceed 150mA. At overcurrent condition the power supply will be shut down automatically. To reset the ocvercurrent protection circuit write 1 into wtTrapReceiver2x2DiagErrorClear. Internal power supply is a feature of 57655 only. Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Power Supply enable')
wtTrapReceiver2x2ActionCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionCount.setDescription('Number of independent alarms.')
wtTrapReceiver2x2ActionIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionIfTable.setDescription('List of alarm indices.')
wtTrapReceiver2x2ActionIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 2, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionIfEntry.setDescription('Numbers of the alarms.')
wtTrapReceiver2x2ActionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionNo.setDescription('Numbers of the alarms.')
wtTrapReceiver2x2ActionTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTable.setDescription('List of settings depending on the alarm number.')
wtTrapReceiver2x2ActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionEntry.setDescription('Action parameters of the individual alarms.')
wtTrapReceiver2x2ActionInputTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionInputTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionInputTrigger.setDescription('This variable allows setting of individual input trigger conditions. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The four OCTETS contain the mask which determines which of the inputs are to be considered (corresponding bit = 1) and which inputs are to ignore (corresponding bit = 0): OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0: Input 0 falling edge Bit 1: Input 0 rising edge Bit 2: Input 1 falling edge Bit 3: Input 1 rising edge Bit 4-7: unused')
wtTrapReceiver2x2ActionInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionInterval.setDescription('Send interval for alarm messages.')
wtTrapReceiver2x2ActionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: UDP enable Bit 3: Send inputs to pending TCP connections Bit 4: TCP Client enable Bit 5: Syslog Messages enable Bit 6-7: unused')
wtTrapReceiver2x2ActionMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtTrapReceiver2x2ActionMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionMailSubject.setDescription('Subject line for alarm mail.')
wtTrapReceiver2x2ActionMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionMailText.setDescription('Action mail text: States of the Webio device can be included by using special tags. Please refer to the respective Webio manual')
wtTrapReceiver2x2ActionSnmpManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSnmpManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSnmpManagerIP.setDescription('IP address of the SNMP Manager to which the Webio device should send SNMP traps.')
wtTrapReceiver2x2ActionSnmpTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSnmpTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSnmpTrapText.setDescription('This text appears in the trap body.')
wtTrapReceiver2x2ActionUdpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionUdpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionUdpIpAddr.setDescription('IP address of the UDP listener to which the Webio device should send UDP traps.')
wtTrapReceiver2x2ActionUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionUdpPort.setDescription('Port number of the UDP listener to which the Webio device should send UDP traps.')
wtTrapReceiver2x2ActionUdpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionUdpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionUdpText.setDescription('This text appears in the UDP trap body.')
wtTrapReceiver2x2ActionTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTcpIpAddr.setDescription('IP address of the TCP listener to which the Webio device should send TCP traps.')
wtTrapReceiver2x2ActionTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTcpPort.setDescription('Port number of the TCP listener to which the Webio device should send TCP traps.')
wtTrapReceiver2x2ActionTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTcpText.setDescription('This text appears in the TCP trap body.')
wtTrapReceiver2x2ActionSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtTrapReceiver2x2ActionSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtTrapReceiver2x2ActionSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtTrapReceiver2x2ActionFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtTrapReceiver2x2ActionFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionFtpFileName.setDescription('Name of the file including path informations.')
wtTrapReceiver2x2ActionFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionFtpText.setDescription('Message text to store on the FTP server.')
wtTrapReceiver2x2ActionFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtTrapReceiver2x2ActionTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionTimerCron.setDescription('This entry contains 10 space or tab seperated text fields defining a time window for sending time triggered messages. 2 CRON time for start time and stop time are defined as follows: Start time: field 1: Minutes Range 0-59 3. Hours Range 0-23, 0 is midnight 5: Day of month Range 1-31 7: Month Range 1-12 9: Weekday Range 0-6, 0 is sunday Stop time: field 2: Minutes Range 0-59 4. Hours Range 0-23, 0 is midnight 6: Day of month Range 1-31 8: Month Range 1-12 10: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtTrapReceiver2x2ActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionName.setDescription('Name of the alarm.')
wtTrapReceiver2x2ActionGlobalEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionGlobalEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionGlobalEnable.setDescription('Binary coded alarm activation: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 1-7: unused Bit 0 : Action enable')
wtTrapReceiver2x2ActionSystemTimerTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSystemTimerTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSystemTimerTrigger.setDescription('Binary coded system timer activation: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0: System Timer 1 enable Bit 1: System Timer 2 enable Bit 2-7: unused')
wtTrapReceiver2x2ActionSystemButtonTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 56), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSystemButtonTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionSystemButtonTrigger.setDescription('Binary coded button activation: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0: Button 1 enable Bit 1: Button 2 enable Bit 2: Button 3 enable Bit 3: Button 4 enable Bit 3: Button 5 enable Bit 3: Button 6 enable Bit 3: Button 7 enable Bit 3: Button 8 enable.')
wtTrapReceiver2x2ActionOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 5, 3, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionOutputAction.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ActionOutputAction.setDescription('This variable allows setting of individual output. The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. The first four OCTETS contain the mask which determines which of the outputs are to be considered (corresponding bit = 1) and which outputs are to ignore (corresponding bit = 0): OCTET 1 : unused OCTET 2 : unused OCTET 3 : unused OCTET 4, Bit 0-1: Mask for digital outputs 0-1 OCTETS 5-8 contain the level (1=HIGH, 0=LOW) which the outputs should assume: OCTET 5 : unused OCTET 6 : unused OCTET 7 : unused OCTET 8, Bit 0-1: Level of digital outputs 0-1 OCTETS 9-12 contain the TOOGLE bit (1=ON, 0=OFF). outputs masked with the TOGGLE bit trigger change their state on every action. Settings in OCTET 5-9 are then unused: OCTET 9: unused OCTET 10: unused OCTET 11: unused OCTET 12, Bit 0-1: TOGGLE bits of digital outputs 0-1')
wtTrapReceiver2x2SystemTimerPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 2, 1), )
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerPortTable.setDescription('List of settings depending on the SystemTimer number.')
wtTrapReceiver2x2SystemTimerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 2, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2SystemTimerNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2SystemTimerPortEntry.setDescription('SystemTimer parameter for the individual SystemTimer.')
wtTrapReceiver2x2PortSystemTimerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortSystemTimerEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortSystemTimerEnable.setDescription('Binary coded SystemTimer enable: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: ungenutzt OCTET 2: ungenutzt OCTET 3: ungenutzt OCTET 4, Bit 1-7: ungenutzt Bit 0 : SystemTimer enable')
wtTrapReceiver2x2PortSystemTimerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortSystemTimerName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortSystemTimerName.setDescription('Name of the SystemTimer.')
wtTrapReceiver2x2PortSystemTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 2, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortSystemTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortSystemTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtTrapReceiver2x2ButtonPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 3, 1), )
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonPortTable.setDescription('List of settings depending on the button number.')
wtTrapReceiver2x2ButtonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 3, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2ButtonNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2ButtonPortEntry.setDescription('Button parameter for the individual buttons.')
wtTrapReceiver2x2PortButtonEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortButtonEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortButtonEnable.setDescription('Binary coded button enable: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: ungenutzt OCTET 2: ungenutzt OCTET 3: ungenutzt OCTET 4, Bit 1-7: ungenutzt Bit 0 : Button enable')
wtTrapReceiver2x2PortButtonName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortButtonName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortButtonName.setDescription('Name of the button.')
wtTrapReceiver2x2PortButtonText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortButtonText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortButtonText.setDescription('Description of the button.')
wtTrapReceiver2x2PortButtonAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortButtonAccess.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortButtonAccess.setDescription('Binary coded button access level: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an input. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4, Bit 3-7: unused Bit 2 : For user administrator visible and operable Bit 1 : For user operator visible and operable Bit 0 : For user guest visible and operable')
wtTrapReceiver2x2InputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 4, 1), )
if mibBuilder.loadTexts: wtTrapReceiver2x2InputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2InputPortTable.setDescription('List of settings depending on the input number.')
wtTrapReceiver2x2InputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 4, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2InputNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2InputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2InputPortEntry.setDescription('Input parameter for the individual inputs.')
wtTrapReceiver2x2PortInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 4, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortInputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortInputName.setDescription('Name of the input.')
wtTrapReceiver2x2PortInputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 4, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortInputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortInputText.setDescription('Description of the input.')
wtTrapReceiver2x2PortInputFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 6, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortInputFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortInputFilter.setDescription('Pulses with a duration shorter than here specified (duration in 1/1000 sec), are ignored.')
wtTrapReceiver2x2OutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 7, 1, 1), )
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputPortTable.setDescription('List of settings depending on the output number.')
wtTrapReceiver2x2OutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 7, 1, 1, 1), ).setIndexNames((0, "Webio-Digital-MIB-US", "wtTrapReceiver2x2OutputNo"))
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2OutputPortEntry.setDescription('Output parameters of the individual outputs.')
wtTrapReceiver2x2PortOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 7, 1, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortOutputName.setDescription('Name of the output.')
wtTrapReceiver2x2PortOutputText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 7, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortOutputText.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortOutputText.setDescription('Description of the output.')
wtTrapReceiver2x2PortPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortPulseDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortPulseDuration.setDescription('Pulse length in 1/1000 sec. Setting this value to zero, disables the pulse output.')
wtTrapReceiver2x2PortPulsePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 1, 7, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2PortPulsePolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2PortPulsePolarity.setDescription('This value defines the polarity of the output pulse, if wtTrapReceiver2x2PortPulseDuration is not set to zero. After the pulse is finished, the output switches back to the opposite state. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 0 : negative polarity Bit 1 : positive polarity Bit 2-7 : unused')
wtTrapReceiver2x2MfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MfName.setDescription('Manufacturer company name')
wtTrapReceiver2x2MfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MfAddr.setDescription('Manufacturer address.')
wtTrapReceiver2x2MfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MfHotline.setDescription('Manufacturer hotline.')
wtTrapReceiver2x2MfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MfInternet.setDescription('Manufacturer Internet address.')
wtTrapReceiver2x2MfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2MfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2MfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtTrapReceiver2x2DiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagErrorCount.setDescription('Number of entries in the error memory.')
wtTrapReceiver2x2DiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtTrapReceiver2x2DiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtTrapReceiver2x2DiagErrorMessage. Errors are numbered from 1 to wtTrapReceiver2x2DiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtTrapReceiver2x2DiagErrorMessage.')
wtTrapReceiver2x2DiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagErrorMessage.setDescription('Using wtTrapReceiver2x2DiagErrorIndex as an index, the appropriate message is available.')
wtTrapReceiver2x2DiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtTrapReceiver2x2DiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtTrapReceiver2x2Alert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,41)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ReportSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert1.setDescription('This SNMP trap is generated when Action 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,42)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert2.setDescription('This SNMP trap is generated when Action 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,43)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert3.setDescription('This SNMP trap is generated when Action 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,44)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert4.setDescription('This SNMP trap is generated when Action 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,45)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert5.setDescription('This SNMP trap is generated when Action 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,46)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert6.setDescription('This SNMP trap is generated when Action 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,47)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert7.setDescription('This SNMP trap is generated when Action 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,48)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert8.setDescription('This SNMP trap is generated when Action 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,49)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert9.setDescription('This SNMP trap is generated when Action 9 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,50)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert10.setDescription('This SNMP trap is generated when Action 10 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,51)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert11.setDescription('This SNMP trap is generated when Action 11 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2Alert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,52)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2ActionSnmpTrapText"))
if mibBuilder.loadTexts: wtTrapReceiver2x2Alert12.setDescription('This SNMP trap is generated when Action 12 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtTrapReceiver2x2AlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 33) + (0,110)).setObjects(("Webio-Digital-MIB-US", "wtTrapReceiver2x2DiagErrorIndex"), ("Webio-Digital-MIB-US", "wtTrapReceiver2x2DiagErrorMessage"))
if mibBuilder.loadTexts: wtTrapReceiver2x2AlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtIpWatcher_24VSyslogServerIP=wtIpWatcher_24VSyslogServerIP, wtWebioEA12x6RelOutputValue=wtWebioEA12x6RelOutputValue, wtIpWatcherTimeServer2=wtIpWatcherTimeServer2, wtWebioEA24oemStTzEnable=wtWebioEA24oemStTzEnable, wtWebioEA6x6TsSyncTime=wtWebioEA6x6TsSyncTime, wtWebioEA2x2ERP_24VOutputValue=wtWebioEA2x2ERP_24VOutputValue, wtWebioEA12x12AlarmMailAddr=wtWebioEA12x12AlarmMailAddr, wtWebioEA6x6AlarmEnable=wtWebioEA6x6AlarmEnable, wtWebioEA12x6RelERPSafetyTimeout=wtWebioEA12x6RelERPSafetyTimeout, wtTrapReceiver2x2ActionSnmpTrapText=wtTrapReceiver2x2ActionSnmpTrapText, wtWebioEA2x2ERP_24VStTzStartMin=wtWebioEA2x2ERP_24VStTzStartMin, wtWebioEA2x2ERP_24VPortLogicFunction=wtWebioEA2x2ERP_24VPortLogicFunction, wtWebAlarm6x6AlarmSnmpTrapTrapTxEnable=wtWebAlarm6x6AlarmSnmpTrapTrapTxEnable, wtWebioEA24oemSyslogServerIP=wtWebioEA24oemSyslogServerIP, wtIpWatcherAlert21=wtIpWatcherAlert21, wtWebCount6HTTP=wtWebCount6HTTP, wtWebCount6Alert6=wtWebCount6Alert6, wtWebAlarm6x6AlarmTcpTrapTxEnable=wtWebAlarm6x6AlarmTcpTrapTxEnable, wtWebioEA2x2Alert20=wtWebioEA2x2Alert20, wtWebioEA12x6RelERPPortOutputSafetyState=wtWebioEA12x6RelERPPortOutputSafetyState, wtWebioEA12x6RelFTPAccount=wtWebioEA12x6RelFTPAccount, wtWebioEA6x6StTzEnable=wtWebioEA6x6StTzEnable, wtIpWatcher_24VAlert6=wtIpWatcher_24VAlert6, wtWebioEA12x6RelERPSyslogEnable=wtWebioEA12x6RelERPSyslogEnable, wtWebAlarm6x6Alert2=wtWebAlarm6x6Alert2, wtWebioEA2x2ERP_24VAlarmFtpReleaseText=wtWebioEA2x2ERP_24VAlarmFtpReleaseText, wtWebCount6ReportOutputState=wtWebCount6ReportOutputState, wtIpWatcher_24VAlert28=wtIpWatcher_24VAlert28, wtWebioEA2x2_24VSnmpCommunityStringRead=wtWebioEA2x2_24VSnmpCommunityStringRead, wtWebioEA12x12Alert2=wtWebioEA12x12Alert2, wtWebioEA12x6RelERPStartup=wtWebioEA12x6RelERPStartup, wtWebioEA6x6AlarmMailText=wtWebioEA6x6AlarmMailText, wtIpWatcherSyslogSystemMessagesEnable=wtIpWatcherSyslogSystemMessagesEnable, wtTrapReceiver2x2InputPortEntry=wtTrapReceiver2x2InputPortEntry, wtWebioEA12x12TzEnable=wtWebioEA12x12TzEnable, wtTrapReceiver2x2AlertDiag=wtTrapReceiver2x2AlertDiag, wtTrapReceiver2x2Manufact=wtTrapReceiver2x2Manufact, wtWebioEA2x2UdpAdminPort=wtWebioEA2x2UdpAdminPort, wtIpWatcher_24VAlarmFtpReleaseText=wtIpWatcher_24VAlarmFtpReleaseText, wtWebioEA2x2Config=wtWebioEA2x2Config, wtTrapReceiver2x2Device=wtTrapReceiver2x2Device, wtIpWatcherSyslogEnable=wtIpWatcherSyslogEnable, wtWebioEA12x6RelERPInOut=wtWebioEA12x6RelERPInOut, wtWebAlarm6x6TimeServer2=wtWebAlarm6x6TimeServer2, wtWebAlarm6x6AlarmUdpTrapTxEnable=wtWebAlarm6x6AlarmUdpTrapTxEnable, wtIpWatcherStTzStopHrs=wtIpWatcherStTzStopHrs, wtWebioEA12x12ClockHrs=wtWebioEA12x12ClockHrs, wtWebioEA6x6BinaryTcpServerClientHttpPort=wtWebioEA6x6BinaryTcpServerClientHttpPort, wtWebioEA6x6Alert24=wtWebioEA6x6Alert24, wtWebioEA12x6RelERPSubnetMask=wtWebioEA12x6RelERPSubnetMask, wtWebioEA2x2AlarmSystemTrigger=wtWebioEA2x2AlarmSystemTrigger, wtTrapReceiver2x2WatchListCount=wtTrapReceiver2x2WatchListCount, wtWebioEA2x2_24VUdpRemotePort=wtWebioEA2x2_24VUdpRemotePort, wtWebioEA6x6Alert6=wtWebioEA6x6Alert6, wtWebioEA12x6RelDnsServer2=wtWebioEA12x6RelDnsServer2, wtWebioEA2x2ERPNetwork=wtWebioEA2x2ERPNetwork, wtWebCount6Basic=wtWebCount6Basic, wtWebioEA2x2_24VNetwork=wtWebioEA2x2_24VNetwork, wtWebioEA12x6RelInputValue=wtWebioEA12x6RelInputValue, wtWebioEA6x6AlarmMaxCounterValue=wtWebioEA6x6AlarmMaxCounterValue, wtWebioEA12x12OutputState=wtWebioEA12x12OutputState, wtWebioEA6x6PortOutputName=wtWebioEA6x6PortOutputName, wtWebioEA2x2ERPAlert2=wtWebioEA2x2ERPAlert2, wtWebioEA12x6RelERPSnmpSystemTrapEnable=wtWebioEA12x6RelERPSnmpSystemTrapEnable, wtTrapReceiver2x2TimeServer=wtTrapReceiver2x2TimeServer, wtIpWatcherOutputNo=wtIpWatcherOutputNo, wtIpWatcherSyslogServerPort=wtIpWatcherSyslogServerPort, wtWebioEA12x6RelAlert7=wtWebioEA12x6RelAlert7, wtWebAlarm6x6Config=wtWebAlarm6x6Config, wtIpWatcher_24VAlarmAckPort=wtIpWatcher_24VAlarmAckPort, wtWebioEA2x2ERPStTzOffsetMin=wtWebioEA2x2ERPStTzOffsetMin, wtIpWatcher_24VSyslogServerPort=wtIpWatcher_24VSyslogServerPort, wtWebioEA12x12Gateway=wtWebioEA12x12Gateway, wtWebioEA24oemAlarmSyslogIpAddr=wtWebioEA24oemAlarmSyslogIpAddr, wtWebioEA2x2ERPInputState=wtWebioEA2x2ERPInputState, wtWebioEA2x2ERP_24VWayBackFTPResponse=wtWebioEA2x2ERP_24VWayBackFTPResponse, wtWebioEA2x2BinaryIfTable=wtWebioEA2x2BinaryIfTable, wtIpWatcherMfName=wtIpWatcherMfName, wtWebioEA2x2ERP_24VMailPop3Server=wtWebioEA2x2ERP_24VMailPop3Server, wtWebAlarm6x6OutputState=wtWebAlarm6x6OutputState, wtWebioEA2x2ERP_24VSessCntrlLogout=wtWebioEA2x2ERP_24VSessCntrlLogout, wtWebioEA12x6RelMfHotline=wtWebioEA12x6RelMfHotline, wtWebioEA2x2ERP_24VAlert2=wtWebioEA2x2ERP_24VAlert2, wtWebAlarm6x6ClockHrs=wtWebAlarm6x6ClockHrs, wtWebioEA2x2ERPClockMin=wtWebioEA2x2ERPClockMin, wtWebioEA12x12Alert18=wtWebioEA12x12Alert18, wtWebioEA2x2ERPAlarmTcpReleaseText=wtWebioEA2x2ERPAlarmTcpReleaseText, wtWebioEA6x6AlarmUdpPort=wtWebioEA6x6AlarmUdpPort, wtWebioEA12x6RelERPFTPUserName=wtWebioEA12x6RelERPFTPUserName, wtWebioEA12x6RelERPDeviceLocation=wtWebioEA12x6RelERPDeviceLocation, wtWebioEA12x6RelBinaryTcpClientInterval=wtWebioEA12x6RelBinaryTcpClientInterval, wtTrapReceiver2x2WatchListFacility=wtTrapReceiver2x2WatchListFacility, wtWebioEA6x6PortOutputText=wtWebioEA6x6PortOutputText, wtWebioEA2x2ERP_24VDiagErrorClear=wtWebioEA2x2ERP_24VDiagErrorClear, wtWebioEA12x6RelERPPortPulseDuration=wtWebioEA12x6RelERPPortPulseDuration, wtTrapReceiver2x2MailAuthentication=wtTrapReceiver2x2MailAuthentication, wtWebioEA2x2_24VText=wtWebioEA2x2_24VText, wtWebioEA12x12Syslog=wtWebioEA12x12Syslog, wtWebCount6ReportInputTrigger=wtWebCount6ReportInputTrigger, wtWebioEA2x2BinaryTable=wtWebioEA2x2BinaryTable, wtWebioEA12x6RelERPAlarmTcpReleaseText=wtWebioEA12x6RelERPAlarmTcpReleaseText, wtWebioEA24oemMailAuthPassword=wtWebioEA24oemMailAuthPassword, wtWebAlarm6x6AlarmName=wtWebAlarm6x6AlarmName, wtWebioEA6x6FTPServerIP=wtWebioEA6x6FTPServerIP, wtWebioEA2x2AlarmUdpPort=wtWebioEA2x2AlarmUdpPort, wtWebioEA2x2SnmpSystemTrapManagerIP=wtWebioEA2x2SnmpSystemTrapManagerIP, wtWebioEA2x2_24VAlert23=wtWebioEA2x2_24VAlert23, wtTrapReceiver2x2Config=wtTrapReceiver2x2Config, wtWebioEA12x6RelERPMail=wtWebioEA12x6RelERPMail, wtWebioEA24oemAlert12=wtWebioEA24oemAlert12, wtWebioEA12x6RelAlert18=wtWebioEA12x6RelAlert18, wtIpWatcherInputCounterClear=wtIpWatcherInputCounterClear, wtTrapReceiver2x2StTzEnable=wtTrapReceiver2x2StTzEnable, wtIpWatcher_24VIpListService=wtIpWatcher_24VIpListService, wtWebAlarm6x6TzOffsetMin=wtWebAlarm6x6TzOffsetMin, wtWebioEA2x2ERP_24VStTzStopWday=wtWebioEA2x2ERP_24VStTzStopWday, wtIpWatcherStTzStartWday=wtIpWatcherStTzStartWday, wtWebioEA12x6RelPorts=wtWebioEA12x6RelPorts, wtWebAlarm6x6Alert29=wtWebAlarm6x6Alert29, wtWebioEA6x6AlarmInterval=wtWebioEA6x6AlarmInterval, wtWebioEA2x2_24VBinaryUdpPeerLocalPort=wtWebioEA2x2_24VBinaryUdpPeerLocalPort, wtWebioEA2x2_24VOutputModeBit=wtWebioEA2x2_24VOutputModeBit, wtTrapReceiver2x2PowerSupplyEnable=wtTrapReceiver2x2PowerSupplyEnable, wtWebioEA6x6Alert11=wtWebioEA6x6Alert11, wtWebioEA2x2_24VSnmpEnable=wtWebioEA2x2_24VSnmpEnable, wtIpWatcherSyslogServerIP=wtIpWatcherSyslogServerIP, wtWebioEA2x2_24VAlarmTimerCron=wtWebioEA2x2_24VAlarmTimerCron, wtWebioEA24oemMfHotline=wtWebioEA24oemMfHotline, wtWebioEA2x2_24VInputTable=wtWebioEA2x2_24VInputTable, wtWebioEA12x12ClockMonth=wtWebioEA12x12ClockMonth, wtWebioEA2x2ERP_24VAlert16=wtWebioEA2x2ERP_24VAlert16, wtWebioEA2x2Alert4=wtWebioEA2x2Alert4, wtWebioEA24oemBinaryTcpClientInputTrigger=wtWebioEA24oemBinaryTcpClientInputTrigger, wtWebioEA12x12DiagErrorIndex=wtWebioEA12x12DiagErrorIndex, wtWebioEA24oemAlert29=wtWebioEA24oemAlert29, wtWebioEA2x2_24VPortOutputGroupMode=wtWebioEA2x2_24VPortOutputGroupMode, wtIpWatcherAlert32=wtIpWatcherAlert32, wtWebioEA6x6OutputPortTable=wtWebioEA6x6OutputPortTable, wtWebCount6Ports=wtWebCount6Ports, wtWebioEA12x6RelGateway=wtWebioEA12x6RelGateway, wtWebioEA2x2ERPAlarmFtpReleaseText=wtWebioEA2x2ERPAlarmFtpReleaseText, wtIpWatcher_24VInputCounter=wtIpWatcher_24VInputCounter, wtWebioEA2x2_24VMfName=wtWebioEA2x2_24VMfName, wtIpWatcherUDP=wtIpWatcherUDP, wtIpWatcher_24VAlert17=wtIpWatcher_24VAlert17, wtWebAlarm6x6AlarmTriggerState=wtWebAlarm6x6AlarmTriggerState, wtWebioEA6x6BinaryUdpPeerInterval=wtWebioEA6x6BinaryUdpPeerInterval, wtWebioEA2x2ERP_24VBinaryIfEntry=wtWebioEA2x2ERP_24VBinaryIfEntry, wtWebAlarm6x6AlarmAckEnable=wtWebAlarm6x6AlarmAckEnable, wtWebioEA12x6RelMfInternet=wtWebioEA12x6RelMfInternet, wtWebioEA12x12PortLogicOutputInverter=wtWebioEA12x12PortLogicOutputInverter, wtWebioEA12x6RelFTP=wtWebioEA12x6RelFTP, wtWebioEA2x2ERP_24VFTPServerControlPort=wtWebioEA2x2ERP_24VFTPServerControlPort, wtWebioEA12x12SetOutput=wtWebioEA12x12SetOutput, wtIpWatcherAlarmSnmpTrapTrapTxEnable=wtIpWatcherAlarmSnmpTrapTrapTxEnable, wtWebioEA2x2ERPTsSyncTime=wtWebioEA2x2ERPTsSyncTime, wtWebioEA12x12UdpEnable=wtWebioEA12x12UdpEnable, wtWebioEA24oemClockHrs=wtWebioEA24oemClockHrs, wtWebioEA24oemBinaryTable=wtWebioEA24oemBinaryTable, wtWebioEA6x6StTzStartWday=wtWebioEA6x6StTzStartWday, wtWebioEA2x2PortInputName=wtWebioEA2x2PortInputName, wtWebCount6MailPop3Server=wtWebCount6MailPop3Server, wtWebioEA2x2ERP_24VAlarmSyslogText=wtWebioEA2x2ERP_24VAlarmSyslogText, wtWebAlarm6x6Alert33=wtWebAlarm6x6Alert33, wtWebioEA2x2_24VDiagBinaryError=wtWebioEA2x2_24VDiagBinaryError, wtTrapReceiver2x2DiagErrorIndex=wtTrapReceiver2x2DiagErrorIndex, wtWebioEA12x12TimeServer=wtWebioEA12x12TimeServer, wtWebioEA2x2BinaryTcpServerClientHttpPort=wtWebioEA2x2BinaryTcpServerClientHttpPort, wtWebioEA12x12GetHeaderEnable=wtWebioEA12x12GetHeaderEnable, wtIpWatcherSessCntrlConfigMode=wtIpWatcherSessCntrlConfigMode, wtWebioEA24oemAlarmTcpPort=wtWebioEA24oemAlarmTcpPort, wtWebioEA12x6RelPortInputText=wtWebioEA12x6RelPortInputText, wtWebioEA24oemPortInputName=wtWebioEA24oemPortInputName, wtWebioEA2x2_24VFTPServerControlPort=wtWebioEA2x2_24VFTPServerControlPort, wtWebioEA12x6RelOutputPortTable=wtWebioEA12x6RelOutputPortTable, wtWebAlarm6x6SnmpSystemTrapEnable=wtWebAlarm6x6SnmpSystemTrapEnable, wtWebioEA2x2ERPOutputTable=wtWebioEA2x2ERPOutputTable, wtWebioEA6x6DeviceContact=wtWebioEA6x6DeviceContact, wtWebioEA12x6RelERPAlarmTcpText=wtWebioEA12x6RelERPAlarmTcpText, wtWebioEA2x2ERP_24VWayBackServerControlPort=wtWebioEA2x2ERP_24VWayBackServerControlPort, wtTrapReceiver2x2WatchListEnable=wtTrapReceiver2x2WatchListEnable, wtIpWatcherAlarmMailReleaseText=wtIpWatcherAlarmMailReleaseText, wtWebAlarm6x6Alert32=wtWebAlarm6x6Alert32, wtWebioEA2x2ERPMail=wtWebioEA2x2ERPMail, wtWebioEA12x6RelDiag=wtWebioEA12x6RelDiag, wtWebioEA12x6RelTimeServer=wtWebioEA12x6RelTimeServer, wtWebioEA12x6RelERPBinaryUdpPeerInterval=wtWebioEA12x6RelERPBinaryUdpPeerInterval, wtWebioEA24oemAlarmFtpOption=wtWebioEA24oemAlarmFtpOption, wtTrapReceiver2x2MailAuthPassword=wtTrapReceiver2x2MailAuthPassword, wtWebioEA2x2ERPBinaryEntry=wtWebioEA2x2ERPBinaryEntry, wtWebioEA2x2Basic=wtWebioEA2x2Basic, wtWebioEA2x2ERP_24VClockYear=wtWebioEA2x2ERP_24VClockYear, wtIpWatcher_24VAlert29=wtIpWatcher_24VAlert29, wtWebioEA12x6RelAlarmTable=wtWebioEA12x6RelAlarmTable, wtIpWatcher_24VSessCntrl=wtIpWatcher_24VSessCntrl, wtIpWatcher_24VDeviceClock=wtIpWatcher_24VDeviceClock, wtWebAlarm6x6AlarmOutputState=wtWebAlarm6x6AlarmOutputState, wtWebioEA12x6RelERPAlert4=wtWebioEA12x6RelERPAlert4, wtWebioEA2x2_24VStTzStopHrs=wtWebioEA2x2_24VStTzStopHrs, wtWebioEA2x2BinaryConnectedPort=wtWebioEA2x2BinaryConnectedPort, wtWebioEA2x2ERPAlarmSystemTrigger=wtWebioEA2x2ERPAlarmSystemTrigger, wtWebioEA12x6RelERPOutputState=wtWebioEA12x6RelERPOutputState, wtWebAlarm6x6Alert23=wtWebAlarm6x6Alert23, wtWebAlarm6x6StTzStopMode=wtWebAlarm6x6StTzStopMode, wtWebioEA24oemBinaryUdpPeerRemotePort=wtWebioEA24oemBinaryUdpPeerRemotePort, wtIpWatcher_24VAlert22=wtIpWatcher_24VAlert22, wtWebioEA2x2ERPFTPUserName=wtWebioEA2x2ERPFTPUserName, wtWebioEA12x6RelERPBinaryTcpClientServerHttpPort=wtWebioEA12x6RelERPBinaryTcpClientServerHttpPort, wtTrapReceiver2x2OutputState=wtTrapReceiver2x2OutputState, wtWebioEA12x6RelERPBinaryModeNo=wtWebioEA12x6RelERPBinaryModeNo, wtWebioEA2x2_24VFTP=wtWebioEA2x2_24VFTP, wtWebioEA12x6RelERPPortInputBicountPulsePolarity=wtWebioEA12x6RelERPPortInputBicountPulsePolarity, wtWebioEA12x6RelERPPortOutputGroupMode=wtWebioEA12x6RelERPPortOutputGroupMode, wtWebioEA24oemMfDeviceTyp=wtWebioEA24oemMfDeviceTyp, wtWebAlarm6x6DiagErrorMessage=wtWebAlarm6x6DiagErrorMessage, wtIpWatcherAlert15=wtIpWatcherAlert15, wtWebioEA6x6SessCntrlLogout=wtWebioEA6x6SessCntrlLogout, wtWebAlarm6x6ClockDay=wtWebAlarm6x6ClockDay, wtWebioEA12x6RelAlert12=wtWebioEA12x6RelAlert12, wtIpWatcher_24VAlarmSyslogText=wtIpWatcher_24VAlarmSyslogText, wtWebioEA12x6RelERPBinaryTcpServerApplicationMode=wtWebioEA12x6RelERPBinaryTcpServerApplicationMode, wtWebioEA24oemAlert14=wtWebioEA24oemAlert14, wtIpWatcher_24VAlarmMailAddr=wtIpWatcher_24VAlarmMailAddr, wtWebioEA2x2ERP_24VAlert10=wtWebioEA2x2ERP_24VAlert10, wtWebioEA2x2_24V=wtWebioEA2x2_24V, wtTrapReceiver2x2PortButtonName=wtTrapReceiver2x2PortButtonName, wtWebioEA12x12StTzStopMin=wtWebioEA12x12StTzStopMin, wtWebioEA2x2ERPIpAddress=wtWebioEA2x2ERPIpAddress, wtWebioEA12x6RelERPAlert14=wtWebioEA12x6RelERPAlert14, wtWebioEA12x6RelERPStTzStartMonth=wtWebioEA12x6RelERPStTzStartMonth, wtWebioEA12x6RelInputEntry=wtWebioEA12x6RelInputEntry, wtWebioEA2x2LoadControlView=wtWebioEA2x2LoadControlView, wtWebioEA12x6RelERPGateway=wtWebioEA12x6RelERPGateway, wtWebioEA2x2ERPPortOutputGroupMode=wtWebioEA2x2ERPPortOutputGroupMode, wtWebioEA12x6RelERPInputTable=wtWebioEA12x6RelERPInputTable, wtWebioEA2x2_24VAlert16=wtWebioEA2x2_24VAlert16, wtTrapReceiver2x2TsSyncTime=wtTrapReceiver2x2TsSyncTime, wtWebioEA6x6TzOffsetMin=wtWebioEA6x6TzOffsetMin, wtIpWatcherAlarmCount=wtIpWatcherAlarmCount, wtWebioEA12x12InputPortEntry=wtWebioEA12x12InputPortEntry, wtWebCount6TsEnable=wtWebCount6TsEnable, wtWebioEA2x2ERPStTzStopWday=wtWebioEA2x2ERPStTzStopWday, wtIpWatcher_24VAlarmOutputTable=wtIpWatcher_24VAlarmOutputTable, wtWebAlarm6x6InputTable=wtWebAlarm6x6InputTable, wtWebioEA24oemAlert2=wtWebioEA24oemAlert2, wtWebAlarm6x6SnmpEnable=wtWebAlarm6x6SnmpEnable, wtWebCount6MailEnable=wtWebCount6MailEnable, wtWebioEA6x6Basic=wtWebioEA6x6Basic, wtIpWatcher_24VPortInputFilter=wtIpWatcher_24VPortInputFilter, wtWebioEA2x2_24VPortOutputName=wtWebioEA2x2_24VPortOutputName, wtTrapReceiver2x2ActionName=wtTrapReceiver2x2ActionName, wtIpWatcher_24VAlarmTimerCron=wtIpWatcher_24VAlarmTimerCron, wtWebioEA6x6MailReply=wtWebioEA6x6MailReply, wtWebioEA2x2_24VStartup=wtWebioEA2x2_24VStartup)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA24oemAlarmMaxCounterValue=wtWebioEA24oemAlarmMaxCounterValue, wtWebioEA2x2_24VAlarmFtpFileName=wtWebioEA2x2_24VAlarmFtpFileName, wtIpWatcher_24VPortInputText=wtIpWatcher_24VPortInputText, wtTrapReceiver2x2ActionOutputAction=wtTrapReceiver2x2ActionOutputAction, wtWebioEA2x2ERPAlarmSyslogPort=wtWebioEA2x2ERPAlarmSyslogPort, wtTrapReceiver2x2FTPPassword=wtTrapReceiver2x2FTPPassword, wtWebioEA12x6RelClockMonth=wtWebioEA12x6RelClockMonth, wtWebioEA12x6RelSessCntrlConfigMode=wtWebioEA12x6RelSessCntrlConfigMode, wtIpWatcherFTPEnable=wtIpWatcherFTPEnable, wtWebioEA2x2ERPWayBackServerControlPort=wtWebioEA2x2ERPWayBackServerControlPort, wtWebCount6SnmpSystemTrapEnable=wtWebCount6SnmpSystemTrapEnable, wtWebioEA2x2ERP_24VPortInputMode=wtWebioEA2x2ERP_24VPortInputMode, wtWebioEA2x2PortInputFilter=wtWebioEA2x2PortInputFilter, wtWebioEA2x2StTzStartMin=wtWebioEA2x2StTzStartMin, wtWebioEA12x6RelERPAlarmMaxCounterValue=wtWebioEA12x6RelERPAlarmMaxCounterValue, wtWebioEA2x2BinaryConnectedIpAddr=wtWebioEA2x2BinaryConnectedIpAddr, wtWebioEA2x2_24VGateway=wtWebioEA2x2_24VGateway, wtWebioEA24oemGetHeaderEnable=wtWebioEA24oemGetHeaderEnable, wtWebAlarm6x6Ports=wtWebAlarm6x6Ports, wtWebioEA24oemSnmpCommunityStringRead=wtWebioEA24oemSnmpCommunityStringRead, wtWebAlarm6x6AlarmMailTrapTxEnable=wtWebAlarm6x6AlarmMailTrapTxEnable, wtWebioEA12x6RelERPPortInputBicountInactivTimeout=wtWebioEA12x6RelERPPortInputBicountInactivTimeout, wtIpWatcher_24VAlert9=wtIpWatcher_24VAlert9, wtWebCount6PortInputCounterUnit=wtWebCount6PortInputCounterUnit, wtTrapReceiver2x2ActionTable=wtTrapReceiver2x2ActionTable, wtWebio=wtWebio, wtWebioEA2x2ERPOutputModeBit=wtWebioEA2x2ERPOutputModeBit, wtWebioEA2x2Alert15=wtWebioEA2x2Alert15, wtWebioEA12x12InputEntry=wtWebioEA12x12InputEntry, wtIpWatcher_24VDeviceLocation=wtIpWatcher_24VDeviceLocation, wtWebioEA24oemMfInternet=wtWebioEA24oemMfInternet, wtWebioEA12x6RelERPSessCntrlAdminPassword=wtWebioEA12x6RelERPSessCntrlAdminPassword, wtWebioEA12x6RelERPInputCounter=wtWebioEA12x6RelERPInputCounter, wtWebioEA12x6RelERPStTzStopHrs=wtWebioEA12x6RelERPStTzStopHrs, wtWebioEA12x6RelAlert13=wtWebioEA12x6RelAlert13, wtWebioEA2x2ERPDevice=wtWebioEA2x2ERPDevice, wtWebAlarm6x6MailServer=wtWebAlarm6x6MailServer, wtWebioEA12x12FTPEnable=wtWebioEA12x12FTPEnable, wtWebioEA2x2BinaryTcpServerLocalPort=wtWebioEA2x2BinaryTcpServerLocalPort, wtWebCount6UdpRemotePort=wtWebCount6UdpRemotePort, wtTrapReceiver2x2ActionSystemTimerTrigger=wtTrapReceiver2x2ActionSystemTimerTrigger, wtWebioEA6x6FTP=wtWebioEA6x6FTP, wtWebioEA24oemAlarmUdpPort=wtWebioEA24oemAlarmUdpPort, wtWebioEA12x6RelStTzStartWday=wtWebioEA12x6RelStTzStartWday, wtWebioEA12x6RelERPMfHotline=wtWebioEA12x6RelERPMfHotline, wtWebioEA12x6RelAlarmTcpIpAddr=wtWebioEA12x6RelAlarmTcpIpAddr, wtIpWatcherAlarmTcpReleaseText=wtIpWatcherAlarmTcpReleaseText, wtWebioEA2x2_24VSessCntrlPassword=wtWebioEA2x2_24VSessCntrlPassword, wtWebioEA12x12InputCounterClear=wtWebioEA12x12InputCounterClear, wtWebioEA12x6RelBinaryIfTable=wtWebioEA12x6RelBinaryIfTable, wtWebioEA2x2_24VAlert4=wtWebioEA2x2_24VAlert4, wtWebioEA12x6RelERPMailAuthentication=wtWebioEA12x6RelERPMailAuthentication, wtWebioEA24oemTsSyncTime=wtWebioEA24oemTsSyncTime, wtIpWatcherAlert13=wtIpWatcherAlert13, wtWebioEA12x12AlarmEnable=wtWebioEA12x12AlarmEnable, wtWebioEA6x6AlarmTcpPort=wtWebioEA6x6AlarmTcpPort, wtWebioEA2x2ERP_24VUdpEnable=wtWebioEA2x2ERP_24VUdpEnable, wtWebioEA2x2Alert6=wtWebioEA2x2Alert6, wtWebCount6StTzStartHrs=wtWebCount6StTzStartHrs, wtIpWatcher_24VPortPulseDuration=wtIpWatcher_24VPortPulseDuration, wtWebioEA12x6RelERPUdpRemotePort=wtWebioEA12x6RelERPUdpRemotePort, wtIpWatcherAlert10=wtIpWatcherAlert10, wtTrapReceiver2x2ButtonTable=wtTrapReceiver2x2ButtonTable, wtWebioEA2x2_24VPowerSupplyEnable=wtWebioEA2x2_24VPowerSupplyEnable, wtWebioEA12x6RelAlarmFtpReleaseText=wtWebioEA12x6RelAlarmFtpReleaseText, wtWebioEA12x6RelOutputPortEntry=wtWebioEA12x6RelOutputPortEntry, wtWebioEA24oemAlarmTcpText=wtWebioEA24oemAlarmTcpText, wtWebioEA2x2MailAuthentication=wtWebioEA2x2MailAuthentication, wtIpWatcher_24VSyslog=wtIpWatcher_24VSyslog, wtIpWatcherAlert2=wtIpWatcherAlert2, wtWebioEA2x2BinaryTcpClientInactivity=wtWebioEA2x2BinaryTcpClientInactivity, wtWebioEA2x2ERPAlert6=wtWebioEA2x2ERPAlert6, wtWebioEA6x6AlarmTimerCron=wtWebioEA6x6AlarmTimerCron, wtWebioEA2x2_24VAlert7=wtWebioEA2x2_24VAlert7, wtIpWatcherAlert22=wtIpWatcherAlert22, wtTrapReceiver2x2SnmpCommunityStringRead=wtTrapReceiver2x2SnmpCommunityStringRead, wtIpWatcher_24VMfDeviceTyp=wtIpWatcher_24VMfDeviceTyp, wtWebioEA2x2_24VPortInputMode=wtWebioEA2x2_24VPortInputMode, wtWebioEA24oemUdpRemotePort=wtWebioEA24oemUdpRemotePort, wtWebioEA12x6RelOutputs=wtWebioEA12x6RelOutputs, wtWebCount6SessCntrlPassword=wtWebCount6SessCntrlPassword, wtWebioEA6x6DnsServer2=wtWebioEA6x6DnsServer2, wtWebioEA2x2InputState=wtWebioEA2x2InputState, wtWebioEA2x2AlarmInterval=wtWebioEA2x2AlarmInterval, wtWebioEA12x6RelAlert24=wtWebioEA12x6RelAlert24, wtWebioEA12x6RelERPBinaryTcpClientInputTrigger=wtWebioEA12x6RelERPBinaryTcpClientInputTrigger, wtWebCount6PortInputFilter=wtWebCount6PortInputFilter, wtWebioEA24oemSessCntrlPassword=wtWebioEA24oemSessCntrlPassword, wtWebioEA12x6RelInputs=wtWebioEA12x6RelInputs, wtWebioEA2x2_24VBinaryConnectedPort=wtWebioEA2x2_24VBinaryConnectedPort, wtWebioEA2x2ERP_24VBinaryOperationMode=wtWebioEA2x2ERP_24VBinaryOperationMode, wtWebioEA12x12AlarmUdpText=wtWebioEA12x12AlarmUdpText, wtWebioEA6x6DeviceClock=wtWebioEA6x6DeviceClock, wtWebioEA12x12MfAddr=wtWebioEA12x12MfAddr, wtWebioEA2x2ERP_24VLCShutDownView=wtWebioEA2x2ERP_24VLCShutDownView, wtWebioEA12x6RelDiagErrorClear=wtWebioEA12x6RelDiagErrorClear, wtWebioEA12x6RelERPStTzStartWday=wtWebioEA12x6RelERPStTzStartWday, wtWebioEA6x6AlarmSystemTrigger=wtWebioEA6x6AlarmSystemTrigger, wtIpWatcher_24VUDP=wtIpWatcher_24VUDP, wtWebioEA12x6RelERPSnmpSystemTrapManagerIP=wtWebioEA12x6RelERPSnmpSystemTrapManagerIP, wtWebioEA2x2ERP_24VOutputEntry=wtWebioEA2x2ERP_24VOutputEntry, wtWebioEA2x2_24VOutputs=wtWebioEA2x2_24VOutputs, wtWebioEA24oemSessCntrlConfigMode=wtWebioEA24oemSessCntrlConfigMode, wtWebAlarm6x6DeviceLocation=wtWebAlarm6x6DeviceLocation, wtWebioEA2x2_24VAlarmMailAddr=wtWebioEA2x2_24VAlarmMailAddr, wtWebioEA12x6RelERPDiagErrorMessage=wtWebioEA12x6RelERPDiagErrorMessage, wtWebioEA24oemPortInputText=wtWebioEA24oemPortInputText, wtWebioEA12x12BinaryIfTable=wtWebioEA12x12BinaryIfTable, wtWebioEA6x6PortInputBicountInactivTimeout=wtWebioEA6x6PortInputBicountInactivTimeout, wtWebioEA2x2ERPTzEnable=wtWebioEA2x2ERPTzEnable, wtWebioEA12x6RelERPBinaryTable=wtWebioEA12x6RelERPBinaryTable, wtIpWatcher_24VTzEnable=wtIpWatcher_24VTzEnable, wtWebioEA12x6RelERPTzOffsetHrs=wtWebioEA12x6RelERPTzOffsetHrs, wtWebioEA2x2ERP_24VInputs=wtWebioEA2x2ERP_24VInputs, wtWebioEA12x12LoadControlView=wtWebioEA12x12LoadControlView, wtIpWatcherAlarmFtpTrapTxEnable=wtIpWatcherAlarmFtpTrapTxEnable, wtWebioEA12x6RelAlarmMailReleaseSubject=wtWebioEA12x6RelAlarmMailReleaseSubject, wtWebioEA12x6RelSnmpSystemTrapEnable=wtWebioEA12x6RelSnmpSystemTrapEnable, wtWebioEA12x6RelERPAlarmMailReleaseSubject=wtWebioEA12x6RelERPAlarmMailReleaseSubject, wtWebioEA2x2ERPBinaryTcpServerLocalPort=wtWebioEA2x2ERPBinaryTcpServerLocalPort, wtWebioEA6x6PortOutputSafetyState=wtWebioEA6x6PortOutputSafetyState, wtWebioEA2x2ERPMfDeviceTyp=wtWebioEA2x2ERPMfDeviceTyp, wtWebioEA2x2ERPBinaryConnectedIpAddr=wtWebioEA2x2ERPBinaryConnectedIpAddr, wtTrapReceiver2x2TimeServer2=wtTrapReceiver2x2TimeServer2, wtWebioEA6x6AlarmFtpFileName=wtWebioEA6x6AlarmFtpFileName, wtWebioEA24oemFTPEnable=wtWebioEA24oemFTPEnable, wtWebioEA2x2_24VAlarmFtpDataPort=wtWebioEA2x2_24VAlarmFtpDataPort, wtIpWatcher_24VDiag=wtIpWatcher_24VDiag, wtWebioEA12x12AlarmTcpText=wtWebioEA12x12AlarmTcpText, wtWebioEA2x2_24VPortInputName=wtWebioEA2x2_24VPortInputName, wtWebioEA2x2ERP_24VStTzStartMode=wtWebioEA2x2ERP_24VStTzStartMode, wtWebioEA24oemAlert20=wtWebioEA24oemAlert20, wtWebioEA12x6RelPortInputMode=wtWebioEA12x6RelPortInputMode, wtWebioEA6x6Alert3=wtWebioEA6x6Alert3, wtWebioEA6x6Outputs=wtWebioEA6x6Outputs, wtWebioEA6x6ClockMonth=wtWebioEA6x6ClockMonth, wtWebioEA2x2ERPPortLogicInputInverter=wtWebioEA2x2ERPPortLogicInputInverter, wtWebioEA2x2_24VTzEnable=wtWebioEA2x2_24VTzEnable, wtWebioEA2x2ERP_24VPorts=wtWebioEA2x2ERP_24VPorts, wtWebioEA2x2_24VTsEnable=wtWebioEA2x2_24VTsEnable, wtWebioEA2x2ERP_24VDnsServer2=wtWebioEA2x2ERP_24VDnsServer2, wtWebCount6Gateway=wtWebCount6Gateway, wtWebioEA2x2Alert24=wtWebioEA2x2Alert24, wtWebioEA24oemSessCntrlConfigPassword=wtWebioEA24oemSessCntrlConfigPassword, wtWebioEA2x2ERPTimeServer2=wtWebioEA2x2ERPTimeServer2, wtWebioEA2x2ERPDiagErrorCount=wtWebioEA2x2ERPDiagErrorCount, wtIpWatcher_24VUdpEnable=wtIpWatcher_24VUdpEnable, wtIpWatcher_24VAlert1=wtIpWatcher_24VAlert1, wtWebioEA6x6Alert12=wtWebioEA6x6Alert12, wtWebAlarm6x6FTPEnable=wtWebAlarm6x6FTPEnable, wtWebioEA24oemMailAdName=wtWebioEA24oemMailAdName, wtTrapReceiver2x2ActionIfEntry=wtTrapReceiver2x2ActionIfEntry, wtWebioEA2x2_24VOutputPortEntry=wtWebioEA2x2_24VOutputPortEntry, wtWebioEA12x6RelTsEnable=wtWebioEA12x6RelTsEnable, wtWebioEA2x2DeviceContact=wtWebioEA2x2DeviceContact, wtIpWatcherAlarmTcpTrapTxEnable=wtIpWatcherAlarmTcpTrapTxEnable, wtWebioEA12x6RelOutputState=wtWebioEA12x6RelOutputState, wtWebioEA24oemBinaryTcpClientServerHttpPort=wtWebioEA24oemBinaryTcpClientServerHttpPort, wtWebAlarm6x6=wtWebAlarm6x6, wtWebAlarm6x6OutputNo=wtWebAlarm6x6OutputNo, wtWebAlarm6x6HttpPort=wtWebAlarm6x6HttpPort, wtWebioEA24oemAlarmUdpText=wtWebioEA24oemAlarmUdpText, wtWebioEA2x2_24VDiagErrorCount=wtWebioEA2x2_24VDiagErrorCount, wtWebioEA2x2_24VAlert17=wtWebioEA2x2_24VAlert17, wtIpWatcherSessCntrlAdminPassword=wtIpWatcherSessCntrlAdminPassword, wtWebioEA6x6UdpEnable=wtWebioEA6x6UdpEnable, wtWebioEA2x2ERPBinaryTcpClientInterval=wtWebioEA2x2ERPBinaryTcpClientInterval, wtTrapReceiver2x2FTPEnable=wtTrapReceiver2x2FTPEnable, wtWebioEA12x12Network=wtWebioEA12x12Network, wtWebioEA2x2ERP_24VBinaryTcpClientApplicationMode=wtWebioEA2x2ERP_24VBinaryTcpClientApplicationMode, wtWebioEA12x12PortPulseDuration=wtWebioEA12x12PortPulseDuration, wtWebAlarm6x6AlertDiag=wtWebAlarm6x6AlertDiag, wtWebioEA6x6TzOffsetHrs=wtWebioEA6x6TzOffsetHrs, wtWebioEA6x6BinaryUdpPeerRemoteIpAddr=wtWebioEA6x6BinaryUdpPeerRemoteIpAddr, wtWebioEA2x2ERPAlert5=wtWebioEA2x2ERPAlert5, wtWebAlarm6x6MfInternet=wtWebAlarm6x6MfInternet, wtWebioEA2x2ERP_24VWayBackFTPPassword=wtWebioEA2x2ERP_24VWayBackFTPPassword, wtWebioEA2x2_24VAlert9=wtWebioEA2x2_24VAlert9, wtWebioEA2x2ERP_24VAlarmEntry=wtWebioEA2x2ERP_24VAlarmEntry, wtWebioEA2x2ERP_24VMfInternet=wtWebioEA2x2ERP_24VMfInternet, wtWebioEA12x12OutputEntry=wtWebioEA12x12OutputEntry, wtWebioEA12x6RelMfAddr=wtWebioEA12x6RelMfAddr, wtWebAlarm6x6InputPortEntry=wtWebAlarm6x6InputPortEntry, wtWebioEA12x6RelERPTimeServer2=wtWebioEA12x6RelERPTimeServer2, wtIpWatcher_24VStTzStopMode=wtIpWatcher_24VStTzStopMode, wtWebioEA2x2_24VTimeZone=wtWebioEA2x2_24VTimeZone, wtWebioEA2x2ERP_24VBasic=wtWebioEA2x2ERP_24VBasic, wtWebioEA12x6RelERPClockDay=wtWebioEA12x6RelERPClockDay, wtWebioEA12x12BinaryTcpClientApplicationMode=wtWebioEA12x12BinaryTcpClientApplicationMode, wtWebioEA6x6FTPOption=wtWebioEA6x6FTPOption, wtWebioEA2x2ERPStTzStartWday=wtWebioEA2x2ERPStTzStartWday, wtWebioEA2x2ERPWayBackFTPTimeOut=wtWebioEA2x2ERPWayBackFTPTimeOut, wtWebioEA2x2ERP_24VPortOutputName=wtWebioEA2x2ERP_24VPortOutputName, wtIpWatcherSnmpCommunityStringReadWrite=wtIpWatcherSnmpCommunityStringReadWrite, wtWebCount6PortInputCounterScale=wtWebCount6PortInputCounterScale, wtWebioEA12x6RelPortInputBicountPulsePolarity=wtWebioEA12x6RelPortInputBicountPulsePolarity, wtWebioEA2x2ERPPortInputText=wtWebioEA2x2ERPPortInputText, wtWebioEA6x6TzEnable=wtWebioEA6x6TzEnable, wtWebioEA2x2_24VAlert14=wtWebioEA2x2_24VAlert14, wtWebioEA2x2AlarmTable=wtWebioEA2x2AlarmTable, wtWebioEA2x2ERPTzOffsetHrs=wtWebioEA2x2ERPTzOffsetHrs, wtWebioEA6x6AlarmSyslogPort=wtWebioEA6x6AlarmSyslogPort, wtTrapReceiver2x2Alert2=wtTrapReceiver2x2Alert2, wtWebioEA2x2ERPInputValue=wtWebioEA2x2ERPInputValue, wtWebAlarm6x6OutputPortTable=wtWebAlarm6x6OutputPortTable, wtWebioEA2x2SetOutput=wtWebioEA2x2SetOutput, wtWebioEA12x6RelERPSessCntrlConfigMode=wtWebioEA12x6RelERPSessCntrlConfigMode, wtWebioEA2x2_24VAlarmTcpText=wtWebioEA2x2_24VAlarmTcpText, wtWebioEA12x6RelInputCounterClear=wtWebioEA12x6RelInputCounterClear, wtWebioEA2x2_24VAlert8=wtWebioEA2x2_24VAlert8, wtWebioEA2x2Alert19=wtWebioEA2x2Alert19, wtWebAlarm6x6OutputEntry=wtWebAlarm6x6OutputEntry, wtWebioEA24oemConfig=wtWebioEA24oemConfig, wtWebioEA24oemPortLogicFunction=wtWebioEA24oemPortLogicFunction, wtIpWatcher_24VStTzOffsetHrs=wtIpWatcher_24VStTzOffsetHrs, wtIpWatcher_24VIpList=wtIpWatcher_24VIpList, wtTrapReceiver2x2ActionUdpPort=wtTrapReceiver2x2ActionUdpPort, wtWebioEA2x2ERP_24VInOut=wtWebioEA2x2ERP_24VInOut, wtWebioEA12x6RelMail=wtWebioEA12x6RelMail, wtWebioEA24oemOutputs=wtWebioEA24oemOutputs, wtWebAlarm6x6StTzStartHrs=wtWebAlarm6x6StTzStartHrs, wtWebioEA24oemStTzStopHrs=wtWebioEA24oemStTzStopHrs, wtIpWatcherFTPOption=wtIpWatcherFTPOption, wtIpWatcher_24VInputCounterClear=wtIpWatcher_24VInputCounterClear, wtWebAlarm6x6StTzOffsetHrs=wtWebAlarm6x6StTzOffsetHrs, wtWebAlarm6x6TimeZone=wtWebAlarm6x6TimeZone, wtWebioEA2x2ERPLoadControlView=wtWebioEA2x2ERPLoadControlView, wtWebioEA6x6InputPortTable=wtWebioEA6x6InputPortTable, wtWebioEA24oemOutputState=wtWebioEA24oemOutputState, wtWebioEA6x6Alert4=wtWebioEA6x6Alert4, wtWebioEA6x6Gateway=wtWebioEA6x6Gateway, wtIpWatcherAlert6=wtIpWatcherAlert6, wtWebioEA12x12DiagErrorClear=wtWebioEA12x12DiagErrorClear, wtTrapReceiver2x2OutEvOutputs=wtTrapReceiver2x2OutEvOutputs, wtWebioEA24oemPortInputFilter=wtWebioEA24oemPortInputFilter, wtTrapReceiver2x2SystemTimerEntry=wtTrapReceiver2x2SystemTimerEntry, wtWebioEA12x6RelERPDnsServer1=wtWebioEA12x6RelERPDnsServer1, wtWebioEA2x2ERPBinaryTcpServerClientHttpPort=wtWebioEA2x2ERPBinaryTcpServerClientHttpPort, wtWebioEA24oemAlarmSyslogText=wtWebioEA24oemAlarmSyslogText, wtWebCount6ReportNo=wtWebCount6ReportNo, wtWebioEA2x2_24VDeviceContact=wtWebioEA2x2_24VDeviceContact, wtWebioEA12x12DiagErrorCount=wtWebioEA12x12DiagErrorCount, wtWebAlarm6x6Alert22=wtWebAlarm6x6Alert22, wtIpWatcherOutputEntry=wtIpWatcherOutputEntry, wtIpWatcherIpListName=wtIpWatcherIpListName, wtIpWatcher_24VStTzStopMin=wtIpWatcher_24VStTzStopMin, wtWebioEA2x2ERPManufact=wtWebioEA2x2ERPManufact, wtWebioEA2x2ERPPortPulseDuration=wtWebioEA2x2ERPPortPulseDuration, wtWebioEA12x6RelBinaryConnectedIpAddr=wtWebioEA12x6RelBinaryConnectedIpAddr, wtIpWatcher_24VClockDay=wtIpWatcher_24VClockDay, wtWebioEA2x2_24VDnsServer1=wtWebioEA2x2_24VDnsServer1, wtWebioEA6x6Alert10=wtWebioEA6x6Alert10, wtWebioEA12x6RelInOut=wtWebioEA12x6RelInOut, wtWebioEA12x6RelAlert19=wtWebioEA12x6RelAlert19)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebCount6UdpAdminPort=wtWebCount6UdpAdminPort, wtWebAlarm6x6AlarmTcpText=wtWebAlarm6x6AlarmTcpText, wtWebioEA6x6MailAuthentication=wtWebioEA6x6MailAuthentication, wtWebioEA12x6RelFTPEnable=wtWebioEA12x6RelFTPEnable, wtIpWatcher_24VAlarmIfTable=wtIpWatcher_24VAlarmIfTable, wtWebioEA12x6RelAlarmNo=wtWebioEA12x6RelAlarmNo, wtWebioEA12x12Alert22=wtWebioEA12x12Alert22, wtWebioEA24oemBinaryUdpPeerInputTrigger=wtWebioEA24oemBinaryUdpPeerInputTrigger, wtWebioEA12x12AddConfig=wtWebioEA12x12AddConfig, wtWebioEA6x6SnmpSystemTrapManagerIP=wtWebioEA6x6SnmpSystemTrapManagerIP, wtWebioEA2x2ERP_24VFTPEnable=wtWebioEA2x2ERP_24VFTPEnable, wtIpWatcher_24VStTzStartMin=wtIpWatcher_24VStTzStartMin, wtWebioEA12x6RelERPBinaryUdpPeerRemoteIpAddr=wtWebioEA12x6RelERPBinaryUdpPeerRemoteIpAddr, wtIpWatcherSessCntrlConfigPassword=wtIpWatcherSessCntrlConfigPassword, wtIpWatcherAlarmUdpTrgClearText=wtIpWatcherAlarmUdpTrgClearText, wtWebioEA6x6PortInputBicountPulsePolarity=wtWebioEA6x6PortInputBicountPulsePolarity, wtWebioEA2x2ERPSyslogSystemMessagesEnable=wtWebioEA2x2ERPSyslogSystemMessagesEnable, wtWebioEA12x12AlarmSyslogPort=wtWebioEA12x12AlarmSyslogPort, wtWebioEA2x2ERP_24VFTPUserName=wtWebioEA2x2ERP_24VFTPUserName, wtIpWatcherIpListPort=wtIpWatcherIpListPort, wtWebioEA2x2ERP_24VMailAdName=wtWebioEA2x2ERP_24VMailAdName, wtWebioEA12x12Alert15=wtWebioEA12x12Alert15, wtWebAlarm6x6AlarmSyslogTrgClearText=wtWebAlarm6x6AlarmSyslogTrgClearText, wtWebioEA12x6RelPortInputName=wtWebioEA12x6RelPortInputName, wtIpWatcherStTzStopWday=wtIpWatcherStTzStopWday, wtWebioEA2x2ERP_24VSnmpCommunityStringRead=wtWebioEA2x2ERP_24VSnmpCommunityStringRead, wtWebioEA2x2ERP_24VOutputPortTable=wtWebioEA2x2ERP_24VOutputPortTable, wtWebioEA2x2ERP_24VLoadControlEnable=wtWebioEA2x2ERP_24VLoadControlEnable, wtWebAlarm6x6StTzStartMin=wtWebAlarm6x6StTzStartMin, wtWebioEA12x6RelBinaryTcpServerApplicationMode=wtWebioEA12x6RelBinaryTcpServerApplicationMode, wtWebioEA2x2PortLogicOutputInverter=wtWebioEA2x2PortLogicOutputInverter, wtWebioEA2x2ERPUdpAdminPort=wtWebioEA2x2ERPUdpAdminPort, wtWebioEA2x2_24VBinaryTcpClientServerHttpPort=wtWebioEA2x2_24VBinaryTcpClientServerHttpPort, wtWebioEA2x2_24VMfHotline=wtWebioEA2x2_24VMfHotline, wtWebioEA2x2ERP_24VBinaryIfTable=wtWebioEA2x2ERP_24VBinaryIfTable, wtWebAlarm6x6SessCntrlConfigPassword=wtWebAlarm6x6SessCntrlConfigPassword, wtWebioEA12x6RelERPFTP=wtWebioEA12x6RelERPFTP, wtTrapReceiver2x2Alert5=wtTrapReceiver2x2Alert5, wtWebioEA12x12Alert8=wtWebioEA12x12Alert8, wtWebCount6StTzStopWday=wtWebCount6StTzStopWday, wtIpWatcher_24VAlarmSnmpManagerIP=wtIpWatcher_24VAlarmSnmpManagerIP, wtWebioEA2x2Alert7=wtWebioEA2x2Alert7, wtIpWatcherInputValue=wtIpWatcherInputValue, wtIpWatcher_24VAlarmSyslogTrapTxEnable=wtIpWatcher_24VAlarmSyslogTrapTxEnable, wtWebioEA24oemAlarmSyslogPort=wtWebioEA24oemAlarmSyslogPort, wtWebCount6Alert12=wtWebCount6Alert12, wtWebioEA12x6RelERPOutputs=wtWebioEA12x6RelERPOutputs, wtIpWatcher_24VAlert33=wtIpWatcher_24VAlert33, wtIpWatcherMfHotline=wtIpWatcherMfHotline, wtWebioEA6x6BinaryTcpClientLocalPort=wtWebioEA6x6BinaryTcpClientLocalPort, wtIpWatcherAlarmMailText=wtIpWatcherAlarmMailText, wtWebioEA2x2BinaryModeCount=wtWebioEA2x2BinaryModeCount, wtWebioEA24oemOutputPortTable=wtWebioEA24oemOutputPortTable, wtWebioEA24oemInputCounterClear=wtWebioEA24oemInputCounterClear, wtWebAlarm6x6OutputValue=wtWebAlarm6x6OutputValue, wtWebCount6ReportCount=wtWebCount6ReportCount, wtWebioEA12x6RelERPAlarmSystemTrigger=wtWebioEA12x6RelERPAlarmSystemTrigger, wtWebAlarm6x6AlarmGlobalEnable=wtWebAlarm6x6AlarmGlobalEnable, wtWebioEA2x2Alarm=wtWebioEA2x2Alarm, wtTrapReceiver2x2StTzStartWday=wtTrapReceiver2x2StTzStartWday, wtWebioEA2x2ERP_24VDeviceClock=wtWebioEA2x2ERP_24VDeviceClock, wtWebioEA2x2SessCntrl=wtWebioEA2x2SessCntrl, wtIpWatcherStTzStartMonth=wtIpWatcherStTzStartMonth, wtWebioEA2x2ERP_24VDnsServer1=wtWebioEA2x2ERP_24VDnsServer1, wtWebioEA12x12AlarmOutputTrigger=wtWebioEA12x12AlarmOutputTrigger, wtWebioEA24oemStTzStopMin=wtWebioEA24oemStTzStopMin, wtIpWatcher_24VInputEntry=wtIpWatcher_24VInputEntry, wtWebCount6Alert9=wtWebCount6Alert9, wtWebioEA12x12SyslogSystemMessagesEnable=wtWebioEA12x12SyslogSystemMessagesEnable, wtWebCount6IpAddress=wtWebCount6IpAddress, wtWebCount6Alert8=wtWebCount6Alert8, wtIpWatcher=wtIpWatcher, wtWebioEA2x2SessCntrlPassword=wtWebioEA2x2SessCntrlPassword, wtWebAlarm6x6AlarmAckPort=wtWebAlarm6x6AlarmAckPort, wtIpWatcher_24VAlarmSyslogPort=wtIpWatcher_24VAlarmSyslogPort, wtWebAlarm6x6AlarmTcpIpAddr=wtWebAlarm6x6AlarmTcpIpAddr, wtWebioEA2x2ERPAlarmIfTable=wtWebioEA2x2ERPAlarmIfTable, wtIpWatcherHTTP=wtIpWatcherHTTP, wtWebioEA12x12LoadControlEnable=wtWebioEA12x12LoadControlEnable, wtWebioEA12x6RelInputTable=wtWebioEA12x6RelInputTable, wtWebioEA12x6RelERPAlarmEnable=wtWebioEA12x6RelERPAlarmEnable, wtWebioEA24oemTimeServer2=wtWebioEA24oemTimeServer2, wtIpWatcher_24VAlert23=wtIpWatcher_24VAlert23, wtWebioEA2x2AlarmMaxCounterValue=wtWebioEA2x2AlarmMaxCounterValue, wtWebioEA24oemSyslogServerPort=wtWebioEA24oemSyslogServerPort, wtWebAlarm6x6AlarmMailSubject=wtWebAlarm6x6AlarmMailSubject, wtWebioEA2x2ERP_24VBinaryUdpPeerRemoteIpAddr=wtWebioEA2x2ERP_24VBinaryUdpPeerRemoteIpAddr, wtWebioEA24oemBinaryUdpPeerLocalPort=wtWebioEA24oemBinaryUdpPeerLocalPort, wtWebioEA2x2_24VAlarmOutputTrigger=wtWebioEA2x2_24VAlarmOutputTrigger, wtWebioEA12x12MfHotline=wtWebioEA12x12MfHotline, wtIpWatcher_24VClockYear=wtIpWatcher_24VClockYear, wtWebioEA6x6BinaryUdpPeerRemotePort=wtWebioEA6x6BinaryUdpPeerRemotePort, wtWebCount6SnmpCommunityStringRead=wtWebCount6SnmpCommunityStringRead, wtWebioEA12x12Alert1=wtWebioEA12x12Alert1, wtWebioEA12x6RelERPDiag=wtWebioEA12x6RelERPDiag, wtWebioEA2x2_24VOutputModeTable=wtWebioEA2x2_24VOutputModeTable, wtWebioEA2x2ERPFTPPassword=wtWebioEA2x2ERPFTPPassword, wtWebCount6PortInputText=wtWebCount6PortInputText, wtWebioEA2x2LCShutDownView=wtWebioEA2x2LCShutDownView, wtWebioEA2x2Alert16=wtWebioEA2x2Alert16, wtWebioEA12x6RelAlert10=wtWebioEA12x6RelAlert10, wtWebCount6StTzStartWday=wtWebCount6StTzStartWday, wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText=wtWebioEA12x6RelERPAlarmSnmpTrapReleaseText, wtWebioEA2x2TsEnable=wtWebioEA2x2TsEnable, wtWebCount6PortInputPulsePolarity=wtWebCount6PortInputPulsePolarity, wtWebioEA2x2_24VBinaryTcpClientApplicationMode=wtWebioEA2x2_24VBinaryTcpClientApplicationMode, wtWebCount6ReportRateOfChangeMode=wtWebCount6ReportRateOfChangeMode, wtWebioEA12x12PortInputFilter=wtWebioEA12x12PortInputFilter, wtWebioEA12x6RelERPAlert6=wtWebioEA12x6RelERPAlert6, wtWebioEA6x6Startup=wtWebioEA6x6Startup, wtWebAlarm6x6Alert3=wtWebAlarm6x6Alert3, wtIpWatcherInputPortEntry=wtIpWatcherInputPortEntry, wtWebioEA2x2StTzStartMonth=wtWebioEA2x2StTzStartMonth, wtWebAlarm6x6TzEnable=wtWebAlarm6x6TzEnable, wtWebioEA2x2_24VBinaryModeNo=wtWebioEA2x2_24VBinaryModeNo, wtWebioEA12x6RelAlert17=wtWebioEA12x6RelAlert17, wtWebioEA2x2ERPTimeServer=wtWebioEA2x2ERPTimeServer, wtTrapReceiver2x2StTzOffsetMin=wtTrapReceiver2x2StTzOffsetMin, wtWebioEA6x6OutputModeEntry=wtWebioEA6x6OutputModeEntry, wtWebioEA2x2ERP_24VWayBackFTPTimeOut=wtWebioEA2x2ERP_24VWayBackFTPTimeOut, wtWebioEA2x2ERP_24VAlert21=wtWebioEA2x2ERP_24VAlert21, wtWebioEA2x2ERP_24VBinaryTcpServerApplicationMode=wtWebioEA2x2ERP_24VBinaryTcpServerApplicationMode, wtWebioEA24oemAlert23=wtWebioEA24oemAlert23, wtWebioEA2x2ERPSyslogServerIP=wtWebioEA2x2ERPSyslogServerIP, wtWebioEA2x2_24VAlarmTable=wtWebioEA2x2_24VAlarmTable, wtIpWatcher_24VIpAddress=wtIpWatcher_24VIpAddress, wtWebAlarm6x6SessCntrlLogout=wtWebAlarm6x6SessCntrlLogout, wtIpWatcher_24VFTPPassword=wtIpWatcher_24VFTPPassword, wtTrapReceiver2x2PortInputName=wtTrapReceiver2x2PortInputName, wtWebioEA12x12Alert23=wtWebioEA12x12Alert23, wtIpWatcherAlarmCounterClear=wtIpWatcherAlarmCounterClear, wtWebAlarm6x6Alert1=wtWebAlarm6x6Alert1, wtWebioEA6x6BinaryIfEntry=wtWebioEA6x6BinaryIfEntry, wtWebioEA6x6AlarmNo=wtWebioEA6x6AlarmNo, wtWebioEA2x2ERPHttpPort=wtWebioEA2x2ERPHttpPort, wtTrapReceiver2x2Mail=wtTrapReceiver2x2Mail, wtWebioEA24oemAlert7=wtWebioEA24oemAlert7, wtIpWatcherUdpRemotePort=wtIpWatcherUdpRemotePort, wtWebioEA2x2ERP_24VSyslogServerPort=wtWebioEA2x2ERP_24VSyslogServerPort, wtWebCount6DiagErrorIndex=wtWebCount6DiagErrorIndex, wtWebioEA12x6RelStTzStartMin=wtWebioEA12x6RelStTzStartMin, wtWebioEA2x2Alert2=wtWebioEA2x2Alert2, wtWebioEA12x12PortInputMode=wtWebioEA12x12PortInputMode, wtTrapReceiver2x2InputTable=wtTrapReceiver2x2InputTable, wtWebAlarm6x6AlarmTcpPort=wtWebAlarm6x6AlarmTcpPort, wtIpWatcher_24VTimeServer=wtIpWatcher_24VTimeServer, wtIpWatcher_24VStTzOffsetMin=wtIpWatcher_24VStTzOffsetMin, wtWebioEA2x2StTzStopMin=wtWebioEA2x2StTzStopMin, wtWebioEA12x6RelAlert14=wtWebioEA12x6RelAlert14, wtIpWatcherPortOutputName=wtIpWatcherPortOutputName, wtIpWatcherAlert9=wtIpWatcherAlert9, wtWebioEA12x6RelERPFTPServerIP=wtWebioEA12x6RelERPFTPServerIP, wtWebioEA24oemFTPServerIP=wtWebioEA24oemFTPServerIP, wtWebioEA12x6RelAlarmSystemTrigger=wtWebioEA12x6RelAlarmSystemTrigger, wtWebioEA12x6RelStTzStopHrs=wtWebioEA12x6RelStTzStopHrs, wtWebioEA2x2ERPAlarmSyslogReleaseText=wtWebioEA2x2ERPAlarmSyslogReleaseText, wtWebioEA2x2_24VConfig=wtWebioEA2x2_24VConfig, wtIpWatcherStTzEnable=wtIpWatcherStTzEnable, wtWebioEA2x2OutputValue=wtWebioEA2x2OutputValue, wtWebAlarm6x6AlarmSnmpTrapTrgClearText=wtWebAlarm6x6AlarmSnmpTrapTrgClearText, wtWebioEA12x6RelAlert16=wtWebioEA12x6RelAlert16, wtWebioEA6x6DiagErrorIndex=wtWebioEA6x6DiagErrorIndex, wtIpWatcherAlert30=wtIpWatcherAlert30, wtTrapReceiver2x2WatchListName=wtTrapReceiver2x2WatchListName, wtWebioEA2x2ERPInputCounter=wtWebioEA2x2ERPInputCounter, wtWebioEA12x12MfInternet=wtWebioEA12x12MfInternet, wtWebioEA2x2ERP_24VAlarmUdpIpAddr=wtWebioEA2x2ERP_24VAlarmUdpIpAddr, wtIpWatcherAlarmFtpDataPort=wtIpWatcherAlarmFtpDataPort, wtWebCount6DnsServer2=wtWebCount6DnsServer2, wtWebioEA2x2ERP_24VBinaryTcpClientServerHttpPort=wtWebioEA2x2ERP_24VBinaryTcpClientServerHttpPort, wtWebioEA24oemInputValue=wtWebioEA24oemInputValue, wtWebioEA2x2MailEnable=wtWebioEA2x2MailEnable, wtWebioEA2x2_24VBinaryIfEntry=wtWebioEA2x2_24VBinaryIfEntry, wtWebAlarm6x6AlarmSnmpTrapReleaseText=wtWebAlarm6x6AlarmSnmpTrapReleaseText, wtWebioEA12x12OutputNo=wtWebioEA12x12OutputNo, wtWebioEA12x12AlarmMailText=wtWebioEA12x12AlarmMailText, wtWebioEA2x2BinaryUdpPeerInterval=wtWebioEA2x2BinaryUdpPeerInterval, wtWebioEA12x6RelHttpPort=wtWebioEA12x6RelHttpPort, wtIpWatcherStTzStartMode=wtIpWatcherStTzStartMode, wtWebioEA6x6MfAddr=wtWebioEA6x6MfAddr, wtWebioEA2x2_24VSessCntrlConfigPassword=wtWebioEA2x2_24VSessCntrlConfigPassword, wtWebioEA12x6RelERPDeviceContact=wtWebioEA12x6RelERPDeviceContact, wtWebAlarm6x6Device=wtWebAlarm6x6Device, wtIpWatcher_24VMfInternet=wtIpWatcher_24VMfInternet, wtWebioEA12x6RelERPClockMin=wtWebioEA12x6RelERPClockMin, wtWebioEA24oemAlert11=wtWebioEA24oemAlert11, wtWebioEA2x2ERPTimeDate=wtWebioEA2x2ERPTimeDate, wtWebCount6=wtWebCount6, wtWebioEA12x12StTzStopMode=wtWebioEA12x12StTzStopMode, wtWebioEA6x6AlarmFtpDataPort=wtWebioEA6x6AlarmFtpDataPort, wtWebioEA2x2ERPAlarmTcpText=wtWebioEA2x2ERPAlarmTcpText, wtWebioEA2x2PortInputMode=wtWebioEA2x2PortInputMode, wtWebCount6UDP=wtWebCount6UDP, wtWebioEA2x2ERPDeviceName=wtWebioEA2x2ERPDeviceName, wtIpWatcher_24VUdpRemotePort=wtIpWatcher_24VUdpRemotePort, wtWebioEA24oemTimeServer1=wtWebioEA24oemTimeServer1, wtWebioEA2x2MailReply=wtWebioEA2x2MailReply, wtWebioEA6x6AlarmSnmpManagerIP=wtWebioEA6x6AlarmSnmpManagerIP, wtWebioEA2x2SnmpSystemTrapEnable=wtWebioEA2x2SnmpSystemTrapEnable, wtWebCount6Inputs=wtWebCount6Inputs, wtWebioEA12x6RelERPMailEnable=wtWebioEA12x6RelERPMailEnable, wtWebioEA2x2ERPMfName=wtWebioEA2x2ERPMfName, wtIpWatcher_24VDeviceText=wtIpWatcher_24VDeviceText, wtTrapReceiver2x2Diag=wtTrapReceiver2x2Diag, wtWebAlarm6x6AlarmFtpReleaseText=wtWebAlarm6x6AlarmFtpReleaseText, wtIpWatcherClockMin=wtIpWatcherClockMin, wtIpWatcherBasic=wtIpWatcherBasic, wtIpWatcherGateway=wtIpWatcherGateway, wtIpWatcherMailAdName=wtIpWatcherMailAdName, wtIpWatcher_24VHttpPort=wtIpWatcher_24VHttpPort, wtWebioEA2x2ERP_24VAlarmFtpText=wtWebioEA2x2ERP_24VAlarmFtpText, wtTrapReceiver2x2ActionFtpFileName=wtTrapReceiver2x2ActionFtpFileName, wtWebCount6Alert4=wtWebCount6Alert4, wtTrapReceiver2x2OutputValue=wtTrapReceiver2x2OutputValue, wtWebioEA2x2FTPAccount=wtWebioEA2x2FTPAccount, wtWebAlarm6x6SnmpCommunityStringRead=wtWebAlarm6x6SnmpCommunityStringRead, wtWebAlarm6x6FTPServerIP=wtWebAlarm6x6FTPServerIP, wtWebAlarm6x6AlarmCounterClear=wtWebAlarm6x6AlarmCounterClear, wtTrapReceiver2x2StTzStartMode=wtTrapReceiver2x2StTzStartMode, wtWebioEA6x6OutputPortEntry=wtWebioEA6x6OutputPortEntry, wtWebioEA6x6TimeZone=wtWebioEA6x6TimeZone, wtIpWatcher_24VAlert20=wtIpWatcher_24VAlert20, wtWebioEA2x2ERP_24VAddConfig=wtWebioEA2x2ERP_24VAddConfig, wtIpWatcher_24VAlarmUdpTrgClearText=wtIpWatcher_24VAlarmUdpTrgClearText, wtWebioEA12x6RelERPFTPEnable=wtWebioEA12x6RelERPFTPEnable, wtWebioEA2x2ERP_24VMfName=wtWebioEA2x2ERP_24VMfName, wtWebioEA2x2ERP_24VBinaryUdpPeerApplicationMode=wtWebioEA2x2ERP_24VBinaryUdpPeerApplicationMode, wtIpWatcherAlarmUdpTrapTxEnable=wtIpWatcherAlarmUdpTrapTxEnable, wtWebioEA2x2BinaryUdpPeerLocalPort=wtWebioEA2x2BinaryUdpPeerLocalPort, wtWebioEA24oemOutputNo=wtWebioEA24oemOutputNo, wtWebioEA12x12AlertDiag=wtWebioEA12x12AlertDiag, wtWebAlarm6x6Alert25=wtWebAlarm6x6Alert25, wtTrapReceiver2x2ActionGlobalEnable=wtTrapReceiver2x2ActionGlobalEnable, wtWebioEA6x6Inputs=wtWebioEA6x6Inputs, wtWebioEA12x12SNMP=wtWebioEA12x12SNMP, wtWebioEA2x2AlarmFtpReleaseText=wtWebioEA2x2AlarmFtpReleaseText, wtWebioEA6x6InputValue=wtWebioEA6x6InputValue, wtWebioEA2x2ERP_24VDevice=wtWebioEA2x2ERP_24VDevice, wtWebioEA2x2PortOutputSafetyState=wtWebioEA2x2PortOutputSafetyState, wtWebAlarm6x6DeviceContact=wtWebAlarm6x6DeviceContact, wtWebioEA12x6RelERPPortLogicInputMask=wtWebioEA12x6RelERPPortLogicInputMask, wtIpWatcherTsEnable=wtIpWatcherTsEnable, wtWebioEA12x6RelERPAlarmFtpDataPort=wtWebioEA12x6RelERPAlarmFtpDataPort, wtWebioEA2x2ERP_24VMailServer=wtWebioEA2x2ERP_24VMailServer, wtWebioEA2x2ERP_24VAlert11=wtWebioEA2x2ERP_24VAlert11, wtWebioEA2x2ERP_24VFTPAccount=wtWebioEA2x2ERP_24VFTPAccount, wtIpWatcherAlarmTcpPort=wtIpWatcherAlarmTcpPort, wtWebioEA2x2ERP_24VPortPulsePolarity=wtWebioEA2x2ERP_24VPortPulsePolarity, wtWebAlarm6x6UdpRemotePort=wtWebAlarm6x6UdpRemotePort, wtIpWatcherOutputState=wtIpWatcherOutputState, wtWebAlarm6x6Alert16=wtWebAlarm6x6Alert16, wtWebioEA12x6RelERPAlert21=wtWebioEA12x6RelERPAlert21, wtWebioEA12x12MailAuthentication=wtWebioEA12x12MailAuthentication, wtWebioEA24oemBasic=wtWebioEA24oemBasic)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA2x2_24VPortInputBicountInactivTimeout=wtWebioEA2x2_24VPortInputBicountInactivTimeout, wtWebioEA2x2ERP_24VManufact=wtWebioEA2x2ERP_24VManufact, wtWebioEA2x2ERP_24VAlert18=wtWebioEA2x2ERP_24VAlert18, wtWebioEA24oemAlarmFtpDataPort=wtWebioEA24oemAlarmFtpDataPort, wtWebioEA12x12FTPServerControlPort=wtWebioEA12x12FTPServerControlPort, wtWebioEA2x2ERP_24VClockHrs=wtWebioEA2x2ERP_24VClockHrs, wtWebioEA2x2ERP_24VTzOffsetMin=wtWebioEA2x2ERP_24VTzOffsetMin, wtWebioEA2x2_24VSessCntrlAdminPassword=wtWebioEA2x2_24VSessCntrlAdminPassword, wtIpWatcherIpList=wtIpWatcherIpList, wtWebioEA2x2ERPBinaryTable=wtWebioEA2x2ERPBinaryTable, wtWebioEA2x2ERP_24VOutputTable=wtWebioEA2x2ERP_24VOutputTable, wtWebioEA12x12AlarmFtpText=wtWebioEA12x12AlarmFtpText, wtWebioEA12x6RelERPOutputMode=wtWebioEA12x6RelERPOutputMode, wtWebioEA12x12Alert17=wtWebioEA12x12Alert17, wtTrapReceiver2x2WatchListTrapNo=wtTrapReceiver2x2WatchListTrapNo, wtWebioEA2x2ERP_24VAlarmSyslogReleaseText=wtWebioEA2x2ERP_24VAlarmSyslogReleaseText, wtWebioEA6x6BinaryEntry=wtWebioEA6x6BinaryEntry, wtTrapReceiver2x2InputState=wtTrapReceiver2x2InputState, wtWebioEA6x6Alert2=wtWebioEA6x6Alert2, wtWebioEA12x12PortInputName=wtWebioEA12x12PortInputName, wtIpWatcher_24VTimeServer1=wtIpWatcher_24VTimeServer1, wtWebAlarm6x6Alert18=wtWebAlarm6x6Alert18, wtWebioEA6x6Alert21=wtWebioEA6x6Alert21, wtWebioEA2x2_24VFTPOption=wtWebioEA2x2_24VFTPOption, wtIpWatcherUdpEnable=wtIpWatcherUdpEnable, wtWebioEA12x12MailAuthUser=wtWebioEA12x12MailAuthUser, wtWebioEA2x2ERP_24VAlarmOutputTrigger=wtWebioEA2x2ERP_24VAlarmOutputTrigger, wtIpWatcherAlert17=wtIpWatcherAlert17, wtWebioEA2x2_24VBinaryTcpServerLocalPort=wtWebioEA2x2_24VBinaryTcpServerLocalPort, wtWebioEA2x2ERP_24VPortInputBicountPulsePolarity=wtWebioEA2x2ERP_24VPortInputBicountPulsePolarity, wtIpWatcherAlarmTable=wtIpWatcherAlarmTable, wtWebCount6ReportGlobalEnable=wtWebCount6ReportGlobalEnable, wtWebioEA2x2_24VMailReply=wtWebioEA2x2_24VMailReply, wtWebioEA12x12BinaryEntry=wtWebioEA12x12BinaryEntry, wtWebioEA12x6RelSubnetMask=wtWebioEA12x6RelSubnetMask, wtWebAlarm6x6StTzStartWday=wtWebAlarm6x6StTzStartWday, wtWebioEA2x2ERPMailReply=wtWebioEA2x2ERPMailReply, wtWebioEA2x2ERPBinaryUdpPeerInterval=wtWebioEA2x2ERPBinaryUdpPeerInterval, wtTrapReceiver2x2SNMP=wtTrapReceiver2x2SNMP, wtWebAlarm6x6FTPPassword=wtWebAlarm6x6FTPPassword, wtIpWatcherAlarmFtpTrgClearText=wtIpWatcherAlarmFtpTrgClearText, wtWebioEA6x6MailEnable=wtWebioEA6x6MailEnable, wtWebioEA6x6DiagBinaryError=wtWebioEA6x6DiagBinaryError, wtWebioEA12x6RelERPAlarmMailText=wtWebioEA12x6RelERPAlarmMailText, wtWebioEA2x2ERPAlertDiag=wtWebioEA2x2ERPAlertDiag, wtWebioEA24oemLoadControlEnable=wtWebioEA24oemLoadControlEnable, wtWebioEA24oemAlertDiag=wtWebioEA24oemAlertDiag, wtIpWatcher_24VIpListIfTable=wtIpWatcher_24VIpListIfTable, wtWebioEA2x2ERP_24VAlarmSnmpManagerIP=wtWebioEA2x2ERP_24VAlarmSnmpManagerIP, wtWebioEA2x2BinaryTcpClientInterval=wtWebioEA2x2BinaryTcpClientInterval, wtWebioEA2x2AlarmMailText=wtWebioEA2x2AlarmMailText, wtWebioEA6x6Alert15=wtWebioEA6x6Alert15, wtWebioEA12x6RelAlarmMaxCounterValue=wtWebioEA12x6RelAlarmMaxCounterValue, wtIpWatcher_24VDiagBinaryError=wtIpWatcher_24VDiagBinaryError, wtWebAlarm6x6DiagErrorClear=wtWebAlarm6x6DiagErrorClear, wtIpWatcherIpListService=wtIpWatcherIpListService, wtWebioEA12x12DeviceContact=wtWebioEA12x12DeviceContact, wtWebioEA24oemAlert16=wtWebioEA24oemAlert16, wtWebioEA24oemDiagErrorCount=wtWebioEA24oemDiagErrorCount, wtWebioEA2x2InputTable=wtWebioEA2x2InputTable, wtWebioEA24oem=wtWebioEA24oem, wtWebCount6MailAdName=wtWebCount6MailAdName, wtWebioEA12x6RelOutputModeEntry=wtWebioEA12x6RelOutputModeEntry, wtWebioEA2x2ERPBinaryUdpPeerRemoteIpAddr=wtWebioEA2x2ERPBinaryUdpPeerRemoteIpAddr, wtIpWatcher_24VAlarmInterval=wtIpWatcher_24VAlarmInterval, wtIpWatcher_24VMailAdName=wtIpWatcher_24VMailAdName, wtWebAlarm6x6StTzEnable=wtWebAlarm6x6StTzEnable, wtIpWatcherAlert25=wtIpWatcherAlert25, wtWebioEA6x6BinaryTcpClientServerIpAddr=wtWebioEA6x6BinaryTcpClientServerIpAddr, wtWebioEA2x2AlarmUdpText=wtWebioEA2x2AlarmUdpText, wtWebioEA2x2AlarmOutputTrigger=wtWebioEA2x2AlarmOutputTrigger, wtWebioEA2x2ERPSyslogServerPort=wtWebioEA2x2ERPSyslogServerPort, wtWebioEA2x2_24VStTzEnable=wtWebioEA2x2_24VStTzEnable, wtWebioEA12x12PortOutputGroupMode=wtWebioEA12x12PortOutputGroupMode, wtWebAlarm6x6SessCntrlPassword=wtWebAlarm6x6SessCntrlPassword, wtWebAlarm6x6ClockMin=wtWebAlarm6x6ClockMin, wtTrapReceiver2x2PortButtonEnable=wtTrapReceiver2x2PortButtonEnable, wtWebioEA2x2ERPAlarmSyslogIpAddr=wtWebioEA2x2ERPAlarmSyslogIpAddr, wtWebioEA12x6RelERPPortInputText=wtWebioEA12x6RelERPPortInputText, wtWebioEA2x2SyslogSystemMessagesEnable=wtWebioEA2x2SyslogSystemMessagesEnable, wtWebioEA12x12AlarmSnmpTrapText=wtWebioEA12x12AlarmSnmpTrapText, wtWebioEA2x2ERP_24VPortInputName=wtWebioEA2x2ERP_24VPortInputName, wtWebioEA24oemOutputValue=wtWebioEA24oemOutputValue, wtWebioEA2x2OutputPortTable=wtWebioEA2x2OutputPortTable, wtWebioEA2x2ERP_24VSNMP=wtWebioEA2x2ERP_24VSNMP, wtTrapReceiver2x2PortInputFilter=wtTrapReceiver2x2PortInputFilter, wtWebioEA2x2OutputModeTable=wtWebioEA2x2OutputModeTable, wtIpWatcherAlarmGlobalEnable=wtIpWatcherAlarmGlobalEnable, wtIpWatcherAlert34=wtIpWatcherAlert34, wtIpWatcherAlarmIfEntry=wtIpWatcherAlarmIfEntry, wtWebioEA2x2ERPStTzStopMin=wtWebioEA2x2ERPStTzStopMin, wtWebioEA12x6RelAlert4=wtWebioEA12x6RelAlert4, wtWebioEA24oemOutputModeBit=wtWebioEA24oemOutputModeBit, wtWebioEA12x12InputNo=wtWebioEA12x12InputNo, wtIpWatcher_24VMfHotline=wtIpWatcher_24VMfHotline, wtWebioEA12x6RelMailAuthentication=wtWebioEA12x6RelMailAuthentication, wtWebioEA2x2ERP_24VBinaryTcpServerLocalPort=wtWebioEA2x2ERP_24VBinaryTcpServerLocalPort, wtWebioEA2x2_24VAlert19=wtWebioEA2x2_24VAlert19, wtIpWatcher_24VTsSyncTime=wtIpWatcher_24VTsSyncTime, wtWebioEA12x6RelTimeZone=wtWebioEA12x6RelTimeZone, wtWebioEA2x2ERPBinaryUdpPeerApplicationMode=wtWebioEA2x2ERPBinaryUdpPeerApplicationMode, wtTrapReceiver2x2InEvSystemTimer=wtTrapReceiver2x2InEvSystemTimer, wtWebioEA24oemBinaryOperationMode=wtWebioEA24oemBinaryOperationMode, wtWebioEA2x2_24VMailAuthPassword=wtWebioEA2x2_24VMailAuthPassword, wtWebioEA2x2ERP_24VClockDay=wtWebioEA2x2ERP_24VClockDay, wtWebioEA12x12BinaryTable=wtWebioEA12x12BinaryTable, wtWebioEA2x2BinaryTcpClientLocalPort=wtWebioEA2x2BinaryTcpClientLocalPort, wtWebAlarm6x6AlarmSyslogText=wtWebAlarm6x6AlarmSyslogText, wtWebioEA2x2AlarmUdpIpAddr=wtWebioEA2x2AlarmUdpIpAddr, wtIpWatcher_24VMfName=wtIpWatcher_24VMfName, wtWebioEA6x6StTzStartMode=wtWebioEA6x6StTzStartMode, wtWebioEA12x6RelERPBinaryTcpServerLocalPort=wtWebioEA12x6RelERPBinaryTcpServerLocalPort, wtWebioEA12x6RelERPInputNo=wtWebioEA12x6RelERPInputNo, wtWebCount6Network=wtWebCount6Network, wtIpWatcher_24VAlert21=wtIpWatcher_24VAlert21, wtWebioEA12x6RelERPOutputEntry=wtWebioEA12x6RelERPOutputEntry, wtWebCount6ReportMailAddr=wtWebCount6ReportMailAddr, wtWebioEA2x2ERPSessCntrlAdminPassword=wtWebioEA2x2ERPSessCntrlAdminPassword, wtWebioEA12x6RelBasic=wtWebioEA12x6RelBasic, wtWebAlarm6x6OutputPortEntry=wtWebAlarm6x6OutputPortEntry, wtWebioEA12x12TsEnable=wtWebioEA12x12TsEnable, wtWebioEA12x6RelSyslogServerIP=wtWebioEA12x6RelSyslogServerIP, wtWebioEA24oemDevice=wtWebioEA24oemDevice, wtWebioEA12x12Mail=wtWebioEA12x12Mail, wtWebioEA2x2ERP_24VStTzOffsetMin=wtWebioEA2x2ERP_24VStTzOffsetMin, wtWebioEA12x6RelMailAuthPassword=wtWebioEA12x6RelMailAuthPassword, wtWebCount6ReportTimerCron=wtWebCount6ReportTimerCron, wtWebioEA6x6Alert19=wtWebioEA6x6Alert19, wtWebioEA12x6RelAlarmCount=wtWebioEA12x6RelAlarmCount, wtWebioEA12x6RelERPTzOffsetMin=wtWebioEA12x6RelERPTzOffsetMin, wtIpWatcher_24VAlarmMailTrgClearText=wtIpWatcher_24VAlarmMailTrgClearText, wtWebioEA2x2ERPOutputModeTable=wtWebioEA2x2ERPOutputModeTable, wtIpWatcherAlarmNo=wtIpWatcherAlarmNo, wtWebAlarm6x6AlarmUdpReleaseText=wtWebAlarm6x6AlarmUdpReleaseText, wtWebioEA2x2BinaryModeNo=wtWebioEA2x2BinaryModeNo, wtWebioEA2x2OutputModeBit=wtWebioEA2x2OutputModeBit, wtWebioEA24oemBinaryTcpClientLocalPort=wtWebioEA24oemBinaryTcpClientLocalPort, wtWebioEA2x2ERP_24VTsEnable=wtWebioEA2x2ERP_24VTsEnable, wtWebioEA12x6RelERP=wtWebioEA12x6RelERP, wtWebioEA12x12DnsServer1=wtWebioEA12x12DnsServer1, wtWebioEA2x2ERP_24VDeviceContact=wtWebioEA2x2ERP_24VDeviceContact, wtTrapReceiver2x2StTzStartMin=wtTrapReceiver2x2StTzStartMin, wtIpWatcherAlarmUdpIpAddr=wtIpWatcherAlarmUdpIpAddr, wtWebioEA2x2ERP_24VBinaryUdpPeerLocalPort=wtWebioEA2x2ERP_24VBinaryUdpPeerLocalPort, wtWebioEA24oemPortOutputName=wtWebioEA24oemPortOutputName, wtIpWatcher_24VAlarmFtpText=wtIpWatcher_24VAlarmFtpText, wtWebioEA12x6RelAlert9=wtWebioEA12x6RelAlert9, wtWebCount6TimeZone=wtWebCount6TimeZone, wtWebioEA24oemBinaryTcpClientInactivity=wtWebioEA24oemBinaryTcpClientInactivity, wtWebAlarm6x6MfName=wtWebAlarm6x6MfName, wtWebioEA6x6SnmpEnable=wtWebioEA6x6SnmpEnable, wtWebioEA2x2OutputState=wtWebioEA2x2OutputState, wtIpWatcherAlert16=wtIpWatcherAlert16, wtWebioEA2x2ERP_24VTzEnable=wtWebioEA2x2ERP_24VTzEnable, wtIpWatcher_24VAlert12=wtIpWatcher_24VAlert12, wtWebioEA12x12BinaryUdpPeerApplicationMode=wtWebioEA12x12BinaryUdpPeerApplicationMode, wtWebioEA2x2ERPBinaryUdpPeerInputTrigger=wtWebioEA2x2ERPBinaryUdpPeerInputTrigger, wtWebioEA2x2DeviceName=wtWebioEA2x2DeviceName, wtWebioEA6x6OutputEntry=wtWebioEA6x6OutputEntry, wtWebioEA24oemInputTable=wtWebioEA24oemInputTable, wtWebioEA12x6RelERPBinaryIfTable=wtWebioEA12x6RelERPBinaryIfTable, wtWebioEA2x2_24VTimeDate=wtWebioEA2x2_24VTimeDate, wtWebioEA12x12StTzOffsetMin=wtWebioEA12x12StTzOffsetMin, wtWebioEA6x6TimeDate=wtWebioEA6x6TimeDate, wtWebioEA12x6RelERPAlert24=wtWebioEA12x6RelERPAlert24, wtWebioEA2x2MfHotline=wtWebioEA2x2MfHotline, wtIpWatcherIpListCount=wtIpWatcherIpListCount, wtWebioEA2x2_24VSyslogEnable=wtWebioEA2x2_24VSyslogEnable, wtTrapReceiver2x2ActionMailAddr=wtTrapReceiver2x2ActionMailAddr, wtWebioEA12x6RelERPPortPulsePolarity=wtWebioEA12x6RelERPPortPulsePolarity, wtIpWatcherSessCntrlPassword=wtIpWatcherSessCntrlPassword, wtIpWatcherAlarmPollingRate=wtIpWatcherAlarmPollingRate, wtWebioEA12x12AlarmUdpIpAddr=wtWebioEA12x12AlarmUdpIpAddr, wtWebioEA6x6Alert7=wtWebioEA6x6Alert7, wtWebioEA12x12PortLogicInputMask=wtWebioEA12x12PortLogicInputMask, wtWebioEA2x2AlarmSyslogPort=wtWebioEA2x2AlarmSyslogPort, wtWebioEA12x6RelAlert8=wtWebioEA12x6RelAlert8, wtWebioEA2x2SafetyTimeout=wtWebioEA2x2SafetyTimeout, wtWebioEA2x2ERPFTPEnable=wtWebioEA2x2ERPFTPEnable, wtWebioEA2x2_24VOutputValue=wtWebioEA2x2_24VOutputValue, wtWebioEA2x2TzOffsetHrs=wtWebioEA2x2TzOffsetHrs, wtIpWatcher_24VGateway=wtIpWatcher_24VGateway, wtWebioEA12x6RelERPBinaryTcpClientLocalPort=wtWebioEA12x6RelERPBinaryTcpClientLocalPort, wtWebioEA2x2ERPOutputPortTable=wtWebioEA2x2ERPOutputPortTable, wtWebioEA12x12Alert5=wtWebioEA12x12Alert5, wtWebioEA2x2ERPStTzStopMonth=wtWebioEA2x2ERPStTzStopMonth, wtWebioEA6x6BinaryConnectedPort=wtWebioEA6x6BinaryConnectedPort, wtWebioEA12x6RelSyslog=wtWebioEA12x6RelSyslog, wtWebioEA6x6UdpRemotePort=wtWebioEA6x6UdpRemotePort, wtWebioEA12x6RelERPDevice=wtWebioEA12x6RelERPDevice, wtTrapReceiver2x2OutputEntry=wtTrapReceiver2x2OutputEntry, wtWebCount6ReportSyslogPort=wtWebCount6ReportSyslogPort, wtWebioEA2x2Mail=wtWebioEA2x2Mail, wtWebioEA2x2ERPClockYear=wtWebioEA2x2ERPClockYear, wtWebioEA2x2OutputMode=wtWebioEA2x2OutputMode, wtWebioEA24oemDiagErrorClear=wtWebioEA24oemDiagErrorClear, wtIpWatcher_24VAlarmFtpFileName=wtIpWatcher_24VAlarmFtpFileName, wtWebioEA2x2ERPFTPServerControlPort=wtWebioEA2x2ERPFTPServerControlPort, wtWebioEA2x2ERPOutputValue=wtWebioEA2x2ERPOutputValue, wtWebioEA12x12DiagBinaryError=wtWebioEA12x12DiagBinaryError, wtWebCount6MailAuthentication=wtWebCount6MailAuthentication, wtWebioEA2x2ERPAlarmMailReleaseText=wtWebioEA2x2ERPAlarmMailReleaseText, wtWebioEA12x6RelFTPOption=wtWebioEA12x6RelFTPOption, wtWebioEA2x2BinaryUdpPeerApplicationMode=wtWebioEA2x2BinaryUdpPeerApplicationMode, wtWebioEA2x2ERPSnmpCommunityStringReadWrite=wtWebioEA2x2ERPSnmpCommunityStringReadWrite, wtWebioEA2x2_24VPortOutputText=wtWebioEA2x2_24VPortOutputText, wtWebAlarm6x6AlarmSyslogIpAddr=wtWebAlarm6x6AlarmSyslogIpAddr, wtWebioEA2x2_24VAlarmMailSubject=wtWebioEA2x2_24VAlarmMailSubject, wtWebioEA24oemAlert28=wtWebioEA24oemAlert28, wtWebioEA12x6RelERPWayBackEnable=wtWebioEA12x6RelERPWayBackEnable, wtIpWatcher_24VSessCntrlLogout=wtIpWatcher_24VSessCntrlLogout, wtWebioEA12x12AlarmEntry=wtWebioEA12x12AlarmEntry, wtWebioEA2x2ERP_24VPortInputFilter=wtWebioEA2x2ERP_24VPortInputFilter, wtWebioEA2x2ERP_24VSnmpSystemTrapEnable=wtWebioEA2x2ERP_24VSnmpSystemTrapEnable, wtTrapReceiver2x2ButtonNo=wtTrapReceiver2x2ButtonNo, wtWebioEA12x6RelUdpAdminPort=wtWebioEA12x6RelUdpAdminPort, wtWebioEA2x2ERPPortLogicOutputInverter=wtWebioEA2x2ERPPortLogicOutputInverter, wtWebioEA2x2ERP_24VAlarmMailAddr=wtWebioEA2x2ERP_24VAlarmMailAddr, wtWebioEA6x6HttpPort=wtWebioEA6x6HttpPort, wtWebioEA6x6AlarmSyslogText=wtWebioEA6x6AlarmSyslogText, wtWebioEA2x2AlarmIfEntry=wtWebioEA2x2AlarmIfEntry, wtWebioEA2x2AlarmEnable=wtWebioEA2x2AlarmEnable, wtWebioEA12x12MailAdName=wtWebioEA12x12MailAdName, wtWebioEA6x6AlarmTcpText=wtWebioEA6x6AlarmTcpText, wtWebioEA2x2ERP_24VBinaryTcpClientInputTrigger=wtWebioEA2x2ERP_24VBinaryTcpClientInputTrigger, wtWebioEA12x6RelERPBinary=wtWebioEA12x6RelERPBinary, wtWebioEA6x6Alert20=wtWebioEA6x6Alert20, wtTrapReceiver2x2MailPop3Server=wtTrapReceiver2x2MailPop3Server, wtWebioEA2x2Alert23=wtWebioEA2x2Alert23, wtWebioEA12x6RelBinaryTcpServerLocalPort=wtWebioEA12x6RelBinaryTcpServerLocalPort, wtWebioEA6x6SafetyTimeout=wtWebioEA6x6SafetyTimeout, wtWebioEA24oemBinaryEntry=wtWebioEA24oemBinaryEntry, wtWebioEA24oemAlert21=wtWebioEA24oemAlert21, wtWebioEA12x6RelBinaryUdpPeerInterval=wtWebioEA12x6RelBinaryUdpPeerInterval, wtWebioEA6x6BinaryIfTable=wtWebioEA6x6BinaryIfTable, wtIpWatcherAlert5=wtIpWatcherAlert5, wtTrapReceiver2x2DeviceClock=wtTrapReceiver2x2DeviceClock, wtWebCount6ReportCounterClear=wtWebCount6ReportCounterClear, wtWebioEA12x6RelERPTimeZone=wtWebioEA12x6RelERPTimeZone, wtWebioEA12x6RelERPIpAddress=wtWebioEA12x6RelERPIpAddress, wtWebioEA2x2ERP_24VOutputState=wtWebioEA2x2ERP_24VOutputState, wtWebioEA12x6RelERPAlert22=wtWebioEA12x6RelERPAlert22, wtWebioEA6x6FTPUserName=wtWebioEA6x6FTPUserName, wtWebioEA2x2ERP_24VUDP=wtWebioEA2x2ERP_24VUDP, wtWebioEA2x2BinaryTcpClientServerPassword=wtWebioEA2x2BinaryTcpClientServerPassword, wtWebioEA12x12AlarmCount=wtWebioEA12x12AlarmCount, wtWebioEA2x2_24VDeviceClock=wtWebioEA2x2_24VDeviceClock, wtWebioEA6x6MfInternet=wtWebioEA6x6MfInternet, wtWebioEA2x2_24VAddConfig=wtWebioEA2x2_24VAddConfig, wtIpWatcherDeviceLocation=wtIpWatcherDeviceLocation, wtIpWatcher_24VAlarmUdpReleaseText=wtIpWatcher_24VAlarmUdpReleaseText, wtWebCount6ClockHrs=wtWebCount6ClockHrs, wtWebioEA2x2ERP_24VBinaryTable=wtWebioEA2x2ERP_24VBinaryTable, wtWebioEA12x6RelERPDeviceClock=wtWebioEA12x6RelERPDeviceClock)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA2x2ERP_24VBinaryTcpClientLocalPort=wtWebioEA2x2ERP_24VBinaryTcpClientLocalPort, wtWebCount6StTzStopMode=wtWebCount6StTzStopMode, wtWebioEA2x2_24VAlarmCount=wtWebioEA2x2_24VAlarmCount, wtWebAlarm6x6AlarmFtpDataPort=wtWebAlarm6x6AlarmFtpDataPort, wtWebioEA12x6RelERPAlert17=wtWebioEA12x6RelERPAlert17, wtIpWatcher_24VFTPUserName=wtIpWatcher_24VFTPUserName, wtTrapReceiver2x2TsEnable=wtTrapReceiver2x2TsEnable, wtWebioEA12x6RelERPAlarmFtpText=wtWebioEA12x6RelERPAlarmFtpText, wtIpWatcher_24VSessCntrlPassword=wtIpWatcher_24VSessCntrlPassword, wtWebioEA24oemBinaryUdpPeerRemoteIpAddr=wtWebioEA24oemBinaryUdpPeerRemoteIpAddr, wtTrapReceiver2x2SessCntrl=wtTrapReceiver2x2SessCntrl, wtWebAlarm6x6Alert19=wtWebAlarm6x6Alert19, wtTrapReceiver2x2UDP=wtTrapReceiver2x2UDP, wtWebioEA2x2_24VSnmpSystemTrapEnable=wtWebioEA2x2_24VSnmpSystemTrapEnable, wtWebioEA2x2ERP_24VStTzStartMonth=wtWebioEA2x2ERP_24VStTzStartMonth, wtWebioEA2x2Alert12=wtWebioEA2x2Alert12, wtWebioEA12x12Alert10=wtWebioEA12x12Alert10, wtWebioEA2x2AlarmFtpOption=wtWebioEA2x2AlarmFtpOption, wtWebioEA2x2_24VSetOutput=wtWebioEA2x2_24VSetOutput, wtWebioEA2x2_24VBinaryUdpPeerRemotePort=wtWebioEA2x2_24VBinaryUdpPeerRemotePort, wtTrapReceiver2x2AddConfig=wtTrapReceiver2x2AddConfig, wtWebioEA12x12IpAddress=wtWebioEA12x12IpAddress, wtWebioEA12x12AlarmUdpPort=wtWebioEA12x12AlarmUdpPort, wtWebioEA24oemBinaryIfEntry=wtWebioEA24oemBinaryIfEntry, wtTrapReceiver2x2ActionSyslogIpAddr=wtTrapReceiver2x2ActionSyslogIpAddr, wtWebioEA2x2ERPMailAuthentication=wtWebioEA2x2ERPMailAuthentication, wtTrapReceiver2x2Alert11=wtTrapReceiver2x2Alert11, wtWebioEA12x6RelDiagErrorIndex=wtWebioEA12x6RelDiagErrorIndex, wtIpWatcherMailPop3Server=wtIpWatcherMailPop3Server, wtWebioEA2x2_24VMailAdName=wtWebioEA2x2_24VMailAdName, wtTrapReceiver2x2InputNo=wtTrapReceiver2x2InputNo, wtWebCount6ReportTriggerState=wtWebCount6ReportTriggerState, wtIpWatcher_24V=wtIpWatcher_24V, wtWebioEA24oemHttpInputTrigger=wtWebioEA24oemHttpInputTrigger, wtWebioEA12x6RelERPGetHeaderEnable=wtWebioEA12x6RelERPGetHeaderEnable, wtIpWatcherSnmpEnable=wtIpWatcherSnmpEnable, wtWebAlarm6x6InputPortTable=wtWebAlarm6x6InputPortTable, wtIpWatcher_24VAlarm=wtIpWatcher_24VAlarm, wtWebioEA12x6RelMailAuthUser=wtWebioEA12x6RelMailAuthUser, wtWebioEA12x6RelERPTimeDate=wtWebioEA12x6RelERPTimeDate, wtWebioEA2x2ERPAlarmUdpText=wtWebioEA2x2ERPAlarmUdpText, wtWebioEA12x6RelERPAddConfig=wtWebioEA12x6RelERPAddConfig, wtWebioEA12x6RelBinaryTcpServerInputTrigger=wtWebioEA12x6RelBinaryTcpServerInputTrigger, wtIpWatcher_24VStTzStopWday=wtIpWatcher_24VStTzStopWday, wtWebioEA12x6RelERPMailPop3Server=wtWebioEA12x6RelERPMailPop3Server, wtIpWatcherAlert26=wtIpWatcherAlert26, wtWebioEA12x12Alert19=wtWebioEA12x12Alert19, wtWebioEA12x6RelERPTzEnable=wtWebioEA12x6RelERPTzEnable, wtWebAlarm6x6TsSyncTime=wtWebAlarm6x6TsSyncTime, wtWebAlarm6x6AlarmSyslogTrapTxEnable=wtWebAlarm6x6AlarmSyslogTrapTxEnable, wtWebioEA2x2MfName=wtWebioEA2x2MfName, wtWebioEA2x2ERPInputCounterClear=wtWebioEA2x2ERPInputCounterClear, wtWebioEA6x6AlarmIfTable=wtWebioEA6x6AlarmIfTable, wtWebioEA6x6SyslogSystemMessagesEnable=wtWebioEA6x6SyslogSystemMessagesEnable, wtWebioEA2x2ERPMailPop3Server=wtWebioEA2x2ERPMailPop3Server, wtWebioEA6x6OutputValue=wtWebioEA6x6OutputValue, wtWebioEA12x6RelBinaryModeNo=wtWebioEA12x6RelBinaryModeNo, wtWebioEA2x2Alert3=wtWebioEA2x2Alert3, wtWebioEA24oemFTPUserName=wtWebioEA24oemFTPUserName, wtWebioEA2x2ERPInputs=wtWebioEA2x2ERPInputs, wtWebioEA12x12FTPServerIP=wtWebioEA12x12FTPServerIP, wtIpWatcherSyslog=wtIpWatcherSyslog, wtWebioEA12x6RelERPAlarmIfEntry=wtWebioEA12x6RelERPAlarmIfEntry, wtWebioEA12x12OutputModeBit=wtWebioEA12x12OutputModeBit, wtWebioEA2x2_24VAlarmUdpPort=wtWebioEA2x2_24VAlarmUdpPort, wtWebioEA12x6RelERPMfDeviceTyp=wtWebioEA12x6RelERPMfDeviceTyp, wtIpWatcher_24VText=wtIpWatcher_24VText, wtWebioEA2x2ERPAlarmMailReleaseSubject=wtWebioEA2x2ERPAlarmMailReleaseSubject, wtIpWatcherAlert23=wtIpWatcherAlert23, wtWebioEA6x6SubnetMask=wtWebioEA6x6SubnetMask, wtTrapReceiver2x2FTPAccount=wtTrapReceiver2x2FTPAccount, wtWebioEA2x2ERPOutputPortEntry=wtWebioEA2x2ERPOutputPortEntry, wtWebioEA24oemAlarmInputTrigger=wtWebioEA24oemAlarmInputTrigger, wtWebioEA24oemPortLogicInputInverter=wtWebioEA24oemPortLogicInputInverter, wtWebioEA12x12StTzOffsetHrs=wtWebioEA12x12StTzOffsetHrs, wtWebioEA24oemSessCntrlAdminPassword=wtWebioEA24oemSessCntrlAdminPassword, wtIpWatcherMail=wtIpWatcherMail, wtWebioEA12x6RelAlarmSyslogReleaseText=wtWebioEA12x6RelAlarmSyslogReleaseText, wtWebioEA2x2InputPortEntry=wtWebioEA2x2InputPortEntry, wtIpWatcherIpListNo=wtIpWatcherIpListNo, wtWebioEA2x2AlarmFtpDataPort=wtWebioEA2x2AlarmFtpDataPort, wtWebioEA12x12AlarmUdpReleaseText=wtWebioEA12x12AlarmUdpReleaseText, wtWebAlarm6x6ClockYear=wtWebAlarm6x6ClockYear, wtWebioEA2x2ERPTsEnable=wtWebioEA2x2ERPTsEnable, wtWebCount6ReportFtpOption=wtWebCount6ReportFtpOption, wtWebioEA12x6RelSessCntrlLogout=wtWebioEA12x6RelSessCntrlLogout, wtWebioEA2x2ERPTzOffsetMin=wtWebioEA2x2ERPTzOffsetMin, wtWebioEA2x2SyslogServerIP=wtWebioEA2x2SyslogServerIP, wtWebioEA2x2Startup=wtWebioEA2x2Startup, wtWebioEA12x6RelERPAlarmOutputTrigger=wtWebioEA12x6RelERPAlarmOutputTrigger, wtWebCount6SnmpEnable=wtWebCount6SnmpEnable, wtIpWatcher_24VInputNo=wtIpWatcher_24VInputNo, wtWebioEA12x6RelAlarmUdpPort=wtWebioEA12x6RelAlarmUdpPort, wtWebAlarm6x6DiagErrorCount=wtWebAlarm6x6DiagErrorCount, wtWebioEA12x6RelERPAlert1=wtWebioEA12x6RelERPAlert1, wtWebioEA2x2_24VStTzStopMonth=wtWebioEA2x2_24VStTzStopMonth, wtWebioEA2x2AlarmSyslogText=wtWebioEA2x2AlarmSyslogText, wtWebioEA12x6RelAlarmUdpReleaseText=wtWebioEA12x6RelAlarmUdpReleaseText, wtIpWatcher_24VMailAuthUser=wtIpWatcher_24VMailAuthUser, wtWebCount6InputTable=wtWebCount6InputTable, wtWebioEA2x2ERPClockHrs=wtWebioEA2x2ERPClockHrs, wtWebioEA12x6RelAlarmInputTrigger=wtWebioEA12x6RelAlarmInputTrigger, wtWebioEA24oemInputPortTable=wtWebioEA24oemInputPortTable, wtWebioEA2x2SessCntrlConfigMode=wtWebioEA2x2SessCntrlConfigMode, wtTrapReceiver2x2ClockMin=wtTrapReceiver2x2ClockMin, wtWebioEA2x2_24VHTTP=wtWebioEA2x2_24VHTTP, wtWebioEA12x6RelERPBinaryTcpClientApplicationMode=wtWebioEA12x6RelERPBinaryTcpClientApplicationMode, wtTrapReceiver2x2ClockDay=wtTrapReceiver2x2ClockDay, wtIpWatcher_24VInputState=wtIpWatcher_24VInputState, wtWebioEA12x6RelMailEnable=wtWebioEA12x6RelMailEnable, wtWebioEA12x6RelOutputNo=wtWebioEA12x6RelOutputNo, wtWebCount6ReportUdpIpAddr=wtWebCount6ReportUdpIpAddr, wtWebioEA2x2_24VSessCntrl=wtWebioEA2x2_24VSessCntrl, wtWebioEA12x6RelAlarmMailSubject=wtWebioEA12x6RelAlarmMailSubject, wtWebioEA12x6RelPortPulsePolarity=wtWebioEA12x6RelPortPulsePolarity, wtIpWatcherInputTable=wtIpWatcherInputTable, wtWebioEA2x2AlarmSnmpTrapReleaseText=wtWebioEA2x2AlarmSnmpTrapReleaseText, wtWebioEA2x2ERP_24VTimeServer2=wtWebioEA2x2ERP_24VTimeServer2, wtWebioEA2x2_24VStTzOffsetHrs=wtWebioEA2x2_24VStTzOffsetHrs, wtWebioEA24oemAlert25=wtWebioEA24oemAlert25, wtWebioEA12x6RelManufact=wtWebioEA12x6RelManufact, wtWebioEA12x6RelAlarmEnable=wtWebioEA12x6RelAlarmEnable, wtWebioEA12x6RelAlert21=wtWebioEA12x6RelAlert21, wtWebioEA2x2ERP_24VAlarmIfEntry=wtWebioEA2x2ERP_24VAlarmIfEntry, wtIpWatcher_24VAlarmSnmpTrapReleaseText=wtIpWatcher_24VAlarmSnmpTrapReleaseText, wtWebAlarm6x6MfHotline=wtWebAlarm6x6MfHotline, wtWebioEA2x2SessCntrlConfigPassword=wtWebioEA2x2SessCntrlConfigPassword, wtWebioEA12x12BinaryOperationMode=wtWebioEA12x12BinaryOperationMode, wtWebioEA24oemOutputModeTable=wtWebioEA24oemOutputModeTable, wtTrapReceiver2x2WatchListEntry=wtTrapReceiver2x2WatchListEntry, wtWebioEA12x12MailServer=wtWebioEA12x12MailServer, wtWebioEA12x6RelPortLogicInputInverter=wtWebioEA12x6RelPortLogicInputInverter, wtWebioEA2x2ERP_24VInputPortTable=wtWebioEA2x2ERP_24VInputPortTable, wtWebioEA2x2ERPBinaryTcpClientLocalPort=wtWebioEA2x2ERPBinaryTcpClientLocalPort, wtWebioEA6x6BinaryTcpClientServerHttpPort=wtWebioEA6x6BinaryTcpClientServerHttpPort, wtWebAlarm6x6StTzStopMin=wtWebAlarm6x6StTzStopMin, wtWebioEA2x2_24VOutputState=wtWebioEA2x2_24VOutputState, wtWebioEA2x2_24VAlert20=wtWebioEA2x2_24VAlert20, wtWebioEA12x6RelERPBinaryTcpClientServerIpAddr=wtWebioEA12x6RelERPBinaryTcpClientServerIpAddr, wtWebioEA2x2_24VUdpEnable=wtWebioEA2x2_24VUdpEnable, wtWebioEA12x12Alert11=wtWebioEA12x12Alert11, wtTrapReceiver2x2DiagBinaryError=wtTrapReceiver2x2DiagBinaryError, wtWebioEA12x6RelERPAlarmUdpIpAddr=wtWebioEA12x6RelERPAlarmUdpIpAddr, wtWebioEA2x2ERPAddConfig=wtWebioEA2x2ERPAddConfig, wtTrapReceiver2x2OutputPortTable=wtTrapReceiver2x2OutputPortTable, wtWebioEA12x6RelERPAlarmNo=wtWebioEA12x6RelERPAlarmNo, wtIpWatcherFTPPassword=wtIpWatcherFTPPassword, wtWebioEA24oemPortOutputText=wtWebioEA24oemPortOutputText, wtWebioEA12x6RelERPAlarmEntry=wtWebioEA12x6RelERPAlarmEntry, wtWebioEA2x2Outputs=wtWebioEA2x2Outputs, wtTrapReceiver2x2PortPulsePolarity=wtTrapReceiver2x2PortPulsePolarity, wtWebioEA2x2ERPHTTP=wtWebioEA2x2ERPHTTP, wtWebioEA12x12InputValue=wtWebioEA12x12InputValue, wtWebioEA2x2_24VAlert21=wtWebioEA2x2_24VAlert21, wtWebioEA6x6InOut=wtWebioEA6x6InOut, wtWebioEA12x12FTPPassword=wtWebioEA12x12FTPPassword, wtWebioEA2x2DeviceClock=wtWebioEA2x2DeviceClock, wtWebioEA24oemUdpEnable=wtWebioEA24oemUdpEnable, wtWebioEA12x6RelERPAlarmFtpOption=wtWebioEA12x6RelERPAlarmFtpOption, wtWebCount6ReportIfEntry=wtWebCount6ReportIfEntry, wtWebioEA2x2ERP_24VBinaryConnectedPort=wtWebioEA2x2ERP_24VBinaryConnectedPort, wtWebioEA24oemClockYear=wtWebioEA24oemClockYear, wtTrapReceiver2x2MfHotline=wtTrapReceiver2x2MfHotline, wtWebioEA2x2AlarmTimerCron=wtWebioEA2x2AlarmTimerCron, wtWebioEA12x12HTTP=wtWebioEA12x12HTTP, wtWebioEA2x2SnmpCommunityStringRead=wtWebioEA2x2SnmpCommunityStringRead, wtWebioEA2x2_24VBinaryEntry=wtWebioEA2x2_24VBinaryEntry, wtIpWatcherInputEntry=wtIpWatcherInputEntry, wtWebioEA6x6=wtWebioEA6x6, wtWebCount6ReportOutputEntry=wtWebCount6ReportOutputEntry, wtIpWatcherAlert8=wtIpWatcherAlert8, wtWebAlarm6x6Alert11=wtWebAlarm6x6Alert11, wtWebioEA6x6BinaryTable=wtWebioEA6x6BinaryTable, wtWebioEA2x2ERPTimeZone=wtWebioEA2x2ERPTimeZone, wtWebioEA6x6GetHeaderEnable=wtWebioEA6x6GetHeaderEnable, wtWebioEA2x2ERPOutputState=wtWebioEA2x2ERPOutputState, wtTrapReceiver2x2StTzStartMonth=wtTrapReceiver2x2StTzStartMonth, wtWebioEA2x2Manufact=wtWebioEA2x2Manufact, wtIpWatcherSessCntrlLogout=wtIpWatcherSessCntrlLogout, wtIpWatcher_24VDevice=wtIpWatcher_24VDevice, wtWebioEA2x2StTzStopHrs=wtWebioEA2x2StTzStopHrs, wtIpWatcherAlarmFtpOption=wtIpWatcherAlarmFtpOption, wtWebCount6ReportName=wtWebCount6ReportName, wtWebioEA24oemInputCounter=wtWebioEA24oemInputCounter, wtWebioEA6x6IpAddress=wtWebioEA6x6IpAddress, wtWebioEA6x6AddConfig=wtWebioEA6x6AddConfig, wtWebioEA2x2FTPServerControlPort=wtWebioEA2x2FTPServerControlPort, wtWebioEA12x12AlarmTcpPort=wtWebioEA12x12AlarmTcpPort, wtWebioEA6x6AlarmSyslogIpAddr=wtWebioEA6x6AlarmSyslogIpAddr, wtWebioEA2x2ERP_24VBinary=wtWebioEA2x2ERP_24VBinary, wtIpWatcher_24VAlarmOutputEntry=wtIpWatcher_24VAlarmOutputEntry, wtWebAlarm6x6Diag=wtWebAlarm6x6Diag, wtIpWatcherDiagBinaryError=wtIpWatcherDiagBinaryError, wtWebCount6StTzStopMonth=wtWebCount6StTzStopMonth, wtWebioEA12x6RelAlarmMailReleaseText=wtWebioEA12x6RelAlarmMailReleaseText, wtWebioEA2x2AlarmInputTrigger=wtWebioEA2x2AlarmInputTrigger, wtIpWatcherAlarmOutputEntry=wtIpWatcherAlarmOutputEntry, wtWebioEA2x2ERP_24VMailReply=wtWebioEA2x2ERP_24VMailReply, wtWebCount6ClockMin=wtWebCount6ClockMin, wtWebioEA12x12AlarmFtpOption=wtWebioEA12x12AlarmFtpOption, wtWebioEA12x6RelStTzStopWday=wtWebioEA12x6RelStTzStopWday, wtWebioEA2x2ERP_24VBinaryUdpPeerInputTrigger=wtWebioEA2x2ERP_24VBinaryUdpPeerInputTrigger, wtWebCount6SessCntrl=wtWebCount6SessCntrl, wtWebAlarm6x6AlarmMailTrgClearText=wtWebAlarm6x6AlarmMailTrgClearText, wtWebioEA2x2ERPDeviceText=wtWebioEA2x2ERPDeviceText, wtIpWatcher_24VInputPortTable=wtIpWatcher_24VInputPortTable, wtWebCount6ReportUdpText=wtWebCount6ReportUdpText, wtWebioEA24oemSessCntrlLogout=wtWebioEA24oemSessCntrlLogout, wtWebioEA2x2_24VStTzOffsetMin=wtWebioEA2x2_24VStTzOffsetMin, wtWebioEA24oemStTzStartMonth=wtWebioEA24oemStTzStartMonth, wtIpWatcherSnmpSystemTrapManagerIP=wtIpWatcherSnmpSystemTrapManagerIP, wtWebioEA2x2ClockYear=wtWebioEA2x2ClockYear, wtWebioEA2x2ERPStTzStartMode=wtWebioEA2x2ERPStTzStartMode, wtWebioEA12x6RelAlert6=wtWebioEA12x6RelAlert6, wtIpWatcherAlert36=wtIpWatcherAlert36, wtIpWatcher_24VInOut=wtIpWatcher_24VInOut, wtWebioEA2x2ERP_24VBinaryModeNo=wtWebioEA2x2ERP_24VBinaryModeNo, wtTrapReceiver2x2ActionTcpPort=wtTrapReceiver2x2ActionTcpPort, wtWebioEA2x2OutputModeEntry=wtWebioEA2x2OutputModeEntry, wtWebioEA2x2_24VBinaryTcpServerInputTrigger=wtWebioEA2x2_24VBinaryTcpServerInputTrigger, wtTrapReceiver2x2StTzOffsetHrs=wtTrapReceiver2x2StTzOffsetHrs, wtTrapReceiver2x2OutputNo=wtTrapReceiver2x2OutputNo, wtTrapReceiver2x2ActionOutputState=wtTrapReceiver2x2ActionOutputState, wtWebioEA6x6BinaryOperationMode=wtWebioEA6x6BinaryOperationMode, wtWebioEA12x6RelERPBinaryEntry=wtWebioEA12x6RelERPBinaryEntry, wtWebioEA12x6RelERPSessCntrlLogout=wtWebioEA12x6RelERPSessCntrlLogout, wtWebioEA2x2ERP_24VDiagErrorCount=wtWebioEA2x2ERP_24VDiagErrorCount, wtWebioEA12x12FTPAccount=wtWebioEA12x12FTPAccount, wtTrapReceiver2x2OutputPortEntry=wtTrapReceiver2x2OutputPortEntry, wtIpWatcherDiagErrorMessage=wtIpWatcherDiagErrorMessage, wtWebioEA12x12OutputValue=wtWebioEA12x12OutputValue, wtWebioEA2x2Device=wtWebioEA2x2Device, wtWebioEA24oemOutputMode=wtWebioEA24oemOutputMode, wtWebioEA6x6TimeServer=wtWebioEA6x6TimeServer, wtIpWatcherAlarmFtpText=wtIpWatcherAlarmFtpText, wtWebioEA2x2_24VBinaryTcpServerApplicationMode=wtWebioEA2x2_24VBinaryTcpServerApplicationMode, wtIpWatcher_24VInputValue=wtIpWatcher_24VInputValue, wtWebioEA12x6RelClockYear=wtWebioEA12x6RelClockYear, wtWebAlarm6x6Alert9=wtWebAlarm6x6Alert9, wtWebAlarm6x6DeviceName=wtWebAlarm6x6DeviceName, wtWebioEA12x6RelERPInputCounterClear=wtWebioEA12x6RelERPInputCounterClear, wtWebioEA12x6RelERPStTzStartMin=wtWebioEA12x6RelERPStTzStartMin, wtIpWatcherAlarmTcpIpAddr=wtIpWatcherAlarmTcpIpAddr, wtIpWatcherAlarmTimerCron=wtIpWatcherAlarmTimerCron, wtWebioEA2x2ERP_24VAlarmTcpText=wtWebioEA2x2ERP_24VAlarmTcpText, wtWebioEA12x12StTzStartWday=wtWebioEA12x12StTzStartWday, wtWebAlarm6x6AlarmEnable=wtWebAlarm6x6AlarmEnable, wtIpWatcherAlarmSyslogTrgClearText=wtIpWatcherAlarmSyslogTrgClearText, wtWebioEA2x2ERP_24VAlert3=wtWebioEA2x2ERP_24VAlert3, wtWebioEA12x6RelSnmpCommunityStringReadWrite=wtWebioEA12x6RelSnmpCommunityStringReadWrite, wtWebioEA2x2ERP_24VAlert12=wtWebioEA2x2ERP_24VAlert12, wtWebioEA12x6RelERPBinaryTcpServerClientHttpPort=wtWebioEA12x6RelERPBinaryTcpServerClientHttpPort, wtWebioEA2x2_24VBasic=wtWebioEA2x2_24VBasic, wtWebAlarm6x6TimeDate=wtWebAlarm6x6TimeDate)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA12x6RelERPSyslogServerPort=wtWebioEA12x6RelERPSyslogServerPort, wtWebioEA2x2_24VAlarmNo=wtWebioEA2x2_24VAlarmNo, wtTrapReceiver2x2ActionNo=wtTrapReceiver2x2ActionNo, wtIpWatcherAlert18=wtIpWatcherAlert18, wtIpWatcherAlarmSyslogReleaseText=wtIpWatcherAlarmSyslogReleaseText, wtWebioEA2x2ERP_24VStTzStopMonth=wtWebioEA2x2ERP_24VStTzStopMonth, wtWebioEA6x6Alert13=wtWebioEA6x6Alert13, wtWebioEA2x2ERPSubnetMask=wtWebioEA2x2ERPSubnetMask, wtWebioEA12x6RelStTzStartMode=wtWebioEA12x6RelStTzStartMode, wtWebioEA6x6BinaryUdpPeerApplicationMode=wtWebioEA6x6BinaryUdpPeerApplicationMode, wtWebCount6ReportSyslogText=wtWebCount6ReportSyslogText, wtWebioEA6x6FTPPassword=wtWebioEA6x6FTPPassword, wtWebioEA12x6RelERPAlarmFtpReleaseText=wtWebioEA12x6RelERPAlarmFtpReleaseText, wtWebioEA2x2_24VAlert18=wtWebioEA2x2_24VAlert18, wtTrapReceiver2x2Action=wtTrapReceiver2x2Action, wtWebioEA12x6RelERPPortInputMode=wtWebioEA12x6RelERPPortInputMode, wtIpWatcher_24VAlert16=wtIpWatcher_24VAlert16, wtWebioEA2x2ClockDay=wtWebioEA2x2ClockDay, wtWebioEA6x6OutputTable=wtWebioEA6x6OutputTable, wtTrapReceiver2x2UdpAdminPort=wtTrapReceiver2x2UdpAdminPort, wtTrapReceiver2x2PortPulseDuration=wtTrapReceiver2x2PortPulseDuration, wtIpWatcherPortInputName=wtIpWatcherPortInputName, wtWebioEA2x2ERP_24VDiagErrorMessage=wtWebioEA2x2ERP_24VDiagErrorMessage, wtWebioEA2x2_24VMailPop3Server=wtWebioEA2x2_24VMailPop3Server, wtWebAlarm6x6TimeServer1=wtWebAlarm6x6TimeServer1, wtWebioEA2x2ERPAlert20=wtWebioEA2x2ERPAlert20, wtIpWatcherInputNo=wtIpWatcherInputNo, wtWebioEA2x2AlarmSyslogIpAddr=wtWebioEA2x2AlarmSyslogIpAddr, wtWebioEA12x6RelTzOffsetHrs=wtWebioEA12x6RelTzOffsetHrs, wtWebioEA12x12BinaryModeCount=wtWebioEA12x12BinaryModeCount, wtWebAlarm6x6AlarmSyslogReleaseText=wtWebAlarm6x6AlarmSyslogReleaseText, wtWebioEA12x6RelSnmpSystemTrapManagerIP=wtWebioEA12x6RelSnmpSystemTrapManagerIP, wtIpWatcherOutputValue=wtIpWatcherOutputValue, wtWebioEA12x12BinaryTcpClientLocalPort=wtWebioEA12x12BinaryTcpClientLocalPort, wtTrapReceiver2x2ButtonPortEntry=wtTrapReceiver2x2ButtonPortEntry, wtWebioEA12x6RelERPPortInputName=wtWebioEA12x6RelERPPortInputName, wtWebioEA12x12DeviceClock=wtWebioEA12x12DeviceClock, wtWebioEA6x6AlarmOutputTrigger=wtWebioEA6x6AlarmOutputTrigger, wtWebioEA2x2ERPMfInternet=wtWebioEA2x2ERPMfInternet, wtWebioEA12x12BinaryTcpClientInactivity=wtWebioEA12x12BinaryTcpClientInactivity, wtWebioEA6x6Alert14=wtWebioEA6x6Alert14, wtWebioEA24oemMailPop3Server=wtWebioEA24oemMailPop3Server, wtWebioEA24oemSyslogSystemMessagesEnable=wtWebioEA24oemSyslogSystemMessagesEnable, wtWebioEA12x6RelERPAlarmTcpIpAddr=wtWebioEA12x6RelERPAlarmTcpIpAddr, wtWebioEA12x6RelERPAlarmTimerCron=wtWebioEA12x6RelERPAlarmTimerCron, wtIpWatcherPorts=wtIpWatcherPorts, wtWebioEA2x2_24VTsSyncTime=wtWebioEA2x2_24VTsSyncTime, wtTrapReceiver2x2MailAdName=wtTrapReceiver2x2MailAdName, wtWebCount6ReportEntry=wtWebCount6ReportEntry, wtWebioEA2x2PortPulsePolarity=wtWebioEA2x2PortPulsePolarity, wtIpWatcherAlarmSyslogTrapTxEnable=wtIpWatcherAlarmSyslogTrapTxEnable, wtWebioEA6x6TsEnable=wtWebioEA6x6TsEnable, wtWebioEA2x2ERPBinary=wtWebioEA2x2ERPBinary, wtWebioEA2x2ERP_24VPortOutputText=wtWebioEA2x2ERP_24VPortOutputText, wtWebioEA24oemAlert22=wtWebioEA24oemAlert22, wtWebioEA12x6RelERPAlarm=wtWebioEA12x6RelERPAlarm, wtWebioEA2x2MailAuthPassword=wtWebioEA2x2MailAuthPassword, wtIpWatcherAlarmSnmpTrapTrgClearText=wtIpWatcherAlarmSnmpTrapTrgClearText, wtWebioEA12x6RelERPTsSyncTime=wtWebioEA12x6RelERPTsSyncTime, wtIpWatcher_24VDiagErrorClear=wtIpWatcher_24VDiagErrorClear, wtWebCount6Syslog=wtWebCount6Syslog, wtIpWatcher_24VAlarmMailSubject=wtIpWatcher_24VAlarmMailSubject, wtWebioEA2x2ERPDiagErrorMessage=wtWebioEA2x2ERPDiagErrorMessage, wtWebioEA24oemMfName=wtWebioEA24oemMfName, wtWebioEA6x6Alert23=wtWebioEA6x6Alert23, wtWebioEA2x2_24VOutputMode=wtWebioEA2x2_24VOutputMode, wtWebioEA24oemDeviceName=wtWebioEA24oemDeviceName, wtWebioEA2x2_24VAlarmTcpReleaseText=wtWebioEA2x2_24VAlarmTcpReleaseText, wtWebioEA2x2HTTP=wtWebioEA2x2HTTP, wtWebAlarm6x6PortInputText=wtWebAlarm6x6PortInputText, wtWebioEA2x2BinaryTcpServerInputTrigger=wtWebioEA2x2BinaryTcpServerInputTrigger, wtWebioEA12x12Text=wtWebioEA12x12Text, wtWebioEA2x2ERP_24VInputEntry=wtWebioEA2x2ERP_24VInputEntry, wtWebCount6Alert3=wtWebCount6Alert3, wtWebioEA24oemUdpAdminPort=wtWebioEA24oemUdpAdminPort, wtIpWatcher_24VSnmpEnable=wtIpWatcher_24VSnmpEnable, wtWebioEA2x2ERPSessCntrlConfigMode=wtWebioEA2x2ERPSessCntrlConfigMode, wtWebioEA24oemPortPulseDuration=wtWebioEA24oemPortPulseDuration, wtWebioEA2x2ERP_24VAlarmTimerCron=wtWebioEA2x2ERP_24VAlarmTimerCron, wtWebioEA2x2BinaryIfEntry=wtWebioEA2x2BinaryIfEntry, wtWebioEA2x2ERPAlert19=wtWebioEA2x2ERPAlert19, wtWebioEA24oemMfAddr=wtWebioEA24oemMfAddr, wtWebioEA12x6RelStTzOffsetHrs=wtWebioEA12x6RelStTzOffsetHrs, wtWebioEA2x2AlarmTcpIpAddr=wtWebioEA2x2AlarmTcpIpAddr, wtWebioEA12x6RelERPAlert20=wtWebioEA12x6RelERPAlert20, wtTrapReceiver2x2InputPortTable=wtTrapReceiver2x2InputPortTable, wtWebioEA12x12Diag=wtWebioEA12x12Diag, wtTrapReceiver2x2SystemTimerPortEntry=wtTrapReceiver2x2SystemTimerPortEntry, wtWebioEA2x2ERPAlert24=wtWebioEA2x2ERPAlert24, wtWebioEA24oemPortLogicOutputInverter=wtWebioEA24oemPortLogicOutputInverter, wtWebioEA2x2ERP_24VDeviceName=wtWebioEA2x2ERP_24VDeviceName, wtWebioEA2x2_24VAlarmInputTrigger=wtWebioEA2x2_24VAlarmInputTrigger, wtWebioEA24oemAlert18=wtWebioEA24oemAlert18, wtWebioEA6x6DiagErrorMessage=wtWebioEA6x6DiagErrorMessage, wtWebioEA12x6RelBinaryIfEntry=wtWebioEA12x6RelBinaryIfEntry, wtTrapReceiver2x2Alert1=wtTrapReceiver2x2Alert1, wtWebioEA2x2StTzStartMode=wtWebioEA2x2StTzStartMode, wtWebioEA12x6RelDevice=wtWebioEA12x6RelDevice, wtWebCount6TimeServer2=wtWebCount6TimeServer2, wtWebioEA12x6RelMfDeviceTyp=wtWebioEA12x6RelMfDeviceTyp, wtIpWatcher_24VAlert26=wtIpWatcher_24VAlert26, wtWebioEA12x6RelERPInputPortTable=wtWebioEA12x6RelERPInputPortTable, wtWebioEA6x6MfHotline=wtWebioEA6x6MfHotline, wtWebioEA2x2_24VBinaryTcpClientInputTrigger=wtWebioEA2x2_24VBinaryTcpClientInputTrigger, wtIpWatcher_24VAlert19=wtIpWatcher_24VAlert19, wtWebAlarm6x6MailReply=wtWebAlarm6x6MailReply, wtWebioEA6x6SetOutput=wtWebioEA6x6SetOutput, wtWebioEA12x6RelUDP=wtWebioEA12x6RelUDP, wtWebioEA2x2ERPText=wtWebioEA2x2ERPText, wtWebioEA12x6RelERPSNMP=wtWebioEA12x6RelERPSNMP, wtWebioEA12x12Alert9=wtWebioEA12x12Alert9, wtWebioEA12x6RelERPAlarmSyslogPort=wtWebioEA12x6RelERPAlarmSyslogPort, wtWebioEA6x6StTzStopMin=wtWebioEA6x6StTzStopMin, wtWebAlarm6x6MailAuthPassword=wtWebAlarm6x6MailAuthPassword, wtIpWatcherIpListTable=wtIpWatcherIpListTable, wtWebioEA2x2_24VOutputModeEntry=wtWebioEA2x2_24VOutputModeEntry, wtWebioEA12x12Startup=wtWebioEA12x12Startup, wtWebioEA12x12AlarmInputTrigger=wtWebioEA12x12AlarmInputTrigger, wtTrapReceiver2x2MfAddr=wtTrapReceiver2x2MfAddr, wtWebioEA2x2ERPDeviceContact=wtWebioEA2x2ERPDeviceContact, wtWebioEA2x2ERP_24VAlert8=wtWebioEA2x2ERP_24VAlert8, wtWebioEA2x2DnsServer1=wtWebioEA2x2DnsServer1, wtWebioEA12x12BinaryTcpServerApplicationMode=wtWebioEA12x12BinaryTcpServerApplicationMode, wtTrapReceiver2x2WatchListIfEntry=wtTrapReceiver2x2WatchListIfEntry, wtTrapReceiver2x2OutputMode=wtTrapReceiver2x2OutputMode, wtWebioEA12x6RelERPBinaryUdpPeerInputTrigger=wtWebioEA12x6RelERPBinaryUdpPeerInputTrigger, wtWebioEA12x6RelERPAlert2=wtWebioEA12x6RelERPAlert2, wtWebioEA12x6RelAlarmMailAddr=wtWebioEA12x6RelAlarmMailAddr, wtWebioEA12x6RelERPInputEntry=wtWebioEA12x6RelERPInputEntry, wtWebioEA2x2ERPWayBackFTPPassword=wtWebioEA2x2ERPWayBackFTPPassword, wtWebioEA12x12AlarmSyslogIpAddr=wtWebioEA12x12AlarmSyslogIpAddr, wtWebioEA2x2_24VAlarmUdpIpAddr=wtWebioEA2x2_24VAlarmUdpIpAddr, wtWebioEA6x6FTPAccount=wtWebioEA6x6FTPAccount, wtWebCount6Config=wtWebCount6Config, wtWebioEA2x2ERPAlarmCount=wtWebioEA2x2ERPAlarmCount, wtTrapReceiver2x2InputValue=wtTrapReceiver2x2InputValue, wtIpWatcherDeviceClock=wtIpWatcherDeviceClock, wtWebioEA2x2ERP_24VOutputPortEntry=wtWebioEA2x2ERP_24VOutputPortEntry, wtWebAlarm6x6Alert13=wtWebAlarm6x6Alert13, wtWebioEA2x2ERPMailAdName=wtWebioEA2x2ERPMailAdName, wtWebioEA6x6ClockHrs=wtWebioEA6x6ClockHrs, wtWebioEA2x2_24VStTzStartWday=wtWebioEA2x2_24VStTzStartWday, wtWebioEA2x2PortLogicInputMask=wtWebioEA2x2PortLogicInputMask, wtWebioEA12x6RelDiagErrorCount=wtWebioEA12x6RelDiagErrorCount, wtIpWatcher_24VAlert8=wtIpWatcher_24VAlert8, wtWebCount6TimeServer=wtWebCount6TimeServer, wtWebioEA12x6RelBinaryTcpClientInactivity=wtWebioEA12x6RelBinaryTcpClientInactivity, wtWebioEA2x2ERPInOut=wtWebioEA2x2ERPInOut, wtWebioEA6x6SessCntrlConfigPassword=wtWebioEA6x6SessCntrlConfigPassword, wtWebioEA2x2Alert8=wtWebioEA2x2Alert8, wtIpWatcherAlarmSetPort=wtIpWatcherAlarmSetPort, wtWebioEA2x2ERPAlert7=wtWebioEA2x2ERPAlert7, wtWebioEA6x6HTTP=wtWebioEA6x6HTTP, wtWebAlarm6x6Network=wtWebAlarm6x6Network, wtWebioEA2x2_24VUdpAdminPort=wtWebioEA2x2_24VUdpAdminPort, wtWebioEA2x2_24VMailAuthentication=wtWebioEA2x2_24VMailAuthentication, wtTrapReceiver2x2WatchListService=wtTrapReceiver2x2WatchListService, wtWebioEA12x12SafetyTimeout=wtWebioEA12x12SafetyTimeout, wtWebioEA2x2ERPAlarm=wtWebioEA2x2ERPAlarm, wtWebioEA2x2ERPSessCntrlPassword=wtWebioEA2x2ERPSessCntrlPassword, wtTrapReceiver2x2WatchListTable=wtTrapReceiver2x2WatchListTable, wtIpWatcher_24VAlert30=wtIpWatcher_24VAlert30, wtWebioEA2x2ERP_24VMailAuthUser=wtWebioEA2x2ERP_24VMailAuthUser, wtTrapReceiver2x2Outputs=wtTrapReceiver2x2Outputs, wtWebAlarm6x6StTzStartMode=wtWebAlarm6x6StTzStartMode, wtWebioEA2x2_24VAlarmTcpPort=wtWebioEA2x2_24VAlarmTcpPort, wtWebioEA2x2_24VOutputNo=wtWebioEA2x2_24VOutputNo, wtWebioEA2x2AlarmMailReleaseText=wtWebioEA2x2AlarmMailReleaseText, wtWebioEA2x2ERPPortLogicFunction=wtWebioEA2x2ERPPortLogicFunction, wtWebioEA2x2_24VBinaryTcpClientServerPassword=wtWebioEA2x2_24VBinaryTcpClientServerPassword, wtWebioEA12x12Alarm=wtWebioEA12x12Alarm, wtIpWatcher_24VAlert35=wtIpWatcher_24VAlert35, wtWebAlarm6x6AlarmUdpText=wtWebAlarm6x6AlarmUdpText, wtWebAlarm6x6TimeServer=wtWebAlarm6x6TimeServer, wtWebAlarm6x6SNMP=wtWebAlarm6x6SNMP, wtWebioEA2x2ERP_24VSetOutput=wtWebioEA2x2ERP_24VSetOutput, wtWebAlarm6x6InputState=wtWebAlarm6x6InputState, wtWebioEA6x6DeviceLocation=wtWebioEA6x6DeviceLocation, wtWebioEA2x2=wtWebioEA2x2, wtWebAlarm6x6InputCounterClear=wtWebAlarm6x6InputCounterClear, wtWebioEA6x6Alert17=wtWebioEA6x6Alert17, wtWebioEA12x6RelERPSnmpCommunityStringRead=wtWebioEA12x6RelERPSnmpCommunityStringRead, wtIpWatcher_24VAlarmCounterClear=wtIpWatcher_24VAlarmCounterClear, wtWebioEA24oemAlarmIfTable=wtWebioEA24oemAlarmIfTable, wtWebioEA12x12BinaryTcpClientServerHttpPort=wtWebioEA12x12BinaryTcpClientServerHttpPort, wtWebioEA24oemAlarmTcpIpAddr=wtWebioEA24oemAlarmTcpIpAddr, wtWebioEA2x2StTzStartWday=wtWebioEA2x2StTzStartWday, wtIpWatcherAlarmUdpText=wtIpWatcherAlarmUdpText, wtWebioEA2x2LoadControlEnable=wtWebioEA2x2LoadControlEnable, wtWebioEA12x6RelERPMailServer=wtWebioEA12x6RelERPMailServer, wtWebioEA12x12BinaryUdpPeerInputTrigger=wtWebioEA12x12BinaryUdpPeerInputTrigger, wtWebioEA2x2_24VSessCntrlConfigMode=wtWebioEA2x2_24VSessCntrlConfigMode, wtWebioEA2x2ERPMailServer=wtWebioEA2x2ERPMailServer, wtWebioEA2x2_24VInputNo=wtWebioEA2x2_24VInputNo, wtWebioEA12x12BinaryModeNo=wtWebioEA12x12BinaryModeNo, wtIpWatcher_24VAlarmTcpTrgClearText=wtIpWatcher_24VAlarmTcpTrgClearText, wtWebioEA12x6RelSafetyTimeout=wtWebioEA12x6RelSafetyTimeout, wtWebioEA6x6SnmpSystemTrapEnable=wtWebioEA6x6SnmpSystemTrapEnable, wtWebAlarm6x6FTPOption=wtWebAlarm6x6FTPOption, wtIpWatcher_24VPortInputName=wtIpWatcher_24VPortInputName, wtWebioEA2x2ERPHttpInputTrigger=wtWebioEA2x2ERPHttpInputTrigger, wtWebioEA6x6MailServer=wtWebioEA6x6MailServer, wtWebioEA2x2Alert17=wtWebioEA2x2Alert17, wtWebioEA2x2ERP_24VAlarmSyslogIpAddr=wtWebioEA2x2ERP_24VAlarmSyslogIpAddr, wtWebioEA6x6SessCntrlAdminPassword=wtWebioEA6x6SessCntrlAdminPassword, wtWebioEA2x2_24VSyslog=wtWebioEA2x2_24VSyslog, wtWebioEA2x2_24VPortLogicInputInverter=wtWebioEA2x2_24VPortLogicInputInverter, wtWebCount6StTzOffsetMin=wtWebCount6StTzOffsetMin, wtIpWatcherPortOutputText=wtIpWatcherPortOutputText, wtWebioEA2x2_24VAlert1=wtWebioEA2x2_24VAlert1, wtWebioEA12x6RelERPPortInputFilter=wtWebioEA12x6RelERPPortInputFilter, wtWebioEA2x2_24VBinary=wtWebioEA2x2_24VBinary, wtWebioEA2x2InOut=wtWebioEA2x2InOut, wtWebioEA12x6Rel=wtWebioEA12x6Rel, wtWebioEA2x2AlarmTcpReleaseText=wtWebioEA2x2AlarmTcpReleaseText, wtWebioEA24oemTzOffsetMin=wtWebioEA24oemTzOffsetMin, wtWebAlarm6x6Alert34=wtWebAlarm6x6Alert34, wtWebioEA12x6RelStTzEnable=wtWebioEA12x6RelStTzEnable, wtWebioEA12x6RelERPUDP=wtWebioEA12x6RelERPUDP, wtWebioEA12x12StTzEnable=wtWebioEA12x12StTzEnable, wtWebioEA2x2ERP_24VAlarmMailText=wtWebioEA2x2ERP_24VAlarmMailText, wtIpWatcher_24VSnmpSystemTrapEnable=wtIpWatcher_24VSnmpSystemTrapEnable, wtWebioEA12x12HttpInputTrigger=wtWebioEA12x12HttpInputTrigger, wtWebioEA6x6HttpInputTrigger=wtWebioEA6x6HttpInputTrigger, wtWebioEA2x2ERPAlarmFtpDataPort=wtWebioEA2x2ERPAlarmFtpDataPort, wtWebioEA2x2TimeDate=wtWebioEA2x2TimeDate, wtWebioEA2x2PortOutputName=wtWebioEA2x2PortOutputName, wtWebioEA12x6RelInputPortEntry=wtWebioEA12x6RelInputPortEntry, wtWebAlarm6x6InputNo=wtWebAlarm6x6InputNo, wtWebAlarm6x6FTPAccount=wtWebAlarm6x6FTPAccount, wtWebCount6ReportUdpPort=wtWebCount6ReportUdpPort, wtWebAlarm6x6SessCntrlAdminPassword=wtWebAlarm6x6SessCntrlAdminPassword, wtWebioEA2x2BinaryTcpClientServerHttpPort=wtWebioEA2x2BinaryTcpClientServerHttpPort, wtWebioEA12x6RelFTPServerIP=wtWebioEA12x6RelFTPServerIP, wtWebioEA12x6RelERPStTzStopWday=wtWebioEA12x6RelERPStTzStopWday, wtWebioEA24oemBinaryTcpClientServerIpAddr=wtWebioEA24oemBinaryTcpClientServerIpAddr, wtWebioEA2x2_24VBinaryModeCount=wtWebioEA2x2_24VBinaryModeCount, wtWebioEA24oemDnsServer1=wtWebioEA24oemDnsServer1, wtTrapReceiver2x2ButtonPortTable=wtTrapReceiver2x2ButtonPortTable, wtWebioEA2x2FTPUserName=wtWebioEA2x2FTPUserName, wtWebioEA2x2_24VDeviceLocation=wtWebioEA2x2_24VDeviceLocation, wtWebCount6Alert7=wtWebCount6Alert7, wtWebioEA2x2ERPStTzEnable=wtWebioEA2x2ERPStTzEnable, wtWebioEA2x2ERPAlert23=wtWebioEA2x2ERPAlert23, wtWebioEA2x2ERP_24VInputNo=wtWebioEA2x2ERP_24VInputNo, wtWebioEA2x2StTzStopMonth=wtWebioEA2x2StTzStopMonth, wtWebioEA12x12SessCntrlConfigPassword=wtWebioEA12x12SessCntrlConfigPassword, wtWebioEA2x2ERPPortOutputText=wtWebioEA2x2ERPPortOutputText, wtWebioEA12x6RelAlarmFtpFileName=wtWebioEA12x6RelAlarmFtpFileName, wtWebioEA2x2ERP_24VPortLogicInputInverter=wtWebioEA2x2ERP_24VPortLogicInputInverter, wtWebioEA2x2ERP_24VIpAddress=wtWebioEA2x2ERP_24VIpAddress, wtWebioEA2x2ERP_24VSubnetMask=wtWebioEA2x2ERP_24VSubnetMask, wtWebioEA6x6SyslogServerIP=wtWebioEA6x6SyslogServerIP, wtWebCount6StTzStartMonth=wtWebCount6StTzStartMonth)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA12x12OutputMode=wtWebioEA12x12OutputMode, wtWebioEA2x2ERPFTPServerIP=wtWebioEA2x2ERPFTPServerIP, wtWebioEA12x6RelSyslogEnable=wtWebioEA12x6RelSyslogEnable, wtIpWatcher_24VIpListPort=wtIpWatcher_24VIpListPort, wtWebioEA12x12Alert4=wtWebioEA12x12Alert4, wtWebCount6ReportMailText=wtWebCount6ReportMailText, wtWebioEA2x2_24VPortOutputSafetyState=wtWebioEA2x2_24VPortOutputSafetyState, wtIpWatcher_24VAlarmMailReleaseSubject=wtIpWatcher_24VAlarmMailReleaseSubject, wtWebioEA2x2BinaryOperationMode=wtWebioEA2x2BinaryOperationMode, wtIpWatcherTimeDate=wtIpWatcherTimeDate, wtTrapReceiver2x2SnmpCommunityStringReadWrite=wtTrapReceiver2x2SnmpCommunityStringReadWrite, wtTrapReceiver2x2WatchListPort=wtTrapReceiver2x2WatchListPort, wtTrapReceiver2x2TimeServer1=wtTrapReceiver2x2TimeServer1, wtWebioEA12x12DeviceText=wtWebioEA12x12DeviceText, wtWebioEA6x6DnsServer1=wtWebioEA6x6DnsServer1, wtWebAlarm6x6AlarmCount=wtWebAlarm6x6AlarmCount, wtTrapReceiver2x2SystemTimerNo=wtTrapReceiver2x2SystemTimerNo, wtWebCount6DiagBinaryError=wtWebCount6DiagBinaryError, wtWebioEA12x6RelAlert23=wtWebioEA12x6RelAlert23, wtWebioEA12x12TimeDate=wtWebioEA12x12TimeDate, wtWebioEA2x2ERP_24VClockMonth=wtWebioEA2x2ERP_24VClockMonth, wtWebioEA2x2ERPSnmpEnable=wtWebioEA2x2ERPSnmpEnable, wtWebioEA24oemStTzStartWday=wtWebioEA24oemStTzStartWday, wtIpWatcher_24VPortPulsePolarity=wtIpWatcher_24VPortPulsePolarity, wtWebioEA12x6RelTimeServer1=wtWebioEA12x6RelTimeServer1, wtWebioEA12x6RelERPBinaryTcpClientServerPort=wtWebioEA12x6RelERPBinaryTcpClientServerPort, wtWebioEA2x2_24VAlert2=wtWebioEA2x2_24VAlert2, wtWebioEA2x2ERP_24VAlert5=wtWebioEA2x2ERP_24VAlert5, wtTrapReceiver2x2ActionIfTable=wtTrapReceiver2x2ActionIfTable, wtTrapReceiver2x2Alert4=wtTrapReceiver2x2Alert4, wtWebioEA12x6RelERPWayBackFTPPassword=wtWebioEA12x6RelERPWayBackFTPPassword, wtWebioEA12x6RelPortOutputGroupMode=wtWebioEA12x6RelPortOutputGroupMode, wtWebioEA12x12Alert16=wtWebioEA12x12Alert16, wtWebCount6ReportFtpText=wtWebCount6ReportFtpText, wtWebioEA2x2DnsServer2=wtWebioEA2x2DnsServer2, wtIpWatcher_24VOutputNo=wtIpWatcher_24VOutputNo, wtWebioEA12x6RelPortOutputText=wtWebioEA12x6RelPortOutputText, wtWebioEA12x6RelERPSetOutput=wtWebioEA12x6RelERPSetOutput, wtWebioEA2x2_24VClockYear=wtWebioEA2x2_24VClockYear, wtIpWatcher_24VAlarmMailTrapTxEnable=wtIpWatcher_24VAlarmMailTrapTxEnable, wtWebCount6ReportEnable=wtWebCount6ReportEnable, wtWebioEA12x6RelDiagErrorMessage=wtWebioEA12x6RelDiagErrorMessage, wtTrapReceiver2x2WatchListSeverity=wtTrapReceiver2x2WatchListSeverity, wtIpWatcher_24VStTzStopHrs=wtIpWatcher_24VStTzStopHrs, wtWebioEA2x2_24VPortInputFilter=wtWebioEA2x2_24VPortInputFilter, wtIpWatcherDiagErrorCount=wtIpWatcherDiagErrorCount, wtWebioEA12x12AlarmSyslogText=wtWebioEA12x12AlarmSyslogText, wtWebioEA6x6BinaryTcpClientInterval=wtWebioEA6x6BinaryTcpClientInterval, wtWebioEA2x2DeviceText=wtWebioEA2x2DeviceText, wtWebioEA12x6RelERPSyslogServerIP=wtWebioEA12x6RelERPSyslogServerIP, wtWebAlarm6x6UDP=wtWebAlarm6x6UDP, wtWebioEA2x2AlarmTcpPort=wtWebioEA2x2AlarmTcpPort, wtWebioEA12x6RelERPClockHrs=wtWebioEA12x6RelERPClockHrs, wtWebioEA24oemAlarmFtpFileName=wtWebioEA24oemAlarmFtpFileName, wtWebioEA24oemAlarmUdpIpAddr=wtWebioEA24oemAlarmUdpIpAddr, wtWebioEA2x2_24VOutputTable=wtWebioEA2x2_24VOutputTable, wtWebioEA6x6Ports=wtWebioEA6x6Ports, wtIpWatcherOutputPortTable=wtIpWatcherOutputPortTable, wtWebioEA2x2ERPOutputs=wtWebioEA2x2ERPOutputs, wtIpWatcherUdpAdminPort=wtIpWatcherUdpAdminPort, wtWebioEA12x6RelERPOutputValue=wtWebioEA12x6RelERPOutputValue, wtWebioEA6x6UDP=wtWebioEA6x6UDP, wtIpWatcher_24VOutputMode=wtIpWatcher_24VOutputMode, wtWebioEA2x2_24VManufact=wtWebioEA2x2_24VManufact, wtTrapReceiver2x2ClockYear=wtTrapReceiver2x2ClockYear, wtWebioEA12x6RelERPInputPortEntry=wtWebioEA12x6RelERPInputPortEntry, wtWebioEA2x2ERP_24VMfDeviceTyp=wtWebioEA2x2ERP_24VMfDeviceTyp, wtWebAlarm6x6OutputTable=wtWebAlarm6x6OutputTable, wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText=wtWebioEA2x2ERP_24VAlarmSnmpTrapReleaseText, wtWebioEA2x2ERPBinaryTcpClientServerPort=wtWebioEA2x2ERPBinaryTcpClientServerPort, wtWebioEA6x6AlarmUdpIpAddr=wtWebioEA6x6AlarmUdpIpAddr, wtWebioEA2x2Inputs=wtWebioEA2x2Inputs, wtWebAlarm6x6DiagErrorIndex=wtWebAlarm6x6DiagErrorIndex, wtWebAlarm6x6Alert5=wtWebAlarm6x6Alert5, wtIpWatcher_24VMfAddr=wtIpWatcher_24VMfAddr, wtWebCount6FTPPassword=wtWebCount6FTPPassword, wtIpWatcher_24VMail=wtIpWatcher_24VMail, wtIpWatcherTimeServer1=wtIpWatcherTimeServer1, wtWebioEA2x2ERP_24VOutputModeEntry=wtWebioEA2x2ERP_24VOutputModeEntry, wtWebioEA2x2Alert9=wtWebioEA2x2Alert9, wtIpWatcherIpListIfEntry=wtIpWatcherIpListIfEntry, wtIpWatcher_24VAlert32=wtIpWatcher_24VAlert32, wtIpWatcher_24VAlertDiag=wtIpWatcher_24VAlertDiag, wtWebioEA12x12TzOffsetMin=wtWebioEA12x12TzOffsetMin, wtIpWatcherAlert3=wtIpWatcherAlert3, wtIpWatcher_24VSnmpSystemTrapManagerIP=wtIpWatcher_24VSnmpSystemTrapManagerIP, wtWebioEA12x6RelInputCounter=wtWebioEA12x6RelInputCounter, wtWebioEA6x6Alert5=wtWebioEA6x6Alert5, wtWebioEA6x6BinaryUdpPeerInputTrigger=wtWebioEA6x6BinaryUdpPeerInputTrigger, wtIpWatcherMailAuthUser=wtIpWatcherMailAuthUser, wtWebioEA12x6RelBinaryUdpPeerInputTrigger=wtWebioEA12x6RelBinaryUdpPeerInputTrigger, wtIpWatcherAlarmMailReleaseSubject=wtIpWatcherAlarmMailReleaseSubject, wtWebioEA12x6RelAlarmTcpPort=wtWebioEA12x6RelAlarmTcpPort, wtIpWatcherPortInputText=wtIpWatcherPortInputText, wtWebioEA12x6RelText=wtWebioEA12x6RelText, wtWebioEA24oemFTP=wtWebioEA24oemFTP, wtWebioEA12x6RelERPAlert10=wtWebioEA12x6RelERPAlert10, wtWebioEA2x2_24VPortLogicOutputInverter=wtWebioEA2x2_24VPortLogicOutputInverter, wtWebioEA6x6AlarmFtpReleaseText=wtWebioEA6x6AlarmFtpReleaseText, wtWebioEA2x2_24VAlarmIfTable=wtWebioEA2x2_24VAlarmIfTable, wtWebioEA2x2ERPAlert10=wtWebioEA2x2ERPAlert10, wtWebioEA2x2ERP_24VFTPServerIP=wtWebioEA2x2ERP_24VFTPServerIP, wtWebAlarm6x6AlarmEntry=wtWebAlarm6x6AlarmEntry, wtWebioEA24oemLoadControlView=wtWebioEA24oemLoadControlView, wtTrapReceiver2x2InputEntry=wtTrapReceiver2x2InputEntry, wtIpWatcher_24VIpListAlias=wtIpWatcher_24VIpListAlias, wtWebCount6InputPortEntry=wtWebCount6InputPortEntry, wtWebCount6MfOrderNo=wtWebCount6MfOrderNo, wtWebAlarm6x6Alert10=wtWebAlarm6x6Alert10, wtTrapReceiver2x2ActionInterval=wtTrapReceiver2x2ActionInterval, wtTrapReceiver2x2Text=wtTrapReceiver2x2Text, wtWebCount6SNMP=wtWebCount6SNMP, wtWebCount6ReportTable=wtWebCount6ReportTable, wtWebioEA12x12BinaryTcpClientInputTrigger=wtWebioEA12x12BinaryTcpClientInputTrigger, wtWebioEA2x2ERP_24VAlarmMailReleaseSubject=wtWebioEA2x2ERP_24VAlarmMailReleaseSubject, wtWebioEA2x2ERPAlert3=wtWebioEA2x2ERPAlert3, wtIpWatcher_24VAlert15=wtIpWatcher_24VAlert15, wtWebioEA2x2ERP_24VSyslog=wtWebioEA2x2ERP_24VSyslog, wtWebioEA2x2ERP_24VPortPulseDuration=wtWebioEA2x2ERP_24VPortPulseDuration, wtWebCount6SubnetMask=wtWebCount6SubnetMask, wtTrapReceiver2x2InOut=wtTrapReceiver2x2InOut, wtWebioEA12x6RelERPAlarmTable=wtWebioEA12x6RelERPAlarmTable, wtTrapReceiver2x2ActionCount=wtTrapReceiver2x2ActionCount, wtWebioEA2x2ERP_24VAlert24=wtWebioEA2x2ERP_24VAlert24, wtIpWatcher_24VDnsServer1=wtIpWatcher_24VDnsServer1, wtWebioEA2x2_24VAlarmFtpText=wtWebioEA2x2_24VAlarmFtpText, wtWebAlarm6x6AlarmMaxCounterValue=wtWebAlarm6x6AlarmMaxCounterValue, wtWebioEA12x12LCShutDownView=wtWebioEA12x12LCShutDownView, wtWebioEA2x2ERP_24VBinaryUdpPeerInterval=wtWebioEA2x2ERP_24VBinaryUdpPeerInterval, wtWebioEA2x2ERPSessCntrlConfigPassword=wtWebioEA2x2ERPSessCntrlConfigPassword, wtWebioEA2x2ERP_24VDeviceText=wtWebioEA2x2ERP_24VDeviceText, wtWebioEA12x6RelERPAlarmMailAddr=wtWebioEA12x6RelERPAlarmMailAddr, wtWebioEA2x2ERPMailAuthUser=wtWebioEA2x2ERPMailAuthUser, wtIpWatcherMailEnable=wtIpWatcherMailEnable, wtWebAlarm6x6Alert31=wtWebAlarm6x6Alert31, wtWebCount6Alert10=wtWebCount6Alert10, wtIpWatcherIpListAlias=wtIpWatcherIpListAlias, wtTrapReceiver2x2Syslog=wtTrapReceiver2x2Syslog, wtWebioEA12x6RelERPTsEnable=wtWebioEA12x6RelERPTsEnable, wtWebioEA2x2ERP_24V=wtWebioEA2x2ERP_24V, wtWebioEA2x2ERPAlarmSnmpTrapText=wtWebioEA2x2ERPAlarmSnmpTrapText, wtTrapReceiver2x2ActionOutputTable=wtTrapReceiver2x2ActionOutputTable, wtWebioEA2x2PortOutputText=wtWebioEA2x2PortOutputText, wtWebCount6HttpPort=wtWebCount6HttpPort, wtTrapReceiver2x2FTPServerIP=wtTrapReceiver2x2FTPServerIP, wtWebAlarm6x6AlarmSetPort=wtWebAlarm6x6AlarmSetPort, wtWebioEA2x2ERP_24VLoadControlView=wtWebioEA2x2ERP_24VLoadControlView, wtWebioEA6x6SnmpCommunityStringReadWrite=wtWebioEA6x6SnmpCommunityStringReadWrite, wtWebCount6ReportSyslogIpAddr=wtWebCount6ReportSyslogIpAddr, wtIpWatcher_24VStTzStartMode=wtIpWatcher_24VStTzStartMode, wtWebioEA24oemAlarmMailText=wtWebioEA24oemAlarmMailText, wtWebioEA12x12MailAuthPassword=wtWebioEA12x12MailAuthPassword, wtIpWatcherAlarmOutputState=wtIpWatcherAlarmOutputState, wtIpWatcherAlarmMailTrapTxEnable=wtIpWatcherAlarmMailTrapTxEnable, wtWebioEA6x6SessCntrlConfigMode=wtWebioEA6x6SessCntrlConfigMode, wtIpWatcher_24VOutputTable=wtIpWatcher_24VOutputTable, wtIpWatcher_24VAlarmTriggerCount=wtIpWatcher_24VAlarmTriggerCount, wtWebioEA12x12SnmpCommunityStringReadWrite=wtWebioEA12x12SnmpCommunityStringReadWrite, wtWebAlarm6x6SyslogServerIP=wtWebAlarm6x6SyslogServerIP, wtWebioEA24oemAlarmEntry=wtWebioEA24oemAlarmEntry, wtWebioEA2x2MfInternet=wtWebioEA2x2MfInternet, wtWebioEA24oemMailAuthUser=wtWebioEA24oemMailAuthUser, wtWebioEA2x2TimeServer=wtWebioEA2x2TimeServer, wtWebCount6MfName=wtWebCount6MfName, wtWebioEA6x6AlarmMailAddr=wtWebioEA6x6AlarmMailAddr, wtIpWatcher_24VAlert24=wtIpWatcher_24VAlert24, wtWebioEA12x6RelERPInputValue=wtWebioEA12x6RelERPInputValue, wtWebioEA12x6RelERPFTPServerControlPort=wtWebioEA12x6RelERPFTPServerControlPort, wtTrapReceiver2x2SessCntrlPassword=wtTrapReceiver2x2SessCntrlPassword, wtWebioEA24oemAlert10=wtWebioEA24oemAlert10, wtIpWatcher_24VIpListCount=wtIpWatcher_24VIpListCount, wtWebioEA2x2_24VSyslogServerPort=wtWebioEA2x2_24VSyslogServerPort, wtWebCount6DiagErrorCount=wtWebCount6DiagErrorCount, wtWebioEA2x2ERP_24VAlarmNo=wtWebioEA2x2ERP_24VAlarmNo, wtWebioEA2x2Binary=wtWebioEA2x2Binary, wtWebioEA2x2InputCounter=wtWebioEA2x2InputCounter, wtWebioEA2x2BinaryTcpClientServerIpAddr=wtWebioEA2x2BinaryTcpClientServerIpAddr, wtWebioEA2x2ERPPortInputFilter=wtWebioEA2x2ERPPortInputFilter, wtWebioEA12x6RelSyslogSystemMessagesEnable=wtWebioEA12x6RelSyslogSystemMessagesEnable, wtWebioEA24oemAlarmMailSubject=wtWebioEA24oemAlarmMailSubject, wtWebioEA2x2ERP_24VInputState=wtWebioEA2x2ERP_24VInputState, wtWebioEA2x2_24VStTzStartHrs=wtWebioEA2x2_24VStTzStartHrs, wtTrapReceiver2x2SyslogServerIP=wtTrapReceiver2x2SyslogServerIP, wtWebioEA2x2ERPAlarmInterval=wtWebioEA2x2ERPAlarmInterval, wtWebioEA12x12Basic=wtWebioEA12x12Basic, wtWebioEA12x12StTzStopMonth=wtWebioEA12x12StTzStopMonth, wtTrapReceiver2x2PrepareInEvents=wtTrapReceiver2x2PrepareInEvents, wtIpWatcher_24VAlert31=wtIpWatcher_24VAlert31, wtWebioEA12x6RelERPStTzStopMonth=wtWebioEA12x6RelERPStTzStopMonth, wtTrapReceiver2x2StTzStopMonth=wtTrapReceiver2x2StTzStopMonth, wtWebioEA12x12AlarmTcpReleaseText=wtWebioEA12x12AlarmTcpReleaseText, wtWebAlarm6x6TsEnable=wtWebAlarm6x6TsEnable, wtWebioEA12x6RelERPOutputNo=wtWebioEA12x6RelERPOutputNo, wtWebioEA2x2ERP_24VBinaryTcpServerClientHttpPort=wtWebioEA2x2ERP_24VBinaryTcpServerClientHttpPort, wtWebioEA12x6RelPortInputFilter=wtWebioEA12x6RelPortInputFilter, wtIpWatcher_24VSessCntrlConfigMode=wtIpWatcher_24VSessCntrlConfigMode, wtWebioEA2x2ERPBinaryTcpServerInputTrigger=wtWebioEA2x2ERPBinaryTcpServerInputTrigger, wtWebCount6SyslogServerPort=wtWebCount6SyslogServerPort, wtWebioEA2x2ERP_24VAlarmTable=wtWebioEA2x2ERP_24VAlarmTable, wtIpWatcher_24VMailEnable=wtIpWatcher_24VMailEnable, wtWebioEA12x6RelERPTimeServer=wtWebioEA12x6RelERPTimeServer, wtWebioEA2x2ERP_24VAlarmUdpText=wtWebioEA2x2ERP_24VAlarmUdpText, wtIpWatcherMailAuthPassword=wtIpWatcherMailAuthPassword, wtTrapReceiver2x2Ports=wtTrapReceiver2x2Ports, wtWebioEA12x12DnsServer2=wtWebioEA12x12DnsServer2, wtTrapReceiver2x2DeviceName=wtTrapReceiver2x2DeviceName, wtWebCount6Alert2=wtWebCount6Alert2, wtWebioEA6x6AlarmMailReleaseText=wtWebioEA6x6AlarmMailReleaseText, wtWebioEA12x12AlarmSyslogReleaseText=wtWebioEA12x12AlarmSyslogReleaseText, wtWebCount6ReportTcpIpAddr=wtWebCount6ReportTcpIpAddr, wtWebioEA2x2_24VStTzStartMin=wtWebioEA2x2_24VStTzStartMin, wtWebioEA2x2ERP_24VBinaryTcpClientServerPassword=wtWebioEA2x2ERP_24VBinaryTcpClientServerPassword, wtWebAlarm6x6InputValue=wtWebAlarm6x6InputValue, wtIpWatcher_24VFTPEnable=wtIpWatcher_24VFTPEnable, wtTrapReceiver2x2DeviceContact=wtTrapReceiver2x2DeviceContact, wtWebCount6StTzStartMin=wtWebCount6StTzStartMin, wtIpWatcher_24VMailPop3Server=wtIpWatcher_24VMailPop3Server, wtWebioEA12x6RelERPMfName=wtWebioEA12x6RelERPMfName, wtWebioEA2x2_24VBinaryTcpClientInactivity=wtWebioEA2x2_24VBinaryTcpClientInactivity, wtWebioEA24oemAlarmCount=wtWebioEA24oemAlarmCount, wtWebioEA6x6BinaryTcpServerLocalPort=wtWebioEA6x6BinaryTcpServerLocalPort, wtIpWatcher_24VOutputValue=wtIpWatcher_24VOutputValue, wtWebCount6TimeDate=wtWebCount6TimeDate, wtIpWatcher_24VOutputPortTable=wtIpWatcher_24VOutputPortTable, wtWebioEA12x6RelERPAlert23=wtWebioEA12x6RelERPAlert23, wtWebCount6DnsServer1=wtWebCount6DnsServer1, wtWebioEA2x2DiagErrorIndex=wtWebioEA2x2DiagErrorIndex, wtWebCount6ReportInterval=wtWebCount6ReportInterval, wtTrapReceiver2x2=wtTrapReceiver2x2, wtWebioEA12x6RelBinaryModeCount=wtWebioEA12x6RelBinaryModeCount, wtWebAlarm6x6SyslogEnable=wtWebAlarm6x6SyslogEnable, wtWebioEA2x2AlarmFtpText=wtWebioEA2x2AlarmFtpText, wtTrapReceiver2x2ActionFtpOption=wtTrapReceiver2x2ActionFtpOption, wtWebioEA24oemInputNo=wtWebioEA24oemInputNo, wtIpWatcher_24VAlarmTcpPort=wtIpWatcher_24VAlarmTcpPort, wtWebioEA12x12SnmpEnable=wtWebioEA12x12SnmpEnable, wtIpWatcherAlarmTcpText=wtIpWatcherAlarmTcpText, wtWebioEA2x2ERPBinaryModeCount=wtWebioEA2x2ERPBinaryModeCount, wtWebioEA12x6RelBinaryUdpPeerLocalPort=wtWebioEA12x6RelBinaryUdpPeerLocalPort, wtIpWatcherAlert28=wtIpWatcherAlert28, wtWebioEA12x12AlarmNo=wtWebioEA12x12AlarmNo, wtTrapReceiver2x2PortOutputName=wtTrapReceiver2x2PortOutputName, wtWebioEA2x2_24VInputState=wtWebioEA2x2_24VInputState, wtWebAlarm6x6SnmpCommunityStringReadWrite=wtWebAlarm6x6SnmpCommunityStringReadWrite, wtWebioEA12x6RelAlert20=wtWebioEA12x6RelAlert20, wtWebAlarm6x6MailPop3Server=wtWebAlarm6x6MailPop3Server, wtWebioEA24oemHttpPort=wtWebioEA24oemHttpPort, wtWebAlarm6x6DnsServer1=wtWebAlarm6x6DnsServer1, wtWebioEA12x6RelDeviceText=wtWebioEA12x6RelDeviceText, wtWebioEA6x6AlarmTcpReleaseText=wtWebioEA6x6AlarmTcpReleaseText, wtWebioEA2x2ERPAlarmSyslogText=wtWebioEA2x2ERPAlarmSyslogText, wtIpWatcher_24VNetwork=wtIpWatcher_24VNetwork, wtWebioEA2x2ERP_24VAlarmSystemTrigger=wtWebioEA2x2ERP_24VAlarmSystemTrigger, wtTrapReceiver2x2TimeDate=wtTrapReceiver2x2TimeDate)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebCount6FTP=wtWebCount6FTP, wtWebioEA2x2_24VInputCounter=wtWebioEA2x2_24VInputCounter, wtWebioEA12x12PortInputBicountInactivTimeout=wtWebioEA12x12PortInputBicountInactivTimeout, wtWebAlarm6x6FTPServerControlPort=wtWebAlarm6x6FTPServerControlPort, wtWebioEA2x2_24VInputEntry=wtWebioEA2x2_24VInputEntry, wtWebioEA2x2UDP=wtWebioEA2x2UDP, wtWebioEA2x2Alert21=wtWebioEA2x2Alert21, wtWebioEA12x12Alert14=wtWebioEA12x12Alert14, wtIpWatcherAlarmEnable=wtIpWatcherAlarmEnable, wtWebioEA12x6RelSessCntrlPassword=wtWebioEA12x6RelSessCntrlPassword, wtWebioEA2x2Network=wtWebioEA2x2Network, wtIpWatcher_24VStTzStartWday=wtIpWatcher_24VStTzStartWday, wtWebioEA12x6RelOutputTable=wtWebioEA12x6RelOutputTable, wtWebioEA12x6RelERPStTzStartMode=wtWebioEA12x6RelERPStTzStartMode, wtWebCount6Report=wtWebCount6Report, wtWebCount6Alert1=wtWebCount6Alert1, wtWebioEA2x2_24VDeviceText=wtWebioEA2x2_24VDeviceText, wtWebioEA12x6RelClockMin=wtWebioEA12x6RelClockMin, wtWebioEA2x2ERPDiagErrorIndex=wtWebioEA2x2ERPDiagErrorIndex, wtWebioEA2x2ERPAlarmMailSubject=wtWebioEA2x2ERPAlarmMailSubject, wtIpWatcher_24VUdpAdminPort=wtIpWatcher_24VUdpAdminPort, wtTrapReceiver2x2Alert7=wtTrapReceiver2x2Alert7, wtWebCount6FTPAccount=wtWebCount6FTPAccount, wtIpWatcher_24VOutputPortEntry=wtIpWatcher_24VOutputPortEntry, wtWebioEA2x2AlarmMailSubject=wtWebioEA2x2AlarmMailSubject, wtWebioEA2x2ERP_24VPortLogicInputMask=wtWebioEA2x2ERP_24VPortLogicInputMask, wtWebioEA2x2Alert18=wtWebioEA2x2Alert18, wtWebCount6MfAddr=wtWebCount6MfAddr, wtTrapReceiver2x2TzOffsetMin=wtTrapReceiver2x2TzOffsetMin, wtWebioEA6x6SNMP=wtWebioEA6x6SNMP, wtWebioEA2x2InputCounterClear=wtWebioEA2x2InputCounterClear, wtWebioEA24oemSNMP=wtWebioEA24oemSNMP, wtWebAlarm6x6StTzStopMonth=wtWebAlarm6x6StTzStopMonth, wtWebioEA2x2ERP_24VPowerSupplyEnable=wtWebioEA2x2ERP_24VPowerSupplyEnable, wtIpWatcher_24VStTzStopMonth=wtIpWatcher_24VStTzStopMonth, wtWebioEA24oemAddConfig=wtWebioEA24oemAddConfig, wtWebioEA2x2_24VClockDay=wtWebioEA2x2_24VClockDay, wtWebioEA6x6StTzStartMonth=wtWebioEA6x6StTzStartMonth, wtWebioEA2x2ERP_24VDeviceLocation=wtWebioEA2x2ERP_24VDeviceLocation, wtIpWatcher_24VFTPOption=wtIpWatcher_24VFTPOption, wtWebioEA24oemAlarmMailAddr=wtWebioEA24oemAlarmMailAddr, wtWebioEA2x2ERP_24VBinaryUdpPeerRemotePort=wtWebioEA2x2ERP_24VBinaryUdpPeerRemotePort, wtWebioEA2x2ERPConfig=wtWebioEA2x2ERPConfig, wtIpWatcher_24VClockMonth=wtIpWatcher_24VClockMonth, wtWebioEA24oemFTPAccount=wtWebioEA24oemFTPAccount, wtWebCount6ReportMailSubject=wtWebCount6ReportMailSubject, wtTrapReceiver2x2PortButtonAccess=wtTrapReceiver2x2PortButtonAccess, wtWebioEA24oemDiagErrorIndex=wtWebioEA24oemDiagErrorIndex, wtWebioEA2x2_24VBinaryTcpClientInterval=wtWebioEA2x2_24VBinaryTcpClientInterval, wtWebCount6DeviceClock=wtWebCount6DeviceClock, wtWebAlarm6x6Alert17=wtWebAlarm6x6Alert17, wtIpWatcherAlert11=wtIpWatcherAlert11, wtWebioEA24oemAlert32=wtWebioEA24oemAlert32, wtWebioEA2x2_24VDevice=wtWebioEA2x2_24VDevice, wtWebioEA2x2PortInputBicountPulsePolarity=wtWebioEA2x2PortInputBicountPulsePolarity, wtTrapReceiver2x2PortSystemTimerName=wtTrapReceiver2x2PortSystemTimerName, wtIpWatcherPortPulsePolarity=wtIpWatcherPortPulsePolarity, wtTrapReceiver2x2ActionFtpText=wtTrapReceiver2x2ActionFtpText, wtWebioEA2x2MailAuthUser=wtWebioEA2x2MailAuthUser, wtWebioEA2x2ERP_24VWayBack=wtWebioEA2x2ERP_24VWayBack, wtWebAlarm6x6InputCounter=wtWebAlarm6x6InputCounter, wtWebioEA12x12SessCntrlPassword=wtWebioEA12x12SessCntrlPassword, wtWebioEA2x2GetHeaderEnable=wtWebioEA2x2GetHeaderEnable, wtWebioEA12x6RelERPBinaryConnectedIpAddr=wtWebioEA12x6RelERPBinaryConnectedIpAddr, wtWebioEA6x6Alert18=wtWebioEA6x6Alert18, wtWebioEA2x2ERP_24VInputCounterClear=wtWebioEA2x2ERP_24VInputCounterClear, wtWebioEA12x12OutputTable=wtWebioEA12x12OutputTable, wtWebioEA24oemBinaryTcpServerApplicationMode=wtWebioEA24oemBinaryTcpServerApplicationMode, wtWebAlarm6x6AlarmTcpReleaseText=wtWebAlarm6x6AlarmTcpReleaseText, wtIpWatcherAlarmEntry=wtIpWatcherAlarmEntry, wtWebioEA12x6RelFTPPassword=wtWebioEA12x6RelFTPPassword, wtWebioEA6x6AlarmFtpOption=wtWebioEA6x6AlarmFtpOption, wtWebioEA12x6RelERPMailReply=wtWebioEA12x6RelERPMailReply, wtWebioEA2x2_24VAlert5=wtWebioEA2x2_24VAlert5, wtWebioEA2x2ERP_24VPortOutputSafetyState=wtWebioEA2x2ERP_24VPortOutputSafetyState, wtIpWatcher_24VAlert14=wtIpWatcher_24VAlert14, wtWebioEA2x2_24VHttpInputTrigger=wtWebioEA2x2_24VHttpInputTrigger, wtWebAlarm6x6Alert21=wtWebAlarm6x6Alert21, wtWebioEA2x2InputPortTable=wtWebioEA2x2InputPortTable, wtWebioEA2x2InputNo=wtWebioEA2x2InputNo, wtWebioEA12x6RelERPAlert5=wtWebioEA12x6RelERPAlert5, wtWebioEA12x12ClockYear=wtWebioEA12x12ClockYear, wtIpWatcher_24VInputPortEntry=wtIpWatcher_24VInputPortEntry, wtWebAlarm6x6IpAddress=wtWebAlarm6x6IpAddress, wtWebioEA12x6RelERPAlarmUdpText=wtWebioEA12x6RelERPAlarmUdpText, wtWebioEA2x2_24VUDP=wtWebioEA2x2_24VUDP, wtWebioEA24oemIpAddress=wtWebioEA24oemIpAddress, wtIpWatcherDeviceName=wtIpWatcherDeviceName, wtWebioEA12x6RelERPStTzOffsetHrs=wtWebioEA12x6RelERPStTzOffsetHrs, wtIpWatcherIpListEnable=wtIpWatcherIpListEnable, wtIpWatcher_24VAlarmFtpTrgClearText=wtIpWatcher_24VAlarmFtpTrgClearText, wtWebioEA2x2BinaryUdpPeerInputTrigger=wtWebioEA2x2BinaryUdpPeerInputTrigger, wtWebioEA12x6RelAlarmFtpOption=wtWebioEA12x6RelAlarmFtpOption, wtWebCount6ReportMaxCounterValue=wtWebCount6ReportMaxCounterValue, wtWebioEA12x6RelERPInputs=wtWebioEA12x6RelERPInputs, wtWebioEA12x12UdpRemotePort=wtWebioEA12x12UdpRemotePort, wtWebioEA24oemPortOutputGroupMode=wtWebioEA24oemPortOutputGroupMode, wtWebioEA12x6RelAlarmSyslogText=wtWebioEA12x6RelAlarmSyslogText, wtWebioEA2x2_24VMailEnable=wtWebioEA2x2_24VMailEnable, wtWebAlarm6x6SubnetMask=wtWebAlarm6x6SubnetMask, wtTrapReceiver2x2WatchListAlias=wtTrapReceiver2x2WatchListAlias, wtWebioEA2x2_24VMfDeviceTyp=wtWebioEA2x2_24VMfDeviceTyp, wtWebioEA2x2ERP_24VAlarmMaxCounterValue=wtWebioEA2x2ERP_24VAlarmMaxCounterValue, wtWebioEA2x2ERPSnmpCommunityStringRead=wtWebioEA2x2ERPSnmpCommunityStringRead, wtWebioEA2x2_24VAlert24=wtWebioEA2x2_24VAlert24, wtWebioEA12x6RelERPStTzEnable=wtWebioEA12x6RelERPStTzEnable, wtTrapReceiver2x2MfName=wtTrapReceiver2x2MfName, wtIpWatcher_24VOutputEntry=wtIpWatcher_24VOutputEntry, wtWebioEA6x6Syslog=wtWebioEA6x6Syslog, wtWebioEA12x12InputCounter=wtWebioEA12x12InputCounter, wtWebioEA12x6RelBinaryTcpClientServerIpAddr=wtWebioEA12x6RelBinaryTcpClientServerIpAddr, wtIpWatcherInputs=wtIpWatcherInputs, wtWebioEA6x6AlarmFtpText=wtWebioEA6x6AlarmFtpText, wtIpWatcherAlertDiag=wtIpWatcherAlertDiag, wtWebioEA12x6RelERPSnmpEnable=wtWebioEA12x6RelERPSnmpEnable, wtTrapReceiver2x2InEvButtons=wtTrapReceiver2x2InEvButtons, wtWebioEA24oemTzOffsetHrs=wtWebioEA24oemTzOffsetHrs, wtWebioEA12x12Alert21=wtWebioEA12x12Alert21, wtWebioEA12x6RelERPAlarmTcpPort=wtWebioEA12x6RelERPAlarmTcpPort, wtWebioEA2x2_24VAlert11=wtWebioEA2x2_24VAlert11, wtWebioEA12x6RelSnmpEnable=wtWebioEA12x6RelSnmpEnable, wtIpWatcherOutputs=wtIpWatcherOutputs, wtIpWatcherAlert7=wtIpWatcherAlert7, wtWebioEA6x6TimeServer2=wtWebioEA6x6TimeServer2, wtWebAlarm6x6AlarmSyslogPort=wtWebAlarm6x6AlarmSyslogPort, wtWebioEA6x6AlarmIfEntry=wtWebioEA6x6AlarmIfEntry, wtWebioEA24oemInOut=wtWebioEA24oemInOut, wtWebioEA12x12Binary=wtWebioEA12x12Binary, wtIpWatcherAlert27=wtIpWatcherAlert27, wtWebioEA2x2ERP_24VMailAuthentication=wtWebioEA2x2ERP_24VMailAuthentication, wtTrapReceiver2x2Alert10=wtTrapReceiver2x2Alert10, wtWebioEA2x2_24VSyslogServerIP=wtWebioEA2x2_24VSyslogServerIP, wtWebioEA2x2ERP_24VAlert9=wtWebioEA2x2ERP_24VAlert9, wtWebioEA12x6RelPortLogicInputMask=wtWebioEA12x6RelPortLogicInputMask, wtIpWatcher_24VAlarmName=wtIpWatcher_24VAlarmName, wtWebCount6TzEnable=wtWebCount6TzEnable, wtWebioEA12x6RelERPText=wtWebioEA12x6RelERPText, wtWebioEA24oemPortInputMode=wtWebioEA24oemPortInputMode, wtWebAlarm6x6Alert20=wtWebAlarm6x6Alert20, wtWebCount6ClockMonth=wtWebCount6ClockMonth, wtWebioEA2x2ERPAlarmMailText=wtWebioEA2x2ERPAlarmMailText, wtWebioEA12x6RelERPDeviceText=wtWebioEA12x6RelERPDeviceText, wtWebCount6FTPOption=wtWebCount6FTPOption, wtIpWatcherAlarmOutputTable=wtIpWatcherAlarmOutputTable, wtIpWatcher_24VPorts=wtIpWatcher_24VPorts, wtWebioEA24oemAlert26=wtWebioEA24oemAlert26, wtWebioEA12x6RelBinaryTable=wtWebioEA12x6RelBinaryTable, wtWebAlarm6x6SyslogServerPort=wtWebAlarm6x6SyslogServerPort, wtWebioEA2x2ERP_24VSessCntrlConfigMode=wtWebioEA2x2ERP_24VSessCntrlConfigMode, wtWebioEA2x2AlarmUdpReleaseText=wtWebioEA2x2AlarmUdpReleaseText, wtIpWatcherAlarmSyslogText=wtIpWatcherAlarmSyslogText, wtWebioEA12x12Alert13=wtWebioEA12x12Alert13, wtWebAlarm6x6PortOutputName=wtWebAlarm6x6PortOutputName, wtWebioEA2x2OutputNo=wtWebioEA2x2OutputNo, wtTrapReceiver2x2FTP=wtTrapReceiver2x2FTP, wtWebioEA12x12Alert7=wtWebioEA12x12Alert7, wtWebioEA2x2_24VFTPServerIP=wtWebioEA2x2_24VFTPServerIP, wtWebioEA2x2ERPAlert11=wtWebioEA2x2ERPAlert11, wtWebioEA2x2SyslogEnable=wtWebioEA2x2SyslogEnable, wtWebioEA24oemAlarmNo=wtWebioEA24oemAlarmNo, wtWebioEA12x6RelDnsServer1=wtWebioEA12x6RelDnsServer1, wtWebioEA12x6RelAlert1=wtWebioEA12x6RelAlert1, wtWebioEA2x2ERPDnsServer2=wtWebioEA2x2ERPDnsServer2, wtWebioEA2x2ERPAlarmUdpPort=wtWebioEA2x2ERPAlarmUdpPort, wtWebioEA2x2ERP_24VBinaryTcpClientInterval=wtWebioEA2x2ERP_24VBinaryTcpClientInterval, wtWebioEA2x2ERPPortOutputSafetyState=wtWebioEA2x2ERPPortOutputSafetyState, wtTrapReceiver2x2FTPUserName=wtTrapReceiver2x2FTPUserName, wtWebCount6InputState=wtWebCount6InputState, wtIpWatcher_24VAlarmAckEnable=wtIpWatcher_24VAlarmAckEnable, wtWebioEA12x6RelMfOrderNo=wtWebioEA12x6RelMfOrderNo, wtWebCount6PortInputMode=wtWebCount6PortInputMode, wtIpWatcherStTzStartHrs=wtIpWatcherStTzStartHrs, wtWebioEA12x6RelClockDay=wtWebioEA12x6RelClockDay, wtWebioEA2x2HttpInputTrigger=wtWebioEA2x2HttpInputTrigger, wtIpWatcherAlert24=wtIpWatcherAlert24, wtWebioEA24oemStTzOffsetMin=wtWebioEA24oemStTzOffsetMin, wtWebAlarm6x6AlarmOutputEntry=wtWebAlarm6x6AlarmOutputEntry, wtIpWatcher_24VAlert11=wtIpWatcher_24VAlert11, wtWebioEA12x6RelERPAlarmSyslogReleaseText=wtWebioEA12x6RelERPAlarmSyslogReleaseText, wtWebioEA2x2ERPAlarmFtpText=wtWebioEA2x2ERPAlarmFtpText, wtWebioEA12x12Inputs=wtWebioEA12x12Inputs, wtWebAlarm6x6Alert15=wtWebAlarm6x6Alert15, wtWebioEA12x6RelERPBinaryTcpServerInputTrigger=wtWebioEA12x6RelERPBinaryTcpServerInputTrigger, wtWebioEA12x6RelERPBasic=wtWebioEA12x6RelERPBasic, wtWebAlarm6x6Alert8=wtWebAlarm6x6Alert8, wtWebioEA2x2ERP_24VOutputMode=wtWebioEA2x2ERP_24VOutputMode, wtWebioEA6x6StTzStopMode=wtWebioEA6x6StTzStopMode, wtIpWatcherDeviceText=wtIpWatcherDeviceText, wtWebioEA24oemTimeZone=wtWebioEA24oemTimeZone, wtWebioEA6x6FTPServerControlPort=wtWebioEA6x6FTPServerControlPort, wtWebioEA12x6RelERPBinaryTcpClientInterval=wtWebioEA12x6RelERPBinaryTcpClientInterval, wtWebioEA2x2ERP_24VStTzStopHrs=wtWebioEA2x2ERP_24VStTzStopHrs, wtIpWatcher_24VFTP=wtIpWatcher_24VFTP, wtWebioEA12x6RelAlarmFtpDataPort=wtWebioEA12x6RelAlarmFtpDataPort, wtWebioEA12x6RelERPTimeServer1=wtWebioEA12x6RelERPTimeServer1, wtWebioEA12x6RelERPBinaryOperationMode=wtWebioEA12x6RelERPBinaryOperationMode, wtIpWatcher_24VAlarmEntry=wtIpWatcher_24VAlarmEntry, wtIpWatcherFTPServerIP=wtIpWatcherFTPServerIP, wtWebioEA2x2_24VAlarmMaxCounterValue=wtWebioEA2x2_24VAlarmMaxCounterValue, wtWebioEA2x2ERP_24VAlarmInputTrigger=wtWebioEA2x2ERP_24VAlarmInputTrigger, wtWebCount6SessCntrlConfigMode=wtWebCount6SessCntrlConfigMode, wtWebioEA2x2_24VHttpPort=wtWebioEA2x2_24VHttpPort, wtWebioEA6x6AlarmInputTrigger=wtWebioEA6x6AlarmInputTrigger, wtWebioEA12x12BinaryTcpServerInputTrigger=wtWebioEA12x12BinaryTcpServerInputTrigger, wtWebioEA2x2ERPAlert17=wtWebioEA2x2ERPAlert17, wtWebioEA6x6InputEntry=wtWebioEA6x6InputEntry, wtWebioEA2x2_24VAlert13=wtWebioEA2x2_24VAlert13, wtWebioEA2x2ERP_24VOutputModeBit=wtWebioEA2x2ERP_24VOutputModeBit, wtWebioEA6x6PortLogicInputInverter=wtWebioEA6x6PortLogicInputInverter, wtWebAlarm6x6Alarm=wtWebAlarm6x6Alarm, wtWebioEA2x2ERP_24VAlarm=wtWebioEA2x2ERP_24VAlarm, wtWebioEA12x12TsSyncTime=wtWebioEA12x12TsSyncTime, wtWebioEA2x2_24VAlarmSnmpManagerIP=wtWebioEA2x2_24VAlarmSnmpManagerIP, wtWebioEA6x6Text=wtWebioEA6x6Text, wtWebAlarm6x6ClockMonth=wtWebAlarm6x6ClockMonth, wtWebioEA12x6RelBinaryEntry=wtWebioEA12x6RelBinaryEntry, wtWebAlarm6x6FTP=wtWebAlarm6x6FTP, wtWebioEA12x12OutputModeTable=wtWebioEA12x12OutputModeTable, wtWebioEA2x2Text=wtWebioEA2x2Text, wtWebioEA2x2ERP_24VBinaryTcpClientInactivity=wtWebioEA2x2ERP_24VBinaryTcpClientInactivity, wtIpWatcher_24VAlarmSyslogIpAddr=wtIpWatcher_24VAlarmSyslogIpAddr, wtWebioEA12x6RelBinaryUdpPeerRemotePort=wtWebioEA12x6RelBinaryUdpPeerRemotePort, wtWebioEA2x2BinaryTcpClientApplicationMode=wtWebioEA2x2BinaryTcpClientApplicationMode, wtWebioEA24oemStTzStopMode=wtWebioEA24oemStTzStopMode, wtWebioEA2x2Alert1=wtWebioEA2x2Alert1, wtWebioEA6x6BinaryTcpClientServerPort=wtWebioEA6x6BinaryTcpClientServerPort, wtWebioEA2x2ERPAlert13=wtWebioEA2x2ERPAlert13, wtIpWatcher_24VClockHrs=wtIpWatcher_24VClockHrs, wtWebioEA6x6MailPop3Server=wtWebioEA6x6MailPop3Server, wtWebCount6ReportRateOfChange=wtWebCount6ReportRateOfChange, wtWebioEA24oemAlert8=wtWebioEA24oemAlert8, wtWebioEA2x2ERP_24VMail=wtWebioEA2x2ERP_24VMail, wtWebAlarm6x6AlarmInputTrigger=wtWebAlarm6x6AlarmInputTrigger, wtWebioEA6x6AlarmMailReleaseSubject=wtWebioEA6x6AlarmMailReleaseSubject, wtWebioEA24oemMailAuthentication=wtWebioEA24oemMailAuthentication, wtWebioEA2x2ERP_24VSessCntrlConfigPassword=wtWebioEA2x2ERP_24VSessCntrlConfigPassword, wtWebioEA2x2ERP_24VTzOffsetHrs=wtWebioEA2x2ERP_24VTzOffsetHrs, wtWebioEA2x2ERPFTPAccount=wtWebioEA2x2ERPFTPAccount, wtWebioEA12x6RelPortPulseDuration=wtWebioEA12x6RelPortPulseDuration, wtWebioEA2x2ERPAlarmTable=wtWebioEA2x2ERPAlarmTable, wtWebioEA12x6RelTzOffsetMin=wtWebioEA12x6RelTzOffsetMin, wtTrapReceiver2x2TzOffsetHrs=wtTrapReceiver2x2TzOffsetHrs, wtWebAlarm6x6AlarmFtpTrgClearText=wtWebAlarm6x6AlarmFtpTrgClearText, wtWebioEA12x12BinaryConnectedPort=wtWebioEA12x12BinaryConnectedPort, wtWebioEA2x2_24VBinaryTcpServerClientHttpPort=wtWebioEA2x2_24VBinaryTcpServerClientHttpPort, wtWebioEA12x6RelSessCntrlConfigPassword=wtWebioEA12x6RelSessCntrlConfigPassword, wtWebioEA2x2ERP_24VBinaryTcpServerInputTrigger=wtWebioEA2x2ERP_24VBinaryTcpServerInputTrigger, wtWebioEA6x6OutputModeTable=wtWebioEA6x6OutputModeTable, wtIpWatcher_24VAlarmTcpReleaseText=wtIpWatcher_24VAlarmTcpReleaseText, wtWebioEA2x2ERPPortInputBicountPulsePolarity=wtWebioEA2x2ERPPortInputBicountPulsePolarity, wtWebioEA12x12SessCntrl=wtWebioEA12x12SessCntrl, wtWebioEA2x2ERPSnmpSystemTrapEnable=wtWebioEA2x2ERPSnmpSystemTrapEnable, wtIpWatcherAlarm=wtIpWatcherAlarm, wtWebioEA2x2UdpEnable=wtWebioEA2x2UdpEnable)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA2x2ERPAlarmTcpIpAddr=wtWebioEA2x2ERPAlarmTcpIpAddr, wtWebioEA2x2_24VAlert15=wtWebioEA2x2_24VAlert15, wtIpWatcher_24VSessCntrlAdminPassword=wtIpWatcher_24VSessCntrlAdminPassword, wtWebioEA12x6RelERPOutputModeBit=wtWebioEA12x6RelERPOutputModeBit, wtTrapReceiver2x2SnmpEnable=wtTrapReceiver2x2SnmpEnable, wtWebioEA2x2ERP_24VMailEnable=wtWebioEA2x2ERP_24VMailEnable, wtWebioEA12x6RelERPSessCntrlConfigPassword=wtWebioEA12x6RelERPSessCntrlConfigPassword, wtIpWatcher_24VStTzEnable=wtIpWatcher_24VStTzEnable, wtWebCount6ReportOutputTable=wtWebCount6ReportOutputTable, wtWebioEA12x6RelERPUdpAdminPort=wtWebioEA12x6RelERPUdpAdminPort, wtWebioEA24oemInputState=wtWebioEA24oemInputState, wtWebioEA24oemAlarm=wtWebioEA24oemAlarm, wtWebAlarm6x6AlarmInterval=wtWebAlarm6x6AlarmInterval, wtWebioEA12x6RelERPAlarmSnmpManagerIP=wtWebioEA12x6RelERPAlarmSnmpManagerIP, wtWebioEA12x6RelStartup=wtWebioEA12x6RelStartup, wtWebAlarm6x6MailAdName=wtWebAlarm6x6MailAdName, wtWebioEA12x6RelERPDnsServer2=wtWebioEA12x6RelERPDnsServer2, wtWebioEA12x12Config=wtWebioEA12x12Config, wtWebioEA12x12UDP=wtWebioEA12x12UDP, wtWebioEA24oemAlarmTable=wtWebioEA24oemAlarmTable, wtWebioEA6x6OutputMode=wtWebioEA6x6OutputMode, wtWebioEA12x6RelERPWayBack=wtWebioEA12x6RelERPWayBack, wtWebioEA12x12BinaryUdpPeerRemotePort=wtWebioEA12x12BinaryUdpPeerRemotePort, wtWebioEA6x6BinaryConnectedIpAddr=wtWebioEA6x6BinaryConnectedIpAddr, wtWebioEA12x6RelAlarmUdpIpAddr=wtWebioEA12x6RelAlarmUdpIpAddr, wtWebioEA2x2_24VSubnetMask=wtWebioEA2x2_24VSubnetMask, wtWebAlarm6x6Text=wtWebAlarm6x6Text, wtWebCount6InputCounterClear=wtWebCount6InputCounterClear, wtTrapReceiver2x2ActionUdpText=wtTrapReceiver2x2ActionUdpText, wtIpWatcherAlarmAckEnable=wtIpWatcherAlarmAckEnable, wtWebAlarm6x6StTzStopWday=wtWebAlarm6x6StTzStopWday, wtWebAlarm6x6PortPulseDuration=wtWebAlarm6x6PortPulseDuration, wtIpWatcher_24VFTPAccount=wtIpWatcher_24VFTPAccount, wtWebioEA12x6RelERPAlarmInputTrigger=wtWebioEA12x6RelERPAlarmInputTrigger, wtWebAlarm6x6MfAddr=wtWebAlarm6x6MfAddr, wtWebioEA2x2StTzStopMode=wtWebioEA2x2StTzStopMode, wtIpWatcher_24VAlarmFtpDataPort=wtIpWatcher_24VAlarmFtpDataPort, wtWebioEA2x2ERP_24VAlarmIfTable=wtWebioEA2x2ERP_24VAlarmIfTable, wtWebAlarm6x6StTzStopHrs=wtWebAlarm6x6StTzStopHrs, wtWebioEA2x2ERPAlarmEntry=wtWebioEA2x2ERPAlarmEntry, wtWebCount6ReportTcpPort=wtWebCount6ReportTcpPort, wtTrapReceiver2x2ActionSystemButtonTrigger=wtTrapReceiver2x2ActionSystemButtonTrigger, wtIpWatcher_24VAlarmTcpIpAddr=wtIpWatcher_24VAlarmTcpIpAddr, wtWebioEA12x12Alert12=wtWebioEA12x12Alert12, wtWebioEA24oemAlert15=wtWebioEA24oemAlert15, wtWebioEA6x6AlertDiag=wtWebioEA6x6AlertDiag, wtWebioEA2x2_24VGetHeaderEnable=wtWebioEA2x2_24VGetHeaderEnable, wtWebioEA2x2Gateway=wtWebioEA2x2Gateway, wtWebioEA12x12AlarmMailReleaseText=wtWebioEA12x12AlarmMailReleaseText, wtWebioEA24oemTzEnable=wtWebioEA24oemTzEnable, wtIpWatcher_24VTzOffsetMin=wtIpWatcher_24VTzOffsetMin, wtWebioEA12x12BinaryTcpClientInterval=wtWebioEA12x12BinaryTcpClientInterval, wtWebioEA12x6RelERPSyslog=wtWebioEA12x6RelERPSyslog, wtWebioEA2x2ERPAlarmOutputTrigger=wtWebioEA2x2ERPAlarmOutputTrigger, wtWebioEA2x2_24VAlarmSyslogReleaseText=wtWebioEA2x2_24VAlarmSyslogReleaseText, wtWebioEA24oemAlert6=wtWebioEA24oemAlert6, wtIpWatcher_24VDiagErrorMessage=wtIpWatcher_24VDiagErrorMessage, wtIpWatcherMfDeviceTyp=wtIpWatcherMfDeviceTyp, wtWebioEA12x12AlarmIfTable=wtWebioEA12x12AlarmIfTable, wtWebioEA2x2_24VAlarmInterval=wtWebioEA2x2_24VAlarmInterval, wtIpWatcher_24VAlert3=wtIpWatcher_24VAlert3, wtTrapReceiver2x2StTzStopMin=wtTrapReceiver2x2StTzStopMin, wtWebioEA2x2PortOutputGroupMode=wtWebioEA2x2PortOutputGroupMode, wtWebioEA12x6RelERPDiagBinaryError=wtWebioEA12x6RelERPDiagBinaryError, wtWebAlarm6x6PortInputFilter=wtWebAlarm6x6PortInputFilter, wtWebioEA12x6RelERPDiagErrorClear=wtWebioEA12x6RelERPDiagErrorClear, wtWebioEA2x2ERPAlarmUdpIpAddr=wtWebioEA2x2ERPAlarmUdpIpAddr, wtWebCount6MfDeviceTyp=wtWebCount6MfDeviceTyp, wtWebioEA12x6RelERPBinaryModeCount=wtWebioEA12x6RelERPBinaryModeCount, wtWebioEA2x2PortPulseDuration=wtWebioEA2x2PortPulseDuration, wtIpWatcherAddConfig=wtIpWatcherAddConfig, wtWebioEA2x2_24VInputValue=wtWebioEA2x2_24VInputValue, wtWebioEA2x2AlarmMailAddr=wtWebioEA2x2AlarmMailAddr, wtIpWatcherAlarmMailAddr=wtIpWatcherAlarmMailAddr, wtWebioEA24oemPortOutputSafetyState=wtWebioEA24oemPortOutputSafetyState, wtWebioEA2x2ERPAlarmEnable=wtWebioEA2x2ERPAlarmEnable, wtWebioEA6x6AlarmMailSubject=wtWebioEA6x6AlarmMailSubject, wtWebioEA2x2ERP_24VSnmpEnable=wtWebioEA2x2ERP_24VSnmpEnable, wtIpWatcherMailReply=wtIpWatcherMailReply, wtWebioEA2x2_24VAlarmSyslogPort=wtWebioEA2x2_24VAlarmSyslogPort, wtWebioEA2x2ERP_24VDiagErrorIndex=wtWebioEA2x2ERP_24VDiagErrorIndex, wtWebioEA6x6Config=wtWebioEA6x6Config, wtTrapReceiver2x2DnsServer1=wtTrapReceiver2x2DnsServer1, wtIpWatcher_24VIpListEntry=wtIpWatcher_24VIpListEntry, wtWebioEA2x2ERPFTP=wtWebioEA2x2ERPFTP, wtWebioEA12x6RelERPClockYear=wtWebioEA12x6RelERPClockYear, wtWebioEA12x12DeviceName=wtWebioEA12x12DeviceName, wtWebioEA24oemAlarmTimerCron=wtWebioEA24oemAlarmTimerCron, wtWebioEA24oemClockMonth=wtWebioEA24oemClockMonth, wtWebioEA24oemAlarmOutputTrigger=wtWebioEA24oemAlarmOutputTrigger, wtWebioEA2x2ERP_24VText=wtWebioEA2x2ERP_24VText, wtWebioEA2x2ERP_24VInputTable=wtWebioEA2x2ERP_24VInputTable, wtWebioEA2x2SessCntrlAdminPassword=wtWebioEA2x2SessCntrlAdminPassword, wtTrapReceiver2x2Gateway=wtTrapReceiver2x2Gateway, wtWebAlarm6x6DnsServer2=wtWebAlarm6x6DnsServer2, wtWebioEA24oemSyslog=wtWebioEA24oemSyslog, wtWebioEA12x6RelTzEnable=wtWebioEA12x6RelTzEnable, wtWebioEA2x2PortInputText=wtWebioEA2x2PortInputText, wtIpWatcher_24VAlarmTriggerState=wtIpWatcher_24VAlarmTriggerState, wtWebioEA6x6BinaryUdpPeerLocalPort=wtWebioEA6x6BinaryUdpPeerLocalPort, wtWebioEA12x12InputState=wtWebioEA12x12InputState, wtWebioEA12x6RelConfig=wtWebioEA12x6RelConfig, wtIpWatcher_24VIpListEnable=wtIpWatcher_24VIpListEnable, wtWebioEA2x2ERPWayBackEnable=wtWebioEA2x2ERPWayBackEnable, wtWebioEA24oemDeviceClock=wtWebioEA24oemDeviceClock, wtWebioEA24oemSessCntrl=wtWebioEA24oemSessCntrl, wtWebioEA2x2_24VAlarmEntry=wtWebioEA2x2_24VAlarmEntry, wtWebioEA12x12SessCntrlLogout=wtWebioEA12x12SessCntrlLogout, wtWebioEA2x2ERPBinaryOperationMode=wtWebioEA2x2ERPBinaryOperationMode, wtWebioEA12x12AlarmInterval=wtWebioEA12x12AlarmInterval, wtWebioEA2x2IpAddress=wtWebioEA2x2IpAddress, wtTrapReceiver2x2MfDeviceTyp=wtTrapReceiver2x2MfDeviceTyp, wtWebioEA12x6RelERPNetwork=wtWebioEA12x6RelERPNetwork, wtWebioEA24oemAlert30=wtWebioEA24oemAlert30, wtIpWatcher_24VTimeZone=wtIpWatcher_24VTimeZone, wtWebioEA24oemBinaryModeCount=wtWebioEA24oemBinaryModeCount, wtWebioEA24oemTsEnable=wtWebioEA24oemTsEnable, wtWebioEA12x6RelERPMfOrderNo=wtWebioEA12x6RelERPMfOrderNo, wtTrapReceiver2x2OutputTable=wtTrapReceiver2x2OutputTable, wtWebioEA2x2DeviceLocation=wtWebioEA2x2DeviceLocation, wtWebioEA2x2DiagErrorCount=wtWebioEA2x2DiagErrorCount, wtWebCount6ReportSnmpTrapText=wtWebCount6ReportSnmpTrapText, wtWebioEA12x12PortOutputName=wtWebioEA12x12PortOutputName, wtWebioEA2x2_24VBinaryTcpClientServerIpAddr=wtWebioEA2x2_24VBinaryTcpClientServerIpAddr, wtWebioEA2x2AlarmMailReleaseSubject=wtWebioEA2x2AlarmMailReleaseSubject, wtIpWatcherInOut=wtIpWatcherInOut, wtWebioEA6x6BinaryModeNo=wtWebioEA6x6BinaryModeNo, wtTrapReceiver2x2WatchListSpecificNo=wtTrapReceiver2x2WatchListSpecificNo, wtWebioEA24oemMailServer=wtWebioEA24oemMailServer, wtWebioEA2x2ERPAlert15=wtWebioEA2x2ERPAlert15, wtWebioEA24oemDiagBinaryError=wtWebioEA24oemDiagBinaryError, wtWebioEA6x6PortInputText=wtWebioEA6x6PortInputText, wtWebioEA2x2ERP_24VDiag=wtWebioEA2x2ERP_24VDiag, wtWebioEA12x12Ports=wtWebioEA12x12Ports, wtWebioEA12x6RelSyslogServerPort=wtWebioEA12x6RelSyslogServerPort, wtWebioEA2x2ERPBinaryUdpPeerRemotePort=wtWebioEA2x2ERPBinaryUdpPeerRemotePort, wtWebioEA2x2ERPInputNo=wtWebioEA2x2ERPInputNo, wtWebioEA2x2ERP_24VOutputModeTable=wtWebioEA2x2ERP_24VOutputModeTable, wtWebioEA12x12ClockDay=wtWebioEA12x12ClockDay, wtWebioEA2x2OutputTable=wtWebioEA2x2OutputTable, wtWebioEA6x6ClockYear=wtWebioEA6x6ClockYear, wtWebioEA12x6RelERPBinaryUdpPeerLocalPort=wtWebioEA12x6RelERPBinaryUdpPeerLocalPort, wtWebioEA12x6RelTsSyncTime=wtWebioEA12x6RelTsSyncTime, wtWebioEA2x2BinaryUdpPeerRemotePort=wtWebioEA2x2BinaryUdpPeerRemotePort, wtWebioEA12x6RelAlarmFtpText=wtWebioEA12x6RelAlarmFtpText, wtWebioEA2x2ERPSafetyTimeout=wtWebioEA2x2ERPSafetyTimeout, wtIpWatcherAlarmMailSubject=wtIpWatcherAlarmMailSubject, wtWebioEA2x2ERP_24VAlert22=wtWebioEA2x2ERP_24VAlert22, wtIpWatcherTimeServer=wtIpWatcherTimeServer, wtWebioEA2x2_24VInOut=wtWebioEA2x2_24VInOut, wtWebioEA2x2ERP_24VTimeDate=wtWebioEA2x2ERP_24VTimeDate, wtIpWatcherIpListIfTable=wtIpWatcherIpListIfTable, wtWebioEA24oemStTzStartMode=wtWebioEA24oemStTzStartMode, wtWebioEA12x12=wtWebioEA12x12, wtWebioEA2x2ERP_24VAlarmEnable=wtWebioEA2x2ERP_24VAlarmEnable, wtWebioEA2x2Ports=wtWebioEA2x2Ports, wtTrapReceiver2x2ActionTimerCron=wtTrapReceiver2x2ActionTimerCron, wtIpWatcherAlert12=wtIpWatcherAlert12, wtIpWatcherAlarmIfTable=wtIpWatcherAlarmIfTable, wtWebioEA2x2ERPGetHeaderEnable=wtWebioEA2x2ERPGetHeaderEnable, wtIpWatcher_24VAlarmEnable=wtIpWatcher_24VAlarmEnable, wtIpWatcherMailServer=wtIpWatcherMailServer, wtWebioEA2x2_24VStTzStartMonth=wtWebioEA2x2_24VStTzStartMonth, wtIpWatcherAlarmName=wtIpWatcherAlarmName, wtWebioEA12x6RelAlert11=wtWebioEA12x6RelAlert11, wtWebioEA12x12BinaryIfEntry=wtWebioEA12x12BinaryIfEntry, wtWebioEA24oemBinaryTcpClientServerPort=wtWebioEA24oemBinaryTcpClientServerPort, wtTrapReceiver2x2Alert9=wtTrapReceiver2x2Alert9, wtTrapReceiver2x2ActionOutputEntry=wtTrapReceiver2x2ActionOutputEntry, wtWebioEA12x12OutputPortTable=wtWebioEA12x12OutputPortTable, wtWebCount6TimeServer1=wtWebCount6TimeServer1, wtWebioEA2x2AlarmEntry=wtWebioEA2x2AlarmEntry, wtWebioEA24oemClockDay=wtWebioEA24oemClockDay, wtIpWatcher_24VSubnetMask=wtIpWatcher_24VSubnetMask, wtWebioEA2x2ERPAlarmSnmpTrapReleaseText=wtWebioEA2x2ERPAlarmSnmpTrapReleaseText, wtWebioEA6x6PortLogicInputMask=wtWebioEA6x6PortLogicInputMask, wtWebioEA2x2ERPPorts=wtWebioEA2x2ERPPorts, wtTrapReceiver2x2Alert3=wtTrapReceiver2x2Alert3, wtWebioEA24oemDiagErrorMessage=wtWebioEA24oemDiagErrorMessage, wtWebioEA12x6RelERPAlarmFtpFileName=wtWebioEA12x6RelERPAlarmFtpFileName, wtWebioEA2x2_24VAlarmEnable=wtWebioEA2x2_24VAlarmEnable, wtIpWatcher_24VDiagErrorIndex=wtIpWatcher_24VDiagErrorIndex, wtIpWatcher_24VAlarmUdpPort=wtIpWatcher_24VAlarmUdpPort, wtWebioEA2x2_24VSNMP=wtWebioEA2x2_24VSNMP, wtWebioEA12x6RelAlertDiag=wtWebioEA12x6RelAlertDiag, wtWebioEA12x6RelAlert3=wtWebioEA12x6RelAlert3, wtIpWatcher_24VAlarmMailTrgClearSubject=wtIpWatcher_24VAlarmMailTrgClearSubject, wtIpWatcherAlarmMailTrgClearSubject=wtIpWatcherAlarmMailTrgClearSubject, wtTrapReceiver2x2TzEnable=wtTrapReceiver2x2TzEnable, wtIpWatcherAlert20=wtIpWatcherAlert20, wtWebioEA2x2ERPOutputModeEntry=wtWebioEA2x2ERPOutputModeEntry, wtWebioEA2x2ERPAlarmIfEntry=wtWebioEA2x2ERPAlarmIfEntry, wtWebioEA24oemAlarmSnmpManagerIP=wtWebioEA24oemAlarmSnmpManagerIP, wtWebioEA2x2ERPStTzOffsetHrs=wtWebioEA2x2ERPStTzOffsetHrs, wtWebioEA12x6RelERPFTPOption=wtWebioEA12x6RelERPFTPOption, wut=wut, wtTrapReceiver2x2ActionTcpText=wtTrapReceiver2x2ActionTcpText, wtWebioEA6x6PortInputName=wtWebioEA6x6PortInputName, wtWebioEA12x6RelERPSnmpCommunityStringReadWrite=wtWebioEA12x6RelERPSnmpCommunityStringReadWrite, wtWebioEA2x2ERPPortInputMode=wtWebioEA2x2ERPPortInputMode, wtWebioEA12x12Manufact=wtWebioEA12x12Manufact, wtWebAlarm6x6FTPUserName=wtWebAlarm6x6FTPUserName, wtWebioEA12x6RelERPAlarmUdpReleaseText=wtWebioEA12x6RelERPAlarmUdpReleaseText, wtIpWatcherFTPAccount=wtIpWatcherFTPAccount, wtIpWatcher_24VInputTable=wtIpWatcher_24VInputTable, wtWebioEA12x6RelStTzStopMode=wtWebioEA12x6RelStTzStopMode, wtWebioEA2x2_24VBinaryTcpClientLocalPort=wtWebioEA2x2_24VBinaryTcpClientLocalPort, wtWebAlarm6x6AlarmTcpTrgClearText=wtWebAlarm6x6AlarmTcpTrgClearText, wtWebioEA2x2_24VAlarmSystemTrigger=wtWebioEA2x2_24VAlarmSystemTrigger, wtWebCount6StTzStopMin=wtWebCount6StTzStopMin, wtWebAlarm6x6PortPulsePolarity=wtWebAlarm6x6PortPulsePolarity, wtTrapReceiver2x2FTPServerControlPort=wtTrapReceiver2x2FTPServerControlPort, wtWebCount6TzOffsetMin=wtWebCount6TzOffsetMin, wtWebCount6StTzEnable=wtWebCount6StTzEnable, wtWebioEA24oemText=wtWebioEA24oemText, wtWebioEA2x2ERPBinaryModeNo=wtWebioEA2x2ERPBinaryModeNo, wtWebioEA2x2FTPOption=wtWebioEA2x2FTPOption, wtWebioEA12x12StTzStartMonth=wtWebioEA12x12StTzStartMonth, wtWebioEA12x12Alert6=wtWebioEA12x12Alert6, wtWebCount6DiagErrorClear=wtWebCount6DiagErrorClear, wtIpWatcher_24VDeviceName=wtIpWatcher_24VDeviceName, wtWebioEA2x2Alert5=wtWebioEA2x2Alert5, wtWebCount6UdpEnable=wtWebCount6UdpEnable, wtWebioEA6x6BinaryModeCount=wtWebioEA6x6BinaryModeCount, wtWebioEA24oemMailReply=wtWebioEA24oemMailReply, wtWebioEA2x2_24VInputCounterClear=wtWebioEA2x2_24VInputCounterClear, wtWebioEA2x2_24VFTPAccount=wtWebioEA2x2_24VFTPAccount, wtIpWatcher_24VAlert2=wtIpWatcher_24VAlert2, wtWebioEA24oemFTPServerControlPort=wtWebioEA24oemFTPServerControlPort, wtWebioEA2x2_24VOutputEntry=wtWebioEA2x2_24VOutputEntry, wtWebioEA2x2AddConfig=wtWebioEA2x2AddConfig, wtWebioEA6x6Mail=wtWebioEA6x6Mail, wtWebioEA2x2Alert11=wtWebioEA2x2Alert11, wtWebCount6InputValue=wtWebCount6InputValue, wtWebioEA2x2_24VSessCntrlLogout=wtWebioEA2x2_24VSessCntrlLogout, wtWebioEA2x2_24VAlarm=wtWebioEA2x2_24VAlarm, wtIpWatcher_24VAlert10=wtIpWatcher_24VAlert10, wtIpWatcher_24VSnmpCommunityStringRead=wtIpWatcher_24VSnmpCommunityStringRead, wtWebioEA2x2ERPBinaryTcpClientInactivity=wtWebioEA2x2ERPBinaryTcpClientInactivity, wtWebAlarm6x6UdpAdminPort=wtWebAlarm6x6UdpAdminPort, wtWebioEA2x2ERPDiagErrorClear=wtWebioEA2x2ERPDiagErrorClear, wtWebioEA6x6UdpAdminPort=wtWebioEA6x6UdpAdminPort, wtWebAlarm6x6AlarmIfEntry=wtWebAlarm6x6AlarmIfEntry, wtWebAlarm6x6Gateway=wtWebAlarm6x6Gateway, wtIpWatcherDnsServer2=wtIpWatcherDnsServer2, wtIpWatcherAlarmUdpPort=wtIpWatcherAlarmUdpPort, wtWebioEA2x2ERPAlert18=wtWebioEA2x2ERPAlert18, wtWebioEA12x12Alert3=wtWebioEA12x12Alert3, wtWebioEA12x6RelERPMailAdName=wtWebioEA12x6RelERPMailAdName, wtWebCount6ReportRateOfChangeWindow=wtWebCount6ReportRateOfChangeWindow, wtIpWatcher_24VAlarmPollingRate=wtIpWatcher_24VAlarmPollingRate, wtWebioEA24oemSnmpEnable=wtWebioEA24oemSnmpEnable, wtWebioEA2x2_24VBinaryUdpPeerInputTrigger=wtWebioEA2x2_24VBinaryUdpPeerInputTrigger, wtWebioEA6x6BinaryTcpClientInactivity=wtWebioEA6x6BinaryTcpClientInactivity)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtIpWatcher_24VConfig=wtIpWatcher_24VConfig, wtWebioEA24oemStTzStartHrs=wtWebioEA24oemStTzStartHrs, wtWebAlarm6x6AlarmIfTable=wtWebAlarm6x6AlarmIfTable, wtWebioEA2x2_24VStTzStopMin=wtWebioEA2x2_24VStTzStopMin, wtWebioEA12x12FTP=wtWebioEA12x12FTP, wtWebioEA2x2ERPAlert16=wtWebioEA2x2ERPAlert16, wtIpWatcherClockHrs=wtIpWatcherClockHrs, wtWebioEA6x6StTzStopMonth=wtWebioEA6x6StTzStopMonth, wtWebioEA2x2ERP_24VHttpInputTrigger=wtWebioEA2x2ERP_24VHttpInputTrigger, wtWebioEA12x6RelSessCntrl=wtWebioEA12x6RelSessCntrl, wtWebioEA12x6RelMailPop3Server=wtWebioEA12x6RelMailPop3Server, wtWebioEA6x6Binary=wtWebioEA6x6Binary, wtWebioEA2x2DiagErrorClear=wtWebioEA2x2DiagErrorClear, wtWebioEA2x2ERPAlarmMaxCounterValue=wtWebioEA2x2ERPAlarmMaxCounterValue, wtWebioEA2x2ERP_24VSafetyTimeout=wtWebioEA2x2ERP_24VSafetyTimeout, wtIpWatcherNetwork=wtIpWatcherNetwork, wtWebioEA2x2ERP_24VTimeServer=wtWebioEA2x2ERP_24VTimeServer, wtWebioEA24oemAlert4=wtWebioEA24oemAlert4, wtTrapReceiver2x2SyslogEnable=wtTrapReceiver2x2SyslogEnable, wtWebioEA2x2_24VPortLogicInputMask=wtWebioEA2x2_24VPortLogicInputMask, wtWebioEA12x12StTzStartMode=wtWebioEA12x12StTzStartMode, wtIpWatcher_24VAlarmTcpTrapTxEnable=wtIpWatcher_24VAlarmTcpTrapTxEnable, wtTrapReceiver2x2SessCntrlAdminPassword=wtTrapReceiver2x2SessCntrlAdminPassword, wtTrapReceiver2x2PortSystemTimerEnable=wtTrapReceiver2x2PortSystemTimerEnable, wtIpWatcherAlarmFtpFileName=wtIpWatcherAlarmFtpFileName, wtWebioEA12x12SnmpCommunityStringRead=wtWebioEA12x12SnmpCommunityStringRead, wtWebioEA2x2ERP_24VAlarmSyslogPort=wtWebioEA2x2ERP_24VAlarmSyslogPort, wtWebioEA2x2ERPSetOutput=wtWebioEA2x2ERPSetOutput, wtWebioEA12x12BinaryTcpClientServerPassword=wtWebioEA12x12BinaryTcpClientServerPassword, wtWebCount6ReportTcpText=wtWebCount6ReportTcpText, wtWebioEA12x6RelMailServer=wtWebioEA12x6RelMailServer, wtWebAlarm6x6AlarmSnmpManagerIP=wtWebAlarm6x6AlarmSnmpManagerIP, wtWebioEA12x6RelERPFTPAccount=wtWebioEA12x6RelERPFTPAccount, wtWebAlarm6x6TzOffsetHrs=wtWebAlarm6x6TzOffsetHrs, wtTrapReceiver2x2SystemTimerPortTable=wtTrapReceiver2x2SystemTimerPortTable, wtWebioEA24oemBinaryTcpServerLocalPort=wtWebioEA24oemBinaryTcpServerLocalPort, wtTrapReceiver2x2HTTP=wtTrapReceiver2x2HTTP, wtWebioEA2x2ERPAlarmInputTrigger=wtWebioEA2x2ERPAlarmInputTrigger, wtWebioEA12x6RelERPAlarmUdpPort=wtWebioEA12x6RelERPAlarmUdpPort, wtWebioEA2x2_24VAlarmSnmpTrapText=wtWebioEA2x2_24VAlarmSnmpTrapText, wtWebioEA6x6BinaryTcpClientServerPassword=wtWebioEA6x6BinaryTcpClientServerPassword, wtWebioEA2x2ERPClockDay=wtWebioEA2x2ERPClockDay, wtWebioEA12x6RelERPAlarmCount=wtWebioEA12x6RelERPAlarmCount, wtWebioEA2x2_24VBinaryTable=wtWebioEA2x2_24VBinaryTable, wtTrapReceiver2x2SubnetMask=wtTrapReceiver2x2SubnetMask, wtWebioEA24oemBinaryTcpClientApplicationMode=wtWebioEA24oemBinaryTcpClientApplicationMode, wtWebCount6ReportFtpDataPort=wtWebCount6ReportFtpDataPort, wtTrapReceiver2x2ActionEntry=wtTrapReceiver2x2ActionEntry, wtWebioEA2x2StTzStartHrs=wtWebioEA2x2StTzStartHrs, wtWebioEA12x12AlarmTcpIpAddr=wtWebioEA12x12AlarmTcpIpAddr, wtWebioEA6x6Manufact=wtWebioEA6x6Manufact, wtWebAlarm6x6AlarmUdpIpAddr=wtWebAlarm6x6AlarmUdpIpAddr, wtTrapReceiver2x2DiagErrorMessage=wtTrapReceiver2x2DiagErrorMessage, wtWebioEA2x2ERP_24VInputCounter=wtWebioEA2x2ERP_24VInputCounter, wtWebioEA6x6Alert22=wtWebioEA6x6Alert22, wtWebioEA6x6ClockDay=wtWebioEA6x6ClockDay, wtTrapReceiver2x2SnmpSystemTrapEnable=wtTrapReceiver2x2SnmpSystemTrapEnable, wtWebioEA12x6RelUdpEnable=wtWebioEA12x6RelUdpEnable, wtTrapReceiver2x2DeviceText=wtTrapReceiver2x2DeviceText, wtIpWatcher_24VAlarmUdpTrapTxEnable=wtIpWatcher_24VAlarmUdpTrapTxEnable, wtIpWatcher_24VDeviceContact=wtIpWatcher_24VDeviceContact, wtWebioEA2x2ERPSessCntrlLogout=wtWebioEA2x2ERPSessCntrlLogout, wtWebAlarm6x6Alert36=wtWebAlarm6x6Alert36, wtWebioEA12x12AlarmFtpReleaseText=wtWebioEA12x12AlarmFtpReleaseText, wtWebioEA2x2ERPAlarmUdpReleaseText=wtWebioEA2x2ERPAlarmUdpReleaseText, wtTrapReceiver2x2WatchListNo=wtTrapReceiver2x2WatchListNo, wtWebioEA2x2_24VAlarmSnmpTrapReleaseText=wtWebioEA2x2_24VAlarmSnmpTrapReleaseText, wtIpWatcherAlert1=wtIpWatcherAlert1, wtWebioEA2x2ERP_24VAlarmMailReleaseText=wtWebioEA2x2ERP_24VAlarmMailReleaseText, wtWebioEA24oemSnmpSystemTrapManagerIP=wtWebioEA24oemSnmpSystemTrapManagerIP, wtWebioEA2x2ERP_24VSnmpSystemTrapManagerIP=wtWebioEA2x2ERP_24VSnmpSystemTrapManagerIP, wtWebioEA6x6InputTable=wtWebioEA6x6InputTable, wtIpWatcherManufact=wtIpWatcherManufact, wtWebioEA2x2ERPMfAddr=wtWebioEA2x2ERPMfAddr, wtWebioEA12x12AlarmIfEntry=wtWebioEA12x12AlarmIfEntry, wtWebioEA12x6RelUdpRemotePort=wtWebioEA12x6RelUdpRemotePort, wtIpWatcherClockMonth=wtIpWatcherClockMonth, wtWebioEA2x2ERPWayBackFTPResponse=wtWebioEA2x2ERPWayBackFTPResponse, wtWebioEA2x2DiagErrorMessage=wtWebioEA2x2DiagErrorMessage, wtWebioEA24oemOutputEntry=wtWebioEA24oemOutputEntry, wtIpWatcherStTzStartMin=wtIpWatcherStTzStartMin, wtWebioEA2x2ERP_24VAlarmCount=wtWebioEA2x2ERP_24VAlarmCount, wtWebioEA12x12SnmpSystemTrapEnable=wtWebioEA12x12SnmpSystemTrapEnable, wtIpWatcherMfAddr=wtIpWatcherMfAddr, wtWebCount6DeviceLocation=wtWebCount6DeviceLocation, wtWebioEA12x6RelStTzStopMin=wtWebioEA12x6RelStTzStopMin, wtWebioEA12x6RelBinaryOperationMode=wtWebioEA12x6RelBinaryOperationMode, wtWebioEA2x2Alert13=wtWebioEA2x2Alert13, wtWebAlarm6x6AlarmTable=wtWebAlarm6x6AlarmTable, wtWebioEA12x6RelERPHttpPort=wtWebioEA12x6RelERPHttpPort, wtWebioEA12x12BinaryTcpServerLocalPort=wtWebioEA12x12BinaryTcpServerLocalPort, wtWebioEA2x2ERPOutputMode=wtWebioEA2x2ERPOutputMode, wtWebioEA2x2ERPInputPortEntry=wtWebioEA2x2ERPInputPortEntry, wtWebioEA2x2ERP_24VGateway=wtWebioEA2x2ERP_24VGateway, wtTrapReceiver2x2TimeZone=wtTrapReceiver2x2TimeZone, wtWebioEA2x2_24VPortInputBicountPulsePolarity=wtWebioEA2x2_24VPortInputBicountPulsePolarity, wtIpWatcher_24VAlarmSyslogReleaseText=wtIpWatcher_24VAlarmSyslogReleaseText, wtWebioEA12x6RelSetOutput=wtWebioEA12x6RelSetOutput, wtWebioEA2x2ERP_24VPortLogicOutputInverter=wtWebioEA2x2ERP_24VPortLogicOutputInverter, wtIpWatcherTzEnable=wtIpWatcherTzEnable, wtWebioEA2x2ERPAlert4=wtWebioEA2x2ERPAlert4, wtWebioEA12x6RelDeviceContact=wtWebioEA12x6RelDeviceContact, wtWebCount6Outputs=wtWebCount6Outputs, wtWebioEA2x2BinaryTcpServerApplicationMode=wtWebioEA2x2BinaryTcpServerApplicationMode, wtWebioEA2x2ERP_24VAlertDiag=wtWebioEA2x2ERP_24VAlertDiag, wtWebCount6MailAuthPassword=wtWebCount6MailAuthPassword, wtWebioEA6x6OutputState=wtWebioEA6x6OutputState, wtWebioEA2x2ERP_24VConfig=wtWebioEA2x2ERP_24VConfig, wtIpWatcherSessCntrl=wtIpWatcherSessCntrl, wtWebioEA12x12OutputModeEntry=wtWebioEA12x12OutputModeEntry, wtWebioEA6x6AlarmTable=wtWebioEA6x6AlarmTable, wtWebioEA12x6RelAlarmIfTable=wtWebioEA12x6RelAlarmIfTable, wtWebioEA24oemDiag=wtWebioEA24oemDiag, wtWebioEA2x2AlarmFtpFileName=wtWebioEA2x2AlarmFtpFileName, wtTrapReceiver2x2WatchList=wtTrapReceiver2x2WatchList, wtWebioEA12x6RelDeviceLocation=wtWebioEA12x6RelDeviceLocation, wtWebioEA12x6RelAlarmTcpReleaseText=wtWebioEA12x6RelAlarmTcpReleaseText, wtWebioEA12x6RelERPAlert13=wtWebioEA12x6RelERPAlert13, wtTrapReceiver2x2SessCntrlConfigPassword=wtTrapReceiver2x2SessCntrlConfigPassword, wtWebioEA12x6RelAlarmSnmpTrapText=wtWebioEA12x6RelAlarmSnmpTrapText, wtWebAlarm6x6AlarmOutputTable=wtWebAlarm6x6AlarmOutputTable, wtWebioEA6x6InputCounterClear=wtWebioEA6x6InputCounterClear, wtWebioEA2x2ERPLoadControlEnable=wtWebioEA2x2ERPLoadControlEnable, wtWebioEA12x6RelAlarmUdpText=wtWebioEA12x6RelAlarmUdpText, wtWebioEA12x6RelAlarmIfEntry=wtWebioEA12x6RelAlarmIfEntry, wtWebioEA12x6RelERPOutputPortTable=wtWebioEA12x6RelERPOutputPortTable, wtWebioEA12x12SubnetMask=wtWebioEA12x12SubnetMask, wtWebioEA2x2SnmpEnable=wtWebioEA2x2SnmpEnable, wtWebioEA12x6RelAddConfig=wtWebioEA12x6RelAddConfig, wtWebCount6SessCntrlConfigPassword=wtWebCount6SessCntrlConfigPassword, wtWebCount6Alert11=wtWebCount6Alert11, wtWebAlarm6x6MailEnable=wtWebAlarm6x6MailEnable, wtWebioEA12x6RelAlarmSnmpManagerIP=wtWebioEA12x6RelAlarmSnmpManagerIP, wtWebAlarm6x6Mail=wtWebAlarm6x6Mail, wtWebioEA2x2ERP_24VStTzStartHrs=wtWebioEA2x2ERP_24VStTzStartHrs, wtWebAlarm6x6AlarmMailAddr=wtWebAlarm6x6AlarmMailAddr, wtWebioEA2x2AlarmSyslogReleaseText=wtWebioEA2x2AlarmSyslogReleaseText, wtWebioEA12x12AlarmSnmpTrapReleaseText=wtWebioEA12x12AlarmSnmpTrapReleaseText, wtWebAlarm6x6AlarmFtpOption=wtWebAlarm6x6AlarmFtpOption, wtIpWatcherAlarmSyslogPort=wtIpWatcherAlarmSyslogPort, wtWebioEA2x2ERP_24VAlert4=wtWebioEA2x2ERP_24VAlert4, wtWebioEA2x2ERP_24VAlert6=wtWebioEA2x2ERP_24VAlert6, wtWebioEA12x6RelERPAlarmSnmpTrapText=wtWebioEA12x6RelERPAlarmSnmpTrapText, wtWebioEA12x12MfName=wtWebioEA12x12MfName, wtIpWatcherStTzStopMonth=wtIpWatcherStTzStopMonth, wtWebioEA12x6RelGetHeaderEnable=wtWebioEA12x6RelGetHeaderEnable, wtIpWatcherAlert29=wtIpWatcherAlert29, wtWebioEA2x2ERPDeviceLocation=wtWebioEA2x2ERPDeviceLocation, wtWebioEA2x2ERP_24VClockMin=wtWebioEA2x2ERP_24VClockMin, wtWebioEA12x12SyslogEnable=wtWebioEA12x12SyslogEnable, wtTrapReceiver2x2SyslogSystemMessagesEnable=wtTrapReceiver2x2SyslogSystemMessagesEnable, wtWebioEA12x12PortInputText=wtWebioEA12x12PortInputText, wtWebioEA24oemStartup=wtWebioEA24oemStartup, wtWebioEA2x2_24VBinaryUdpPeerApplicationMode=wtWebioEA2x2_24VBinaryUdpPeerApplicationMode, wtWebCount6DiagErrorMessage=wtWebCount6DiagErrorMessage, wtIpWatcher_24VAlarmUdpIpAddr=wtIpWatcher_24VAlarmUdpIpAddr, wtIpWatcherStTzStopMin=wtIpWatcherStTzStopMin, wtWebioEA12x6RelAlarm=wtWebioEA12x6RelAlarm, wtIpWatcherDiagErrorClear=wtIpWatcherDiagErrorClear, wtWebioEA12x6RelERPAlert8=wtWebioEA12x6RelERPAlert8, wtWebioEA2x2_24VClockMin=wtWebioEA2x2_24VClockMin, wtWebAlarm6x6MailAuthUser=wtWebAlarm6x6MailAuthUser, wtWebioEA2x2AlarmCount=wtWebioEA2x2AlarmCount, wtWebioEA12x12PortOutputSafetyState=wtWebioEA12x12PortOutputSafetyState, wtWebAlarm6x6InOut=wtWebAlarm6x6InOut, wtWebCount6ReportFtpFileName=wtWebCount6ReportFtpFileName, wtWebioEA12x6RelOutputModeBit=wtWebioEA12x6RelOutputModeBit, wtWebioEA2x2ERPAlarmFtpOption=wtWebioEA2x2ERPAlarmFtpOption, wtIpWatcher_24VAlert36=wtIpWatcher_24VAlert36, wtIpWatcher_24VAlarmOutputState=wtIpWatcher_24VAlarmOutputState, wtTrapReceiver2x2PortSystemTimerCron=wtTrapReceiver2x2PortSystemTimerCron, wtWebioEA2x2ERPAlert22=wtWebioEA2x2ERPAlert22, wtWebioEA2x2AlarmIfTable=wtWebioEA2x2AlarmIfTable, wtWebioEA12x12SnmpSystemTrapManagerIP=wtWebioEA12x12SnmpSystemTrapManagerIP, wtWebioEA24oemInputPortEntry=wtWebioEA24oemInputPortEntry, wtWebAlarm6x6AlarmFtpTrapTxEnable=wtWebAlarm6x6AlarmFtpTrapTxEnable, wtWebCount6InputCounter=wtWebCount6InputCounter, wtWebioEA2x2ERP_24VFTPOption=wtWebioEA2x2ERP_24VFTPOption, wtWebioEA12x12StTzStartHrs=wtWebioEA12x12StTzStartHrs, wtTrapReceiver2x2SnmpSystemTrapManagerIP=wtTrapReceiver2x2SnmpSystemTrapManagerIP, wtWebAlarm6x6Alert28=wtWebAlarm6x6Alert28, wtWebAlarm6x6MailAuthentication=wtWebAlarm6x6MailAuthentication, wtWebCount6StTzOffsetHrs=wtWebCount6StTzOffsetHrs, wtTrapReceiver2x2StTzStopWday=wtTrapReceiver2x2StTzStopWday, wtWebAlarm6x6Manufact=wtWebAlarm6x6Manufact, wtWebCount6FTPServerControlPort=wtWebCount6FTPServerControlPort, wtWebioEA2x2FTPPassword=wtWebioEA2x2FTPPassword, wtWebioEA2x2ClockHrs=wtWebioEA2x2ClockHrs, wtWebioEA6x6Network=wtWebioEA6x6Network, wtWebioEA12x12SyslogServerIP=wtWebioEA12x12SyslogServerIP, wtTrapReceiver2x2MailEnable=wtTrapReceiver2x2MailEnable, wtWebioEA12x6RelBinaryTcpClientServerHttpPort=wtWebioEA12x6RelBinaryTcpClientServerHttpPort, wtWebioEA2x2ERP_24VWayBackEnable=wtWebioEA2x2ERP_24VWayBackEnable, wtWebioEA2x2ERP_24VAlert15=wtWebioEA2x2ERP_24VAlert15, wtWebioEA2x2_24VFTPPassword=wtWebioEA2x2_24VFTPPassword, wtWebioEA12x6RelAlert5=wtWebioEA12x6RelAlert5, wtWebioEA12x12FTPOption=wtWebioEA12x12FTPOption, wtWebioEA6x6OutputModeBit=wtWebioEA6x6OutputModeBit, wtWebioEA12x12MailEnable=wtWebioEA12x12MailEnable, wtWebioEA6x6DeviceName=wtWebioEA6x6DeviceName, wtWebioEA12x6RelSessCntrlAdminPassword=wtWebioEA12x6RelSessCntrlAdminPassword, wtWebioEA12x12PortPulsePolarity=wtWebioEA12x12PortPulsePolarity, wtWebioEA2x2ERP_24VAlert20=wtWebioEA2x2ERP_24VAlert20, wtWebioEA2x2_24VTzOffsetMin=wtWebioEA2x2_24VTzOffsetMin, wtWebioEA2x2ClockMin=wtWebioEA2x2ClockMin, wtIpWatcherDeviceContact=wtIpWatcherDeviceContact, wtWebioEA24oemHTTP=wtWebioEA24oemHTTP, wtWebioEA2x2ERP_24VPortInputBicountInactivTimeout=wtWebioEA2x2ERP_24VPortInputBicountInactivTimeout, wtWebioEA6x6Alarm=wtWebioEA6x6Alarm, wtWebioEA2x2PortLogicInputInverter=wtWebioEA2x2PortLogicInputInverter, wtWebioEA2x2ERP_24VAlert7=wtWebioEA2x2ERP_24VAlert7, wtIpWatcher_24VIpListTable=wtIpWatcher_24VIpListTable, wtWebioEA2x2ERP_24VAlarmInterval=wtWebioEA2x2ERP_24VAlarmInterval, wtWebioEA2x2_24VAlert22=wtWebioEA2x2_24VAlert22, wtWebCount6FTPUserName=wtWebCount6FTPUserName, wtWebioEA12x6RelERPBinaryIfEntry=wtWebioEA12x6RelERPBinaryIfEntry, wtWebioEA2x2ERP_24VBinaryEntry=wtWebioEA2x2ERP_24VBinaryEntry, wtWebioEA12x6RelERPPortLogicInputInverter=wtWebioEA12x6RelERPPortLogicInputInverter, wtWebioEA2x2_24VClockHrs=wtWebioEA2x2_24VClockHrs, wtWebioEA24oemOutputModeEntry=wtWebioEA24oemOutputModeEntry, wtIpWatcherFTP=wtIpWatcherFTP, wtWebioEA2x2ERPGateway=wtWebioEA2x2ERPGateway, wtWebioEA12x6RelAlarmTcpText=wtWebioEA12x6RelAlarmTcpText, wtWebioEA2x2ERP_24VAlert17=wtWebioEA2x2ERP_24VAlert17, wtWebioEA2x2SubnetMask=wtWebioEA2x2SubnetMask, wtWebCount6PortInputBicountInactivTimeout=wtWebCount6PortInputBicountInactivTimeout, wtWebioEA12x6RelERPAlarmIfTable=wtWebioEA12x6RelERPAlarmIfTable, wtWebioEA2x2BinaryTcpClientServerPort=wtWebioEA2x2BinaryTcpClientServerPort, wtWebCount6SyslogEnable=wtWebCount6SyslogEnable, wtWebioEA2x2_24VMfAddr=wtWebioEA2x2_24VMfAddr, wtWebioEA24oemSafetyTimeout=wtWebioEA24oemSafetyTimeout, wtWebioEA6x6PortInputFilter=wtWebioEA6x6PortInputFilter, wtWebioEA2x2BinaryEntry=wtWebioEA2x2BinaryEntry, wtWebioEA2x2TsSyncTime=wtWebioEA2x2TsSyncTime, wtTrapReceiver2x2PrepareOutEvents=wtTrapReceiver2x2PrepareOutEvents, wtWebioEA24oemNetwork=wtWebioEA24oemNetwork, wtIpWatcherClockDay=wtIpWatcherClockDay, wtWebioEA12x12TimeServer1=wtWebioEA12x12TimeServer1, wtWebioEA24oemAlarmIfEntry=wtWebioEA24oemAlarmIfEntry, wtWebioEA2x2FTP=wtWebioEA2x2FTP, wtWebioEA12x6RelBinaryTcpClientServerPassword=wtWebioEA12x6RelBinaryTcpClientServerPassword, wtIpWatcher_24VPortOutputName=wtIpWatcher_24VPortOutputName, wtWebioEA12x12TimeServer2=wtWebioEA12x12TimeServer2, wtWebioEA2x2AlarmSnmpManagerIP=wtWebioEA2x2AlarmSnmpManagerIP, wtWebioEA2x2_24VDnsServer2=wtWebioEA2x2_24VDnsServer2, wtWebioEA24oemBinaryUdpPeerInterval=wtWebioEA24oemBinaryUdpPeerInterval, wtWebioEA2x2ERP_24VAlert23=wtWebioEA2x2ERP_24VAlert23, wtWebioEA2x2ERP_24VTimeZone=wtWebioEA2x2ERP_24VTimeZone, wtWebioEA2x2ERP_24VStTzOffsetHrs=wtWebioEA2x2ERP_24VStTzOffsetHrs, wtWebioEA2x2ERP_24VGetHeaderEnable=wtWebioEA2x2ERP_24VGetHeaderEnable, wtWebioEA24oemFTPOption=wtWebioEA24oemFTPOption, wtWebioEA12x12PortOutputText=wtWebioEA12x12PortOutputText, wtWebioEA2x2MailAdName=wtWebioEA2x2MailAdName, wtWebioEA2x2ERPBinaryUdpPeerLocalPort=wtWebioEA2x2ERPBinaryUdpPeerLocalPort)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA2x2Syslog=wtWebioEA2x2Syslog, wtWebAlarm6x6DeviceClock=wtWebAlarm6x6DeviceClock, wtWebioEA24oemStTzStopWday=wtWebioEA24oemStTzStopWday, wtWebioEA12x6RelFTPUserName=wtWebioEA12x6RelFTPUserName, wtWebioEA12x12TimeZone=wtWebioEA12x12TimeZone, wtWebioEA2x2ERPAlarmSnmpManagerIP=wtWebioEA2x2ERPAlarmSnmpManagerIP, wtWebioEA12x6RelERPDiagErrorIndex=wtWebioEA12x6RelERPDiagErrorIndex, wtWebioEA12x12StTzStartMin=wtWebioEA12x12StTzStartMin, wtWebioEA2x2ERP_24VBinaryConnectedIpAddr=wtWebioEA2x2ERP_24VBinaryConnectedIpAddr, wtWebAlarm6x6SessCntrlConfigMode=wtWebAlarm6x6SessCntrlConfigMode, wtWebioEA2x2ERPPortPulsePolarity=wtWebioEA2x2ERPPortPulsePolarity, wtWebioEA12x6RelERPStTzStopMode=wtWebioEA12x6RelERPStTzStopMode, wtWebioEA12x6RelERPOutputModeTable=wtWebioEA12x6RelERPOutputModeTable, wtWebioEA12x12InputTable=wtWebioEA12x12InputTable, wtIpWatcher_24VAlarmNo=wtIpWatcher_24VAlarmNo, wtWebAlarm6x6InputEntry=wtWebAlarm6x6InputEntry, wtWebioEA12x6RelSnmpCommunityStringRead=wtWebioEA12x6RelSnmpCommunityStringRead, wtWebioEA12x6RelNetwork=wtWebioEA12x6RelNetwork, wtWebioEA24oemSnmpCommunityStringReadWrite=wtWebioEA24oemSnmpCommunityStringReadWrite, wtWebioEA12x12Alert20=wtWebioEA12x12Alert20, wtWebioEA12x6RelAlarmOutputTrigger=wtWebioEA12x6RelAlarmOutputTrigger, wtWebioEA2x2ERP_24VStartup=wtWebioEA2x2ERP_24VStartup, wtWebioEA2x2ERPBinaryTcpServerApplicationMode=wtWebioEA2x2ERPBinaryTcpServerApplicationMode, wtWebioEA2x2BinaryUdpPeerRemoteIpAddr=wtWebioEA2x2BinaryUdpPeerRemoteIpAddr, wtIpWatcher_24VAlarmGlobalEnable=wtIpWatcher_24VAlarmGlobalEnable, wtWebioEA12x6RelAlert2=wtWebioEA12x6RelAlert2, wtWebioEA12x12Outputs=wtWebioEA12x12Outputs, wtWebCount6MailAuthUser=wtWebCount6MailAuthUser, wtWebioEA24oemInputs=wtWebioEA24oemInputs, wtWebioEA24oemDeviceText=wtWebioEA24oemDeviceText, wtWebioEA12x12BinaryUdpPeerInterval=wtWebioEA12x12BinaryUdpPeerInterval, wtTrapReceiver2x2FTPOption=wtTrapReceiver2x2FTPOption, wtWebAlarm6x6AlarmFtpFileName=wtWebAlarm6x6AlarmFtpFileName, wtIpWatcherAlarmFtpReleaseText=wtIpWatcherAlarmFtpReleaseText, wtWebioEA24oemAlert31=wtWebioEA24oemAlert31, wtWebioEA12x12PortLogicInputInverter=wtWebioEA12x12PortLogicInputInverter, wtWebioEA12x6RelERPMfAddr=wtWebioEA12x6RelERPMfAddr, wtIpWatcherMfInternet=wtIpWatcherMfInternet, wtWebioEA12x6RelERPAlarmSyslogIpAddr=wtWebioEA12x6RelERPAlarmSyslogIpAddr, wtWebioEA2x2ERPPortOutputName=wtWebioEA2x2ERPPortOutputName, wtWebioEA24oemBinaryTcpServerClientHttpPort=wtWebioEA24oemBinaryTcpServerClientHttpPort, wtWebioEA6x6StTzStartHrs=wtWebioEA6x6StTzStartHrs, wtWebioEA12x12FTPUserName=wtWebioEA12x12FTPUserName, wtWebioEA2x2ERPFTPOption=wtWebioEA2x2ERPFTPOption, wtWebioEA12x6RelERPBinaryUdpPeerApplicationMode=wtWebioEA12x6RelERPBinaryUdpPeerApplicationMode, wtIpWatcherDiag=wtIpWatcherDiag, wtWebioEA12x6RelBinary=wtWebioEA12x6RelBinary, wtIpWatcher_24VInputs=wtIpWatcher_24VInputs, wtWebioEA6x6MfName=wtWebioEA6x6MfName, wtWebioEA6x6Alert16=wtWebioEA6x6Alert16, wtWebCount6InputPortTable=wtWebCount6InputPortTable, wtWebioEA24oemAlert17=wtWebioEA24oemAlert17, wtWebioEA12x6RelPortLogicOutputInverter=wtWebioEA12x6RelPortLogicOutputInverter, wtWebioEA2x2_24VSnmpCommunityStringReadWrite=wtWebioEA2x2_24VSnmpCommunityStringReadWrite, wtWebioEA2x2DiagBinaryError=wtWebioEA2x2DiagBinaryError, wtIpWatcher_24VAddConfig=wtIpWatcher_24VAddConfig, wtTrapReceiver2x2StTzStopHrs=wtTrapReceiver2x2StTzStopHrs, wtWebioEA12x6RelAlert15=wtWebioEA12x6RelAlert15, wtTrapReceiver2x2Alert8=wtTrapReceiver2x2Alert8, wtWebioEA6x6Device=wtWebioEA6x6Device, wtIpWatcher_24VAlarmSyslogTrgClearText=wtIpWatcher_24VAlarmSyslogTrgClearText, wtWebioEA24oemAlert13=wtWebioEA24oemAlert13, wtIpWatcher_24VAlarmSetPort=wtIpWatcher_24VAlarmSetPort, wtWebioEA2x2PortLogicFunction=wtWebioEA2x2PortLogicFunction, wtWebioEA12x6RelDeviceName=wtWebioEA12x6RelDeviceName, wtWebioEA2x2ERP_24VHttpPort=wtWebioEA2x2ERP_24VHttpPort, wtWebioEA24oemAlarmSystemTrigger=wtWebioEA24oemAlarmSystemTrigger, wtIpWatcher_24VTimeDate=wtIpWatcher_24VTimeDate, wtIpWatcherDevice=wtIpWatcherDevice, wtWebioEA6x6InputState=wtWebioEA6x6InputState, wtWebioEA2x2Alert22=wtWebioEA2x2Alert22, wtWebioEA2x2ERP_24VAlarmFtpDataPort=wtWebioEA2x2ERP_24VAlarmFtpDataPort, wtWebioEA12x6RelStTzOffsetMin=wtWebioEA12x6RelStTzOffsetMin, wtWebioEA6x6BinaryTcpClientApplicationMode=wtWebioEA6x6BinaryTcpClientApplicationMode, wtIpWatcher_24VSyslogSystemMessagesEnable=wtIpWatcher_24VSyslogSystemMessagesEnable, wtWebioEA2x2ERP_24VAlert13=wtWebioEA2x2ERP_24VAlert13, wtWebioEA2x2_24VTzOffsetHrs=wtWebioEA2x2_24VTzOffsetHrs, wtWebioEA12x6RelBinaryTcpServerClientHttpPort=wtWebioEA12x6RelBinaryTcpServerClientHttpPort, wtWebCount6ClockDay=wtWebCount6ClockDay, wtWebCount6FTPServerIP=wtWebCount6FTPServerIP, wtWebioEA12x6RelAlarmTimerCron=wtWebioEA12x6RelAlarmTimerCron, wtWebAlarm6x6AlarmSnmpTrapText=wtWebAlarm6x6AlarmSnmpTrapText, wtWebioEA12x6RelERPPorts=wtWebioEA12x6RelERPPorts, wtWebioEA2x2TimeServer1=wtWebioEA2x2TimeServer1, wtWebioEA12x6RelERPWayBackFTPResponse=wtWebioEA12x6RelERPWayBackFTPResponse, wtWebioEA6x6PortLogicFunction=wtWebioEA6x6PortLogicFunction, wtWebioEA12x12InOut=wtWebioEA12x12InOut, wtIpWatcherOutputTable=wtIpWatcherOutputTable, wtTrapReceiver2x2ActionFtpDataPort=wtTrapReceiver2x2ActionFtpDataPort, wtWebioEA24oemBinaryIfTable=wtWebioEA24oemBinaryIfTable, wtWebioEA12x6RelBinaryConnectedPort=wtWebioEA12x6RelBinaryConnectedPort, wtTrapReceiver2x2ActionUdpIpAddr=wtTrapReceiver2x2ActionUdpIpAddr, wtWebioEA2x2ERPAlarmTimerCron=wtWebioEA2x2ERPAlarmTimerCron, wtWebioEA24oemStTzStartMin=wtWebioEA24oemStTzStartMin, wtWebioEA24oemMailEnable=wtWebioEA24oemMailEnable, wtIpWatcherIpListEntry=wtIpWatcherIpListEntry, wtWebioEA2x2ERP_24VAlert19=wtWebioEA2x2ERP_24VAlert19, wtWebCount6ReportSnmpManagerIP=wtWebCount6ReportSnmpManagerIP, wtWebioEA2x2_24VFTPEnable=wtWebioEA2x2_24VFTPEnable, wtIpWatcherAlarmTriggerState=wtIpWatcherAlarmTriggerState, wtComServer=wtComServer, wtWebCount6ClockYear=wtWebCount6ClockYear, wtWebioEA2x2_24VAlarmTcpIpAddr=wtWebioEA2x2_24VAlarmTcpIpAddr, wtWebioEA6x6PortLogicOutputInverter=wtWebioEA6x6PortLogicOutputInverter, wtWebioEA2x2FTPServerIP=wtWebioEA2x2FTPServerIP, wtWebioEA2x2_24VBinaryUdpPeerInterval=wtWebioEA2x2_24VBinaryUdpPeerInterval, wtWebioEA6x6Alert8=wtWebioEA6x6Alert8, wtWebioEA12x6RelERPMailAuthUser=wtWebioEA12x6RelERPMailAuthUser, wtIpWatcher_24VBasic=wtIpWatcher_24VBasic, wtWebioEA12x6RelPortLogicFunction=wtWebioEA12x6RelPortLogicFunction, wtWebioEA12x6RelERPPortLogicOutputInverter=wtWebioEA12x6RelERPPortLogicOutputInverter, wtWebioEA2x2ERPDiagBinaryError=wtWebioEA2x2ERPDiagBinaryError, wtWebioEA2x2ERPAlert14=wtWebioEA2x2ERPAlert14, wtWebioEA2x2ERP_24VSyslogServerIP=wtWebioEA2x2ERP_24VSyslogServerIP, wtIpWatcher_24VPortOutputText=wtIpWatcher_24VPortOutputText, wtTrapReceiver2x2PortInputText=wtTrapReceiver2x2PortInputText, wtWebioEA12x6RelOutputModeTable=wtWebioEA12x6RelOutputModeTable, wtIpWatcher_24VAlarmFtpOption=wtIpWatcher_24VAlarmFtpOption, wtIpWatcherHttpPort=wtIpWatcherHttpPort, wtTrapReceiver2x2ActionSyslogText=wtTrapReceiver2x2ActionSyslogText, wtWebioEA24oemClockMin=wtWebioEA24oemClockMin, wtWebioEA2x2PortInputBicountInactivTimeout=wtWebioEA2x2PortInputBicountInactivTimeout, wtWebioEA2x2OutputEntry=wtWebioEA2x2OutputEntry, wtWebioEA12x6RelERPAlert19=wtWebioEA12x6RelERPAlert19, wtWebioEA2x2UdpRemotePort=wtWebioEA2x2UdpRemotePort, wtWebioEA2x2MailServer=wtWebioEA2x2MailServer, wtWebioEA2x2SNMP=wtWebioEA2x2SNMP, wtIpWatcherAlarmSnmpTrapText=wtIpWatcherAlarmSnmpTrapText, wtIpWatcher_24VAlarmMailReleaseText=wtIpWatcher_24VAlarmMailReleaseText, wtWebioEA12x12AlarmTimerCron=wtWebioEA12x12AlarmTimerCron, wtWebAlarm6x6AlarmNo=wtWebAlarm6x6AlarmNo, wtTrapReceiver2x2Alert6=wtTrapReceiver2x2Alert6, wtWebAlarm6x6AddConfig=wtWebAlarm6x6AddConfig, wtWebCount6Alert5=wtWebCount6Alert5, wtWebioEA24oemInputEntry=wtWebioEA24oemInputEntry, wtWebioEA2x2_24VAlarmUdpReleaseText=wtWebioEA2x2_24VAlarmUdpReleaseText, wtWebioEA12x6RelTimeServer2=wtWebioEA12x6RelTimeServer2, wtWebioEA12x12DeviceLocation=wtWebioEA12x12DeviceLocation, wtWebCount6PortInputCounterSet=wtWebCount6PortInputCounterSet, wtWebioEA12x6RelOutputMode=wtWebioEA12x6RelOutputMode, wtWebAlarm6x6PortOutputText=wtWebAlarm6x6PortOutputText, wtWebioEA6x6AlarmUdpReleaseText=wtWebioEA6x6AlarmUdpReleaseText, wtWebioEA2x2_24VPortPulseDuration=wtWebioEA2x2_24VPortPulseDuration, wtIpWatcherTzOffsetMin=wtIpWatcherTzOffsetMin, wtTrapReceiver2x2ActionSyslogPort=wtTrapReceiver2x2ActionSyslogPort, wtTrapReceiver2x2SessCntrlLogout=wtTrapReceiver2x2SessCntrlLogout, wtWebioEA2x2ERPUDP=wtWebioEA2x2ERPUDP, wtWebioEA12x6RelPortInputBicountInactivTimeout=wtWebioEA12x6RelPortInputBicountInactivTimeout, wtWebioEA2x2ERPMfHotline=wtWebioEA2x2ERPMfHotline, wtTrapReceiver2x2ActionInputTrigger=wtTrapReceiver2x2ActionInputTrigger, wtWebioEA24oemBinaryConnectedIpAddr=wtWebioEA24oemBinaryConnectedIpAddr, wtWebioEA2x2ERPClockMonth=wtWebioEA2x2ERPClockMonth, wtIpWatcherAlarmTriggerCount=wtIpWatcherAlarmTriggerCount, wtIpWatcherAlert33=wtIpWatcherAlert33, wtWebioEA2x2AlertDiag=wtWebioEA2x2AlertDiag, wtWebCount6StTzStopHrs=wtWebCount6StTzStopHrs, wtTrapReceiver2x2SystemTimerTable=wtTrapReceiver2x2SystemTimerTable, wtWebAlarm6x6Syslog=wtWebAlarm6x6Syslog, wtWebioEA24oemAlert27=wtWebioEA24oemAlert27, wtWebioEA2x2ERPAlarmTcpPort=wtWebioEA2x2ERPAlarmTcpPort, wtIpWatcherFTPServerControlPort=wtIpWatcherFTPServerControlPort, wtWebioEA12x6RelSNMP=wtWebioEA12x6RelSNMP, wtWebioEA2x2InputValue=wtWebioEA2x2InputValue, wtWebioEA6x6FTPEnable=wtWebioEA6x6FTPEnable, wtWebioEA2x2ERPStTzStartMonth=wtWebioEA2x2ERPStTzStartMonth, wtWebioEA2x2_24VTimeServer2=wtWebioEA2x2_24VTimeServer2, wtWebAlarm6x6Alert30=wtWebAlarm6x6Alert30, wtWebioEA12x6RelHttpInputTrigger=wtWebioEA12x6RelHttpInputTrigger, wtWebioEA2x2Diag=wtWebioEA2x2Diag, wtWebioEA12x6RelERPConfig=wtWebioEA12x6RelERPConfig, wtWebioEA12x6RelStTzStartHrs=wtWebioEA12x6RelStTzStartHrs, wtWebioEA2x2_24VBinaryOperationMode=wtWebioEA2x2_24VBinaryOperationMode, wtWebioEA2x2ERP_24VStTzStopMode=wtWebioEA2x2ERP_24VStTzStopMode, wtWebAlarm6x6SyslogSystemMessagesEnable=wtWebAlarm6x6SyslogSystemMessagesEnable, wtWebioEA24oemPorts=wtWebioEA24oemPorts, wtWebioEA2x2ERP_24VTsSyncTime=wtWebioEA2x2ERP_24VTsSyncTime, wtWebCount6MfHotline=wtWebCount6MfHotline, wtWebioEA2x2ERP_24VFTP=wtWebioEA2x2ERP_24VFTP, wtWebioEA2x2ERPBinaryTcpClientServerIpAddr=wtWebioEA2x2ERPBinaryTcpClientServerIpAddr, wtWebioEA12x6RelERPDiagErrorCount=wtWebioEA12x6RelERPDiagErrorCount, wtWebCount6SessCntrlLogout=wtWebCount6SessCntrlLogout, wtWebCount6TzOffsetHrs=wtWebCount6TzOffsetHrs, wtWebioEA24oemStTzOffsetHrs=wtWebioEA24oemStTzOffsetHrs, wtWebioEA12x6RelAlarmInterval=wtWebioEA12x6RelAlarmInterval, wtWebioEA2x2ERPAlarmNo=wtWebioEA2x2ERPAlarmNo, wtWebioEA12x12BinaryUdpPeerRemoteIpAddr=wtWebioEA12x12BinaryUdpPeerRemoteIpAddr, wtTrapReceiver2x2MfInternet=wtTrapReceiver2x2MfInternet, wtIpWatcherAlert4=wtIpWatcherAlert4, wtIpWatcher_24VIpListIfEntry=wtIpWatcher_24VIpListIfEntry, wtWebioEA12x6RelERPHTTP=wtWebioEA12x6RelERPHTTP, wtWebioEA12x12PortInputBicountPulsePolarity=wtWebioEA12x12PortInputBicountPulsePolarity, wtWebioEA12x12InputPortTable=wtWebioEA12x12InputPortTable, wtWebioEA2x2_24VDiagErrorClear=wtWebioEA2x2_24VDiagErrorClear, wtWebioEA6x6SessCntrlPassword=wtWebioEA6x6SessCntrlPassword, wtIpWatcher_24VAlert34=wtIpWatcher_24VAlert34, wtWebioEA6x6DiagErrorClear=wtWebioEA6x6DiagErrorClear, wtIpWatcherTsSyncTime=wtIpWatcherTsSyncTime, wtWebioEA24oemAlert5=wtWebioEA24oemAlert5, wtIpWatcher_24VAlarmSnmpTrapText=wtIpWatcher_24VAlarmSnmpTrapText, wtTrapReceiver2x2UdpEnable=wtTrapReceiver2x2UdpEnable, wtWebAlarm6x6Alert14=wtWebAlarm6x6Alert14, wtWebioEA2x2ERPLCShutDownView=wtWebioEA2x2ERPLCShutDownView, wtWebioEA12x6RelERPStTzStopMin=wtWebioEA12x6RelERPStTzStopMin, wtWebioEA24oemOutputPortEntry=wtWebioEA24oemOutputPortEntry, wtWebioEA12x6RelAlarmSnmpTrapReleaseText=wtWebioEA12x6RelAlarmSnmpTrapReleaseText, wtWebioEA2x2ERPBinaryTcpClientInputTrigger=wtWebioEA2x2ERPBinaryTcpClientInputTrigger, wtWebioEA2x2ERPAlarmFtpFileName=wtWebioEA2x2ERPAlarmFtpFileName, wtWebioEA24oemAlert24=wtWebioEA24oemAlert24, wtIpWatcherTimeZone=wtIpWatcherTimeZone, wtWebioEA6x6MailAuthUser=wtWebioEA6x6MailAuthUser, wtWebioEA12x6RelERPAlert18=wtWebioEA12x6RelERPAlert18, wtIpWatcherFTPUserName=wtIpWatcherFTPUserName, wtWebAlarm6x6PortInputCounterSet=wtWebAlarm6x6PortInputCounterSet, wtWebioEA2x2MfAddr=wtWebioEA2x2MfAddr, wtWebioEA24oemFTPPassword=wtWebioEA24oemFTPPassword, wtIpWatcherIpAddress=wtIpWatcherIpAddress, wtIpWatcherInputCounter=wtIpWatcherInputCounter, wtWebioEA2x2ERPStTzStartHrs=wtWebioEA2x2ERPStTzStartHrs, wtIpWatcher_24VStTzStartMonth=wtIpWatcher_24VStTzStartMonth, wtWebioEA12x6RelBinaryTcpClientLocalPort=wtWebioEA12x6RelBinaryTcpClientLocalPort, wtWebioEA12x12AlarmFtpFileName=wtWebioEA12x12AlarmFtpFileName, wtIpWatcher_24VHTTP=wtIpWatcher_24VHTTP, wtWebAlarm6x6SessCntrl=wtWebAlarm6x6SessCntrl, wtWebioEA2x2ERPStTzStopHrs=wtWebioEA2x2ERPStTzStopHrs, wtWebioEA6x6PortInputMode=wtWebioEA6x6PortInputMode, wtWebioEA6x6Diag=wtWebioEA6x6Diag, wtWebAlarm6x6PortInputName=wtWebAlarm6x6PortInputName, wtWebioEA12x6RelHTTP=wtWebioEA12x6RelHTTP, wtWebioEA2x2ERPUdpEnable=wtWebioEA2x2ERPUdpEnable, wtWebioEA12x6RelERPBinaryUdpPeerRemotePort=wtWebioEA12x6RelERPBinaryUdpPeerRemotePort, wtWebioEA24oemDnsServer2=wtWebioEA24oemDnsServer2, wtWebioEA2x2_24VFTPUserName=wtWebioEA2x2_24VFTPUserName, wtWebioEA12x12BinaryTcpServerClientHttpPort=wtWebioEA12x12BinaryTcpServerClientHttpPort, wtWebioEA6x6Alert9=wtWebioEA6x6Alert9, wtWebioEA2x2ERPBinaryTcpClientApplicationMode=wtWebioEA2x2ERPBinaryTcpClientApplicationMode, wtWebAlarm6x6UdpEnable=wtWebAlarm6x6UdpEnable, wtWebioEA2x2TimeZone=wtWebioEA2x2TimeZone, wtWebioEA2x2AlarmSnmpTrapText=wtWebioEA2x2AlarmSnmpTrapText, wtWebCount6SyslogServerIP=wtWebCount6SyslogServerIP, wtWebioEA12x6RelERPAlarmInterval=wtWebioEA12x6RelERPAlarmInterval, wtIpWatcher_24VTimeServer2=wtIpWatcher_24VTimeServer2, wtTrapReceiver2x2ClockHrs=wtTrapReceiver2x2ClockHrs, wtWebioEA2x2_24VMail=wtWebioEA2x2_24VMail, wtIpWatcherAlert35=wtIpWatcherAlert35, wtWebioEA2x2_24VAlarmUdpText=wtWebioEA2x2_24VAlarmUdpText, wtWebioEA12x6RelInputPortTable=wtWebioEA12x6RelInputPortTable, wtWebioEA2x2ERPAlert9=wtWebioEA2x2ERPAlert9, wtWebioEA24oemOutputTable=wtWebioEA24oemOutputTable, wtWebioEA2x2_24VAlarmMailText=wtWebioEA2x2_24VAlarmMailText, wtWebioEA24oemBinaryTcpClientInterval=wtWebioEA24oemBinaryTcpClientInterval, wtIpWatcher_24VManufact=wtIpWatcher_24VManufact, wtWebioEA2x2_24VAlarmFtpOption=wtWebioEA2x2_24VAlarmFtpOption, wtWebAlarm6x6Alert12=wtWebAlarm6x6Alert12, wtWebioEA6x6AlarmSnmpTrapReleaseText=wtWebioEA6x6AlarmSnmpTrapReleaseText)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA6x6MfDeviceTyp=wtWebioEA6x6MfDeviceTyp, wtWebioEA24oemBinaryTcpServerInputTrigger=wtWebioEA24oemBinaryTcpServerInputTrigger, wtWebioEA12x6RelERPOutputPortEntry=wtWebioEA12x6RelERPOutputPortEntry, wtWebioEA2x2TzEnable=wtWebioEA2x2TzEnable, wtWebioEA12x6RelBinaryTcpClientApplicationMode=wtWebioEA12x6RelBinaryTcpClientApplicationMode, wtWebioEA2x2ERP_24VAlarmTcpIpAddr=wtWebioEA2x2ERP_24VAlarmTcpIpAddr, wtWebioEA2x2StTzStopWday=wtWebioEA2x2StTzStopWday, wtIpWatcherAlarmUdpReleaseText=wtIpWatcherAlarmUdpReleaseText, wtWebioEA2x2_24VMailAuthUser=wtWebioEA2x2_24VMailAuthUser, wtTrapReceiver2x2InEvInputs=wtTrapReceiver2x2InEvInputs, wtWebioEA12x6RelERPAlarmMailSubject=wtWebioEA12x6RelERPAlarmMailSubject, wtWebioEA12x6RelERPAlert16=wtWebioEA12x6RelERPAlert16, wtWebioEA12x12SessCntrlConfigMode=wtWebioEA12x12SessCntrlConfigMode, wtWebioEA2x2ERPSyslogEnable=wtWebioEA2x2ERPSyslogEnable, wtIpWatcher_24VDnsServer2=wtIpWatcher_24VDnsServer2, wtWebioEA12x6RelAlarmMailText=wtWebioEA12x6RelAlarmMailText, wtWebCount6Diag=wtWebCount6Diag, wtIpWatcher_24VAlert18=wtIpWatcher_24VAlert18, wtWebioEA2x2_24VAlert10=wtWebioEA2x2_24VAlert10, wtWebCount6AlertDiag=wtWebCount6AlertDiag, wtWebioEA12x6RelERPWayBackServerControlPort=wtWebioEA12x6RelERPWayBackServerControlPort, wtWebioEA2x2ERPOutputNo=wtWebioEA2x2ERPOutputNo, wtIpWatcherTzOffsetHrs=wtIpWatcherTzOffsetHrs, wtIpWatcher_24VSessCntrlConfigPassword=wtIpWatcher_24VSessCntrlConfigPassword, wtIpWatcher_24VMailAuthPassword=wtIpWatcher_24VMailAuthPassword, wtIpWatcherSubnetMask=wtIpWatcherSubnetMask, wtTrapReceiver2x2DiagErrorCount=wtTrapReceiver2x2DiagErrorCount, wtWebioEA12x12BinaryConnectedIpAddr=wtWebioEA12x12BinaryConnectedIpAddr, wtWebioEA6x6DiagErrorCount=wtWebioEA6x6DiagErrorCount, wtWebioEA2x2ERP_24VFTPPassword=wtWebioEA2x2ERP_24VFTPPassword, wtTrapReceiver2x2IpAddress=wtTrapReceiver2x2IpAddress, wtWebCount6DeviceContact=wtWebCount6DeviceContact, wtWebioEA6x6InputPortEntry=wtWebioEA6x6InputPortEntry, wtWebioEA12x6RelERPPortOutputName=wtWebioEA12x6RelERPPortOutputName, wtIpWatcherStTzOffsetMin=wtIpWatcherStTzOffsetMin, wtWebioEA6x6ClockMin=wtWebioEA6x6ClockMin, wtWebioEA2x2ERP_24VAlarmFtpOption=wtWebioEA2x2ERP_24VAlarmFtpOption, wtTrapReceiver2x2ActionTcpIpAddr=wtTrapReceiver2x2ActionTcpIpAddr, wtWebioEA6x6SyslogEnable=wtWebioEA6x6SyslogEnable, wtIpWatcher_24VSyslogEnable=wtIpWatcher_24VSyslogEnable, wtIpWatcher_24VDiagErrorCount=wtIpWatcher_24VDiagErrorCount, wtWebioEA12x6RelAlert22=wtWebioEA12x6RelAlert22, wtWebioEA6x6SyslogServerPort=wtWebioEA6x6SyslogServerPort, wtWebioEA12x6RelFTPServerControlPort=wtWebioEA12x6RelFTPServerControlPort, wtWebAlarm6x6SnmpSystemTrapManagerIP=wtWebAlarm6x6SnmpSystemTrapManagerIP, wtWebCount6InputEntry=wtWebCount6InputEntry, wtWebioEA2x2ERP_24VSnmpCommunityStringReadWrite=wtWebioEA2x2ERP_24VSnmpCommunityStringReadWrite, wtWebCount6ReportSystemTrigger=wtWebCount6ReportSystemTrigger, wtWebioEA12x6RelMfName=wtWebioEA12x6RelMfName, wtWebioEA24oemLCShutDownView=wtWebioEA24oemLCShutDownView, wtWebioEA2x2ERPMailAuthPassword=wtWebioEA2x2ERPMailAuthPassword, wtWebioEA6x6StTzStartMin=wtWebioEA6x6StTzStartMin, wtIpWatcherAlarmAckPort=wtIpWatcherAlarmAckPort, wtIpWatcher_24VAlert27=wtIpWatcher_24VAlert27, wtTrapReceiver2x2PortOutputText=wtTrapReceiver2x2PortOutputText, wtWebioEA2x2ERP_24VInputValue=wtWebioEA2x2ERP_24VInputValue, wtWebioEA12x12BinaryUdpPeerLocalPort=wtWebioEA12x12BinaryUdpPeerLocalPort, wtWebioEA12x12AlarmFtpDataPort=wtWebioEA12x12AlarmFtpDataPort, wtWebioEA6x6AlarmTcpIpAddr=wtWebioEA6x6AlarmTcpIpAddr, wtWebioEA12x6RelERPClockMonth=wtWebioEA12x6RelERPClockMonth, wtIpWatcher_24VAlarmCount=wtIpWatcher_24VAlarmCount, wtTrapReceiver2x2ActionMailSubject=wtTrapReceiver2x2ActionMailSubject, wtWebioEA24oemGateway=wtWebioEA24oemGateway, wtWebioEA2x2ERP_24VBinaryTcpClientServerPort=wtWebioEA2x2ERP_24VBinaryTcpClientServerPort, wtWebioEA2x2_24VAlarmSyslogIpAddr=wtWebioEA2x2_24VAlarmSyslogIpAddr, wtWebioEA2x2_24VAlarmFtpReleaseText=wtWebioEA2x2_24VAlarmFtpReleaseText, wtWebioEA12x6RelERPAlert7=wtWebioEA12x6RelERPAlert7, wtWebioEA24oemSubnetMask=wtWebioEA24oemSubnetMask, wtWebioEA12x6RelBinaryTcpClientInputTrigger=wtWebioEA12x6RelBinaryTcpClientInputTrigger, wtWebAlarm6x6AlarmMailReleaseSubject=wtWebAlarm6x6AlarmMailReleaseSubject, wtWebioEA6x6AlarmSnmpTrapText=wtWebioEA6x6AlarmSnmpTrapText, wtWebioEA12x6RelTimeDate=wtWebioEA12x6RelTimeDate, wtWebioEA12x6RelAlarmSyslogIpAddr=wtWebioEA12x6RelAlarmSyslogIpAddr, wtIpWatcher_24VTsEnable=wtIpWatcher_24VTsEnable, wtWebioEA12x6RelBinaryUdpPeerRemoteIpAddr=wtWebioEA12x6RelBinaryUdpPeerRemoteIpAddr, wtIpWatcher_24VAlert5=wtIpWatcher_24VAlert5, wtWebioEA6x6TimeServer1=wtWebioEA6x6TimeServer1, wtWebioEA24oemAlarmInterval=wtWebioEA24oemAlarmInterval, wtWebioEA24oemAlarmEnable=wtWebioEA24oemAlarmEnable, wtWebioEA12x12ClockMin=wtWebioEA12x12ClockMin, wtWebioEA2x2Alert10=wtWebioEA2x2Alert10, wtWebioEA12x12SyslogServerPort=wtWebioEA12x12SyslogServerPort, wtWebioEA2x2HttpPort=wtWebioEA2x2HttpPort, wtWebioEA6x6MailAdName=wtWebioEA6x6MailAdName, wtWebioEA2x2ERP_24VPortInputText=wtWebioEA2x2ERP_24VPortInputText, wtIpWatcher_24VPowerSupplyEnable=wtIpWatcher_24VPowerSupplyEnable, wtWebioEA12x12AlarmSnmpManagerIP=wtWebioEA12x12AlarmSnmpManagerIP, wtWebioEA2x2AlarmNo=wtWebioEA2x2AlarmNo, wtWebioEA2x2ERP_24VStTzStartWday=wtWebioEA2x2ERP_24VStTzStartWday, wtTrapReceiver2x2Inputs=wtTrapReceiver2x2Inputs, wtWebioEA2x2_24VStTzStartMode=wtWebioEA2x2_24VStTzStartMode, wtWebioEA6x6BinaryTcpServerApplicationMode=wtWebioEA6x6BinaryTcpServerApplicationMode, wtWebioEA2x2_24VAlarmMailReleaseText=wtWebioEA2x2_24VAlarmMailReleaseText, wtWebioEA12x12StTzStopHrs=wtWebioEA12x12StTzStopHrs, wtWebAlarm6x6Outputs=wtWebAlarm6x6Outputs, wtWebioEA2x2_24VBinaryTcpClientServerPort=wtWebioEA2x2_24VBinaryTcpClientServerPort, wtIpWatcherAlarmSnmpManagerIP=wtIpWatcherAlarmSnmpManagerIP, wtWebioEA6x6StTzStopHrs=wtWebioEA6x6StTzStopHrs, wtWebioEA12x12TzOffsetHrs=wtWebioEA12x12TzOffsetHrs, wtTrapReceiver2x2SessCntrlConfigMode=wtTrapReceiver2x2SessCntrlConfigMode, wtIpWatcher_24VAlert4=wtIpWatcher_24VAlert4, wtWebAlarm6x6StTzOffsetMin=wtWebAlarm6x6StTzOffsetMin, wtTrapReceiver2x2WatchListIfTable=wtTrapReceiver2x2WatchListIfTable, wtWebioEA2x2ERPSyslog=wtWebioEA2x2ERPSyslog, wtWebAlarm6x6AlarmMailReleaseText=wtWebAlarm6x6AlarmMailReleaseText, wtWebioEA2x2_24VInputs=wtWebioEA2x2_24VInputs, wtWebCount6ReportIfTable=wtWebCount6ReportIfTable, wtIpWatcherStTzStopMode=wtIpWatcherStTzStopMode, wtWebioEA2x2_24VAlertDiag=wtWebioEA2x2_24VAlertDiag, wtWebioEA24oemUDP=wtWebioEA24oemUDP, wtIpWatcherSNMP=wtIpWatcherSNMP, wtWebioEA24oemBinaryConnectedPort=wtWebioEA24oemBinaryConnectedPort, wtWebioEA2x2ERPAlert8=wtWebioEA2x2ERPAlert8, wtWebioEA2x2_24VDeviceName=wtWebioEA2x2_24VDeviceName, wtWebioEA2x2_24VSnmpSystemTrapManagerIP=wtWebioEA2x2_24VSnmpSystemTrapManagerIP, wtWebioEA2x2ERP_24VAlarmUdpPort=wtWebioEA2x2ERP_24VAlarmUdpPort, wtIpWatcher_24VStTzStartHrs=wtIpWatcher_24VStTzStartHrs, wtWebioEA24oemDeviceContact=wtWebioEA24oemDeviceContact, wtWebioEA12x6RelERPAlert3=wtWebioEA12x6RelERPAlert3, wtWebioEA24oemStTzStopMonth=wtWebioEA24oemStTzStopMonth, wtTrapReceiver2x2Basic=wtTrapReceiver2x2Basic, wtWebioEA24oemMail=wtWebioEA24oemMail, wtWebioEA2x2ERP_24VHTTP=wtWebioEA2x2ERP_24VHTTP, wtWebAlarm6x6DiagBinaryError=wtWebAlarm6x6DiagBinaryError, wtWebioEA12x6RelERPAlert11=wtWebioEA12x6RelERPAlert11, wtWebioEA2x2ERP_24VAlert1=wtWebioEA2x2ERP_24VAlert1, wtWebioEA24oemAlarmFtpText=wtWebioEA24oemAlarmFtpText, wtWebioEA2x2ERP_24VTimeServer1=wtWebioEA2x2ERP_24VTimeServer1, wtWebioEA2x2MfDeviceTyp=wtWebioEA2x2MfDeviceTyp, wtWebCount6SnmpCommunityStringReadWrite=wtWebCount6SnmpCommunityStringReadWrite, wtWebioEA2x2ERP_24VInputPortEntry=wtWebioEA2x2ERP_24VInputPortEntry, wtWebioEA2x2ERPInputEntry=wtWebioEA2x2ERPInputEntry, wtWebioEA12x12StTzStopWday=wtWebioEA12x12StTzStopWday, wtIpWatcher_24VAlarmIfEntry=wtIpWatcher_24VAlarmIfEntry, wtWebioEA12x12SessCntrlAdminPassword=wtWebioEA12x12SessCntrlAdminPassword, wtWebioEA24oemAlert3=wtWebioEA24oemAlert3, wtWebCount6InOut=wtWebCount6InOut, wtWebioEA6x6DeviceText=wtWebioEA6x6DeviceText, wtIpWatcherDiagErrorIndex=wtIpWatcherDiagErrorIndex, wtWebioEA2x2_24VSafetyTimeout=wtWebioEA2x2_24VSafetyTimeout, wtWebCount6FTPEnable=wtWebCount6FTPEnable, wtWebioEA2x2ERP_24VStTzStopMin=wtWebioEA2x2ERP_24VStTzStopMin, wtIpWatcher_24VClockMin=wtIpWatcher_24VClockMin, wtWebAlarm6x6AlarmUdpTrgClearText=wtWebAlarm6x6AlarmUdpTrgClearText, wtWebioEA12x12OutputPortEntry=wtWebioEA12x12OutputPortEntry, wtWebioEA12x6RelOutputEntry=wtWebioEA12x6RelOutputEntry, wtWebioEA6x6StTzOffsetMin=wtWebioEA6x6StTzOffsetMin, wtIpWatcher_24VOutputs=wtIpWatcher_24VOutputs, wtWebioEA2x2ERPAlert21=wtWebioEA2x2ERPAlert21, wtWebioEA2x2ERP_24VBinaryModeCount=wtWebioEA2x2ERP_24VBinaryModeCount, wtWebioEA2x2_24VDiagErrorMessage=wtWebioEA2x2_24VDiagErrorMessage, wtWebCount6StTzStartMode=wtWebCount6StTzStartMode, wtWebioEA2x2_24VInputPortTable=wtWebioEA2x2_24VInputPortTable, wtWebioEA24oemAlert1=wtWebioEA24oemAlert1, wtIpWatcher_24VAlert13=wtIpWatcher_24VAlert13, wtWebioEA12x6RelERPMfInternet=wtWebioEA12x6RelERPMfInternet, wtWebioEA6x6PortPulseDuration=wtWebioEA6x6PortPulseDuration, wtIpWatcher_24VIpListName=wtIpWatcher_24VIpListName, wtWebioEA6x6StTzOffsetHrs=wtWebioEA6x6StTzOffsetHrs, wtWebCount6Text=wtWebCount6Text, wtWebioEA2x2ClockMonth=wtWebioEA2x2ClockMonth, wtWebAlarm6x6DeviceText=wtWebAlarm6x6DeviceText, wtWebioEA2x2_24VBinaryConnectedIpAddr=wtWebioEA2x2_24VBinaryConnectedIpAddr, wtWebioEA6x6PortOutputGroupMode=wtWebioEA6x6PortOutputGroupMode, wtWebioEA12x12MfDeviceTyp=wtWebioEA12x12MfDeviceTyp, wtWebioEA6x6AlarmCount=wtWebioEA6x6AlarmCount, wtWebioEA2x2ERPTimeServer1=wtWebioEA2x2ERPTimeServer1, wtIpWatcher_24VMailAuthentication=wtIpWatcher_24VMailAuthentication, wtWebioEA12x6RelERPHttpInputTrigger=wtWebioEA12x6RelERPHttpInputTrigger, wtWebioEA12x6RelERPBinaryTcpClientInactivity=wtWebioEA12x6RelERPBinaryTcpClientInactivity, wtWebioEA2x2MailPop3Server=wtWebioEA2x2MailPop3Server, wtWebCount6PortInputName=wtWebCount6PortInputName, wtWebAlarm6x6AlarmFtpText=wtWebAlarm6x6AlarmFtpText, wtWebioEA12x6RelERPBinaryConnectedPort=wtWebioEA12x6RelERPBinaryConnectedPort, wtWebioEA2x2ERP_24VSyslogEnable=wtWebioEA2x2ERP_24VSyslogEnable, wtIpWatcher_24VFTPServerIP=wtIpWatcher_24VFTPServerIP, wtIpWatcher_24VAlarmTcpText=wtIpWatcher_24VAlarmTcpText, wtWebioEA6x6InputNo=wtWebioEA6x6InputNo, wtTrapReceiver2x2DeviceLocation=wtTrapReceiver2x2DeviceLocation, wtWebioEA24oemBinary=wtWebioEA24oemBinary, wtWebioEA12x12DiagErrorMessage=wtWebioEA12x12DiagErrorMessage, wtWebioEA2x2ERPAlert12=wtWebioEA2x2ERPAlert12, wtWebAlarm6x6StTzStartMonth=wtWebAlarm6x6StTzStartMonth, wtWebioEA2x2_24VOutputPortTable=wtWebioEA2x2_24VOutputPortTable, wtTrapReceiver2x2ActionEnable=wtTrapReceiver2x2ActionEnable, wtWebioEA12x6RelERPAlert15=wtWebioEA12x6RelERPAlert15, wtWebioEA12x6RelERPManufact=wtWebioEA12x6RelERPManufact, wtWebioEA2x2_24VPortInputText=wtWebioEA2x2_24VPortInputText, wtWebioEA6x6AlarmEntry=wtWebioEA6x6AlarmEntry, wtWebioEA2x2_24VSyslogSystemMessagesEnable=wtWebioEA2x2_24VSyslogSystemMessagesEnable, wtIpWatcherAlarmSnmpTrapReleaseText=wtIpWatcherAlarmSnmpTrapReleaseText, wtWebioEA2x2_24VAlert6=wtWebioEA2x2_24VAlert6, wtTrapReceiver2x2Alert12=wtTrapReceiver2x2Alert12, wtIpWatcher_24VSetOutput=wtIpWatcher_24VSetOutput, wtWebioEA2x2ERP_24VAlarmFtpFileName=wtWebioEA2x2ERP_24VAlarmFtpFileName, wtWebioEA6x6Alert1=wtWebioEA6x6Alert1, wtWebioEA2x2ERP=wtWebioEA2x2ERP, wtWebioEA2x2_24VTimeServer=wtWebioEA2x2_24VTimeServer, wtWebioEA12x12AlarmMailSubject=wtWebioEA12x12AlarmMailSubject, wtWebAlarm6x6Inputs=wtWebAlarm6x6Inputs, wtIpWatcher_24VMailServer=wtIpWatcher_24VMailServer, wtIpWatcher_24VAlarmSnmpTrapTrgClearText=wtIpWatcher_24VAlarmSnmpTrapTrgClearText, wtIpWatcherConfig=wtIpWatcherConfig, wtWebioEA2x2_24VPortPulsePolarity=wtWebioEA2x2_24VPortPulsePolarity, wtIpWatcher_24VOutputState=wtIpWatcher_24VOutputState, wtWebioEA12x12AlarmSystemTrigger=wtWebioEA12x12AlarmSystemTrigger, wtWebioEA12x6RelClockHrs=wtWebioEA12x6RelClockHrs, wtWebioEA12x6RelBinaryUdpPeerApplicationMode=wtWebioEA12x6RelBinaryUdpPeerApplicationMode, wtWebioEA12x6RelPortOutputSafetyState=wtWebioEA12x6RelPortOutputSafetyState, wtIpWatcher_24VFTPServerControlPort=wtIpWatcher_24VFTPServerControlPort, wtWebCount6Device=wtWebCount6Device, wtWebioEA2x2_24VMailServer=wtWebioEA2x2_24VMailServer, wtWebioEA12x12AlarmMailReleaseSubject=wtWebioEA12x12AlarmMailReleaseSubject, wtWebAlarm6x6AlarmUdpPort=wtWebAlarm6x6AlarmUdpPort, wtWebioEA2x2_24VAlert3=wtWebioEA2x2_24VAlert3, wtWebioEA12x6RelERPPortLogicFunction=wtWebioEA12x6RelERPPortLogicFunction, wtWebioEA2x2ERP_24VMfHotline=wtWebioEA2x2ERP_24VMfHotline, wtWebCount6MfInternet=wtWebCount6MfInternet, wtWebAlarm6x6MfDeviceTyp=wtWebAlarm6x6MfDeviceTyp, wtWebioEA6x6SnmpCommunityStringRead=wtWebioEA6x6SnmpCommunityStringRead, wtWebioEA2x2ERP_24VSessCntrlPassword=wtWebioEA2x2ERP_24VSessCntrlPassword, wtIpWatcher_24VAlarmFtpTrapTxEnable=wtIpWatcher_24VAlarmFtpTrapTxEnable, wtWebioEA2x2ERPDnsServer1=wtWebioEA2x2ERPDnsServer1, wtWebioEA24oemBinaryModeNo=wtWebioEA24oemBinaryModeNo, wtWebAlarm6x6AlarmMailTrgClearSubject=wtWebAlarm6x6AlarmMailTrgClearSubject, wtWebioEA2x2ERP_24VSessCntrlAdminPassword=wtWebioEA2x2ERP_24VSessCntrlAdminPassword, wtTrapReceiver2x2MailAuthUser=wtTrapReceiver2x2MailAuthUser, wtIpWatcherAlert14=wtIpWatcherAlert14, wtIpWatcher_24VIpListNo=wtIpWatcher_24VIpListNo, wtWebCount6MailReply=wtWebCount6MailReply, wtTrapReceiver2x2DiagErrorClear=wtTrapReceiver2x2DiagErrorClear, wtWebioEA2x2ERP_24VUdpRemotePort=wtWebioEA2x2ERP_24VUdpRemotePort, wtWebioEA2x2ERPOutputEntry=wtWebioEA2x2ERPOutputEntry, wtWebAlarm6x6Alert35=wtWebAlarm6x6Alert35, wtWebioEA2x2_24VMfInternet=wtWebioEA2x2_24VMfInternet, wtWebAlarm6x6MfOrderNo=wtWebAlarm6x6MfOrderNo, wtWebCount6InputNo=wtWebCount6InputNo, wtIpWatcher_24VMailReply=wtIpWatcher_24VMailReply, wtWebioEA6x6AlarmSyslogReleaseText=wtWebioEA6x6AlarmSyslogReleaseText, wtWebioEA12x6RelERPStTzOffsetMin=wtWebioEA12x6RelERPStTzOffsetMin, wtWebioEA6x6BinaryTcpClientInputTrigger=wtWebioEA6x6BinaryTcpClientInputTrigger, wtTrapReceiver2x2ActionTriggerState=wtTrapReceiver2x2ActionTriggerState, wtWebioEA12x6RelStTzStopMonth=wtWebioEA12x6RelStTzStopMonth, wtWebioEA2x2_24VDiag=wtWebioEA2x2_24VDiag, wtIpWatcherPortPulseDuration=wtIpWatcherPortPulseDuration, wtWebAlarm6x6Alert4=wtWebAlarm6x6Alert4, wtTrapReceiver2x2HttpPort=wtTrapReceiver2x2HttpPort, wtWebCount6TsSyncTime=wtWebCount6TsSyncTime, wtWebioEA12x6RelERPSessCntrlPassword=wtWebioEA12x6RelERPSessCntrlPassword, wtIpWatcherAlarmMailTrgClearText=wtIpWatcherAlarmMailTrgClearText, wtWebioEA2x2_24VInputPortEntry=wtWebioEA2x2_24VInputPortEntry, wtWebioEA2x2ERPSessCntrl=wtWebioEA2x2ERPSessCntrl, wtWebioEA2x2ERP_24VPortOutputGroupMode=wtWebioEA2x2ERP_24VPortOutputGroupMode, wtWebAlarm6x6Alert24=wtWebAlarm6x6Alert24)
mibBuilder.exportSymbols("Webio-Digital-MIB-US", wtWebioEA24oemSnmpSystemTrapEnable=wtWebioEA24oemSnmpSystemTrapEnable, wtWebioEA2x2ERP_24VAlarmTcpPort=wtWebioEA2x2ERP_24VAlarmTcpPort, wtWebioEA6x6BinaryTcpServerInputTrigger=wtWebioEA6x6BinaryTcpServerInputTrigger, wtWebioEA2x2BinaryTcpClientInputTrigger=wtWebioEA2x2BinaryTcpClientInputTrigger, wtWebioEA2x2ERP_24VMfAddr=wtWebioEA2x2ERP_24VMfAddr, wtWebioEA2x2_24VStTzStopMode=wtWebioEA2x2_24VStTzStopMode, wtWebioEA24oemDeviceLocation=wtWebioEA24oemDeviceLocation, wtWebioEA2x2ERPStTzStopMode=wtWebioEA2x2ERPStTzStopMode, wtWebioEA2x2ERPSNMP=wtWebioEA2x2ERPSNMP, wtWebioEA12x6RelERPFTPPassword=wtWebioEA12x6RelERPFTPPassword, wtWebioEA12x6RelStTzStartMonth=wtWebioEA12x6RelStTzStartMonth, wtWebAlarm6x6Alert26=wtWebAlarm6x6Alert26, wtIpWatcherAlarmInterval=wtIpWatcherAlarmInterval, wtTrapReceiver2x2Network=wtTrapReceiver2x2Network, wtTrapReceiver2x2UdpRemotePort=wtTrapReceiver2x2UdpRemotePort, wtWebioEA2x2OutputPortEntry=wtWebioEA2x2OutputPortEntry, wtWebioEA12x6RelERPSessCntrl=wtWebioEA12x6RelERPSessCntrl, wtWebioEA2x2ERPBinaryTcpClientServerHttpPort=wtWebioEA2x2ERPBinaryTcpClientServerHttpPort, wtWebioEA24oemAlert19=wtWebioEA24oemAlert19, wtWebioEA24oemTimeDate=wtWebioEA24oemTimeDate, wtIpWatcherAlarmTcpTrgClearText=wtIpWatcherAlarmTcpTrgClearText, wtWebioEA2x2_24VBinaryIfTable=wtWebioEA2x2_24VBinaryIfTable, wtWebioEA2x2ERP_24VNetwork=wtWebioEA2x2ERP_24VNetwork, wtWebioEA2x2ERP_24VUdpAdminPort=wtWebioEA2x2ERP_24VUdpAdminPort, wtWebioEA2x2ERP_24VAlarmSnmpTrapText=wtWebioEA2x2ERP_24VAlarmSnmpTrapText, wtWebioEA12x6RelERPOutputTable=wtWebioEA12x6RelERPOutputTable, wtWebioEA12x6RelERPBinaryTcpClientServerPassword=wtWebioEA12x6RelERPBinaryTcpClientServerPassword, wtWebioEA2x2_24VStTzStopWday=wtWebioEA2x2_24VStTzStopWday, wtWebioEA12x12BinaryTcpClientServerIpAddr=wtWebioEA12x12BinaryTcpClientServerIpAddr, wtWebioEA12x6RelERPWayBackFTPTimeOut=wtWebioEA12x6RelERPWayBackFTPTimeOut, wtWebioEA2x2ERPBinaryIfTable=wtWebioEA2x2ERPBinaryIfTable, wtIpWatcherMailAuthentication=wtIpWatcherMailAuthentication, wtIpWatcher_24VAlarmMailText=wtIpWatcher_24VAlarmMailText, wtWebioEA2x2ERPPortInputName=wtWebioEA2x2ERPPortInputName, wtWebioEA2x2ERPAlarmMailAddr=wtWebioEA2x2ERPAlarmMailAddr, wtWebioEA2x2ERP_24VAlarmTcpReleaseText=wtWebioEA2x2ERP_24VAlarmTcpReleaseText, wtIpWatcherPortInputFilter=wtIpWatcherPortInputFilter, wtWebioEA2x2_24VAlarmIfEntry=wtWebioEA2x2_24VAlarmIfEntry, wtWebioEA12x6RelDiagBinaryError=wtWebioEA12x6RelDiagBinaryError, wtWebioEA2x2ERPPortInputBicountInactivTimeout=wtWebioEA2x2ERPPortInputBicountInactivTimeout, wtWebioEA2x2ERPWayBack=wtWebioEA2x2ERPWayBack, wtIpWatcher_24VSnmpCommunityStringReadWrite=wtIpWatcher_24VSnmpCommunityStringReadWrite, wtWebioEA6x6MailAuthPassword=wtWebioEA6x6MailAuthPassword, wtWebioEA24oemBinaryUdpPeerApplicationMode=wtWebioEA24oemBinaryUdpPeerApplicationMode, wtWebioEA12x12MailPop3Server=wtWebioEA12x12MailPop3Server, wtIpWatcher_24VAlarmTable=wtIpWatcher_24VAlarmTable, wtWebAlarm6x6HTTP=wtWebAlarm6x6HTTP, wtWebioEA6x6AlarmUdpText=wtWebioEA6x6AlarmUdpText, wtTrapReceiver2x2DnsServer2=wtTrapReceiver2x2DnsServer2, wtWebioEA2x2StTzOffsetHrs=wtWebioEA2x2StTzOffsetHrs, wtWebioEA2x2ERPStTzStartMin=wtWebioEA2x2ERPStTzStartMin, wtWebioEA6x6PortPulsePolarity=wtWebioEA6x6PortPulsePolarity, wtWebioEA2x2_24VAlert12=wtWebioEA2x2_24VAlert12, wtWebioEA2x2ERP_24VDiagBinaryError=wtWebioEA2x2ERP_24VDiagBinaryError, wtWebAlarm6x6AlarmMailText=wtWebAlarm6x6AlarmMailText, wtWebioEA12x6RelERPOutputModeEntry=wtWebioEA12x6RelERPOutputModeEntry, wtWebAlarm6x6Basic=wtWebAlarm6x6Basic, wtWebioEA2x2ERPPortLogicInputMask=wtWebioEA2x2ERPPortLogicInputMask, wtTrapReceiver2x2MailServer=wtTrapReceiver2x2MailServer, wtWebioEA12x6RelERPAlert9=wtWebioEA12x6RelERPAlert9, wtWebioEA12x6RelERPSyslogSystemMessagesEnable=wtWebioEA12x6RelERPSyslogSystemMessagesEnable, wtWebioEA2x2ERP_24VMailAuthPassword=wtWebioEA2x2ERP_24VMailAuthPassword, wtTrapReceiver2x2ActionSnmpManagerIP=wtTrapReceiver2x2ActionSnmpManagerIP, wtWebAlarm6x6Alert6=wtWebAlarm6x6Alert6, wtTrapReceiver2x2ClockMonth=wtTrapReceiver2x2ClockMonth, wtWebioEA12x6RelIpAddress=wtWebioEA12x6RelIpAddress, wtWebioEA2x2ERP_24VOutputs=wtWebioEA2x2ERP_24VOutputs, wtWebioEA2x2ERP_24VSessCntrl=wtWebioEA2x2ERP_24VSessCntrl, wtWebioEA12x12Alert24=wtWebioEA12x12Alert24, wtWebioEA2x2ERP_24VOutputNo=wtWebioEA2x2ERP_24VOutputNo, wtWebioEA2x2ERP_24VBinaryTcpClientServerIpAddr=wtWebioEA2x2ERP_24VBinaryTcpClientServerIpAddr, wtWebioEA2x2_24VPorts=wtWebioEA2x2_24VPorts, wtWebioEA2x2InputEntry=wtWebioEA2x2InputEntry, wtWebCount6AddConfig=wtWebCount6AddConfig, wtIpWatcherDnsServer1=wtIpWatcherDnsServer1, wtWebioEA12x6RelPortOutputName=wtWebioEA12x6RelPortOutputName, wtTrapReceiver2x2ActionMailText=wtTrapReceiver2x2ActionMailText, wtWebioEA2x2FTPEnable=wtWebioEA2x2FTPEnable, wtWebioEA2x2ERPDiag=wtWebioEA2x2ERPDiag, wtWebioEA12x12AlarmTable=wtWebioEA12x12AlarmTable, wtWebioEA2x2_24VPortLogicFunction=wtWebioEA2x2_24VPortLogicFunction, wtTrapReceiver2x2SyslogServerPort=wtTrapReceiver2x2SyslogServerPort, wtWebioEA2x2_24VClockMonth=wtWebioEA2x2_24VClockMonth, wtWebioEA2x2_24VAlarmSyslogText=wtWebioEA2x2_24VAlarmSyslogText, wtTrapReceiver2x2MailReply=wtTrapReceiver2x2MailReply, wtWebioEA12x12AlarmMaxCounterValue=wtWebioEA12x12AlarmMaxCounterValue, wtWebioEA12x6RelERPAlarmMailReleaseText=wtWebioEA12x6RelERPAlarmMailReleaseText, wtWebioEA6x6StTzStopWday=wtWebioEA6x6StTzStopWday, wtWebioEA2x2ERPBasic=wtWebioEA2x2ERPBasic, wtIpWatcherAlert19=wtIpWatcherAlert19, wtIpWatcherAlarmSyslogIpAddr=wtIpWatcherAlarmSyslogIpAddr, wtWebioEA6x6SessCntrl=wtWebioEA6x6SessCntrl, wtWebioEA2x2_24VTimeServer1=wtWebioEA2x2_24VTimeServer1, wtWebioEA2x2AlarmTcpText=wtWebioEA2x2AlarmTcpText, wtIpWatcherOutputPortEntry=wtIpWatcherOutputPortEntry, wtWebioEA24oemAlert9=wtWebioEA24oemAlert9, wtWebioEA2x2_24VDiagErrorIndex=wtWebioEA2x2_24VDiagErrorIndex, wtWebioEA2x2ERPDeviceClock=wtWebioEA2x2ERPDeviceClock, wtWebioEA2x2ERP_24VAlarmMailSubject=wtWebioEA2x2ERP_24VAlarmMailSubject, wtIpWatcherSetOutput=wtIpWatcherSetOutput, wtWebioEA2x2ERPUdpRemotePort=wtWebioEA2x2ERPUdpRemotePort, wtWebioEA2x2ERP_24VSyslogSystemMessagesEnable=wtWebioEA2x2ERP_24VSyslogSystemMessagesEnable, wtWebioEA12x6RelERPAlertDiag=wtWebioEA12x6RelERPAlertDiag, wtWebioEA2x2_24VBinaryUdpPeerRemoteIpAddr=wtWebioEA2x2_24VBinaryUdpPeerRemoteIpAddr, wtTrapReceiver2x2ButtonEntry=wtTrapReceiver2x2ButtonEntry, wtWebCount6SyslogSystemMessagesEnable=wtWebCount6SyslogSystemMessagesEnable, wtWebioEA2x2TzOffsetMin=wtWebioEA2x2TzOffsetMin, wtIpWatcher_24VAlert7=wtIpWatcher_24VAlert7, wtWebioEA12x6RelAlarmEntry=wtWebioEA12x6RelAlarmEntry, wtWebioEA2x2ERPBinaryConnectedPort=wtWebioEA2x2ERPBinaryConnectedPort, wtWebioEA12x12BinaryTcpClientServerPort=wtWebioEA12x12BinaryTcpClientServerPort, wtIpWatcher_24VAlert25=wtIpWatcher_24VAlert25, wtWebCount6SessCntrlAdminPassword=wtWebCount6SessCntrlAdminPassword, wtWebioEA12x6RelAlarmSyslogPort=wtWebioEA12x6RelAlarmSyslogPort, wtWebioEA24oemPortLogicInputMask=wtWebioEA24oemPortLogicInputMask, wtWebCount6DeviceName=wtWebCount6DeviceName, wtWebioEA12x12Device=wtWebioEA12x12Device, wtWebioEA2x2_24VIpAddress=wtWebioEA2x2_24VIpAddress, wtWebioEA2x2ERP_24VAlarmUdpReleaseText=wtWebioEA2x2ERP_24VAlarmUdpReleaseText, wtIpWatcher_24VAlarmSnmpTrapTrapTxEnable=wtIpWatcher_24VAlarmSnmpTrapTrapTxEnable, wtIpWatcherInputState=wtIpWatcherInputState, wtWebioEA12x6RelERPUdpEnable=wtWebioEA12x6RelERPUdpEnable, wtWebioEA12x6RelERPDeviceName=wtWebioEA12x6RelERPDeviceName, wtWebioEA12x6RelERPMailAuthPassword=wtWebioEA12x6RelERPMailAuthPassword, wtWebioEA12x6RelMailReply=wtWebioEA12x6RelMailReply, wtWebioEA2x2ERP_24VStTzEnable=wtWebioEA2x2ERP_24VStTzEnable, wtTrapReceiver2x2PortButtonText=wtTrapReceiver2x2PortButtonText, wtIpWatcherAlert31=wtIpWatcherAlert31, wtWebioEA2x2TimeServer2=wtWebioEA2x2TimeServer2, wtTrapReceiver2x2StTzStartHrs=wtTrapReceiver2x2StTzStartHrs, wtWebioEA2x2ERPBinaryTcpClientServerPassword=wtWebioEA2x2ERPBinaryTcpClientServerPassword, wtWebioEA12x12PortLogicFunction=wtWebioEA12x12PortLogicFunction, wtIpWatcherStTzOffsetHrs=wtIpWatcherStTzOffsetHrs, wtWebioEA6x6InputCounter=wtWebioEA6x6InputCounter, wtWebioEA12x12UdpAdminPort=wtWebioEA12x12UdpAdminPort, wtWebioEA12x6RelERPAlert12=wtWebioEA12x6RelERPAlert12, wtWebCount6Manufact=wtWebCount6Manufact, wtWebioEA24oemSetOutput=wtWebioEA24oemSetOutput, wtWebioEA2x2Alert14=wtWebioEA2x2Alert14, wtIpWatcher_24VSNMP=wtIpWatcher_24VSNMP, wtWebioEA2x2ERPAlert1=wtWebioEA2x2ERPAlert1, wtIpWatcherClockYear=wtIpWatcherClockYear, wtWebioEA2x2ERP_24VAlert14=wtWebioEA2x2ERP_24VAlert14, wtWebioEA12x6RelBinaryTcpClientServerPort=wtWebioEA12x6RelBinaryTcpClientServerPort, wtWebCount6SnmpSystemTrapManagerIP=wtWebCount6SnmpSystemTrapManagerIP, wtWebioEA2x2ERPMailEnable=wtWebioEA2x2ERPMailEnable, wtWebioEA12x6RelMailAdName=wtWebioEA12x6RelMailAdName, wtWebAlarm6x6Alert7=wtWebAlarm6x6Alert7, wtWebioEA24oemAlarmSnmpTrapText=wtWebioEA24oemAlarmSnmpTrapText, wtWebioEA12x6RelERPStTzStartHrs=wtWebioEA12x6RelERPStTzStartHrs, wtWebioEA12x6RelInputNo=wtWebioEA12x6RelInputNo, wtWebioEA2x2ERPStartup=wtWebioEA2x2ERPStartup, wtIpWatcherSnmpSystemTrapEnable=wtIpWatcherSnmpSystemTrapEnable, wtWebioEA12x12HttpPort=wtWebioEA12x12HttpPort, wtWebioEA6x6OutputNo=wtWebioEA6x6OutputNo, wtWebioEA2x2SyslogServerPort=wtWebioEA2x2SyslogServerPort, wtWebioEA12x6RelERPAlarmSyslogText=wtWebioEA12x6RelERPAlarmSyslogText, wtIpWatcher_24VTzOffsetHrs=wtIpWatcher_24VTzOffsetHrs, wtWebioEA12x6RelERPPortOutputText=wtWebioEA12x6RelERPPortOutputText, wtWebAlarm6x6PortInputPulsePolarity=wtWebAlarm6x6PortInputPulsePolarity, wtIpWatcherInputPortTable=wtIpWatcherInputPortTable, wtWebioEA2x2SnmpCommunityStringReadWrite=wtWebioEA2x2SnmpCommunityStringReadWrite, wtWebioEA12x12MailReply=wtWebioEA12x12MailReply, wtWebioEA24oemPortPulsePolarity=wtWebioEA24oemPortPulsePolarity, wtWebioEA2x2StTzEnable=wtWebioEA2x2StTzEnable, wtWebCount6DeviceText=wtWebCount6DeviceText, wtTrapReceiver2x2StTzStopMode=wtTrapReceiver2x2StTzStopMode, wtWebioEA2x2ERPInputPortTable=wtWebioEA2x2ERPInputPortTable, wtWebioEA24oemSyslogEnable=wtWebioEA24oemSyslogEnable, wtWebioEA12x6RelDeviceClock=wtWebioEA12x6RelDeviceClock, wtWebioEA24oemTimeServer=wtWebioEA24oemTimeServer, wtWebioEA24oemBinaryTcpClientServerPassword=wtWebioEA24oemBinaryTcpClientServerPassword, wtIpWatcherSnmpCommunityStringRead=wtIpWatcherSnmpCommunityStringRead, wtWebioEA2x2StTzOffsetMin=wtWebioEA2x2StTzOffsetMin, wtWebAlarm6x6Alert27=wtWebAlarm6x6Alert27, wtIpWatcherText=wtIpWatcherText, wtIpWatcher_24VAlarmUdpText=wtIpWatcher_24VAlarmUdpText, wtWebioEA24oemManufact=wtWebioEA24oemManufact, wtWebioEA2x2ERPBinaryIfEntry=wtWebioEA2x2ERPBinaryIfEntry, wtWebCount6Mail=wtWebCount6Mail, wtWebCount6MailServer=wtWebCount6MailServer, wtWebioEA2x2_24VAlarmMailReleaseSubject=wtWebioEA2x2_24VAlarmMailReleaseSubject, wtWebioEA2x2ERPInputTable=wtWebioEA2x2ERPInputTable, wtWebioEA2x2ERPSnmpSystemTrapManagerIP=wtWebioEA2x2ERPSnmpSystemTrapManagerIP, wtWebioEA2x2SessCntrlLogout=wtWebioEA2x2SessCntrlLogout)
