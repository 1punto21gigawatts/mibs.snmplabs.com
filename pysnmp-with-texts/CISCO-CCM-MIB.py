#
# PySNMP MIB module CISCO-CCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddressIPv6, InetAddress, InetAddressIPv4, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressIPv6", "InetAddress", "InetAddressIPv4", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, NotificationType, Gauge32, ObjectIdentity, Counter64, ModuleIdentity, Integer32, MibIdentifier, Bits, Counter32, IpAddress, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Gauge32", "ObjectIdentity", "Counter64", "ModuleIdentity", "Integer32", "MibIdentifier", "Bits", "Counter32", "IpAddress", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, DisplayString, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "DateAndTime", "TextualConvention")
ciscoCcmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 156))
ciscoCcmMIB.setRevisions(('2010-07-07 00:00', '2009-12-03 00:00', '2008-08-21 00:00', '2008-02-12 00:00', '2005-09-14 00:00', '2005-05-09 00:00', '2004-08-02 00:00', '2003-08-25 00:00', '2003-05-08 00:00', '2002-01-11 00:00', '2000-12-01 00:00', '2000-03-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCcmMIB.setRevisionsDescriptions(('(1)Updated the following TEXTUAL-CONVENTIONs: CcmDevUnregCauseCode, CcmDevRegFailCauseCode; (2)Replaced the previous references of CISCO CCM MIB to CISCO-CCM-MIB (3)Replaced previous references of CCM to CUCM', '(1)Added following TEXTUAL-CONVENTIONs: CcmDevRegFailCauseCode, CcmDevUnregCauseCode. These objects replaced the CcmDevFailCauseCode; (2)Added following objects in ccmPhoneTable: ccmPhoneUnregReason, ccmPhoneRegFailReason. These objects replaced the ccmPhoneStatusReason; (3)Added following object in ccmPhoneFailedTable: ccmPhoneFailedRegFailReason. This object replaced the ccmPhoneFailCauseCode; (4)Added following objects in ccmPhoneStatusUpdateTable: ccmPhoneStatusUnregReason, ccmPhoneStatusRegFailReason. These objects replaced the ccmPhoneStatusUpdateReason; (5)Added following object in ccmGatewayTable: ccmGatewayUnregReason, ccmGatewayRegFailReason. These objects replaced the ccmGatewayStatusReason; (6)Added following objects in ccmMediaDeviceTable: ccmMediaDeviceUnregReason, ccmMediaDeviceRegFailReason. These objects replaced the ccmMediaDeviceStatusReason; (7)Added following objects in ccmCTIDeviceTable: ccmCTIDeviceUnregReason, ccmCTIDeviceRegFailReason. These objects replaced the ccmCTIDeviceStatusReason; (8)Added following objects in ccmH323DeviceTable: ccmH323DevUnregReason, ccmH323DevRegFailReason. These objects replaced the ccmH323DevStatusReason; (9)Added following objects in ccmVoiceMailDeviceTable: ccmVMailDevUnregReason, ccmVMailDevRegFailReason. These objects replaced the ccmVMailDevStatusReason; (10)Added following objects in ccmNotificationsInfo: ccmGatewayRegFailCauseCode. This object replaced the ccmGatewayFailCauseCode; (11)Added following NOTIFICATION-TYPE: ccmGatewayFailedReason. This notification replaced the ccmGatewayFailed; (12)Added following OBJECT_GROUPS: ccmPhoneInfoGroupRev6, ccmNotificationsInfoGroupRev5, ccmGatewayInfoGroupRev4, ccmMediaDeviceInfoGroupRev4, ccmCTIDeviceInfoGroupRev4, ccmH323DeviceInfoGroupRev3, ccmVoiceMailDeviceInfoGroupRev2, ccmNotificationsGroupRev3. These groups replaced the following groups respectively: ccmPhoneInfoGroupRev5, ccmNotificationsInfoGroupRev4, ccmGatewayInfoGroupRev3, ccmMediaDeviceInfoGroupRev3, ccmCTIDeviceInfoGroupRev3, ccmH323DeviceInfoGroupRev2, ccmVoiceMailDeviceInfoGroupRev1, ccmNotificationsGroupRev2; (13)Added following MODULE-COMPLIANCE: ciscoCcmMIBComplianceRev7. This compliance replaced the ciscoCcmMIBComplianceRev6; (14)Deprecated following TEXTUAL-CONVENTION: CcmDevFailCauseCode; (15)Deprecated following object in ccmPhoneTable: ccmPhoneStatusReason; (16)Deprecated following object in ccmPhoneFailedTable: ccmPhoneFailCauseCode; (17)Deprecated following object in ccmPhoneStatusUpdateTable: ccmPhoneStatusUpdateReason; (18)Deprecated following object in ccmGatewayTable: ccmGatewayStatusReason; (19)Deprecated following object in ccmMediaDeviceTable: ccmMediaDeviceStatusReason; (20)Deprecated following object in ccmCTIDeviceTable: ccmCTIDeviceStatusReason; (21)Deprecated following object in ccmH323DeviceTable: ccmH323DevStatusReason; (22)Deprecated following object in ccmVoiceMailDeviceTable: ccmVMailDevStatusReason; (23)Deprecated following object in ccmNotificationsInfo: ccmGatewayFailCauseCode; (24)Deprecated following NOTIFICATION-TYPE: ccmGatewayFailed; (25)Deprecated following OBJECT_GROUPS: ccmPhoneInfoGroupRev5, ccmGatewayInfoGroupRev3, ccmMediaDeviceInfoGroupRev3, ccmCTIDeviceInfoGroupRev3, ccmH323DeviceInfoGroupRev2, ccmVoiceMailDeviceInfoGroupRev1, ccmNotificationsGroupRev2, ccmNotificationsInfoGroupRev4; (26)Obsoleted following OBJECT_GROUPS: ccmInfoGroupRev3, ccmH323DeviceInfoGroupRev1; (27)Deprecated following MODULE-COMPLIANCE: ciscoCcmMIBComplianceRev6;', '(1)Added following objects in ccmCTIDeviceTable: ccmCTIDeviceInetAddressIPv4, ccmCTIDeviceInetAddressIPv6. These objects replaced the ccmCTIDeviceInetAddressType and ccmCTIDeviceInetAddress; (2)Deprecated following objects in ccmCTIDeviceTable: ccmCTIDeviceInetAddressType, ccmCTIDeviceInetAddress; (3)Added following OBJECT-GROUP ccmCTIDeviceInfoGroupRev3. This group replaced the ccmCTIDeviceInfoGroupRev2; (4)Deprecated following OBJECT-GROUP ccmCTIDeviceInfoGroupRev2; (5)Added ciscoCcmMIBComplianceRev6 MODULE-COMPLIANCE. This compliance replaced the ciscoCcmMIBComplianceRev5; (6)Deprecated ciscoCcmMIBComplianceRev5 MODULE-COMPLIANCE;', '(1)Added following objects in ccmTable: ccmInetAddress2, ccmInetAddress2Type; (2)Added following objects in ccmPhoneTable: ccmPhoneInetAddressIPv4, ccmPhoneInetAddressIPv6, ccmPhoneIPv4Attribute, ccmPhoneIPv6Attribute, ccmPhoneActiveLoadID; (3)Added following objects in ccmPhoneFailedTable: ccmPhoneFailedInetAddressIPv4, ccmPhoneFailedInetAddressIPv6, ccmPhoneFailedIPv4Attribute, ccmPhoneFailedIPv6Attribute; (4)Added following objects in ccmSIPDeviceTable: ccmSIPDevInetAddressIPv4, ccmSIPDevInetAddressIPv6; (5)Added following objects in ccmMediaDeviceTable: ccmMediaDeviceInetAddressIPv4, ccmMediaDeviceInetAddressIPv6; (6)Deprecated following objects in ccmPhoneTable: ccmPhoneInetAddressType, ccmPhoneInetAddress; (7)Deprecated following objects in ccmPhoneFailedTable: ccmPhoneFailedInetAddressType, ccmPhoneFailedInetAddress; (8)Deprecated following objects in ccmSIPDeviceTable: ccmSIPDevInetAddressType, ccmSIPDevInetAddress; (9)Deprecated following objects in ccmMediaDeviceTable: ccmMediaDeviceInetAddressType, ccmMediaDeviceInetAddress; (10)Added following scalar objects ccmH323TableEntries, ccmSIPTableEntries; (11)Obsoleted ciscoCcmMIBComplianceRev3 MODULE-COMPLIANCE; (12)Deprecated ciscoCcmMIBComplianceRev4 MODULE-COMPLIANCE; (13)Added ciscoCcmMIBComplianceRev5 MODULE-COMPLIANCE; (14)Obsoleted following NOTIFICATION-GROUPS ccmNotificationsGroup, ccmNotificationsGroupRev1; (15)Obsoleted following OBJECT-GROUPS ccmInfoGroupRev2, ccmPhoneInfoGroupRev3, ccmSIPDeviceInfoGroup, ccmNotificationsInfoGroupRev1, ccmNotificationsInfoGroupRev2; (16)Deprecated following OBJECT-GROUPS ccmInfoGroupRev3, ccmPhoneInfoGroupRev4, ccmSIPDeviceInfoGroupRev1, ccmMediaDeviceInfoGroupRev2, ccmH323DeviceInfoGroupRev1, ccmNotificationsInfoGroupRev3; (17)Added following OBJECT-GROUPS ccmInfoGroupRev4, ccmPhoneInfoGroupRev5, ccmMediaDeviceInfoGroupRev3, ccmNotificationsInfoGroupRev4, ccmH323DeviceInfoGroupRev2, ccmSIPDeviceInfoGroupRev2;', '(1)Updated CcmDevFailCauseCode definition to include more cause codes authenticationError, invalidX509NameInCertificate, invalidTLSCipher, directoryNumberMismatch and malformedRegisterMsg. (2)Updated description of following objects: ccmPhoneFailedInetAddress, ccmGatewayInetAddress, ccmMediaDeviceInetAddress, ccmGatekeeperInetAddress, ccmCTIDeviceInetAddress, ccmH323DevInetAddress, ccmH323DevCnfgGKInetAddress, ccmH323DevAltGK2InetAddress, ccmH323DevAltGK3InetAddress, ccmH323DevAltGK4InetAddress, ccmH323DevAltGK5InetAddress, ccmH323DevActGKInetAddress, ccmH323DevRmtCM1InetAddress, ccmH323DevRmtCM2InetAddress, ccmH323DevRmtCM3InetAddress, ccmVMailDevInetAddress .', '(1)Added partiallyregistered to CcmDeviceStatus TC (2)Added phonePartiallyregistered to ccmPhoneStatusUpdateType TC (3)Added following TCs CcmPhoneProtocolType, CcmDeviceLineStatus CcmSIPTransportProtocolType (4)Added following objects to ccmPhoneTable: ccmPhoneProtocol, ccmPhoneName (5)Added ccmPhoneExtnStatus to ccmPhoneExtnTable (6)Added following objects to ccmSIPDeviceTable: ccmSIPInTransportProtocolType, ccmSIPOutTransportProtocolType, ccmSIPInPortNumber, ccmSIPOutPortNumber (7)Added ccmTLSConnectionFailure notification (8)Updated description of following objects under ccmSIPDeviceTable: ccmTLSConnectionFailReasonCode, ccmSIPDevName, ccmSIPDevDescription, ccmSIPDevInetAddress (9)Updated description of ccmCallManagerAlarmEnable (10) Added the following object groups: ccmPhoneInfoGroupRev4, ccmNotificationsInfoGroupRev3, ccmSIPDeviceInfoGroupRev1 (11) Added the following notification groups: ccmNotificationsGroupRev2 (12) Added MIB compliance ciscoCcmMIBComplianceRev4.', '(1) Obsoleted CcmDeviceProductId, ccmTimeZoneOffset ccmPhoneType, ccmPhoneLastError, ccmPhoneTimeLastError, ccmPhoneExtensionTable, ccmPhoneExtensionEntry, ccmPhoneExtensionIndex, ccmPhoneExtension, ccmPhoneExtensionMultiLines, ccmPhoneExtensionInetAddressType, ccmPhoneExtensionInetAddress, ccmPhoneFailedName, ccmGatewayType, ccmGatewayProductId, ccmActivePhones, ccmInActivePhones, ccmActiveGateways, ccmInActiveGateways, ccmMediaDeviceType,ccmCTIDeviceType, ccmCTIDeviceAppInfo,ccmH323DevProductId, ccmVMailDevProductId, ciscoCcmMIBComplianceRev2, ccmInfoGroupRev1, ccmPhoneInfoGroupRev1, ccmGatewayInfoGroupRev1 ccmCTIDeviceInfoGroup, ccmNotificationsInfoGroup ccmPhoneInfoGroupRev2, ccmGatewayInfoGroupRev2 ccmMediaDeviceInfoGroupRev1, ccmCTIDeviceInfoGroupRev1 ccmH323DeviceInfoGroup, ccmVoiceMailDeviceInfoGroup .', '(1) Added the definition of ccmMaliciousCall and ccmQualityReport notifications and its objects; (2) Added the definition of ccmSystemVersion and ccmInstallationId objects to ccmGlobalInfo group; (3) Added H323 trunk types and SIP trunk type in ccmDeviceProductId; (4) Added more media device types in ccmMediaDevice table; (5) Added ccmSIPDeviceInfo definition (6) Added more phone types (7) Added the definition of ccmProductTypeTable to list the product types supported at run time. Also added ccmPhoneProductTypeIndex, ccmGatewayProductTypeIndex, ccmMediaDeviceProductTypeIndex, ccmCTIDeviceProductTypeIndex, ccmH323DevProductTypeIndex, and ccmVMailDevProductTypeIndex objects. Deprecated the ccmPhoneType, ccmGatewayType, ccmGatewayProductId, ccmMediaDeviceType, ccmCTIDeviceTYpe, ccmH323DevProductId and ccmVMailDevProductId and objects (8) Deprecated the CcmDeviceProductId definition.', '(1) Added more phone types in the ccmPhoneType definition; (2) Added more gateway types in the ccmGatewayType and CcmDeviceProductId definition.', '(1) Updated CcmDevFailCauseCode definition to include more cause codes deviceInitiatedReset, callManagerReset and noError; (2) Added ccmH323DeviceInfo and ccmVoiceMailDeviceInfo objects; (3) Updated ccmRegionAvailableBandwidth definition to include two more bandwidth types bwGSM and bwWideband; (4) Deprecated ccmTimeZoneOffset object; (5) Added ccmTimeZoneOffsetHours and ccmTimeZoneOffsetMinutes to ccmTimeZoneTable; (6) Added ccmPhoneStatusUpdateReason object to ccmPhoneStatusUpdate table; (7) Added ccmGatewayProductId, ccmGatewayStatusReason, ccmGatewayTimeLastStatusUpdt, ccmGatewayTimeLastRegistered, ccmGatewayDChannelStatus and ccmGatewayDChannelNumber objects to ccmGatewayTable; (8) Added new types to ccmGatewayType; (9) Added rejected status to ccmGatewayStatus; (10)Obsoleted the ccmGatewayTrunkInfo (this was never supported); (11)Added ccmMediaDeviceStatusReason, ccmMediaDeviceTimeLastStatusUpdt and ccmMediaDeviceTimeLastRegistered to ccmMediaDeviceTable; (12)Added more types to ccmMediaDeviceType; (13)Added rejected status to ccmMediaDeviceStatus; (14)Deprecated the ccmGatekeeperTable definition; (15)Added rejected status to ccmGatekeeperstatus; (16)Added ccmCTIDeviceStatusReason, ccmCTIDeviceTimeLastStatusUpdt and ccmCTIDeviceTimeLastRegistered to ccmCTIDeviceTable; (17)Added rejected status to ccmCTIDeviceStatus; (18)Added more objects to the ccmGlobalInfo; (19)Added ccmPhoneStatusReason, ccmPhoneTimeLastStatusUpdt to ccmPhoneTable; (20)Added rejected status to ccmPhoneStatus; (21)Deprecated ccmPhoneFailedName and added ccmPhoneMacAddress to ccmPhoneFailedTable; (22)Deprecated ccmPhoneLastError and ccmPhoneTimeLastError in ccmPhoneTable; (23)Deprecated ccmCTIDeviceAppInfo in ccmCTIDeviceTable; (24)Defined CcmDeviceProductId and CcmDeviceStatus textual conventions; (25)Added ccmPhoneExtnTable, ccmPhStatUpdtTblLastAddedIndex and ccmPhFailedTblLastAddedIndex. Deprecated ccmPhoneExtensionTable. (26)Changed the default value of ccmCallManagerAlarmEnable, ccmGatewayAlarmEnable, ccmPhoneFailedStorePeriod and ccmPhoneStatusUpdateStorePeriod objects. Also changed the minimum value of ccmPhoneFailedStorePeriod and ccmPhoneStatusUpdateStorePeriod objects. (27)Updated ccmMIBCompliance statements; (28)Added this revision clause.', "(1) Add ccmMediaDeviceInfo, ccmGatekeeperInfo, ccmCTIDeviceInfo, ccmAlarmConfigInfo and ccmNotificationsInfo objects; (2) Add ccmClusterId to the ccmEntry; (3) Deprecated the ccmGatewayTrunkInfo (this was never implemented and it should've been in the gateway MIB); (4) Add ccmPhoneFailedTable and ccmPhoneStatusUpdateTable; (5) Add ccmMIBNotifications; (6) Add new ccmGatewayType and ccmPhoneType; (7) Add this Revision clause.", 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCcmMIB.setLastUpdated('201007070000Z')
if mibBuilder.loadTexts: ciscoCcmMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCcmMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-selsius@cisco.com')
if mibBuilder.loadTexts: ciscoCcmMIB.setDescription('The MIB Module for the management of a Cisco Unified Communications Manager (CUCM) application running with a Cisco Communication Network (CCN) System. CUCM is an IP-PBX which controls the call processing of a Voice Over IP (VoIP) network. A CCN system comprises multiple regions, with each region consisting of several CUCM groups with multiple CUCMs. The MIB can be used by the CUCM Application to present Provision and statistics information. Terminology: CUCM: Cisco Unified Communications Manager SCCP: Skinny Client Control Protocol SIP: Session Initiation Protocol TLS: Transport Layer Security MGCP: Media Gateway Control Protocol EM: Extension Mobility EMCC: Extension Mobility Cross Cluster')
class CcmIndex(TextualConvention, Unsigned32):
    description = 'This syntax is used as the Index into a table. A positive value is used to identify a unique entry in the table.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CcmIndexOrZero(TextualConvention, Unsigned32):
    description = 'This textual convention is an extension of the CcmIndex convention. The latter defines a greater than zero to identify an entry of the CUCM MIB table in the managed system. This extension permits the additional value of zero. The value zero is object- specific and must be defined as part of the description of any object which uses this syntax.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class CcmDevFailCauseCode(TextualConvention, Integer32):
    description = 'This syntax is used as means of identifying the reasons for a device communication error. noError: No Error unknown: Unknown error cause noEntryInDatabase: Device not configured properly in the CUCM database databaseConfigurationError: Device configuration error in the CUCM database deviceNameUnresolveable: The CallManager is unable to resolve the device name to an IP Address internally maxDevRegReached: Maximum number of device registrations have been reached connectivityError: CallManager is unable to establish communication with the device during registration initializationError: Indicates an error occurred when the CallManager tries to initialize the device deviceInitiatedReset: Indicates that the error was due to device initiated reset callManagerReset: Indicates that the error was due to call manager reset. authenticationError: Indicates mismatch between configured authentication mode and the authentication mode that the device is using to connect to the CallManager. invalidX509NameInCertificate: Indicates mismatch between the peer X.509 certificate subject name and what is configured for the device. invalidTLSCipher: Indicates Cipher mismatch during TLS handshake process. directoryNumberMismatch: Indicates mismatch between the directory number that the SIP device is trying to register with and the directory number configured in the CallManager for the SIP device. malformedRegisterMsg: Indicates that SIP device attempted to register with CallManager, but the REGISTER message contained formatting errors.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noError", 0), ("unknown", 1), ("noEntryInDatabase", 2), ("databaseConfigurationError", 3), ("deviceNameUnresolveable", 4), ("maxDevRegReached", 5), ("connectivityError", 6), ("initializationError", 7), ("deviceInitiatedReset", 8), ("callManagerReset", 9), ("authenticationError", 10), ("invalidX509NameInCertificate", 11), ("invalidTLSCipher", 12), ("directoryNumberMismatch", 13), ("malformedRegisterMsg", 14))

class CcmDevRegFailCauseCode(TextualConvention, Integer32):
    description = 'This syntax is used as means of identifying the reasons for a device registration failure. The scope of this enumeration can expand to comply with RFC 2578. noError: No Error unknown: Unknown error cause noEntryInDatabase: Device not configured properly in the CUCM database databaseConfigurationError: Device configuration error in the CUCM database deviceNameUnresolveable: The CallManager is unable to resolve the device name to an IP Address internally maxDevRegExceeded: Maximum number of device registrations have been reached connectivityError: CallManager is unable to establish communication with the device during registration initializationError: Indicates an error occurred when the CallManager tries to initialize the device deviceInitiatedReset: Indicates that the error was due to device initiated reset callManagerReset: Indicates that the error was due to call manager reset. authenticationError: Indicates mismatch between configured authentication mode and the authentication mode that the device is using to connect to the CallManager. invalidX509NameInCertificate: Indicates mismatch between the peer X.509 certificate subject name and what is configured for the device. invalidTLSCipher: Indicates Cipher mismatch during TLS handshake process. directoryNumberMismatch: Indicates mismatch between the directory number that the SIP device is trying to register with and the directory number configured in the CallManager for the SIP device. malformedRegisterMsg: Indicates that SIP device attempted to register with CallManager, but the REGISTER message contained formatting errors. protocolMismatch: The protocol of the device (SIP or SCCP) does not match the configured protocol in CUCM. deviceNotActive: The device has not been activated. authenticatedDeviceAlreadyExists: A device with the same name is already registered with CUCM. obsoleteProtocolVersion: The SCCP device registered with an obsolete protocol version. databaseTimeout: CUCM requested device configuration data from the database but did not receive a response within 10 minutes. registrationSequenceError: A device requested configuration information from the CUCM at an unexpected time. The CUCM had not yet obtained the requested information. The device will automatically attempt to register again. If this alarm occurs again, manually reset the device. If this alarm continues to occur after the manual reset, there may be an internal firmware error. This is applicable for SCCP protocol only. invalidCapabilities: The CUCM detected an error in the media capabilities reported in the StationCapabilitiesRes message by the device during registration. The device will automatically attempt to register again. If this alarm occurs again, manually reset the device. If this alarm continues to occur after the manual reset, there may be a protocol error. This is applicable for SCCP protocol only. capabilityResponseTimeout: The CUCM timed out while waiting for the device to respond to a request to report its media capabilities. Possible causes include device power outage, network power outage, network configuration error, network delay, packet drops, and packet corruption. It is also possible to get this error if the CUCM node is experiencing high CPU usage. Verify that the device is powered up and operating. Verify that network connectivity exists between the device and CUCM, and verify that the CPU utilization is in the safe range. This is applicable for SCCP protocol only. securityMismatch: The CUCM detected a mismatch in the security settings of the device and/or the CUCM. The mismatches that can be detected are: 1) The device established a secure connection, yet reported that it does not have the ability to do authenticated signaling. 2) The device did not establish a secure connection, but the security mode configured for the device indicates that it should have done so. 3) The device established a secure connection, but the security mode configured for the device indicates that it should not have done so autoRegisterDBError: Auto-registration of a device failed for one of the following reasons: 1)Auto-registration is not allowed for the device type. 2)An error occurred while adding the auto-registering device to the database (stored procedure). dbAccessError: Device registration failed because of an error that occurred while building the station registration profile. This usually indicates a synchronization problem with the database. autoRegisterDBConfigTimeout: The CUCM timed out during auto-registration of a device. The registration profile of the device did not get inserted into the database in time. The device will automatically attempt to register again. This is applicable for SCCP protocol only. deviceTypeMismatch: The device type reported by the device does not match the device type configured on the CUCM addressingModeMismatch: The CUCM detected an error related to the addressing mode configured for the device. One of the following errors were detected: 1)The device is configured to use only IPv4 addressing, but did not specify an IPv4 address. 2)The device is configured to use only IPv6 addressing, but did not specify an IPv6 address. This is applicable for SCCP protocol only.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33))
    namedValues = NamedValues(("noError", 0), ("unknown", 1), ("noEntryInDatabase", 2), ("databaseConfigurationError", 3), ("deviceNameUnresolveable", 4), ("maxDevRegExceeded", 5), ("connectivityError", 6), ("initializationError", 7), ("deviceInitiatedReset", 8), ("callManagerReset", 9), ("authenticationError", 10), ("invalidX509NameInCertificate", 11), ("invalidTLSCipher", 12), ("directoryNumberMismatch", 13), ("malformedRegisterMsg", 14), ("protocolMismatch", 15), ("deviceNotActive", 16), ("authenticatedDeviceAlreadyExists", 17), ("obsoleteProtocolVersion", 18), ("databaseTimeout", 23), ("registrationSequenceError", 25), ("invalidCapabilities", 26), ("capabilityResponseTimeout", 27), ("securityMismatch", 28), ("autoRegisterDBError", 29), ("dbAccessError", 30), ("autoRegisterDBConfigTimeout", 31), ("deviceTypeMismatch", 32), ("addressingModeMismatch", 33))

class CcmDevUnregCauseCode(TextualConvention, Integer32):
    description = 'This syntax is used as means of identifying the reasons for a device getting unregistered. The scope of this enumeration can expand to comply with RFC 2578. noError: No Error unknown: Unknown error cause noEntryInDatabase: Device not configured properly in the CUCM database databaseConfigurationError: Device configuration error in the CUCM database deviceNameUnresolveable: The CallManager is unable to resolve the device name to an IP Address internally maxDevRegExceeded: Maximum number of device registrations have been reached connectivityError: CallManager is unable to establish communication with the device during registration initializationError: Indicates an error occurred when the CallManager tries to initialize the device deviceInitiatedReset: Indicates that the error was due to device initiated reset callManagerReset: Indicates that the error was due to call manager reset. deviceUnregistered: DeviceUnregistered. malformedRegisterMsg: Indicates that SIP device attempted to register with CallManager, but the REGISTER message contained formatting errors. sccpDeviceThrottling: The indicated SCCP device exceeded the maximum number of events allowed per-SCCP device. keepAliveTimeout: A KeepAlive message was not received. Possible causes include device power outage, network power outage, network configuration error, network delay,packet drops, packet corruption and CUCM node experiencing high CPU usage. configurationMismatch: The configuration on the SIP device does not match the configuration in CUCM. callManagerRestart: A device restart was initiated from CUCM Administration, either due to an explicit command from an administrator or due to a configuration change such as adding, deleting or changing a directory number associated with the device. duplicateRegistration: CUCM detected that the device attempted to register to two nodes at the same time. CUCM initiated a restart to the phone to force it to re-home to a single node. callManagerApplyConfig: CUCM configuration is changed. deviceNoResponse: Device is not responding Service Control Notify from CUCM. emLoginLogout: The device has been unregistered due to an Extension Mobility login or logout. emccLoginLogout: The device has been unregistered due to an Extension Mobility Cross Cluster login or logout. powerSavePlus: The device powered off as a result of the Power Save Plus feature that is enabled for this device. When the device powers off, it remains unregistered from CUCM until the Phone On Time defined in the Product Specific Configuration for this device. callManagerForcedRestart: The device did not respond to an Apply Config request and as a result, CUCM had sent a restart request to the device. The device may be offline due to a power outage or network problem. Confirm that the device is powered-up and that network connectivity exists between the device and CUCM. This is applicable for SIP protocol only. sourceIPAddrChanged: The device has been unregistered because the IP address in the Contact header of the REGISTER message has changed. The device will be automatically re-registered. No action is necessary. This is applicable for SIP protocol only. sourcePortChanged: The device has been unregistered because the port number in the Contact header of the REGISTER message has changed. The device will be automatically re-registered. No action is necessary. This is applicable for SIP protocol only. registrationSequenceError: A device requested configuration information from the CUCM at an unexpected time. The CUCM no longer had the requested information in memory. invalidCapabilities: The CUCM detected an error in the updated media capabilities reported by the device. The device reported the capabilities in one of the StationUpdateCapabilities message variants. This is applicable for SCCP protocol only. fallbackInitiated The device has initiated a fallback and will automatically re-register to a higher-priority CUCM. No action is necessary. deviceSwitch A second instance of an endpoint with the same device name has registered and assumed control. No action is necessary.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29))
    namedValues = NamedValues(("noError", 0), ("unknown", 1), ("noEntryInDatabase", 2), ("databaseConfigurationError", 3), ("deviceNameUnresolveable", 4), ("maxDevRegExceeded", 5), ("connectivityError", 6), ("initializationError", 7), ("deviceInitiatedReset", 8), ("callManagerReset", 9), ("deviceUnregistered", 10), ("malformedRegisterMsg", 11), ("sccpDeviceThrottling", 12), ("keepAliveTimeout", 13), ("configurationMismatch", 14), ("callManagerRestart", 15), ("duplicateRegistration", 16), ("callManagerApplyConfig", 17), ("deviceNoResponse", 18), ("emLoginLogout", 19), ("emccLoginLogout", 20), ("energywisePowerSavePlus", 21), ("callManagerForcedRestart", 22), ("sourceIPAddrChanged", 23), ("sourcePortChanged", 24), ("registrationSequenceError", 25), ("invalidCapabilities", 26), ("fallbackInitiated", 28), ("deviceSwitch", 29))

class CcmDeviceStatus(TextualConvention, Integer32):
    description = 'This syntax is used to identify the registration status of a device with the local call manager. unknown: The registration status of the device is unknown registered: The device has successfully registered with the local call manager unregistered: The device is no longer registered with the local call manager rejected: Registration request from the device was rejected by the local call manager. partiallyregistered: At least one but not all of the lines are successfully registered to the local call manager. Applicable only to SIP phones.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("registered", 2), ("unregistered", 3), ("rejected", 4), ("partiallyregistered", 5))

class CcmPhoneProtocolType(TextualConvention, Integer32):
    description = 'This syntax is used to identify the protocol between phone and Cisco Call Manager. unknown: The phone protocol is unknown sccp: The phone protocol is SCCP sip: The phone protocol is SIP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("sccp", 2), ("sip", 3))

class CcmDeviceLineStatus(TextualConvention, Integer32):
    description = 'This syntax is used to identify the registration status of a line of the device with the local call manager. unknown: The registration status of the device line is unknown registered: The device line has successfully registered with the local call manager unregistered: The device line is no longer registered with the local call manager rejected: Registration request from the device line was rejected by the local call manager.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("registered", 2), ("unregistered", 3), ("rejected", 4))

class CcmSIPTransportProtocolType(TextualConvention, Integer32):
    description = 'This textual convention defines the possible transport protocol types which are used for setting up SIP calls unknown: The SIP Trunk transport type is unknown tcp: The SIP Trunk transport type is tcp udp: The SIP Trunk transport type is udp tcpAndUdp: The SIP Trunk transport type is tcp and udp. Applicable only for InTransportProtocolType. tls: The SIP Trunk transport type is tls.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("tcp", 2), ("udp", 3), ("tcpAndUdp", 4), ("tls", 5))

class CcmDeviceProductId(TextualConvention, Integer32):
    description = 'This syntax is used to identify the product id of a device. gwyCiscoCat6KT1(1): Cisco Catalyst 6000 T1 VoIP Gateway gwyCiscoCat6KE1(2): Cisco Catalyst 6000 E1 VoIP Gateway gwyCiscoCat6KFXS(3): Cisco Catalyst 6000 24 Port FXS Gateway gwyCiscoCat6KFXO(4): Cisco Catalyst 6000 12 Port FXO Gateway gwyCiscoDT24Plus(7): Cisco DT-24+ Gateway gwyCiscoDT30Plus(8): Cisco DT-30+ Gateway gwyCiscoDT24(9): Cisco DT-24 Gateway gwyCiscoAT2(10): Cisco AT2 Gateway gwyCiscoAT4(11): Cisco AT4 Gateway gwyCiscoAT8(12): Cisco AT8 Gateway gwyCiscoAS2(13): Cisco AS2 Gateway gwyCiscoAS4(14): Cisco AS4 Gateway gwyCiscoAS8(15): Cisco AS8 Gateway gwyCiscoMGCPFXOPort(18): Cisco MGCP FXO Port gwyCiscoMGCPFXSPort(19): Cisco MGCP FXS Port gwyCiscoVG200(43): Cisco VG200 gwyCisco26XX(44): Cisco 26XX gwyCisco362X(45): Cisco 362X gwyCisco364X(46): Cisco 364X gwyCisco366X(47): Cisco 366X gwyCiscoMGCPT1Port(52): Cisco MGCP T1 Port gwyCiscoMGCPE1Port(55): Cisco MGCP E1 Port gwyCiscoCat4224VoiceGwySwitch(58): Cisco CAT 4224 Voice Gateway Switch gwyCiscoCat4000AccessGwyModule(59): Cisco CAT 4000 Access Gateway Module gwyCiscoIAD2400(62): Cisco IAD2400 gwyCiscoVGCEndPoint(65): Cisco VGC PHONE gwyCiscoVG224AndV248(66): Cisco VGC Gateway gwyCiscoSlotVGCPort(67): Cisco VGC Port gwyciscoVGCBox(68): Cisco VGC Box gwyCiscoATA186(69): Cisco ATA 186 gwyCiscoICS77XXMRP2XX(70): Cisco ICS77XX-MRP2XX gwyCiscoICS77XXASI81(71): Cisco ICS77XX-ASI81 gwyCiscoICS77XXASI160(72): Cisco ICS77XX-ASI160 gwyCiscoCat6000AVVIDServModule(80): Cisco Catalyst 6000 AVVID Services Module gwyCiscoWSX6600(81): Cisco WS-X6600 gwyCiscoMGCPBRIPort(90): Cisco MGCP BRI Port gwyCiscoWSSVCCMMMS(10001): Cisco WS-SVC-CMM-MS gwyCisco3745(20000): Cisco 3745 gwyCisco3725(20002): Cisco 3725 gwyCiscoICS77XXMRP3XX(30004): Cisco ICS77XX MRP3XX gwyCiscoICS77XXMRP38FXS(30005): Cisco ICS77XX MRP3 8FXS gwyCiscoICS77XXMRP316FXS(30006): Cisco ICS77XX MRP3 16FXS gwyCiscoICS77XXMRP38FXOM1(30007): Cisco ICS77XX MRP3 8FXO M1 gwyCisco269X(30011): Cisco 269X gwyCisco1760(30019): Cisco 1760 gwyCisco1751(30020): Cisco 1751 h323Phone(16): H323 Phone h323Trunk(17): H323 Trunk h323AnonymousGateway(49): H323 Anonymous Gateway h323H225GKControlledTrunk(75): H225 Trunk Gatekeeper Controlled h323ICTGKControlled(76): Inter-Cluster Trunk Gatekeeper Controlled h323ICTNonGKControlled(77): Inter-Cluster Trunk Non-Gatekeeper Controlled voiceMailUOnePort(27): Uone Port sipTrunk(95): SIP Trunk unknown(-1): Unknown Device Product Id other(-2): Unidentified Device Product Id.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-2, -1, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 43, 44, 45, 46, 47, 49, 52, 55, 58, 59, 62, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 80, 81, 90, 95, 10001, 20000, 20002, 30004, 30005, 30006, 30007, 30011, 30019, 30020))
    namedValues = NamedValues(("other", -2), ("unknown", -1), ("gwyCiscoCat6KT1", 1), ("gwyCiscoCat6KE1", 2), ("gwyCiscoCat6KFXS", 3), ("gwyCiscoCat6KFXO", 4), ("gwyCiscoDT24Plus", 7), ("gwyCiscoDT30Plus", 8), ("gwyCiscoDT24", 9), ("gwyCiscoAT2", 10), ("gwyCiscoAT4", 11), ("gwyCiscoAT8", 12), ("gwyCiscoAS2", 13), ("gwyCiscoAS4", 14), ("gwyCiscoAS8", 15), ("h323Phone", 16), ("h323Trunk", 17), ("gwyCiscoMGCPFXOPort", 18), ("gwyCiscoMGCPFXSPort", 19), ("voiceMailUOnePort", 27), ("gwyCiscoVG200", 43), ("gwyCisco26XX", 44), ("gwyCisco362X", 45), ("gwyCisco364X", 46), ("gwyCisco366X", 47), ("h323AnonymousGatewy", 49), ("gwyCiscoMGCPT1Port", 52), ("gwyCiscoMGCPE1Port", 55), ("gwyCiscoCat4224VoiceGwySwitch", 58), ("gwyCiscoCat4000AccessGwyModule", 59), ("gwyCiscoIAD2400", 62), ("gwyCiscoVGCEndPoint", 65), ("gwyCiscoVG224AndV248", 66), ("gwyCiscoSlotVGCPort", 67), ("gwyCiscoVGCBox", 68), ("gwyCiscoATA186", 69), ("gwyCiscoICS77XXMRP2XX", 70), ("gwyCiscoICS77XXASI81", 71), ("gwyCiscoICS77XXASI160", 72), ("h323H225GKControlledTrunk", 75), ("h323ICTGKControlled", 76), ("h323ICTNonGKControlled", 77), ("gwyCiscoCat6000AVVIDServModule", 80), ("gwyCiscoWSX6600", 81), ("gwyCiscoMGCPBRIPort", 90), ("sipTrunk", 95), ("gwyCiscoWSSVCCMMMS", 10001), ("gwyCisco3745", 20000), ("gwyCisco3725", 20002), ("gwyCiscoICS77XXMRP3XX", 30004), ("gwyCiscoICS77XXMRP38FXS", 30005), ("gwyCiscoICS77XXMRP316FXS", 30006), ("gwyCiscoICS77XXMRP38FXOM1", 30007), ("gwyCisco269X", 30011), ("gwyCisco1760", 30019), ("gwyCisco1751", 30020))

ciscoCcmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1))
ccmGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1))
ccmPhoneInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2))
ccmGatewayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3))
ccmGatewayTrunkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 4))
ccmGlobalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5))
ccmMediaDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6))
ccmGatekeeperInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7))
ccmCTIDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8))
ccmAlarmConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 9))
ccmNotificationsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10))
ccmH323DeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11))
ccmVoiceMailDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12))
ccmQualityReportAlarmConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 13))
ccmSIPDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14))
ccmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 1), )
if mibBuilder.loadTexts: ccmGroupTable.setStatus('current')
if mibBuilder.loadTexts: ccmGroupTable.setDescription('The table containing the CallManager groups in a call manager cluster.')
ccmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmGroupIndex"))
if mibBuilder.loadTexts: ccmGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ccmGroupEntry.setDescription('An entry (conceptual row) in the CallManager Group table, containing the information about a CallManager group in a call manager cluster. An entry is created to represent a CallManager Group. New entries to the CallManager Group table in the database are created when the User inserts a new CallManager Group via the CallManager Web Admin pages. This entry is subsequently picked up by the CUCM SNMP Agent.')
ccmGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmGroupIndex.setStatus('current')
if mibBuilder.loadTexts: ccmGroupIndex.setDescription('An arbitrary integer, selected by the local CUCM which uniquely identifies a CallManager Group.')
ccmGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGroupName.setStatus('current')
if mibBuilder.loadTexts: ccmGroupName.setDescription('The name of the CallManager Group.')
ccmGroupTftpDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGroupTftpDefault.setStatus('current')
if mibBuilder.loadTexts: ccmGroupTftpDefault.setDescription('Whether this is the default TFTP server group or not.')
ccmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2), )
if mibBuilder.loadTexts: ccmTable.setStatus('current')
if mibBuilder.loadTexts: ccmTable.setDescription('The table containing information of all the CUCMs in a CUCM cluster that the local CUCM knows about. When the local CUCM is restarted, this table will be refreshed.')
ccmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmIndex"))
if mibBuilder.loadTexts: ccmEntry.setStatus('current')
if mibBuilder.loadTexts: ccmEntry.setDescription('An entry (conceptual row) in the CallManager table, containing the information about a CallManager.')
ccmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmIndex.setStatus('current')
if mibBuilder.loadTexts: ccmIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a CallManager in a call manager cluster.')
ccmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmName.setStatus('current')
if mibBuilder.loadTexts: ccmName.setDescription('The host name of the CallManager.')
ccmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmDescription.setStatus('current')
if mibBuilder.loadTexts: ccmDescription.setDescription('The description for the CallManager.')
ccmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVersion.setStatus('current')
if mibBuilder.loadTexts: ccmVersion.setDescription('The version number of the CallManager software.')
ccmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmStatus.setStatus('current')
if mibBuilder.loadTexts: ccmStatus.setDescription('The current status of the CallManager. A CallManager is up if the SNMP Agent received a system up event from the local CUCM unknown: Current status of the CallManager is Unknown up: CallManager is running & is able to communicate with other CallManagers down: CallManager is down or the Agent is unable to communicate with the local CallManager.')
ccmInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmInetAddressType.setDescription('This object identifies IP address type of the Cisco Call Manager defined in ccmInetAddress.')
ccmInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmInetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmInetAddress.setDescription('This object identifies IP address of the Cisco Call Manager. The type of address for this is identified by ccmInetAddressType.')
ccmClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmClusterId.setStatus('current')
if mibBuilder.loadTexts: ccmClusterId.setDescription('The unique ID of the Cluster to which this CallManager belongs. At any point in time, the Cluster Id helps in associating a CallManager to any given Cluster.')
ccmInetAddress2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmInetAddress2Type.setStatus('current')
if mibBuilder.loadTexts: ccmInetAddress2Type.setDescription('This object identifies IP address type of the Cisco Unified Communications Manager defined in ccmInetAddress2.')
ccmInetAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 2, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmInetAddress2.setStatus('current')
if mibBuilder.loadTexts: ccmInetAddress2.setDescription('This object identifies the additional IP(v4/v6) address details of Cisco Unified Communications Manager. The type of address for this object is identified by ccmInetAddress2Type.')
ccmGroupMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 3), )
if mibBuilder.loadTexts: ccmGroupMappingTable.setStatus('current')
if mibBuilder.loadTexts: ccmGroupMappingTable.setDescription('The table containing the list of all CallManager to group mappings in a call manager cluster. When the local call manager is down, this table will be empty.')
ccmGroupMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmGroupIndex"), (0, "CISCO-CCM-MIB", "ccmIndex"))
if mibBuilder.loadTexts: ccmGroupMappingEntry.setStatus('current')
if mibBuilder.loadTexts: ccmGroupMappingEntry.setDescription('An entry (conceptual row) in the CallManager group Mapping table, containing the information about a mapping between a CallManager and a CallManager group.')
ccmCMGroupMappingCMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCMGroupMappingCMPriority.setStatus('current')
if mibBuilder.loadTexts: ccmCMGroupMappingCMPriority.setDescription('The priority of the CallManager in the group. Sets the order of the CallManager in the list.')
ccmRegionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 4), )
if mibBuilder.loadTexts: ccmRegionTable.setStatus('current')
if mibBuilder.loadTexts: ccmRegionTable.setDescription('The table containing the list of all geographically separated regions in a CCN system.')
ccmRegionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmRegionIndex"))
if mibBuilder.loadTexts: ccmRegionEntry.setStatus('current')
if mibBuilder.loadTexts: ccmRegionEntry.setDescription('An entry (conceptual row) in the Region Table, containing the information about a region.')
ccmRegionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 4, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmRegionIndex.setStatus('current')
if mibBuilder.loadTexts: ccmRegionIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a Region Name in the table.')
ccmRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRegionName.setStatus('current')
if mibBuilder.loadTexts: ccmRegionName.setDescription('The name of the CallManager region.')
ccmRegionPairTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 5), )
if mibBuilder.loadTexts: ccmRegionPairTable.setStatus('current')
if mibBuilder.loadTexts: ccmRegionPairTable.setDescription('The table containing the list of all geographical region pairs defined for a call manager cluster. The pair consists of the Source region and Destination region.')
ccmRegionPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmRegionSrcIndex"), (0, "CISCO-CCM-MIB", "ccmRegionDestIndex"))
if mibBuilder.loadTexts: ccmRegionPairEntry.setStatus('current')
if mibBuilder.loadTexts: ccmRegionPairEntry.setDescription('An entry (conceptual row) in the Region Pair Table, containing the information about bandwidth restrictions when communicating between the two specified regions.')
ccmRegionSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 5, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmRegionSrcIndex.setStatus('current')
if mibBuilder.loadTexts: ccmRegionSrcIndex.setDescription('The index of the Source Region in the Region table.')
ccmRegionDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 5, 1, 2), CcmIndex())
if mibBuilder.loadTexts: ccmRegionDestIndex.setStatus('current')
if mibBuilder.loadTexts: ccmRegionDestIndex.setDescription('The index of the Destination Region in the Region table.')
ccmRegionAvailableBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("bwG723", 3), ("bwG729", 4), ("bwG711", 5), ("bwGSM", 6), ("bwWideband", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRegionAvailableBandWidth.setStatus('current')
if mibBuilder.loadTexts: ccmRegionAvailableBandWidth.setDescription('The maximum available bandwidth between the two given regions. unknown: Unknown Bandwidth other: Unidentified Bandwidth bwG723: For low bandwidth using G.723 codec bwG729: For low bandwidth using G.729 codec bwG711: For high bandwidth using G.711 codec bwGSM: For GSM bandwidth 13K bwWideband: For Wideband 256K.')
ccmTimeZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 6), )
if mibBuilder.loadTexts: ccmTimeZoneTable.setStatus('current')
if mibBuilder.loadTexts: ccmTimeZoneTable.setDescription('The table containing the list of all time zone groups in a call manager cluster.')
ccmTimeZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmTimeZoneIndex"))
if mibBuilder.loadTexts: ccmTimeZoneEntry.setStatus('current')
if mibBuilder.loadTexts: ccmTimeZoneEntry.setDescription('An entry (conceptual row) in the time zone Table, containing the information about a particular time zone group.')
ccmTimeZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 6, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmTimeZoneIndex.setStatus('current')
if mibBuilder.loadTexts: ccmTimeZoneIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a Time Zone group entry in the table.')
ccmTimeZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: ccmTimeZoneName.setDescription('The name of the time zone group.')
ccmTimeZoneOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmTimeZoneOffset.setStatus('obsolete')
if mibBuilder.loadTexts: ccmTimeZoneOffset.setDescription("The offset of the time zone group's time zone from GMT.")
ccmTimeZoneOffsetHours = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmTimeZoneOffsetHours.setStatus('current')
if mibBuilder.loadTexts: ccmTimeZoneOffsetHours.setDescription("The offset hours of the time zone group's time zone from GMT.")
ccmTimeZoneOffsetMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-59, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmTimeZoneOffsetMinutes.setStatus('current')
if mibBuilder.loadTexts: ccmTimeZoneOffsetMinutes.setDescription("The offset minutes of the time zone group's time zone from GMT.")
ccmDevicePoolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 7), )
if mibBuilder.loadTexts: ccmDevicePoolTable.setStatus('current')
if mibBuilder.loadTexts: ccmDevicePoolTable.setDescription('The table containing the list of all device pools in a call manager cluster. A Device Pool contains Region, Date/Time Group and CallManager Group criteria that will be common among many devices.')
ccmDevicePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmDevicePoolIndex"))
if mibBuilder.loadTexts: ccmDevicePoolEntry.setStatus('current')
if mibBuilder.loadTexts: ccmDevicePoolEntry.setDescription('An entry (conceptual row) in the device pool Table, containing the information about a particular device pool.')
ccmDevicePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 7, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmDevicePoolIndex.setStatus('current')
if mibBuilder.loadTexts: ccmDevicePoolIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a Device Pool entry in the table. Each entry contains Region, Date/Time Group and CallManager Group criteria that will be common among many devices, for that entry.')
ccmDevicePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmDevicePoolName.setStatus('current')
if mibBuilder.loadTexts: ccmDevicePoolName.setDescription('The name of the device pool.')
ccmDevicePoolRegionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 7, 1, 3), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmDevicePoolRegionIndex.setStatus('current')
if mibBuilder.loadTexts: ccmDevicePoolRegionIndex.setDescription('A positive value of this index is used to identify the Region to which this Device Pool entry belongs. A value of 0 indicates that the index to the Region table is Unknown.')
ccmDevicePoolTimeZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 7, 1, 4), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmDevicePoolTimeZoneIndex.setStatus('current')
if mibBuilder.loadTexts: ccmDevicePoolTimeZoneIndex.setDescription('A positive value of this index is used to identify the TimeZone to which this Device Pool entry belongs. A value of 0 indicates that the index to the TimeZone table is Unknown.')
ccmDevicePoolGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 7, 1, 5), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmDevicePoolGroupIndex.setStatus('current')
if mibBuilder.loadTexts: ccmDevicePoolGroupIndex.setDescription('A positive value of this index is used to identify the CallManager Group to which this Device Pool entry belongs. A value of 0 indicates that the index to the CallManager Group table is Unknown.')
ccmProductTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 8), )
if mibBuilder.loadTexts: ccmProductTypeTable.setStatus('current')
if mibBuilder.loadTexts: ccmProductTypeTable.setDescription('The table containing the list of product types supported in a call manager cluster. The product types will include the list of phone types, gateway types, media device types, H323 device types, CTI device types, Voice Messaging device types and SIP device types.')
ccmProductTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 8, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmProductTypeIndex"))
if mibBuilder.loadTexts: ccmProductTypeEntry.setStatus('current')
if mibBuilder.loadTexts: ccmProductTypeEntry.setDescription('An entry (conceptual row) in the ccmProductTypeTable, containing the information about a product type supported in a call manager cluster. An entry is created to represent a product type.')
ccmProductTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 8, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmProductTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmProductTypeIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies an entry in the ccmProductTypeTable.')
ccmProductType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmProductType.setStatus('current')
if mibBuilder.loadTexts: ccmProductType.setDescription('The type of the product as defined in the CUCM database.')
ccmProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmProductName.setStatus('current')
if mibBuilder.loadTexts: ccmProductName.setDescription('The name of the product as defined in the CUCM database.')
ccmProductCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", -1), ("notApplicable", 0), ("phone", 1), ("gateway", 2), ("h323Device", 3), ("ctiDevice", 4), ("voiceMailDevice", 5), ("mediaResourceDevice", 6), ("huntListDevice", 7), ("sipDevice", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmProductCategory.setStatus('current')
if mibBuilder.loadTexts: ccmProductCategory.setDescription('The category of the product. unknown: Unknown product category notApplicable: Not Applicable phone: Phone gateway: Gateway h323Device: H323 Device ctiDevice: CTI Device voiceMailDevice: Voice Messaging Device mediaResourceDevice: Media Resource Device huntListDevice: Hunt List Device sipDevice: SIP Device.')
ccmPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1), )
if mibBuilder.loadTexts: ccmPhoneTable.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneTable.setDescription('The table containing the list of all IP Phone devices which have tried to register with the local CUCM at least once. When the local CUCM is restarted, this table will be refreshed.')
ccmPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmPhoneIndex"))
if mibBuilder.loadTexts: ccmPhoneEntry.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneEntry.setDescription('An entry (conceptual row) in the phone Table, containing information about a particular phone device.')
ccmPhoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmPhoneIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a Phone within the CallManager.')
ccmPhonePhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhonePhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: ccmPhonePhysicalAddress.setDescription('The physical address(MAC address) of the IP phone.')
ccmPhoneType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("cisco30SPplus", 3), ("cisco12SPplus", 4), ("cisco12SP", 5), ("cisco12S", 6), ("cisco30VIP", 7), ("ciscoTeleCasterBid", 8), ("ciscoTeleCasterMgr", 9), ("ciscoTeleCasterBusiness", 10), ("ciscoSoftPhone", 11), ("ciscoConferencePhone", 12), ("cisco7902", 13), ("cisco7905", 14), ("cisco7912", 15), ("cisco7970", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneType.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneType.setDescription('The type of the phone device. unknown: Unknown phone type other: Unidentified phone type cisco30SPplus: IP Phone 30 SP+ cisco12SPplus: IP Phone 12 SP+ cisco12SP: IP Phone 12 SP cisco12S: IP Phone 12 S cisco30VIP: IP Phone 30 VIP ciscoTeleCasterBid: IP Phone Telecaster 7910 ciscoTeleCasterMgr: IP Phone Telecaster 7960 ciscoTeleCasterBusiness: IP Phone Telecaster 7940 ciscoSoftPhone: Softphone ciscoConferencePhone: IP Conference Station 7935 cisco7902: IP Phone 7902 cisco7905: IP Phone 7905 cisco7912: IP Phone 7912 cisco7970: IP Phone 7970.')
ccmPhoneDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneDescription.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneDescription.setDescription('The description about the phone itself.')
ccmPhoneUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneUserName.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneUserName.setDescription('The name of the user of the phone. When the phone is not in use, the name would refer to the last known user of the phone.')
ccmPhoneIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneIpAddress.setDescription('The last known IP address of the phone.')
ccmPhoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 7), CcmDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatus.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatus.setDescription('The status of the phone. The status of the Phone changes from Unknown to registered when it registers itself with the local CUCM.')
ccmPhoneTimeLastRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneTimeLastRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneTimeLastRegistered.setDescription('The time when the phone last registered with the CallManager.')
ccmPhoneE911Location = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneE911Location.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneE911Location.setDescription('The E911 location of the phone.')
ccmPhoneLoadID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneLoadID.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneLoadID.setDescription('This object identifies the configured load ID for the phone device.')
ccmPhoneLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneLastError.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneLastError.setDescription('A positive value or 0 indicates the last error reported by the phone. A value of -1 indicates that the last error reported is Unknown.')
ccmPhoneTimeLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneTimeLastError.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneTimeLastError.setDescription('The amount of time elapsed since the last phone error occurred. The reference point for this time is the time the last error occurred, as reported by the local CUCM.')
ccmPhoneDevicePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 13), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneDevicePoolIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneDevicePoolIndex.setDescription('A positive value of this index is used to identify the Device Pool to which this Phone entry belongs. A value of 0 indicates that the index to the Device Pool table is Unknown.')
ccmPhoneInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneInetAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneInetAddressType.setDescription('This object identifies the IP address type of the phone.')
ccmPhoneInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneInetAddress.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneInetAddress.setDescription('This object identifies the last known IP address of the phone. The type of address for this is identified by ccmPhoneInetAddressType.')
ccmPhoneStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 16), CcmDevFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneStatusReason.setDescription('The reason code associated with the phone status change.')
ccmPhoneTimeLastStatusUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneTimeLastStatusUpdt.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneTimeLastStatusUpdt.setDescription('The time the status of the phone changed.')
ccmPhoneProductTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 18), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneProductTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneProductTypeIndex.setDescription('A positive value of this index is used to identify the related product type entry in the ccmProductTypeTable. A value of 0 indicates that the index to the ccmProductTypeTable is Unknown.')
ccmPhoneProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 19), CcmPhoneProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneProtocol.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneProtocol.setDescription('The protocol used between the phone and Cisco Call Manager.')
ccmPhoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneName.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneName.setDescription('The name of the phone. The name of the phone can be <prefix> + MAC Address, where <prefix> is SEP for Cisco SCCP and SIP Phones. In the case of other phones such as communicator (soft phone) it can be free-form name, a string which uniquely identifies the phone.')
ccmPhoneInetAddressIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 21), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneInetAddressIPv4.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneInetAddressIPv4.setDescription('This object identifies the last known primary IPv4 address of the Phone Device. This object contains value zero if IPV4 address is not available.')
ccmPhoneInetAddressIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 22), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneInetAddressIPv6.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneInetAddressIPv6.setDescription('This object identifies the last known primary IPv6 address of the Phone device. This object contains value zero if IPV6 address is not available')
ccmPhoneIPv4Attribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("adminOnly", 1), ("controlOnly", 2), ("adminAndControl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneIPv4Attribute.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneIPv4Attribute.setDescription('This object identifies the scope of ccmPhoneInetAddressIPv4. unknown(0): It is not known if ccmPhoneInetAddressIPv4 is used for Administration purpose or Controlling purpose. adminOnly(1): ccmPhoneInetAddressIPv4 is used for the serviceability/administrative purpose. controlOnly(2): ccmPhoneInetAddressIPv4 is used for signaling/registration purpose. adminAndControl(3): ccmPhoneInetAddressIPv4 is used for controlling as well as administrative purpose.')
ccmPhoneIPv6Attribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("adminOnly", 1), ("controlOnly", 2), ("adminAndControl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneIPv6Attribute.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneIPv6Attribute.setDescription('This object identifies the scope of ccmPhoneInetAddressIPv6. unknown(0): It is not known if ccmPhoneInetAddressIPv6 is used for Administration purpose or Controlling purpose. adminOnly(1): ccmPhoneInetAddressIPv6 is used for the serviceability/administrative purpose. controlOnly(2): ccmPhoneInetAddressIPv6 is used for signaling/registration purpose. adminAndControl(3):ccmPhoneInetAddressIPv6 is used for controlling as well as administrative purpose.')
ccmPhoneActiveLoadID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneActiveLoadID.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneActiveLoadID.setDescription('This object identifies the ID of actual load that is successfully loaded and running on the phone device. If the phone is successfully upgraded to the new load then ccmPhoneLoadID and ccmPhoneActiveLoadID will have same value. If the upgrade fails then the ccmPhoneLoadID has the configured load ID and ccmPhoneActiveLoadID has the actual load ID that is running on the phone.')
ccmPhoneUnregReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 26), CcmDevUnregCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneUnregReason.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneUnregReason.setDescription('The reason code associated with unregistered phone.')
ccmPhoneRegFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 1, 1, 27), CcmDevRegFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneRegFailReason.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneRegFailReason.setDescription('The reason code associated with registration failed phone.')
ccmPhoneExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 2), )
if mibBuilder.loadTexts: ccmPhoneExtensionTable.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneExtensionTable.setDescription('The table containing the list of all phone extensions associated with the registered and unregistered phones in the ccmPhoneTable.')
ccmPhoneExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmPhoneExtensionIndex"))
if mibBuilder.loadTexts: ccmPhoneExtensionEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneExtensionEntry.setDescription('An entry (conceptual row) in the phone extension Table, containing the information about a particular phone extension.')
ccmPhoneExtensionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 2, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmPhoneExtensionIndex.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneExtensionIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a Phone Extension within the CallManager.')
ccmPhoneExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtension.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneExtension.setDescription('The extension number of the extension.')
ccmPhoneExtensionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtensionIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneExtensionIpAddress.setDescription('The IP address of the extension.')
ccmPhoneExtensionMultiLines = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtensionMultiLines.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneExtensionMultiLines.setDescription('The number of multiline appearances for each phone extension.')
ccmPhoneExtensionInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtensionInetAddressType.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneExtensionInetAddressType.setDescription('Represents the type of address stored in ccmPhoneExtensionInetAddress.')
ccmPhoneExtensionInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtensionInetAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneExtensionInetAddress.setDescription('The IP address of the extension.')
ccmPhoneFailedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3), )
if mibBuilder.loadTexts: ccmPhoneFailedTable.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedTable.setDescription('The table containing the list of all phones which attempted to register with the local call manager and failed. The entries which have not been updated and kept at least for the duration specified in the ccmPhoneFailedStorePeriod will be deleted. Reasons for these failures could be due to configuration error, maximum number of phones has been reached, lost contact, etc.')
ccmPhoneFailedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmPhoneFailedIndex"))
if mibBuilder.loadTexts: ccmPhoneFailedEntry.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedEntry.setDescription('An entry (conceptual row) in the PhoneFailed Table, one for each phone failure in the CUCM.')
ccmPhoneFailedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmPhoneFailedIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedIndex.setDescription('An arbitrary integer, selected by the local CUCM, which is incremented with each new entry in the ccmPhoneFailedTable. This integer value will wrap if needed.')
ccmPhoneFailedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedTime.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedTime.setDescription('The time when the phone failed to register with the CallManager.')
ccmPhoneFailedName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedName.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneFailedName.setDescription("The name assigned to the phone when it is added to the CallManager. It contains an ASCII form of the phone's MAC Address.")
ccmPhoneFailedInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedInetAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneFailedInetAddressType.setDescription("This object identifies the IP address type of the phone that is experiencing communication failure. The value of this object is 'unknown(0)' if the IP address of a phone is not available.")
ccmPhoneFailedInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedInetAddress.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneFailedInetAddress.setDescription('This object identifies the last known IP address of the phone experiencing a communication failure. If the IP address of a device is not available then this object contains an empty string. The type of address for this is identified by ccmPhoneFailedInetAddressType')
ccmPhoneFailCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 6), CcmDevFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailCauseCode.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneFailCauseCode.setDescription('States the reason for the phone device communication error.')
ccmPhoneFailedMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedMacAddress.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedMacAddress.setDescription('The MAC address of the failed phone.')
ccmPhoneFailedInetAddressIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 8), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedInetAddressIPv4.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedInetAddressIPv4.setDescription('This object identifies the last known primary IPv4 address of the phone experiencing a communication failure. This object contains value zero if IPV4 address is not available.')
ccmPhoneFailedInetAddressIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 9), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedInetAddressIPv6.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedInetAddressIPv6.setDescription('This object identifies the last known primary IPv6 address of the phone experiencing a communication failure. This object contains value zero if IPV6 address is not available.')
ccmPhoneFailedIPv4Attribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("adminOnly", 1), ("controlOnly", 2), ("adminAndControl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedIPv4Attribute.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedIPv4Attribute.setDescription('This object identifies the scope of ccmPhoneFailedInetAddressIPv4. unknown(0):It is not known if ccmPhoneFailedInetAddressIPv4 is used for Administration purpose or Controlling purpose. adminOnly(1): ccmPhoneFailedInetAddressIPv4 is used for the serviceability/administrative purpose. controlOnly(2): ccmPhoneFailedInetAddressIPv4 is used for signaling/registration purpose. adminAndControl(3): ccmPhoneFailedInetAddressIPv4 is used for controlling as well as administrative purpose.')
ccmPhoneFailedIPv6Attribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("adminOnly", 1), ("controlOnly", 2), ("adminAndControl", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedIPv6Attribute.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedIPv6Attribute.setDescription('This object identifies the scope of ccmPhoneFailedInetAddressIPv6. unknown(0):It is not known if ccmPhoneFailedInetAddressIPv6 is used for Administration purpose or Controlling purpose. adminOnly(1): ccmPhoneFailedInetAddressIPv6 is used for the serviceability/administrative purpose. controlOnly(2): ccmPhoneFailedInetAddressIPv6 is used for signaling/registration purpose. adminAndControl(3): ccmPhoneFailedInetAddressIPv6 is used for controlling as well as administrative purpose.')
ccmPhoneFailedRegFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 3, 1, 12), CcmDevRegFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneFailedRegFailReason.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedRegFailReason.setDescription('The reason code associated with registration failed phone.')
ccmPhoneStatusUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4), )
if mibBuilder.loadTexts: ccmPhoneStatusUpdateTable.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateTable.setDescription('The table containing the list of all phone status updates with respect to the local call manager. This table will only have registered, unregistered, and partially-registered status updates. The rejected phones are stored in the ccmPhoneFailedTable. Each entry of this table is stored at least for the duration specified in the ccmPhoneStatusUpdateStorePeriod object, after that it will be deleted.')
ccmPhoneStatusUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmPhoneStatusUpdateIndex"))
if mibBuilder.loadTexts: ccmPhoneStatusUpdateEntry.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateEntry.setDescription('An entry (conceptual row) in the PhoneStatusUpdate Table, one for each phone status update in the CUCM.')
ccmPhoneStatusUpdateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmPhoneStatusUpdateIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateIndex.setDescription('An arbitrary integer, selected by the local CUCM, which is incremented with each new entry in the ccmPhoneStatusUpdateTable. This integer value will wrap if needed.')
ccmPhoneStatusPhoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4, 1, 2), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatusPhoneIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusPhoneIndex.setDescription('A positive value of this index is used to identify an entry in the ccmPhoneTable. A value of 0 indicates that the index to the ccmPhoneTable is Unknown.')
ccmPhoneStatusUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatusUpdateTime.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateTime.setDescription("The time of the phone's registration status change.")
ccmPhoneStatusUpdateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("phoneRegistered", 2), ("phoneUnregistered", 3), ("phonePartiallyregistered", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatusUpdateType.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateType.setDescription('States the type of phone status change. unknown: Unknown status phoneRegistered: Phone has registered with the Callmanager phoneUnregistered: Phone is no longer registered with the callmanager phonePartiallyregistered: Phone is partially registered with the callmanager.')
ccmPhoneStatusUpdateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4, 1, 5), CcmDevFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatusUpdateReason.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateReason.setDescription('The reason code associated with the phone status change.')
ccmPhoneStatusUnregReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4, 1, 6), CcmDevUnregCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatusUnregReason.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUnregReason.setDescription('The reason code associated with unregistered phone.')
ccmPhoneStatusRegFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 4, 1, 7), CcmDevRegFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatusRegFailReason.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusRegFailReason.setDescription('The reason code associated with registration failed phone.')
ccmPhoneExtnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 5), )
if mibBuilder.loadTexts: ccmPhoneExtnTable.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtnTable.setDescription('The table containing the list of all phone extensions associated with the registered and unregistered phones in the ccmPhoneTable. This table has combination index ccmPhoneIndex, ccmPhoneExtnIndex so the ccmPhoneTable and the ccmPhoneExtnTable entries can be related.')
ccmPhoneExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmPhoneIndex"), (0, "CISCO-CCM-MIB", "ccmPhoneExtnIndex"))
if mibBuilder.loadTexts: ccmPhoneExtnEntry.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtnEntry.setDescription('An entry (conceptual row) in the phone extension Table, containing the information about a particular phone extension.')
ccmPhoneExtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 5, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmPhoneExtnIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtnIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a Phone Extension within the CallManager.')
ccmPhoneExtn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtn.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtn.setDescription('The extension number of the extension.')
ccmPhoneExtnMultiLines = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtnMultiLines.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtnMultiLines.setDescription('The number of multiline appearances for each phone extension.')
ccmPhoneExtnInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtnInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtnInetAddressType.setDescription('This object identifies the IP address type of the phone extension.')
ccmPhoneExtnInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 5, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtnInetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtnInetAddress.setDescription('This object identifies the IP address of the phone extension. The type of address for this is identified by ccmPhoneExtnInetAddressType.')
ccmPhoneExtnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 2, 5, 1, 6), CcmDeviceLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtnStatus.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtnStatus.setDescription('Represents the status of this phone line.')
ccmGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1), )
if mibBuilder.loadTexts: ccmGatewayTable.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayTable.setDescription('The table containing the list of all gateway devices which have tried to register with the local CUCM at least once. When the local CUCM is restarted, this table will be refreshed.')
ccmGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmGatewayIndex"))
if mibBuilder.loadTexts: ccmGatewayEntry.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayEntry.setDescription('An entry (conceptual row) in the gateway Table, one for each gateway device in the CUCM.')
ccmGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmGatewayIndex.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a Gateway within the scope of the local call manager.')
ccmGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayName.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayName.setDescription('This is the Gateway name assigned to the Gateway in the CallManager. This name is assigned when a new device of type Gateway is added to the CallManager.')
ccmGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("ciscoAnalogAccess", 3), ("ciscoDigitalAccessPRI", 4), ("ciscoDigitalAccessT1", 5), ("ciscoDigitalAccessPRIPlus", 6), ("ciscoDigitalAccessWSX6608E1", 7), ("ciscoDigitalAccessWSX6608T1", 8), ("ciscoAnalogAccessWSX6624", 9), ("ciscoMGCPStation", 10), ("ciscoDigitalAccessE1Plus", 11), ("ciscoDigitalAccessT1Plus", 12), ("ciscoDigitalAccessWSX6608PRI", 13), ("ciscoAnalogAccessWSX6612", 14), ("ciscoMGCPTrunk", 15), ("ciscoVG200", 16), ("cisco26XX", 17), ("cisco362X", 18), ("cisco364X", 19), ("cisco366X", 20), ("ciscoCat4224VoiceGatewaySwitch", 21), ("ciscoCat4000AccessGatewayModule", 22), ("ciscoIAD2400", 23), ("ciscoVGCEndPoint", 24), ("ciscoVG224VG248Gateway", 25), ("ciscoVGCBox", 26), ("ciscoATA186", 27), ("ciscoICS77XXMRP2XX", 28), ("ciscoICS77XXASI81", 29), ("ciscoICS77XXASI160", 30), ("ciscoSlotVGCPort", 31), ("ciscoCat6000AVVIDServModule", 32), ("ciscoWSX6600", 33), ("ciscoWSSVCCMMMS", 34), ("cisco3745", 35), ("cisco3725", 36), ("ciscoICS77XXMRP3XX", 37), ("ciscoICS77XXMRP38FXS", 38), ("ciscoICS77XXMRP316FXS", 39), ("ciscoICS77XXMRP38FXOM1", 40), ("cisco269X", 41), ("cisco1760", 42), ("cisco1751", 43), ("ciscoMGCPBRIPort", 44)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayType.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayType.setDescription('The type of the gateway device. unknown(1): Unknown Gateway type other(2): Unidentified Gateway type ciscoAnalogAccess(3): Analog Access ciscoDigitalAccessPRI(4): Digital Access PRI ciscoDigitalAccessT1(5): Digital Access T1 ciscoDigitalAccessPRIPlus(6): Digital Access PRI Plus ciscoDigitalAccessWSX6608E1(7): Cat 6000 Digital Access E1 ciscoDigitalAccessWSX6608T1(8): Cat 6000 Digital Access T1 ciscoAnalogAccessWSX6624(9): Cat 6000 Analog Access FXS ciscoMGCPStation(10): MGCP Gateway ciscoDigitalAccessE1Plus(11): Digital Access E1 Plus ciscoDigitalAccessT1Plus(12): Digital Access T1 Plus ciscoDigitalAccessWSX6608PRI(13): Cat 6000 Digital Access PRI ciscoAnalogAccessWSX6612(14): Cat 6000 Analog Access FXO ciscoMGCPTrunk(15): MGCP Trunk ciscoVG200(16): VG200 cisco26XX(17): 26XX cisco362X(18): 362X cisco364X(19): 364X cisco366X(20): 366X ciscoCat4224VoiceGatewaySwitch(21): Cisco Catalyst 4224 Voice Gateway Switch ciscoCat4000AccessGatewayModule(22): Cisco Catalyst 4000 Access Gateway Module ciscoIAD2400(23): Cisco IAD2400 ciscoVGCEndPoint(24): Cisco VGC Phone ciscoVG224VG248Gateway(25): Cisco VGC Gateway ciscoVGCBox(26): Cisco VGC Box ciscoATA186(27): Cisco ATA 186 ciscoICS77XXMRP2XX(28): Cisco ICS77XX-MRP2XX ciscoICS77XXASI81(29): Cisco ICS77XX-ASI81 ciscoICS77XXASI160(30): Cisco ICS77XX-ASI160 ciscoSlotVGCPort(31): Cisco VGC Port ciscoCat6000AVVIDServModule(32): Cisco Catalyst 6000 AVVID Services Module ciscoWSX6600(33): WS-X6600 ciscoWSSVCCMMMS(34): Cisco WS-SVC-CMM-MS cisco3745(35): Cisco 3745 cisco3725(36): Cisco 3725 ciscoICS77XXMRP3XX(37): Cisco ICS77XX MRP3XX ciscoICS77XXMRP38FXS(38): Cisco ICS77XX MRP3 8FXS ciscoICS77XXMRP316FXS(39): Cisco ICS77XX MRP3 16FXS ciscoICS77XXMRP38FXOM1(40): Cisco ICS77XX MRP3 8FXO M1 cisco269X(41): Cisco 269X cisco1760(42): Cisco 1760 cisco1751(43): Cisco 1751 ciscoMGCPBRIPort(44) Cisco MGCP BRI Port.')
ccmGatewayDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayDescription.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayDescription.setDescription('The description attached to the gateway device.')
ccmGatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 5), CcmDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayStatus.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayStatus.setDescription('The status of the gateway. The Gateway status changes from Unknown to Registered when the Gateway registers itself with the local CUCM.')
ccmGatewayDevicePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 6), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayDevicePoolIndex.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayDevicePoolIndex.setDescription('A positive value of this index is used to identify the Device Pool to which this Gateway entry belongs. A value of 0 indicates that the index to the Device Pool table is Unknown.')
ccmGatewayInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayInetAddressType.setDescription("This object identifies the IP address type of the Gateway device. The value of this object is 'unknown(0)' if the IP address of a Gateway device is not available.")
ccmGatewayInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayInetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayInetAddress.setDescription('This object identifies last known IP Address of the gateway. If the IP address is not available then this object contains an empty string. The type of address for this is identified by ccmGatewayInetAddressType.')
ccmGatewayProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 9), CcmDeviceProductId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayProductId.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayProductId.setDescription('The product identifier of the gateway device.')
ccmGatewayStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 10), CcmDevFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ccmGatewayStatusReason.setDescription('The reason code associated with the gateway status change.')
ccmGatewayTimeLastStatusUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayTimeLastStatusUpdt.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayTimeLastStatusUpdt.setDescription('The time the status of the gateway changed.')
ccmGatewayTimeLastRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayTimeLastRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayTimeLastRegistered.setDescription('The time the gateway last registered with the call manager.')
ccmGatewayDChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inActive", 2), ("unknown", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayDChannelStatus.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayDChannelStatus.setDescription('The D-Channel status of the gateway. active(1): The D-Channel is up inActive(1): The D-Channel is down unknown(3): The D-Channel status is unknown notApplicable(4): The D-channel status is not applicable for this gateway.')
ccmGatewayDChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayDChannelNumber.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayDChannelNumber.setDescription('The D-Channel number of the gateway. A value of -1 in this field indicates that the DChannel number is not applicable for this gateway.')
ccmGatewayProductTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 15), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayProductTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayProductTypeIndex.setDescription('A positive value of this index is used to identify the related product type entry in the ccmProductTypeTable. A value of 0 indicates that the index to the ccmProductTypeTable is Unknown.')
ccmGatewayUnregReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 16), CcmDevUnregCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayUnregReason.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayUnregReason.setDescription('The reason code associated with unregistered gateway.')
ccmGatewayRegFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 3, 1, 1, 17), CcmDevRegFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayRegFailReason.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayRegFailReason.setDescription('The reason code associated with registration failed gateway.')
ccmGatewayTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 4, 1), )
if mibBuilder.loadTexts: ccmGatewayTrunkTable.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayTrunkTable.setDescription('The table containing the list of all gateway trunks in a CCN system. When the local CUCM is restarted, this table will be refreshed.')
ccmGatewayTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmGatewayTrunkIndex"))
if mibBuilder.loadTexts: ccmGatewayTrunkEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayTrunkEntry.setDescription('An entry (conceptual row) in the gateway trunk table, one for each gateway trunk in a CCN system.')
ccmGatewayTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 4, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmGatewayTrunkIndex.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayTrunkIndex.setDescription('An arbitrary integer, selected by the local CUCM, which uniquely identifies a Gateway trunk within the scope of a CallManager.')
ccmGatewayTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("trunkGroundStart", 3), ("trunkLoopStart", 4), ("trunkDID", 5), ("trunkPOTS", 6), ("trunkEM1", 7), ("trunkEM2", 8), ("trunkEM3", 9), ("trunkEM4", 10), ("trunkEM5", 11), ("analog", 12), ("pri", 13), ("bri", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayTrunkType.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayTrunkType.setDescription('The type of the gateway Trunk. unknown: Unknown Trunk other: Unidentified Trunk type trunkGroundStart: Provides Far-End Disconnect Supervision trunkLoopStart: Provides No Far-End Disconnect Supervision trunkDID: Direct Inward Dial trunkPOTS: Plain Old Telephone Service trunkEM1: E&M Type 1 trunkEM2: E&M Type 2 trunkEM3: E&M Type 3 trunkEM4: E&M Type 4 trunkEM5: E&M Type 5 analog: Analog pri: PRI bri: BRI.')
ccmGatewayTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 4, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayTrunkName.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayTrunkName.setDescription('The name of the trunk.')
ccmTrunkGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 4, 1, 1, 4), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmTrunkGatewayIndex.setStatus('obsolete')
if mibBuilder.loadTexts: ccmTrunkGatewayIndex.setDescription('A positive value of this index is used to identify the Gateway to which this Trunk entry belongs. A value of 0 indicates that the index to the Gateway table is Unknown.')
ccmGatewayTrunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("busy", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayTrunkStatus.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayTrunkStatus.setDescription('The state of the trunk. The Trunk status changes from Unknown to Up when it registers itself with the local CUCM. unknown: Unknown state of Trunk up: Up and running, and is Idle with no calls busy: The trunk is in a Busy state down: The trunk is Down.')
ccmActivePhones = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmActivePhones.setStatus('obsolete')
if mibBuilder.loadTexts: ccmActivePhones.setDescription('The number of phones connected to this CM and actively in communication (via keepalives) with this CallManager.')
ccmInActivePhones = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmInActivePhones.setStatus('obsolete')
if mibBuilder.loadTexts: ccmInActivePhones.setDescription('The number of phones that are registered with the Call Manager but have lost contact with the CallManager. The phones are said to have lost contact with the CallManager if the CallManager does not receive any keepalives.')
ccmActiveGateways = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmActiveGateways.setStatus('obsolete')
if mibBuilder.loadTexts: ccmActiveGateways.setDescription('The number of gateways configured with this CallManager and actively in communication (via keepalives) with the Call Manager.')
ccmInActiveGateways = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmInActiveGateways.setStatus('obsolete')
if mibBuilder.loadTexts: ccmInActiveGateways.setDescription('The number of gateways that are registered with the Call Manager but have lost contact with the CallManager. The gateways are said to have lost contact with the CallManager if the CallManager does not receive any keepalives.')
ccmRegisteredPhones = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRegisteredPhones.setStatus('current')
if mibBuilder.loadTexts: ccmRegisteredPhones.setDescription('The number of phones that are registered and actively in communication with the local call manager.')
ccmUnregisteredPhones = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmUnregisteredPhones.setStatus('current')
if mibBuilder.loadTexts: ccmUnregisteredPhones.setDescription('The number of phone that are unregistered or have lost contact with the local call manager.')
ccmRejectedPhones = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRejectedPhones.setStatus('current')
if mibBuilder.loadTexts: ccmRejectedPhones.setDescription('The number of phones whose registration requests were rejected by the local call manager.')
ccmRegisteredGateways = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRegisteredGateways.setStatus('current')
if mibBuilder.loadTexts: ccmRegisteredGateways.setDescription('The number of gateways that are registered and actively in communication with the local call manager.')
ccmUnregisteredGateways = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmUnregisteredGateways.setStatus('current')
if mibBuilder.loadTexts: ccmUnregisteredGateways.setDescription('The number of gateways that are unregistered or have lost contact with the local call manager.')
ccmRejectedGateways = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRejectedGateways.setStatus('current')
if mibBuilder.loadTexts: ccmRejectedGateways.setDescription('The number of gateways whose registration requests were rejected by the local call manager.')
ccmRegisteredMediaDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRegisteredMediaDevices.setStatus('current')
if mibBuilder.loadTexts: ccmRegisteredMediaDevices.setDescription('The number of media devices that are registered and actively in communication with the local call manager.')
ccmUnregisteredMediaDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmUnregisteredMediaDevices.setStatus('current')
if mibBuilder.loadTexts: ccmUnregisteredMediaDevices.setDescription('The number of media devices that are unregistered or have lost contact with the local call manager.')
ccmRejectedMediaDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRejectedMediaDevices.setStatus('current')
if mibBuilder.loadTexts: ccmRejectedMediaDevices.setDescription('The number of media devices whose registration requests were rejected by the local call manager.')
ccmRegisteredCTIDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRegisteredCTIDevices.setStatus('current')
if mibBuilder.loadTexts: ccmRegisteredCTIDevices.setDescription('The number of CTI devices that are registered and actively in communication with the local call manager.')
ccmUnregisteredCTIDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmUnregisteredCTIDevices.setStatus('current')
if mibBuilder.loadTexts: ccmUnregisteredCTIDevices.setDescription('The number of CTI devices that are unregistered or have lost contact with the local call manager.')
ccmRejectedCTIDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRejectedCTIDevices.setStatus('current')
if mibBuilder.loadTexts: ccmRejectedCTIDevices.setDescription('The number of CTI devices whose registration requests were rejected by the local call manager.')
ccmRegisteredVoiceMailDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRegisteredVoiceMailDevices.setStatus('current')
if mibBuilder.loadTexts: ccmRegisteredVoiceMailDevices.setDescription('The number of voice messaging devices that are registered and actively in communication with the local call manager.')
ccmUnregisteredVoiceMailDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmUnregisteredVoiceMailDevices.setStatus('current')
if mibBuilder.loadTexts: ccmUnregisteredVoiceMailDevices.setDescription('The number of voice messaging devices that are unregistered or have lost contact with the local call manager.')
ccmRejectedVoiceMailDevices = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmRejectedVoiceMailDevices.setStatus('current')
if mibBuilder.loadTexts: ccmRejectedVoiceMailDevices.setDescription('The number of voice messaging devices whose registration requests were rejected by the local call manager.')
ccmCallManagerStartTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCallManagerStartTime.setStatus('current')
if mibBuilder.loadTexts: ccmCallManagerStartTime.setDescription('The last time the local call manager service started. This is available only when the local call manager is up and running.')
ccmPhoneTableStateId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneTableStateId.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneTableStateId.setDescription('The current state of ccmPhoneTable. The initial value of this object is 0 and it will be incremented every time when there is a change (addition/deletion/modification) to the ccmPhoneTable. This value and ccmCallManagerStartTime should be used together to find if the table has changed or not. When the call manager is restarted, this will be reset to 0.')
ccmPhoneExtensionTableStateId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneExtensionTableStateId.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneExtensionTableStateId.setDescription('The current state of ccmPhoneExtensionTable. The initial value of this object is 0 and it will be incremented every time when there is a change (addition/deletion/modification) to the ccmPhoneExtensionTable. This value and ccmCallManagerStartTime should be used together to find if the table has changed or not. When the call manager is restarted, this will be reset to 0.')
ccmPhoneStatusUpdateTableStateId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhoneStatusUpdateTableStateId.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateTableStateId.setDescription('The current state of ccmPhoneStatusUpdateTable. The initial value of this object is 0 and it will be incremented every time when there is a change (addition/deletion/modification) to the ccmPhoneStatusUpdateTable. This value and sysUpTime should be used together to find if the table has changed or not. When the SNMP service is restarted this value will be reset to 0.')
ccmGatewayTableStateId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatewayTableStateId.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayTableStateId.setDescription('The current state of ccmGatewayTable. The initial value of this object is 0 and it will be incremented every time when there is a change (addition/deletion/modification) to the ccmGatewayTable. This value and ccmCallManagerStartTime should be used together to find if the table has changed or not. When the call manager is restarted, this will be reset to 0.')
ccmCTIDeviceTableStateId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceTableStateId.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceTableStateId.setDescription('The current state of ccmCTIDeviceTable. The initial value of this object is 0 and it will be incremented every time when there is a change (addition/deletion/modification) to the ccmCTIDeviceTable. This value and ccmCallManagerStartTime should be used together to find if the table has changed or not. When the call manager is restarted, this will be reset to 0.')
ccmCTIDeviceDirNumTableStateId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceDirNumTableStateId.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceDirNumTableStateId.setDescription('The current state of ccmCTIDeviceDirNumTable. The initial value of this object is 0 and it will be incremented every time when there is a change (addition/deletion/modification) to the ccmCTIDeviceDirNumTable. This value and ccmCallManagerStartTime should be used together to find if the table has changed or not. When the call manager is restarted, this will be reset to 0.')
ccmPhStatUpdtTblLastAddedIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 27), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhStatUpdtTblLastAddedIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhStatUpdtTblLastAddedIndex.setDescription('The ccmPhoneStatusUpdateIndex value of the last entry that was added to the ccmPhoneStatusUpdateTable. This value together with sysUpTime can be used by the manager applications to identify the new entries in the ccmPhoneStatusUpdateTable since their last poll. This value need not be the same as the highest index in the ccmPhoneStatusUpdateTable as the index could have wrapped around. The initial value of this object is 0 which indicates that there has been no entries added to this table. When the SNMP service is restarted this value will be reset to 0.')
ccmPhFailedTblLastAddedIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 28), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPhFailedTblLastAddedIndex.setStatus('current')
if mibBuilder.loadTexts: ccmPhFailedTblLastAddedIndex.setDescription('The ccmPhoneFailedIndex value of the last entry that was added to the ccmPhoneFailedTable. This value together with sysUpTime can be used by the manager applications to identify the new entries in the ccmPhoneFailedTable since their last poll. This value need not be the same as the highest index in the ccmPhoneFailedTable as the index could have wrapped around. The initial value of this object is 0 which indicates that there has been no entries added to this table. When the SNMP service is restarted this value will be reset to 0.')
ccmSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSystemVersion.setStatus('current')
if mibBuilder.loadTexts: ccmSystemVersion.setDescription('The installed version of the local call manager system.')
ccmInstallationId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 30), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmInstallationId.setStatus('current')
if mibBuilder.loadTexts: ccmInstallationId.setDescription('The installation component identifier of the local call manager component(ccm.exe).')
ccmPartiallyRegisteredPhones = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmPartiallyRegisteredPhones.setStatus('current')
if mibBuilder.loadTexts: ccmPartiallyRegisteredPhones.setDescription('The number of phones that are partially registered with the local call manager.')
ccmH323TableEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323TableEntries.setStatus('current')
if mibBuilder.loadTexts: ccmH323TableEntries.setDescription('The current number of entries in ccmH323DeviceTable. The initial value of this object is 0 and it will be incremented everytime when there is an addition to the ccmH323DeviceTable. When the call manager is restarted, this will be reset to 0.')
ccmSIPTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 5, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPTableEntries.setStatus('current')
if mibBuilder.loadTexts: ccmSIPTableEntries.setDescription('The current number of entries in ccmSIPDeviceTable. The initial value of this object is 0 and it will be incremented everytime when there is an addition to the ccmSIPDeviceTable. When the call manager is restarted, this will be reset to 0.')
ccmMediaDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1), )
if mibBuilder.loadTexts: ccmMediaDeviceTable.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceTable.setDescription('The table containing a list of all Media Devices which have tried to register with the local CUCM at least once. When the local CUCM is restarted, this table will be refreshed.')
ccmMediaDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmMediaDeviceIndex"))
if mibBuilder.loadTexts: ccmMediaDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceEntry.setDescription('An entry (conceptual row) in the MediaDevice Table, containing the information about a particular Media Resource device.')
ccmMediaDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmMediaDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceIndex.setDescription('An arbitrary integer, selected by the local CUCM, which identifies a Media Device entry in the table.')
ccmMediaDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceName.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceName.setDescription('This is the device name assigned to the Media Device. This name is assigned when a new device of this type is added to the CallManager.')
ccmMediaDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 1), ("ciscoMediaTerminPointWSX6608", 2), ("ciscoConfBridgeWSX6608", 3), ("ciscoSwMediaTerminationPoint", 4), ("ciscoSwConfBridge", 5), ("ciscoMusicOnHold", 6), ("ciscoToneAnnouncementPlayer", 7), ("ciscoConfBridgeWSSVCCMM", 8), ("ciscoMediaServerWSSVCCMMMS", 9), ("ciscoMTPWSSVCCMM", 10), ("ciscoIOSSWMTPHDV2", 11), ("ciscoIOSConfBridgeHDV2", 12), ("ciscoIOSMTPHDV2", 13), ("ciscoVCBIPVC35XX", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceType.setStatus('obsolete')
if mibBuilder.loadTexts: ccmMediaDeviceType.setDescription('The type of Media Device. unknown(1): Unknown Media Device ciscoMediaTerminPointWSX6608(2): Hardware based Media Termination Point WSX6608 ciscoConfBridgeWSX6608(3): Hardware based Conference Bridge WSX6608 ciscoSwMediaTerminationPoint(4): Software based Media Termination Point ciscoSwConfBridge(5): Software based Conference Bridge ciscoMusicOnHold(6): Music on Hold Server ciscoToneAnnouncementPlayer(7): Tone Announcement Player ciscoConfBridgeWSSVCCMM(8): Conference Bridge WS-SVC-CMM ciscoMediaServerWSSVCCMMMS(9): Media Server WS-SVC-CMM-MS ciscoMTPWSSVCCMM(10): Media Termination Point WS-SVC-CMM ciscoIOSSWMTPHDV2(11): IOS Software Media Termination Point HDV2 ciscoIOSConfBridgeHDV2(12): IOS Conference Bridge HDV2 ciscoIOSMTPHDV2(13): IOS Media Termination Point HDV2 ciscoVCBIPVC35XX(14): Video Conference Bridge IPVC 35XX.')
ccmMediaDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceDescription.setDescription('A description of the Media Device. This description is given when the device is configured in the CUCM.')
ccmMediaDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 5), CcmDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceStatus.setDescription('The status of the Media Device. The status changes from unknown to registered when it registers itself with the local CUCM.')
ccmMediaDeviceDevicePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 6), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceDevicePoolIndex.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceDevicePoolIndex.setDescription('A positive value of this index is used to identify the Device Pool to which this MediaDevice entry belongs. A value of 0 indicates that the index to the Device Pool table is Unknown.')
ccmMediaDeviceInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceInetAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: ccmMediaDeviceInetAddressType.setDescription("This object identifies the IP address type of the Media Device. The value of this object is 'unknown(0)' if the IP address of a Media Device is not available.")
ccmMediaDeviceInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceInetAddress.setStatus('deprecated')
if mibBuilder.loadTexts: ccmMediaDeviceInetAddress.setDescription('This object identifies last known IP Address of the Media Device. If the IP Address is not available then this object contains an empty string. The type of address for this is identified by ccmMediaDeviceInetAddressType.')
ccmMediaDeviceStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 9), CcmDevFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ccmMediaDeviceStatusReason.setDescription('The reason code associated with the media device status change.')
ccmMediaDeviceTimeLastStatusUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceTimeLastStatusUpdt.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceTimeLastStatusUpdt.setDescription('The time the status of the media device changed.')
ccmMediaDeviceTimeLastRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceTimeLastRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceTimeLastRegistered.setDescription('The time the media device last registered with the call manager.')
ccmMediaDeviceProductTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 12), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceProductTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceProductTypeIndex.setDescription('A positive value of this index is used to identify the related product type entry in the ccmProductTypeTable. A value of 0 indicates that the index to the ccmProductTypeTable is Unknown.')
ccmMediaDeviceInetAddressIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 13), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceInetAddressIPv4.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceInetAddressIPv4.setDescription('This object identifies the last known primary IPv4 address of the Media Device. This object contains value zero if IPV4 address is not available')
ccmMediaDeviceInetAddressIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 14), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceInetAddressIPv6.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceInetAddressIPv6.setDescription('This object identifies the last known primary IPv6 address of the Media Device. This object contains value zero if IPV6 address is not available.')
ccmMediaDeviceUnregReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 15), CcmDevUnregCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceUnregReason.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceUnregReason.setDescription('The reason code associated with unregistered Media Device.')
ccmMediaDeviceRegFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 6, 1, 1, 16), CcmDevRegFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmMediaDeviceRegFailReason.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceRegFailReason.setDescription('The reason code associated with registration failed Media Device.')
ccmGatekeeperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1), )
if mibBuilder.loadTexts: ccmGatekeeperTable.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperTable.setDescription('The table containing a list of all Gatekeepers to which the local CUCM has tried to register at least once. When the local CUCM is restarted, this table will be refreshed.')
ccmGatekeeperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmGatekeeperIndex"))
if mibBuilder.loadTexts: ccmGatekeeperEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperEntry.setDescription('An entry (conceptual row) in the Gatekeeper Table, containing the information about a particular Gatekeeper that the local call manager tried to register with.')
ccmGatekeeperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmGatekeeperIndex.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperIndex.setDescription('An arbitrary integer, selected by the local CUCM, which identifies a Gatekeeper entry in the table.')
ccmGatekeeperName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatekeeperName.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperName.setDescription('This is the Gatekeeper name assigned to the Gatekeeper. This name is assigned when a new device of type Gatekeeper is added to the CallManager.')
ccmGatekeeperType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("terminal", 3), ("gateway", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatekeeperType.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperType.setDescription('The type of Gatekeeper. unknown: Unknown Gatekeeper other: Unidentified Gatekeeper terminal: Terminal gateway: Gateway.')
ccmGatekeeperDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatekeeperDescription.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperDescription.setDescription('A description of the Gatekeeper. This description is given when the Gatekeeper is configured in the CUCM.')
ccmGatekeeperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("registered", 2), ("unregistered", 3), ("rejected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatekeeperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperStatus.setDescription('The local call manager registration status with the Gatekeeper. The status changes from unknown to registered when the local call manager successfully registers itself with the gatekeeper. unknown: The registration status of the call manager with the gatekeeper is unknown registered: The local call manager has registered with the gatekeeper successfully unregistered: The local call manager is no longer registered with the gatekeeper rejected: Registration request from the local call manager was rejected by the gatekeeper.')
ccmGatekeeperDevicePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1, 6), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatekeeperDevicePoolIndex.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperDevicePoolIndex.setDescription('A positive value of this index is used to identify the Device Pool to which this Gatekeeper entry belongs. A value of 0 indicates that the index to the Device Pool table is Unknown.')
ccmGatekeeperInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatekeeperInetAddressType.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperInetAddressType.setDescription("This object identifies the IP address type of the Gatekeeper. The value of this object is 'unknown(0)' if the IP address of a Gatekeeper is not available.")
ccmGatekeeperInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 7, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmGatekeeperInetAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperInetAddress.setDescription('This object identifies last known IP Address of the gatekeeper. If the IP address is not available then this object contains an empty string. The type of address for this is identified by ccmGatekeeperInetAddressType.')
ccmCTIDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1), )
if mibBuilder.loadTexts: ccmCTIDeviceTable.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceTable.setDescription('The table containing a list of all CTI (Computer Telephony Integration) Devices which have tried to register with the local CUCM at least once. When the local CUCM is restarted, this table will be refreshed.')
ccmCTIDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmCTIDeviceIndex"))
if mibBuilder.loadTexts: ccmCTIDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceEntry.setDescription('An entry (conceptual row) in the CTIDevice Table, containing the information about a particular CTI Device.')
ccmCTIDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmCTIDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceIndex.setDescription('An arbitrary integer, selected by the local CUCM, which identifies a CTI Device entry in the table.')
ccmCTIDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceName.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceName.setDescription('The name of the CTI Device. This name is assigned to the CTI Device when it is added to the CallManager.')
ccmCTIDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("ctiRoutePoint", 3), ("ctiPort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceType.setStatus('obsolete')
if mibBuilder.loadTexts: ccmCTIDeviceType.setDescription('The type of CTI Device. unknown: Unknown CTI Device other: Unidentified CTI Device ctiRoutePoint: A CTI Route Point ctiPort: A CTI Port.')
ccmCTIDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceDescription.setDescription('A description of the CTI Device. This description is given when the CTI Device is configured in the CUCM.')
ccmCTIDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 5), CcmDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceStatus.setDescription('The status of the CTI Device. The CTI Device status changes from unknown to registered when it registers itself with the local CUCM.')
ccmCTIDevicePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 6), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDevicePoolIndex.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDevicePoolIndex.setDescription('A positive value of this index is used to identify the Device Pool to which this CTI Device entry belongs. A value of 0 indicates that the index to the Device Pool table is Unknown.')
ccmCTIDeviceInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceInetAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: ccmCTIDeviceInetAddressType.setDescription("This object identifies the IP address type of the CTIDevice. The value of this object is 'unknown(0)' if the IP address of a CTIDevice is not available.")
ccmCTIDeviceInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceInetAddress.setStatus('deprecated')
if mibBuilder.loadTexts: ccmCTIDeviceInetAddress.setDescription('This object identifies IP Address of the host where this CTI Device is running. If the IP address is not available then this object contains an empty string. The type of address for this is identified by ccmCTIDeviceInetAddressType.')
ccmCTIDeviceAppInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceAppInfo.setStatus('obsolete')
if mibBuilder.loadTexts: ccmCTIDeviceAppInfo.setDescription('The appinfo string indicates the application name/ type that uses this CTI Device.')
ccmCTIDeviceStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 10), CcmDevFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ccmCTIDeviceStatusReason.setDescription('The reason code associated with the CTI Device status change.')
ccmCTIDeviceTimeLastStatusUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceTimeLastStatusUpdt.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceTimeLastStatusUpdt.setDescription('The time the status of the CTI device changed.')
ccmCTIDeviceTimeLastRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceTimeLastRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceTimeLastRegistered.setDescription('The time the CTI Device last registered with the call manager.')
ccmCTIDeviceProductTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 13), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceProductTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceProductTypeIndex.setDescription('A positive value of this index is used to identify the related product type entry in the ccmProductTypeTable. A value of 0 indicates that the index to the ccmProductTypeTable is Unknown.')
ccmCTIDeviceInetAddressIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 14), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceInetAddressIPv4.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceInetAddressIPv4.setDescription('This object identifies IPv4 Address of the host where this CTI Device is running. If the IPv4 address is not available then this object contains an empty string.')
ccmCTIDeviceInetAddressIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 15), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceInetAddressIPv6.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceInetAddressIPv6.setDescription('This object identifies IPv6 Address of the host where this CTI Device is running. If the IPv6 address is not available then this object contains an empty string.')
ccmCTIDeviceUnregReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 16), CcmDevUnregCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceUnregReason.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceUnregReason.setDescription('The reason code associated with unregistered CTI Device.')
ccmCTIDeviceRegFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 1, 1, 17), CcmDevRegFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceRegFailReason.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceRegFailReason.setDescription('The reason code associated with registration failed CTI Device.')
ccmCTIDeviceDirNumTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 2), )
if mibBuilder.loadTexts: ccmCTIDeviceDirNumTable.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceDirNumTable.setDescription('The table containing a list of directory numbers that are assigned to all of the registered and unregistered CTI Devices in the ccmCTIDeviceTable.')
ccmCTIDeviceDirNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 2, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmCTIDeviceIndex"), (0, "CISCO-CCM-MIB", "ccmCTIDeviceDirNumIndex"))
if mibBuilder.loadTexts: ccmCTIDeviceDirNumEntry.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceDirNumEntry.setDescription('An entry (conceptual row) in the CTIDeviceDirNum Table, containing the information about a particular CTI Device extension.')
ccmCTIDeviceDirNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 2, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmCTIDeviceDirNumIndex.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceDirNumIndex.setDescription('An arbitrary integer, selected by the local system, which identifies a Directory Number of a CTI Device.')
ccmCTIDeviceDirNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 8, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmCTIDeviceDirNum.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceDirNum.setDescription('A Directory Number of the CTI Device.')
ccmCallManagerAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 9, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmCallManagerAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: ccmCallManagerAlarmEnable.setDescription('Allows the generation of Alarms in response to CallManager general failures. true(1): Enabling this object will allow the CUCM agent to generate the following alarms - ccmCallManagerFailure, ccmMediaResourceListExhausted, ccmRouteListExhausted and ccmTLSConnectionFailure. This is the default value. false(2): Disabling this object will stop the generation of the following alarms by the CUCM agent - ccmCallManagerFailure ccmMediaResourceListExhausted, ccmRouteListExhausted and ccmTLSConnectionFailure.')
ccmPhoneFailedAlarmInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 3600), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPhoneFailedAlarmInterval.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedAlarmInterval.setDescription('The minimum interval between sending of the ccmPhoneFailed notification in seconds. The ccmPhoneFailed notification is only sent when there is at least one entry in the ccmPhoneFailedTable and the notification has not been sent for the last ccmPhoneFailedAlarmInterval defined in this object. A value of 0 indicates that the alarm notification is disabled.')
ccmPhoneFailedStorePeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 3600)).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPhoneFailedStorePeriod.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailedStorePeriod.setDescription('The time duration for storing each entry in the ccmPhoneFailedTable. The entries which have not been updated and kept at least this period will be deleted. This value should ideally be set to a higher value than the ccmPhoneFailedAlarmInterval object.')
ccmPhoneStatusUpdateAlarmInterv = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 3600), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPhoneStatusUpdateAlarmInterv.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateAlarmInterv.setDescription('The minimum interval between sending of the ccmPhoneStatusUpdate notification in seconds. The ccmPhoneStatusUpdate notification is only sent when there is at least one entry in the ccmPhoneStatusUpdateTable and the notification has not been sent for the last ccmPhoneStatusUpdateAlarmInterv defined in this object. A value of 0 indicates that the alarm notification is disabled.')
ccmPhoneStatusUpdateStorePeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 3600)).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmPhoneStatusUpdateStorePeriod.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdateStorePeriod.setDescription('The time duration for storing each entry in the ccmPhoneStatusUpdateTable. The entries which have been kept at least this period will be deleted. This value should ideally be set to a higher value than the ccmPhoneStatusUpdateAlarmInterv object.')
ccmGatewayAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 9, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmGatewayAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayAlarmEnable.setDescription('Allows the generation of Alarms in response to Gateway general failures that the CallManager is aware of. true(1): Enabling this object will allow the CUCM agent to generate the following alarms - ccmGatewayFailedReason and ccmGatewayLayer2Change notifications. This is the default value. false(2): Disabling this object will stop the generation of the following alarms by the CUCM agent - ccmGatewayFailedReason and ccmGatewayLayer2Change.')
ccmMaliciousCallAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 9, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmMaliciousCallAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: ccmMaliciousCallAlarmEnable.setDescription('Allows the generation of alarms for malicious calls that the local call manager is aware of. true(1): Enabling this object will allow the CUCM agent to generate the ccmMaliciousCall alarm. This is the default value. false(2): Disabling this object will stop the generation of the ccmMaliciousCall alarm.')
ccmAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: ccmAlarmSeverity.setDescription('The Alarm Severity code. emergency: System unusable alert: Immediate response needed critical: Critical condition error: Error condition warning: Warning condition notice: Normal but significant condition informational: Informational situation.')
ccmFailCauseCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("heartBeatStopped", 2), ("routerThreadDied", 3), ("timerThreadDied", 4), ("criticalThreadDied", 5), ("deviceMgrInitFailed", 6), ("digitAnalysisInitFailed", 7), ("callControlInitFailed", 8), ("linkMgrInitFailed", 9), ("dbMgrInitFailed", 10), ("msgTranslatorInitFailed", 11), ("suppServicesInitFailed", 12)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmFailCauseCode.setStatus('current')
if mibBuilder.loadTexts: ccmFailCauseCode.setDescription('The Cause code of the failure. This cause is derived from a monitoring thread in the CallManager or from a heartbeat monitoring process. unknown: Unknown heartBeatStopped: The CallManager stops generating a heartbeat routerThreadDied: The CallManager detects the death of the router thread timerThreadDied: The CallManager detects the death of the timer thread criticalThreadDied: The CallManager detects the death of one of its critical threads deviceMgrInitFailed: The CallManager fails to start its device manager subsystem digitAnalysisInitFailed: The CallManager fails to start its digit analysis subsystem callControlInitFailed: The CallManager fails to start its call control subsystem linkMgrInitFailed: The CallManager fails to start its link manager subsystem dbMgrInitFailed: The CallManager fails to start its database manager subsystem msgTranslatorInitFailed: The CallManager fails to start its message translation manager subsystem suppServicesInitFailed: The CallManager fails to start its supplementary services subsystem.')
ccmPhoneFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmPhoneFailures.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailures.setDescription('The count of the phone initialization or communication failures that are stored in the ccmPhoneFailedTable object.')
ccmPhoneUpdates = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmPhoneUpdates.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneUpdates.setDescription('The count of the phone status changes that are stored in the ccmPhoneStatusUpdateTable object.')
ccmGatewayFailCauseCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 5), CcmDevFailCauseCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmGatewayFailCauseCode.setStatus('deprecated')
if mibBuilder.loadTexts: ccmGatewayFailCauseCode.setDescription('States the reason for a gateway device communication error.')
ccmMediaResourceType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("mediaTerminationPoint", 2), ("transcoder", 3), ("conferenceBridge", 4), ("musicOnHold", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMediaResourceType.setStatus('current')
if mibBuilder.loadTexts: ccmMediaResourceType.setDescription('The type of media resource. unknown: Unknown resource type mediaTerminationPoint: Media Termination Point transcoder: Transcoder conferenceBridge: Conference Bridge musicOnHold: Music On Hold.')
ccmMediaResourceListName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMediaResourceListName.setStatus('current')
if mibBuilder.loadTexts: ccmMediaResourceListName.setDescription('The name of a Media Resource List. This name is assigned when a new Media Resource List is added to the CallManager.')
ccmRouteListName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmRouteListName.setStatus('current')
if mibBuilder.loadTexts: ccmRouteListName.setDescription('The name of a Route List. This name is assigned when a new Route List is added to the CallManager.')
ccmGatewayPhysIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmGatewayPhysIfIndex.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayPhysIfIndex.setDescription('This object is the identifier of an interface in a gateway that has registered with the local CallManager. On a DS1/E1 interface, this should be the same as the ifIndex value in the gateway.')
ccmGatewayPhysIfL2Status = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmGatewayPhysIfL2Status.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayPhysIfL2Status.setDescription('The layer 2 status of a physical interface in a gateway that has registered with the local CallManager. unknown: Unknown status up: Interface is up down: Interface is down.')
ccmMaliCallCalledPartyName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMaliCallCalledPartyName.setStatus('current')
if mibBuilder.loadTexts: ccmMaliCallCalledPartyName.setDescription('The display name of the called party who received the malicious call.')
ccmMaliCallCalledPartyNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMaliCallCalledPartyNumber.setStatus('current')
if mibBuilder.loadTexts: ccmMaliCallCalledPartyNumber.setDescription('The phone number of the device where the malicious call is received.')
ccmMaliCallCalledDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMaliCallCalledDeviceName.setStatus('current')
if mibBuilder.loadTexts: ccmMaliCallCalledDeviceName.setDescription('The name of the device where the malicious call is received.')
ccmMaliCallCallingPartyName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMaliCallCallingPartyName.setStatus('current')
if mibBuilder.loadTexts: ccmMaliCallCallingPartyName.setDescription('The display name of the caller whose call is registered as malicious with the local call manager.')
ccmMaliCallCallingPartyNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMaliCallCallingPartyNumber.setStatus('current')
if mibBuilder.loadTexts: ccmMaliCallCallingPartyNumber.setDescription('The phone number of the caller whose call is registered as malicious with the local call manager.')
ccmMaliCallCallingDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMaliCallCallingDeviceName.setStatus('current')
if mibBuilder.loadTexts: ccmMaliCallCallingDeviceName.setDescription('The edge device name through which the malicious call originated or passed through.')
ccmMaliCallTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 17), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmMaliCallTime.setStatus('current')
if mibBuilder.loadTexts: ccmMaliCallTime.setDescription('The time when the malicious call is detected by the local call manager.')
ccmQualityRprtSourceDevName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmQualityRprtSourceDevName.setStatus('current')
if mibBuilder.loadTexts: ccmQualityRprtSourceDevName.setDescription('The name of the source device from where the problem was reported.')
ccmQualityRprtClusterId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmQualityRprtClusterId.setStatus('current')
if mibBuilder.loadTexts: ccmQualityRprtClusterId.setDescription('The cluster identifier of the source device.')
ccmQualityRprtCategory = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmQualityRprtCategory.setStatus('current')
if mibBuilder.loadTexts: ccmQualityRprtCategory.setDescription('The category of the problem reported.')
ccmQualityRprtReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmQualityRprtReasonCode.setStatus('current')
if mibBuilder.loadTexts: ccmQualityRprtReasonCode.setDescription('The description of the problem reported.')
ccmQualityRprtTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 22), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmQualityRprtTime.setStatus('current')
if mibBuilder.loadTexts: ccmQualityRprtTime.setDescription('The time when the problem was reported.')
ccmTLSDevName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmTLSDevName.setStatus('current')
if mibBuilder.loadTexts: ccmTLSDevName.setDescription('The device for which TLS connection failure was reported.')
ccmTLSDevInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 24), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmTLSDevInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmTLSDevInetAddressType.setDescription('This object identifies the type of address for the device for which TLS connection failure was reported.')
ccmTLSDevInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 25), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmTLSDevInetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmTLSDevInetAddress.setDescription('This object identifies IP Address of the device, for which TLS connection failure was reported. The type of address for this is identified by ccmTLSDevInetAddressType.')
ccmTLSConnFailTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 26), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmTLSConnFailTime.setStatus('current')
if mibBuilder.loadTexts: ccmTLSConnFailTime.setDescription('The time when TLS connection failure was detected by the local call manager.')
ccmTLSConnectionFailReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("authenticationerror", 2), ("invalidx509nameincertificate", 3), ("invalidtlscipher", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmTLSConnectionFailReasonCode.setStatus('current')
if mibBuilder.loadTexts: ccmTLSConnectionFailReasonCode.setDescription('The reason for connection failure.')
ccmGatewayRegFailCauseCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 10, 28), CcmDevRegFailCauseCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ccmGatewayRegFailCauseCode.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayRegFailCauseCode.setDescription('States the reason for a gateway device registration failure.')
ccmH323DeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1), )
if mibBuilder.loadTexts: ccmH323DeviceTable.setStatus('current')
if mibBuilder.loadTexts: ccmH323DeviceTable.setDescription('The table containing a list of all H323 devices in the CUCM cluster which the local CUCM is aware of. When the local CUCM is restarted, this table will be refreshed.')
ccmH323DeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmH323DevIndex"))
if mibBuilder.loadTexts: ccmH323DeviceEntry.setStatus('current')
if mibBuilder.loadTexts: ccmH323DeviceEntry.setDescription('An entry (conceptual row) in the H323Device Table, containing the information about a particular H323 Device.')
ccmH323DevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmH323DevIndex.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevIndex.setDescription('An arbitrary integer, selected by the local CUCM, which identifies a H323 Device entry in the table.')
ccmH323DevName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevName.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevName.setDescription('The device name assigned to the H323 Device. This name is assigned when a new H323 device is added to the CallManager.')
ccmH323DevProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 3), CcmDeviceProductId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevProductId.setStatus('obsolete')
if mibBuilder.loadTexts: ccmH323DevProductId.setDescription('The product identifier of the H323 device.')
ccmH323DevDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevDescription.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevDescription.setDescription('A description of the H323 device. This description is given when the H323 device is configured in the CUCM.')
ccmH323DevInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevInetAddressType.setDescription("This object identifies the IP address type of the H323 device. The value of this object is 'unknown(0)' if the IP address of a H323 device is not available.")
ccmH323DevInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevInetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevInetAddress.setDescription('This object identifies last known IP Address of the H323 device. If the IP address is not available then this object contains an empty string. The type of address for this is identified by ccmH323DevInetAddressType.')
ccmH323DevCnfgGKInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevCnfgGKInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevCnfgGKInetAddressType.setDescription("This object identifies the IP address type of the gatekeeper device. The value of this object is 'unknown(0)' if the IP address of a H323 gatekeeper is not available.")
ccmH323DevCnfgGKInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevCnfgGKInetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevCnfgGKInetAddress.setDescription('This object represents configured gatekeeper DNS name or IP address for this H323 device. This is applicable only for H323 devices with gatekeepers configured. When there is no H323 gatekeeper configured, this object contains an empty string. The type of address for this is identified by ccmH323DevCnfgGKInetAddressType.')
ccmH323DevAltGK1InetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK1InetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK1InetAddressType.setDescription("This object identifies the IP address type of the first alternate gatekeeper. The value of this object is 'unknown(0)' if the IP address of a H323 gatekeeper is not available.")
ccmH323DevAltGK1InetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK1InetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK1InetAddress.setDescription('This object identifies the first alternate gatekeeper DNS name or IP address for this H323 device. This is applicable only for H323 devices with gatekeepers configured. When there is no first alternate H323 gatekeeper, this object contains an empty string. The type of address for this is identified by ccmH323DevAltGK1InetAddressType.')
ccmH323DevAltGK2InetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK2InetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK2InetAddressType.setDescription("This object identifies the IP address type of the second alternate gatekeeper. The value of this object is 'unknown(0)' if the IP address of a H323 gatekeeper is not available.")
ccmH323DevAltGK2InetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK2InetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK2InetAddress.setDescription('This object identifies the second alternate gatekeeper DNS name or IP address for this H323 device. This is applicable only for H323 devices with gatekeepers configured. When there is no second alternate H323 gatekeeper, this object contains an empty string. The type of address for this is identified by ccmH323DevAltGK2InetAddressType.')
ccmH323DevAltGK3InetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 13), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK3InetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK3InetAddressType.setDescription("This object identifies the IP address type of the third alternate gatekeeper. The value of this object is 'unknown(0)' if the IP address of a H323 gatekeeper is not available.")
ccmH323DevAltGK3InetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK3InetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK3InetAddress.setDescription('This object identifies the third alternate gatekeeper DNS name or IP address for this H323 device. This is applicable only for H323 devices with gatekeepers configured. When there is no third alternate H323 gatekeeper, this object contains an empty string. The type of address for this is identified by ccmH323DevAltGK3InetAddressType.')
ccmH323DevAltGK4InetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK4InetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK4InetAddressType.setDescription("This object identifies the IP address type of the fourth alternate gatekeeper. The value of this object is 'unknown(0)' if the IP address of a H323 gatekeeper is not available.")
ccmH323DevAltGK4InetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK4InetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK4InetAddress.setDescription('This object identifies the fourth alternate gatekeeper DNS name or IP address for this H323 device. This is applicable only for H323 devices with gatekeepers configured. When there is no fourth H323 alternate gatekeeper, this object contains an empty string. The type of address for this is identified by ccmH323DevAltGK4InetAddressType.')
ccmH323DevAltGK5InetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK5InetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK5InetAddressType.setDescription("This object identifies the IP address type of the fifth alternate gatekeeper. The value of this object is 'unknown(0)' if the IP address of a H323 gatekeeper is not available.")
ccmH323DevAltGK5InetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevAltGK5InetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevAltGK5InetAddress.setDescription('This object identifies the fifth alternate gatekeeper DNS name or IP address for this H323 device. This is applicable only for H323 devices with gatekeepers configured. When there is no fifth H323 alternate gatekeeper, this object contains an empty string. The type of address for this is identified by ccmH323DevAltGK5InetAddressType.')
ccmH323DevActGKInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevActGKInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevActGKInetAddressType.setDescription("This object identifies the IP address type of the active gatekeeper. The value of this object is 'unknown(0)' if the IP address of a gatekeeper is not available.")
ccmH323DevActGKInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevActGKInetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevActGKInetAddress.setDescription('This object identifies the active alternate gatekeeper DNS name or IP address for this H323 device. This is applicable only for H323 devices with gatekeepers configured. When there is no active alternate H323 gatekeeper, this object contains an empty string. The type of address for this is identified by ccmH323DevActGKInetAddressType.')
ccmH323DevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("unknown", 1), ("registered", 2), ("unregistered", 3), ("rejected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevStatus.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevStatus.setDescription('The H323 device registration status with the gatekeeper. The status changes from unknown to registered when the H323 device successfully registers itself with the gatekeeper. notApplicable: The registration status is not applicable for this H323 device unknown: The registration status of the H323 device with the gatekeeper is unknown registered: The H323 device has registered with the gatekeeper successfully unregistered: The H323 device is no longer registered with the gatekeeper rejected: Registration request from the H323 device was rejected by the gatekeeper.')
ccmH323DevStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 22), CcmDevFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ccmH323DevStatusReason.setDescription('The reason code associated with ccmH233DevStatus change. This is applicable only for H323 devices with gatekeepers configured.')
ccmH323DevTimeLastStatusUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevTimeLastStatusUpdt.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevTimeLastStatusUpdt.setDescription('The time the registration status with the gatekeeper changed. This is applicable only for H323 devices with gatekeepers configured.')
ccmH323DevTimeLastRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevTimeLastRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevTimeLastRegistered.setDescription('The time when the H323 device last registered with the gatekeeper. This is applicable only for H323 devices with gatekeepers configured.')
ccmH323DevRmtCM1InetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 25), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevRmtCM1InetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevRmtCM1InetAddressType.setDescription("This object identifies the IP address type of the first remote call manager. The value of this object is 'unknown(0)' if the first remote call manager is not configured.")
ccmH323DevRmtCM1InetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 26), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevRmtCM1InetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevRmtCM1InetAddress.setDescription('This object identifies the first remote call manager DNS name or IP address configured for this H323 device. When there is no first remote call manager configured, this object contains an empty string. The type of address for this is identified by ccmH323DevRmtCM1InetAddressType.')
ccmH323DevRmtCM2InetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 27), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevRmtCM2InetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevRmtCM2InetAddressType.setDescription("This object identifies the IP address type of the second remote call manager. The value of this object is 'unknown(0)' if the second remote call manager is not configured.")
ccmH323DevRmtCM2InetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 28), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevRmtCM2InetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevRmtCM2InetAddress.setDescription('This object identifies the second remote call manager DNS name or IP address configured for this H323 device. When there is no second remote call manager configured, this object contains an empty string. The type of address for this is identified by ccmH323DevRmtCM2InetAddressType.')
ccmH323DevRmtCM3InetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 29), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevRmtCM3InetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevRmtCM3InetAddressType.setDescription("This object identifies the IP address type of the third remote call manager. The value of this object is 'unknown(0)' if the third remote call manager is not configured.")
ccmH323DevRmtCM3InetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 30), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevRmtCM3InetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevRmtCM3InetAddress.setDescription('This object identifies the third remote call manager DNS name or IP address configured for this H323 device. When there is no third remote call manager configured, this object contains an empty string. The type of address for this is identified by ccmH323DevRmtCM3InetAddressType.')
ccmH323DevProductTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 31), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevProductTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevProductTypeIndex.setDescription('A positive value of this index is used to identify the related product type entry in the ccmProductTypeTable. A value of 0 indicates that the index to the ccmProductTypeTable is Unknown.')
ccmH323DevUnregReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 32), CcmDevUnregCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevUnregReason.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevUnregReason.setDescription('The reason code associated with unregistered H323 Device. This is applicable only for H323 devices with gatekeepers configured.')
ccmH323DevRegFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 11, 1, 1, 33), CcmDevRegFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmH323DevRegFailReason.setStatus('current')
if mibBuilder.loadTexts: ccmH323DevRegFailReason.setDescription('The reason code associated with registration failed H323 Device. This is applicable only for H323 devices with gatekeepers configured.')
ccmVoiceMailDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1), )
if mibBuilder.loadTexts: ccmVoiceMailDeviceTable.setStatus('current')
if mibBuilder.loadTexts: ccmVoiceMailDeviceTable.setDescription('The table containing a list of all voice messaging devices which have tried to register with the local CUCM at least once. When the local CUCM is restarted, this table will be refreshed.')
ccmVoiceMailDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmVMailDevIndex"))
if mibBuilder.loadTexts: ccmVoiceMailDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: ccmVoiceMailDeviceEntry.setDescription('An entry (conceptual row) in the VoiceMailDevice Table, containing the information about a particular Voice Messaging Device.')
ccmVMailDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmVMailDevIndex.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevIndex.setDescription('An arbitrary integer, selected by the local CUCM, which identifies a voice messaging device entry in the table.')
ccmVMailDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevName.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevName.setDescription('The name of the Voice Messaging Device. This name is assigned to the Voice Messaging Device when it is added to the CallManager.')
ccmVMailDevProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 3), CcmDeviceProductId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevProductId.setStatus('obsolete')
if mibBuilder.loadTexts: ccmVMailDevProductId.setDescription('The product identifier of the Voice Messaging device.')
ccmVMailDevDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevDescription.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevDescription.setDescription('The description of the Voice Messaging Device. This description is given when the Voice Messaging Device is configured in the CUCM.')
ccmVMailDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 5), CcmDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevStatus.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevStatus.setDescription('The status of the Voice Messaging Device. The Voice Messaging Device status changes from unknown to registered when it registers itself with the local CUCM.')
ccmVMailDevInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevInetAddressType.setDescription("This object identifies the IP address type of the Voice Messaging device. The value of this object is 'unknown(0)'if the IP address of the Voice Messaging device is not available.")
ccmVMailDevInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevInetAddress.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevInetAddress.setDescription('This object identifies the IP Address of the Voice Messaging Device. If the IP Address is not available then this object contains an empty string. The type of address for this is identified by ccmVMailDevInetAddressType.')
ccmVMailDevStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 8), CcmDevFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ccmVMailDevStatusReason.setDescription('The reason code associated with the Voice Messaging Device status change.')
ccmVMailDevTimeLastStatusUpdt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevTimeLastStatusUpdt.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevTimeLastStatusUpdt.setDescription('The time the status of the voice messaging device changed.')
ccmVMailDevTimeLastRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevTimeLastRegistered.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevTimeLastRegistered.setDescription('The time the Voice Messaging Device has last registered with the call manager.')
ccmVMailDevProductTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 11), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevProductTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevProductTypeIndex.setDescription('A positive value of this index is used to identify the related product type entry in the ccmProductTypeTable. A value of 0 indicates that the index to the ccmProductTypeTable is Unknown.')
ccmVMailDevUnregReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 12), CcmDevUnregCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevUnregReason.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevUnregReason.setDescription('The reason code associated with unregistered Voice Messaging Device.')
ccmVMailDevRegFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 1, 1, 13), CcmDevRegFailCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevRegFailReason.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevRegFailReason.setDescription('The reason code associated with registration failed Voice Messaging Device.')
ccmVoiceMailDeviceDirNumTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 2), )
if mibBuilder.loadTexts: ccmVoiceMailDeviceDirNumTable.setStatus('current')
if mibBuilder.loadTexts: ccmVoiceMailDeviceDirNumTable.setDescription('The table containing a list of directory numbers that are assigned to all of the registered and unregistered Voice Messaging Devices in the ccmVoiceMailDeviceTable.')
ccmVoiceMailDeviceDirNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 2, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmVMailDevIndex"), (0, "CISCO-CCM-MIB", "ccmVMailDevDirNumIndex"))
if mibBuilder.loadTexts: ccmVoiceMailDeviceDirNumEntry.setStatus('current')
if mibBuilder.loadTexts: ccmVoiceMailDeviceDirNumEntry.setDescription('An entry (conceptual row) in the VoiceMailDirNum Table, has the associated directory number for a Voice Messaging Device.')
ccmVMailDevDirNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 2, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmVMailDevDirNumIndex.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevDirNumIndex.setDescription('An arbitrary integer, selected by the local system, which identifies a Directory Number of a Voice Messaging Device.')
ccmVMailDevDirNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 12, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmVMailDevDirNum.setStatus('current')
if mibBuilder.loadTexts: ccmVMailDevDirNum.setDescription('The Directory Number of the Voice Messaging Device.')
ccmQualityReportAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 13, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccmQualityReportAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: ccmQualityReportAlarmEnable.setDescription('Allows the generation of the quality report alarm. true(1): Enabling this object will allow the CUCM agent to generate the ccmQualityReport alarm. This is the default value. false(2): Disabling this object will stop the generation of the ccmQualityReport alarm by the CUCM agent.')
ccmSIPDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1), )
if mibBuilder.loadTexts: ccmSIPDeviceTable.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDeviceTable.setDescription('The table containing a list of all SIP trunk in the CUCM cluster which the local CUCM is aware of. When the local CUCM is restarted, this table will be refreshed. If the local CUCM is down, then this table will be empty.')
ccmSIPDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1), ).setIndexNames((0, "CISCO-CCM-MIB", "ccmSIPDevIndex"))
if mibBuilder.loadTexts: ccmSIPDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDeviceEntry.setDescription('An entry (conceptual row) in the SIP Device Table, containing the information about a particular SIP Trunk Device.')
ccmSIPDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 1), CcmIndex())
if mibBuilder.loadTexts: ccmSIPDevIndex.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDevIndex.setDescription('An arbitrary integer, selected by the local CUCM, which identifies a SIP Trunk Device entry in the table.')
ccmSIPDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPDevName.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDevName.setDescription('The device name assigned to the SIP Trunk Device. This name is assigned when a new SIP Trunk device is added to the CallManager.')
ccmSIPDevProductTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 3), CcmIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPDevProductTypeIndex.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDevProductTypeIndex.setDescription('A positive value of this index is used to identify the related product type entry in the ccmProductTypeTable. A value of 0 indicates that the index to the ccmProductTypeTable is Unknown.')
ccmSIPDevDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPDevDescription.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDevDescription.setDescription('A description of the SIP Trunk device. This description is given when the SIP Trunk device is configured in the CUCM.')
ccmSIPDevInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPDevInetAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: ccmSIPDevInetAddressType.setDescription('Identifies the IP address type of the SIP Trunk Device.')
ccmSIPDevInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPDevInetAddress.setStatus('deprecated')
if mibBuilder.loadTexts: ccmSIPDevInetAddress.setDescription('Identifies last known IP Address of the SIP Trunk device. The type of address for this is identified by ccmSIPDevInetAddressType.')
ccmSIPInTransportProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 7), CcmSIPTransportProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPInTransportProtocolType.setStatus('current')
if mibBuilder.loadTexts: ccmSIPInTransportProtocolType.setDescription('Specifies the transport protocol type used by CallManager for setting up incoming SIP call.')
ccmSIPInPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPInPortNumber.setStatus('current')
if mibBuilder.loadTexts: ccmSIPInPortNumber.setDescription('Specifies the port number used by CallManager for setting up incoming SIP call.')
ccmSIPOutTransportProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 9), CcmSIPTransportProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPOutTransportProtocolType.setStatus('current')
if mibBuilder.loadTexts: ccmSIPOutTransportProtocolType.setDescription('Specifies the transport protocol type used by CallManager for setting up outgoing SIP call.')
ccmSIPOutPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 10), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPOutPortNumber.setStatus('current')
if mibBuilder.loadTexts: ccmSIPOutPortNumber.setDescription('Specifies the port number used by CallManager for setting up outgoing SIP call.')
ccmSIPDevInetAddressIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 11), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPDevInetAddressIPv4.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDevInetAddressIPv4.setDescription('This object identifies the last known primary IPv4 address of the SIP Trunk Device. This object contains value zero if IPV4 address is not available')
ccmSIPDevInetAddressIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 156, 1, 14, 1, 1, 12), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccmSIPDevInetAddressIPv6.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDevInetAddressIPv6.setDescription('This object identifies the last known primary IPv6 address of the SIP Trunk Device. This object contains value zero if IPV6 address is not available')
ccmMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 2))
ccmMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0))
ccmCallManagerFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 1)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmFailCauseCode"))
if mibBuilder.loadTexts: ccmCallManagerFailed.setStatus('current')
if mibBuilder.loadTexts: ccmCallManagerFailed.setDescription('This Notification signifies that the CallManager process detects a failure in one of its critical subsystems. It can also be detected from a heartbeat/event monitoring process.')
ccmPhoneFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 2)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmPhoneFailures"))
if mibBuilder.loadTexts: ccmPhoneFailed.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneFailed.setDescription('This Notification will be generated in the intervals specified in ccmPhoneFailedAlarmInterval if there is at least one entry in the ccmPhoneFailedTable.')
ccmPhoneStatusUpdate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 3)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmPhoneUpdates"))
if mibBuilder.loadTexts: ccmPhoneStatusUpdate.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneStatusUpdate.setDescription('This Notification will be generated in the intervals specified in ccmPhoneStatusUpdateInterv if there is at least one entry in the ccmPhoneStatusUpdateTable.')
ccmGatewayFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 4)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmGatewayName"), ("CISCO-CCM-MIB", "ccmGatewayInetAddressType"), ("CISCO-CCM-MIB", "ccmGatewayInetAddress"), ("CISCO-CCM-MIB", "ccmGatewayFailCauseCode"))
if mibBuilder.loadTexts: ccmGatewayFailed.setStatus('deprecated')
if mibBuilder.loadTexts: ccmGatewayFailed.setDescription('This Notification indicates that at least one gateway has attempted to register or communicate with the CallManager and failed.')
ccmMediaResourceListExhausted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 5)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmMediaResourceType"), ("CISCO-CCM-MIB", "ccmMediaResourceListName"))
if mibBuilder.loadTexts: ccmMediaResourceListExhausted.setStatus('current')
if mibBuilder.loadTexts: ccmMediaResourceListExhausted.setDescription('This Notification indicates that the CallManager has run out a certain specified type of resource.')
ccmRouteListExhausted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 6)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmRouteListName"))
if mibBuilder.loadTexts: ccmRouteListExhausted.setStatus('current')
if mibBuilder.loadTexts: ccmRouteListExhausted.setDescription('This Notification indicates that the CallManager could not find an available route in the indicated route list.')
ccmGatewayLayer2Change = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 7)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmGatewayName"), ("CISCO-CCM-MIB", "ccmGatewayInetAddressType"), ("CISCO-CCM-MIB", "ccmGatewayInetAddress"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfIndex"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfL2Status"))
if mibBuilder.loadTexts: ccmGatewayLayer2Change.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayLayer2Change.setDescription('This Notification is sent when the D-Channel/Layer 2 of an interface in a skinny gateway that has registered with the CallManager changes state.')
ccmMaliciousCall = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 8)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCalledDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCallingDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallTime"))
if mibBuilder.loadTexts: ccmMaliciousCall.setStatus('current')
if mibBuilder.loadTexts: ccmMaliciousCall.setDescription('This Notification is sent when a user registers a call as malicious with the local call manager.')
ccmQualityReport = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 9)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmQualityRprtSourceDevName"), ("CISCO-CCM-MIB", "ccmQualityRprtClusterId"), ("CISCO-CCM-MIB", "ccmQualityRprtCategory"), ("CISCO-CCM-MIB", "ccmQualityRprtReasonCode"), ("CISCO-CCM-MIB", "ccmQualityRprtTime"))
if mibBuilder.loadTexts: ccmQualityReport.setStatus('current')
if mibBuilder.loadTexts: ccmQualityReport.setDescription('This Notification is sent when a user reports a quality problem using the Quality Report Tool.')
ccmTLSConnectionFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 10)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmTLSDevName"), ("CISCO-CCM-MIB", "ccmTLSDevInetAddressType"), ("CISCO-CCM-MIB", "ccmTLSDevInetAddress"), ("CISCO-CCM-MIB", "ccmTLSConnectionFailReasonCode"), ("CISCO-CCM-MIB", "ccmTLSConnFailTime"))
if mibBuilder.loadTexts: ccmTLSConnectionFailure.setStatus('current')
if mibBuilder.loadTexts: ccmTLSConnectionFailure.setDescription('This Notification is sent when CallManager fails to open TLS connection for the indicated device.')
ccmGatewayFailedReason = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 156, 2, 0, 11)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmGatewayName"), ("CISCO-CCM-MIB", "ccmGatewayInetAddressType"), ("CISCO-CCM-MIB", "ccmGatewayInetAddress"), ("CISCO-CCM-MIB", "ccmGatewayRegFailCauseCode"))
if mibBuilder.loadTexts: ccmGatewayFailedReason.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayFailedReason.setDescription('This Notification indicates that at least one gateway has attempted to register or communicate with the CallManager and failed.')
ciscoCcmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 3))
ciscoCcmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1))
ciscoCcmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2))
ciscoCcmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1, 1)).setObjects(("CISCO-CCM-MIB", "ccmInfoGroup"), ("CISCO-CCM-MIB", "ccmPhoneInfoGroup"), ("CISCO-CCM-MIB", "ccmGatewayInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmMIBCompliance = ciscoCcmMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCcmMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-CCM-MIB.')
ciscoCcmMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1, 2)).setObjects(("CISCO-CCM-MIB", "ccmInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmPhoneInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmGatewayInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmMediaDeviceInfoGroup"), ("CISCO-CCM-MIB", "ccmGatekeeperInfoGroup"), ("CISCO-CCM-MIB", "ccmCTIDeviceInfoGroup"), ("CISCO-CCM-MIB", "ccmNotificationsInfoGroup"), ("CISCO-CCM-MIB", "ccmNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmMIBComplianceRev1 = ciscoCcmMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCcmMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-CCM-MIB.')
ciscoCcmMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1, 3)).setObjects(("CISCO-CCM-MIB", "ccmInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmPhoneInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmGatewayInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmMediaDeviceInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmCTIDeviceInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmNotificationsInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmNotificationsGroup"), ("CISCO-CCM-MIB", "ccmH323DeviceInfoGroup"), ("CISCO-CCM-MIB", "ccmVoiceMailDeviceInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmMIBComplianceRev2 = ciscoCcmMIBComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCcmMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO-CCM-MIB.')
ciscoCcmMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1, 4)).setObjects(("CISCO-CCM-MIB", "ccmInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmPhoneInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmGatewayInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmMediaDeviceInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmCTIDeviceInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmNotificationsInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmNotificationsGroupRev1"), ("CISCO-CCM-MIB", "ccmH323DeviceInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmVoiceMailDeviceInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmSIPDeviceInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmMIBComplianceRev3 = ciscoCcmMIBComplianceRev3.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCcmMIBComplianceRev3.setDescription('The compliance statement for entities which implement the CISCO-CCM-MIB.')
ciscoCcmMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1, 5)).setObjects(("CISCO-CCM-MIB", "ccmInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmPhoneInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmGatewayInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmMediaDeviceInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmCTIDeviceInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmNotificationsInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmNotificationsGroupRev2"), ("CISCO-CCM-MIB", "ccmH323DeviceInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmVoiceMailDeviceInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmSIPDeviceInfoGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmMIBComplianceRev4 = ciscoCcmMIBComplianceRev4.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCcmMIBComplianceRev4.setDescription('The compliance statement for entities which implement the CISCO-CCM-MIB.')
ciscoCcmMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1, 6)).setObjects(("CISCO-CCM-MIB", "ccmInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmPhoneInfoGroupRev5"), ("CISCO-CCM-MIB", "ccmGatewayInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmMediaDeviceInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmCTIDeviceInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmNotificationsInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmNotificationsGroupRev2"), ("CISCO-CCM-MIB", "ccmH323DeviceInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmVoiceMailDeviceInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmSIPDeviceInfoGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmMIBComplianceRev5 = ciscoCcmMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCcmMIBComplianceRev5.setDescription('The compliance statement for entities which implement the CISCO-CCM-MIB.')
ciscoCcmMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1, 7)).setObjects(("CISCO-CCM-MIB", "ccmInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmPhoneInfoGroupRev5"), ("CISCO-CCM-MIB", "ccmGatewayInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmMediaDeviceInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmCTIDeviceInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmNotificationsInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmNotificationsGroupRev2"), ("CISCO-CCM-MIB", "ccmH323DeviceInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmVoiceMailDeviceInfoGroupRev1"), ("CISCO-CCM-MIB", "ccmSIPDeviceInfoGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmMIBComplianceRev6 = ciscoCcmMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCcmMIBComplianceRev6.setDescription('The compliance statement for entities which implement the CISCO CUCM MIB.')
ciscoCcmMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 1, 8)).setObjects(("CISCO-CCM-MIB", "ccmInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmPhoneInfoGroupRev6"), ("CISCO-CCM-MIB", "ccmGatewayInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmMediaDeviceInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmCTIDeviceInfoGroupRev4"), ("CISCO-CCM-MIB", "ccmNotificationsInfoGroupRev5"), ("CISCO-CCM-MIB", "ccmNotificationsGroupRev3"), ("CISCO-CCM-MIB", "ccmH323DeviceInfoGroupRev3"), ("CISCO-CCM-MIB", "ccmVoiceMailDeviceInfoGroupRev2"), ("CISCO-CCM-MIB", "ccmSIPDeviceInfoGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCcmMIBComplianceRev7 = ciscoCcmMIBComplianceRev7.setStatus('current')
if mibBuilder.loadTexts: ciscoCcmMIBComplianceRev7.setDescription('The compliance statement for entities which implement the CISCO-CCM-MIB.')
ccmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 1)).setObjects(("CISCO-CCM-MIB", "ccmGroupName"), ("CISCO-CCM-MIB", "ccmGroupTftpDefault"), ("CISCO-CCM-MIB", "ccmName"), ("CISCO-CCM-MIB", "ccmDescription"), ("CISCO-CCM-MIB", "ccmVersion"), ("CISCO-CCM-MIB", "ccmStatus"), ("CISCO-CCM-MIB", "ccmCMGroupMappingCMPriority"), ("CISCO-CCM-MIB", "ccmRegionName"), ("CISCO-CCM-MIB", "ccmRegionAvailableBandWidth"), ("CISCO-CCM-MIB", "ccmTimeZoneName"), ("CISCO-CCM-MIB", "ccmTimeZoneOffset"), ("CISCO-CCM-MIB", "ccmDevicePoolName"), ("CISCO-CCM-MIB", "ccmDevicePoolRegionIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolTimeZoneIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolGroupIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmInfoGroup = ccmInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmInfoGroup.setDescription('A collection of objects which provide info about all CallManagers and its related information within a call manager cluster. It comprises of all the CallManager tables, apart from Region, TimeZone and Device Pool tables.')
ccmPhoneInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 2)).setObjects(("CISCO-CCM-MIB", "ccmPhonePhysicalAddress"), ("CISCO-CCM-MIB", "ccmPhoneType"), ("CISCO-CCM-MIB", "ccmPhoneDescription"), ("CISCO-CCM-MIB", "ccmPhoneUserName"), ("CISCO-CCM-MIB", "ccmPhoneIpAddress"), ("CISCO-CCM-MIB", "ccmPhoneStatus"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmPhoneE911Location"), ("CISCO-CCM-MIB", "ccmPhoneLoadID"), ("CISCO-CCM-MIB", "ccmPhoneLastError"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastError"), ("CISCO-CCM-MIB", "ccmPhoneDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmPhoneExtension"), ("CISCO-CCM-MIB", "ccmPhoneExtensionIpAddress"), ("CISCO-CCM-MIB", "ccmPhoneExtensionMultiLines"), ("CISCO-CCM-MIB", "ccmActivePhones"), ("CISCO-CCM-MIB", "ccmInActivePhones"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPhoneInfoGroup = ccmPhoneInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneInfoGroup.setDescription('A collection of objects which provide info about all phones within the scope of a CallManager. It comprises of the Phone and Phone Extension tables.')
ccmGatewayInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 3)).setObjects(("CISCO-CCM-MIB", "ccmGatewayName"), ("CISCO-CCM-MIB", "ccmGatewayType"), ("CISCO-CCM-MIB", "ccmGatewayDescription"), ("CISCO-CCM-MIB", "ccmGatewayStatus"), ("CISCO-CCM-MIB", "ccmGatewayDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmGatewayTrunkType"), ("CISCO-CCM-MIB", "ccmGatewayTrunkName"), ("CISCO-CCM-MIB", "ccmTrunkGatewayIndex"), ("CISCO-CCM-MIB", "ccmGatewayTrunkStatus"), ("CISCO-CCM-MIB", "ccmActiveGateways"), ("CISCO-CCM-MIB", "ccmInActiveGateways"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmGatewayInfoGroup = ccmGatewayInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayInfoGroup.setDescription('A collection of objects which provide info about all Gateways and Gateway Trunks within the scope of a CallManager. It comprises of the Gateway and Gateway Trunk tables.')
ccmInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 4)).setObjects(("CISCO-CCM-MIB", "ccmGroupName"), ("CISCO-CCM-MIB", "ccmGroupTftpDefault"), ("CISCO-CCM-MIB", "ccmName"), ("CISCO-CCM-MIB", "ccmDescription"), ("CISCO-CCM-MIB", "ccmVersion"), ("CISCO-CCM-MIB", "ccmStatus"), ("CISCO-CCM-MIB", "ccmInetAddressType"), ("CISCO-CCM-MIB", "ccmInetAddress"), ("CISCO-CCM-MIB", "ccmClusterId"), ("CISCO-CCM-MIB", "ccmCMGroupMappingCMPriority"), ("CISCO-CCM-MIB", "ccmRegionName"), ("CISCO-CCM-MIB", "ccmRegionAvailableBandWidth"), ("CISCO-CCM-MIB", "ccmTimeZoneName"), ("CISCO-CCM-MIB", "ccmTimeZoneOffset"), ("CISCO-CCM-MIB", "ccmDevicePoolName"), ("CISCO-CCM-MIB", "ccmDevicePoolRegionIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolTimeZoneIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolGroupIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmInfoGroupRev1 = ccmInfoGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ccmInfoGroupRev1.setDescription('A collection of objects which provide info about all CallManagers and its related information within a call manager cluster. It comprises of all the CallManager tables, apart from Region, TimeZone and Device Pool tables.')
ccmPhoneInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 5)).setObjects(("CISCO-CCM-MIB", "ccmPhonePhysicalAddress"), ("CISCO-CCM-MIB", "ccmPhoneType"), ("CISCO-CCM-MIB", "ccmPhoneDescription"), ("CISCO-CCM-MIB", "ccmPhoneUserName"), ("CISCO-CCM-MIB", "ccmPhoneInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneStatus"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmPhoneE911Location"), ("CISCO-CCM-MIB", "ccmPhoneLoadID"), ("CISCO-CCM-MIB", "ccmPhoneLastError"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastError"), ("CISCO-CCM-MIB", "ccmPhoneDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmPhoneExtension"), ("CISCO-CCM-MIB", "ccmPhoneExtensionInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneExtensionInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneExtensionMultiLines"), ("CISCO-CCM-MIB", "ccmActivePhones"), ("CISCO-CCM-MIB", "ccmInActivePhones"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPhoneInfoGroupRev1 = ccmPhoneInfoGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneInfoGroupRev1.setDescription('A collection of objects which provide info about all phones within the scope of a CallManager. It comprises of the Phone and Phone Extension tables.')
ccmGatewayInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 6)).setObjects(("CISCO-CCM-MIB", "ccmGatewayName"), ("CISCO-CCM-MIB", "ccmGatewayType"), ("CISCO-CCM-MIB", "ccmGatewayDescription"), ("CISCO-CCM-MIB", "ccmGatewayStatus"), ("CISCO-CCM-MIB", "ccmGatewayDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmGatewayInetAddressType"), ("CISCO-CCM-MIB", "ccmGatewayInetAddress"), ("CISCO-CCM-MIB", "ccmActiveGateways"), ("CISCO-CCM-MIB", "ccmInActiveGateways"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmGatewayInfoGroupRev1 = ccmGatewayInfoGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayInfoGroupRev1.setDescription('A collection of objects which provide info about all Gateways and Gateway Trunks within the scope of a CallManager. It comprises of the Gateway and Gateway Trunk tables.')
ccmMediaDeviceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 7)).setObjects(("CISCO-CCM-MIB", "ccmMediaDeviceName"), ("CISCO-CCM-MIB", "ccmMediaDeviceType"), ("CISCO-CCM-MIB", "ccmMediaDeviceDescription"), ("CISCO-CCM-MIB", "ccmMediaDeviceStatus"), ("CISCO-CCM-MIB", "ccmMediaDeviceDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddressType"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMediaDeviceInfoGroup = ccmMediaDeviceInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmMediaDeviceInfoGroup.setDescription('A collection of objects which provide info about all Media Devices within the scope of a CallManager. It comprises of the MediaDevice table.')
ccmGatekeeperInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 8)).setObjects(("CISCO-CCM-MIB", "ccmGatekeeperName"), ("CISCO-CCM-MIB", "ccmGatekeeperType"), ("CISCO-CCM-MIB", "ccmGatekeeperDescription"), ("CISCO-CCM-MIB", "ccmGatekeeperStatus"), ("CISCO-CCM-MIB", "ccmGatekeeperDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmGatekeeperInetAddressType"), ("CISCO-CCM-MIB", "ccmGatekeeperInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmGatekeeperInfoGroup = ccmGatekeeperInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatekeeperInfoGroup.setDescription('A collection of objects which provide info about all Gatekeeper within the scope of a CallManager. It comprises of the Gatekeeper table.')
ccmCTIDeviceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 9)).setObjects(("CISCO-CCM-MIB", "ccmCTIDeviceName"), ("CISCO-CCM-MIB", "ccmCTIDeviceType"), ("CISCO-CCM-MIB", "ccmCTIDeviceDescription"), ("CISCO-CCM-MIB", "ccmCTIDeviceStatus"), ("CISCO-CCM-MIB", "ccmCTIDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddressType"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddress"), ("CISCO-CCM-MIB", "ccmCTIDeviceAppInfo"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCTIDeviceInfoGroup = ccmCTIDeviceInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmCTIDeviceInfoGroup.setDescription('A collection of objects which provide info about all CTI Devices within the scope of a CallManager. It comprises of the ccmCTIDevice and ccmCTIDeviceDirNum tables.')
ccmNotificationsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 10)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmCallManagerAlarmEnable"), ("CISCO-CCM-MIB", "ccmFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailures"), ("CISCO-CCM-MIB", "ccmPhoneFailedTime"), ("CISCO-CCM-MIB", "ccmPhoneFailedName"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailedAlarmInterval"), ("CISCO-CCM-MIB", "ccmPhoneFailedStorePeriod"), ("CISCO-CCM-MIB", "ccmPhoneUpdates"), ("CISCO-CCM-MIB", "ccmPhoneStatusPhoneIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTime"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateType"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateAlarmInterv"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateStorePeriod"), ("CISCO-CCM-MIB", "ccmGatewayAlarmEnable"), ("CISCO-CCM-MIB", "ccmGatewayFailCauseCode"), ("CISCO-CCM-MIB", "ccmMediaResourceType"), ("CISCO-CCM-MIB", "ccmMediaResourceListName"), ("CISCO-CCM-MIB", "ccmRouteListName"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfIndex"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfL2Status"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsInfoGroup = ccmNotificationsInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmNotificationsInfoGroup.setDescription('A collection of objects which provide info about all the Notifications generated by the CUCM Agent.')
ccmNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 11)).setObjects(("CISCO-CCM-MIB", "ccmCallManagerFailed"), ("CISCO-CCM-MIB", "ccmPhoneFailed"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdate"), ("CISCO-CCM-MIB", "ccmGatewayFailed"), ("CISCO-CCM-MIB", "ccmMediaResourceListExhausted"), ("CISCO-CCM-MIB", "ccmRouteListExhausted"), ("CISCO-CCM-MIB", "ccmGatewayLayer2Change"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsGroup = ccmNotificationsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmNotificationsGroup.setDescription('A collection of notifications that are generated by the CUCM Agent.')
ccmInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 12)).setObjects(("CISCO-CCM-MIB", "ccmGroupName"), ("CISCO-CCM-MIB", "ccmGroupTftpDefault"), ("CISCO-CCM-MIB", "ccmName"), ("CISCO-CCM-MIB", "ccmDescription"), ("CISCO-CCM-MIB", "ccmVersion"), ("CISCO-CCM-MIB", "ccmStatus"), ("CISCO-CCM-MIB", "ccmInetAddressType"), ("CISCO-CCM-MIB", "ccmInetAddress"), ("CISCO-CCM-MIB", "ccmClusterId"), ("CISCO-CCM-MIB", "ccmCMGroupMappingCMPriority"), ("CISCO-CCM-MIB", "ccmRegionName"), ("CISCO-CCM-MIB", "ccmRegionAvailableBandWidth"), ("CISCO-CCM-MIB", "ccmTimeZoneName"), ("CISCO-CCM-MIB", "ccmTimeZoneOffsetHours"), ("CISCO-CCM-MIB", "ccmTimeZoneOffsetMinutes"), ("CISCO-CCM-MIB", "ccmDevicePoolName"), ("CISCO-CCM-MIB", "ccmDevicePoolRegionIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolTimeZoneIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolGroupIndex"), ("CISCO-CCM-MIB", "ccmCallManagerStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmInfoGroupRev2 = ccmInfoGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ccmInfoGroupRev2.setDescription('A collection of objects which provide info about all CallManagers and its related information within a call manager cluster. It comprises of GroupTable, ccmTable, GroupMappingTable, Region, TimeZone, and Device Pool tables.')
ccmPhoneInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 13)).setObjects(("CISCO-CCM-MIB", "ccmPhonePhysicalAddress"), ("CISCO-CCM-MIB", "ccmPhoneType"), ("CISCO-CCM-MIB", "ccmPhoneDescription"), ("CISCO-CCM-MIB", "ccmPhoneUserName"), ("CISCO-CCM-MIB", "ccmPhoneInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneStatus"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmPhoneE911Location"), ("CISCO-CCM-MIB", "ccmPhoneLoadID"), ("CISCO-CCM-MIB", "ccmPhoneDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusReason"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmPhoneExtn"), ("CISCO-CCM-MIB", "ccmPhoneExtnMultiLines"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddress"), ("CISCO-CCM-MIB", "ccmRegisteredPhones"), ("CISCO-CCM-MIB", "ccmUnregisteredPhones"), ("CISCO-CCM-MIB", "ccmRejectedPhones"), ("CISCO-CCM-MIB", "ccmPhoneTableStateId"), ("CISCO-CCM-MIB", "ccmPhoneExtensionTableStateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPhoneInfoGroupRev2 = ccmPhoneInfoGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneInfoGroupRev2.setDescription('A collection of objects which provide info about all phones within the scope of the local CallManager. It comprises of the Phone and Phone Extension tables.')
ccmGatewayInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 14)).setObjects(("CISCO-CCM-MIB", "ccmGatewayName"), ("CISCO-CCM-MIB", "ccmGatewayType"), ("CISCO-CCM-MIB", "ccmGatewayDescription"), ("CISCO-CCM-MIB", "ccmGatewayStatus"), ("CISCO-CCM-MIB", "ccmGatewayDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmGatewayInetAddressType"), ("CISCO-CCM-MIB", "ccmGatewayInetAddress"), ("CISCO-CCM-MIB", "ccmGatewayProductId"), ("CISCO-CCM-MIB", "ccmGatewayStatusReason"), ("CISCO-CCM-MIB", "ccmGatewayTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmGatewayTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmGatewayDChannelStatus"), ("CISCO-CCM-MIB", "ccmGatewayDChannelNumber"), ("CISCO-CCM-MIB", "ccmRegisteredGateways"), ("CISCO-CCM-MIB", "ccmUnregisteredGateways"), ("CISCO-CCM-MIB", "ccmRejectedGateways"), ("CISCO-CCM-MIB", "ccmGatewayTableStateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmGatewayInfoGroupRev2 = ccmGatewayInfoGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ccmGatewayInfoGroupRev2.setDescription('A collection of objects which provide info about all Gateways within the scope of the local CallManager. It comprises of the Gateway table.')
ccmMediaDeviceInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 15)).setObjects(("CISCO-CCM-MIB", "ccmMediaDeviceName"), ("CISCO-CCM-MIB", "ccmMediaDeviceType"), ("CISCO-CCM-MIB", "ccmMediaDeviceDescription"), ("CISCO-CCM-MIB", "ccmMediaDeviceStatus"), ("CISCO-CCM-MIB", "ccmMediaDeviceDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddressType"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddress"), ("CISCO-CCM-MIB", "ccmMediaDeviceStatusReason"), ("CISCO-CCM-MIB", "ccmMediaDeviceTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmMediaDeviceTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmRegisteredMediaDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredMediaDevices"), ("CISCO-CCM-MIB", "ccmRejectedMediaDevices"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMediaDeviceInfoGroupRev1 = ccmMediaDeviceInfoGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ccmMediaDeviceInfoGroupRev1.setDescription('A collection of objects which provide info about all Media Devices within the scope of the local CallManager. It comprises of the MediaDevice table.')
ccmCTIDeviceInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 16)).setObjects(("CISCO-CCM-MIB", "ccmCTIDeviceName"), ("CISCO-CCM-MIB", "ccmCTIDeviceType"), ("CISCO-CCM-MIB", "ccmCTIDeviceDescription"), ("CISCO-CCM-MIB", "ccmCTIDeviceStatus"), ("CISCO-CCM-MIB", "ccmCTIDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddressType"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddress"), ("CISCO-CCM-MIB", "ccmCTIDeviceStatusReason"), ("CISCO-CCM-MIB", "ccmCTIDeviceTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmCTIDeviceTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNum"), ("CISCO-CCM-MIB", "ccmRegisteredCTIDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredCTIDevices"), ("CISCO-CCM-MIB", "ccmRejectedCTIDevices"), ("CISCO-CCM-MIB", "ccmCTIDeviceTableStateId"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNumTableStateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCTIDeviceInfoGroupRev1 = ccmCTIDeviceInfoGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ccmCTIDeviceInfoGroupRev1.setDescription('A collection of objects which provide info about all CTI Devices within the scope of the local CallManager. It comprises of the ccmCTIDevice and ccmCTIDeviceDirNum tables.')
ccmH323DeviceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 17)).setObjects(("CISCO-CCM-MIB", "ccmH323DevName"), ("CISCO-CCM-MIB", "ccmH323DevProductId"), ("CISCO-CCM-MIB", "ccmH323DevDescription"), ("CISCO-CCM-MIB", "ccmH323DevInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevCnfgGKInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevCnfgGKInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK1InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK1InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK2InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK2InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK3InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK3InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK4InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK4InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK5InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK5InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevActGKInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevActGKInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevStatus"), ("CISCO-CCM-MIB", "ccmH323DevStatusReason"), ("CISCO-CCM-MIB", "ccmH323DevTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmH323DevTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM1InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM1InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM2InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM2InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM3InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM3InetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmH323DeviceInfoGroup = ccmH323DeviceInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmH323DeviceInfoGroup.setDescription('A collection of objects which provide info about all H323 devices within the scope of the local CallManager. It comprises of the H323Device table.')
ccmVoiceMailDeviceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 18)).setObjects(("CISCO-CCM-MIB", "ccmVMailDevName"), ("CISCO-CCM-MIB", "ccmVMailDevProductId"), ("CISCO-CCM-MIB", "ccmVMailDevDescription"), ("CISCO-CCM-MIB", "ccmVMailDevStatus"), ("CISCO-CCM-MIB", "ccmVMailDevInetAddressType"), ("CISCO-CCM-MIB", "ccmVMailDevInetAddress"), ("CISCO-CCM-MIB", "ccmVMailDevStatusReason"), ("CISCO-CCM-MIB", "ccmVMailDevTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmVMailDevTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmVMailDevDirNum"), ("CISCO-CCM-MIB", "ccmRegisteredVoiceMailDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredVoiceMailDevices"), ("CISCO-CCM-MIB", "ccmRejectedVoiceMailDevices"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmVoiceMailDeviceInfoGroup = ccmVoiceMailDeviceInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmVoiceMailDeviceInfoGroup.setDescription('A collection of objects which provide info about all Voice Messaging Devices within the scope of the local CallManager. It comprises of the ccmVoiceMailDevice and ccmVoiceMailDirNum tables.')
ccmNotificationsInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 19)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmCallManagerAlarmEnable"), ("CISCO-CCM-MIB", "ccmFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailures"), ("CISCO-CCM-MIB", "ccmPhoneFailedTime"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailedMacAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailedAlarmInterval"), ("CISCO-CCM-MIB", "ccmPhoneFailedStorePeriod"), ("CISCO-CCM-MIB", "ccmPhFailedTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmPhoneUpdates"), ("CISCO-CCM-MIB", "ccmPhoneStatusPhoneIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTime"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateType"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateReason"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateAlarmInterv"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateStorePeriod"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTableStateId"), ("CISCO-CCM-MIB", "ccmPhStatUpdtTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmGatewayAlarmEnable"), ("CISCO-CCM-MIB", "ccmGatewayFailCauseCode"), ("CISCO-CCM-MIB", "ccmMediaResourceType"), ("CISCO-CCM-MIB", "ccmMediaResourceListName"), ("CISCO-CCM-MIB", "ccmRouteListName"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfIndex"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfL2Status"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsInfoGroupRev1 = ccmNotificationsInfoGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ccmNotificationsInfoGroupRev1.setDescription('A collection of objects which provide info about all the Notifications generated by the CUCM Agent.')
ccmInfoGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 20)).setObjects(("CISCO-CCM-MIB", "ccmGroupName"), ("CISCO-CCM-MIB", "ccmGroupTftpDefault"), ("CISCO-CCM-MIB", "ccmName"), ("CISCO-CCM-MIB", "ccmDescription"), ("CISCO-CCM-MIB", "ccmVersion"), ("CISCO-CCM-MIB", "ccmStatus"), ("CISCO-CCM-MIB", "ccmInetAddressType"), ("CISCO-CCM-MIB", "ccmInetAddress"), ("CISCO-CCM-MIB", "ccmClusterId"), ("CISCO-CCM-MIB", "ccmCMGroupMappingCMPriority"), ("CISCO-CCM-MIB", "ccmRegionName"), ("CISCO-CCM-MIB", "ccmRegionAvailableBandWidth"), ("CISCO-CCM-MIB", "ccmTimeZoneName"), ("CISCO-CCM-MIB", "ccmTimeZoneOffsetHours"), ("CISCO-CCM-MIB", "ccmTimeZoneOffsetMinutes"), ("CISCO-CCM-MIB", "ccmDevicePoolName"), ("CISCO-CCM-MIB", "ccmDevicePoolRegionIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolTimeZoneIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolGroupIndex"), ("CISCO-CCM-MIB", "ccmProductType"), ("CISCO-CCM-MIB", "ccmProductName"), ("CISCO-CCM-MIB", "ccmProductCategory"), ("CISCO-CCM-MIB", "ccmCallManagerStartTime"), ("CISCO-CCM-MIB", "ccmSystemVersion"), ("CISCO-CCM-MIB", "ccmInstallationId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmInfoGroupRev3 = ccmInfoGroupRev3.setStatus('obsolete')
if mibBuilder.loadTexts: ccmInfoGroupRev3.setDescription('A collection of objects which provide info about all CallManagers and its related information within a call manager cluster. It comprises of GroupTable, ccmTable, GroupMappingTable, Region, TimeZone, Device Pool and ProductType tables.')
ccmNotificationsInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 21)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmCallManagerAlarmEnable"), ("CISCO-CCM-MIB", "ccmFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailures"), ("CISCO-CCM-MIB", "ccmPhoneFailedTime"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailedMacAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailedAlarmInterval"), ("CISCO-CCM-MIB", "ccmPhoneFailedStorePeriod"), ("CISCO-CCM-MIB", "ccmPhFailedTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmPhoneUpdates"), ("CISCO-CCM-MIB", "ccmPhoneStatusPhoneIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTime"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateType"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateReason"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateAlarmInterv"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateStorePeriod"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTableStateId"), ("CISCO-CCM-MIB", "ccmPhStatUpdtTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmGatewayAlarmEnable"), ("CISCO-CCM-MIB", "ccmGatewayFailCauseCode"), ("CISCO-CCM-MIB", "ccmMediaResourceType"), ("CISCO-CCM-MIB", "ccmMediaResourceListName"), ("CISCO-CCM-MIB", "ccmRouteListName"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfIndex"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfL2Status"), ("CISCO-CCM-MIB", "ccmMaliciousCallAlarmEnable"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCalledDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCallingDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallTime"), ("CISCO-CCM-MIB", "ccmQualityReportAlarmEnable"), ("CISCO-CCM-MIB", "ccmQualityRprtSourceDevName"), ("CISCO-CCM-MIB", "ccmQualityRprtClusterId"), ("CISCO-CCM-MIB", "ccmQualityRprtCategory"), ("CISCO-CCM-MIB", "ccmQualityRprtReasonCode"), ("CISCO-CCM-MIB", "ccmQualityRprtTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsInfoGroupRev2 = ccmNotificationsInfoGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ccmNotificationsInfoGroupRev2.setDescription('A collection of objects which provide info about all the Notifications generated by the CUCM Agent.')
ccmNotificationsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 22)).setObjects(("CISCO-CCM-MIB", "ccmCallManagerFailed"), ("CISCO-CCM-MIB", "ccmPhoneFailed"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdate"), ("CISCO-CCM-MIB", "ccmGatewayFailed"), ("CISCO-CCM-MIB", "ccmMediaResourceListExhausted"), ("CISCO-CCM-MIB", "ccmRouteListExhausted"), ("CISCO-CCM-MIB", "ccmGatewayLayer2Change"), ("CISCO-CCM-MIB", "ccmMaliciousCall"), ("CISCO-CCM-MIB", "ccmQualityReport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsGroupRev1 = ccmNotificationsGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ccmNotificationsGroupRev1.setDescription('A collection of notifications that are generated by the CUCM Agent.')
ccmSIPDeviceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 23)).setObjects(("CISCO-CCM-MIB", "ccmSIPDevName"), ("CISCO-CCM-MIB", "ccmSIPDevProductTypeIndex"), ("CISCO-CCM-MIB", "ccmSIPDevDescription"), ("CISCO-CCM-MIB", "ccmSIPDevInetAddressType"), ("CISCO-CCM-MIB", "ccmSIPDevInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSIPDeviceInfoGroup = ccmSIPDeviceInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ccmSIPDeviceInfoGroup.setDescription('A collection of objects which provide info about all SIP devices within the scope of the local CallManager. It comprises of the SIP Device table.')
ccmPhoneInfoGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 24)).setObjects(("CISCO-CCM-MIB", "ccmPhonePhysicalAddress"), ("CISCO-CCM-MIB", "ccmPhoneDescription"), ("CISCO-CCM-MIB", "ccmPhoneUserName"), ("CISCO-CCM-MIB", "ccmPhoneInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneStatus"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmPhoneE911Location"), ("CISCO-CCM-MIB", "ccmPhoneLoadID"), ("CISCO-CCM-MIB", "ccmPhoneDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusReason"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmPhoneProductTypeIndex"), ("CISCO-CCM-MIB", "ccmPhoneExtn"), ("CISCO-CCM-MIB", "ccmPhoneExtnMultiLines"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddress"), ("CISCO-CCM-MIB", "ccmRegisteredPhones"), ("CISCO-CCM-MIB", "ccmUnregisteredPhones"), ("CISCO-CCM-MIB", "ccmRejectedPhones"), ("CISCO-CCM-MIB", "ccmPhoneTableStateId"), ("CISCO-CCM-MIB", "ccmPhoneExtensionTableStateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPhoneInfoGroupRev3 = ccmPhoneInfoGroupRev3.setStatus('obsolete')
if mibBuilder.loadTexts: ccmPhoneInfoGroupRev3.setDescription('A collection of objects which provide info about all phones within the scope of the local CallManager. It comprises of the Phone and Phone Extension tables.')
ccmGatewayInfoGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 25)).setObjects(("CISCO-CCM-MIB", "ccmGatewayName"), ("CISCO-CCM-MIB", "ccmGatewayDescription"), ("CISCO-CCM-MIB", "ccmGatewayStatus"), ("CISCO-CCM-MIB", "ccmGatewayDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmGatewayInetAddressType"), ("CISCO-CCM-MIB", "ccmGatewayInetAddress"), ("CISCO-CCM-MIB", "ccmGatewayStatusReason"), ("CISCO-CCM-MIB", "ccmGatewayTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmGatewayTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmGatewayDChannelStatus"), ("CISCO-CCM-MIB", "ccmGatewayDChannelNumber"), ("CISCO-CCM-MIB", "ccmGatewayProductTypeIndex"), ("CISCO-CCM-MIB", "ccmRegisteredGateways"), ("CISCO-CCM-MIB", "ccmUnregisteredGateways"), ("CISCO-CCM-MIB", "ccmRejectedGateways"), ("CISCO-CCM-MIB", "ccmGatewayTableStateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmGatewayInfoGroupRev3 = ccmGatewayInfoGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ccmGatewayInfoGroupRev3.setDescription('A collection of objects which provide info about all Gateways within the scope of the local CallManager. It comprises of the Gateway table.')
ccmMediaDeviceInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 26)).setObjects(("CISCO-CCM-MIB", "ccmMediaDeviceName"), ("CISCO-CCM-MIB", "ccmMediaDeviceDescription"), ("CISCO-CCM-MIB", "ccmMediaDeviceStatus"), ("CISCO-CCM-MIB", "ccmMediaDeviceDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddressType"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddress"), ("CISCO-CCM-MIB", "ccmMediaDeviceStatusReason"), ("CISCO-CCM-MIB", "ccmMediaDeviceTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmMediaDeviceTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmMediaDeviceProductTypeIndex"), ("CISCO-CCM-MIB", "ccmRegisteredMediaDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredMediaDevices"), ("CISCO-CCM-MIB", "ccmRejectedMediaDevices"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMediaDeviceInfoGroupRev2 = ccmMediaDeviceInfoGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ccmMediaDeviceInfoGroupRev2.setDescription('A collection of objects which provide info about all Media Devices within the scope of the local CallManager. It comprises of the MediaDevice table.')
ccmCTIDeviceInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 27)).setObjects(("CISCO-CCM-MIB", "ccmCTIDeviceName"), ("CISCO-CCM-MIB", "ccmCTIDeviceDescription"), ("CISCO-CCM-MIB", "ccmCTIDeviceStatus"), ("CISCO-CCM-MIB", "ccmCTIDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddressType"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddress"), ("CISCO-CCM-MIB", "ccmCTIDeviceStatusReason"), ("CISCO-CCM-MIB", "ccmCTIDeviceTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmCTIDeviceTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmCTIDeviceProductTypeIndex"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNum"), ("CISCO-CCM-MIB", "ccmRegisteredCTIDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredCTIDevices"), ("CISCO-CCM-MIB", "ccmRejectedCTIDevices"), ("CISCO-CCM-MIB", "ccmCTIDeviceTableStateId"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNumTableStateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCTIDeviceInfoGroupRev2 = ccmCTIDeviceInfoGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ccmCTIDeviceInfoGroupRev2.setDescription('A collection of objects which provide info about all CTI Devices within the scope of the local CallManager. It comprises of the ccmCTIDevice and ccmCTIDeviceDirNum tables.')
ccmH323DeviceInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 28)).setObjects(("CISCO-CCM-MIB", "ccmH323DevName"), ("CISCO-CCM-MIB", "ccmH323DevDescription"), ("CISCO-CCM-MIB", "ccmH323DevInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevCnfgGKInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevCnfgGKInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK1InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK1InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK2InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK2InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK3InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK3InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK4InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK4InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK5InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK5InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevActGKInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevActGKInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevStatus"), ("CISCO-CCM-MIB", "ccmH323DevStatusReason"), ("CISCO-CCM-MIB", "ccmH323DevTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmH323DevTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM1InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM1InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM2InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM2InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM3InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM3InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevProductTypeIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmH323DeviceInfoGroupRev1 = ccmH323DeviceInfoGroupRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ccmH323DeviceInfoGroupRev1.setDescription('A collection of objects which provide info about all H323 devices within the scope of the local CallManager. It comprises of the H323Device table.')
ccmVoiceMailDeviceInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 29)).setObjects(("CISCO-CCM-MIB", "ccmVMailDevName"), ("CISCO-CCM-MIB", "ccmVMailDevDescription"), ("CISCO-CCM-MIB", "ccmVMailDevStatus"), ("CISCO-CCM-MIB", "ccmVMailDevInetAddressType"), ("CISCO-CCM-MIB", "ccmVMailDevInetAddress"), ("CISCO-CCM-MIB", "ccmVMailDevStatusReason"), ("CISCO-CCM-MIB", "ccmVMailDevTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmVMailDevTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmVMailDevProductTypeIndex"), ("CISCO-CCM-MIB", "ccmVMailDevDirNum"), ("CISCO-CCM-MIB", "ccmRegisteredVoiceMailDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredVoiceMailDevices"), ("CISCO-CCM-MIB", "ccmRejectedVoiceMailDevices"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmVoiceMailDeviceInfoGroupRev1 = ccmVoiceMailDeviceInfoGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ccmVoiceMailDeviceInfoGroupRev1.setDescription('A collection of objects which provide info about all Voice Messaging Devices within the scope of the local CallManager. It comprises of the ccmVoiceMailDevice and ccmVoiceMailDirNum tables.')
ccmPhoneInfoGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 30)).setObjects(("CISCO-CCM-MIB", "ccmPhonePhysicalAddress"), ("CISCO-CCM-MIB", "ccmPhoneDescription"), ("CISCO-CCM-MIB", "ccmPhoneUserName"), ("CISCO-CCM-MIB", "ccmPhoneInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneStatus"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmPhoneE911Location"), ("CISCO-CCM-MIB", "ccmPhoneLoadID"), ("CISCO-CCM-MIB", "ccmPhoneDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusReason"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmPhoneProductTypeIndex"), ("CISCO-CCM-MIB", "ccmPhoneProtocol"), ("CISCO-CCM-MIB", "ccmPhoneName"), ("CISCO-CCM-MIB", "ccmPhoneExtn"), ("CISCO-CCM-MIB", "ccmPhoneExtnMultiLines"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneExtnStatus"), ("CISCO-CCM-MIB", "ccmRegisteredPhones"), ("CISCO-CCM-MIB", "ccmUnregisteredPhones"), ("CISCO-CCM-MIB", "ccmRejectedPhones"), ("CISCO-CCM-MIB", "ccmPartiallyRegisteredPhones"), ("CISCO-CCM-MIB", "ccmPhoneTableStateId"), ("CISCO-CCM-MIB", "ccmPhoneExtensionTableStateId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPhoneInfoGroupRev4 = ccmPhoneInfoGroupRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneInfoGroupRev4.setDescription('A collection of objects which provide info about all phones within the scope of the local CallManager. It comprises of the Phone and Phone Extension tables.')
ccmSIPDeviceInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 31)).setObjects(("CISCO-CCM-MIB", "ccmSIPDevName"), ("CISCO-CCM-MIB", "ccmSIPDevProductTypeIndex"), ("CISCO-CCM-MIB", "ccmSIPDevDescription"), ("CISCO-CCM-MIB", "ccmSIPDevInetAddressType"), ("CISCO-CCM-MIB", "ccmSIPDevInetAddress"), ("CISCO-CCM-MIB", "ccmSIPInTransportProtocolType"), ("CISCO-CCM-MIB", "ccmSIPInPortNumber"), ("CISCO-CCM-MIB", "ccmSIPOutTransportProtocolType"), ("CISCO-CCM-MIB", "ccmSIPOutPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSIPDeviceInfoGroupRev1 = ccmSIPDeviceInfoGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ccmSIPDeviceInfoGroupRev1.setDescription('A collection of objects which provide info about all SIP Trunk devices within the scope of the local CallManager. It comprises of the SIP Device table.')
ccmNotificationsInfoGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 32)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmCallManagerAlarmEnable"), ("CISCO-CCM-MIB", "ccmFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailures"), ("CISCO-CCM-MIB", "ccmPhoneFailedTime"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailedMacAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailedAlarmInterval"), ("CISCO-CCM-MIB", "ccmPhoneFailedStorePeriod"), ("CISCO-CCM-MIB", "ccmPhFailedTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmPhoneUpdates"), ("CISCO-CCM-MIB", "ccmPhoneStatusPhoneIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTime"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateType"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateReason"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateAlarmInterv"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateStorePeriod"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTableStateId"), ("CISCO-CCM-MIB", "ccmPhStatUpdtTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmGatewayAlarmEnable"), ("CISCO-CCM-MIB", "ccmGatewayFailCauseCode"), ("CISCO-CCM-MIB", "ccmMediaResourceType"), ("CISCO-CCM-MIB", "ccmMediaResourceListName"), ("CISCO-CCM-MIB", "ccmRouteListName"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfIndex"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfL2Status"), ("CISCO-CCM-MIB", "ccmMaliciousCallAlarmEnable"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCalledDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCallingDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallTime"), ("CISCO-CCM-MIB", "ccmQualityReportAlarmEnable"), ("CISCO-CCM-MIB", "ccmQualityRprtSourceDevName"), ("CISCO-CCM-MIB", "ccmQualityRprtClusterId"), ("CISCO-CCM-MIB", "ccmQualityRprtCategory"), ("CISCO-CCM-MIB", "ccmQualityRprtReasonCode"), ("CISCO-CCM-MIB", "ccmQualityRprtTime"), ("CISCO-CCM-MIB", "ccmTLSDevName"), ("CISCO-CCM-MIB", "ccmTLSDevInetAddressType"), ("CISCO-CCM-MIB", "ccmTLSDevInetAddress"), ("CISCO-CCM-MIB", "ccmTLSConnFailTime"), ("CISCO-CCM-MIB", "ccmTLSConnectionFailReasonCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsInfoGroupRev3 = ccmNotificationsInfoGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ccmNotificationsInfoGroupRev3.setDescription('A collection of objects which provide info about all the Notifications generated by the CUCM Agent.')
ccmNotificationsGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 33)).setObjects(("CISCO-CCM-MIB", "ccmCallManagerFailed"), ("CISCO-CCM-MIB", "ccmPhoneFailed"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdate"), ("CISCO-CCM-MIB", "ccmGatewayFailed"), ("CISCO-CCM-MIB", "ccmMediaResourceListExhausted"), ("CISCO-CCM-MIB", "ccmRouteListExhausted"), ("CISCO-CCM-MIB", "ccmGatewayLayer2Change"), ("CISCO-CCM-MIB", "ccmMaliciousCall"), ("CISCO-CCM-MIB", "ccmQualityReport"), ("CISCO-CCM-MIB", "ccmTLSConnectionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsGroupRev2 = ccmNotificationsGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ccmNotificationsGroupRev2.setDescription('A collection of notifications that are generated by the CUCM Agent.')
ccmInfoGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 34)).setObjects(("CISCO-CCM-MIB", "ccmGroupName"), ("CISCO-CCM-MIB", "ccmGroupTftpDefault"), ("CISCO-CCM-MIB", "ccmName"), ("CISCO-CCM-MIB", "ccmDescription"), ("CISCO-CCM-MIB", "ccmVersion"), ("CISCO-CCM-MIB", "ccmStatus"), ("CISCO-CCM-MIB", "ccmInetAddressType"), ("CISCO-CCM-MIB", "ccmInetAddress"), ("CISCO-CCM-MIB", "ccmClusterId"), ("CISCO-CCM-MIB", "ccmCMGroupMappingCMPriority"), ("CISCO-CCM-MIB", "ccmRegionName"), ("CISCO-CCM-MIB", "ccmRegionAvailableBandWidth"), ("CISCO-CCM-MIB", "ccmTimeZoneName"), ("CISCO-CCM-MIB", "ccmTimeZoneOffsetHours"), ("CISCO-CCM-MIB", "ccmTimeZoneOffsetMinutes"), ("CISCO-CCM-MIB", "ccmDevicePoolName"), ("CISCO-CCM-MIB", "ccmDevicePoolRegionIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolTimeZoneIndex"), ("CISCO-CCM-MIB", "ccmDevicePoolGroupIndex"), ("CISCO-CCM-MIB", "ccmProductType"), ("CISCO-CCM-MIB", "ccmProductName"), ("CISCO-CCM-MIB", "ccmProductCategory"), ("CISCO-CCM-MIB", "ccmCallManagerStartTime"), ("CISCO-CCM-MIB", "ccmSystemVersion"), ("CISCO-CCM-MIB", "ccmInstallationId"), ("CISCO-CCM-MIB", "ccmInetAddress2Type"), ("CISCO-CCM-MIB", "ccmInetAddress2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmInfoGroupRev4 = ccmInfoGroupRev4.setStatus('current')
if mibBuilder.loadTexts: ccmInfoGroupRev4.setDescription('A collection of objects which provide info about all Cisco Unified Communications Managers and its related information within a CUCM cluster. It comprises of GroupTable, ccmTable, GroupMappingTable, Region, TimeZone, Device Pool and ProductType tables.')
ccmPhoneInfoGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 35)).setObjects(("CISCO-CCM-MIB", "ccmPhonePhysicalAddress"), ("CISCO-CCM-MIB", "ccmPhoneDescription"), ("CISCO-CCM-MIB", "ccmPhoneUserName"), ("CISCO-CCM-MIB", "ccmPhoneStatus"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmPhoneE911Location"), ("CISCO-CCM-MIB", "ccmPhoneLoadID"), ("CISCO-CCM-MIB", "ccmPhoneDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusReason"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmPhoneProductTypeIndex"), ("CISCO-CCM-MIB", "ccmPhoneProtocol"), ("CISCO-CCM-MIB", "ccmPhoneName"), ("CISCO-CCM-MIB", "ccmPhoneExtn"), ("CISCO-CCM-MIB", "ccmPhoneExtnMultiLines"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneExtnStatus"), ("CISCO-CCM-MIB", "ccmRegisteredPhones"), ("CISCO-CCM-MIB", "ccmUnregisteredPhones"), ("CISCO-CCM-MIB", "ccmRejectedPhones"), ("CISCO-CCM-MIB", "ccmPartiallyRegisteredPhones"), ("CISCO-CCM-MIB", "ccmPhoneTableStateId"), ("CISCO-CCM-MIB", "ccmPhoneExtensionTableStateId"), ("CISCO-CCM-MIB", "ccmPhoneInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmPhoneInetAddressIPv6"), ("CISCO-CCM-MIB", "ccmPhoneIPv4Attribute"), ("CISCO-CCM-MIB", "ccmPhoneIPv6Attribute"), ("CISCO-CCM-MIB", "ccmPhoneActiveLoadID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPhoneInfoGroupRev5 = ccmPhoneInfoGroupRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ccmPhoneInfoGroupRev5.setDescription('A collection of objects which provide info about all phones within the scope of the local Cisco Unified Communications Manager. It comprises of the Phone and Phone Extension tables.')
ccmMediaDeviceInfoGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 36)).setObjects(("CISCO-CCM-MIB", "ccmMediaDeviceName"), ("CISCO-CCM-MIB", "ccmMediaDeviceDescription"), ("CISCO-CCM-MIB", "ccmMediaDeviceStatus"), ("CISCO-CCM-MIB", "ccmMediaDeviceDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmMediaDeviceStatusReason"), ("CISCO-CCM-MIB", "ccmMediaDeviceTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmMediaDeviceTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmMediaDeviceProductTypeIndex"), ("CISCO-CCM-MIB", "ccmRegisteredMediaDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredMediaDevices"), ("CISCO-CCM-MIB", "ccmRejectedMediaDevices"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddressIPv6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMediaDeviceInfoGroupRev3 = ccmMediaDeviceInfoGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ccmMediaDeviceInfoGroupRev3.setDescription('A collection of objects which provide info about all Media Devices within the scope of the local Cisco Unified Communications Manager. It comprises of the MediaDevice table.')
ccmSIPDeviceInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 37)).setObjects(("CISCO-CCM-MIB", "ccmSIPDevName"), ("CISCO-CCM-MIB", "ccmSIPDevProductTypeIndex"), ("CISCO-CCM-MIB", "ccmSIPDevDescription"), ("CISCO-CCM-MIB", "ccmSIPInTransportProtocolType"), ("CISCO-CCM-MIB", "ccmSIPInPortNumber"), ("CISCO-CCM-MIB", "ccmSIPOutTransportProtocolType"), ("CISCO-CCM-MIB", "ccmSIPOutPortNumber"), ("CISCO-CCM-MIB", "ccmSIPDevInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmSIPDevInetAddressIPv6"), ("CISCO-CCM-MIB", "ccmSIPTableEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmSIPDeviceInfoGroupRev2 = ccmSIPDeviceInfoGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ccmSIPDeviceInfoGroupRev2.setDescription('A collection of objects which provide info about all SIP Trunk devices within the scope of the local Cisco Unified Communications Manager. It comprises of the SIP Device table.')
ccmNotificationsInfoGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 38)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmCallManagerAlarmEnable"), ("CISCO-CCM-MIB", "ccmFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailures"), ("CISCO-CCM-MIB", "ccmPhoneFailedTime"), ("CISCO-CCM-MIB", "ccmPhoneFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailedMacAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailedAlarmInterval"), ("CISCO-CCM-MIB", "ccmPhoneFailedStorePeriod"), ("CISCO-CCM-MIB", "ccmPhFailedTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmPhoneUpdates"), ("CISCO-CCM-MIB", "ccmPhoneStatusPhoneIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTime"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateType"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateReason"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateAlarmInterv"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateStorePeriod"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTableStateId"), ("CISCO-CCM-MIB", "ccmPhStatUpdtTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmGatewayAlarmEnable"), ("CISCO-CCM-MIB", "ccmGatewayFailCauseCode"), ("CISCO-CCM-MIB", "ccmMediaResourceType"), ("CISCO-CCM-MIB", "ccmMediaResourceListName"), ("CISCO-CCM-MIB", "ccmRouteListName"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfIndex"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfL2Status"), ("CISCO-CCM-MIB", "ccmMaliciousCallAlarmEnable"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCalledDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCallingDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallTime"), ("CISCO-CCM-MIB", "ccmQualityReportAlarmEnable"), ("CISCO-CCM-MIB", "ccmQualityRprtSourceDevName"), ("CISCO-CCM-MIB", "ccmQualityRprtClusterId"), ("CISCO-CCM-MIB", "ccmQualityRprtCategory"), ("CISCO-CCM-MIB", "ccmQualityRprtReasonCode"), ("CISCO-CCM-MIB", "ccmQualityRprtTime"), ("CISCO-CCM-MIB", "ccmTLSDevName"), ("CISCO-CCM-MIB", "ccmTLSDevInetAddressType"), ("CISCO-CCM-MIB", "ccmTLSDevInetAddress"), ("CISCO-CCM-MIB", "ccmTLSConnFailTime"), ("CISCO-CCM-MIB", "ccmTLSConnectionFailReasonCode"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddressIPv6"), ("CISCO-CCM-MIB", "ccmPhoneFailedIPv4Attribute"), ("CISCO-CCM-MIB", "ccmPhoneFailedIPv6Attribute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsInfoGroupRev4 = ccmNotificationsInfoGroupRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ccmNotificationsInfoGroupRev4.setDescription('A collection of objects which provide info about all the Notifications generated by the CISCO CUCM Agent.')
ccmH323DeviceInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 39)).setObjects(("CISCO-CCM-MIB", "ccmH323DevName"), ("CISCO-CCM-MIB", "ccmH323DevDescription"), ("CISCO-CCM-MIB", "ccmH323DevInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevCnfgGKInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevCnfgGKInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK1InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK1InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK2InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK2InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK3InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK3InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK4InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK4InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK5InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK5InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevActGKInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevActGKInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevStatus"), ("CISCO-CCM-MIB", "ccmH323DevStatusReason"), ("CISCO-CCM-MIB", "ccmH323DevTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmH323DevTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM1InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM1InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM2InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM2InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM3InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM3InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevProductTypeIndex"), ("CISCO-CCM-MIB", "ccmH323TableEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmH323DeviceInfoGroupRev2 = ccmH323DeviceInfoGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ccmH323DeviceInfoGroupRev2.setDescription('A collection of objects which provide info about all H323 devices within the scope of the local Cisco Unified Communications Manager. It comprises of the H323Device table.')
ccmCTIDeviceInfoGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 40)).setObjects(("CISCO-CCM-MIB", "ccmCTIDeviceName"), ("CISCO-CCM-MIB", "ccmCTIDeviceDescription"), ("CISCO-CCM-MIB", "ccmCTIDeviceStatus"), ("CISCO-CCM-MIB", "ccmCTIDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmCTIDeviceStatusReason"), ("CISCO-CCM-MIB", "ccmCTIDeviceTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmCTIDeviceTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmCTIDeviceProductTypeIndex"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNum"), ("CISCO-CCM-MIB", "ccmRegisteredCTIDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredCTIDevices"), ("CISCO-CCM-MIB", "ccmRejectedCTIDevices"), ("CISCO-CCM-MIB", "ccmCTIDeviceTableStateId"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNumTableStateId"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddressIPv6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCTIDeviceInfoGroupRev3 = ccmCTIDeviceInfoGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ccmCTIDeviceInfoGroupRev3.setDescription('A collection of objects which provide info about all CTI Devices within the scope of the local CUCM. It comprises of the ccmCTIDevice and ccmCTIDeviceDirNum tables.')
ccmPhoneInfoGroupRev6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 41)).setObjects(("CISCO-CCM-MIB", "ccmPhonePhysicalAddress"), ("CISCO-CCM-MIB", "ccmPhoneDescription"), ("CISCO-CCM-MIB", "ccmPhoneUserName"), ("CISCO-CCM-MIB", "ccmPhoneStatus"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmPhoneE911Location"), ("CISCO-CCM-MIB", "ccmPhoneLoadID"), ("CISCO-CCM-MIB", "ccmPhoneDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmPhoneTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmPhoneProductTypeIndex"), ("CISCO-CCM-MIB", "ccmPhoneProtocol"), ("CISCO-CCM-MIB", "ccmPhoneName"), ("CISCO-CCM-MIB", "ccmPhoneExtn"), ("CISCO-CCM-MIB", "ccmPhoneExtnMultiLines"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddressType"), ("CISCO-CCM-MIB", "ccmPhoneExtnInetAddress"), ("CISCO-CCM-MIB", "ccmPhoneExtnStatus"), ("CISCO-CCM-MIB", "ccmRegisteredPhones"), ("CISCO-CCM-MIB", "ccmUnregisteredPhones"), ("CISCO-CCM-MIB", "ccmRejectedPhones"), ("CISCO-CCM-MIB", "ccmPartiallyRegisteredPhones"), ("CISCO-CCM-MIB", "ccmPhoneTableStateId"), ("CISCO-CCM-MIB", "ccmPhoneExtensionTableStateId"), ("CISCO-CCM-MIB", "ccmPhoneInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmPhoneInetAddressIPv6"), ("CISCO-CCM-MIB", "ccmPhoneIPv4Attribute"), ("CISCO-CCM-MIB", "ccmPhoneIPv6Attribute"), ("CISCO-CCM-MIB", "ccmPhoneActiveLoadID"), ("CISCO-CCM-MIB", "ccmPhoneUnregReason"), ("CISCO-CCM-MIB", "ccmPhoneRegFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmPhoneInfoGroupRev6 = ccmPhoneInfoGroupRev6.setStatus('current')
if mibBuilder.loadTexts: ccmPhoneInfoGroupRev6.setDescription('A collection of objects which provide info about all phones within the scope of the local Cisco Unified Communications Manager. It comprises of the Phone and Phone Extension tables.')
ccmNotificationsInfoGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 42)).setObjects(("CISCO-CCM-MIB", "ccmAlarmSeverity"), ("CISCO-CCM-MIB", "ccmCallManagerAlarmEnable"), ("CISCO-CCM-MIB", "ccmFailCauseCode"), ("CISCO-CCM-MIB", "ccmPhoneFailures"), ("CISCO-CCM-MIB", "ccmPhoneFailedTime"), ("CISCO-CCM-MIB", "ccmPhoneFailedMacAddress"), ("CISCO-CCM-MIB", "ccmPhoneFailedAlarmInterval"), ("CISCO-CCM-MIB", "ccmPhoneFailedStorePeriod"), ("CISCO-CCM-MIB", "ccmPhFailedTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmPhoneUpdates"), ("CISCO-CCM-MIB", "ccmPhoneStatusPhoneIndex"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTime"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateType"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateAlarmInterv"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateStorePeriod"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdateTableStateId"), ("CISCO-CCM-MIB", "ccmPhStatUpdtTblLastAddedIndex"), ("CISCO-CCM-MIB", "ccmGatewayAlarmEnable"), ("CISCO-CCM-MIB", "ccmMediaResourceType"), ("CISCO-CCM-MIB", "ccmMediaResourceListName"), ("CISCO-CCM-MIB", "ccmRouteListName"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfIndex"), ("CISCO-CCM-MIB", "ccmGatewayPhysIfL2Status"), ("CISCO-CCM-MIB", "ccmMaliciousCallAlarmEnable"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCalledPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCalledDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyName"), ("CISCO-CCM-MIB", "ccmMaliCallCallingPartyNumber"), ("CISCO-CCM-MIB", "ccmMaliCallCallingDeviceName"), ("CISCO-CCM-MIB", "ccmMaliCallTime"), ("CISCO-CCM-MIB", "ccmQualityReportAlarmEnable"), ("CISCO-CCM-MIB", "ccmQualityRprtSourceDevName"), ("CISCO-CCM-MIB", "ccmQualityRprtClusterId"), ("CISCO-CCM-MIB", "ccmQualityRprtCategory"), ("CISCO-CCM-MIB", "ccmQualityRprtReasonCode"), ("CISCO-CCM-MIB", "ccmQualityRprtTime"), ("CISCO-CCM-MIB", "ccmTLSDevName"), ("CISCO-CCM-MIB", "ccmTLSDevInetAddressType"), ("CISCO-CCM-MIB", "ccmTLSDevInetAddress"), ("CISCO-CCM-MIB", "ccmTLSConnFailTime"), ("CISCO-CCM-MIB", "ccmTLSConnectionFailReasonCode"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmPhoneFailedInetAddressIPv6"), ("CISCO-CCM-MIB", "ccmPhoneFailedIPv4Attribute"), ("CISCO-CCM-MIB", "ccmPhoneFailedIPv6Attribute"), ("CISCO-CCM-MIB", "ccmPhoneFailedRegFailReason"), ("CISCO-CCM-MIB", "ccmPhoneStatusUnregReason"), ("CISCO-CCM-MIB", "ccmPhoneStatusRegFailReason"), ("CISCO-CCM-MIB", "ccmGatewayRegFailCauseCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsInfoGroupRev5 = ccmNotificationsInfoGroupRev5.setStatus('current')
if mibBuilder.loadTexts: ccmNotificationsInfoGroupRev5.setDescription('A collection of objects which provide info about all the Notifications generated by the CISCO CUCM Agent.')
ccmGatewayInfoGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 43)).setObjects(("CISCO-CCM-MIB", "ccmGatewayName"), ("CISCO-CCM-MIB", "ccmGatewayDescription"), ("CISCO-CCM-MIB", "ccmGatewayStatus"), ("CISCO-CCM-MIB", "ccmGatewayDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmGatewayInetAddressType"), ("CISCO-CCM-MIB", "ccmGatewayInetAddress"), ("CISCO-CCM-MIB", "ccmGatewayTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmGatewayTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmGatewayDChannelStatus"), ("CISCO-CCM-MIB", "ccmGatewayDChannelNumber"), ("CISCO-CCM-MIB", "ccmGatewayProductTypeIndex"), ("CISCO-CCM-MIB", "ccmRegisteredGateways"), ("CISCO-CCM-MIB", "ccmUnregisteredGateways"), ("CISCO-CCM-MIB", "ccmRejectedGateways"), ("CISCO-CCM-MIB", "ccmGatewayTableStateId"), ("CISCO-CCM-MIB", "ccmGatewayUnregReason"), ("CISCO-CCM-MIB", "ccmGatewayRegFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmGatewayInfoGroupRev4 = ccmGatewayInfoGroupRev4.setStatus('current')
if mibBuilder.loadTexts: ccmGatewayInfoGroupRev4.setDescription('A collection of objects which provide info about all Gateways within the scope of the local CallManager. It comprises of the Gateway table.')
ccmMediaDeviceInfoGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 44)).setObjects(("CISCO-CCM-MIB", "ccmMediaDeviceName"), ("CISCO-CCM-MIB", "ccmMediaDeviceDescription"), ("CISCO-CCM-MIB", "ccmMediaDeviceStatus"), ("CISCO-CCM-MIB", "ccmMediaDeviceDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmMediaDeviceTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmMediaDeviceTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmMediaDeviceProductTypeIndex"), ("CISCO-CCM-MIB", "ccmRegisteredMediaDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredMediaDevices"), ("CISCO-CCM-MIB", "ccmRejectedMediaDevices"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmMediaDeviceInetAddressIPv6"), ("CISCO-CCM-MIB", "ccmMediaDeviceUnregReason"), ("CISCO-CCM-MIB", "ccmMediaDeviceRegFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmMediaDeviceInfoGroupRev4 = ccmMediaDeviceInfoGroupRev4.setStatus('current')
if mibBuilder.loadTexts: ccmMediaDeviceInfoGroupRev4.setDescription('A collection of objects which provide info about all Media Devices within the scope of the local Cisco Unified Communications Manager. It comprises of the MediaDevice table.')
ccmCTIDeviceInfoGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 45)).setObjects(("CISCO-CCM-MIB", "ccmCTIDeviceName"), ("CISCO-CCM-MIB", "ccmCTIDeviceDescription"), ("CISCO-CCM-MIB", "ccmCTIDeviceStatus"), ("CISCO-CCM-MIB", "ccmCTIDevicePoolIndex"), ("CISCO-CCM-MIB", "ccmCTIDeviceTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmCTIDeviceTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmCTIDeviceProductTypeIndex"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNum"), ("CISCO-CCM-MIB", "ccmRegisteredCTIDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredCTIDevices"), ("CISCO-CCM-MIB", "ccmRejectedCTIDevices"), ("CISCO-CCM-MIB", "ccmCTIDeviceTableStateId"), ("CISCO-CCM-MIB", "ccmCTIDeviceDirNumTableStateId"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddressIPv4"), ("CISCO-CCM-MIB", "ccmCTIDeviceInetAddressIPv6"), ("CISCO-CCM-MIB", "ccmCTIDeviceUnregReason"), ("CISCO-CCM-MIB", "ccmCTIDeviceRegFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmCTIDeviceInfoGroupRev4 = ccmCTIDeviceInfoGroupRev4.setStatus('current')
if mibBuilder.loadTexts: ccmCTIDeviceInfoGroupRev4.setDescription('A collection of objects which provide info about all CTI Devices within the scope of the local CUCM. It comprises of the ccmCTIDevice and ccmCTIDeviceDirNum tables.')
ccmH323DeviceInfoGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 46)).setObjects(("CISCO-CCM-MIB", "ccmH323DevName"), ("CISCO-CCM-MIB", "ccmH323DevDescription"), ("CISCO-CCM-MIB", "ccmH323DevInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevCnfgGKInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevCnfgGKInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK1InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK1InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK2InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK2InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK3InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK3InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK4InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK4InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevAltGK5InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevAltGK5InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevActGKInetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevActGKInetAddress"), ("CISCO-CCM-MIB", "ccmH323DevStatus"), ("CISCO-CCM-MIB", "ccmH323DevTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmH323DevTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM1InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM1InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM2InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM2InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM3InetAddressType"), ("CISCO-CCM-MIB", "ccmH323DevRmtCM3InetAddress"), ("CISCO-CCM-MIB", "ccmH323DevProductTypeIndex"), ("CISCO-CCM-MIB", "ccmH323TableEntries"), ("CISCO-CCM-MIB", "ccmH323DevUnregReason"), ("CISCO-CCM-MIB", "ccmH323DevRegFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmH323DeviceInfoGroupRev3 = ccmH323DeviceInfoGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ccmH323DeviceInfoGroupRev3.setDescription('A collection of objects which provide info about all H323 devices within the scope of the local Cisco Unified Communications Manager. It comprises of the H323Device table.')
ccmVoiceMailDeviceInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 47)).setObjects(("CISCO-CCM-MIB", "ccmVMailDevName"), ("CISCO-CCM-MIB", "ccmVMailDevDescription"), ("CISCO-CCM-MIB", "ccmVMailDevStatus"), ("CISCO-CCM-MIB", "ccmVMailDevInetAddressType"), ("CISCO-CCM-MIB", "ccmVMailDevInetAddress"), ("CISCO-CCM-MIB", "ccmVMailDevTimeLastStatusUpdt"), ("CISCO-CCM-MIB", "ccmVMailDevTimeLastRegistered"), ("CISCO-CCM-MIB", "ccmVMailDevProductTypeIndex"), ("CISCO-CCM-MIB", "ccmVMailDevDirNum"), ("CISCO-CCM-MIB", "ccmRegisteredVoiceMailDevices"), ("CISCO-CCM-MIB", "ccmUnregisteredVoiceMailDevices"), ("CISCO-CCM-MIB", "ccmRejectedVoiceMailDevices"), ("CISCO-CCM-MIB", "ccmVMailDevUnregReason"), ("CISCO-CCM-MIB", "ccmVMailDevRegFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmVoiceMailDeviceInfoGroupRev2 = ccmVoiceMailDeviceInfoGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ccmVoiceMailDeviceInfoGroupRev2.setDescription('A collection of objects which provide info about all Voice Messaging Devices within the scope of the local CallManager. It comprises of the ccmVoiceMailDevice and ccmVoiceMailDirNum tables.')
ccmNotificationsGroupRev3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 156, 3, 2, 48)).setObjects(("CISCO-CCM-MIB", "ccmCallManagerFailed"), ("CISCO-CCM-MIB", "ccmPhoneFailed"), ("CISCO-CCM-MIB", "ccmPhoneStatusUpdate"), ("CISCO-CCM-MIB", "ccmGatewayFailedReason"), ("CISCO-CCM-MIB", "ccmMediaResourceListExhausted"), ("CISCO-CCM-MIB", "ccmRouteListExhausted"), ("CISCO-CCM-MIB", "ccmGatewayLayer2Change"), ("CISCO-CCM-MIB", "ccmMaliciousCall"), ("CISCO-CCM-MIB", "ccmQualityReport"), ("CISCO-CCM-MIB", "ccmTLSConnectionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccmNotificationsGroupRev3 = ccmNotificationsGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ccmNotificationsGroupRev3.setDescription('A collection of notifications that are generated by the CUCM Agent.')
mibBuilder.exportSymbols("CISCO-CCM-MIB", ccmInetAddress=ccmInetAddress, ccmCTIDeviceTableStateId=ccmCTIDeviceTableStateId, ccmH323DevAltGK5InetAddressType=ccmH323DevAltGK5InetAddressType, ccmGatekeeperName=ccmGatekeeperName, ccmVoiceMailDeviceInfoGroup=ccmVoiceMailDeviceInfoGroup, ccmQualityRprtClusterId=ccmQualityRprtClusterId, ccmH323DeviceInfoGroupRev1=ccmH323DeviceInfoGroupRev1, ccmSIPDevInetAddressType=ccmSIPDevInetAddressType, ccmMediaDeviceInfo=ccmMediaDeviceInfo, ccmGatekeeperInfo=ccmGatekeeperInfo, ccmPhoneActiveLoadID=ccmPhoneActiveLoadID, ccmGroupName=ccmGroupName, ccmProductType=ccmProductType, ccmMediaDeviceTable=ccmMediaDeviceTable, ccmPhonePhysicalAddress=ccmPhonePhysicalAddress, ccmH323DevRmtCM3InetAddressType=ccmH323DevRmtCM3InetAddressType, ccmMediaDeviceStatus=ccmMediaDeviceStatus, ccmPhoneFailedIndex=ccmPhoneFailedIndex, ccmH323DevAltGK1InetAddressType=ccmH323DevAltGK1InetAddressType, CcmDeviceStatus=CcmDeviceStatus, ccmPhoneFailedInetAddress=ccmPhoneFailedInetAddress, ccmGatewayDevicePoolIndex=ccmGatewayDevicePoolIndex, ccmRejectedGateways=ccmRejectedGateways, ccmH323DevDescription=ccmH323DevDescription, ccmDevicePoolTable=ccmDevicePoolTable, ccmUnregisteredGateways=ccmUnregisteredGateways, ccmPhoneUnregReason=ccmPhoneUnregReason, ccmGatekeeperInetAddressType=ccmGatekeeperInetAddressType, ccmH323DevName=ccmH323DevName, ccmPhoneUpdates=ccmPhoneUpdates, ccmTimeZoneEntry=ccmTimeZoneEntry, ccmCTIDeviceIndex=ccmCTIDeviceIndex, ccmGroupMappingEntry=ccmGroupMappingEntry, ccmProductName=ccmProductName, ccmQualityRprtSourceDevName=ccmQualityRprtSourceDevName, ccmH323DevUnregReason=ccmH323DevUnregReason, ccmCallManagerAlarmEnable=ccmCallManagerAlarmEnable, ccmGatewayAlarmEnable=ccmGatewayAlarmEnable, ccmMediaDeviceIndex=ccmMediaDeviceIndex, ccmMediaDeviceInfoGroupRev1=ccmMediaDeviceInfoGroupRev1, ccmMaliCallCalledPartyName=ccmMaliCallCalledPartyName, ccmGatewayInfoGroupRev2=ccmGatewayInfoGroupRev2, ccmCTIDeviceInfo=ccmCTIDeviceInfo, ccmSIPDevIndex=ccmSIPDevIndex, ccmPhoneInfoGroupRev3=ccmPhoneInfoGroupRev3, ccmPhoneTableStateId=ccmPhoneTableStateId, ccmPhoneInetAddress=ccmPhoneInetAddress, ccmQualityReport=ccmQualityReport, ccmPhoneFailed=ccmPhoneFailed, ciscoCcmMIBCompliance=ciscoCcmMIBCompliance, ccmCMGroupMappingCMPriority=ccmCMGroupMappingCMPriority, ccmH323DevRmtCM2InetAddressType=ccmH323DevRmtCM2InetAddressType, ccmGatewayTrunkStatus=ccmGatewayTrunkStatus, ccmGatewayTrunkIndex=ccmGatewayTrunkIndex, ccmVMailDevStatusReason=ccmVMailDevStatusReason, ccmCTIDeviceInetAddress=ccmCTIDeviceInetAddress, ccmH323DevRmtCM1InetAddress=ccmH323DevRmtCM1InetAddress, ccmInfoGroupRev2=ccmInfoGroupRev2, ccmGatewayDChannelNumber=ccmGatewayDChannelNumber, ccmPhoneExtnIndex=ccmPhoneExtnIndex, ccmRegionName=ccmRegionName, ccmPhoneExtnStatus=ccmPhoneExtnStatus, ccmH323DevRmtCM1InetAddressType=ccmH323DevRmtCM1InetAddressType, ccmMaliCallCalledPartyNumber=ccmMaliCallCalledPartyNumber, ccmVoiceMailDeviceInfoGroupRev1=ccmVoiceMailDeviceInfoGroupRev1, ccmPhoneInetAddressIPv6=ccmPhoneInetAddressIPv6, ccmTimeZoneOffsetMinutes=ccmTimeZoneOffsetMinutes, ccmCTIDeviceDirNumEntry=ccmCTIDeviceDirNumEntry, ccmGatewayProductId=ccmGatewayProductId, ccmRouteListName=ccmRouteListName, ccmNotificationsInfoGroupRev2=ccmNotificationsInfoGroupRev2, ccmMaliciousCallAlarmEnable=ccmMaliciousCallAlarmEnable, ccmGatewayFailedReason=ccmGatewayFailedReason, ccmMaliCallCallingPartyNumber=ccmMaliCallCallingPartyNumber, ccmNotificationsGroupRev1=ccmNotificationsGroupRev1, ccmSIPDeviceInfoGroup=ccmSIPDeviceInfoGroup, ccmRegisteredCTIDevices=ccmRegisteredCTIDevices, ccmRegisteredGateways=ccmRegisteredGateways, ccmPhoneDevicePoolIndex=ccmPhoneDevicePoolIndex, ccmRegisteredPhones=ccmRegisteredPhones, ccmPhoneTable=ccmPhoneTable, ccmGroupTable=ccmGroupTable, ccmInActivePhones=ccmInActivePhones, ccmSIPDeviceEntry=ccmSIPDeviceEntry, ccmRegionSrcIndex=ccmRegionSrcIndex, ccmPhoneProtocol=ccmPhoneProtocol, ccmH323DevAltGK3InetAddress=ccmH323DevAltGK3InetAddress, ccmVoiceMailDeviceEntry=ccmVoiceMailDeviceEntry, ccmTrunkGatewayIndex=ccmTrunkGatewayIndex, ccmH323DevActGKInetAddressType=ccmH323DevActGKInetAddressType, ciscoCcmMIBGroups=ciscoCcmMIBGroups, ccmPhoneExtensionTableStateId=ccmPhoneExtensionTableStateId, ccmMediaDeviceProductTypeIndex=ccmMediaDeviceProductTypeIndex, ccmPhoneExtnInetAddress=ccmPhoneExtnInetAddress, ccmPhoneUserName=ccmPhoneUserName, ccmMediaDeviceInetAddressIPv4=ccmMediaDeviceInetAddressIPv4, ccmGatewayLayer2Change=ccmGatewayLayer2Change, ccmMediaDeviceType=ccmMediaDeviceType, ccmUnregisteredVoiceMailDevices=ccmUnregisteredVoiceMailDevices, ccmMediaDeviceInfoGroupRev2=ccmMediaDeviceInfoGroupRev2, ccmH323DeviceInfoGroupRev3=ccmH323DeviceInfoGroupRev3, ccmCallManagerStartTime=ccmCallManagerStartTime, ccmH323TableEntries=ccmH323TableEntries, ccmSIPDevProductTypeIndex=ccmSIPDevProductTypeIndex, ccmGatewayInfoGroup=ccmGatewayInfoGroup, ccmPhoneExtnEntry=ccmPhoneExtnEntry, ccmSIPDeviceTable=ccmSIPDeviceTable, ccmPhoneTimeLastRegistered=ccmPhoneTimeLastRegistered, ccmPhoneFailedName=ccmPhoneFailedName, ccmVMailDevUnregReason=ccmVMailDevUnregReason, ccmPhoneLoadID=ccmPhoneLoadID, ccmMediaResourceListName=ccmMediaResourceListName, ccmGatewayFailed=ccmGatewayFailed, ccmPhoneRegFailReason=ccmPhoneRegFailReason, ccmH323DevRmtCM2InetAddress=ccmH323DevRmtCM2InetAddress, ccmVoiceMailDeviceTable=ccmVoiceMailDeviceTable, ccmMIBNotificationPrefix=ccmMIBNotificationPrefix, ccmGatekeeperIndex=ccmGatekeeperIndex, ccmCTIDeviceTimeLastRegistered=ccmCTIDeviceTimeLastRegistered, ccmH323DevAltGK2InetAddressType=ccmH323DevAltGK2InetAddressType, ccmGatewayPhysIfIndex=ccmGatewayPhysIfIndex, ccmMediaDeviceInetAddress=ccmMediaDeviceInetAddress, ccmVMailDevStatus=ccmVMailDevStatus, ccmGatewayUnregReason=ccmGatewayUnregReason, ccmPhoneInfoGroupRev4=ccmPhoneInfoGroupRev4, ccmPhoneFailedAlarmInterval=ccmPhoneFailedAlarmInterval, ccmH323DevAltGK1InetAddress=ccmH323DevAltGK1InetAddress, ccmGatewayStatusReason=ccmGatewayStatusReason, ccmCTIDeviceInetAddressIPv6=ccmCTIDeviceInetAddressIPv6, ccmRegionDestIndex=ccmRegionDestIndex, ccmPhoneInfoGroupRev5=ccmPhoneInfoGroupRev5, ccmGatekeeperStatus=ccmGatekeeperStatus, ccmStatus=ccmStatus, ccmH323DevCnfgGKInetAddress=ccmH323DevCnfgGKInetAddress, ccmPhoneStatusUpdateAlarmInterv=ccmPhoneStatusUpdateAlarmInterv, ccmPhoneFailedIPv4Attribute=ccmPhoneFailedIPv4Attribute, CcmDevFailCauseCode=CcmDevFailCauseCode, ccmInetAddress2Type=ccmInetAddress2Type, ccmPhoneName=ccmPhoneName, ccmGatewayName=ccmGatewayName, ccmVoiceMailDeviceInfoGroupRev2=ccmVoiceMailDeviceInfoGroupRev2, ccmQualityRprtTime=ccmQualityRprtTime, ccmPhoneFailures=ccmPhoneFailures, ccmCTIDeviceTimeLastStatusUpdt=ccmCTIDeviceTimeLastStatusUpdt, ccmDescription=ccmDescription, ccmGatewayDescription=ccmGatewayDescription, ccmPhoneExtensionInetAddressType=ccmPhoneExtensionInetAddressType, ccmDevicePoolIndex=ccmDevicePoolIndex, ccmVersion=ccmVersion, ccmCTIDeviceDirNumTable=ccmCTIDeviceDirNumTable, ccmDevicePoolGroupIndex=ccmDevicePoolGroupIndex, ccmGatewayRegFailCauseCode=ccmGatewayRegFailCauseCode, ccmVoiceMailDeviceDirNumEntry=ccmVoiceMailDeviceDirNumEntry, ccmGatewayInfoGroupRev1=ccmGatewayInfoGroupRev1, ccmSIPDevInetAddressIPv6=ccmSIPDevInetAddressIPv6, CcmIndex=CcmIndex, ciscoCcmMIBCompliances=ciscoCcmMIBCompliances, ccmVoiceMailDeviceDirNumTable=ccmVoiceMailDeviceDirNumTable, ccmH323DeviceInfo=ccmH323DeviceInfo, ccmMediaDeviceTimeLastStatusUpdt=ccmMediaDeviceTimeLastStatusUpdt, ccmPhFailedTblLastAddedIndex=ccmPhFailedTblLastAddedIndex, ccmCTIDeviceStatusReason=ccmCTIDeviceStatusReason, ccmH323DeviceEntry=ccmH323DeviceEntry, ccmH323DevTimeLastStatusUpdt=ccmH323DevTimeLastStatusUpdt, CcmDevRegFailCauseCode=CcmDevRegFailCauseCode, PYSNMP_MODULE_ID=ciscoCcmMIB, ccmDevicePoolRegionIndex=ccmDevicePoolRegionIndex, ccmDevicePoolEntry=ccmDevicePoolEntry, ccmTimeZoneIndex=ccmTimeZoneIndex, ccmNotificationsInfoGroupRev3=ccmNotificationsInfoGroupRev3, ccmSIPOutPortNumber=ccmSIPOutPortNumber, ccmSIPDevInetAddress=ccmSIPDevInetAddress, ccmGatekeeperTable=ccmGatekeeperTable, ccmGatewayDChannelStatus=ccmGatewayDChannelStatus, ccmMediaDeviceRegFailReason=ccmMediaDeviceRegFailReason, ccmH323DevCnfgGKInetAddressType=ccmH323DevCnfgGKInetAddressType, ccmGlobalInfo=ccmGlobalInfo, ccmGatewayTableStateId=ccmGatewayTableStateId, ccmVMailDevName=ccmVMailDevName, ccmGatewayStatus=ccmGatewayStatus, ccmMaliCallTime=ccmMaliCallTime, ccmPhoneFailCauseCode=ccmPhoneFailCauseCode, ccmSIPDeviceInfoGroupRev2=ccmSIPDeviceInfoGroupRev2, ccmSystemVersion=ccmSystemVersion, ccmMediaDeviceInetAddressType=ccmMediaDeviceInetAddressType, ciscoCcmMIBComplianceRev6=ciscoCcmMIBComplianceRev6, ccmRejectedPhones=ccmRejectedPhones, ccmRegionPairTable=ccmRegionPairTable, ccmPhoneFailedEntry=ccmPhoneFailedEntry, ccmPhoneInetAddressIPv4=ccmPhoneInetAddressIPv4, ccmQualityReportAlarmEnable=ccmQualityReportAlarmEnable, ccmTLSDevName=ccmTLSDevName, ccmGatewayTrunkInfo=ccmGatewayTrunkInfo, ccmGatewayTimeLastStatusUpdt=ccmGatewayTimeLastStatusUpdt, ccmSIPDevDescription=ccmSIPDevDescription, ccmMIBNotifications=ccmMIBNotifications, ccmVMailDevDirNum=ccmVMailDevDirNum, ccmTimeZoneOffsetHours=ccmTimeZoneOffsetHours, ccmPhoneFailedRegFailReason=ccmPhoneFailedRegFailReason, ccmRejectedCTIDevices=ccmRejectedCTIDevices, ccmMediaDeviceEntry=ccmMediaDeviceEntry, ccmCTIDeviceInfoGroupRev4=ccmCTIDeviceInfoGroupRev4, ccmActiveGateways=ccmActiveGateways, ccmNotificationsInfoGroupRev4=ccmNotificationsInfoGroupRev4, ccmH323DevProductId=ccmH323DevProductId, ccmPhoneInetAddressType=ccmPhoneInetAddressType, ccmPhoneFailedTable=ccmPhoneFailedTable, ccmPhoneE911Location=ccmPhoneE911Location, ccmMediaDeviceTimeLastRegistered=ccmMediaDeviceTimeLastRegistered, ccmGatekeeperInetAddress=ccmGatekeeperInetAddress, ciscoCcmMIB=ciscoCcmMIB, ccmGatekeeperDevicePoolIndex=ccmGatekeeperDevicePoolIndex, ccmMaliciousCall=ccmMaliciousCall, ccmInetAddress2=ccmInetAddress2, ccmPhoneStatusUpdate=ccmPhoneStatusUpdate, CcmSIPTransportProtocolType=CcmSIPTransportProtocolType, ciscoCcmMIBComplianceRev4=ciscoCcmMIBComplianceRev4, ccmRejectedMediaDevices=ccmRejectedMediaDevices, ccmProductCategory=ccmProductCategory, ccmMaliCallCallingDeviceName=ccmMaliCallCallingDeviceName, ccmInfoGroupRev4=ccmInfoGroupRev4, ccmPhoneStatusRegFailReason=ccmPhoneStatusRegFailReason, ccmCTIDevicePoolIndex=ccmCTIDevicePoolIndex, ccmTLSDevInetAddress=ccmTLSDevInetAddress, ccmCTIDeviceRegFailReason=ccmCTIDeviceRegFailReason, ccmVMailDevDirNumIndex=ccmVMailDevDirNumIndex, ccmPhoneStatusUpdateEntry=ccmPhoneStatusUpdateEntry, ccmRegionAvailableBandWidth=ccmRegionAvailableBandWidth, ccmSIPInPortNumber=ccmSIPInPortNumber, ccmPhoneFailedInetAddressType=ccmPhoneFailedInetAddressType, ccmH323DevStatusReason=ccmH323DevStatusReason, ciscoCcmMIBComplianceRev3=ciscoCcmMIBComplianceRev3, ccmNotificationsInfoGroupRev1=ccmNotificationsInfoGroupRev1, ccmH323DevAltGK5InetAddress=ccmH323DevAltGK5InetAddress, ccmPhoneEntry=ccmPhoneEntry, ccmGroupIndex=ccmGroupIndex, ccmH323DevProductTypeIndex=ccmH323DevProductTypeIndex, ccmPhoneFailedMacAddress=ccmPhoneFailedMacAddress, ccmH323DevInetAddress=ccmH323DevInetAddress, ccmVoiceMailDeviceInfo=ccmVoiceMailDeviceInfo, ccmPhoneInfoGroup=ccmPhoneInfoGroup, ccmCTIDeviceAppInfo=ccmCTIDeviceAppInfo, ccmPhoneStatusUpdateTime=ccmPhoneStatusUpdateTime, ccmNotificationsGroupRev2=ccmNotificationsGroupRev2, ccmVMailDevProductTypeIndex=ccmVMailDevProductTypeIndex, ccmH323DeviceTable=ccmH323DeviceTable, ciscoCcmMIBObjects=ciscoCcmMIBObjects, ccmH323DevAltGK4InetAddress=ccmH323DevAltGK4InetAddress, ccmIndex=ccmIndex, ccmRejectedVoiceMailDevices=ccmRejectedVoiceMailDevices, ccmGroupMappingTable=ccmGroupMappingTable, ciscoCcmMIBComplianceRev2=ciscoCcmMIBComplianceRev2, ccmMediaResourceListExhausted=ccmMediaResourceListExhausted, ccmPhoneTimeLastStatusUpdt=ccmPhoneTimeLastStatusUpdt)
mibBuilder.exportSymbols("CISCO-CCM-MIB", ccmInstallationId=ccmInstallationId, ccmCTIDeviceDirNumIndex=ccmCTIDeviceDirNumIndex, ccmCTIDeviceUnregReason=ccmCTIDeviceUnregReason, ccmH323DevInetAddressType=ccmH323DevInetAddressType, ccmMediaResourceType=ccmMediaResourceType, ccmPhoneStatusUpdateReason=ccmPhoneStatusUpdateReason, ccmH323DevTimeLastRegistered=ccmH323DevTimeLastRegistered, ccmCTIDeviceEntry=ccmCTIDeviceEntry, ccmPhoneInfoGroupRev2=ccmPhoneInfoGroupRev2, ccmH323DevAltGK4InetAddressType=ccmH323DevAltGK4InetAddressType, ccmH323DevActGKInetAddress=ccmH323DevActGKInetAddress, ccmPhoneStatusReason=ccmPhoneStatusReason, ccmGatewayInfo=ccmGatewayInfo, ccmPhoneExtensionInetAddress=ccmPhoneExtensionInetAddress, ccmPhoneExtensionIpAddress=ccmPhoneExtensionIpAddress, ccmH323DevIndex=ccmH323DevIndex, ccmCTIDeviceType=ccmCTIDeviceType, ccmCTIDeviceInfoGroupRev1=ccmCTIDeviceInfoGroupRev1, ccmTLSConnFailTime=ccmTLSConnFailTime, ccmRegionTable=ccmRegionTable, CcmDeviceLineStatus=CcmDeviceLineStatus, ccmPhoneStatusPhoneIndex=ccmPhoneStatusPhoneIndex, ccmPhoneFailedTime=ccmPhoneFailedTime, ccmCTIDeviceInfoGroup=ccmCTIDeviceInfoGroup, ccmPhoneStatusUpdateTable=ccmPhoneStatusUpdateTable, ccmMediaDeviceStatusReason=ccmMediaDeviceStatusReason, ccmGatewayInetAddressType=ccmGatewayInetAddressType, ccmVMailDevInetAddress=ccmVMailDevInetAddress, ccmRegisteredVoiceMailDevices=ccmRegisteredVoiceMailDevices, ccmSIPDeviceInfoGroupRev1=ccmSIPDeviceInfoGroupRev1, ccmTimeZoneName=ccmTimeZoneName, ccmRegionIndex=ccmRegionIndex, ccmVMailDevRegFailReason=ccmVMailDevRegFailReason, ccmInActiveGateways=ccmInActiveGateways, ccmTimeZoneOffset=ccmTimeZoneOffset, ciscoCcmMIBComplianceRev5=ciscoCcmMIBComplianceRev5, ccmPhoneIPv4Attribute=ccmPhoneIPv4Attribute, ccmNotificationsInfoGroup=ccmNotificationsInfoGroup, ciscoCcmMIBComplianceRev1=ciscoCcmMIBComplianceRev1, ccmInfoGroupRev3=ccmInfoGroupRev3, ccmCTIDeviceDescription=ccmCTIDeviceDescription, ccmCTIDeviceInetAddressType=ccmCTIDeviceInetAddressType, ccmGatewayFailCauseCode=ccmGatewayFailCauseCode, ccmAlarmSeverity=ccmAlarmSeverity, ccmGatewayInfoGroupRev3=ccmGatewayInfoGroupRev3, ccmSIPDeviceInfo=ccmSIPDeviceInfo, ccmPhoneExtension=ccmPhoneExtension, ccmCTIDeviceDirNumTableStateId=ccmCTIDeviceDirNumTableStateId, ccmGatewayInetAddress=ccmGatewayInetAddress, ccmPhoneTimeLastError=ccmPhoneTimeLastError, ccmGatekeeperDescription=ccmGatekeeperDescription, ccmMaliCallCallingPartyName=ccmMaliCallCallingPartyName, ccmPhoneExtensionTable=ccmPhoneExtensionTable, ccmGatewayType=ccmGatewayType, ccmSIPDevName=ccmSIPDevName, ccmEntry=ccmEntry, ccmUnregisteredMediaDevices=ccmUnregisteredMediaDevices, ccmPhoneFailedInetAddressIPv6=ccmPhoneFailedInetAddressIPv6, ciscoCcmMIBComplianceRev7=ciscoCcmMIBComplianceRev7, ccmPhoneExtnInetAddressType=ccmPhoneExtnInetAddressType, ciscoCcmMIBConformance=ciscoCcmMIBConformance, ccmName=ccmName, ccmProductTypeIndex=ccmProductTypeIndex, ccmPhoneType=ccmPhoneType, ccmPhoneExtensionIndex=ccmPhoneExtensionIndex, ccmSIPOutTransportProtocolType=ccmSIPOutTransportProtocolType, ccmPhoneExtnTable=ccmPhoneExtnTable, ccmH323DevRmtCM3InetAddress=ccmH323DevRmtCM3InetAddress, ccmGatewayTrunkName=ccmGatewayTrunkName, ccmH323DevAltGK2InetAddress=ccmH323DevAltGK2InetAddress, ccmTLSConnectionFailReasonCode=ccmTLSConnectionFailReasonCode, ccmPhoneLastError=ccmPhoneLastError, ccmTLSDevInetAddressType=ccmTLSDevInetAddressType, ccmPhoneIpAddress=ccmPhoneIpAddress, ccmH323DevStatus=ccmH323DevStatus, ccmGeneralInfo=ccmGeneralInfo, ccmUnregisteredCTIDevices=ccmUnregisteredCTIDevices, CcmIndexOrZero=CcmIndexOrZero, ccmInetAddressType=ccmInetAddressType, ccmPhoneIPv6Attribute=ccmPhoneIPv6Attribute, ccmGatewayRegFailReason=ccmGatewayRegFailReason, CcmDevUnregCauseCode=CcmDevUnregCauseCode, ccmNotificationsGroupRev3=ccmNotificationsGroupRev3, ccmGatewayEntry=ccmGatewayEntry, ccmGatekeeperEntry=ccmGatekeeperEntry, ccmPhoneExtnMultiLines=ccmPhoneExtnMultiLines, ccmPhoneStatusUpdateIndex=ccmPhoneStatusUpdateIndex, ccmVMailDevDescription=ccmVMailDevDescription, ccmPhoneStatusUpdateTableStateId=ccmPhoneStatusUpdateTableStateId, ccmCallManagerFailed=ccmCallManagerFailed, ccmCTIDeviceInfoGroupRev2=ccmCTIDeviceInfoGroupRev2, ccmGatewayTrunkEntry=ccmGatewayTrunkEntry, CcmPhoneProtocolType=CcmPhoneProtocolType, ccmPhoneStatusUpdateStorePeriod=ccmPhoneStatusUpdateStorePeriod, ccmMediaDeviceInfoGroup=ccmMediaDeviceInfoGroup, ccmPartiallyRegisteredPhones=ccmPartiallyRegisteredPhones, ccmSIPTableEntries=ccmSIPTableEntries, ccmH323DeviceInfoGroup=ccmH323DeviceInfoGroup, ccmTimeZoneTable=ccmTimeZoneTable, ccmQualityRprtCategory=ccmQualityRprtCategory, ccmGroupTftpDefault=ccmGroupTftpDefault, ccmGatewayProductTypeIndex=ccmGatewayProductTypeIndex, ccmPhoneExtn=ccmPhoneExtn, ccmPhoneInfoGroupRev6=ccmPhoneInfoGroupRev6, ccmCTIDeviceStatus=ccmCTIDeviceStatus, ccmPhoneExtensionMultiLines=ccmPhoneExtensionMultiLines, ccmPhoneDescription=ccmPhoneDescription, ccmMediaDeviceName=ccmMediaDeviceName, ccmPhoneProductTypeIndex=ccmPhoneProductTypeIndex, ccmPhoneFailedInetAddressIPv4=ccmPhoneFailedInetAddressIPv4, ccmPhoneExtensionEntry=ccmPhoneExtensionEntry, ccmMediaDeviceDescription=ccmMediaDeviceDescription, ccmMediaDeviceDevicePoolIndex=ccmMediaDeviceDevicePoolIndex, ccmGatewayPhysIfL2Status=ccmGatewayPhysIfL2Status, ccmRegionPairEntry=ccmRegionPairEntry, ccmSIPInTransportProtocolType=ccmSIPInTransportProtocolType, ccmInfoGroup=ccmInfoGroup, ccmPhoneStatusUpdateType=ccmPhoneStatusUpdateType, ccmH323DevAltGK3InetAddressType=ccmH323DevAltGK3InetAddressType, ccmVMailDevProductId=ccmVMailDevProductId, ccmPhoneIndex=ccmPhoneIndex, ccmGatewayTable=ccmGatewayTable, ccmGroupEntry=ccmGroupEntry, ccmCTIDeviceName=ccmCTIDeviceName, ccmDevicePoolName=ccmDevicePoolName, ccmFailCauseCode=ccmFailCauseCode, ccmMediaDeviceUnregReason=ccmMediaDeviceUnregReason, ccmGatekeeperType=ccmGatekeeperType, ccmCTIDeviceInetAddressIPv4=ccmCTIDeviceInetAddressIPv4, ccmProductTypeTable=ccmProductTypeTable, ccmMediaDeviceInfoGroupRev4=ccmMediaDeviceInfoGroupRev4, ccmMediaDeviceInfoGroupRev3=ccmMediaDeviceInfoGroupRev3, ccmMediaDeviceInetAddressIPv6=ccmMediaDeviceInetAddressIPv6, ccmProductTypeEntry=ccmProductTypeEntry, ccmNotificationsInfo=ccmNotificationsInfo, ccmPhoneFailedIPv6Attribute=ccmPhoneFailedIPv6Attribute, ccmPhoneInfoGroupRev1=ccmPhoneInfoGroupRev1, ccmVMailDevTimeLastStatusUpdt=ccmVMailDevTimeLastStatusUpdt, ccmVMailDevTimeLastRegistered=ccmVMailDevTimeLastRegistered, ccmRouteListExhausted=ccmRouteListExhausted, ccmNotificationsInfoGroupRev5=ccmNotificationsInfoGroupRev5, ccmAlarmConfigInfo=ccmAlarmConfigInfo, ccmMaliCallCalledDeviceName=ccmMaliCallCalledDeviceName, ccmSIPDevInetAddressIPv4=ccmSIPDevInetAddressIPv4, ccmActivePhones=ccmActivePhones, ccmGatewayIndex=ccmGatewayIndex, ccmGatewayTimeLastRegistered=ccmGatewayTimeLastRegistered, ccmVMailDevInetAddressType=ccmVMailDevInetAddressType, ccmRegisteredMediaDevices=ccmRegisteredMediaDevices, ccmRegionEntry=ccmRegionEntry, ccmInfoGroupRev1=ccmInfoGroupRev1, CcmDeviceProductId=CcmDeviceProductId, ccmTable=ccmTable, ccmNotificationsGroup=ccmNotificationsGroup, ccmPhoneStatusUnregReason=ccmPhoneStatusUnregReason, ccmVMailDevIndex=ccmVMailDevIndex, ccmQualityRprtReasonCode=ccmQualityRprtReasonCode, ccmPhoneStatus=ccmPhoneStatus, ccmClusterId=ccmClusterId, ccmDevicePoolTimeZoneIndex=ccmDevicePoolTimeZoneIndex, ccmQualityReportAlarmConfigInfo=ccmQualityReportAlarmConfigInfo, ccmUnregisteredPhones=ccmUnregisteredPhones, ccmH323DeviceInfoGroupRev2=ccmH323DeviceInfoGroupRev2, ccmPhoneInfo=ccmPhoneInfo, ccmGatewayTrunkTable=ccmGatewayTrunkTable, ccmGatewayTrunkType=ccmGatewayTrunkType, ccmCTIDeviceTable=ccmCTIDeviceTable, ccmH323DevRegFailReason=ccmH323DevRegFailReason, ccmCTIDeviceInfoGroupRev3=ccmCTIDeviceInfoGroupRev3, ccmGatekeeperInfoGroup=ccmGatekeeperInfoGroup, ccmCTIDeviceProductTypeIndex=ccmCTIDeviceProductTypeIndex, ccmCTIDeviceDirNum=ccmCTIDeviceDirNum, ccmGatewayInfoGroupRev4=ccmGatewayInfoGroupRev4, ccmPhoneFailedStorePeriod=ccmPhoneFailedStorePeriod, ccmTLSConnectionFailure=ccmTLSConnectionFailure, ccmPhStatUpdtTblLastAddedIndex=ccmPhStatUpdtTblLastAddedIndex)
