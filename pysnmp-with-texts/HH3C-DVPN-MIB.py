#
# PySNMP MIB module HH3C-DVPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DVPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Counter64, Gauge32, ModuleIdentity, NotificationType, Bits, ObjectIdentity, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Counter64", "Gauge32", "ModuleIdentity", "NotificationType", "Bits", "ObjectIdentity", "MibIdentifier", "iso")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hh3cDvpn = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 57))
if mibBuilder.loadTexts: hh3cDvpn.setLastUpdated('200507011936Z')
if mibBuilder.loadTexts: hh3cDvpn.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cDvpn.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cDvpn.setDescription(' This MIB is Dynamic Virtual Private Network(Dvpn) mib. This MIB is applicable to router. Some objects in this may be used only for some specific products, so users should refer to the related documents to acquire more detail information. ')
class DvpnAlgorithmSuite(TextualConvention, Integer32):
    description = ' 13 kinds of dvpn algorithms. encryption method | hash method | key width. dvpnDesCbcMd5PreShaModp768: des | md5 | 768 dvpnDesCbcMd5PreShaModp1024: des | md5 | 1024 dvpnDesCbcSha1PreShaModp768: des | sha1 | 768 dvpnDesCbcSha1PreShaModp1024: des | sha1 | 1024 dvpn3DesCbcMd5PreShaModp768: 3des | md5 | 768 dvpn3DesCbcMd5PreShaModp1024: 3des | md5 | 1024 dvpn3DesCbcSha1PreShaModp768: 3des | sha1 | 768 dvpn3DesCbcSha1PreShaModp1024: 3des | sha1 | 1024 dvpnAesCbcMd5PreShaModp768: Aes | md5 | 768 dvpnAesCbcMd5PreShaModp1024: Aes | md5 | 1024 dvpnAesCbcSHA1Sha1PreShaModp768: Aes | sha1 | 768 dvpnAesCbcSHA1Sha1PreShaModp1024: Aes | sha1 | 1024 dvpnAlgorithmNone: none | none | no key '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("dvpnDesCbcMd5PreShaModp768", 1), ("dvpnDesCbcMd5PreShaModp1024", 2), ("dvpnDesCbcSha1PreShaModp768", 3), ("dvpnDesCbcSha1PreShaModp1024", 4), ("dvpn3DesCbcMd5PreShaModp768", 5), ("dvpn3DesCbcMd5PreShaModp1024", 6), ("dvpn3DesCbcSha1PreShaModp768", 7), ("dvpn3DesCbcSha1PreShaModp1024", 8), ("dvpnAesCbcMd5PreShaModp768", 9), ("dvpnAesCbcMd5PreShaModp1024", 10), ("dvpnAesCbcSHA1Sha1PreShaModp768", 11), ("dvpnAesCbcSHA1Sha1PreShaModp1024", 12), ("dvpnAlgorithmNone", 13))

class DvpnCommunicateType(TextualConvention, Integer32):
    description = ' The type of the communication between client and server. It indicates the direction of the communication. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("clientToserver", 1), ("serverToclient", 2), ("serverToserver", 3), ("clientToclient", 4))

hh3cDvpnMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1))
hh3cDvpnMibGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1))
hh3cDvpnMibTableTroop = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2))
hh3cDvpnMibNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 3))
hh3cDvpnMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4))
hh3cDvpnServiceEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnServiceEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnServiceEnable.setDescription(" Dvpn service enable or disable. If dvpn service is 'disable', dvpn service can not be used. ")
hh3cDvpnClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnClassNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClassNumber.setDescription(' The number of dvpn classes. It is only used on client. ')
hh3cDvpnClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnClientNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClientNumber.setDescription(' The number of clients which register on the server. When a session of server to client type is built, add 1 to the value of this node. It is only used on server. ')
hh3cDvpnMapAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnMapAgeTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapAgeTime.setDescription(' Dvpn map age time, the unit is second. It is only used on server. ')
hh3cDvpnClientRegisterInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnClientRegisterInterval.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClientRegisterInterval.setDescription(' The length of time between the registering of client, the unit is second. It is only used on client. ')
hh3cDvpnClientRegisterDumb = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnClientRegisterDumb.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClientRegisterDumb.setDescription(' The length of time when client dumbs, the unit is second. It is only used on client. ')
hh3cDvpnClientRegisterRetry = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnClientRegisterRetry.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClientRegisterRetry.setDescription(' Regist retry times of client after register fail. It is only used on client. ')
hh3cDvpnInputPkt = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnInputPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnInputPkt.setDescription(' The number of recieved packets. ')
hh3cDvpnDropPkt = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDropPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDropPkt.setDescription(' The number of packets have been droped. ')
hh3cDvpnOutputPkt = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnOutputPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnOutputPkt.setDescription(' The number of packets have been sent. ')
hh3cDvpnOutputErrorPkt = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnOutputErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnOutputErrorPkt.setDescription(' The number of output error packets. ')
hh3cDvpnEncryptErrorPkt = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnEncryptErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnEncryptErrorPkt.setDescription(' The number of packets have been encrypted wrongly. ')
hh3cDvpnCurrentDeviceRole = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("server", 2), ("client", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnCurrentDeviceRole.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnCurrentDeviceRole.setDescription(' The current role of the device. The value is decided by the configuration of the tunnel-interface. ')
hh3cDvpnDomainNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDomainNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainNumber.setDescription(' The number of dvpn domains. ')
hh3cDvpnMapNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapNumber.setDescription(' The number of dvpn maps. ')
hh3cDvpnSessionNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionNumber.setDescription(' The number of dvpn sessiones including the session of all states. ')
hh3cDvpnServerPreSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnServerPreSharedKey.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnServerPreSharedKey.setDescription(' The pre-shared-key of server. It is only used on server. ')
hh3cDvpnMapTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnMapTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapTrapEnable.setDescription(' Dvpn map trap enable or disable. ')
hh3cDvpnSessionTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnSessionTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionTrapEnable.setDescription(' Dvpn session trap enable or disable. ')
hh3cDvpnVersion = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version2", 1), ("version3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnVersion.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnVersion.setDescription(' Dvpn version. ')
hh3cDvpnClearDomainAllConection = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnClearDomainAllConection.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClearDomainAllConection.setDescription(' Clear all dvpn conects in the domain, the parameter is the id of the domain. ')
hh3cDvpnClearDvpnStaInfo = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnClearDvpnStaInfo.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClearDvpnStaInfo.setDescription(' Clear the statistic information of dvpn. ')
hh3cDvpnTotalRedirectNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnTotalRedirectNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTotalRedirectNumber.setDescription(' The number of redirect packets. It is only used on server. ')
hh3cDvpnGlobalAuthenClientType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnGlobalAuthenClientType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnGlobalAuthenClientType.setDescription(' Dvpn global authentication type being used by server to client. The value is decided by the configuration by the user. ')
hh3cDvpnGlobalUserDefAAADomain = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnGlobalUserDefAAADomain.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnGlobalUserDefAAADomain.setDescription(' Dvpn global AAA domain of the user. The domain will decide the authentication server which is used by the dvpn server to authenticate dvpn client. ')
hh3cDvpnLocalDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnLocalDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnLocalDeviceId.setDescription(' The device ID, it is a string. ')
hh3cDvpnSessionHisAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnSessionHisAgeTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisAgeTime.setDescription(' The age-time of the hh3cDvpnSessionHisTable table. The unit is hour. ')
hh3cDvpnSessionHisReset = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnSessionHisReset.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisReset.setDescription(' The reset flag of dvpn hh3cDvpnSessionHisTable table. ')
hh3cDvpnPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cDvpnPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPolicyTable.setDescription(' The dvpn policy table. It is used on dvpn server. ')
hh3cDvpnPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1), ).setIndexNames((0, "HH3C-DVPN-MIB", "hh3cDvpnPolicyName"))
if mibBuilder.loadTexts: hh3cDvpnPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPolicyEntry.setDescription(' The entry of hh3cDvpnPolicyTable. ')
hh3cDvpnPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hh3cDvpnPolicyName.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPolicyName.setDescription(' The name of Dvpn policy. ')
hh3cDvpnPoAuthenClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoAuthenClientType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoAuthenClientType.setDescription(' The authentication type used by server to client. The value is decided by the policy configuration of the user. The default value is none. ')
hh3cDvpnPoSessionAlgorithmSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 3), DvpnAlgorithmSuite().clone('dvpnDesCbcMd5PreShaModp768')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoSessionAlgorithmSuite.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoSessionAlgorithmSuite.setDescription(' The algorithm suite used when session is created. ')
hh3cDvpnPoSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoSessionIdleTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoSessionIdleTime.setDescription(' The session idle time, the unit is second. ')
hh3cDvpnPoSessionKeepTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoSessionKeepTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoSessionKeepTime.setDescription(' The session keepalive time, the unit is second. ')
hh3cDvpnPoSessionSetupInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoSessionSetupInterval.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoSessionSetupInterval.setDescription(' The session setup interval time, the unit is second. ')
hh3cDvpnPoDataAlgorithmSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 7), DvpnAlgorithmSuite().clone('dvpnDesCbcMd5PreShaModp768')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoDataAlgorithmSuite.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoDataAlgorithmSuite.setDescription(' The algorithm suite used by the session for createing ipsec sa. ')
hh3cDvpnPoSaSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 604800)).clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoSaSeconds.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoSaSeconds.setDescription(' The duration of DVPN IPSec security association. The unit is second. ')
hh3cDvpnPoUserDefAAADomain = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoUserDefAAADomain.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoUserDefAAADomain.setDescription(' Dvpn policy AAA domain of the user. The domain will decide the authentication server which used by the dvpn server to authenticate dvpn client. ')
hh3cDvpnPoRefTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnPoRefTimes.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoRefTimes.setDescription(' The total times of the policy being used by dvpn. ')
hh3cDvpnPoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnPoRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPoRowStatus.setDescription(' The status of this conceptual row. We support the characteristic of active(1),createAndGo(4),destroy(6). ')
hh3cDvpnDomainInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cDvpnDomainInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainInfoTable.setDescription(' The dvpn domain table. ')
hh3cDvpnDomainInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-DVPN-MIB", "hh3cDvpnDomainID"))
if mibBuilder.loadTexts: hh3cDvpnDomainInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainInfoEntry.setDescription(' The entry of hh3cDvpnDomainInfoTable. ')
hh3cDvpnDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cDvpnDomainID.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainID.setDescription(' Dvpn domain ID. ')
hh3cDvpnDomainSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDomainSessionNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainSessionNum.setDescription(' The number of session in this dvpn domain. ')
hh3cDvpnDomainRedirectNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDomainRedirectNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainRedirectNum.setDescription(' The number of redirect packets in this dvpn domain. ')
hh3cDvpnDomainInputPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDomainInputPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainInputPkt.setDescription(' The number of input packets in this dvpn domain. ')
hh3cDvpnDomainDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDomainDropPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainDropPkt.setDescription(' The number of drop packets in this dvpn domain. ')
hh3cDvpnDomainOutputPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDomainOutputPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainOutputPkt.setDescription(' The number of output packets in this dvpn domain. ')
hh3cDvpnDomainOutputErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDomainOutputErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainOutputErrorPkt.setDescription(' The number of output error packets in this dvpn domain. ')
hh3cDvpnDomainEncryptErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnDomainEncryptErrorPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainEncryptErrorPkt.setDescription(' The number of encrypt error packets in this dvpn domain. ')
hh3cDvpnClassTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cDvpnClassTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClassTable.setDescription(' The Dvpn class table. It is only used on dvpn client. ')
hh3cDvpnClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1), ).setIndexNames((0, "HH3C-DVPN-MIB", "hh3cDvpnClassName"))
if mibBuilder.loadTexts: hh3cDvpnClassEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClassEntry.setDescription(' The entry of the hh3cDvpnClassTable. ')
hh3cDvpnClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hh3cDvpnClassName.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClassName.setDescription(' The dvpn class name. It is the index of hh3cDvpnClassTable. ')
hh3cDvpnClServerPublicIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClServerPublicIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClServerPublicIpType.setDescription(' Dvpn server public ip type (ipv4, ipv6). ')
hh3cDvpnClServerPublicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClServerPublicIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClServerPublicIp.setDescription(' Dvpn server public ip address. ')
hh3cDvpnClServerPriIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClServerPriIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClServerPriIpType.setDescription(' Dvpn server private ip type (ipv4, ipv6). ')
hh3cDvpnClServerPriIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClServerPriIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClServerPriIp.setDescription(' Dvpn server private ip address. ')
hh3cDvpnClAlgorithmSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 6), DvpnAlgorithmSuite().clone('dvpnDesCbcMd5PreShaModp768')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClAlgorithmSuite.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClAlgorithmSuite.setDescription(" The algorithm suite used by the client when sending registry packets to the server. 'dvpnAlgorithmNone' is not supported here. ")
hh3cDvpnClAuthenServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("preShareKey", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClAuthenServerType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClAuthenServerType.setDescription(' The authentication type being used by client to server. The value is decided by the class configuration of the user. The default value is none. ')
hh3cDvpnClPreShareKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClPreShareKey.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClPreShareKey.setDescription(' Dvpn PreShareKey. It is used when the method used by client when authenticating server is pre-share-key, only when the value of the key is the same as that on the server, the client can authenticate server successfully. ')
hh3cDvpnClUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClUserName.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClUserName.setDescription(' Dvpn UserName. It is configured by the user. ')
hh3cDvpnClPwdEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("cipher", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClPwdEncrypted.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClPwdEncrypted.setDescription(' Dvpn password encrypted or not. ')
hh3cDvpnClPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 11), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClPasswd.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClPasswd.setDescription(' Dvpn password. It is configured by the user. ')
hh3cDvpnClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 3, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDvpnClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClassRowStatus.setDescription(" The status of this conceptual row. Only 'active', 'createAndGo' and 'destroy' are supported. ")
hh3cDvpnTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 4), )
if mibBuilder.loadTexts: hh3cDvpnTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelTable.setDescription(' The dvpn tunnel table. ')
hh3cDvpnTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDvpnTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelEntry.setDescription(' The Entry of hh3cDvpnTunnelTable. ')
hh3cDvpnTunnelInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("server", 2))).clone('client')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnTunnelInterfaceType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelInterfaceType.setDescription(' The type of dvpn tunnel (client or server). ')
hh3cDvpnTunnelAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnTunnelAcl.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelAcl.setDescription(' The security acl used by the tunnel. If a packet permits the rules, it will not be encrypted. ')
hh3cDvpnTunnelClientRegType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undistributed", 1), ("forward", 2), ("undistributedandforward", 3), ("normal", 4))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnTunnelClientRegType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelClientRegType.setDescription(" The register type used by the client . Only the interface type is client, it can be used. undistributed: If a client send a packet to the client with this configuration, setver will only forward the packet whitout sending redirect packets. forward: The client with this configuration will only send packets forwarded by server, which means it can not initiate to build a session with other clients. undistributedandforward: The client with this configuration have the characteristics of both 'forward' and 'undistributed'. normal: The client with this configuration can build session with other clients without any restriction. ")
hh3cDvpnTunnelDvpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnTunnelDvpnId.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelDvpnId.setDescription(' The dvpn ID used by the tunnel. The dvpn ID is 0 means that user does not configure dvpn ID. User can not configure a dvpn ID with 0. ')
hh3cDvpnTunnelPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnTunnelPolicy.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelPolicy.setDescription(' The dvpn policy used by the tunnel. Only the interface type is server, it can be used. ')
hh3cDvpnTunnelClass = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDvpnTunnelClass.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelClass.setDescription(' The dvpn class used by the tunnel. Only the interface type is client, it can be used. ')
hh3cDvpnMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5), )
if mibBuilder.loadTexts: hh3cDvpnMapTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapTable.setDescription(' The dvpn map table. ')
hh3cDvpnMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1), ).setIndexNames((0, "HH3C-DVPN-MIB", "hh3cDvpnMapIndex"))
if mibBuilder.loadTexts: hh3cDvpnMapEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapEntry.setDescription(' The entry of the hh3cDvpnMapTable. ')
hh3cDvpnMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDvpnMapIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapIndex.setDescription(' The index of hh3cDvpnMapTable. ')
hh3cDvpnMapPeerDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapPeerDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapPeerDeviceId.setDescription(' The identifier of peer device. It is a string. ')
hh3cDvpnMapDvpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapDvpnId.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapDvpnId.setDescription(' The ID of the dvpn domain which the map belongs to. The dvpn ID is 0 means that the map has not been built. It has not gotten the dvpn ID at that time. ')
hh3cDvpnMapBuildTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapBuildTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapBuildTime.setDescription(' The time of the map created, the unit is second. ')
hh3cDvpnMapPeerPriIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapPeerPriIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapPeerPriIpType.setDescription(' The private ip type (ipv4, ipv6) of map peer device. ')
hh3cDvpnMapPeerPriIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapPeerPriIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapPeerPriIp.setDescription(' The private ip of map peer device. ')
hh3cDvpnMapPeerPublicIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapPeerPublicIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapPeerPublicIpType.setDescription(' The public ip type (ipv4, ipv6) of map peer device. ')
hh3cDvpnMapPeerPublicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapPeerPublicIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapPeerPublicIp.setDescription(' The public ip of map peer device. ')
hh3cDvpnMapLocalPriIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapLocalPriIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapLocalPriIpType.setDescription(' The private ip type (ipv4, ipv6) of map local device. ')
hh3cDvpnMapLocalPriIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapLocalPriIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapLocalPriIp.setDescription(' The private ip of map local device. ')
hh3cDvpnMapLocalPublicIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapLocalPublicIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapLocalPublicIpType.setDescription(' The public ip type (ipv4, ipv6) of map local device. ')
hh3cDvpnMapLocalPublicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapLocalPublicIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapLocalPublicIp.setDescription(' The public ip of map local device. ')
hh3cDvpnMapUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapUserName.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapUserName.setDescription(' The user name used by the client registering to server. If the client is not been authenticated, this is a null string. ')
hh3cDvpnMapUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapUdpPort.setDescription(' The udp port used by map peer device. ')
hh3cDvpnMapControlId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapControlId.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapControlId.setDescription(' Dvpn map control ID. ')
hh3cDvpnMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 16), DvpnCommunicateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapType.setDescription(" The type of the map. 'clientToclient' is not supported here. ")
hh3cDvpnMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("mapClientInit", 1), ("mapClientBegin", 2), ("mapClientAlgreq", 3), ("mapClientKexReq", 4), ("mapClientAuthenReq", 5), ("mapClientConfigReq", 6), ("mapClientReq", 7), ("mapClientSuccess", 8), ("mapServerBegin", 9), ("mapServerAlgorithm", 10), ("mapServerKexInit", 11), ("mapServerAuthenInit", 12), ("mapServerConfigInit", 13), ("mapServerInit", 14), ("mapServerFinished", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnMapState.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapState.setDescription(' mapClientInit: The client initiates the map. mapClientBegin: The client begins the process of registering to the server. mapClientAlgreq: The client requests to negotiate the algorithm. mapClientKexReq: The client requests to negotiate the key. mapClientAuthenReq: The client sends authentication information to the server. mapClientConfigReq: The client requests to get some configuration information from the server. Do not support now. mapClientReq: The client requests to register to the server. mapClientSuccess: The client registers to the server successfully. mapServerBegin: The server begins the process of receive a new register. mapServerAlgorithm:The sever begins to negotiate Algorithm. mapServerKexInit: The server replys to the algorithm negotiation packet from the client successfully and begin to negotiate key. mapServerAuthenInit: The server replys to the key negotiation packet from the client successfully and begin to authenticate client, in the case of the authentication-client method is not none. mapServerConfigInit: The server send some configuration information to client. Do not support now. mapServerInit: The server replys to the authentication packet from the client successfully and begin to receive client information. mapServerFinished: The server receives client information successfully. ')
hh3cDvpnSessionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6), )
if mibBuilder.loadTexts: hh3cDvpnSessionTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionTable.setDescription(' The dvpn session table. ')
hh3cDvpnSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1), ).setIndexNames((0, "HH3C-DVPN-MIB", "hh3cDvpnSessionDvpnId"), (0, "HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPriIpType"), (0, "HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPriIp"))
if mibBuilder.loadTexts: hh3cDvpnSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionEntry.setDescription(' The entry of hh3cDvpnSessionTable. ')
hh3cDvpnSessionDvpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDvpnSessionDvpnId.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionDvpnId.setDescription(' The ID of the dvpn domain which the session belongs to. ')
hh3cDvpnSessionPeerPriIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDvpnSessionPeerPriIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionPeerPriIpType.setDescription(' The private ip type (ipv4, ipv6) of session peer device. ')
hh3cDvpnSessionPeerPriIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDvpnSessionPeerPriIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionPeerPriIp.setDescription(' The private ip of the session peer device. ')
hh3cDvpnSessionPeerDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionPeerDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionPeerDeviceId.setDescription(' The device ID of session peer device. It is a string. ')
hh3cDvpnSessionBuildTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionBuildTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionBuildTime.setDescription(' The time of the Session being built, the unit is second. ')
hh3cDvpnSessionPeerPubIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionPeerPubIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionPeerPubIpType.setDescription(' The public ip type (ipv4, ipv6) of session peer device. ')
hh3cDvpnSessionPeerPubIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionPeerPubIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionPeerPubIp.setDescription(' The public ip of session peer device. ')
hh3cDvpnSessionLocalPubIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionLocalPubIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionLocalPubIpType.setDescription(' The public ip type (ipv4, ipv6) of session local device. ')
hh3cDvpnSessionLocalPubIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionLocalPubIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionLocalPubIp.setDescription(' The public ip of session local device. ')
hh3cDvpnSessionLocalPriIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionLocalPriIpType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionLocalPriIpType.setDescription(' The private ip type (ipv4, ipv6) of session local device. ')
hh3cDvpnSessionLocalPriIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionLocalPriIp.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionLocalPriIp.setDescription(' The private ip of session local device. ')
hh3cDvpnSessionPeerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionPeerUdpPort.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionPeerUdpPort.setDescription(' The udp port used by session peer device . ')
hh3cDvpnSessionInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionInitiator.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionInitiator.setDescription(' The flag of initiator. ')
hh3cDvpnSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionUserName.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionUserName.setDescription(" The user's name. If the session type is client to client, the value of this object is a null string. ")
hh3cDvpnSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sessionSetupInit", 1), ("sessionSetupReq", 2), ("sessionSetupSuccess", 3), ("sessionRekeyReq", 4), ("sessionRekeyRep", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionState.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionState.setDescription(' The state of the session. sessionSetupInit: The initiation of the session. sessionSetupReq: The initiator requests to negotiate the SA and so on of the session. sessionSetupSuccess: The session has been built successfully. sessionRekeyReq: The initiator requests to renegotiate the SA. sessionRekeyRep: The passive side replies with a SA renegotiation response packet successfully. ')
hh3cDvpnSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 16), DvpnCommunicateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionType.setDescription(' The type of the session. ')
hh3cDvpnSessionPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("router", 1), ("pcClient", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionPeerType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionPeerType.setDescription(' The type of the session peer device. It may be client software or a router. ')
hh3cDvpnSessionHisTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7), )
if mibBuilder.loadTexts: hh3cDvpnSessionHisTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisTable.setDescription(" The dvpn session history table. This table contains session's history information, include input/output packet number, up/down time, etc. This table will exist during the 'hh3cDvpnSessionHisAgeTime'. ")
hh3cDvpnSessionHisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1), ).setIndexNames((0, "HH3C-DVPN-MIB", "hh3cDvpnSessionHisDvpnID"), (0, "HH3C-DVPN-MIB", "hh3cDvpnSessionHisPeerPriIPType"), (0, "HH3C-DVPN-MIB", "hh3cDvpnSessionHisPeerPriIP"))
if mibBuilder.loadTexts: hh3cDvpnSessionHisEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisEntry.setDescription(' The entry of hh3cDvpnSessionHisTable. ')
hh3cDvpnSessionHisDvpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cDvpnSessionHisDvpnID.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisDvpnID.setDescription(' The ID of the dvpn domain which the session belongs to. ')
hh3cDvpnSessionHisPeerPriIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisPeerPriIPType.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisPeerPriIPType.setDescription(' The private ip type (ipv4, ipv6) of session peer device. ')
hh3cDvpnSessionHisPeerPriIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 3), InetAddress())
if mibBuilder.loadTexts: hh3cDvpnSessionHisPeerPriIP.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisPeerPriIP.setDescription(' The private ip of the session peer device. ')
hh3cDvpnSessionHisSendPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisSendPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisSendPkt.setDescription(' The number of sent packets on the session. ')
hh3cDvpnSessionHisRcvPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisRcvPkt.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisRcvPkt.setDescription(' The number of received packets on the session. ')
hh3cDvpnSessionHisOnlineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisOnlineNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisOnlineNumber.setDescription(' The number of the session online. ')
hh3cDvpnSessionHisFirstUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisFirstUpTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisFirstUpTime.setDescription(' The session first online time. ')
hh3cDvpnSessionHisLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisLastUpTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisLastUpTime.setDescription(' The session last online time. ')
hh3cDvpnSessionHisLastDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisLastDownTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisLastDownTime.setDescription(' The session last down time. ')
hh3cDvpnSessionHisOnlineFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisOnlineFlag.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisOnlineFlag.setDescription(" If the session is online, the value is 'yes'. If the session is not online, the value is 'no'. ")
hh3cDvpnSessionHisPeerDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 2, 7, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDvpnSessionHisPeerDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisPeerDeviceId.setDescription(' The identifier of peer device. It is a string. ')
hh3cDvpnNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 3, 0))
hh3cDvpnSessionBuildNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 3, 0, 1)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnSessionDvpnId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnLocalDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPubIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPubIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPubIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPubIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerUdpPort"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionUserName"))
if mibBuilder.loadTexts: hh3cDvpnSessionBuildNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionBuildNotification.setDescription(' Dvpn session build notification. ')
hh3cDvpnSessionDelNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 3, 0, 2)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnSessionDvpnId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnLocalDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPubIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPubIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPubIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPubIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerUdpPort"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionUserName"))
if mibBuilder.loadTexts: hh3cDvpnSessionDelNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionDelNotification.setDescription(' Dvpn session deleted notification. ')
hh3cDvpnMapBuildNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 3, 0, 3)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnMapIndex"), ("HH3C-DVPN-MIB", "hh3cDvpnMapDvpnId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPublicIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPublicIp"), ("HH3C-DVPN-MIB", "hh3cDvpnLocalDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPublicIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPublicIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapUserName"))
if mibBuilder.loadTexts: hh3cDvpnMapBuildNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapBuildNotification.setDescription(' Dvpn map build notification. ')
hh3cDvpnMapDelNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 3, 0, 4)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnMapIndex"), ("HH3C-DVPN-MIB", "hh3cDvpnMapDvpnId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPublicIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPublicIp"), ("HH3C-DVPN-MIB", "hh3cDvpnLocalDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPublicIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPublicIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapUserName"))
if mibBuilder.loadTexts: hh3cDvpnMapDelNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapDelNotification.setDescription(' Dvpn map deleted notification. ')
hh3cDvpnMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 1))
hh3cDvpnMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 1, 1)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnGlobalGroup"), ("HH3C-DVPN-MIB", "hh3cDvpnDomainInfoGroup"), ("HH3C-DVPN-MIB", "hh3cDvpnPolicyGroup"), ("HH3C-DVPN-MIB", "hh3cDvpnClassGroup"), ("HH3C-DVPN-MIB", "hh3cDvpnTunnelGroup"), ("HH3C-DVPN-MIB", "hh3cDvpnMapGroup"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionGroup"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisGroup"), ("HH3C-DVPN-MIB", "hh3cDvpnNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnMibCompliance = hh3cDvpnMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMibCompliance.setDescription(' The compliance statement for entities which implement the DVPN MIB. ')
hh3cDvpnMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2))
hh3cDvpnGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 1)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnServiceEnable"), ("HH3C-DVPN-MIB", "hh3cDvpnClassNumber"), ("HH3C-DVPN-MIB", "hh3cDvpnClientNumber"), ("HH3C-DVPN-MIB", "hh3cDvpnMapAgeTime"), ("HH3C-DVPN-MIB", "hh3cDvpnClientRegisterInterval"), ("HH3C-DVPN-MIB", "hh3cDvpnClientRegisterDumb"), ("HH3C-DVPN-MIB", "hh3cDvpnClientRegisterRetry"), ("HH3C-DVPN-MIB", "hh3cDvpnInputPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnDropPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnOutputPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnOutputErrorPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnEncryptErrorPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnCurrentDeviceRole"), ("HH3C-DVPN-MIB", "hh3cDvpnDomainNumber"), ("HH3C-DVPN-MIB", "hh3cDvpnMapNumber"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionNumber"), ("HH3C-DVPN-MIB", "hh3cDvpnServerPreSharedKey"), ("HH3C-DVPN-MIB", "hh3cDvpnMapTrapEnable"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionTrapEnable"), ("HH3C-DVPN-MIB", "hh3cDvpnVersion"), ("HH3C-DVPN-MIB", "hh3cDvpnClearDomainAllConection"), ("HH3C-DVPN-MIB", "hh3cDvpnClearDvpnStaInfo"), ("HH3C-DVPN-MIB", "hh3cDvpnTotalRedirectNumber"), ("HH3C-DVPN-MIB", "hh3cDvpnGlobalAuthenClientType"), ("HH3C-DVPN-MIB", "hh3cDvpnGlobalUserDefAAADomain"), ("HH3C-DVPN-MIB", "hh3cDvpnLocalDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisAgeTime"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnGlobalGroup = hh3cDvpnGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnGlobalGroup.setDescription(' A collection of objects providing dvpn global information. ')
hh3cDvpnPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 2)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnPoAuthenClientType"), ("HH3C-DVPN-MIB", "hh3cDvpnPoSessionAlgorithmSuite"), ("HH3C-DVPN-MIB", "hh3cDvpnPoSessionIdleTime"), ("HH3C-DVPN-MIB", "hh3cDvpnPoSessionKeepTime"), ("HH3C-DVPN-MIB", "hh3cDvpnPoSessionSetupInterval"), ("HH3C-DVPN-MIB", "hh3cDvpnPoDataAlgorithmSuite"), ("HH3C-DVPN-MIB", "hh3cDvpnPoSaSeconds"), ("HH3C-DVPN-MIB", "hh3cDvpnPoUserDefAAADomain"), ("HH3C-DVPN-MIB", "hh3cDvpnPoRefTimes"), ("HH3C-DVPN-MIB", "hh3cDvpnPoRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnPolicyGroup = hh3cDvpnPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnPolicyGroup.setDescription(' A collection of objects providing dvpn policy information. ')
hh3cDvpnDomainInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 3)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnDomainSessionNum"), ("HH3C-DVPN-MIB", "hh3cDvpnDomainRedirectNum"), ("HH3C-DVPN-MIB", "hh3cDvpnDomainInputPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnDomainDropPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnDomainOutputPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnDomainOutputErrorPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnDomainEncryptErrorPkt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnDomainInfoGroup = hh3cDvpnDomainInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnDomainInfoGroup.setDescription(' A collection of objects providing dvpn domain information. ')
hh3cDvpnClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 4)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnClServerPublicIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnClServerPublicIp"), ("HH3C-DVPN-MIB", "hh3cDvpnClServerPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnClServerPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnClAlgorithmSuite"), ("HH3C-DVPN-MIB", "hh3cDvpnClAuthenServerType"), ("HH3C-DVPN-MIB", "hh3cDvpnClPreShareKey"), ("HH3C-DVPN-MIB", "hh3cDvpnClUserName"), ("HH3C-DVPN-MIB", "hh3cDvpnClPwdEncrypted"), ("HH3C-DVPN-MIB", "hh3cDvpnClPasswd"), ("HH3C-DVPN-MIB", "hh3cDvpnClassRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnClassGroup = hh3cDvpnClassGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnClassGroup.setDescription(' A collection of objects providing dvpn class information. ')
hh3cDvpnTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 5)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnTunnelInterfaceType"), ("HH3C-DVPN-MIB", "hh3cDvpnTunnelAcl"), ("HH3C-DVPN-MIB", "hh3cDvpnTunnelClientRegType"), ("HH3C-DVPN-MIB", "hh3cDvpnTunnelDvpnId"), ("HH3C-DVPN-MIB", "hh3cDvpnTunnelPolicy"), ("HH3C-DVPN-MIB", "hh3cDvpnTunnelClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnTunnelGroup = hh3cDvpnTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnTunnelGroup.setDescription(' A collection of objects providing dvpn tunnel interface information. ')
hh3cDvpnMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 6)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnMapIndex"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapDvpnId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapBuildTime"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPublicIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapPeerPublicIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPublicIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapLocalPublicIp"), ("HH3C-DVPN-MIB", "hh3cDvpnMapUserName"), ("HH3C-DVPN-MIB", "hh3cDvpnMapUdpPort"), ("HH3C-DVPN-MIB", "hh3cDvpnMapControlId"), ("HH3C-DVPN-MIB", "hh3cDvpnMapType"), ("HH3C-DVPN-MIB", "hh3cDvpnMapState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnMapGroup = hh3cDvpnMapGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnMapGroup.setDescription(' A collection of objects providing dvpn map information. ')
hh3cDvpnSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 7)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnSessionDvpnId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerDeviceId"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionBuildTime"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPubIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPubIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPubIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPubIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPriIpType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionLocalPriIp"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerUdpPort"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionInitiator"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionUserName"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionState"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionPeerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnSessionGroup = hh3cDvpnSessionGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionGroup.setDescription(' A collection of objects providing dvpn session information. ')
hh3cDvpnSessionHisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 8)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnSessionHisPeerPriIPType"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisSendPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisRcvPkt"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisOnlineNumber"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisFirstUpTime"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisLastUpTime"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisLastDownTime"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisOnlineFlag"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionHisPeerDeviceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnSessionHisGroup = hh3cDvpnSessionHisGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnSessionHisGroup.setDescription(' A collection of objects providing dvpn session history information. ')
hh3cDvpnNotificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 57, 1, 4, 2, 9)).setObjects(("HH3C-DVPN-MIB", "hh3cDvpnSessionBuildNotification"), ("HH3C-DVPN-MIB", "hh3cDvpnSessionDelNotification"), ("HH3C-DVPN-MIB", "hh3cDvpnMapBuildNotification"), ("HH3C-DVPN-MIB", "hh3cDvpnMapDelNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDvpnNotificationGroup = hh3cDvpnNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDvpnNotificationGroup.setDescription(' A collection of objects providing dvpn notification information. ')
mibBuilder.exportSymbols("HH3C-DVPN-MIB", hh3cDvpnPoSessionKeepTime=hh3cDvpnPoSessionKeepTime, hh3cDvpnSessionHisGroup=hh3cDvpnSessionHisGroup, hh3cDvpnMapDelNotification=hh3cDvpnMapDelNotification, hh3cDvpnCurrentDeviceRole=hh3cDvpnCurrentDeviceRole, hh3cDvpnMapDvpnId=hh3cDvpnMapDvpnId, hh3cDvpnTunnelDvpnId=hh3cDvpnTunnelDvpnId, hh3cDvpnMapUserName=hh3cDvpnMapUserName, hh3cDvpnClassGroup=hh3cDvpnClassGroup, hh3cDvpnSessionHisRcvPkt=hh3cDvpnSessionHisRcvPkt, hh3cDvpnTunnelInterfaceType=hh3cDvpnTunnelInterfaceType, hh3cDvpnDomainEncryptErrorPkt=hh3cDvpnDomainEncryptErrorPkt, hh3cDvpnSessionLocalPriIpType=hh3cDvpnSessionLocalPriIpType, hh3cDvpnMibConformance=hh3cDvpnMibConformance, hh3cDvpnTunnelTable=hh3cDvpnTunnelTable, hh3cDvpnPoAuthenClientType=hh3cDvpnPoAuthenClientType, hh3cDvpnClAuthenServerType=hh3cDvpnClAuthenServerType, hh3cDvpnClPasswd=hh3cDvpnClPasswd, hh3cDvpnSessionPeerUdpPort=hh3cDvpnSessionPeerUdpPort, hh3cDvpnLocalDeviceId=hh3cDvpnLocalDeviceId, hh3cDvpnSessionPeerPriIpType=hh3cDvpnSessionPeerPriIpType, hh3cDvpnPoRefTimes=hh3cDvpnPoRefTimes, hh3cDvpnTunnelClientRegType=hh3cDvpnTunnelClientRegType, hh3cDvpnMapPeerPriIpType=hh3cDvpnMapPeerPriIpType, hh3cDvpnSessionHisPeerPriIPType=hh3cDvpnSessionHisPeerPriIPType, hh3cDvpnSessionHisLastDownTime=hh3cDvpnSessionHisLastDownTime, hh3cDvpnMapPeerPriIp=hh3cDvpnMapPeerPriIp, hh3cDvpnClientRegisterDumb=hh3cDvpnClientRegisterDumb, hh3cDvpnClassName=hh3cDvpnClassName, hh3cDvpnDomainID=hh3cDvpnDomainID, hh3cDvpnSessionPeerPubIpType=hh3cDvpnSessionPeerPubIpType, hh3cDvpnDomainRedirectNum=hh3cDvpnDomainRedirectNum, hh3cDvpnMapPeerDeviceId=hh3cDvpnMapPeerDeviceId, hh3cDvpnMapState=hh3cDvpnMapState, hh3cDvpn=hh3cDvpn, hh3cDvpnPoSaSeconds=hh3cDvpnPoSaSeconds, hh3cDvpnClearDvpnStaInfo=hh3cDvpnClearDvpnStaInfo, hh3cDvpnMibTableTroop=hh3cDvpnMibTableTroop, hh3cDvpnSessionUserName=hh3cDvpnSessionUserName, hh3cDvpnClientNumber=hh3cDvpnClientNumber, hh3cDvpnMapLocalPublicIp=hh3cDvpnMapLocalPublicIp, hh3cDvpnClServerPriIpType=hh3cDvpnClServerPriIpType, hh3cDvpnMapPeerPublicIp=hh3cDvpnMapPeerPublicIp, hh3cDvpnSessionPeerPriIp=hh3cDvpnSessionPeerPriIp, hh3cDvpnMapPeerPublicIpType=hh3cDvpnMapPeerPublicIpType, hh3cDvpnSessionPeerDeviceId=hh3cDvpnSessionPeerDeviceId, hh3cDvpnGlobalGroup=hh3cDvpnGlobalGroup, hh3cDvpnTotalRedirectNumber=hh3cDvpnTotalRedirectNumber, hh3cDvpnMibNotification=hh3cDvpnMibNotification, hh3cDvpnSessionPeerPubIp=hh3cDvpnSessionPeerPubIp, hh3cDvpnServerPreSharedKey=hh3cDvpnServerPreSharedKey, hh3cDvpnMapTrapEnable=hh3cDvpnMapTrapEnable, hh3cDvpnMapControlId=hh3cDvpnMapControlId, hh3cDvpnMibObjects=hh3cDvpnMibObjects, DvpnAlgorithmSuite=DvpnAlgorithmSuite, hh3cDvpnMapGroup=hh3cDvpnMapGroup, hh3cDvpnDropPkt=hh3cDvpnDropPkt, hh3cDvpnSessionPeerType=hh3cDvpnSessionPeerType, hh3cDvpnEncryptErrorPkt=hh3cDvpnEncryptErrorPkt, hh3cDvpnTunnelPolicy=hh3cDvpnTunnelPolicy, hh3cDvpnSessionLocalPubIp=hh3cDvpnSessionLocalPubIp, hh3cDvpnPoSessionSetupInterval=hh3cDvpnPoSessionSetupInterval, hh3cDvpnSessionTrapEnable=hh3cDvpnSessionTrapEnable, hh3cDvpnMapLocalPriIp=hh3cDvpnMapLocalPriIp, hh3cDvpnClientRegisterRetry=hh3cDvpnClientRegisterRetry, hh3cDvpnSessionGroup=hh3cDvpnSessionGroup, hh3cDvpnMibGlobal=hh3cDvpnMibGlobal, hh3cDvpnNotification=hh3cDvpnNotification, hh3cDvpnMibCompliances=hh3cDvpnMibCompliances, hh3cDvpnSessionHisEntry=hh3cDvpnSessionHisEntry, hh3cDvpnMapBuildTime=hh3cDvpnMapBuildTime, hh3cDvpnMibCompliance=hh3cDvpnMibCompliance, hh3cDvpnVersion=hh3cDvpnVersion, hh3cDvpnSessionLocalPubIpType=hh3cDvpnSessionLocalPubIpType, hh3cDvpnPolicyEntry=hh3cDvpnPolicyEntry, hh3cDvpnPolicyGroup=hh3cDvpnPolicyGroup, hh3cDvpnSessionHisSendPkt=hh3cDvpnSessionHisSendPkt, hh3cDvpnSessionState=hh3cDvpnSessionState, hh3cDvpnMapEntry=hh3cDvpnMapEntry, hh3cDvpnMapNumber=hh3cDvpnMapNumber, hh3cDvpnMapAgeTime=hh3cDvpnMapAgeTime, hh3cDvpnMapType=hh3cDvpnMapType, DvpnCommunicateType=DvpnCommunicateType, hh3cDvpnSessionTable=hh3cDvpnSessionTable, hh3cDvpnDomainInfoTable=hh3cDvpnDomainInfoTable, hh3cDvpnTunnelAcl=hh3cDvpnTunnelAcl, hh3cDvpnDomainInfoGroup=hh3cDvpnDomainInfoGroup, hh3cDvpnSessionDvpnId=hh3cDvpnSessionDvpnId, hh3cDvpnClassEntry=hh3cDvpnClassEntry, hh3cDvpnMibGroups=hh3cDvpnMibGroups, hh3cDvpnClServerPublicIp=hh3cDvpnClServerPublicIp, hh3cDvpnOutputErrorPkt=hh3cDvpnOutputErrorPkt, hh3cDvpnDomainDropPkt=hh3cDvpnDomainDropPkt, hh3cDvpnPoSessionAlgorithmSuite=hh3cDvpnPoSessionAlgorithmSuite, hh3cDvpnTunnelClass=hh3cDvpnTunnelClass, hh3cDvpnClearDomainAllConection=hh3cDvpnClearDomainAllConection, hh3cDvpnDomainNumber=hh3cDvpnDomainNumber, PYSNMP_MODULE_ID=hh3cDvpn, hh3cDvpnSessionHisFirstUpTime=hh3cDvpnSessionHisFirstUpTime, hh3cDvpnNotificationGroup=hh3cDvpnNotificationGroup, hh3cDvpnClassTable=hh3cDvpnClassTable, hh3cDvpnTunnelEntry=hh3cDvpnTunnelEntry, hh3cDvpnMapTable=hh3cDvpnMapTable, hh3cDvpnClientRegisterInterval=hh3cDvpnClientRegisterInterval, hh3cDvpnClAlgorithmSuite=hh3cDvpnClAlgorithmSuite, hh3cDvpnSessionDelNotification=hh3cDvpnSessionDelNotification, hh3cDvpnClPwdEncrypted=hh3cDvpnClPwdEncrypted, hh3cDvpnSessionNumber=hh3cDvpnSessionNumber, hh3cDvpnSessionHisPeerPriIP=hh3cDvpnSessionHisPeerPriIP, hh3cDvpnSessionLocalPriIp=hh3cDvpnSessionLocalPriIp, hh3cDvpnPolicyName=hh3cDvpnPolicyName, hh3cDvpnPoDataAlgorithmSuite=hh3cDvpnPoDataAlgorithmSuite, hh3cDvpnSessionInitiator=hh3cDvpnSessionInitiator, hh3cDvpnServiceEnable=hh3cDvpnServiceEnable, hh3cDvpnDomainOutputPkt=hh3cDvpnDomainOutputPkt, hh3cDvpnMapUdpPort=hh3cDvpnMapUdpPort, hh3cDvpnSessionHisTable=hh3cDvpnSessionHisTable, hh3cDvpnPoUserDefAAADomain=hh3cDvpnPoUserDefAAADomain, hh3cDvpnDomainInputPkt=hh3cDvpnDomainInputPkt, hh3cDvpnPolicyTable=hh3cDvpnPolicyTable, hh3cDvpnSessionHisAgeTime=hh3cDvpnSessionHisAgeTime, hh3cDvpnSessionEntry=hh3cDvpnSessionEntry, hh3cDvpnInputPkt=hh3cDvpnInputPkt, hh3cDvpnClUserName=hh3cDvpnClUserName, hh3cDvpnSessionHisPeerDeviceId=hh3cDvpnSessionHisPeerDeviceId, hh3cDvpnPoSessionIdleTime=hh3cDvpnPoSessionIdleTime, hh3cDvpnPoRowStatus=hh3cDvpnPoRowStatus, hh3cDvpnClServerPublicIpType=hh3cDvpnClServerPublicIpType, hh3cDvpnSessionHisDvpnID=hh3cDvpnSessionHisDvpnID, hh3cDvpnClassRowStatus=hh3cDvpnClassRowStatus, hh3cDvpnSessionHisLastUpTime=hh3cDvpnSessionHisLastUpTime, hh3cDvpnSessionHisReset=hh3cDvpnSessionHisReset, hh3cDvpnMapLocalPriIpType=hh3cDvpnMapLocalPriIpType, hh3cDvpnSessionBuildTime=hh3cDvpnSessionBuildTime, hh3cDvpnClServerPriIp=hh3cDvpnClServerPriIp, hh3cDvpnMapIndex=hh3cDvpnMapIndex, hh3cDvpnMapLocalPublicIpType=hh3cDvpnMapLocalPublicIpType, hh3cDvpnGlobalAuthenClientType=hh3cDvpnGlobalAuthenClientType, hh3cDvpnSessionHisOnlineNumber=hh3cDvpnSessionHisOnlineNumber, hh3cDvpnTunnelGroup=hh3cDvpnTunnelGroup, hh3cDvpnOutputPkt=hh3cDvpnOutputPkt, hh3cDvpnSessionBuildNotification=hh3cDvpnSessionBuildNotification, hh3cDvpnSessionHisOnlineFlag=hh3cDvpnSessionHisOnlineFlag, hh3cDvpnGlobalUserDefAAADomain=hh3cDvpnGlobalUserDefAAADomain, hh3cDvpnDomainSessionNum=hh3cDvpnDomainSessionNum, hh3cDvpnMapBuildNotification=hh3cDvpnMapBuildNotification, hh3cDvpnSessionType=hh3cDvpnSessionType, hh3cDvpnClassNumber=hh3cDvpnClassNumber, hh3cDvpnClPreShareKey=hh3cDvpnClPreShareKey, hh3cDvpnDomainInfoEntry=hh3cDvpnDomainInfoEntry, hh3cDvpnDomainOutputErrorPkt=hh3cDvpnDomainOutputErrorPkt)
