#
# PySNMP MIB module Wellfleet-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, MibIdentifier, IpAddress, Bits, ObjectIdentity, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Integer32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "MibIdentifier", "IpAddress", "Bits", "ObjectIdentity", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Integer32", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfPingGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfPingGroup")
wfPingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1), )
if mibBuilder.loadTexts: wfPingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTable.setDescription('Ping table')
wfPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1), ).setIndexNames((0, "Wellfleet-PING-MIB", "wfPingType"), (0, "Wellfleet-PING-MIB", "wfPingIndex"))
if mibBuilder.loadTexts: wfPingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingEntry.setDescription('A list of control entries used to initiate and manage network layer echo request sequences')
wfPingDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingDelete.setDescription('When set, will cause this row in the table to be deleted')
wfPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingIndex.setDescription('Index into the Ping Table')
wfPingType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("llc", 3), ("osi", 4), ("vines", 5), ("appletalk", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingType.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingType.setDescription('Type of Ping Protocol')
wfPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingAddress.setDescription('Address of the object to echo')
wfPingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4850)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSize.setDescription('Size of the echo request packet in bytes')
wfPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTimeOut.setDescription('Amount of time in seconds before deciding success')
wfPingRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingRetry.setDescription('The number of times to retry')
wfPingTraceRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trace", 1), ("notrace", 2))).clone('notrace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingTraceRoute.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTraceRoute.setDescription('Selecting PING_TRACE (1) will cause a traceroute to be performed and the result placed in wfPingTraceTable')
wfPingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingDelay.setDescription('Number of milliseconds to wait between sending echo packets')
wfPingRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingRemaining.setDescription('The number of ICMP echoes left to send in this sequence. This will be decremented for each time we need to retry and increment wfPingRetry. Whenever a sequence is started, the wfPingReceived and wfPingDropped will be reset to zero.')
wfPingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTimer.setDescription('Time in minutes for the request to begin again, zero means do it once')
wfPingSourceRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nosourceroute", 1), ("strictsourceroute", 2), ("loosesourceroute", 3))).clone('nosourceroute')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingSourceRoute.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceRoute.setDescription('Option that can be set to use loose or strict source routing. IF the value is something other than PING_NOSOURCEROUTE, the corresponding rows in wfPingSourceRouteTable will be used')
wfPingSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceAddress.setDescription('Address that specifies the source of the Ping Request')
wfPingTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tosnormal", 1))).clone('tosnormal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingTypeOfService.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTypeOfService.setDescription('Tells how the ICMP packet should be handled. According to RFC 1349, Normal service is preferred (wfPingTypeOfService = 1)')
wfPingNumHistBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingNumHistBucketsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingNumHistBucketsRequested.setDescription('Number of history buckets that the user asked for which will only be granted if the timer mechanism is being used. Otherwise, only 1 bucket will be granted for the single ping')
wfPingNumHistBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingNumHistBucketsGranted.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingNumHistBucketsGranted.setDescription("The number of history buckets that the user was granted. We don't grant more then 60 which will allow them to do a ping a minute")
wfPingSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingSiteName.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSiteName.setDescription('Character string to store the name of the Site. This is not used for domain name resolution ! It is purely for cosmetic purposes for customer generated reports')
wfPingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("done", 1), ("busy", 2), ("badaddress", 3), ("error", 4), ("timeout", 5), ("invalidparams", 6), ("resourceerror", 7), ("targetunreach", 8), ("ipunavail", 9), ("icmpdestunreach", 10), ("ttlexceeded", 11), ("notimplemented", 12), ("icmphostunreach", 13), ("icmpnetunreach", 14), ("icmpprohibnet", 15), ("icmpprohibhost", 16), ("icmpsrcrtefail", 17), ("protounreach", 18), ("portunreach", 19), ("fragneeded", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingStatus.setDescription('Status of the ping request')
wfPingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("go", 1), ("waiting", 2))).clone('waiting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingAction.setDescription('Begin processing ping when set to GO')
wfPingLastMinRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingLastMinRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingLastMinRoundTripTime.setDescription('The last minimum round trip time.')
wfPingLastMaxRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingLastMaxRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingLastMaxRoundTripTime.setDescription('The last maximum round trip time.')
wfPingLastTotalRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingLastTotalRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingLastTotalRoundTripTime.setDescription('The last total round trip time in milliseconds.')
wfPingIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingIPAddress.setDescription("stations who can't interpret octet string formats.")
wfPingSuccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingSuccessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSuccessStatus.setDescription('interpreting the detailed status returned by wfPingStatus.')
wfPingMaxHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingMaxHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingMaxHopCount.setDescription('Number of maximum hop count when trace route is enabled. The default maximum hop count is 30.')
wfPingTraceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 2), )
if mibBuilder.loadTexts: wfPingTraceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTraceTable.setDescription('Table that contains trace route information')
wfPingTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 2, 1), ).setIndexNames((0, "Wellfleet-PING-MIB", "wfPingTraceType"), (0, "Wellfleet-PING-MIB", "wfPingEntryIndex"), (0, "Wellfleet-PING-MIB", "wfPingTraceIndex"))
if mibBuilder.loadTexts: wfPingTraceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTraceEntry.setDescription('A conceptual row containing information about a network hop associated with a particular echo request.')
wfPingTraceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingTraceType.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTraceType.setDescription('Type of Ping protocol')
wfPingEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingEntryIndex.setDescription('This is the corresponding index into the Ping Table')
wfPingTraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingTraceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTraceIndex.setDescription('A unique integer describing the order in which a particular hop was encountered.')
wfPingTraceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingTraceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTraceAddress.setDescription('Address of the route we passed through')
wfPingSourceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 3), )
if mibBuilder.loadTexts: wfPingSourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceTable.setDescription('Table that contains source route information')
wfPingSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 3, 1), ).setIndexNames((0, "Wellfleet-PING-MIB", "wfPingSourceType"), (0, "Wellfleet-PING-MIB", "wfPingSourceEntryIndex"), (0, "Wellfleet-PING-MIB", "wfPingSourceIndex"))
if mibBuilder.loadTexts: wfPingSourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceEntry.setDescription('A row in the Ping SourceTable')
wfPingSourceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sourcecreated", 1), ("sourcedeleted", 2))).clone('sourcecreated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingSourceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceDelete.setDescription('When set, will cause this row in the table to be deleted.')
wfPingSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingSourceType.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceType.setDescription('Type of Ping Protocol')
wfPingSourceEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingSourceEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceEntryIndex.setDescription('This is the corresponding index into the Ping Table')
wfPingSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingSourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceIndex.setDescription('A unique index for this source route')
wfPingSourceRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingSourceRouteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingSourceRouteAddress.setDescription('Address of the route we are to pass through')
wfPingHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4), )
if mibBuilder.loadTexts: wfPingHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingHistoryTable.setDescription('Table that contains ping history information')
wfPingHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1), ).setIndexNames((0, "Wellfleet-PING-MIB", "wfPingHistoryType"), (0, "Wellfleet-PING-MIB", "wfPingHistoryEntryIndex"), (0, "Wellfleet-PING-MIB", "wfPingHistoryIndex"))
if mibBuilder.loadTexts: wfPingHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingHistoryEntry.setDescription('A row in the Ping HistoryTable')
wfPingHistoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingHistoryType.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingHistoryType.setDescription('Type of Ping protocol')
wfPingHistoryEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingHistoryEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingHistoryEntryIndex.setDescription('This is the corresponding index in the ping table')
wfPingHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingHistoryIndex.setDescription('This is the unique history table index')
wfPingReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingReceived.setDescription('The total number of ICMP echo packets received in this sequence. A sequence is defined from the time the ping request began to the time it was either successful or an error occurred. This field will be reset to zero at the start of every new sequence.')
wfPingDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingDropped.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingDropped.setDescription('The number of ICMP packets dropped since this ping sequence started. It will be reset to zero at the start of every new ping sequence')
wfPingRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingRoundTripTime.setDescription('The round trip time of the last ICMP packet in milliseconds')
wfPingTotalRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingTotalRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingTotalRoundTripTime.setDescription('The sum of the total round trip times of successful pings received in this sequence')
wfPingMinRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingMinRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingMinRoundTripTime.setDescription('The minimum round trip time in this sequence')
wfPingMaxRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingMaxRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingMaxRoundTripTime.setDescription('The maximum round trip time in this sequence')
wfPingBegan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 13, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPingBegan.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingBegan.setDescription('The date and time this ping request was last executed')
mibBuilder.exportSymbols("Wellfleet-PING-MIB", wfPingTotalRoundTripTime=wfPingTotalRoundTripTime, wfPingSourceRouteAddress=wfPingSourceRouteAddress, wfPingSourceIndex=wfPingSourceIndex, wfPingIndex=wfPingIndex, wfPingTraceRoute=wfPingTraceRoute, wfPingType=wfPingType, wfPingAction=wfPingAction, wfPingTraceIndex=wfPingTraceIndex, wfPingAddress=wfPingAddress, wfPingBegan=wfPingBegan, wfPingSize=wfPingSize, wfPingLastTotalRoundTripTime=wfPingLastTotalRoundTripTime, wfPingDelay=wfPingDelay, wfPingMinRoundTripTime=wfPingMinRoundTripTime, wfPingSourceTable=wfPingSourceTable, wfPingTimeOut=wfPingTimeOut, wfPingTraceType=wfPingTraceType, wfPingRemaining=wfPingRemaining, wfPingEntry=wfPingEntry, wfPingSourceAddress=wfPingSourceAddress, wfPingIPAddress=wfPingIPAddress, wfPingSourceRoute=wfPingSourceRoute, wfPingSourceEntryIndex=wfPingSourceEntryIndex, wfPingHistoryEntryIndex=wfPingHistoryEntryIndex, wfPingLastMinRoundTripTime=wfPingLastMinRoundTripTime, wfPingSiteName=wfPingSiteName, wfPingTraceTable=wfPingTraceTable, wfPingHistoryIndex=wfPingHistoryIndex, wfPingMaxRoundTripTime=wfPingMaxRoundTripTime, wfPingDelete=wfPingDelete, wfPingHistoryType=wfPingHistoryType, wfPingSourceEntry=wfPingSourceEntry, wfPingTypeOfService=wfPingTypeOfService, wfPingLastMaxRoundTripTime=wfPingLastMaxRoundTripTime, wfPingTimer=wfPingTimer, wfPingStatus=wfPingStatus, wfPingTable=wfPingTable, wfPingMaxHopCount=wfPingMaxHopCount, wfPingEntryIndex=wfPingEntryIndex, wfPingNumHistBucketsRequested=wfPingNumHistBucketsRequested, wfPingSourceType=wfPingSourceType, wfPingSourceDelete=wfPingSourceDelete, wfPingTraceAddress=wfPingTraceAddress, wfPingHistoryTable=wfPingHistoryTable, wfPingRoundTripTime=wfPingRoundTripTime, wfPingTraceEntry=wfPingTraceEntry, wfPingReceived=wfPingReceived, wfPingHistoryEntry=wfPingHistoryEntry, wfPingRetry=wfPingRetry, wfPingSuccessStatus=wfPingSuccessStatus, wfPingDropped=wfPingDropped, wfPingNumHistBucketsGranted=wfPingNumHistBucketsGranted)
