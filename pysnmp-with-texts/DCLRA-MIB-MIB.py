#
# PySNMP MIB module DCLRA-MIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DCLRA-MIB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
dmiEventSystem, dmiEventAssociatedGroup, dmiCompId, dmiEventSeverity, dmiEventSubSystem, dmiEventDateTime, dmiEventStateKey, DmiInteger64, DmiDate = mibBuilder.importSymbols("DMTF-DMI-MIB", "dmiEventSystem", "dmiEventAssociatedGroup", "dmiCompId", "dmiEventSeverity", "dmiEventSubSystem", "dmiEventDateTime", "dmiEventStateKey", "DmiInteger64", "DmiDate")
InternationalDisplayString, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "InternationalDisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, iso, Gauge32, TimeTicks, Bits, ObjectIdentity, NotificationType, enterprises, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "iso", "Gauge32", "TimeTicks", "Bits", "ObjectIdentity", "NotificationType", "enterprises", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiCounter64(Counter64):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiCompId(Integer32):
    pass

class DmiGroupId(Integer32):
    pass

dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmtfServiceLayerMIF = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2, 1))
dMTFComponentIDTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 1, 1), )
if mibBuilder.loadTexts: dMTFComponentIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFComponentIDTable.setDescription('This group defines the attributes common to all components. This group is required.')
dMTFComponentIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1), ).setIndexNames((0, "DCLRA-MIB-MIB", "DmiCompId"), (0, "DCLRA-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dMTFComponentIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dMTFComponentIDEntry.setDescription('This group defines the attributes common to all components. This group is required.')
manufacturerAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufacturerAtt1.setReference("'DMTF|ComponentID|001' 1")
if mibBuilder.loadTexts: manufacturerAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: manufacturerAtt1.setDescription('Manufacturer of this system.')
productAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productAtt2.setReference("'DMTF|ComponentID|001' 2")
if mibBuilder.loadTexts: productAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: productAtt2.setDescription('Product name for this system.')
versionAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionAtt3.setReference("'DMTF|ComponentID|001' 3")
if mibBuilder.loadTexts: versionAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: versionAtt3.setDescription('Version number of this system.')
serialNumberAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumberAtt4.setReference("'DMTF|ComponentID|001' 4")
if mibBuilder.loadTexts: serialNumberAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: serialNumberAtt4.setDescription('Serial number for this system.')
installationAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installationAtt5.setReference("'DMTF|ComponentID|001' 5")
if mibBuilder.loadTexts: installationAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: installationAtt5.setDescription('The time and date when this component was installed.')
verifyAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("anErrorOccurredCheckStatusCode", 0), ("thisComponentDoesNotExist", 1), ("verificationIsNotSupported", 2), ("reserved", 3), ("thisComponentExistsButTheFunctionalityIsUntested", 4), ("thisComponentExistsButTheFunctionalityIsUnknown", 5), ("thisComponentExistsAndIsNotFunctioningCorrectly", 6), ("thisComponentExistsAndIsFunctioningCorrectly", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: verifyAtt6.setReference("'DMTF|ComponentID|001' 6")
if mibBuilder.loadTexts: verifyAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: verifyAtt6.setDescription('A code that provides a level of verification that the component is still installed and working.')
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
server2 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10891))
dellLRAActionTableTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 313), )
if mibBuilder.loadTexts: dellLRAActionTableTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellLRAActionTableTable.setDescription('This table describes the actions to be performed whenever a particular indication is generated.')
dellLRAActionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 313, 1), ).setIndexNames((0, "DCLRA-MIB-MIB", "DmiCompId"), (0, "DCLRA-MIB-MIB", "DmiGroupId"), (0, "DCLRA-MIB-MIB", "actionNameAtt1"))
if mibBuilder.loadTexts: dellLRAActionTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellLRAActionTableEntry.setDescription('This table describes the actions to be performed whenever a particular indication is generated.')
dellLRAActionTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 313, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLRAActionTableState.setReference("'Dell|LRA ActionTable|001' 0")
if mibBuilder.loadTexts: dellLRAActionTableState.setStatus('mandatory')
actionNameAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 313, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 7, 13, 14, 160, 168, 172, 200, 202, 204, 206, 208, 210, 212, 214, 220, 225))).clone(namedValues=NamedValues(("unknown", 0), ("adaptecHostAdapterFailed", 3), ("adaptecLogicalUnitFailed", 7), ("aPCSystemOnLowUtilityPower", 13), ("aPCSystemOnLowBatteryPower", 14), ("temperatureSensorDetectedAFailure", 160), ("fanSensorDetectedAFailure", 168), ("voltageSensorDetectedAFailure", 172), ("temperatureSensorWarningDetected", 200), ("voltageSensorWarningDetected", 202), ("fanSensorWarningDetected", 204), ("currentSensorDetectedAFailure", 206), ("currentSensorWarningDetected", 208), ("powerSupplyLostRedundancyDetected", 210), ("powerSupplyDegradedRedundancyDetected", 212), ("powerSupplyDetectedAFailure", 214), ("chassisIntrusionDetected", 220), ("lostConnectionToDiskPod", 225)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionNameAtt1.setReference("'Dell|LRA ActionTable|001' 1")
if mibBuilder.loadTexts: actionNameAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: actionNameAtt1.setDescription('This specifies the Dell trap which generates the action')
actionResponseAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 313, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionResponseAtt2.setReference("'Dell|LRA ActionTable|001' 2")
if mibBuilder.loadTexts: actionResponseAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: actionResponseAtt2.setDescription('This is a secure bit field which specifies which actions are to be performed.Bitfield is as follows: 0x001 = Beep 0x002 = Console Alert 0x004 = Broadcast 0x008 = Shutdown OS 0x010 = Reset 0x020 = Power Cycle 0x040 = Power Off 0x080 = Log Reset/PowerCycle/PowerOff 0x100 = Execute Application (uses actionExecute string)')
actionExecuteAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 313, 1, 3), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionExecuteAtt3.setReference("'Dell|LRA ActionTable|001' 3")
if mibBuilder.loadTexts: actionExecuteAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: actionExecuteAtt3.setDescription('This takes an argument of the application to execute & arguments if the Execute Application bit is set. Specialized argument fields exist: %A - Address of MIF generating alert: cid,gid,(keys) %N - Name of alert (Temperature sensor detected a failure) %L - Location of alert (Harrier 1 <Backplane Top>) %T - Trap number of alert (260) %S - Severity of alert')
actionSourceAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 313, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionSourceAtt4.setReference("'Dell|LRA ActionTable|001' 4")
if mibBuilder.loadTexts: actionSourceAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: actionSourceAtt4.setDescription('This contains a combined key for mapping non-dell indications to a LRA format. Format is: MIFNAME;GID;KEY;AID;# MIFNAME - Text name of MIF GID - Group ID KEY - Row index AID - Attribute ID # - Trap number to map to')
uDPInformationAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 313, 1, 5), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uDPInformationAtt5.setReference("'Dell|LRA ActionTable|001' 5")
if mibBuilder.loadTexts: uDPInformationAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: uDPInformationAtt5.setDescription('Account Information for LRA Execute User applications.')
dellLRACapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 314), )
if mibBuilder.loadTexts: dellLRACapabilitiesTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellLRACapabilitiesTable.setDescription("This class's attribute describes which LRA capabilities can be performed on this machine.")
dellLRACapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 314, 1), ).setIndexNames((0, "DCLRA-MIB-MIB", "DmiCompId"), (0, "DCLRA-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dellLRACapabilitiesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellLRACapabilitiesEntry.setDescription("This class's attribute describes which LRA capabilities can be performed on this machine.")
lRACapabilitiesAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 314, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lRACapabilitiesAtt1.setReference("'Dell|LRA Capabilities|001' 1")
if mibBuilder.loadTexts: lRACapabilitiesAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: lRACapabilitiesAtt1.setDescription('This value describes what LRA actions may be taken on this system.')
dellLRABeepActionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 315), )
if mibBuilder.loadTexts: dellLRABeepActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: dellLRABeepActionTable.setDescription('This group describes information for the beep response whenever a particular indication is generated.')
dellLRABeepActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 315, 1), ).setIndexNames((0, "DCLRA-MIB-MIB", "DmiCompId"), (0, "DCLRA-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dellLRABeepActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dellLRABeepActionEntry.setDescription('This group describes information for the beep response whenever a particular indication is generated.')
beepClearAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 315, 1, 1), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: beepClearAtt1.setReference("'Dell|LRA Beep Action|001' 1")
if mibBuilder.loadTexts: beepClearAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: beepClearAtt1.setDescription('Setting this field to a non-zero number will cancel the current beeping event')
beepDelayAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 315, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: beepDelayAtt2.setReference("'Dell|LRA Beep Action|001' 2")
if mibBuilder.loadTexts: beepDelayAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: beepDelayAtt2.setDescription('Sleep time (in seconds) between repeating beeps')
dELLSystemsManagementSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10891, 400), )
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareTable.setStatus('mandatory')
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareTable.setDescription('This group defines the attributes of the management software which instruments this component.')
dELLSystemsManagementSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1), ).setIndexNames((0, "DCLRA-MIB-MIB", "DmiCompId"), (0, "DCLRA-MIB-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dELLSystemsManagementSoftwareEntry.setDescription('This group defines the attributes of the management software which instruments this component.')
productAtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productAtt1.setReference("'DELL|Systems Management Software|001' 1")
if mibBuilder.loadTexts: productAtt1.setStatus('mandatory')
if mibBuilder.loadTexts: productAtt1.setDescription('The name of the Systems Management Software product that instruments this component.')
versionAtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionAtt2.setReference("'DELL|Systems Management Software|001' 2")
if mibBuilder.loadTexts: versionAtt2.setStatus('mandatory')
if mibBuilder.loadTexts: versionAtt2.setDescription('The version for the Systems Management Software.')
buildNumberAtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildNumberAtt3.setReference("'DELL|Systems Management Software|001' 3")
if mibBuilder.loadTexts: buildNumberAtt3.setStatus('mandatory')
if mibBuilder.loadTexts: buildNumberAtt3.setDescription('The build number of this Systems Management Software product.')
descriptionAtt4 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: descriptionAtt4.setReference("'DELL|Systems Management Software|001' 4")
if mibBuilder.loadTexts: descriptionAtt4.setStatus('mandatory')
if mibBuilder.loadTexts: descriptionAtt4.setDescription('A description of this Systems Management Software product.')
supportedProtocolsAtt5 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supportedProtocolsAtt5.setReference("'DELL|Systems Management Software|001' 5")
if mibBuilder.loadTexts: supportedProtocolsAtt5.setStatus('mandatory')
if mibBuilder.loadTexts: supportedProtocolsAtt5.setDescription('This is a bit map field which is used to list protocols which can be used to access the systems management information. This is a bit map where a value of 1 indicates that the protocol is supported. Values are based on the Protocol-Type enum. Mappers will be listed in this list, but not as preferred protocols.')
preferredProtocolAtt6 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("sNMP", 1), ("dMIRPC", 2), ("cIMOM", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: preferredProtocolAtt6.setReference("'DELL|Systems Management Software|001' 6")
if mibBuilder.loadTexts: preferredProtocolAtt6.setStatus('mandatory')
if mibBuilder.loadTexts: preferredProtocolAtt6.setDescription('This is a field which is used to indicate which protocol is the preferred method for gathering management information. This is value is set by the instrumentation based on performance and features of protocols available.')
dMIRPCTypesAtt7 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10891, 400, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dMIRPCTypesAtt7.setReference("'DELL|Systems Management Software|001' 7")
if mibBuilder.loadTexts: dMIRPCTypesAtt7.setStatus('mandatory')
if mibBuilder.loadTexts: dMIRPCTypesAtt7.setDescription('This field describes the RPC type, if any, for instance DCE:ncac -ip-tcp or ONC:tcpip. A semi-colon may seperate multiple supports, such as DCE:ncasn-ip-tcp;ONC:tcpip. This field should be empty if DMI RPC is not supported.')
mibBuilder.exportSymbols("DCLRA-MIB-MIB", DmiDisplaystring=DmiDisplaystring, dell=dell, actionSourceAtt4=actionSourceAtt4, dellLRABeepActionEntry=dellLRABeepActionEntry, DmiGauge=DmiGauge, dellLRABeepActionTable=dellLRABeepActionTable, DmiCompId=DmiCompId, dmtfServiceLayerMIF=dmtfServiceLayerMIF, dMTFComponentIDTable=dMTFComponentIDTable, dMTFComponentIDEntry=dMTFComponentIDEntry, dELLSystemsManagementSoftwareEntry=dELLSystemsManagementSoftwareEntry, DmiInteger=DmiInteger, manufacturerAtt1=manufacturerAtt1, dmtf=dmtf, DmiCounter64=DmiCounter64, versionAtt2=versionAtt2, dMIRPCTypesAtt7=dMIRPCTypesAtt7, verifyAtt6=verifyAtt6, actionNameAtt1=actionNameAtt1, dellLRAActionTableTable=dellLRAActionTableTable, dmtfDynOids=dmtfDynOids, actionResponseAtt2=actionResponseAtt2, descriptionAtt4=descriptionAtt4, beepDelayAtt2=beepDelayAtt2, versionAtt3=versionAtt3, dmtfStdMifs=dmtfStdMifs, beepClearAtt1=beepClearAtt1, productAtt1=productAtt1, supportedProtocolsAtt5=supportedProtocolsAtt5, dellLRACapabilitiesTable=dellLRACapabilitiesTable, dellLRAActionTableEntry=dellLRAActionTableEntry, dellLRACapabilitiesEntry=dellLRACapabilitiesEntry, preferredProtocolAtt6=preferredProtocolAtt6, DmiOctetstring=DmiOctetstring, buildNumberAtt3=buildNumberAtt3, uDPInformationAtt5=uDPInformationAtt5, serialNumberAtt4=serialNumberAtt4, dellLRAActionTableState=dellLRAActionTableState, dELLSystemsManagementSoftwareTable=dELLSystemsManagementSoftwareTable, DmiCounter=DmiCounter, actionExecuteAtt3=actionExecuteAtt3, lRACapabilitiesAtt1=lRACapabilitiesAtt1, installationAtt5=installationAtt5, DmiGroupId=DmiGroupId, productAtt2=productAtt2, server2=server2)
