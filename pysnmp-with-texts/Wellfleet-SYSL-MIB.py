#
# PySNMP MIB module Wellfleet-SYSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-SYSL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter64, MibIdentifier, ModuleIdentity, IpAddress, Bits, iso, Counter32, TimeTicks, NotificationType, Gauge32, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "MibIdentifier", "ModuleIdentity", "IpAddress", "Bits", "iso", "Counter32", "TimeTicks", "NotificationType", "Gauge32", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfSyslogGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSyslogGroup")
wfSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1))
wfSyslogDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogDelete.setDescription('A flag to indicate SYSLOG instance deletion If this flag is set to delete then the syslog subsystem and all associated MIB information will be deleted from the router.')
wfSyslogDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogDisable.setDescription('Enables or Disables SYSLOG Subsystem Note: Even if this attribute is set to SYSLOG_BASE_ENABLED a remote host must be configured and enabled with associated enabled filters before the syslog subsystem will begin filtering and forwarding messages')
wfSyslogOperState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogOperState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogOperState.setDescription('This field indicates the actual stat of the syslog subsystem. If it is equal to SYSLOG_UP, then the subsystem is currently filtering and forwarding syslog messages. If it is SYSLOG_DOWN then it is not forwarding messages because of several possiblities: 1) No hosts are configured for the subsystem, 2) No hosts are enabled 3) Hosts are enabled but have no respective filters enabled')
wfSyslogMaxHosts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogMaxHosts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogMaxHosts.setDescription('Number of remote hosts allowed to be configured')
wfSyslogPollTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 610000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogPollTimer.setDescription('Timer used to determine the iteration that log files are polled for new messages by the syslog application')
wfSyslogActTimeSeqHosts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogActTimeSeqHosts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogActTimeSeqHosts.setDescription('This attribute is used to keep track of the current number of ACTIVE hosts configured for time sequencing. If a management station attempts to configure more hosts (wfSyslogTimeSeqHosts and wfSyslogNonSeqHosts) than wfSyslogMaxHosts allows, then the wfSyslogHostState for that host record will be set to SYSLOG_HOST_INACTIVE. ')
wfSyslogActNonSeqHosts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogActNonSeqHosts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogActNonSeqHosts.setDescription('This attribute is used to keep track of the current number of ACTIVE hosts that are NOT configured for time sequencing. If a management station attempts to configure more hosts (wfSyslogTimeSeqHosts and wfSyslogNonSeqHosts) than wfSyslogMaxHosts allows, then the wfSyslogHostState for that host record will be set to SYSLOG_HOST_INACTIVE. ')
wfSyslogTotalMsgFwds = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogTotalMsgFwds.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogTotalMsgFwds.setDescription('Counter used to track the total number of UDP syslog messages sent')
wfSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2), )
if mibBuilder.loadTexts: wfSyslogHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostTable.setDescription('Table containing remote host records')
wfSyslogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1), ).setIndexNames((0, "Wellfleet-SYSL-MIB", "wfSyslogHostDest"))
if mibBuilder.loadTexts: wfSyslogHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostEntry.setDescription('Information concerning a specific remote host entry')
wfSyslogHostDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogHostDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostDelete.setDescription("A flag to indicate SYSLOG instance deletion If this flag is set to delete then it is the application's responsibility to delete the record and the respective filter table records")
wfSyslogHostDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogHostDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostDisable.setDescription('Enables or Disables syslog messaging for this remote host')
wfSyslogHostDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogHostDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostDest.setDescription('IP address of the remote host')
wfSyslogHostUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1, 4), Integer32().clone(514)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogHostUDPPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostUDPPort.setDescription('UDP port of the remote host')
wfSyslogHostLogFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local7')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogHostLogFacility.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostLogFacility.setDescription('Facility type to use in encoding the priority of the syslog message LOG_LOCAL0 -> SYSLOG_LOG_FACILITY_LOCAL0 LOG_LOCAL1 -> SYSLOG_LOG_FACILITY_LOCAL1 . . LOG_LOCAL7 -> SYSLOG_LOG_FACILITY_LOCAL7')
wfSyslogHostTimeSeqEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogHostTimeSeqEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostTimeSeqEnable.setDescription("If wfSyslogLogTimeSeqEnable is set to enabled then the syslog application will transmit the messages to the remote host in time sequenced order(This is not guaranteed however because the UDP transport mechanism is connectionless, an thus, unreliable. The possibility exists for messages to be lost or delivered out of sequence ) If this attribute is disabled then messages will be sent to the remote host in the order that they occur on each slot( i.e. no aggragation of the messages across slots will be performed ) NOTE: If this value is changed while this host is enabled then the possiblity exists such that the remote host could receive duplicate log messages or worse log messages may not be sent to the remote host. The best procedure to follow would be to disable the the remote host's MIB record, then set this value and then enable this host's MIB record again.")
wfSyslogHostOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogHostOperState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostOperState.setDescription('Used to track the state of the host record. If too many hosts are configured with entity filters then this value will be set to inactive by the syslog application.')
wfSyslogHostMsgFwds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogHostMsgFwds.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogHostMsgFwds.setDescription('Counter used to track the number of UDP syslog messages sent to this remote host')
wfSyslogEntityFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3), )
if mibBuilder.loadTexts: wfSyslogEntityFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntityFilterTable.setDescription('Table containing filter records for associated remote hostss')
wfSyslogEntFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1), ).setIndexNames((0, "Wellfleet-SYSL-MIB", "wfSyslogEntFltrHostIndex"), (0, "Wellfleet-SYSL-MIB", "wfSyslogEntFltrNum"), (0, "Wellfleet-SYSL-MIB", "wfSyslogEntFltrIndex"))
if mibBuilder.loadTexts: wfSyslogEntFltrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrEntry.setDescription("This table is used to filter out messages by filtering them on a per entity basis, per remote host. This table is indexed with the remote host's IP address that is to receive the filtered messages, a value that represents the entity type to filter messages on and an entity filter index. All messages are passed through this filter table. If an instance of this table exists for a remote host, then a message will then be checked to see if the entity type of the message is equal to one specified in this table. If not then it is not forwarded. If it does equal the one specified in this table then the filters for that entity instance are applied to that message. Example: Entity Log Event Severity Slot Filter Type LWBnd UPBnd Mask LWBnd UPBnd ------- ----------- ------ ----------- 88(FTP) 2 8 '' 3 6 -->All FTP log msgs of value 2,3,4,5, 6,7,8 occurring on slots 3,4,5,6 will be forwarded 2( IP ) 0 255 'fw' 4 4 --> All IP log msgs of level fault and warning occurring on slot 4 will be forwarded ------------------------------------------------------------- NOTE: A wildcard entity filter will only be used if the there are no other 'non-wildcard' filters( i.e. IP, FTP etc. ) enabled for the wildcard entity filter's remote host. 255(WC) Ignored 'fwd' 4 5 --> All log msgs of level fault, warning and debug occurring on slots 4 and 5 will be forwarded ")
wfSyslogEntFltrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrDelete.setDescription("A flag to indicate SYSLOG instance deletion If this flag is set to delete then it is the application's responsibility to delete the record and the respective filter table records")
wfSyslogEntFltrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrDisable.setDescription('Enables or Disables syslog filtering for this entity record')
wfSyslogEntFltrHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogEntFltrHostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrHostIndex.setDescription('Remote Host IP address, used to associate this filter with a remote host in the SYSLOG_HOST_TABLE')
wfSyslogEntFltrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogEntFltrNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrNum.setDescription("Entity type to use as filter NOTE: Entities are listed with their numerical mappings in the documentation titled 'Event Messages for Wellfleet Routers' NOTE2: If entity type is WILDCARD(255) then the attributes wfSyslogEntFltrLogEvtLowBnd and wfSyslogEntFltrLogEvtUppBnd will be ignored and wfSyslogEntFltrSevMask will be used.")
wfSyslogEntFltrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogEntFltrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrIndex.setDescription('Entity Filter Index. Used to distinguish filters of the same entity type')
wfSyslogEntFltrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSyslogEntFltrOperState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrOperState.setDescription("This field indicates the actual stat of the syslog filter. If it is equal to SYSLOG_FILTER_ACTIVE, then the subsystem is currently filtering events against this filter. If it is SYSLOG_FILTER_INACTIVE then the subsystem is not filtering events against this filter because of several possiblities: 1) Filter's host is not activ, 2) Filter does not have event range configured 3) Filter does not have severity mask configured 4) Slot's residing in system do not fall within filter's slot range")
wfSyslogEntFltrLogEvtLowBnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrLogEvtLowBnd.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrLogEvtLowBnd.setDescription('Lower boundary for the log event entity filter, see SYSLOG_ENTITY_FILTER_TABLE for more complete description NOTE: Event numerical mappings are found in /include/<ENTITY>_edl.h')
wfSyslogEntFltrLogEvtUppBnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 8), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrLogEvtUppBnd.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrLogEvtUppBnd.setDescription('Upper boundary for the log event entity filter, see SYSLOG_ENTITY_FILTER_TABLE for more complete description')
wfSyslogEntFltrSevMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrSevMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrSevMask.setDescription('Filter used to filter out log messages by error level (i.e. fault, informational, warning, trace and debug. This filter is used only if no values are specified for wfSyslogEntFltrLogEvtLowBnd, or if this entity type is of type WILDCARD(255)')
wfSyslogEntFltrSlotLowBnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrSlotLowBnd.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrSlotLowBnd.setDescription('Lower boundary for the entity slot filter, see SYSLOG_ENTITY_FILTER_TABLE for more complete description')
wfSyslogEntFltrSlotUppBnd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrSlotUppBnd.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrSlotUppBnd.setDescription('Upper boundary for the entity slot filter, see SYSLOG_ENTITY_FILTER_TABLE for more complete description')
wfSyslogEntFltrFaultMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8))).clone('crit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrFaultMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrFaultMap.setDescription('Value to Map System Fault log messages to')
wfSyslogEntFltrWarningMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8))).clone('warning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrWarningMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrWarningMap.setDescription('Value to Map System Warning log messages to')
wfSyslogEntFltrInfoMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8))).clone('info')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrInfoMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrInfoMap.setDescription('Value to Map System Info log messages to')
wfSyslogEntFltrTraceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8))).clone('debug')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrTraceMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrTraceMap.setDescription('Value to Map System Trace log messages to')
wfSyslogEntFltrDebugMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8))).clone('debug')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrDebugMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrDebugMap.setDescription('Value to Map System Debug log messages to')
wfSyslogEntFltrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 15, 3, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSyslogEntFltrName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSyslogEntFltrName.setDescription('Text name supplied by the user for this filter. It will default so the entity name/index')
mibBuilder.exportSymbols("Wellfleet-SYSL-MIB", wfSyslogEntFltrTraceMap=wfSyslogEntFltrTraceMap, wfSyslogDisable=wfSyslogDisable, wfSyslogEntFltrDisable=wfSyslogEntFltrDisable, wfSyslogEntFltrFaultMap=wfSyslogEntFltrFaultMap, wfSyslogHostTable=wfSyslogHostTable, wfSyslogEntFltrEntry=wfSyslogEntFltrEntry, wfSyslogHostLogFacility=wfSyslogHostLogFacility, wfSyslogActTimeSeqHosts=wfSyslogActTimeSeqHosts, wfSyslogEntFltrHostIndex=wfSyslogEntFltrHostIndex, wfSyslogEntFltrDebugMap=wfSyslogEntFltrDebugMap, wfSyslogTotalMsgFwds=wfSyslogTotalMsgFwds, wfSyslogEntFltrOperState=wfSyslogEntFltrOperState, wfSyslogHostTimeSeqEnable=wfSyslogHostTimeSeqEnable, wfSyslogEntFltrWarningMap=wfSyslogEntFltrWarningMap, wfSyslogHostUDPPort=wfSyslogHostUDPPort, wfSyslogEntFltrName=wfSyslogEntFltrName, wfSyslogEntFltrLogEvtLowBnd=wfSyslogEntFltrLogEvtLowBnd, wfSyslogHostEntry=wfSyslogHostEntry, wfSyslogOperState=wfSyslogOperState, wfSyslogEntFltrSlotUppBnd=wfSyslogEntFltrSlotUppBnd, wfSyslog=wfSyslog, wfSyslogHostDisable=wfSyslogHostDisable, wfSyslogEntFltrDelete=wfSyslogEntFltrDelete, wfSyslogDelete=wfSyslogDelete, wfSyslogMaxHosts=wfSyslogMaxHosts, wfSyslogHostDest=wfSyslogHostDest, wfSyslogEntityFilterTable=wfSyslogEntityFilterTable, wfSyslogHostMsgFwds=wfSyslogHostMsgFwds, wfSyslogEntFltrNum=wfSyslogEntFltrNum, wfSyslogEntFltrSevMask=wfSyslogEntFltrSevMask, wfSyslogActNonSeqHosts=wfSyslogActNonSeqHosts, wfSyslogEntFltrSlotLowBnd=wfSyslogEntFltrSlotLowBnd, wfSyslogHostDelete=wfSyslogHostDelete, wfSyslogHostOperState=wfSyslogHostOperState, wfSyslogEntFltrLogEvtUppBnd=wfSyslogEntFltrLogEvtUppBnd, wfSyslogPollTimer=wfSyslogPollTimer, wfSyslogEntFltrInfoMap=wfSyslogEntFltrInfoMap, wfSyslogEntFltrIndex=wfSyslogEntFltrIndex)
