#
# PySNMP MIB module CISCO-CDSTV-ISA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDSTV-ISA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
TimeIntervalSec, = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, ObjectIdentity, Unsigned32, Integer32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, MibIdentifier, Gauge32, TimeTicks, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Unsigned32", "Integer32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "MibIdentifier", "Gauge32", "TimeTicks", "iso", "IpAddress")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoCdstvIsaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 755))
ciscoCdstvIsaMIB.setRevisions(('2012-03-13 00:00', '2010-08-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCdstvIsaMIB.setRevisionsDescriptions(('CDS-TV 3.0 version of this MIB module', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCdstvIsaMIB.setLastUpdated('201203130000Z')
if mibBuilder.loadTexts: ciscoCdstvIsaMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCdstvIsaMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cds@cisco.com')
if mibBuilder.loadTexts: ciscoCdstvIsaMIB.setDescription("This MIB module defines ISA configuration objects that faciliate the management of the Cisco Content Delivery System for TV (CDS-TV) product family. CDS-TV is a suite of products and software applications providing ingest, storage, caching, streaming, playout and on-demand delivery of video to television or set-top-box clients. Abbreviations: ASI Asynchronous Serial Interface CDS Content Delivery System CORBA Common Object Request Broker Architecture ISA Interactive Services Architecture ISV Integrated Streamer-Vault FSI File Service Interface FTP File Transfer Protocol MPEG Motion Picture Experts Group MSA Managed Services Architecture LSCP Lightweight Stream Control Protocol RTI Roome Telecommunications, Inc RTSP Real-Time Streaming Protocol STB Set-Top Box TTV Tampereen Tietoverkko, Finland Common terms: Catcher: Device responsible for receiving content (typically via satellite dishes and antennae) from content providers or from a Headend-In-The-Sky. Content Ingest: Acquisition of content from a source such as a catcher or an FTP server for storing it locally and making it available to streamers as needed. Vault: Content delivery application responsible for ingesting and storing video content and making it available to streamers. Streamer: Content delivery application responsible for streaming video out to STB's. CorbaLoc: Corba Location (CorbaLoc) refers to a string object reference for a CORBA object that looks similar to a URL and provides a human readable and editable way to specify a location where an IOR (Interoperable Object Reference) can be obtained. An example of a corbaloc URL is: 'corbaloc::160.45.110.41:38693/StandardNS/NameServer-POA/_root' ISA: Time Warner Cable's Interactive Services Architecture is a CORBA-based framework specifying interfaces for communication between various applications and servers in a cable video-on-demand ecosystem, including back-office, billing, subscriber management and streaming.")
ciscoCdstvIsaMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 0))
ciscoCdstvIsaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1))
ciscoCdstvIsaMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 2))
cdstvISAConfigGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1))
cdstvISAConfigContentService = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 2))
cdstvISAConfigStreamService = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3))
cdstvISAConfigNamingService = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 4))
cdstvISAConfigNotifyService = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 5))
cdstvISAConfigContentStore = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 6))
cdstvISAConfigFactory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 7))
cdstvISAConfigContentFactory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 8))
cdstvISAConfigContentChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 9))
cdstvISAConfigStreamChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 10))
cdstvISAConfigEventChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 11))
cdstvISAConfigFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 12))
cdstvISAConfigLSCP = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 13))
cdstvISAConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigFileName.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigFileName.setDescription('This object specifies the name of the file that stores the ISA configuration settings.')
cdstvISAConfigWebServicePort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 2), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigWebServicePort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigWebServicePort.setDescription('This object specifies the port number used by web service processes listening on this server.')
cdstvISAConfigMSAEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigMSAEnabled.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigMSAEnabled.setDescription("This object specifies whether Managed Services Architecture (MSA) is enabled or disabled. 'true' - MSA is enabled. 'false' - MSA is disabled.")
cdstvISAConfigTmeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigTmeEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cdstvISAConfigTmeEnabled.setDescription("This object specifies whether Trick Mode Event (TME) enhancements are enabled. 'true' - TME enhancements enabled. 'false' - TME enhancements disabled. cdstvISAConfigTmeEnabled object is superseded by cdstvISAConfigTmeStatus.")
cdstvISAConfigLoadQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 5), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigLoadQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigLoadQueryInterval.setDescription('This object specifies the time interval (in seconds) between ISA process queries to the CDS database and other internal sources that aid in determining the management and distribution of streams and ingests.')
cdstvISAConfigPlayNumThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigPlayNumThreads.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigPlayNumThreads.setDescription('This object specifies the Lightweight Stream Control Protocol (LSCP) number of threads.')
cdstvISAConfigResourceMgrServiceName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigResourceMgrServiceName.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigResourceMgrServiceName.setDescription('This object specifies the name of the CDS Resource Service Manager that monitors orphan sessions.')
cdstvISAConfigServicePollTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 8), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigServicePollTime.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigServicePollTime.setDescription('This object specifies the time interval (seconds) between polling for orphan sessions.')
cdstvISAConfigPreEncryptionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigPreEncryptionEnabled.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigPreEncryptionEnabled.setDescription("This object specifies whether pre-encryption support is enabled or disabled. 'true' - Pre-encryption support is enabled. 'false' - Pre-encryption support is disabled.")
cdstvISAConfigSessionGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 10), )
if mibBuilder.loadTexts: cdstvISAConfigSessionGatewayTable.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigSessionGatewayTable.setDescription("This table lists the Session Gateways Identifiers. This table is supported only for server roles 'streamer' and 'ISV', indicated by the object 'cdstvServerRole' in CISCO-CDSTV-SERVER-MIB.")
cdstvISAConfigSessionGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 10, 1), ).setIndexNames((0, "CISCO-CDSTV-ISA-MIB", "cdstvISAConfigSessionGatewayIndex"))
if mibBuilder.loadTexts: cdstvISAConfigSessionGatewayEntry.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigSessionGatewayEntry.setDescription("An entry in the cdstvISAConfigSessionGatewayTable. A new row is created/destroyed in the cdstvISAConfigSessionGatewayTable whenever session gateway ID's are configured/unconfigured.")
cdstvISAConfigSessionGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cdstvISAConfigSessionGatewayIndex.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigSessionGatewayIndex.setDescription("An index into the table containing Session Gateway ID's.")
cdstvISAConfigSessionGatewayID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 10, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigSessionGatewayID.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigSessionGatewayID.setDescription('This object specifies the Session Gateway ID used by the backoffice Session Gateway service for registering with the Name Service.')
cdstvISAConfigTmeStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableForOpenStream", 1), ("enableForMystroMDN", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigTmeStatus.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigTmeStatus.setDescription('This object specifies whether Trick Mode Event (TME) enhancements are Enabled or Disabled. enableForOpenStream(1) - Enable for OpenStream enableForMystroMDN(2) - Enable for MystroMDN disabled(3) - Disabled')
cdstvISAConfigContentServiceMasterIpType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 2, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentServiceMasterIpType.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentServiceMasterIpType.setDescription('This object specifies the type of the master IP address of the Content Service, which is specified by cdstvISAConfigContentServiceMasterIp.')
cdstvISAConfigContentServiceMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 2, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentServiceMasterIp.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentServiceMasterIp.setDescription('This object specifies the master IP address of the Content Service, which is the same for all Vault servers in an array. The type of the IP address is specified by cdstvISAConfigContentServiceMasterIpType.')
cdstvISAConfigContentServiceMasterPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 2, 3), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentServiceMasterPort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentServiceMasterPort.setDescription('This object specifies the port used by the master Content Service for controlling content.')
cdstvISAConfigStreamServiceMasterIpType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceMasterIpType.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceMasterIpType.setDescription('This object specifies the type of the configured IP address for the Stream Service Master, specified by cdstvISAConfigStreamServiceMasterIp.')
cdstvISAConfigStreamServiceMasterIp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceMasterIp.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceMasterIp.setDescription('This object specifies the configured IP address for the Stream Service Master. The type of the IP address is specified by cdstvISAConfigStreamServiceMasterIpType.')
cdstvISAConfigStreamServiceMasterPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 3), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceMasterPort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceMasterPort.setDescription('This object specifies the port used by the Stream Service Master for controlling streams.')
cdstvISAConfigStreamServiceId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceId.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceId.setDescription('This object specifies the name of the Stream Service object that is registered with the OpenStream system.')
cdstvISAConfigStreamServiceKind = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceKind.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamServiceKind.setDescription('This object specifies the Service ID extension.')
cdstvISAConfigMasterNumThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigMasterNumThreads.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigMasterNumThreads.setDescription('This object specifies the stream service master number of threads.')
cdstvISAConfigStreamSourceIPConfig = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("controlIp", 2), ("defaultStreamSourceIp", 3), ("streamInterfaceIp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamSourceIPConfig.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamSourceIPConfig.setDescription('This object specifies the type of the source IP address that is included in the session setup header. Possible values are: none(1) - No IP address included in session setup header controlIp(2) - Control IP. defaultStreamSourceIp(3) - Default Stream Source IP. streamInterfaceIp(4) - Stream Interface IP.')
cdstvISAConfigStreamSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 8), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamSourcePort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamSourcePort.setDescription('This object specifies the Streamer port used for streaming.')
cdstvISAConfigStreamingMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asi", 1), ("gige", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamingMode.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamingMode.setDescription('This object specifies the mode expected by the next device in the network. Possible options are: asi(1) - ASI mode. gige(2) - GigE mode.')
cdstvISAConfigStreamHeadendIdType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 10), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamHeadendIdType.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamHeadendIdType.setDescription('This object specifies the type of the Headend ID for the Streaming Service, specified by cdstvISAConfigStreamHeadendId.')
cdstvISAConfigStreamHeadendId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamHeadendId.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamHeadendId.setDescription('This object specifies the Headend ID for the Streaming Service. The address type of the Headend ID is specified by cdstvISAConfigStreamHeadendIdType.')
cdstvISAConfigStreamTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 3, 12), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamTimeout.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamTimeout.setDescription('This object specifies the maximum time allowed (seconds) before a stream object is played.')
cdstvISAConfigNamingServiceIpType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 4, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigNamingServiceIpType.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigNamingServiceIpType.setDescription('This object specifies the type of the IP address of the CORBA Naming Service used by the OpenStream system. The IP address is specified by cdstvISAConfigNamingServiceIp.')
cdstvISAConfigNamingServiceIp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 4, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigNamingServiceIp.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigNamingServiceIp.setDescription('This object specifies the IP address of the CORBA Naming Service used by the OpenStream system. The type of the address is specified by cdstvISAConfigNamingServiceIpType.')
cdstvISAConfigNamingServicePort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 4, 3), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigNamingServicePort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigNamingServicePort.setDescription('This object specifies the port of the Naming Service used by the OpenStream system.')
cdstvISAConfigNotifyServiceIpType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 5, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigNotifyServiceIpType.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigNotifyServiceIpType.setDescription('This object specifies the type of the IP address of the CORBA Notification Service used by the OpenStream system. The IP address is specified by cdstvISAConfigNotifyServiceIp.')
cdstvISAConfigNotifyServiceIp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 5, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigNotifyServiceIp.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigNotifyServiceIp.setDescription('This object specifies the IP address of the CORBA Notification Service used by the OpenStream system. The type of this address is specified by cdstvISAConfigNotifyServiceIpType.')
cdstvISAConfigNotifyServicePort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 5, 3), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigNotifyServicePort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigNotifyServicePort.setDescription('The port of the Notification Service used by the OpenStream system.')
cdstvISAConfigNotifyServiceFactory = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 5, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigNotifyServiceFactory.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigNotifyServiceFactory.setDescription("This object specifies the name used to locate the Notify Service through the 'corbaloc' protocol.")
cdstvISAConfigContentStoreName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 6, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentStoreName.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentStoreName.setDescription('This object specifies the name of the CDS Content Store object that is registered with the OpenStream system.')
cdstvISAConfigContentStoreKind = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 6, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentStoreKind.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentStoreKind.setDescription('This object specifies the content store ID extension.')
cdstvISAConfigContentNumThreads = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 6, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentNumThreads.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentNumThreads.setDescription('This object specifies the content store number of threads.')
cdstvISAConfigFactoryId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 7, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigFactoryId.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigFactoryId.setDescription('This object specifies a name that identifies the root directory of the ISA factories where all factories need to register.')
cdstvISAConfigFactoryKind = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 7, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigFactoryKind.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigFactoryKind.setDescription('This object specifies the Factories ID extension.')
cdstvISAConfigContentFactoryId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 8, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentFactoryId.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentFactoryId.setDescription('This object specifies the name of the CDS Content Store Factory that is registered with the OpenStream system.')
cdstvISAConfigContentFactoryKind = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 8, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentFactoryKind.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentFactoryKind.setDescription('This object specifies the content store factory ID extension.')
cdstvISAConfigContentChannelId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 9, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentChannelId.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentChannelId.setDescription('This object specifies a name that identifies the Content Event Channel where all events concerning content objects are published.')
cdstvISAConfigContentChannelKind = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 9, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigContentChannelKind.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigContentChannelKind.setDescription('This object specifies the Event Channel Content ID extension.')
cdstvISAConfigStreamChannelId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 10, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamChannelId.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamChannelId.setDescription('This object specifies a name that identifies the Stream Event Channel where all events concerning stream objects are published.')
cdstvISAConfigStreamChannelKind = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 10, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigStreamChannelKind.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigStreamChannelKind.setDescription('This object specifies the Event Channel Stream ID extension.')
cdstvISAConfigEventChannelId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 11, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigEventChannelId.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigEventChannelId.setDescription('This object specifies a name that identifies the root directory of the Event Channel where all event channels need to register.')
cdstvISAConfigEventChannelKind = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 11, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigEventChannelKind.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigEventChannelKind.setDescription('This object specifies the directory extension of the Event Channel ID.')
cdstvISAConfigEventChannelFactory = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 11, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigEventChannelFactory.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigEventChannelFactory.setDescription('This object specifies a name that identifies the Event Channel Factory which is used to create event channels, and resolves the Notification Service name.')
cdstvISAConfigFTPClientPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 12, 1), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigFTPClientPort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigFTPClientPort.setDescription('This object specifies the port used when the Vault receives a request from the OpenStream system to act as an FTP client and sends an FTP get command to the content provider acting as an FTP server.')
cdstvISAConfigFTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 12, 2), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigFTPServerPort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigFTPServerPort.setDescription('This object specifies the port used when the Vault receives a request from the OpenStream system to act as an FTP server and receives an FTP put command from the content provider acting as an FTP client.')
cdstvISAConfigFTPServerOutPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 12, 3), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigFTPServerOutPort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigFTPServerOutPort.setDescription('This object specifies the configured ISA FTP Server Out Port.')
cdstvISAConfigFTPClientNumAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 12, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigFTPClientNumAttempts.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigFTPClientNumAttempts.setDescription('This object specifies the number of times the FTP client attempts to transfer the content file.')
cdstvISAConfigFTPPollTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 12, 5), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigFTPPollTimeout.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigFTPPollTimeout.setDescription('This object specifies the idle seconds allowed before an FTP download is disconnected.')
cdstvISAConfigLscpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 13, 1), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigLscpServerPort.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigLscpServerPort.setDescription('This object specifies the port on the Streamer that is listening for LSCP commands from the set-top box.')
cdstvISAConfigLscpResponsePadding = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 13, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigLscpResponsePadding.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigLscpResponsePadding.setDescription("This object specifies whether LSCP response padding is enabled. When enabled, three blank bytes are added to the end of the LSCP response. 'true' - LSCP response padding is enabled. 'false' - LSCP response padding is disabled.")
cdstvISAConfigfMsaLscpClientProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 755, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tvguide", 1), ("rti", 2), ("vodlink", 3), ("cv", 4), ("cisco", 5), ("ttv", 6), ("lscppauseateos", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdstvISAConfigfMsaLscpClientProto.setStatus('current')
if mibBuilder.loadTexts: cdstvISAConfigfMsaLscpClientProto.setDescription('This object specifies the way LSCP clients communicate with the Streamer. Possible options are: tvguide(1) - TV Guide rti(2) - RTI vodlink(3) - VOD Link cv(4) - CableVision cisco(5) - Cisco ttv(6) - TTV lscppauseateos(7) - LSCP Pause at EOS')
ciscoCdstvIsaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 1))
ciscoCdstvIsaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2))
ciscoCdstvIsaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 1, 1)).setObjects(("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaGeneralGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaContentServiceGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaStreamServiceGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaNamingServiceGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaNotifyServiceGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaContentStoreGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaFactoryGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaContentFactoryGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaContentChannelGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaStreamChannelGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaEventChannelGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaFtpGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaLscpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaMIBCompliance = ciscoCdstvIsaMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCdstvIsaMIBCompliance.setDescription('The compliance statement for the entities which implement the Cisco CDS TV ISA MIB.')
ciscoCdstvIsaMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 1, 2)).setObjects(("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaContentServiceGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaStreamServiceGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaNamingServiceGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaNotifyServiceGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaContentStoreGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaFactoryGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaContentFactoryGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaContentChannelGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaStreamChannelGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaEventChannelGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaFtpGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaLscpGroup"), ("CISCO-CDSTV-ISA-MIB", "ciscoCdstvIsaGeneralGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaMIBCompliance2 = ciscoCdstvIsaMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaMIBCompliance2.setDescription('The compliance statement for the entities which implement the Cisco CDS TV ISA MIB.')
ciscoCdstvIsaGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 1)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFileName"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigWebServicePort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigMSAEnabled"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigTmeEnabled"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigLoadQueryInterval"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigPlayNumThreads"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigResourceMgrServiceName"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigServicePollTime"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigPreEncryptionEnabled"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigSessionGatewayID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaGeneralGroup = ciscoCdstvIsaGeneralGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCdstvIsaGeneralGroup.setDescription('A collection of objects that provide general ISA configuration information. ciscoCdstvIsaGeneralGroup object is superseded by ciscoCdstvIsaGeneralGroup2.')
ciscoCdstvIsaContentServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 2)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentServiceMasterIpType"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentServiceMasterIp"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentServiceMasterPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaContentServiceGroup = ciscoCdstvIsaContentServiceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaContentServiceGroup.setDescription('A collection of objects that provide ISA Content Service configuration information.')
ciscoCdstvIsaStreamServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 3)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamServiceMasterIpType"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamServiceMasterIp"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamServiceMasterPort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamServiceId"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamServiceKind"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigMasterNumThreads"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamSourceIPConfig"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamSourcePort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamingMode"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamHeadendIdType"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamHeadendId"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaStreamServiceGroup = ciscoCdstvIsaStreamServiceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaStreamServiceGroup.setDescription('A collection of objects that provide ISA Stream Service configuration information.')
ciscoCdstvIsaNamingServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 4)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigNamingServiceIpType"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigNamingServiceIp"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigNamingServicePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaNamingServiceGroup = ciscoCdstvIsaNamingServiceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaNamingServiceGroup.setDescription('A collection of objects that provide ISA Naming Service configuration information.')
ciscoCdstvIsaNotifyServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 5)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigNotifyServiceIpType"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigNotifyServiceIp"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigNotifyServicePort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigNotifyServiceFactory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaNotifyServiceGroup = ciscoCdstvIsaNotifyServiceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaNotifyServiceGroup.setDescription('A collection of objects that provide ISA Notify Service configuration information.')
ciscoCdstvIsaContentStoreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 6)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentStoreName"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentStoreKind"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentNumThreads"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaContentStoreGroup = ciscoCdstvIsaContentStoreGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaContentStoreGroup.setDescription('A collection of objects that provide ISA Content Store configuration information.')
ciscoCdstvIsaFactoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 7)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFactoryId"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFactoryKind"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaFactoryGroup = ciscoCdstvIsaFactoryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaFactoryGroup.setDescription('A collection of objects that provide ISA factory configuration information.')
ciscoCdstvIsaContentFactoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 8)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentFactoryId"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentFactoryKind"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaContentFactoryGroup = ciscoCdstvIsaContentFactoryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaContentFactoryGroup.setDescription('A collection of objects that provide ISA Content Factory configuration information.')
ciscoCdstvIsaContentChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 9)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentChannelId"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigContentChannelKind"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaContentChannelGroup = ciscoCdstvIsaContentChannelGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaContentChannelGroup.setDescription('A collection of objects that provide ISA Content Channel configuration information.')
ciscoCdstvIsaStreamChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 10)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamChannelId"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigStreamChannelKind"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaStreamChannelGroup = ciscoCdstvIsaStreamChannelGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaStreamChannelGroup.setDescription('A collection of objects that provide ISA Stream Channel configuration information.')
ciscoCdstvIsaEventChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 11)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigEventChannelId"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigEventChannelKind"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigEventChannelFactory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaEventChannelGroup = ciscoCdstvIsaEventChannelGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaEventChannelGroup.setDescription('A collection of objects that provide ISA Event Channel configuration information.')
ciscoCdstvIsaFtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 12)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFTPClientPort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFTPServerPort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFTPServerOutPort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFTPClientNumAttempts"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFTPPollTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaFtpGroup = ciscoCdstvIsaFtpGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaFtpGroup.setDescription('A collection of objects that provide ISA FTP configuration information.')
ciscoCdstvIsaLscpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 13)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigLscpServerPort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigLscpResponsePadding"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigfMsaLscpClientProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaLscpGroup = ciscoCdstvIsaLscpGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaLscpGroup.setDescription('A collection of objects that provide ISA LSCP configuration information.')
ciscoCdstvIsaGeneralGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 755, 2, 2, 14)).setObjects(("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigFileName"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigWebServicePort"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigMSAEnabled"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigLoadQueryInterval"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigPlayNumThreads"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigResourceMgrServiceName"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigServicePollTime"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigPreEncryptionEnabled"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigSessionGatewayID"), ("CISCO-CDSTV-ISA-MIB", "cdstvISAConfigTmeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdstvIsaGeneralGroup2 = ciscoCdstvIsaGeneralGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoCdstvIsaGeneralGroup2.setDescription('A collection of objects that provide general ISA configuration information.')
mibBuilder.exportSymbols("CISCO-CDSTV-ISA-MIB", ciscoCdstvIsaMIBCompliances=ciscoCdstvIsaMIBCompliances, cdstvISAConfigContentChannelKind=cdstvISAConfigContentChannelKind, ciscoCdstvIsaContentChannelGroup=ciscoCdstvIsaContentChannelGroup, cdstvISAConfigStreamServiceMasterIpType=cdstvISAConfigStreamServiceMasterIpType, cdstvISAConfigFactoryId=cdstvISAConfigFactoryId, cdstvISAConfigGeneral=cdstvISAConfigGeneral, cdstvISAConfigSessionGatewayTable=cdstvISAConfigSessionGatewayTable, cdstvISAConfigNamingServiceIpType=cdstvISAConfigNamingServiceIpType, ciscoCdstvIsaNamingServiceGroup=ciscoCdstvIsaNamingServiceGroup, cdstvISAConfigWebServicePort=cdstvISAConfigWebServicePort, ciscoCdstvIsaNotifyServiceGroup=ciscoCdstvIsaNotifyServiceGroup, cdstvISAConfigSessionGatewayIndex=cdstvISAConfigSessionGatewayIndex, cdstvISAConfigContentChannel=cdstvISAConfigContentChannel, ciscoCdstvIsaGeneralGroup2=ciscoCdstvIsaGeneralGroup2, cdstvISAConfigEventChannelFactory=cdstvISAConfigEventChannelFactory, ciscoCdstvIsaFtpGroup=ciscoCdstvIsaFtpGroup, cdstvISAConfigSessionGatewayEntry=cdstvISAConfigSessionGatewayEntry, cdstvISAConfigStreamHeadendIdType=cdstvISAConfigStreamHeadendIdType, cdstvISAConfigStreamTimeout=cdstvISAConfigStreamTimeout, ciscoCdstvIsaMIBObjects=ciscoCdstvIsaMIBObjects, cdstvISAConfigContentServiceMasterIpType=cdstvISAConfigContentServiceMasterIpType, PYSNMP_MODULE_ID=ciscoCdstvIsaMIB, cdstvISAConfigStreamServiceKind=cdstvISAConfigStreamServiceKind, cdstvISAConfigEventChannelId=cdstvISAConfigEventChannelId, cdstvISAConfigServicePollTime=cdstvISAConfigServicePollTime, cdstvISAConfigContentFactory=cdstvISAConfigContentFactory, ciscoCdstvIsaMIBConform=ciscoCdstvIsaMIBConform, cdstvISAConfigStreamServiceId=cdstvISAConfigStreamServiceId, cdstvISAConfigEventChannelKind=cdstvISAConfigEventChannelKind, cdstvISAConfigfMsaLscpClientProto=cdstvISAConfigfMsaLscpClientProto, cdstvISAConfigNotifyService=cdstvISAConfigNotifyService, ciscoCdstvIsaMIBGroups=ciscoCdstvIsaMIBGroups, ciscoCdstvIsaContentFactoryGroup=ciscoCdstvIsaContentFactoryGroup, cdstvISAConfigFTPServerPort=cdstvISAConfigFTPServerPort, cdstvISAConfigFTPClientPort=cdstvISAConfigFTPClientPort, cdstvISAConfigFactory=cdstvISAConfigFactory, ciscoCdstvIsaContentServiceGroup=ciscoCdstvIsaContentServiceGroup, cdstvISAConfigFTPClientNumAttempts=cdstvISAConfigFTPClientNumAttempts, cdstvISAConfigStreamService=cdstvISAConfigStreamService, cdstvISAConfigMSAEnabled=cdstvISAConfigMSAEnabled, cdstvISAConfigContentStoreKind=cdstvISAConfigContentStoreKind, cdstvISAConfigContentServiceMasterPort=cdstvISAConfigContentServiceMasterPort, cdstvISAConfigStreamHeadendId=cdstvISAConfigStreamHeadendId, ciscoCdstvIsaMIB=ciscoCdstvIsaMIB, cdstvISAConfigContentStore=cdstvISAConfigContentStore, cdstvISAConfigNotifyServiceIp=cdstvISAConfigNotifyServiceIp, cdstvISAConfigFTPServerOutPort=cdstvISAConfigFTPServerOutPort, cdstvISAConfigNamingServiceIp=cdstvISAConfigNamingServiceIp, ciscoCdstvIsaContentStoreGroup=ciscoCdstvIsaContentStoreGroup, ciscoCdstvIsaStreamServiceGroup=ciscoCdstvIsaStreamServiceGroup, cdstvISAConfigNamingServicePort=cdstvISAConfigNamingServicePort, ciscoCdstvIsaMIBNotifs=ciscoCdstvIsaMIBNotifs, cdstvISAConfigLscpServerPort=cdstvISAConfigLscpServerPort, cdstvISAConfigSessionGatewayID=cdstvISAConfigSessionGatewayID, cdstvISAConfigTmeStatus=cdstvISAConfigTmeStatus, cdstvISAConfigContentStoreName=cdstvISAConfigContentStoreName, ciscoCdstvIsaMIBCompliance=ciscoCdstvIsaMIBCompliance, cdstvISAConfigNotifyServiceIpType=cdstvISAConfigNotifyServiceIpType, cdstvISAConfigContentFactoryId=cdstvISAConfigContentFactoryId, cdstvISAConfigResourceMgrServiceName=cdstvISAConfigResourceMgrServiceName, ciscoCdstvIsaLscpGroup=ciscoCdstvIsaLscpGroup, cdstvISAConfigFTPPollTimeout=cdstvISAConfigFTPPollTimeout, ciscoCdstvIsaFactoryGroup=ciscoCdstvIsaFactoryGroup, cdstvISAConfigStreamChannel=cdstvISAConfigStreamChannel, cdstvISAConfigStreamChannelId=cdstvISAConfigStreamChannelId, cdstvISAConfigNotifyServicePort=cdstvISAConfigNotifyServicePort, cdstvISAConfigStreamSourceIPConfig=cdstvISAConfigStreamSourceIPConfig, cdstvISAConfigFTP=cdstvISAConfigFTP, cdstvISAConfigStreamServiceMasterPort=cdstvISAConfigStreamServiceMasterPort, cdstvISAConfigContentServiceMasterIp=cdstvISAConfigContentServiceMasterIp, cdstvISAConfigEventChannel=cdstvISAConfigEventChannel, ciscoCdstvIsaStreamChannelGroup=ciscoCdstvIsaStreamChannelGroup, cdstvISAConfigContentFactoryKind=cdstvISAConfigContentFactoryKind, cdstvISAConfigContentChannelId=cdstvISAConfigContentChannelId, cdstvISAConfigNamingService=cdstvISAConfigNamingService, ciscoCdstvIsaEventChannelGroup=ciscoCdstvIsaEventChannelGroup, cdstvISAConfigNotifyServiceFactory=cdstvISAConfigNotifyServiceFactory, cdstvISAConfigStreamServiceMasterIp=cdstvISAConfigStreamServiceMasterIp, cdstvISAConfigStreamingMode=cdstvISAConfigStreamingMode, cdstvISAConfigFileName=cdstvISAConfigFileName, cdstvISAConfigPreEncryptionEnabled=cdstvISAConfigPreEncryptionEnabled, cdstvISAConfigLSCP=cdstvISAConfigLSCP, cdstvISAConfigTmeEnabled=cdstvISAConfigTmeEnabled, ciscoCdstvIsaGeneralGroup=ciscoCdstvIsaGeneralGroup, cdstvISAConfigMasterNumThreads=cdstvISAConfigMasterNumThreads, cdstvISAConfigLscpResponsePadding=cdstvISAConfigLscpResponsePadding, cdstvISAConfigLoadQueryInterval=cdstvISAConfigLoadQueryInterval, cdstvISAConfigFactoryKind=cdstvISAConfigFactoryKind, cdstvISAConfigStreamSourcePort=cdstvISAConfigStreamSourcePort, cdstvISAConfigContentNumThreads=cdstvISAConfigContentNumThreads, cdstvISAConfigStreamChannelKind=cdstvISAConfigStreamChannelKind, cdstvISAConfigPlayNumThreads=cdstvISAConfigPlayNumThreads, cdstvISAConfigContentService=cdstvISAConfigContentService, ciscoCdstvIsaMIBCompliance2=ciscoCdstvIsaMIBCompliance2)
