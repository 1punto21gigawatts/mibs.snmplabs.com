#
# PySNMP MIB module HUAWEI-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-STACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
entPhysicalName, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName", "entPhysicalIndex")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, IpAddress, MibIdentifier, iso, Integer32, Bits, ModuleIdentity, Gauge32, ObjectIdentity, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "MibIdentifier", "iso", "Integer32", "Bits", "ModuleIdentity", "Gauge32", "ObjectIdentity", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64")
MacAddress, TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
huaweiStackMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183))
huaweiStackMIB.setRevisions(('2015-08-07 09:25', '2015-06-24 09:25', '2015-04-15 09:25', '2015-03-06 09:25', '2015-02-15 09:25', '2015-02-10 14:25', '2014-12-17 14:25', '2014-10-25 14:25', '2014-10-21 15:21', '2014-09-18 16:50', '2014-09-01 14:34', '2014-08-19 21:09', '2014-08-04 17:11', '2014-07-11 15:58', '2014-06-21 15:13', '2014-06-18 13:48', '2014-06-13 16:17', '2014-06-09 10:43', '2014-04-14 00:00', '2014-03-18 17:30', '2014-03-04 15:10', '2014-02-24 18:31', '2014-02-22 10:24', '2014-02-19 00:00', '2014-01-26 10:44', '2014-01-14 14:59', '2014-01-13 15:54', '2013-12-31 08:45', '2013-12-24 09:22', '2013-12-10 11:22', '2013-12-06 13:00', '2013-11-08 15:36', '2013-11-06 19:38', '2013-11-05 15:37', '2013-10-11 09:31', '2013-04-20 17:03', '2013-03-28 14:35', '2012-08-30 09:36',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: huaweiStackMIB.setRevisionsDescriptions(('Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Add hwStackSysOid', 'Updated to include support for MPUA', 'Updated to include support for MPUA', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Add hwAddingPhyPortToFabricPortTable and hwFabricPortTable', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for SRUA/SRUB', 'Updated to include support for MPUA', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for MPUA', 'Updated to include support for STACK', 'Updated to include support for STACK', 'Updated to include support for SRUC',))
if mibBuilder.loadTexts: huaweiStackMIB.setLastUpdated('201508070925Z')
if mibBuilder.loadTexts: huaweiStackMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: huaweiStackMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: huaweiStackMIB.setDescription(' ')
hwStackObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1))
hwStackRun = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackRun.setStatus('current')
if mibBuilder.loadTexts: hwStackRun.setDescription("The state of stack function on the device. The value enabled(1) indicates this device's stack function is enabled. The value disabled(2) indicates this device's stack function is disabled.")
hwStackTopoType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ring", 1), ("link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackTopoType.setStatus('current')
if mibBuilder.loadTexts: hwStackTopoType.setDescription('The topology of stack. ')
hwStackMacAddressSwitchTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 60), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackMacAddressSwitchTime.setStatus('current')
if mibBuilder.loadTexts: hwStackMacAddressSwitchTime.setDescription("Stack system's MAC address switch time. ")
hwStackSystemMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackSystemMac.setStatus('current')
if mibBuilder.loadTexts: hwStackSystemMac.setDescription("The stack system's MAC address, it always be the master device's MAC address. ")
hwStackIsStackDevice = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackIsStackDevice.setStatus('current')
if mibBuilder.loadTexts: hwStackIsStackDevice.setDescription("The value true(1) indicates that the device's stack function is enable and it is in a stack system. When false(2), the stack function is not enable or it is not in a stack system. ")
hwStackReservedVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackReservedVlanId.setStatus('current')
if mibBuilder.loadTexts: hwStackReservedVlanId.setDescription('Stack reserved-vlanId. ')
hwStackClearUnsupportCfg = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackClearUnsupportCfg.setStatus('current')
if mibBuilder.loadTexts: hwStackClearUnsupportCfg.setDescription('Clear the config which is not support stack. ')
hwStackLinkAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackLinkAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwStackLinkAlarmThreshold.setDescription('The alarm threshold of stack link. ')
hwStackMemberThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackMemberThreshold.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberThreshold.setDescription('Maximum number of stack members.')
hwStackMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("card", 1), ("serviceport", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackMode.setStatus('current')
if mibBuilder.loadTexts: hwStackMode.setDescription('The mode of stack.')
hwStackMemberSpec = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackMemberSpec.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberSpec.setDescription('Upper limit of the stack members.')
hwStackMacAddressAlarmTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 60), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackMacAddressAlarmTime.setStatus('current')
if mibBuilder.loadTexts: hwStackMacAddressAlarmTime.setDescription("Stack system's MAC address inconsistence-alarm time. ")
hwLeafMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLeafMaxNumber.setStatus('current')
if mibBuilder.loadTexts: hwLeafMaxNumber.setDescription('The maximum number of leaf switches on the LPU.')
hwFabricCurrentForwardModel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("distributed", 1), ("centralized", 2), ("hybrid", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFabricCurrentForwardModel.setStatus('current')
if mibBuilder.loadTexts: hwFabricCurrentForwardModel.setDescription('The current forwarding model type of svf system')
hwFabricConfigForwardModel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("distributed", 1), ("centralized", 2), ("hybrid", 3), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFabricConfigForwardModel.setStatus('current')
if mibBuilder.loadTexts: hwFabricConfigForwardModel.setDescription('The config forwarding model type of svf system')
hwLeafSingleHomedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLeafSingleHomedAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwLeafSingleHomedAlarmEnable.setDescription('The single-homed alarm of leaf switches is enable or disable.')
hwFabricExcludeLeafType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("default", 0), ("ce5810ei", 1), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFabricExcludeLeafType.setStatus('current')
if mibBuilder.loadTexts: hwFabricExcludeLeafType.setDescription('The spine exclude leaf type.')
hwStackMemberInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20), )
if mibBuilder.loadTexts: hwStackMemberInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberInfoTable.setDescription('Table of stack member switches. ')
hwStackMemberInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwMemberCurrentStackId"))
if mibBuilder.loadTexts: hwStackMemberInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberInfoEntry.setDescription('Provide information of stack member.')
hwMemberCurrentStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMemberCurrentStackId.setStatus('current')
if mibBuilder.loadTexts: hwMemberCurrentStackId.setDescription('Current stack ID. ')
hwMemberStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMemberStackPriority.setStatus('current')
if mibBuilder.loadTexts: hwMemberStackPriority.setDescription("Stack member's priority. ")
hwMemberStackRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("standby", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemberStackRole.setStatus('current')
if mibBuilder.loadTexts: hwMemberStackRole.setDescription('The role of stack device in stack system. ')
hwMemberStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemberStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwMemberStackMacAddress.setDescription('MAC address of the stack device. ')
hwMemberStackDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemberStackDeviceType.setStatus('current')
if mibBuilder.loadTexts: hwMemberStackDeviceType.setDescription('Device type of the stack device. ')
hwMemberConfigStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMemberConfigStackId.setStatus('current')
if mibBuilder.loadTexts: hwMemberConfigStackId.setDescription('Set stack device stack ID. ')
hwMemberStackObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 20, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemberStackObjectId.setStatus('current')
if mibBuilder.loadTexts: hwMemberStackObjectId.setDescription("The vendor's authoritative identification of the network management subsystem contained in the entity. This value is allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining `what kind of box' is being managed. For example, if vendor `Flintstones, Inc.' was assigned the subtree 1.3.6.1.4.1.4242, it could assign the identifier 1.3.6.1.4.1.4242.1.1 to its `Fred Router'.")
hwStackMemberInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25), )
if mibBuilder.loadTexts: hwStackMemberInformationTable.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberInformationTable.setDescription('Table of stack member switches. ')
hwStackMemberInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwStackIdIndex"))
if mibBuilder.loadTexts: hwStackMemberInformationEntry.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberInformationEntry.setDescription('Provide information of stack member.')
hwStackIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254)))
if mibBuilder.loadTexts: hwStackIdIndex.setStatus('current')
if mibBuilder.loadTexts: hwStackIdIndex.setDescription('Stack ID Index. ')
hwStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackPriority.setStatus('current')
if mibBuilder.loadTexts: hwStackPriority.setDescription("Stack member's priority. -1 indicates an invalid value.")
hwStackRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("standby", 2), ("slave", 3), ("leaf", 4), ("spine", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackRole.setStatus('current')
if mibBuilder.loadTexts: hwStackRole.setDescription('The role of stack device in stack system. ')
hwStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: hwStackMacAddress.setDescription('MAC address of the stack device. ')
hwStackDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackDeviceType.setStatus('current')
if mibBuilder.loadTexts: hwStackDeviceType.setDescription('Device type of the stack device. ')
hwStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackId.setStatus('current')
if mibBuilder.loadTexts: hwStackId.setDescription('Current stack ID.')
hwStackConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackConfigId.setStatus('current')
if mibBuilder.loadTexts: hwStackConfigId.setDescription('Set stack device stack ID. -1 indicates an invalid value.')
hwStackSysOid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackSysOid.setStatus('current')
if mibBuilder.loadTexts: hwStackSysOid.setDescription('Sysoid of the stack device. ')
hwStackDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 81))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackDescription.setStatus('current')
if mibBuilder.loadTexts: hwStackDescription.setDescription('Description of the stack device.')
hwStackCurrentUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("autoNegotiation", 1), ("port8x10ge", 2), ("port4x40ge", 3), ("port4x10ge", 4), ("port2x40ge", 5), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackCurrentUplinkPort.setStatus('current')
if mibBuilder.loadTexts: hwStackCurrentUplinkPort.setDescription('The current leaf Fabric-Port type of the stack device. ')
hwStackConfigUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("autoNegotiation", 1), ("port8x10ge", 2), ("port4x40ge", 3), ("port4x10ge", 4), ("port2x40ge", 5), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackConfigUplinkPort.setStatus('current')
if mibBuilder.loadTexts: hwStackConfigUplinkPort.setDescription('The config leaf Fabric-Port type of the stack device.')
hwStackCurrentSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("autoNegotiation", 1), ("leaf", 2), ("stack", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackCurrentSwitchMode.setStatus('current')
if mibBuilder.loadTexts: hwStackCurrentSwitchMode.setDescription('The current switch mode type of the stack device.')
hwStackConfigSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 25, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("autoNegotiation", 1), ("leaf", 2), ("stack", 3), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackConfigSwitchMode.setStatus('current')
if mibBuilder.loadTexts: hwStackConfigSwitchMode.setDescription('The config switch mode type of the stack device.')
hwFabricPhyLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28), )
if mibBuilder.loadTexts: hwFabricPhyLinkTable.setStatus('current')
if mibBuilder.loadTexts: hwFabricPhyLinkTable.setDescription('Table of fabric physical link information. ')
hwFabricPhyLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwSpinePortIndex"))
if mibBuilder.loadTexts: hwFabricPhyLinkEntry.setStatus('current')
if mibBuilder.loadTexts: hwFabricPhyLinkEntry.setDescription('Provide information of fabric physical link .')
hwSpinePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1, 1), Integer32())
if mibBuilder.loadTexts: hwSpinePortIndex.setStatus('current')
if mibBuilder.loadTexts: hwSpinePortIndex.setDescription('Spine port physical index. ')
hwSpineStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSpineStackId.setStatus('current')
if mibBuilder.loadTexts: hwSpineStackId.setDescription("Spine stack device's ID.")
hwSpinePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSpinePortName.setStatus('current')
if mibBuilder.loadTexts: hwSpinePortName.setDescription('Spine stack port name. ')
hwSpinePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSpinePortStatus.setStatus('current')
if mibBuilder.loadTexts: hwSpinePortStatus.setDescription('Protocol status of the spine member port. ')
hwLeafPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLeafPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwLeafPortIndex.setDescription('Leaf port physical index, and -1 indicates an invalid value. ')
hwLeafStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(101, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLeafStackId.setStatus('current')
if mibBuilder.loadTexts: hwLeafStackId.setDescription("Leaf device's ID, and -1 indicates an invalid value.")
hwLeafPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLeafPortName.setStatus('current')
if mibBuilder.loadTexts: hwLeafPortName.setDescription('Leaf port name, and null indicates an invalid value.')
hwLeafPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLeafPortStatus.setStatus('current')
if mibBuilder.loadTexts: hwLeafPortStatus.setDescription('Protocol status of the leaf member port, and null indicates an invalid value.')
hwStackPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 21), )
if mibBuilder.loadTexts: hwStackPortTable.setStatus('current')
if mibBuilder.loadTexts: hwStackPortTable.setDescription('Table of stack port. ')
hwStackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 21, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwStackPortStackId"), (0, "HUAWEI-STACK-MIB", "hwStackPortId"))
if mibBuilder.loadTexts: hwStackPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwStackPortEntry.setDescription('Provide information of the stack port. ')
hwStackPortStackId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackPortStackId.setStatus('current')
if mibBuilder.loadTexts: hwStackPortStackId.setDescription("Stack device's ID. ")
hwStackPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackPortId.setStatus('current')
if mibBuilder.loadTexts: hwStackPortId.setDescription('Stack port ID. ')
hwStackPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 21, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackPortName.setStatus('current')
if mibBuilder.loadTexts: hwStackPortName.setDescription('Stack port name. ')
hwStackNeighborInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 21, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackNeighborInfo.setStatus('current')
if mibBuilder.loadTexts: hwStackNeighborInfo.setDescription('Stack neighbor ID. ')
hwStackPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackPortStatus.setStatus('current')
if mibBuilder.loadTexts: hwStackPortStatus.setDescription('The status of the stack port. ')
hwStackEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22))
hwStackLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 1)).setObjects(("HUAWEI-STACK-MIB", "hwStackPortStackId"), ("HUAWEI-STACK-MIB", "hwStackPortId"), ("HUAWEI-STACK-MIB", "hwStackPortStatus"))
if mibBuilder.loadTexts: hwStackLinkUp.setStatus('current')
if mibBuilder.loadTexts: hwStackLinkUp.setDescription('When the stack link turn to up status, send a SNMP trap to network manager.')
hwStackLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 2)).setObjects(("HUAWEI-STACK-MIB", "hwStackPortStackId"), ("HUAWEI-STACK-MIB", "hwStackPortId"), ("HUAWEI-STACK-MIB", "hwStackPortStatus"))
if mibBuilder.loadTexts: hwStackLinkDown.setStatus('current')
if mibBuilder.loadTexts: hwStackLinkDown.setDescription('When the stack link turn to down status, send a SNMP trap to network manager.')
hwStackStandbyChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 3)).setObjects(("HUAWEI-STACK-MIB", "hwMemberCurrentStackId"))
if mibBuilder.loadTexts: hwStackStandbyChange.setStatus('current')
if mibBuilder.loadTexts: hwStackStandbyChange.setDescription('When the stack standby device change, send a SNMP trap to network manager.')
hwStackSwitchOver = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 4)).setObjects(("HUAWEI-STACK-MIB", "hwMemberCurrentStackId"))
if mibBuilder.loadTexts: hwStackSwitchOver.setStatus('current')
if mibBuilder.loadTexts: hwStackSwitchOver.setDescription('When the stack main device change, send a SNMP trap to network manager.')
hwStackSystemRestart = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 5)).setObjects(("HUAWEI-STACK-MIB", "hwMemberCurrentStackId"))
if mibBuilder.loadTexts: hwStackSystemRestart.setStatus('current')
if mibBuilder.loadTexts: hwStackSystemRestart.setDescription('When the stack system restart, send a SNMP trap to network manager.')
hwStackStackMemberAdd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 6)).setObjects(("HUAWEI-STACK-MIB", "hwMemberCurrentStackId"))
if mibBuilder.loadTexts: hwStackStackMemberAdd.setStatus('current')
if mibBuilder.loadTexts: hwStackStackMemberAdd.setDescription(' When a stack member join in, send a SNMP trap to network manager. ')
hwStackStackMemberLeave = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 7)).setObjects(("HUAWEI-STACK-MIB", "hwMemberCurrentStackId"))
if mibBuilder.loadTexts: hwStackStackMemberLeave.setStatus('current')
if mibBuilder.loadTexts: hwStackStackMemberLeave.setDescription(' When a stack member leave, send a SNMP trap to the network manager.')
hwStackStackMacChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 8)).setObjects(("HUAWEI-STACK-MIB", "hwMemberStackMacAddress"))
if mibBuilder.loadTexts: hwStackStackMacChange.setStatus('current')
if mibBuilder.loadTexts: hwStackStackMacChange.setDescription(" When the main stack device change, the stack system's MAC address should change also. And we can set the MAC address change time. When the MAC address change,send a SNMP trap to network manager.")
hwStackLogicStackPortLinkErr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 9)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackPeerIfName"))
if mibBuilder.loadTexts: hwStackLogicStackPortLinkErr.setStatus('current')
if mibBuilder.loadTexts: hwStackLogicStackPortLinkErr.setDescription(' When the stack port connect error,send a SNMP trap to network manager.')
hwStackPhyStackPortLinkErr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 10)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackPeerIfName"))
if mibBuilder.loadTexts: hwStackPhyStackPortLinkErr.setStatus('current')
if mibBuilder.loadTexts: hwStackPhyStackPortLinkErr.setDescription(' When the stack port connect error,send a SNMP trap to network manager.')
hwPhyStackPortIsDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 11)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"))
if mibBuilder.loadTexts: hwPhyStackPortIsDown.setStatus('current')
if mibBuilder.loadTexts: hwPhyStackPortIsDown.setDescription(' When the stack port link state is down,send a SNMP trap to network manager.')
hwPhyStackPortIsUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 12)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"))
if mibBuilder.loadTexts: hwPhyStackPortIsUp.setStatus('current')
if mibBuilder.loadTexts: hwPhyStackPortIsUp.setDescription(' When the stack port link state is up,send a SNMP trap to network manager.')
hwStackLogicStackPortLinkErrResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 13)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackPeerIfName"))
if mibBuilder.loadTexts: hwStackLogicStackPortLinkErrResume.setStatus('current')
if mibBuilder.loadTexts: hwStackLogicStackPortLinkErrResume.setDescription(' When the wrong link in stack port resumed,send a SNMP trap to network manager.')
hwStackPortConfigureFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 14)).setObjects(("HUAWEI-STACK-MIB", "hwConfigureFailedStackId"))
if mibBuilder.loadTexts: hwStackPortConfigureFailed.setStatus('current')
if mibBuilder.loadTexts: hwStackPortConfigureFailed.setDescription(' When failed to configure the stack port,send a SNMP trap to network manager.')
hwStackLinkLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 15)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackCurrentLinkNum"), ("HUAWEI-STACK-MIB", "hwStackLinkAlarmThreshold"))
if mibBuilder.loadTexts: hwStackLinkLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwStackLinkLimitAlarm.setDescription(' When the number of STACK links has reached alarm threshold,send a SNMP trap to network manager.')
hwStackLinkLimitAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 16)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackCurrentLinkNum"), ("HUAWEI-STACK-MIB", "hwStackLinkAlarmThreshold"))
if mibBuilder.loadTexts: hwStackLinkLimitAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwStackLinkLimitAlarmResume.setDescription(' When the number of STACK links is equal or more than alarm threshold, send a SNMP trap to network manager.')
hwStackConfigConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 17)).setObjects(("HUAWEI-STACK-MIB", "hwMemberCurrentStackId"), ("HUAWEI-STACK-MIB", "hwStackCfgConflictStackId"))
if mibBuilder.loadTexts: hwStackConfigConflict.setStatus('current')
if mibBuilder.loadTexts: hwStackConfigConflict.setDescription(' When the stack configuration conflicts, send a SNMP trap to network manager.')
hwStackFabricPortLinkErr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 18)).setObjects(("HUAWEI-STACK-MIB", "hwStackFabricPort"), ("HUAWEI-STACK-MIB", "hwStackFabricMemberPort"))
if mibBuilder.loadTexts: hwStackFabricPortLinkErr.setStatus('current')
if mibBuilder.loadTexts: hwStackFabricPortLinkErr.setDescription(' When the interface Fabric-Port link is invalidly, send a SNMP trap to network manager.')
hwStackFabricPortLinkErrResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 19)).setObjects(("HUAWEI-STACK-MIB", "hwStackFabricPort"), ("HUAWEI-STACK-MIB", "hwStackFabricMemberPort"))
if mibBuilder.loadTexts: hwStackFabricPortLinkErrResume.setStatus('current')
if mibBuilder.loadTexts: hwStackFabricPortLinkErrResume.setDescription(' When the interface Fabric-Port link is resumed, send a SNMP trap to network manager.')
hwStackLeafSingleHomedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 20)).setObjects(("HUAWEI-STACK-MIB", "hwStackMemberId"), ("HUAWEI-STACK-MIB", "hwStackLeafMemberId"))
if mibBuilder.loadTexts: hwStackLeafSingleHomedAlarm.setStatus('current')
if mibBuilder.loadTexts: hwStackLeafSingleHomedAlarm.setDescription(' When the leaf switch is only linked to one spine switch, send a SNMP trap to network manager.')
hwStackLeafSingleHomedAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 21)).setObjects(("HUAWEI-STACK-MIB", "hwStackMemberId"), ("HUAWEI-STACK-MIB", "hwStackLeafMemberId"))
if mibBuilder.loadTexts: hwStackLeafSingleHomedAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwStackLeafSingleHomedAlarmResume.setDescription(' When the single-homed leaf switch leaves the stack system or turns to the dual-homed mode, send a SNMP trap to network manager.')
hwStackMemberLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 22)).setObjects(("HUAWEI-STACK-MIB", "hwStackMemberThreshold"))
if mibBuilder.loadTexts: hwStackMemberLimit.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberLimit.setDescription(' When the number of stack members has reached the upper limit and new members failed to join, send a SNMP trap to network manager.')
hwStackMemberAdd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 23)).setObjects(("HUAWEI-STACK-MIB", "hwStackId"))
if mibBuilder.loadTexts: hwStackMemberAdd.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberAdd.setDescription(' When a stack member join in, send a SNMP trap to network manager. ')
hwStackMemberLeave = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 24)).setObjects(("HUAWEI-STACK-MIB", "hwStackId"))
if mibBuilder.loadTexts: hwStackMemberLeave.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberLeave.setDescription(' When a stack member leave, send a SNMP trap to the network manager.')
hwStackConfigDifferent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 25)).setObjects(("HUAWEI-STACK-MIB", "hwStackId"), ("HUAWEI-STACK-MIB", "hwStackReason"))
if mibBuilder.loadTexts: hwStackConfigDifferent.setStatus('current')
if mibBuilder.loadTexts: hwStackConfigDifferent.setDescription(' When the stack configuration of the current startup is different from that of next startup, send a SNMP trap to the network manager.')
hwStackLeafConfigConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 26)).setObjects(("HUAWEI-STACK-MIB", "hwStackLeafPort"))
if mibBuilder.loadTexts: hwStackLeafConfigConflict.setStatus('current')
if mibBuilder.loadTexts: hwStackLeafConfigConflict.setDescription(' When configuration exists on the uplink port of the leaf switch, and this port cannot be used as the fabric port, send a SNMP trap to the network manager.')
hwStackChipSingleHomedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 27)).setObjects(("HUAWEI-STACK-MIB", "hwStackLeafMemberId"))
if mibBuilder.loadTexts: hwStackChipSingleHomedAlarm.setStatus('current')
if mibBuilder.loadTexts: hwStackChipSingleHomedAlarm.setDescription(' In the dual-homing network, when two ports of any chip on the dual-chip leaf switch are connected to a spine switch, send a SNMP trap to network manager.')
hwStackChipSingleHomedAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 28)).setObjects(("HUAWEI-STACK-MIB", "hwStackLeafMemberId"))
if mibBuilder.loadTexts: hwStackChipSingleHomedAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwStackChipSingleHomedAlarmResume.setDescription(' In the dual-homing network, when two ports of any chip on the dual-chip leaf switch are not connected to a spine switch, send a SNMP trap to network manager.')
hwStackLeafMemberAdd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 29)).setObjects(("HUAWEI-STACK-MIB", "hwStackId"))
if mibBuilder.loadTexts: hwStackLeafMemberAdd.setStatus('current')
if mibBuilder.loadTexts: hwStackLeafMemberAdd.setDescription(' When a leaf member join in, send a SNMP trap to network manager. ')
hwFabricLinkLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 30)).setObjects(("HUAWEI-STACK-MIB", "hwStackFabricPort"), ("HUAWEI-STACK-MIB", "hwFabricCurrentLinkNum"), ("HUAWEI-STACK-MIB", "hwFabricConfiguredLinkNum"))
if mibBuilder.loadTexts: hwFabricLinkLimitAlarm.setStatus('current')
if mibBuilder.loadTexts: hwFabricLinkLimitAlarm.setDescription(' When the number of fabric links has reached alarm threshold,send a SNMP trap to network manager.')
hwFabricLinkLimitAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 31)).setObjects(("HUAWEI-STACK-MIB", "hwStackFabricPort"), ("HUAWEI-STACK-MIB", "hwFabricCurrentLinkNum"), ("HUAWEI-STACK-MIB", "hwFabricConfiguredLinkNum"))
if mibBuilder.loadTexts: hwFabricLinkLimitAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwFabricLinkLimitAlarmResume.setDescription(' When the number of fabric links is equal or more than alarm threshold, send a SNMP trap to network manager.')
hwStackMemberExceedSpec = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 32)).setObjects(("HUAWEI-STACK-MIB", "hwStackMemberSpec"))
if mibBuilder.loadTexts: hwStackMemberExceedSpec.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberExceedSpec.setDescription(' The number of stack members exceeds the upper limit. ')
hwStackMacInconsistence = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 33)).setObjects(("HUAWEI-STACK-MIB", "hwStackSystemMac"))
if mibBuilder.loadTexts: hwStackMacInconsistence.setStatus('current')
if mibBuilder.loadTexts: hwStackMacInconsistence.setDescription("When the stack system's MAC address is not the manufacture MAC address of any member device, send a SNMP trap to network manager.")
hwStackMacInconsistenceResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 34)).setObjects(("HUAWEI-STACK-MIB", "hwStackSystemMac"))
if mibBuilder.loadTexts: hwStackMacInconsistenceResume.setStatus('current')
if mibBuilder.loadTexts: hwStackMacInconsistenceResume.setDescription("When the stack system's MAC address is the manufacture MAC address of a member device, send a SNMP trap to network manager.")
hwFabricLinkProtocolAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 35)).setObjects(("HUAWEI-STACK-MIB", "hwStackFabricPort"))
if mibBuilder.loadTexts: hwFabricLinkProtocolAlarm.setStatus('current')
if mibBuilder.loadTexts: hwFabricLinkProtocolAlarm.setDescription('When the fabric link protocol state of the fabric port is down, send an SNMP trap to the network manager.')
hwFabricLinkProtocolAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 36)).setObjects(("HUAWEI-STACK-MIB", "hwStackFabricPort"))
if mibBuilder.loadTexts: hwFabricLinkProtocolAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwFabricLinkProtocolAlarmResume.setDescription('When the fabric link protocol state of the fabric port is up or the fabric port does not exist, send an SNMP trap to the network manager.')
hwFabricMemberPortProtocolAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 37)).setObjects(("HUAWEI-STACK-MIB", "hwStackFabricMemberPort"))
if mibBuilder.loadTexts: hwFabricMemberPortProtocolAlarm.setStatus('current')
if mibBuilder.loadTexts: hwFabricMemberPortProtocolAlarm.setDescription('When the fabric link protocol state of the member port is down, send an SNMP trap to the network manager.')
hwFabricMemberPortProtocolAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 38)).setObjects(("HUAWEI-STACK-MIB", "hwStackFabricMemberPort"))
if mibBuilder.loadTexts: hwFabricMemberPortProtocolAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwFabricMemberPortProtocolAlarmResume.setDescription('When the fabric link protocol state of the member port is up or the fabric member port does not exist, send an SNMP trap to the network manager.')
hwLeafMaxNumberExceededAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 39)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-STACK-MIB", "hwLeafMaxNumber"))
if mibBuilder.loadTexts: hwLeafMaxNumberExceededAlarm.setStatus('current')
if mibBuilder.loadTexts: hwLeafMaxNumberExceededAlarm.setDescription('When the number of leaf switches connected to the LPU exceeds the maximum, send a SNMP trap to network manager.')
hwLeafMaxNumberExceededAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 40)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-STACK-MIB", "hwLeafMaxNumber"))
if mibBuilder.loadTexts: hwLeafMaxNumberExceededAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwLeafMaxNumberExceededAlarmResume.setDescription('When the number of leaf switches connected to the LPU is recovered to be within the maximum, send a SNMP trap to network manager.')
hwPhyStackPortErrorDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 41)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"))
if mibBuilder.loadTexts: hwPhyStackPortErrorDown.setStatus('current')
if mibBuilder.loadTexts: hwPhyStackPortErrorDown.setDescription('When the runts-error-down occured, send a SNMP trap to network manager.')
hwPhyStackPortErrorDownRecover = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 22, 42)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackErrorDownRecoverReason"))
if mibBuilder.loadTexts: hwPhyStackPortErrorDownRecover.setStatus('current')
if mibBuilder.loadTexts: hwPhyStackPortErrorDownRecover.setDescription('When the runts-error-down recovered, send a SNMP trap to network manager.')
hwStackUpgradeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30), )
if mibBuilder.loadTexts: hwStackUpgradeTable.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeTable.setDescription('A table of flash copy operation entries. Each entry represents a flash copy operation (to flash) that has been initiated.')
hwStackUpgradeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwStackUpgradeIndex"))
if mibBuilder.loadTexts: hwStackUpgradeEntry.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeEntry.setDescription('A flash copy operation entry. Each entry consists of a command, a source, and optional parameters such as protocol to be used, a destination, a server address, etc. A management station wishing to create an entry should first generate a pseudo-random serial number to be used as the index to this sparse table. The station should then create the associated instance of the row status object. It must also, either in the same or in successive PDUs, create the associated instance of the command and parameter objects. It should also modify the default values for any of the parameter objects if the defaults are not appropriate. Once the appropriate instances of all the command objects have been created, either by an explicit SNMP set request or by default, the row status should be set to active to initiate the operation. Note that this entire procedure may be initiated via a single set request which specifies a row status of createAndGo as well as specifies valid values for the non-defaulted parameter objects. Once an operation has been activated, it cannot be stopped. Once the operation completes, the management station should retrieve the value of the status object, and delete the entry. In order to prevent old entries from clogging the table, entries will be aged out, but an entry will never be deleted within 2 hours of completing.')
hwStackUpgradeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwStackUpgradeIndex.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeIndex.setDescription(' Specifies the index of an entry. It is a random value when creating an entry.')
hwStackUpgradeGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allMembers", 1), ("memberIdList", 2))).clone('allMembers')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeGrpType.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeGrpType.setDescription('Type of stack grouping member switches.')
hwStackUpgradeGrpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeGrpValue.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeGrpValue.setDescription('Details about stack grouping member switches for memberIdList. Optional, This object will be ignored for allMembers .')
hwStackUpgradeFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("startupFile", 1), ("patchFile", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeFileType.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeFileType.setDescription('Type of the file to be upgraded.')
hwStackUpgradeFileInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeFileInfo.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeFileInfo.setDescription('Path and type of the file to be upgraded.')
hwStackUpgradeFtpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 6), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeFtpIp.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeFtpIp.setDescription('The address of remote host acting as server for any operation. The default value of which is 255.255.255.255.')
hwStackUpgradeFtpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeFtpUserName.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeFtpUserName.setDescription('When use FTP to transfer files, the user name must be specified by this node.')
hwStackUpgradeFtpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeFtpPassword.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeFtpPassword.setDescription('Remote user password for copy via FTP protocol. ')
hwStackUpgradeServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeServerPort.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeServerPort.setDescription(' This object specifies the SFTP server port that is used for file transfer only SFTP is valid. The default SFTP server port is 22 if no port is specified. If the value of protocol is not SFTP, this object is ignored by the implementation.')
hwStackUpgradeFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeFileSize.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeFileSize.setDescription('This object specifies the reserved space (in BYTE) guaranteed by a host. The value 0 indicates that no space need be reserved. This object is optional in the Set operation of file upload. The default value is 0. This object is unavailable in the Set operation of file download. ')
hwStackUpgradeTransmitProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ftp", 1), ("sftp", 2), ("tftp", 3))).clone('ftp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeTransmitProtocol.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeTransmitProtocol.setDescription('Specifies the protocol used to transfer file. The default value of it is FTP.')
hwStackUpgradeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 30, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwStackUpgradeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeRowStatus.setDescription('The status of this table entry. Only used createAndGo and destroy.')
hwStackMemberPortEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 23), )
if mibBuilder.loadTexts: hwStackMemberPortEnableTable.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberPortEnableTable.setDescription('Table of stack physical port. ')
hwStackMemberPortEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 23, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hwStackMemberPortEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberPortEnableEntry.setDescription('Provide information of the physical port. ')
hwEnableStackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEnableStackMode.setStatus('current')
if mibBuilder.loadTexts: hwEnableStackMode.setDescription('If enable stack mode. ')
hwAddingPhyPortToStackPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 24), )
if mibBuilder.loadTexts: hwAddingPhyPortToStackPortTable.setStatus('current')
if mibBuilder.loadTexts: hwAddingPhyPortToStackPortTable.setDescription("Table of a stack port's member port. ")
hwAddingPhyPortToStackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 24, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwEnabledStackModePhyPortIndex"))
if mibBuilder.loadTexts: hwAddingPhyPortToStackPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwAddingPhyPortToStackPortEntry.setDescription("Provide information of a stack port's member port. ")
hwEnabledStackModePhyPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEnabledStackModePhyPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwEnabledStackModePhyPortIndex.setDescription("Enabled stack mode's physical name ")
hwStackPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("unjoinable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStackPortID.setStatus('current')
if mibBuilder.loadTexts: hwStackPortID.setDescription('adding to which stack port 1: added to stack port 1 2: added to stack port 2 3: did not add to any stack port ')
hwAddingPhyPortToFabricPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 26), )
if mibBuilder.loadTexts: hwAddingPhyPortToFabricPortTable.setStatus('current')
if mibBuilder.loadTexts: hwAddingPhyPortToFabricPortTable.setDescription("Table of a fabric port's member port. ")
hwAddingPhyPortToFabricPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 26, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwEnabledStackModePortIndex"))
if mibBuilder.loadTexts: hwAddingPhyPortToFabricPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwAddingPhyPortToFabricPortEntry.setDescription("Provide information of a fabric port's member port. ")
hwEnabledStackModePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEnabledStackModePortIndex.setStatus('current')
if mibBuilder.loadTexts: hwEnabledStackModePortIndex.setDescription("Enabled stack mode's physical Index ")
hwFabricPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFabricPortID.setStatus('current')
if mibBuilder.loadTexts: hwFabricPortID.setDescription('adding to which fabric port 0: did not add to any fabric port 1: added to fabric port 1')
hwFabricPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 27), )
if mibBuilder.loadTexts: hwFabricPortTable.setStatus('current')
if mibBuilder.loadTexts: hwFabricPortTable.setDescription('Table of fabric port. ')
hwFabricPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 27, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwFabricPortIndex"))
if mibBuilder.loadTexts: hwFabricPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwFabricPortEntry.setDescription('Provide information of the fabric port. ')
hwFabricPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFabricPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwFabricPortIndex.setDescription('Index of the fabric port. ')
hwFabricMemberID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(101, 254), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFabricMemberID.setStatus('current')
if mibBuilder.loadTexts: hwFabricMemberID.setDescription("Member device's ID of the fabric port. ")
hwFabricLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sourceMac", 1), ("destinationMac", 2), ("sourceAndDestinationMac", 3), ("sourceIp", 4), ("destinationIp", 5), ("sourceAndDestinationIp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFabricLoadBalance.setStatus('current')
if mibBuilder.loadTexts: hwFabricLoadBalance.setDescription('The loadBalance of the fabric port: sourceMac(1):According to source MAC hash arithmetic. destinationMac(2):According to destination MAC hash arithmetic sourceAndDestinationMac(3):According to source/destination MAC hash arithmetic. sourceIp(4):According to source IP hash arithmetic. destinationIp(5):According to destination IP hash arithmetic. sourceAndDestinationIp(6):According to source/destination IP hash arithmetic.')
hwFabricProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFabricProtocolState.setStatus('current')
if mibBuilder.loadTexts: hwFabricProtocolState.setDescription('The protocol state of the fabric port. ')
hwFabricConfiguredLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFabricConfiguredLinkNum.setStatus('current')
if mibBuilder.loadTexts: hwFabricConfiguredLinkNum.setDescription('The configured alarm threshold of minimum fabric link number. ')
hwStackUpgradeResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 31), )
if mibBuilder.loadTexts: hwStackUpgradeResultTable.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeResultTable.setDescription('Results of upgrade commands returned from stack member switches.')
hwStackUpgradeResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 31, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwStackUpgradeResultIndex"), (0, "HUAWEI-STACK-MIB", "hwStackUpgradeResultMemberId"))
if mibBuilder.loadTexts: hwStackUpgradeResultEntry.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeResultEntry.setDescription('Provides the result of stack switchs upgrade entry. ')
hwStackUpgradeResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwStackUpgradeResultIndex.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeResultIndex.setDescription(' Specifies the index of an entry. It is a random value when creating an entry.')
hwStackUpgradeResultMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackUpgradeResultMemberId.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeResultMemberId.setDescription('Identifier of the stack member switch.')
hwStackUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("running", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackUpgradeResult.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeResult.setDescription('Results of upgrade commands returned from stack member switches.')
hwStackUpgradeResultInProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackUpgradeResultInProcess.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeResultInProcess.setDescription('The upgrade is in process.')
hwStackUpgradeResultFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("opUpgradeSuccess", 1), ("opMasterDiskNoSpace", 2), ("opNonmasterDiskNoSpace", 3), ("opInvalidFileInfo", 4), ("opInvalidFileType", 5), ("opInvalidServerAddress", 6), ("opInvalidUserOrPassword", 7), ("opDeviceBusy", 8), ("opFileTransferError", 9), ("opFileChecksumError", 10), ("opNoMemory", 11), ("opVersionFileNotMatch", 12), ("opUpgradeDeviceAbsent", 13), ("opUnknownFailure", 14), ("opUpgradeInvalidValue", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStackUpgradeResultFailReason.setStatus('current')
if mibBuilder.loadTexts: hwStackUpgradeResultFailReason.setDescription('The status of operation. Only upgrade failure valid. The status of the specified operation can be one of the follows. opUpgradeSuccess(1): upgrade success. opMasterDiskNoSpace(2): flash of master device is no enough space. opNonmasterDiskNoSpace(3): flash of non-master device is no enough space. opInvalidFileInfo(4) :invalid source file name or path is specified. opInvalidFileType(5) :invalid file type. opInvalidServerAddress(6) :invalid server address is specified. opInvalidUserOrPassword(7):invalid server user or password. opDeviceBusy(8) :the device is in use and locked by another process opFileTransferError(9) :file transfer was unsuccessfull. opFileChecksumError(10) :file checksum in Flash si invalid. opNoMemory(11) :system is running in low on memory. opVersionFileNotMatch(12) : the version file does not match the device type. opUpgradeDeviceAbsent(13) : device absent. opUnknownFailure(14) :failure which is unknown. opUpgradeInvalidValue(15):invalid value. ')
hwStackTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32))
hwStackLocalIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackLocalIfName.setStatus('current')
if mibBuilder.loadTexts: hwStackLocalIfName.setDescription('Interface name.')
hwStackPeerIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackPeerIfName.setStatus('current')
if mibBuilder.loadTexts: hwStackPeerIfName.setDescription('The peer interface name.')
hwStackConnectErrReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackConnectErrReason.setStatus('current')
if mibBuilder.loadTexts: hwStackConnectErrReason.setDescription('Connection error reason.')
hwConfigureFailedStackId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwConfigureFailedStackId.setStatus('current')
if mibBuilder.loadTexts: hwConfigureFailedStackId.setDescription('Slot id.')
hwCssTrapErrorPortId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapErrorPortId.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapErrorPortId.setDescription('Error PortId.')
hwStackConnectMethod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackConnectMethod.setStatus('current')
if mibBuilder.loadTexts: hwStackConnectMethod.setDescription('SRUC Vs08 Connect Suggest.')
hwStackCfgConflictStackId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackCfgConflictStackId.setStatus('current')
if mibBuilder.loadTexts: hwStackCfgConflictStackId.setDescription('Stack ID of the device whose stack configuration conflicts with that of the device sending alarms.')
hwStackFabricPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackFabricPort.setStatus('current')
if mibBuilder.loadTexts: hwStackFabricPort.setDescription(' Fabric port interface name.')
hwStackFabricMemberPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 9), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackFabricMemberPort.setStatus('current')
if mibBuilder.loadTexts: hwStackFabricMemberPort.setDescription(' The fabric local interface name.')
hwStackMemberId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackMemberId.setStatus('current')
if mibBuilder.loadTexts: hwStackMemberId.setDescription(' The stack member ID.')
hwStackLeafMemberId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 254))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackLeafMemberId.setStatus('current')
if mibBuilder.loadTexts: hwStackLeafMemberId.setDescription(' The leaf switch member ID.')
hwStackReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 12), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackReason.setStatus('current')
if mibBuilder.loadTexts: hwStackReason.setDescription(' The reason for different stack configurations.')
hwStackLeafPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackLeafPort.setStatus('current')
if mibBuilder.loadTexts: hwStackLeafPort.setDescription(' The leaf switch interface name.')
hwStackCurrentLinkNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackCurrentLinkNum.setStatus('current')
if mibBuilder.loadTexts: hwStackCurrentLinkNum.setDescription(' The current number of member port in Stack-Port, which protocol state is up.')
hwFabricCurrentLinkNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFabricCurrentLinkNum.setStatus('current')
if mibBuilder.loadTexts: hwFabricCurrentLinkNum.setDescription(' The current number of member port in Fabric-Port, which protocol state is up.')
hwStackErrorDownRecoverReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 1, 32, 16), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStackErrorDownRecoverReason.setStatus('current')
if mibBuilder.loadTexts: hwStackErrorDownRecoverReason.setDescription(' Error-down reason.')
hwCssObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3))
hwCssGlobalObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 1))
hwCssEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCssEnable.setStatus('current')
if mibBuilder.loadTexts: hwCssEnable.setDescription('CSS enable status.')
hwCssMemberInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2), )
if mibBuilder.loadTexts: hwCssMemberInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberInfoTable.setDescription('Table of CSS member information.')
hwCssMemberInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwCssMemberFrameId"))
if mibBuilder.loadTexts: hwCssMemberInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberInfoEntry.setDescription('Entry of CSS member information table.')
hwCssMemberFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssMemberFrameId.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberFrameId.setDescription('Frame id for CSS member.')
hwCssMemberConfigFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCssMemberConfigFrameId.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberConfigFrameId.setDescription('Configured frame id for CSS member.')
hwCssMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssMemberPriority.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberPriority.setDescription('Priority for CSS member.')
hwCssMemberConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCssMemberConfigPriority.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberConfigPriority.setDescription('Configured priority for CSS member.')
hwCssMemberMasterForce = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssMemberMasterForce.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberMasterForce.setDescription('Force master status for CSS member.')
hwCssMemberConfigMasterForce = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCssMemberConfigMasterForce.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberConfigMasterForce.setDescription('Configured force master status CSS member.')
hwCssMemberConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCssMemberConfigEnable.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberConfigEnable.setDescription('Configured enable status for CSS member.')
hwCssMemberRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("master", 1), ("standby", 2), ("slave", 3), ("single", 4), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssMemberRole.setStatus('current')
if mibBuilder.loadTexts: hwCssMemberRole.setDescription("CSS member's role define.")
hwCssTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3))
hwCssTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1))
hwCssTrapFrameId1 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapFrameId1.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapFrameId1.setDescription('CSS trap message frame id parameter.')
hwCssTrapSlotId1 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapSlotId1.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapSlotId1.setDescription('CSS trap message slot id parameter.')
hwCssTrapPortId1 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapPortId1.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapPortId1.setDescription('CSS trap message port id parameter.')
hwCssTrapFrameId2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapFrameId2.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapFrameId2.setDescription('CSS trap message frame id parameter.')
hwCssTrapSlotId2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapSlotId2.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapSlotId2.setDescription('CSS trap message slot id parameter.')
hwCssTrapPortId2 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapPortId2.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapPortId2.setDescription('CSS trap message port id parameter.')
hwCssTrapFrameId3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapFrameId3.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapFrameId3.setDescription('CSS trap message frame id parameter.')
hwCssTrapSlotId3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapSlotId3.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapSlotId3.setDescription('CSS trap message slot id parameter.')
hwCssTrapPortId3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapPortId3.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapPortId3.setDescription('CSS trap message port id parameter.')
hwCssTrapConfigureFailedSlotId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 1, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCssTrapConfigureFailedSlotId.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapConfigureFailedSlotId.setDescription('CSS configure failed trap message slot id parameter.')
hwCssTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2))
hwCssLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 1)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapFrameId1"), ("HUAWEI-STACK-MIB", "hwCssTrapSlotId1"), ("HUAWEI-STACK-MIB", "hwCssTrapPortId1"))
if mibBuilder.loadTexts: hwCssLinkDown.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkDown.setDescription('CSS link down trap message.')
hwCssLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 2)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapFrameId1"), ("HUAWEI-STACK-MIB", "hwCssTrapSlotId1"), ("HUAWEI-STACK-MIB", "hwCssTrapPortId1"))
if mibBuilder.loadTexts: hwCssLinkUp.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkUp.setDescription('CSS link up trap message.')
hwCssSwitchOver = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 3)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapFrameId1"))
if mibBuilder.loadTexts: hwCssSwitchOver.setStatus('current')
if mibBuilder.loadTexts: hwCssSwitchOver.setDescription('CSS switch over trap message.')
hwCssConnectError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 4)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapFrameId1"), ("HUAWEI-STACK-MIB", "hwCssTrapSlotId1"), ("HUAWEI-STACK-MIB", "hwCssTrapPortId1"), ("HUAWEI-STACK-MIB", "hwCssTrapFrameId2"), ("HUAWEI-STACK-MIB", "hwCssTrapSlotId2"), ("HUAWEI-STACK-MIB", "hwCssTrapPortId2"), ("HUAWEI-STACK-MIB", "hwCssTrapFrameId3"), ("HUAWEI-STACK-MIB", "hwCssTrapSlotId3"), ("HUAWEI-STACK-MIB", "hwCssTrapPortId3"))
if mibBuilder.loadTexts: hwCssConnectError.setStatus('current')
if mibBuilder.loadTexts: hwCssConnectError.setDescription('CSS connect error trap message.')
hwCssSplit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 5))
if mibBuilder.loadTexts: hwCssSplit.setStatus('current')
if mibBuilder.loadTexts: hwCssSplit.setDescription('CSS split trap message.')
hwCssEstablish = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 6))
if mibBuilder.loadTexts: hwCssEstablish.setStatus('current')
if mibBuilder.loadTexts: hwCssEstablish.setDescription('CSS establish trap message.')
hwCssFastUpgradeFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 7))
if mibBuilder.loadTexts: hwCssFastUpgradeFail.setStatus('current')
if mibBuilder.loadTexts: hwCssFastUpgradeFail.setDescription('CSS fast upgrade fail.')
hwCssPhyCsuConnectError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 8)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackPeerIfName"), ("HUAWEI-STACK-MIB", "hwStackConnectErrReason"))
if mibBuilder.loadTexts: hwCssPhyCsuConnectError.setStatus('current')
if mibBuilder.loadTexts: hwCssPhyCsuConnectError.setDescription('CSS connect error trap message.')
hwCssLpuInvalidLicense = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 9))
if mibBuilder.loadTexts: hwCssLpuInvalidLicense.setStatus('current')
if mibBuilder.loadTexts: hwCssLpuInvalidLicense.setDescription('The license of controlling Lpu-based CSS function is invalid.')
hwCssPortConfigureFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 10)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapConfigureFailedSlotId"))
if mibBuilder.loadTexts: hwCssPortConfigureFailed.setStatus('current')
if mibBuilder.loadTexts: hwCssPortConfigureFailed.setDescription('CSS port configure failed trap message.')
hwCssPortUpDownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 11)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapErrorPortId"))
if mibBuilder.loadTexts: hwCssPortUpDownAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCssPortUpDownAlarm.setDescription('CSS port link flapping repeatedly message.')
hwCssPortCrcErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 12)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapErrorPortId"))
if mibBuilder.loadTexts: hwCssPortCrcErrorAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCssPortCrcErrorAlarm.setDescription('CSS port continuously receives CRC error packets message.')
hwCssPortErrorDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 13)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapErrorPortId"))
if mibBuilder.loadTexts: hwCssPortErrorDown.setStatus('current')
if mibBuilder.loadTexts: hwCssPortErrorDown.setDescription('CSS port turn into error-down state message.')
hwCssPortErrorDownRecover = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 14)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapErrorPortId"))
if mibBuilder.loadTexts: hwCssPortErrorDownRecover.setStatus('current')
if mibBuilder.loadTexts: hwCssPortErrorDownRecover.setDescription('CSS port recovered from error-down state message.')
hwCssPhyVs08ConnectError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 15)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackPeerIfName"), ("HUAWEI-STACK-MIB", "hwStackConnectMethod"))
if mibBuilder.loadTexts: hwCssPhyVs08ConnectError.setStatus('current')
if mibBuilder.loadTexts: hwCssPhyVs08ConnectError.setDescription('CSS connect error trap message.')
hwCssStandbyError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 16))
if mibBuilder.loadTexts: hwCssStandbyError.setStatus('current')
if mibBuilder.loadTexts: hwCssStandbyError.setDescription('The CSS enters the standby-no-MPU state trap message.')
hwCssStandbyErrorRestore = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 17))
if mibBuilder.loadTexts: hwCssStandbyErrorRestore.setStatus('current')
if mibBuilder.loadTexts: hwCssStandbyErrorRestore.setDescription('The CSS is recovered from the standby-no-MPU state trap message.')
hwCssPortStateError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 18)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapErrorPortId"))
if mibBuilder.loadTexts: hwCssPortStateError.setStatus('current')
if mibBuilder.loadTexts: hwCssPortStateError.setDescription('CSS port error trap message.')
hwCssPhyCardConnectError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 3, 2, 19)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackPeerIfName"), ("HUAWEI-STACK-MIB", "hwStackConnectErrReason"))
if mibBuilder.loadTexts: hwCssPhyCardConnectError.setStatus('current')
if mibBuilder.loadTexts: hwCssPhyCardConnectError.setDescription('CSS connect error trap message.')
hwCssPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4), )
if mibBuilder.loadTexts: hwCssPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInfoTable.setDescription('Table of CSS port information.')
hwCssPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwCssPortFrameId"), (0, "HUAWEI-STACK-MIB", "hwCssPortSlotId"), (0, "HUAWEI-STACK-MIB", "hwCssPortCardId"), (0, "HUAWEI-STACK-MIB", "hwCssPortPortId"), (0, "HUAWEI-STACK-MIB", "hwCssPortName"))
if mibBuilder.loadTexts: hwCssPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInfoEntry.setDescription('Entry of CSS port information table.')
hwCssPortFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hwCssPortFrameId.setStatus('current')
if mibBuilder.loadTexts: hwCssPortFrameId.setDescription('Frame id of CSS port.')
hwCssPortSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwCssPortSlotId.setStatus('current')
if mibBuilder.loadTexts: hwCssPortSlotId.setDescription('Slot id of CSS port.')
hwCssPortCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: hwCssPortCardId.setStatus('current')
if mibBuilder.loadTexts: hwCssPortCardId.setDescription('Card id of CSS port.')
hwCssPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwCssPortPortId.setStatus('current')
if mibBuilder.loadTexts: hwCssPortPortId.setDescription('Port id of CSS port.')
hwCssPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortName.setStatus('current')
if mibBuilder.loadTexts: hwCssPortName.setDescription('Port name of CSS port.')
hwCssPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hwCssPortSpeed.setDescription('Speed of CSS port.')
hwCssPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwCssPortOperStatus.setDescription('Oper status of CSS port.')
hwCssPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("undoshutdown", 0), ("shutdown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwCssPortAdminStatus.setDescription('Admin status of CSS port.')
hwCssPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortInOctets.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInOctets.setDescription('The total number of octets received on the interface.')
hwCssPortInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInUcastPkts.setDescription('The total number of unicast packets received on the interface.')
hwCssPortInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInMcastPkts.setDescription('The total number of multicast packets received on the interface.')
hwCssPortInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInBcastPkts.setDescription('The total number of broadcast packets received on the interface.')
hwCssPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortInDiscards.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInDiscards.setDescription('The number of inbound packets which were discarded.')
hwCssPortInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortInErrors.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInErrors.setDescription('The number of inbound packets which were error.')
hwCssPortInCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortInCRCErrors.setStatus('current')
if mibBuilder.loadTexts: hwCssPortInCRCErrors.setDescription('The number of inbound packets which were CRC error.')
hwCssPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortOutOctets.setStatus('current')
if mibBuilder.loadTexts: hwCssPortOutOctets.setDescription('The total number of octets sent on the interface.')
hwCssPortOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwCssPortOutUcastPkts.setDescription('The total number of unicast packets sent from the interface.')
hwCssPortOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwCssPortOutMcastPkts.setDescription('The total number of multicast packets sent from the interface.')
hwCssPortOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwCssPortOutBcastPkts.setDescription('The total number of broadcast packets sent from the interface.')
hwCssPortOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortOutDiscards.setStatus('current')
if mibBuilder.loadTexts: hwCssPortOutDiscards.setDescription('The number of outbound packets which were discarded.')
hwCssPortOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssPortOutErrors.setStatus('current')
if mibBuilder.loadTexts: hwCssPortOutErrors.setDescription('The number of outbound packets which were error.')
hwCssLinkInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5), )
if mibBuilder.loadTexts: hwCssLinkInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkInfoTable.setDescription('Table of CSS link information.')
hwCssLinkInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1), ).setIndexNames((0, "HUAWEI-STACK-MIB", "hwCssLinkLocFrameId"), (0, "HUAWEI-STACK-MIB", "hwCssLinkLocSlotId"), (0, "HUAWEI-STACK-MIB", "hwCssLinkLocCardId"), (0, "HUAWEI-STACK-MIB", "hwCssLinkLocPortId"))
if mibBuilder.loadTexts: hwCssLinkInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkInfoEntry.setDescription('Entry of CSS link information table.')
hwCssLinkLocFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hwCssLinkLocFrameId.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkLocFrameId.setDescription('Local frame id of CSS link.')
hwCssLinkLocSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwCssLinkLocSlotId.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkLocSlotId.setDescription('Local slot id of CSS link.')
hwCssLinkLocCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: hwCssLinkLocCardId.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkLocCardId.setDescription('Local card id of CSS link.')
hwCssLinkLocPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hwCssLinkLocPortId.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkLocPortId.setDescription('Local port id of CSS link.')
hwCssLinkLocPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssLinkLocPortName.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkLocPortName.setDescription('Local port name of CSS link.')
hwCssLinkRemFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssLinkRemFrameId.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkRemFrameId.setDescription('Remote frame id of CSS link.')
hwCssLinkRemSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssLinkRemSlotId.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkRemSlotId.setDescription('Remote slot id of CSS link.')
hwCssLinkRemCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssLinkRemCardId.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkRemCardId.setDescription('Remote card id of CSS link.')
hwCssLinkRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssLinkRemPortId.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkRemPortId.setDescription('Remote port id of CSS link.')
hwCssLinkRemPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssLinkRemPortName.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkRemPortName.setDescription('Remote port name of CSS link.')
hwCssLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 3, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCssLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: hwCssLinkSpeed.setDescription('Speed of CSS link.')
hwStackConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 100))
hwStackCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 100, 1))
hwStackCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 100, 1, 1)).setObjects(("HUAWEI-STACK-MIB", "hwStackObjectGroup"), ("HUAWEI-STACK-MIB", "hwStackNotificationGroup"), ("HUAWEI-STACK-MIB", "hwStackTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwStackCompliance = hwStackCompliance.setStatus('current')
if mibBuilder.loadTexts: hwStackCompliance.setDescription('The compliance statement for systems supporting this module.')
hwStackGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 100, 1, 2))
hwStackObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 100, 1, 2, 1)).setObjects(("HUAWEI-STACK-MIB", "hwStackRun"), ("HUAWEI-STACK-MIB", "hwStackTopoType"), ("HUAWEI-STACK-MIB", "hwStackMacAddressSwitchTime"), ("HUAWEI-STACK-MIB", "hwStackSystemMac"), ("HUAWEI-STACK-MIB", "hwStackIsStackDevice"), ("HUAWEI-STACK-MIB", "hwStackReservedVlanId"), ("HUAWEI-STACK-MIB", "hwStackClearUnsupportCfg"), ("HUAWEI-STACK-MIB", "hwStackLinkAlarmThreshold"), ("HUAWEI-STACK-MIB", "hwStackMemberThreshold"), ("HUAWEI-STACK-MIB", "hwStackMode"), ("HUAWEI-STACK-MIB", "hwStackMemberSpec"), ("HUAWEI-STACK-MIB", "hwLeafMaxNumber"), ("HUAWEI-STACK-MIB", "hwFabricCurrentForwardModel"), ("HUAWEI-STACK-MIB", "hwFabricConfigForwardModel"), ("HUAWEI-STACK-MIB", "hwLeafSingleHomedAlarmEnable"), ("HUAWEI-STACK-MIB", "hwFabricExcludeLeafType"), ("HUAWEI-STACK-MIB", "hwMemberCurrentStackId"), ("HUAWEI-STACK-MIB", "hwMemberStackPriority"), ("HUAWEI-STACK-MIB", "hwMemberStackRole"), ("HUAWEI-STACK-MIB", "hwMemberStackMacAddress"), ("HUAWEI-STACK-MIB", "hwMemberStackDeviceType"), ("HUAWEI-STACK-MIB", "hwMemberConfigStackId"), ("HUAWEI-STACK-MIB", "hwMemberStackObjectId"), ("HUAWEI-STACK-MIB", "hwStackPriority"), ("HUAWEI-STACK-MIB", "hwStackRole"), ("HUAWEI-STACK-MIB", "hwStackMacAddress"), ("HUAWEI-STACK-MIB", "hwStackDeviceType"), ("HUAWEI-STACK-MIB", "hwStackId"), ("HUAWEI-STACK-MIB", "hwStackConfigId"), ("HUAWEI-STACK-MIB", "hwStackSysOid"), ("HUAWEI-STACK-MIB", "hwStackDescription"), ("HUAWEI-STACK-MIB", "hwStackCurrentUplinkPort"), ("HUAWEI-STACK-MIB", "hwStackConfigUplinkPort"), ("HUAWEI-STACK-MIB", "hwStackCurrentSwitchMode"), ("HUAWEI-STACK-MIB", "hwStackConfigSwitchMode"), ("HUAWEI-STACK-MIB", "hwEnabledStackModePortIndex"), ("HUAWEI-STACK-MIB", "hwFabricPortID"), ("HUAWEI-STACK-MIB", "hwFabricPortIndex"), ("HUAWEI-STACK-MIB", "hwFabricMemberID"), ("HUAWEI-STACK-MIB", "hwFabricLoadBalance"), ("HUAWEI-STACK-MIB", "hwFabricProtocolState"), ("HUAWEI-STACK-MIB", "hwFabricConfiguredLinkNum"), ("HUAWEI-STACK-MIB", "hwSpineStackId"), ("HUAWEI-STACK-MIB", "hwSpinePortName"), ("HUAWEI-STACK-MIB", "hwSpinePortStatus"), ("HUAWEI-STACK-MIB", "hwLeafPortIndex"), ("HUAWEI-STACK-MIB", "hwLeafStackId"), ("HUAWEI-STACK-MIB", "hwLeafPortName"), ("HUAWEI-STACK-MIB", "hwLeafPortStatus"), ("HUAWEI-STACK-MIB", "hwStackPortStackId"), ("HUAWEI-STACK-MIB", "hwStackPortId"), ("HUAWEI-STACK-MIB", "hwStackPortName"), ("HUAWEI-STACK-MIB", "hwStackNeighborInfo"), ("HUAWEI-STACK-MIB", "hwStackPortStatus"), ("HUAWEI-STACK-MIB", "hwStackUpgradeGrpType"), ("HUAWEI-STACK-MIB", "hwStackUpgradeGrpValue"), ("HUAWEI-STACK-MIB", "hwStackUpgradeFileType"), ("HUAWEI-STACK-MIB", "hwStackUpgradeFileInfo"), ("HUAWEI-STACK-MIB", "hwStackUpgradeFtpIp"), ("HUAWEI-STACK-MIB", "hwStackUpgradeFtpUserName"), ("HUAWEI-STACK-MIB", "hwStackUpgradeFtpPassword"), ("HUAWEI-STACK-MIB", "hwStackUpgradeServerPort"), ("HUAWEI-STACK-MIB", "hwStackUpgradeFileSize"), ("HUAWEI-STACK-MIB", "hwStackUpgradeTransmitProtocol"), ("HUAWEI-STACK-MIB", "hwStackUpgradeRowStatus"), ("HUAWEI-STACK-MIB", "hwStackUpgradeResultMemberId"), ("HUAWEI-STACK-MIB", "hwStackUpgradeResult"), ("HUAWEI-STACK-MIB", "hwStackUpgradeResultInProcess"), ("HUAWEI-STACK-MIB", "hwStackUpgradeResultFailReason"), ("HUAWEI-STACK-MIB", "hwStackMacAddressAlarmTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwStackObjectGroup = hwStackObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwStackObjectGroup.setDescription(' Enter the description of the created OBJECT-GROUP.')
hwStackNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 100, 1, 2, 2)).setObjects(("HUAWEI-STACK-MIB", "hwStackLinkUp"), ("HUAWEI-STACK-MIB", "hwStackLinkDown"), ("HUAWEI-STACK-MIB", "hwStackStandbyChange"), ("HUAWEI-STACK-MIB", "hwStackSwitchOver"), ("HUAWEI-STACK-MIB", "hwStackSystemRestart"), ("HUAWEI-STACK-MIB", "hwStackStackMemberAdd"), ("HUAWEI-STACK-MIB", "hwStackStackMemberLeave"), ("HUAWEI-STACK-MIB", "hwStackStackMacChange"), ("HUAWEI-STACK-MIB", "hwStackLogicStackPortLinkErr"), ("HUAWEI-STACK-MIB", "hwStackPhyStackPortLinkErr"), ("HUAWEI-STACK-MIB", "hwPhyStackPortIsDown"), ("HUAWEI-STACK-MIB", "hwPhyStackPortIsUp"), ("HUAWEI-STACK-MIB", "hwStackLogicStackPortLinkErrResume"), ("HUAWEI-STACK-MIB", "hwStackPortConfigureFailed"), ("HUAWEI-STACK-MIB", "hwStackLinkLimitAlarm"), ("HUAWEI-STACK-MIB", "hwStackLinkLimitAlarmResume"), ("HUAWEI-STACK-MIB", "hwStackConfigConflict"), ("HUAWEI-STACK-MIB", "hwStackFabricPortLinkErr"), ("HUAWEI-STACK-MIB", "hwStackFabricPortLinkErrResume"), ("HUAWEI-STACK-MIB", "hwStackLeafSingleHomedAlarm"), ("HUAWEI-STACK-MIB", "hwStackLeafSingleHomedAlarmResume"), ("HUAWEI-STACK-MIB", "hwStackMemberLimit"), ("HUAWEI-STACK-MIB", "hwStackMemberAdd"), ("HUAWEI-STACK-MIB", "hwStackMemberLeave"), ("HUAWEI-STACK-MIB", "hwStackConfigDifferent"), ("HUAWEI-STACK-MIB", "hwStackLeafConfigConflict"), ("HUAWEI-STACK-MIB", "hwStackChipSingleHomedAlarm"), ("HUAWEI-STACK-MIB", "hwStackChipSingleHomedAlarmResume"), ("HUAWEI-STACK-MIB", "hwStackLeafMemberAdd"), ("HUAWEI-STACK-MIB", "hwFabricLinkLimitAlarm"), ("HUAWEI-STACK-MIB", "hwFabricLinkLimitAlarmResume"), ("HUAWEI-STACK-MIB", "hwStackMemberExceedSpec"), ("HUAWEI-STACK-MIB", "hwStackMacInconsistence"), ("HUAWEI-STACK-MIB", "hwStackMacInconsistenceResume"), ("HUAWEI-STACK-MIB", "hwFabricLinkProtocolAlarm"), ("HUAWEI-STACK-MIB", "hwFabricLinkProtocolAlarmResume"), ("HUAWEI-STACK-MIB", "hwFabricMemberPortProtocolAlarm"), ("HUAWEI-STACK-MIB", "hwFabricMemberPortProtocolAlarmResume"), ("HUAWEI-STACK-MIB", "hwLeafMaxNumberExceededAlarm"), ("HUAWEI-STACK-MIB", "hwLeafMaxNumberExceededAlarmResume"), ("HUAWEI-STACK-MIB", "hwPhyStackPortErrorDown"), ("HUAWEI-STACK-MIB", "hwPhyStackPortErrorDownRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwStackNotificationGroup = hwStackNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwStackNotificationGroup.setDescription('Enter the description of the created NOTIFICATION-GROUP.')
hwStackTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 100, 1, 2, 3)).setObjects(("HUAWEI-STACK-MIB", "hwStackLocalIfName"), ("HUAWEI-STACK-MIB", "hwStackPeerIfName"), ("HUAWEI-STACK-MIB", "hwConfigureFailedStackId"), ("HUAWEI-STACK-MIB", "hwStackConnectErrReason"), ("HUAWEI-STACK-MIB", "hwCssTrapErrorPortId"), ("HUAWEI-STACK-MIB", "hwStackConnectMethod"), ("HUAWEI-STACK-MIB", "hwStackCfgConflictStackId"), ("HUAWEI-STACK-MIB", "hwStackFabricPort"), ("HUAWEI-STACK-MIB", "hwStackFabricMemberPort"), ("HUAWEI-STACK-MIB", "hwStackMemberId"), ("HUAWEI-STACK-MIB", "hwStackLeafMemberId"), ("HUAWEI-STACK-MIB", "hwStackReason"), ("HUAWEI-STACK-MIB", "hwStackLeafPort"), ("HUAWEI-STACK-MIB", "hwStackCurrentLinkNum"), ("HUAWEI-STACK-MIB", "hwFabricCurrentLinkNum"), ("HUAWEI-STACK-MIB", "hwStackErrorDownRecoverReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwStackTrapGroup = hwStackTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwStackTrapGroup.setDescription('Enter the description of the created OBJECT-GROUP.')
hwCssConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 101))
hwCssCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 101, 1))
hwCssCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 101, 1, 1)).setObjects(("HUAWEI-STACK-MIB", "hwCssObjectGroup"), ("HUAWEI-STACK-MIB", "hwCssTrapObjectGroup"), ("HUAWEI-STACK-MIB", "hwCssNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCssCompliance = hwCssCompliance.setStatus('current')
if mibBuilder.loadTexts: hwCssCompliance.setDescription('The compliance statement for systems supporting this module.')
hwCssGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 101, 1, 2))
hwCssObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 101, 1, 2, 1)).setObjects(("HUAWEI-STACK-MIB", "hwCssMemberFrameId"), ("HUAWEI-STACK-MIB", "hwCssMemberConfigFrameId"), ("HUAWEI-STACK-MIB", "hwCssMemberPriority"), ("HUAWEI-STACK-MIB", "hwCssMemberConfigPriority"), ("HUAWEI-STACK-MIB", "hwCssMemberMasterForce"), ("HUAWEI-STACK-MIB", "hwCssMemberConfigMasterForce"), ("HUAWEI-STACK-MIB", "hwCssMemberConfigEnable"), ("HUAWEI-STACK-MIB", "hwCssMemberRole"), ("HUAWEI-STACK-MIB", "hwCssEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCssObjectGroup = hwCssObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwCssObjectGroup.setDescription('CSS mib group: object.')
hwCssTrapObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 101, 1, 2, 2)).setObjects(("HUAWEI-STACK-MIB", "hwCssTrapFrameId2"), ("HUAWEI-STACK-MIB", "hwCssTrapSlotId2"), ("HUAWEI-STACK-MIB", "hwCssTrapPortId2"), ("HUAWEI-STACK-MIB", "hwCssTrapFrameId3"), ("HUAWEI-STACK-MIB", "hwCssTrapSlotId3"), ("HUAWEI-STACK-MIB", "hwCssTrapPortId3"), ("HUAWEI-STACK-MIB", "hwCssTrapFrameId1"), ("HUAWEI-STACK-MIB", "hwCssTrapSlotId1"), ("HUAWEI-STACK-MIB", "hwCssTrapPortId1"), ("HUAWEI-STACK-MIB", "hwCssTrapConfigureFailedSlotId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCssTrapObjectGroup = hwCssTrapObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwCssTrapObjectGroup.setDescription('CSS mib group: trap.')
hwCssNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 183, 101, 1, 2, 3)).setObjects(("HUAWEI-STACK-MIB", "hwCssLinkDown"), ("HUAWEI-STACK-MIB", "hwCssLinkUp"), ("HUAWEI-STACK-MIB", "hwCssSwitchOver"), ("HUAWEI-STACK-MIB", "hwCssConnectError"), ("HUAWEI-STACK-MIB", "hwCssSplit"), ("HUAWEI-STACK-MIB", "hwCssEstablish"), ("HUAWEI-STACK-MIB", "hwCssFastUpgradeFail"), ("HUAWEI-STACK-MIB", "hwCssPhyCsuConnectError"), ("HUAWEI-STACK-MIB", "hwCssLpuInvalidLicense"), ("HUAWEI-STACK-MIB", "hwCssPortConfigureFailed"), ("HUAWEI-STACK-MIB", "hwCssPortUpDownAlarm"), ("HUAWEI-STACK-MIB", "hwCssPortCrcErrorAlarm"), ("HUAWEI-STACK-MIB", "hwCssPortErrorDown"), ("HUAWEI-STACK-MIB", "hwCssPortErrorDownRecover"), ("HUAWEI-STACK-MIB", "hwCssPhyVs08ConnectError"), ("HUAWEI-STACK-MIB", "hwCssStandbyError"), ("HUAWEI-STACK-MIB", "hwCssStandbyErrorRestore"), ("HUAWEI-STACK-MIB", "hwCssPortStateError"), ("HUAWEI-STACK-MIB", "hwCssPhyCardConnectError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCssNotificationGroup = hwCssNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwCssNotificationGroup.setDescription('CSS mib group: notification.')
mibBuilder.exportSymbols("HUAWEI-STACK-MIB", hwSpinePortName=hwSpinePortName, hwStackSysOid=hwStackSysOid, hwCssPortSpeed=hwCssPortSpeed, hwStackCurrentLinkNum=hwStackCurrentLinkNum, hwCssPortUpDownAlarm=hwCssPortUpDownAlarm, hwCssCompliances=hwCssCompliances, hwStackLinkUp=hwStackLinkUp, hwCssTraps=hwCssTraps, hwCssStandbyError=hwCssStandbyError, hwCssFastUpgradeFail=hwCssFastUpgradeFail, hwStackMacAddress=hwStackMacAddress, hwFabricLinkLimitAlarmResume=hwFabricLinkLimitAlarmResume, hwCssTrapSlotId1=hwCssTrapSlotId1, hwStackLeafConfigConflict=hwStackLeafConfigConflict, hwMemberConfigStackId=hwMemberConfigStackId, hwCssPortInCRCErrors=hwCssPortInCRCErrors, hwCssSwitchOver=hwCssSwitchOver, hwStackIsStackDevice=hwStackIsStackDevice, hwPhyStackPortIsDown=hwPhyStackPortIsDown, hwStackConnectMethod=hwStackConnectMethod, hwCssEstablish=hwCssEstablish, hwCssEnable=hwCssEnable, hwStackUpgradeTransmitProtocol=hwStackUpgradeTransmitProtocol, hwCssMemberConfigPriority=hwCssMemberConfigPriority, hwStackCompliance=hwStackCompliance, hwStackMacAddressSwitchTime=hwStackMacAddressSwitchTime, hwStackLogicStackPortLinkErr=hwStackLogicStackPortLinkErr, hwStackMemberLimit=hwStackMemberLimit, hwStackMemberPortEnableEntry=hwStackMemberPortEnableEntry, hwStackChipSingleHomedAlarmResume=hwStackChipSingleHomedAlarmResume, hwMemberStackRole=hwMemberStackRole, hwStackRun=hwStackRun, hwStackUpgradeResultMemberId=hwStackUpgradeResultMemberId, hwStackUpgradeEntry=hwStackUpgradeEntry, hwCssMemberPriority=hwCssMemberPriority, hwCssNotificationGroup=hwCssNotificationGroup, hwStackLeafMemberId=hwStackLeafMemberId, hwStackMemberLeave=hwStackMemberLeave, hwFabricCurrentLinkNum=hwFabricCurrentLinkNum, hwStackChipSingleHomedAlarm=hwStackChipSingleHomedAlarm, hwLeafMaxNumber=hwLeafMaxNumber, hwStackCfgConflictStackId=hwStackCfgConflictStackId, hwFabricMemberPortProtocolAlarm=hwFabricMemberPortProtocolAlarm, hwCssPortInfoTable=hwCssPortInfoTable, hwStackNeighborInfo=hwStackNeighborInfo, hwCssPortOutErrors=hwCssPortOutErrors, hwCssTrapPortId1=hwCssTrapPortId1, hwPhyStackPortIsUp=hwPhyStackPortIsUp, hwFabricPortTable=hwFabricPortTable, hwStackCompliances=hwStackCompliances, hwCssPhyVs08ConnectError=hwCssPhyVs08ConnectError, hwStackPortId=hwStackPortId, hwStackConfigId=hwStackConfigId, hwCssPortInBcastPkts=hwCssPortInBcastPkts, hwStackPortName=hwStackPortName, hwStackUpgradeRowStatus=hwStackUpgradeRowStatus, hwCssPortPortId=hwCssPortPortId, hwStackMemberInfoEntry=hwStackMemberInfoEntry, hwStackMemberAdd=hwStackMemberAdd, hwCssMemberConfigFrameId=hwCssMemberConfigFrameId, hwLeafPortIndex=hwLeafPortIndex, hwCssMemberMasterForce=hwCssMemberMasterForce, hwStackConfigSwitchMode=hwStackConfigSwitchMode, hwStackSystemRestart=hwStackSystemRestart, hwCssMemberFrameId=hwCssMemberFrameId, huaweiStackMIB=huaweiStackMIB, hwStackDescription=hwStackDescription, hwStackMacAddressAlarmTime=hwStackMacAddressAlarmTime, hwSpinePortStatus=hwSpinePortStatus, hwCssConformance=hwCssConformance, hwMemberStackObjectId=hwMemberStackObjectId, hwStackUpgradeFileInfo=hwStackUpgradeFileInfo, hwStackLinkDown=hwStackLinkDown, hwFabricPortIndex=hwFabricPortIndex, hwStackUpgradeResult=hwStackUpgradeResult, hwStackLinkLimitAlarmResume=hwStackLinkLimitAlarmResume, hwFabricLinkProtocolAlarm=hwFabricLinkProtocolAlarm, hwCssPortAdminStatus=hwCssPortAdminStatus, hwCssLinkRemPortId=hwCssLinkRemPortId, hwSpineStackId=hwSpineStackId, hwStackUpgradeGrpType=hwStackUpgradeGrpType, hwStackUpgradeResultEntry=hwStackUpgradeResultEntry, hwFabricProtocolState=hwFabricProtocolState, hwCssPortOutBcastPkts=hwCssPortOutBcastPkts, hwStackUpgradeServerPort=hwStackUpgradeServerPort, hwPhyStackPortErrorDownRecover=hwPhyStackPortErrorDownRecover, hwLeafPortName=hwLeafPortName, hwStackDeviceType=hwStackDeviceType, hwStackConnectErrReason=hwStackConnectErrReason, hwMemberStackMacAddress=hwMemberStackMacAddress, hwStackMode=hwStackMode, hwStackUpgradeFtpUserName=hwStackUpgradeFtpUserName, hwMemberStackPriority=hwMemberStackPriority, hwStackUpgradeResultInProcess=hwStackUpgradeResultInProcess, hwFabricConfigForwardModel=hwFabricConfigForwardModel, hwCssTrapErrorPortId=hwCssTrapErrorPortId, hwCssPortOutOctets=hwCssPortOutOctets, hwStackNotificationGroup=hwStackNotificationGroup, hwCssLinkRemSlotId=hwCssLinkRemSlotId, hwCssLinkInfoTable=hwCssLinkInfoTable, hwStackSwitchOver=hwStackSwitchOver, hwStackTopoType=hwStackTopoType, hwStackLocalIfName=hwStackLocalIfName, hwCssPortOutDiscards=hwCssPortOutDiscards, hwFabricPortID=hwFabricPortID, hwLeafSingleHomedAlarmEnable=hwLeafSingleHomedAlarmEnable, hwStackPeerIfName=hwStackPeerIfName, hwStackTrapObject=hwStackTrapObject, hwStackPortTable=hwStackPortTable, hwStackPortConfigureFailed=hwStackPortConfigureFailed, hwStackFabricPortLinkErr=hwStackFabricPortLinkErr, hwFabricLinkLimitAlarm=hwFabricLinkLimitAlarm, hwStackMacInconsistence=hwStackMacInconsistence, hwCssTrapFrameId2=hwCssTrapFrameId2, hwFabricExcludeLeafType=hwFabricExcludeLeafType, hwCssPortInOctets=hwCssPortInOctets, hwCssPortInMcastPkts=hwCssPortInMcastPkts, hwStackMemberInfoTable=hwStackMemberInfoTable, hwCssTrapSlotId2=hwCssTrapSlotId2, hwStackIdIndex=hwStackIdIndex, hwStackLinkLimitAlarm=hwStackLinkLimitAlarm, hwLeafMaxNumberExceededAlarmResume=hwLeafMaxNumberExceededAlarmResume, hwCssPortOperStatus=hwCssPortOperStatus, hwStackObject=hwStackObject, hwStackMemberInformationEntry=hwStackMemberInformationEntry, hwCssPortConfigureFailed=hwCssPortConfigureFailed, hwCssSplit=hwCssSplit, hwStackUpgradeFileType=hwStackUpgradeFileType, hwCssPortInfoEntry=hwCssPortInfoEntry, hwCssLinkLocCardId=hwCssLinkLocCardId, hwCssGlobalObject=hwCssGlobalObject, hwStackMemberPortEnableTable=hwStackMemberPortEnableTable, hwStackRole=hwStackRole, hwCssPortCrcErrorAlarm=hwCssPortCrcErrorAlarm, hwCssLpuInvalidLicense=hwCssLpuInvalidLicense, hwStackPortStatus=hwStackPortStatus, hwStackUpgradeResultFailReason=hwStackUpgradeResultFailReason, hwCssLinkLocPortId=hwCssLinkLocPortId, hwCssTrap=hwCssTrap, hwStackMemberInformationTable=hwStackMemberInformationTable, hwCssTrapFrameId1=hwCssTrapFrameId1, hwStackCurrentUplinkPort=hwStackCurrentUplinkPort, hwCssPortFrameId=hwCssPortFrameId, hwCssLinkRemCardId=hwCssLinkRemCardId, hwStackMemberThreshold=hwStackMemberThreshold, hwCssObjectGroup=hwCssObjectGroup, hwStackPhyStackPortLinkErr=hwStackPhyStackPortLinkErr, hwStackFabricPortLinkErrResume=hwStackFabricPortLinkErrResume, hwFabricConfiguredLinkNum=hwFabricConfiguredLinkNum, hwCssLinkLocPortName=hwCssLinkLocPortName, hwCssPortInErrors=hwCssPortInErrors, hwCssPortCardId=hwCssPortCardId, hwCssPortErrorDownRecover=hwCssPortErrorDownRecover, hwStackTrapGroup=hwStackTrapGroup, hwStackUpgradeResultTable=hwStackUpgradeResultTable, hwPhyStackPortErrorDown=hwPhyStackPortErrorDown, hwStackMemberId=hwStackMemberId, hwCssPortStateError=hwCssPortStateError, hwCssCompliance=hwCssCompliance, hwAddingPhyPortToStackPortEntry=hwAddingPhyPortToStackPortEntry, hwCssMemberConfigMasterForce=hwCssMemberConfigMasterForce, hwFabricPhyLinkTable=hwFabricPhyLinkTable, hwStackReservedVlanId=hwStackReservedVlanId, hwFabricLoadBalance=hwFabricLoadBalance, hwCssLinkDown=hwCssLinkDown, hwCssPortInUcastPkts=hwCssPortInUcastPkts, hwCssStandbyErrorRestore=hwCssStandbyErrorRestore, hwLeafPortStatus=hwLeafPortStatus, hwCssLinkRemPortName=hwCssLinkRemPortName, hwCssPortInDiscards=hwCssPortInDiscards, hwCssTrapConfigureFailedSlotId=hwCssTrapConfigureFailedSlotId, hwStackId=hwStackId, hwCssLinkRemFrameId=hwCssLinkRemFrameId, hwEnabledStackModePortIndex=hwEnabledStackModePortIndex, hwEnabledStackModePhyPortIndex=hwEnabledStackModePhyPortIndex, hwAddingPhyPortToFabricPortTable=hwAddingPhyPortToFabricPortTable, hwCssPhyCardConnectError=hwCssPhyCardConnectError, hwLeafMaxNumberExceededAlarm=hwLeafMaxNumberExceededAlarm, hwCssMemberInfoEntry=hwCssMemberInfoEntry, hwCssPortOutUcastPkts=hwCssPortOutUcastPkts, hwCssMemberInfoTable=hwCssMemberInfoTable, hwCssTrapObjectGroup=hwCssTrapObjectGroup, hwStackUpgradeIndex=hwStackUpgradeIndex, hwFabricLinkProtocolAlarmResume=hwFabricLinkProtocolAlarmResume, hwCssMemberRole=hwCssMemberRole, hwEnableStackMode=hwEnableStackMode, hwStackGroups=hwStackGroups, hwStackConformance=hwStackConformance, hwCssPortName=hwCssPortName, hwStackLeafPort=hwStackLeafPort, hwStackPriority=hwStackPriority, hwStackSystemMac=hwStackSystemMac, hwCssMemberConfigEnable=hwCssMemberConfigEnable, hwCssTrapPortId3=hwCssTrapPortId3, hwStackLinkAlarmThreshold=hwStackLinkAlarmThreshold, hwStackLeafMemberAdd=hwStackLeafMemberAdd, hwStackLeafSingleHomedAlarmResume=hwStackLeafSingleHomedAlarmResume, hwStackMacInconsistenceResume=hwStackMacInconsistenceResume, hwStackConfigDifferent=hwStackConfigDifferent, hwFabricMemberPortProtocolAlarmResume=hwFabricMemberPortProtocolAlarmResume, hwStackFabricPort=hwStackFabricPort, hwStackConfigUplinkPort=hwStackConfigUplinkPort, hwMemberStackDeviceType=hwMemberStackDeviceType, hwStackStackMacChange=hwStackStackMacChange, hwFabricCurrentForwardModel=hwFabricCurrentForwardModel, PYSNMP_MODULE_ID=huaweiStackMIB, hwStackLogicStackPortLinkErrResume=hwStackLogicStackPortLinkErrResume, hwStackPortID=hwStackPortID, hwCssTrapFrameId3=hwCssTrapFrameId3, hwCssPhyCsuConnectError=hwCssPhyCsuConnectError, hwCssGroups=hwCssGroups, hwStackUpgradeFtpPassword=hwStackUpgradeFtpPassword, hwStackClearUnsupportCfg=hwStackClearUnsupportCfg, hwStackStackMemberLeave=hwStackStackMemberLeave, hwStackUpgradeFtpIp=hwStackUpgradeFtpIp, hwFabricPortEntry=hwFabricPortEntry, hwStackPortStackId=hwStackPortStackId, hwCssObject=hwCssObject, hwStackReason=hwStackReason, hwConfigureFailedStackId=hwConfigureFailedStackId, hwStackMemberSpec=hwStackMemberSpec, hwStackLeafSingleHomedAlarm=hwStackLeafSingleHomedAlarm, hwFabricMemberID=hwFabricMemberID, hwStackPortEntry=hwStackPortEntry, hwMemberCurrentStackId=hwMemberCurrentStackId, hwStackFabricMemberPort=hwStackFabricMemberPort, hwCssConnectError=hwCssConnectError, hwCssLinkInfoEntry=hwCssLinkInfoEntry, hwCssLinkLocSlotId=hwCssLinkLocSlotId, hwAddingPhyPortToStackPortTable=hwAddingPhyPortToStackPortTable, hwStackStandbyChange=hwStackStandbyChange, hwStackUpgradeResultIndex=hwStackUpgradeResultIndex, hwCssLinkLocFrameId=hwCssLinkLocFrameId, hwStackMemberExceedSpec=hwStackMemberExceedSpec, hwCssTrapPortId2=hwCssTrapPortId2, hwStackEventsV2=hwStackEventsV2, hwStackConfigConflict=hwStackConfigConflict, hwCssPortErrorDown=hwCssPortErrorDown, hwCssPortSlotId=hwCssPortSlotId, hwFabricPhyLinkEntry=hwFabricPhyLinkEntry, hwStackObjectGroup=hwStackObjectGroup, hwStackUpgradeFileSize=hwStackUpgradeFileSize, hwCssLinkSpeed=hwCssLinkSpeed, hwSpinePortIndex=hwSpinePortIndex, hwLeafStackId=hwLeafStackId, hwAddingPhyPortToFabricPortEntry=hwAddingPhyPortToFabricPortEntry, hwStackErrorDownRecoverReason=hwStackErrorDownRecoverReason, hwStackCurrentSwitchMode=hwStackCurrentSwitchMode, hwCssTrapObjects=hwCssTrapObjects, hwStackStackMemberAdd=hwStackStackMemberAdd, hwStackUpgradeGrpValue=hwStackUpgradeGrpValue, hwCssLinkUp=hwCssLinkUp, hwCssTrapSlotId3=hwCssTrapSlotId3, hwCssPortOutMcastPkts=hwCssPortOutMcastPkts)
mibBuilder.exportSymbols("HUAWEI-STACK-MIB", hwStackUpgradeTable=hwStackUpgradeTable)
