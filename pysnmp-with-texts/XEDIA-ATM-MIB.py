#
# PySNMP MIB module XEDIA-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
atmTrafficDescrParamEntry, atmInterfaceDs3PlcpEntry, atmInterfaceConfEntry, aal5VccEntry = mibBuilder.importSymbols("ATM-MIB", "atmTrafficDescrParamEntry", "atmInterfaceDs3PlcpEntry", "atmInterfaceConfEntry", "aal5VccEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, IpAddress, Integer32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, MibIdentifier, Gauge32, iso, ModuleIdentity, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Integer32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "MibIdentifier", "Gauge32", "iso", "ModuleIdentity", "NotificationType", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaAtmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 12))
if mibBuilder.loadTexts: xediaAtmMIB.setLastUpdated('9801142155Z')
if mibBuilder.loadTexts: xediaAtmMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaAtmMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaAtmMIB.setDescription('This module defines additional objects for management of ATM links in Xedia devices, above and beyond what is defined in the standard ATM mib, and proposed drafts.')
xAtmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 12, 1))
xAtmTables = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 12, 2))
xAtmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 12, 3))
xAtmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 1), )
if mibBuilder.loadTexts: xAtmInterfaceConfTable.setStatus('current')
if mibBuilder.loadTexts: xAtmInterfaceConfTable.setDescription('The Xedia ATM Interface Configuration Table contains extensions to the ATM Interface Configuration Table, one entry per ATM interface.')
xAtmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 1, 1), )
atmInterfaceConfEntry.registerAugmentions(("XEDIA-ATM-MIB", "xAtmInterfaceConfEntry"))
xAtmInterfaceConfEntry.setIndexNames(*atmInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: xAtmInterfaceConfEntry.setStatus('current')
if mibBuilder.loadTexts: xAtmInterfaceConfEntry.setDescription('An entry in the Xedia ATM Interface Configuration Table.')
xAtmInterfaceEmptyCells = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("unassigned", 2))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xAtmInterfaceEmptyCells.setStatus('current')
if mibBuilder.loadTexts: xAtmInterfaceEmptyCells.setDescription('Specifies the type of cells that the interface sends as a filler when there is no data to send.')
xAtmInterfaceDs3PlcpTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 2), )
if mibBuilder.loadTexts: xAtmInterfaceDs3PlcpTable.setStatus('current')
if mibBuilder.loadTexts: xAtmInterfaceDs3PlcpTable.setDescription('The Xedia ATM Interface DS3 PLCP Table contains extensions to the ATM Interface DS3 PLCP Table, one entry per ATM interface.')
xAtmInterfaceDs3PlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 2, 1), )
atmInterfaceDs3PlcpEntry.registerAugmentions(("XEDIA-ATM-MIB", "xAtmInterfaceDs3PlcpEntry"))
xAtmInterfaceDs3PlcpEntry.setIndexNames(*atmInterfaceDs3PlcpEntry.getIndexNames())
if mibBuilder.loadTexts: xAtmInterfaceDs3PlcpEntry.setStatus('current')
if mibBuilder.loadTexts: xAtmInterfaceDs3PlcpEntry.setDescription('An entry in the Xedia ATM Interface DS3 PLCP Table.')
xAtmInterfaceDs3PlcpCellAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hec", 1), ("plcp", 2))).clone('hec')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xAtmInterfaceDs3PlcpCellAlign.setStatus('current')
if mibBuilder.loadTexts: xAtmInterfaceDs3PlcpCellAlign.setDescription('Specifies the cell alignment mechanism used by the DS3 framer. In hec(1) mode, the framer determines cell delineation via the HEC alignment method. In this mode, 53-octet cells are expected. In plcp(2) mode, the framer PLCP framing overhead is used which results in 57-octet cells.')
xAtmTrafficDescrTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 3), )
if mibBuilder.loadTexts: xAtmTrafficDescrTable.setStatus('current')
if mibBuilder.loadTexts: xAtmTrafficDescrTable.setDescription('The Xedia ATM Traffic Descriptor Table contains extensions to the ATM Traffic Descriptor Table.')
xAtmTrafficDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 3, 1), )
atmTrafficDescrParamEntry.registerAugmentions(("XEDIA-ATM-MIB", "xAtmTrafficDescrEntry"))
xAtmTrafficDescrEntry.setIndexNames(*atmTrafficDescrParamEntry.getIndexNames())
if mibBuilder.loadTexts: xAtmTrafficDescrEntry.setStatus('current')
if mibBuilder.loadTexts: xAtmTrafficDescrEntry.setDescription('An entry in the Xedia ATM Traffic Descriptor Table.')
xAtmTrafficDescrDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xAtmTrafficDescrDescr.setStatus('current')
if mibBuilder.loadTexts: xAtmTrafficDescrDescr.setDescription('A textual description for the traffic descriptor.')
xAtmTrafficDescrQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ubr", 0), ("cbr", 1), ("vbrAudioVideo", 2), ("vbrConnData", 3), ("vbrConnlessData", 4))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xAtmTrafficDescrQoSClass.setStatus('current')
if mibBuilder.loadTexts: xAtmTrafficDescrQoSClass.setDescription('This object identifies the QoS Class. It is identical to the atmTrafficDescrQoSClass object in the ATM Mgt MIB except that it provides textual enumerations for the values.')
xAtmAal5VccTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 4), )
if mibBuilder.loadTexts: xAtmAal5VccTable.setStatus('current')
if mibBuilder.loadTexts: xAtmAal5VccTable.setDescription('The Xedia ATM AAL5 VCC Table contains extensions to the ATM AAL5 VCC Performance Parameters, one entry per ATM AAL5 virtual channel on an ATM interface.')
xAtmAal5VccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 4, 1), )
aal5VccEntry.registerAugmentions(("XEDIA-ATM-MIB", "xAtmAal5VccEntry"))
xAtmAal5VccEntry.setIndexNames(*aal5VccEntry.getIndexNames())
if mibBuilder.loadTexts: xAtmAal5VccEntry.setStatus('current')
if mibBuilder.loadTexts: xAtmAal5VccEntry.setDescription('An entry in the Xedia ATM AAL5 VCC Table.')
xAtmAal5VccTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xAtmAal5VccTxPdus.setStatus('current')
if mibBuilder.loadTexts: xAtmAal5VccTxPdus.setDescription("The number of AAL5 PDUs successfully passed to the ATM interface's driver for transmission on the virtual channel.")
xAtmAal5VccTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xAtmAal5VccTxOctets.setStatus('current')
if mibBuilder.loadTexts: xAtmAal5VccTxOctets.setDescription("The number of AAL5 octets successfully passed to the ATM interface's driver for transmission on the virtual channel.")
xAtmAal5VccTxPduFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xAtmAal5VccTxPduFailures.setStatus('current')
if mibBuilder.loadTexts: xAtmAal5VccTxPduFailures.setDescription("The number of AAL5 PDUs which could not be passed to the ATM interface's driver for transmission on the virtual channel. Possible reasons include VCL operational status down or driver unable to accept PDU due to state or lack of resources.")
xAtmAal5VccRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xAtmAal5VccRxPdus.setStatus('current')
if mibBuilder.loadTexts: xAtmAal5VccRxPdus.setDescription('The number of AAL5 PDUs successfully received on the virtual channel from the ATM interface and delivered to a higher layer.')
xAtmAal5VccRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xAtmAal5VccRxOctets.setStatus('current')
if mibBuilder.loadTexts: xAtmAal5VccRxOctets.setDescription('The number of AAL5 octets successfully received on the virtual channel from the ATM interface and delivered to a higher layer.')
xAtmAal5VccRxPduDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 12, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xAtmAal5VccRxPduDiscards.setStatus('current')
if mibBuilder.loadTexts: xAtmAal5VccRxPduDiscards.setDescription('The number of AAL5 PDUs received and discarded on the virtual channel from the ATM interface. Possible reasons for discard include: VCL operational state down, no higher layer client connected to VCL, etc.')
xAtmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 12, 3, 1))
xAtmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 12, 3, 2))
xAtmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 12, 3, 1, 1)).setObjects(("XEDIA-ATM-MIB", "xAtmAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xAtmCompliance = xAtmCompliance.setStatus('current')
if mibBuilder.loadTexts: xAtmCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xAtmAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 12, 3, 2, 1)).setObjects(("XEDIA-ATM-MIB", "xAtmInterfaceEmptyCells"), ("XEDIA-ATM-MIB", "xAtmInterfaceDs3PlcpCellAlign"), ("XEDIA-ATM-MIB", "xAtmTrafficDescrDescr"), ("XEDIA-ATM-MIB", "xAtmTrafficDescrQoSClass"), ("XEDIA-ATM-MIB", "xAtmAal5VccTxPdus"), ("XEDIA-ATM-MIB", "xAtmAal5VccTxOctets"), ("XEDIA-ATM-MIB", "xAtmAal5VccTxPduFailures"), ("XEDIA-ATM-MIB", "xAtmAal5VccRxPdus"), ("XEDIA-ATM-MIB", "xAtmAal5VccRxOctets"), ("XEDIA-ATM-MIB", "xAtmAal5VccRxPduDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xAtmAllGroup = xAtmAllGroup.setStatus('current')
if mibBuilder.loadTexts: xAtmAllGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-ATM-MIB", xAtmAllGroup=xAtmAllGroup, xAtmInterfaceDs3PlcpTable=xAtmInterfaceDs3PlcpTable, xAtmAal5VccTxOctets=xAtmAal5VccTxOctets, xAtmTrafficDescrQoSClass=xAtmTrafficDescrQoSClass, xAtmCompliance=xAtmCompliance, xAtmConformance=xAtmConformance, xAtmAal5VccEntry=xAtmAal5VccEntry, xAtmInterfaceConfTable=xAtmInterfaceConfTable, xAtmTrafficDescrTable=xAtmTrafficDescrTable, xAtmTables=xAtmTables, xediaAtmMIB=xediaAtmMIB, xAtmGroups=xAtmGroups, xAtmInterfaceDs3PlcpEntry=xAtmInterfaceDs3PlcpEntry, xAtmAal5VccRxOctets=xAtmAal5VccRxOctets, xAtmAal5VccTxPduFailures=xAtmAal5VccTxPduFailures, xAtmAal5VccRxPdus=xAtmAal5VccRxPdus, xAtmInterfaceEmptyCells=xAtmInterfaceEmptyCells, xAtmTrafficDescrEntry=xAtmTrafficDescrEntry, xAtmTrafficDescrDescr=xAtmTrafficDescrDescr, xAtmAal5VccTable=xAtmAal5VccTable, xAtmCompliances=xAtmCompliances, xAtmInterfaceConfEntry=xAtmInterfaceConfEntry, xAtmAal5VccRxPduDiscards=xAtmAal5VccRxPduDiscards, xAtmInterfaceDs3PlcpCellAlign=xAtmInterfaceDs3PlcpCellAlign, PYSNMP_MODULE_ID=xediaAtmMIB, xAtmAal5VccTxPdus=xAtmAal5VccTxPdus, xAtmObjects=xAtmObjects)
