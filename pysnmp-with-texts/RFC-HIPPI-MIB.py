#
# PySNMP MIB module RFC-HIPPI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC-HIPPI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:56:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
nscTransmission, = mibBuilder.importSymbols("NSC-MIB", "nscTransmission")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, ObjectIdentity, Unsigned32, MibIdentifier, IpAddress, Counter32, transmission, Counter64, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "Counter32", "transmission", "Counter64", "TimeTicks", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nscHippi = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1))
hippiNumber = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hippiNumber.setDescription('An integer value indicating the number of HippiEntry objects that are in the hippiTable.')
hippiTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2), )
if mibBuilder.loadTexts: hippiTable.setStatus('mandatory')
if mibBuilder.loadTexts: hippiTable.setDescription('The HIPPI table of entries')
hippiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1), ).setIndexNames((0, "RFC-HIPPI-MIB", "hippiPortNumber"))
if mibBuilder.loadTexts: hippiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hippiEntry.setDescription('An entry in the HIPPI table')
hippiPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hippiPortNumber.setDescription('Unique sequential integer identifying the hippi media. This is the ifIndex value of the corresponding ifEntry.')
hippiWordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hippi32bitDataBus", 1), ("hippi64bitDataBus", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiWordSize.setStatus('mandatory')
if mibBuilder.loadTexts: hippiWordSize.setDescription('This enumerated value indicates the size of the data bus associated with this particular hippi media. This defines whether the interface operates at 800 or 1600 Mbits/s.')
hippiEndPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hippiSourceEndPoint", 1), ("hippiDestinationEndPoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiEndPointType.setStatus('mandatory')
if mibBuilder.loadTexts: hippiEndPointType.setDescription('This enumerated value indicates whether this side of the hippi simplex connection is operating as a source or a destination.')
hippiWordCountHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiWordCountHigh.setStatus('mandatory')
if mibBuilder.loadTexts: hippiWordCountHigh.setDescription('The word counter represents the number of words transferred through the media. The counter is cleared at power up or reset. This is the portion of the count above 999,999,999. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiWordCountLow = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiWordCountLow.setStatus('mandatory')
if mibBuilder.loadTexts: hippiWordCountLow.setDescription('The word counter represents the number of words transferred through the media. The counter is cleared at power up or reset. This is the portion of the count below 1,000,000,000. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiBurstCountHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiBurstCountHigh.setStatus('mandatory')
if mibBuilder.loadTexts: hippiBurstCountHigh.setDescription('Total number of bursts transferred by this media since power up or reset. This is the portion of the count above 999,999,999. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiBurstCountLow = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiBurstCountLow.setStatus('mandatory')
if mibBuilder.loadTexts: hippiBurstCountLow.setDescription('Total number of bursts transferred by this media since power up or reset. This is the portion of the count below 1,000,000,000. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiPacketCountHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiPacketCountHigh.setStatus('mandatory')
if mibBuilder.loadTexts: hippiPacketCountHigh.setDescription('The packet count represents the number of packets transferred on the media. The counter is cleared at power up or reset. This is the portion of the count above 999,999,999. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiPacketCountLow = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiPacketCountLow.setStatus('mandatory')
if mibBuilder.loadTexts: hippiPacketCountLow.setDescription('The packet count represents the number of packets transferred on the media. The counter is cleared at power up or reset. This is the portion of the count below 1,000,000,000. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: hippiParityErrors.setDescription('This counter represents the number of data parity errors that have occurred on the media since power up or reset. Since the parity bus is one directional from the source to the destination, this object only has meaning when the hippiEndPointType indicates this media is a destination end point. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiInputPortRejectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiInputPortRejectCount.setStatus('mandatory')
if mibBuilder.loadTexts: hippiInputPortRejectCount.setDescription('Total number of times that the input port has rejected a connection attempt due to I-Field parity errors, busy ports, or invalid source addresses since power up or reset. This object is only meaningful when the hippiEndPointType indicates this media is a destination end point. This object may be made read- write accessible to allow resetting the counter from an appropriately configured management station.')
hippiDestRejectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiDestRejectCount.setStatus('mandatory')
if mibBuilder.loadTexts: hippiDestRejectCount.setDescription('This counter represents the number of connection requests that were rejected by a destination end point since power up or reset. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiSourceRejectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiSourceRejectCount.setStatus('mandatory')
if mibBuilder.loadTexts: hippiSourceRejectCount.setDescription('This counter represents the number of times that the source end point dropped the connection request before the connection to the final destination was completed since power up or reset. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiDestDisconnectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiDestDisconnectCount.setStatus('mandatory')
if mibBuilder.loadTexts: hippiDestDisconnectCount.setDescription('This counter represents the number of completed connections that were terminated by a destination end point since power up or reset. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiSourceDisconnectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hippiSourceDisconnectCount.setStatus('mandatory')
if mibBuilder.loadTexts: hippiSourceDisconnectCount.setDescription('This counter represents the number of completed connections that were terminated normally by the source end point since power up or reset. This object may be made read-write accessible to allow resetting the counter from an appropriately configured management station.')
hippiLastIField = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiLastIField.setStatus('mandatory')
if mibBuilder.loadTexts: hippiLastIField.setDescription('This data type specifies the HIPPI I-Field address that was associated with the last operation on the media. If the hippiEndPointType indicates this is a Destination then the I-Field gives an indication of how the end point was addressed. If the media is a Source then the I-Field indicates the last address that the media attempted to connect to.')
hippiConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hippiDisconnect", 1), ("hippiConnectRequest", 2), ("hippiConnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: hippiConnectState.setDescription('Indicates the current connection state of the media.')
hippiLastErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hippiErrorTypeReject", 1), ("hippiErrorTypeBusy", 2), ("hippiErrorTypeTimeout", 3), ("hippiErrorTypeParityError", 4), ("hippiErrorTypeInvalidAddress", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiLastErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: hippiLastErrorType.setDescription('Contains the type identifier of the last error that was encountered on this media. The type identifier and the hippiLastErrorIField values are intended to be used together to aid in determining line connection problems.')
hippiLastErrorIField = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiLastErrorIField.setStatus('mandatory')
if mibBuilder.loadTexts: hippiLastErrorIField.setDescription('This data type specifies the HIPPI I-Field address that was associated with the last error for this media. The hippiLastErrorType along with this I-Field information is intended to help in determining connection problems. If the hippiEndPointType indicates this is a Destination then the I-Field gives an indication of how the end point was addressed. If the media is a Source then the I-Field indicates the last address that the media attempted to connect to')
hippiInterconnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 2, 2, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hippiInterconnectStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hippiInterconnectStatus.setDescription('As defined in HIPPI-PH, HIPPI connections have interconnect signals that are carried to allow endpoints to determine power on and enable. These signals are also useful in determining that cables are established correctly. There are two (2) signals for all connections that are referred to as INTERCONNECT-A. These signals are used to identify a source to destination as well as a destination to source connection. In addition, 64 bit wide connections (1600 MB) have two (2) additional signals that are referred to as INTERCONNECT-B. These are exactly the same as the INTERCONNECT-A signals but are carried on the second set of cables that make up the 64 bit connection. These signals are encoded into the lowest order four (4) bits of the hippiInterconnectStatus object as follows: 0 0 0 1 INTERCONNECT-A Source to Destination (1) 0 0 1 0 INTERCONNECT-A Destination to Source (2) 0 1 0 0 INTERCONNECT-B Source to Destination (4) 1 0 0 0 INTERCONNECT-B Destination to Source (8)')
mibBuilder.exportSymbols("RFC-HIPPI-MIB", hippiLastIField=hippiLastIField, hippiEntry=hippiEntry, hippiWordSize=hippiWordSize, hippiParityErrors=hippiParityErrors, hippiWordCountLow=hippiWordCountLow, hippiDestDisconnectCount=hippiDestDisconnectCount, hippiBurstCountHigh=hippiBurstCountHigh, hippiDestRejectCount=hippiDestRejectCount, hippiLastErrorType=hippiLastErrorType, hippiInterconnectStatus=hippiInterconnectStatus, hippiTable=hippiTable, hippiPacketCountHigh=hippiPacketCountHigh, hippiSourceDisconnectCount=hippiSourceDisconnectCount, hippiPacketCountLow=hippiPacketCountLow, hippiPortNumber=hippiPortNumber, nscHippi=nscHippi, hippiEndPointType=hippiEndPointType, hippiInputPortRejectCount=hippiInputPortRejectCount, hippiConnectState=hippiConnectState, hippiNumber=hippiNumber, hippiLastErrorIField=hippiLastErrorIField, hippiBurstCountLow=hippiBurstCountLow, hippiWordCountHigh=hippiWordCountHigh, hippiSourceRejectCount=hippiSourceRejectCount)
