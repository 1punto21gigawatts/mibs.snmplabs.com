#
# PySNMP MIB module ALTIGA-HARDWARE-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTIGA-HARDWARE-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alHardwareMibModule, = mibBuilder.importSymbols("ALTIGA-GLOBAL-REG", "alHardwareMibModule")
alStatsHardware, alHardwareGroup = mibBuilder.importSymbols("ALTIGA-MIB", "alStatsHardware", "alHardwareGroup")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, MibIdentifier, Bits, Integer32, Gauge32, TimeTicks, Unsigned32, Counter64, iso, ModuleIdentity, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "MibIdentifier", "Bits", "Integer32", "Gauge32", "TimeTicks", "Unsigned32", "Counter64", "iso", "ModuleIdentity", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
altigaHardwareStatsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3076, 1, 1, 27, 2))
altigaHardwareStatsMibModule.setRevisions(('2003-03-27 13:00', '2002-09-05 13:00', '2002-07-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: altigaHardwareStatsMibModule.setRevisionsDescriptions(('Added new emun to ConcentratorCard.', 'Added module compliance.', 'Updated with new header',))
if mibBuilder.loadTexts: altigaHardwareStatsMibModule.setLastUpdated('200303271300Z')
if mibBuilder.loadTexts: altigaHardwareStatsMibModule.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: altigaHardwareStatsMibModule.setContactInfo('Cisco Systems 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cvpn3000@cisco.com')
if mibBuilder.loadTexts: altigaHardwareStatsMibModule.setDescription('The Altiga Hardware Statistics MIB models counters and objects that are of management interest for the hardware. Acronyms The following acronyms are used in this document: CPU: Central Processing Unit MB: Megabyte MIB: Management Information Base PS: Power Supply RPM: Revolutions Per Minute SEP: Scalable Encryption Processor WAN: Wide Area Network ')
class ConcentratorCard(TextualConvention, Integer32):
    description = 'Concentrator Card Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("sep", 2), ("dualT1Wan", 3), ("sepE", 4))

class ConcentratorType(TextualConvention, Integer32):
    description = 'Concentrator Type indicates the chassis type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cxx", 1), ("c5", 2), ("c1", 3))

alStatsHardwareGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1))
alHardwareCpuVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 1), Gauge32()).setUnits('centivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuVoltage.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuVoltage.setDescription('The current CPU voltage in centivolts.')
alHardwareCpuVoltageAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuVoltageAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuVoltageAlarm.setDescription('The alarm status for CPU voltage. This alarm will fired when the CPU voltage is detected out of configured range.')
alHardwareCpuVoltageCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuVoltageCount.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuVoltageCount.setDescription('The number of alarm events for CPU voltage.')
alHardwareCpuVoltageTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuVoltageTime.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuVoltageTime.setDescription('The sysUptime at the time of the last change of alarm status for CPU voltage.')
alHardwarePs1Voltage3v = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 5), Gauge32()).setUnits('centivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Voltage3v.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Voltage3v.setDescription('The current 3V voltage of Power Supply 1 in centivolts.')
alHardwarePs1Voltage3vAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Voltage3vAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Voltage3vAlarm.setDescription('The alarm status for PS1 3v voltage. This alarm will fired when the 3v power supply 1 voltage is detected out of configured range.')
alHardwarePs1Voltage3vCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Voltage3vCount.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Voltage3vCount.setDescription('The number of alarm events for PS1 3v voltage.')
alHardwarePs1Voltage3vTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Voltage3vTime.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Voltage3vTime.setDescription('The sysUptime at the time of the last change of alarm status for PS1 3v voltage.')
alHardwarePs1Voltage5v = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 9), Gauge32()).setUnits('centivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Voltage5v.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Voltage5v.setDescription('The current 5V voltage of Power Supply 1 in centivolts.')
alHardwarePs1Voltage5vAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Voltage5vAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Voltage5vAlarm.setDescription('The alarm status for PS1 5v voltage. This alarm will fired when the 5v power supply 1 voltage is detected out of configured range.')
alHardwarePs1Voltage5vCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Voltage5vCount.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Voltage5vCount.setDescription('The number of alarm events for PS1 5v voltage.')
alHardwarePs1Voltage5vTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Voltage5vTime.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Voltage5vTime.setDescription('The sysUptime at the time of the last change of alarm status for PS1 5v voltage.')
alHardwarePs2Voltage3v = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 13), Gauge32()).setUnits('centivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Voltage3v.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Voltage3v.setDescription('The current 3V voltage of Power Supply 2 in centivolts.')
alHardwarePs2Voltage3vAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Voltage3vAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Voltage3vAlarm.setDescription('The alarm status for PS2 3v voltage. This alarm will fired when the 3v power supply 2 voltage is detected out of configured range.')
alHardwarePs2Voltage3vCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Voltage3vCount.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Voltage3vCount.setDescription('The number of alarm events for PS2 3v voltage.')
alHardwarePs2Voltage3vTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Voltage3vTime.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Voltage3vTime.setDescription('The sysUptime at the time of the last change of alarm status for PS2 3v voltage.')
alHardwarePs2Voltage5v = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 17), Gauge32()).setUnits('centivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Voltage5v.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Voltage5v.setDescription('The current 5V voltage of Power Supply 2 in centivolts.')
alHardwarePs2Voltage5vAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Voltage5vAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Voltage5vAlarm.setDescription('The alarm status for PS2 5v voltage. This alarm will fired when the 5v power supply 2 voltage is detected out of configured range.')
alHardwarePs2Voltage5vCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Voltage5vCount.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Voltage5vCount.setDescription('The number of alarm events for PS2 5v voltage.')
alHardwarePs2Voltage5vTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Voltage5vTime.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Voltage5vTime.setDescription('The sysUptime at the time of the last change of alarm status for PS2 5v voltage.')
alHardwareBoardVoltage3v = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 21), Gauge32()).setUnits('centivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareBoardVoltage3v.setStatus('current')
if mibBuilder.loadTexts: alHardwareBoardVoltage3v.setDescription('The current 3V voltage of the mainboard in centivolts.')
alHardwareBoardVoltage3vAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareBoardVoltage3vAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwareBoardVoltage3vAlarm.setDescription('The alarm status for the mainboard 3v voltage. This alarm will fired when the 3v mainboard voltage is detected out of configured range.')
alHardwareBoardVoltage3vCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareBoardVoltage3vCount.setStatus('current')
if mibBuilder.loadTexts: alHardwareBoardVoltage3vCount.setDescription('The number of alarm events for the mainboard 3v voltage.')
alHardwareBoardVoltage3vTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareBoardVoltage3vTime.setStatus('current')
if mibBuilder.loadTexts: alHardwareBoardVoltage3vTime.setDescription('The sysUptime at the time of the last change of alarm status for the mainboard 3v voltage.')
alHardwareBoardVoltage5v = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 25), Gauge32()).setUnits('centivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareBoardVoltage5v.setStatus('current')
if mibBuilder.loadTexts: alHardwareBoardVoltage5v.setDescription('The current 5V voltage of the mainboard in centivolts.')
alHardwareBoardVoltage5vAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareBoardVoltage5vAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwareBoardVoltage5vAlarm.setDescription('The alarm status for the mainboard 5v voltage. This alarm will fired when the 5v mainboard voltage is detected out of configured range.')
alHardwareBoardVoltage5vCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareBoardVoltage5vCount.setStatus('current')
if mibBuilder.loadTexts: alHardwareBoardVoltage5vCount.setDescription('The number of alarm events for the mainboard 5v voltage.')
alHardwareBoardVoltage5vTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareBoardVoltage5vTime.setStatus('current')
if mibBuilder.loadTexts: alHardwareBoardVoltage5vTime.setDescription('The sysUptime at the time of the last change of alarm status for the mainboard 5v voltage.')
alHardwareCpuTemp = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 120))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuTemp.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuTemp.setDescription('The current CPU temperature in degrees C.')
alHardwareCpuTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuTempAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuTempAlarm.setDescription('The alarm status for the CPU temperature. This alarm will fired when the CPU temperature is detected out of configured range.')
alHardwareCpuTempCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuTempCount.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuTempCount.setDescription('The number of alarm events for the CPU temperature.')
alHardwareCpuTempTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 32), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuTempTime.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuTempTime.setDescription('The sysUptime at the time of the last change of alarm status for the CPU temperature.')
alHardwareCageTemp = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 120))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCageTemp.setStatus('current')
if mibBuilder.loadTexts: alHardwareCageTemp.setDescription('The current cage temperature in degrees C.')
alHardwareCageTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCageTempAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwareCageTempAlarm.setDescription('The alarm status for the cage temperature. This alarm will fired when the cage temperature is detected out of configured range.')
alHardwareCageTempCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCageTempCount.setStatus('current')
if mibBuilder.loadTexts: alHardwareCageTempCount.setDescription('The number of alarm events for the cage temperature.')
alHardwareCageTempTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 36), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCageTempTime.setStatus('current')
if mibBuilder.loadTexts: alHardwareCageTempTime.setDescription('The sysUptime at the time of the last change of alarm status for the cage temperature.')
alHardwareFan1Rpm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 37), Gauge32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan1Rpm.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan1Rpm.setDescription('The current speed of fan 1 in RPM.')
alHardwareFan1RpmAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan1RpmAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan1RpmAlarm.setDescription('The alarm status for fan 1 RPM. This alarm will fired when fan 1 RPM is detected out of configured range.')
alHardwareFan1RpmCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan1RpmCount.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan1RpmCount.setDescription('The number of alarm events for fan 1 RPM.')
alHardwareFan1RpmTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 40), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan1RpmTime.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan1RpmTime.setDescription('The sysUptime at the time of the last change of alarm status for fan 1 RPM.')
alHardwareFan2Rpm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 41), Gauge32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan2Rpm.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan2Rpm.setDescription('The current speed of fan 2 in RPM.')
alHardwareFan2RpmAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan2RpmAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan2RpmAlarm.setDescription('The alarm status for fan 2 RPM. This alarm will fired when fan 2 RPM is detected out of configured range.')
alHardwareFan2RpmCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan2RpmCount.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan2RpmCount.setDescription('The number of alarm events for fan 2 RPM.')
alHardwareFan2RpmTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 44), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan2RpmTime.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan2RpmTime.setDescription('The sysUptime at the time of the last change of alarm status for fan 2 RPM.')
alHardwareFan3Rpm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 45), Gauge32()).setUnits('RPM').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan3Rpm.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan3Rpm.setDescription('The current speed of fan 3 in RPM.')
alHardwareFan3RpmAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan3RpmAlarm.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan3RpmAlarm.setDescription('The alarm status for fan 3 RPM. This alarm will fired when fan 3 RPM is detected out of configured range.')
alHardwareFan3RpmCount = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan3RpmCount.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan3RpmCount.setDescription('The number of alarm events for fan 3 RPM.')
alHardwareFan3RpmTime = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 48), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareFan3RpmTime.setStatus('current')
if mibBuilder.loadTexts: alHardwareFan3RpmTime.setDescription('The sysUptime at the time of the last change of alarm status for fan 3 RPM.')
alHardwarePs1Type = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs1Type.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs1Type.setDescription('The type of power supply for Power Supply slot 1.')
alHardwarePs2Type = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwarePs2Type.setStatus('current')
if mibBuilder.loadTexts: alHardwarePs2Type.setDescription('The type of power supply for Power Supply slot 2.')
alHardwareSlot1Card = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 51), ConcentratorCard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSlot1Card.setStatus('current')
if mibBuilder.loadTexts: alHardwareSlot1Card.setDescription('The type of card in slot 1.')
alHardwareSlot2Card = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 52), ConcentratorCard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSlot2Card.setStatus('current')
if mibBuilder.loadTexts: alHardwareSlot2Card.setDescription('The type of card in slot 2.')
alHardwareSlot3Card = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 53), ConcentratorCard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSlot3Card.setStatus('current')
if mibBuilder.loadTexts: alHardwareSlot3Card.setDescription('The type of card in slot 3.')
alHardwareSlot4Card = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 54), ConcentratorCard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSlot4Card.setStatus('current')
if mibBuilder.loadTexts: alHardwareSlot4Card.setDescription('The type of card in slot 4.')
alHardwareSlot1Operational = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSlot1Operational.setStatus('current')
if mibBuilder.loadTexts: alHardwareSlot1Operational.setDescription('The operational status of card in slot 1.')
alHardwareSlot2Operational = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSlot2Operational.setStatus('current')
if mibBuilder.loadTexts: alHardwareSlot2Operational.setDescription('The operational status of card in slot 2.')
alHardwareSlot3Operational = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 57), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSlot3Operational.setStatus('current')
if mibBuilder.loadTexts: alHardwareSlot3Operational.setDescription('The operational status of card in slot 3.')
alHardwareSlot4Operational = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 58), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSlot4Operational.setStatus('current')
if mibBuilder.loadTexts: alHardwareSlot4Operational.setDescription('The operational status of card in slot 4.')
alHardwareRamSize = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 59), Unsigned32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareRamSize.setStatus('current')
if mibBuilder.loadTexts: alHardwareRamSize.setDescription('The amount of memory, in MB on the concentrator.')
alHardwareChassis = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 60), ConcentratorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareChassis.setStatus('current')
if mibBuilder.loadTexts: alHardwareChassis.setDescription('The type of VPN Concentrator this is.')
alHardwareCpuVoltageNominal = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 61), Gauge32()).setUnits('centivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareCpuVoltageNominal.setStatus('current')
if mibBuilder.loadTexts: alHardwareCpuVoltageNominal.setDescription('The nominal CPU voltage in centivolts for the concentrator.')
alHardwareClientEthPrivSwitch = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 62), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareClientEthPrivSwitch.setStatus('current')
if mibBuilder.loadTexts: alHardwareClientEthPrivSwitch.setDescription('Whether or not the 3002 Hardware Client has an Ethernet Switch for the private interface.')
alHardwareSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 22, 1, 63), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alHardwareSerialNumber.setStatus('current')
if mibBuilder.loadTexts: alHardwareSerialNumber.setDescription('Unit serial number.')
altigaHardwareStatsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 27, 2, 1))
altigaHardwareStatsMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 27, 2, 1, 1))
altigaHardwareStatsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3076, 1, 1, 27, 2, 1, 1, 1)).setObjects(("ALTIGA-HARDWARE-STATS-MIB", "altigaHardwareStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaHardwareStatsMibCompliance = altigaHardwareStatsMibCompliance.setStatus('current')
if mibBuilder.loadTexts: altigaHardwareStatsMibCompliance.setDescription('The compliance statement for agents which implement the Altiga Hardware Statistics MIB.')
altigaHardwareStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3076, 2, 1, 1, 1, 22, 2)).setObjects(("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuVoltage"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuVoltageAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuVoltageCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuVoltageTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Voltage3v"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Voltage3vAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Voltage3vCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Voltage3vTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Voltage5v"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Voltage5vAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Voltage5vCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Voltage5vTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Voltage3v"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Voltage3vAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Voltage3vCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Voltage3vTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Voltage5v"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Voltage5vAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Voltage5vCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Voltage5vTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareBoardVoltage3v"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareBoardVoltage3vAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareBoardVoltage3vCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareBoardVoltage3vTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareBoardVoltage5v"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareBoardVoltage5vAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareBoardVoltage5vCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareBoardVoltage5vTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuTemp"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuTempAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuTempCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuTempTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCageTemp"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCageTempAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCageTempCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCageTempTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan1Rpm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan1RpmAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan1RpmCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan1RpmTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan2Rpm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan2RpmAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan2RpmCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan2RpmTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan3Rpm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan3RpmAlarm"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan3RpmCount"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareFan3RpmTime"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs1Type"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwarePs2Type"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSlot1Card"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSlot2Card"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSlot3Card"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSlot4Card"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSlot1Operational"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSlot2Operational"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSlot3Operational"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSlot4Operational"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareRamSize"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareChassis"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareCpuVoltageNominal"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareClientEthPrivSwitch"), ("ALTIGA-HARDWARE-STATS-MIB", "alHardwareSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaHardwareStatsGroup = altigaHardwareStatsGroup.setStatus('current')
if mibBuilder.loadTexts: altigaHardwareStatsGroup.setDescription('The objects for Hardware statistics.')
mibBuilder.exportSymbols("ALTIGA-HARDWARE-STATS-MIB", alHardwareBoardVoltage3vCount=alHardwareBoardVoltage3vCount, alHardwareFan2RpmTime=alHardwareFan2RpmTime, altigaHardwareStatsMibModule=altigaHardwareStatsMibModule, alHardwarePs2Voltage5vCount=alHardwarePs2Voltage5vCount, alHardwareSlot2Card=alHardwareSlot2Card, alHardwareFan3Rpm=alHardwareFan3Rpm, alHardwarePs1Voltage3vCount=alHardwarePs1Voltage3vCount, alHardwareFan2RpmAlarm=alHardwareFan2RpmAlarm, altigaHardwareStatsMibCompliance=altigaHardwareStatsMibCompliance, alHardwareCpuVoltageCount=alHardwareCpuVoltageCount, alHardwareSlot2Operational=alHardwareSlot2Operational, alHardwareFan3RpmAlarm=alHardwareFan3RpmAlarm, alHardwareBoardVoltage3v=alHardwareBoardVoltage3v, alHardwareCageTemp=alHardwareCageTemp, altigaHardwareStatsMibConformance=altigaHardwareStatsMibConformance, alHardwarePs2Voltage5v=alHardwarePs2Voltage5v, alHardwarePs1Voltage3vAlarm=alHardwarePs1Voltage3vAlarm, alHardwareBoardVoltage5v=alHardwareBoardVoltage5v, alHardwareBoardVoltage5vAlarm=alHardwareBoardVoltage5vAlarm, alStatsHardwareGlobal=alStatsHardwareGlobal, alHardwarePs1Voltage5vTime=alHardwarePs1Voltage5vTime, alHardwareCageTempCount=alHardwareCageTempCount, alHardwarePs2Voltage3vTime=alHardwarePs2Voltage3vTime, alHardwareCageTempAlarm=alHardwareCageTempAlarm, alHardwareFan1Rpm=alHardwareFan1Rpm, alHardwareFan1RpmTime=alHardwareFan1RpmTime, alHardwarePs2Type=alHardwarePs2Type, alHardwareSlot4Card=alHardwareSlot4Card, alHardwareCpuVoltageNominal=alHardwareCpuVoltageNominal, alHardwarePs1Voltage5vAlarm=alHardwarePs1Voltage5vAlarm, alHardwareFan3RpmCount=alHardwareFan3RpmCount, alHardwareSlot4Operational=alHardwareSlot4Operational, alHardwareCpuTemp=alHardwareCpuTemp, alHardwareCpuVoltage=alHardwareCpuVoltage, alHardwareSlot1Operational=alHardwareSlot1Operational, altigaHardwareStatsMibCompliances=altigaHardwareStatsMibCompliances, alHardwarePs1Type=alHardwarePs1Type, ConcentratorType=ConcentratorType, alHardwareFan1RpmCount=alHardwareFan1RpmCount, altigaHardwareStatsGroup=altigaHardwareStatsGroup, alHardwareCpuVoltageTime=alHardwareCpuVoltageTime, ConcentratorCard=ConcentratorCard, alHardwarePs2Voltage3vCount=alHardwarePs2Voltage3vCount, alHardwareCpuTempAlarm=alHardwareCpuTempAlarm, alHardwarePs1Voltage3v=alHardwarePs1Voltage3v, alHardwarePs2Voltage3v=alHardwarePs2Voltage3v, alHardwareBoardVoltage5vCount=alHardwareBoardVoltage5vCount, alHardwareFan1RpmAlarm=alHardwareFan1RpmAlarm, alHardwarePs1Voltage5vCount=alHardwarePs1Voltage5vCount, alHardwareBoardVoltage3vTime=alHardwareBoardVoltage3vTime, alHardwarePs1Voltage3vTime=alHardwarePs1Voltage3vTime, alHardwareFan3RpmTime=alHardwareFan3RpmTime, alHardwareBoardVoltage5vTime=alHardwareBoardVoltage5vTime, alHardwareSlot3Operational=alHardwareSlot3Operational, alHardwareCpuTempTime=alHardwareCpuTempTime, alHardwareRamSize=alHardwareRamSize, alHardwarePs2Voltage5vTime=alHardwarePs2Voltage5vTime, alHardwareBoardVoltage3vAlarm=alHardwareBoardVoltage3vAlarm, alHardwareCageTempTime=alHardwareCageTempTime, alHardwareSerialNumber=alHardwareSerialNumber, alHardwarePs2Voltage3vAlarm=alHardwarePs2Voltage3vAlarm, alHardwareCpuVoltageAlarm=alHardwareCpuVoltageAlarm, alHardwareClientEthPrivSwitch=alHardwareClientEthPrivSwitch, PYSNMP_MODULE_ID=altigaHardwareStatsMibModule, alHardwareSlot1Card=alHardwareSlot1Card, alHardwarePs1Voltage5v=alHardwarePs1Voltage5v, alHardwarePs2Voltage5vAlarm=alHardwarePs2Voltage5vAlarm, alHardwareFan2Rpm=alHardwareFan2Rpm, alHardwareChassis=alHardwareChassis, alHardwareSlot3Card=alHardwareSlot3Card, alHardwareCpuTempCount=alHardwareCpuTempCount, alHardwareFan2RpmCount=alHardwareFan2RpmCount)
