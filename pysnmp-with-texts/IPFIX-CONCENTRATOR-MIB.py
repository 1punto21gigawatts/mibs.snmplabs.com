#
# PySNMP MIB module IPFIX-CONCENTRATOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPFIX-CONCENTRATOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Unsigned32, Counter32, ObjectIdentity, Integer32, IpAddress, Gauge32, mib_2, TimeTicks, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Unsigned32", "Counter32", "ObjectIdentity", "Integer32", "IpAddress", "Gauge32", "mib-2", "TimeTicks", "MibIdentifier", "iso")
TruthValue, RowStatus, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "DateAndTime", "TextualConvention")
ipfixConcentratorMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 5555))
ipfixConcentratorMIB.setRevisions(('2006-02-16 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ipfixConcentratorMIB.setRevisionsDescriptions(('Initial version, published as RFC yyyy.',))
if mibBuilder.loadTexts: ipfixConcentratorMIB.setLastUpdated('200602161600Z')
if mibBuilder.loadTexts: ipfixConcentratorMIB.setOrganization('IETF IPFIX Working Group')
if mibBuilder.loadTexts: ipfixConcentratorMIB.setContactInfo('Editor: Atsushi Kobayashi NTT Information Sharing Platform Laboratories 3-9-11 Midori-cho Musashino-shi 180-8585 Japan Phone: +81-422-59-3978> Email: akoba@nttv6.net')
if mibBuilder.loadTexts: ipfixConcentratorMIB.setDescription('The IPFIX concentrator MIB defines managed objects that are used by each process in IPFIX concentrator. These objects provide information that are instruction rules and supporting parameters of each function. These objects can be configured. By using these objects, the selection process decides which flow records are selected. The storing process decides which fields are stored and the aggregation process decides how to aggregate these flow records. These objects support information to enable these functions. Copyright (C) The Internet Society (2005). This version of this MIB module is part of RFC yyyy; see the RFC itself for full legal notices.')
class ConcFieldModifier(TextualConvention, Integer32):
    description = 'This field modifier is used by the aggregation process and storing process. This is used as in the following method. method: keep(1) - the field that is specified by this value is distinguished by each process. discard(2) - the field that is specified by this value is discarded by each process.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("keep", 1), ("discard", 2))

concentratorObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 1))
concentratorConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 2))
concExtraction = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 1, 1))
concExtractIsAvail = MibScalar((1, 3, 6, 1, 2, 1, 5555, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: concExtractIsAvail.setStatus('current')
if mibBuilder.loadTexts: concExtractIsAvail.setDescription('This object indicates the availability of the function for extracting flow records from storage database.')
concExtractTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2), )
if mibBuilder.loadTexts: concExtractTable.setStatus('current')
if mibBuilder.loadTexts: concExtractTable.setDescription('This table lists parameters that are used by extracting flow records from the storage database.')
concExtractEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concExtractIndex"))
if mibBuilder.loadTexts: concExtractEntry.setStatus('current')
if mibBuilder.loadTexts: concExtractEntry.setDescription('Defines an entry in the concExtractTable')
concExtractIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concExtractIndex.setStatus('current')
if mibBuilder.loadTexts: concExtractIndex.setDescription("Locally arbitrary, but unique identifier of an entry in concExtractTable. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization. It is used in entries of the concEtrListTable as reference to concExtractTable table and its associated parameters.")
concExtractEtrIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concExtractEtrIpAddrType.setStatus('current')
if mibBuilder.loadTexts: concExtractEtrIpAddrType.setDescription('The IP address type of the exporter. The value for IPv4 is ipv4(1). The value for IPv6 is ipv6(2).')
concExtractEtrIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concExtractEtrIpAddr.setStatus('current')
if mibBuilder.loadTexts: concExtractEtrIpAddr.setDescription('The IP address is the exporter that is stored in the database. The collection process extracts flow records that are exported from this exporter address.')
concExtractStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concExtractStartTime.setStatus('current')
if mibBuilder.loadTexts: concExtractStartTime.setDescription('This hour is used by extracting flow records. The collection process extracts flow records that are created after this time. Then, these flow-records that belong in the period of time between concExtractStartTime and concExtractEndTime are extracted.')
concExtractEndTime = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concExtractEndTime.setStatus('current')
if mibBuilder.loadTexts: concExtractEndTime.setDescription('This hour is used by extracting flow records. The collection process does not extract flow records that are created after this hour.')
concExtractProcessId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concExtractProcessId.setStatus('current')
if mibBuilder.loadTexts: concExtractProcessId.setDescription('The process id is used by the IPFIX collectng process.')
concExtractRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concExtractRowStatus.setStatus('current')
if mibBuilder.loadTexts: concExtractRowStatus.setDescription('The status of this row of the table.')
concSelection = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 1, 2))
concSelectIsAvail = MibScalar((1, 3, 6, 1, 2, 1, 5555, 1, 2, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: concSelectIsAvail.setStatus('current')
if mibBuilder.loadTexts: concSelectIsAvail.setDescription('This object indicates the availability of the selection function.')
concSelectMatchParamSetTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 2, 2), )
if mibBuilder.loadTexts: concSelectMatchParamSetTable.setStatus('current')
if mibBuilder.loadTexts: concSelectMatchParamSetTable.setDescription('This table lists configurations of match filtering. The match filtering is based on IPFIX/PSAMP Information Elements. The parameter set contains the Information Element Id, a value or value range, and a mask.')
concSelectMatchParamSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 2, 2, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concSelectMatchIndex"), (0, "IPFIX-CONCENTRATOR-MIB", "concSelectMatchInfoEltId"))
if mibBuilder.loadTexts: concSelectMatchParamSetEntry.setStatus('current')
if mibBuilder.loadTexts: concSelectMatchParamSetEntry.setDescription('Defines an entry in the concSelectMatchParamSetTable')
concSelectMatchIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concSelectMatchIndex.setStatus('current')
if mibBuilder.loadTexts: concSelectMatchIndex.setDescription("Locally arbitrary, but unique identifier of an entry in this parameter set table. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization. It is used in entries of the concBaseAssocTable reference to this method and its associated parameter set.")
concSelectMatchInfoEltId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concSelectMatchInfoEltId.setStatus('current')
if mibBuilder.loadTexts: concSelectMatchInfoEltId.setDescription('The id of the information element that is encoded as InfoElementId defined in the IPFIX/PSAMP Information Models.')
concSelectMatchStartValue = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 2, 2, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concSelectMatchStartValue.setStatus('current')
if mibBuilder.loadTexts: concSelectMatchStartValue.setDescription('This indicates the value of the information element or the start of the value range. If concSelectMatchEndValue is defined, then the range between the start value and the end value is a value range. If concSelectMatchMask is defined, then concSelectMatchEndValue is ignored. In this case, the flow record is selected if the masked value exactly matches the start value, concSelectMatchStartValue.')
concSelectMatchEndValue = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 2, 2, 1, 4), OctetString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concSelectMatchEndValue.setStatus('current')
if mibBuilder.loadTexts: concSelectMatchEndValue.setDescription("The final value of a value range. It should be equal to it's default value (''H) if a single value should be encoded. It is ignored if concSelectFilterMatchMask is defined.")
concSelectMatchMask = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 2, 2, 1, 5), OctetString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concSelectMatchMask.setStatus('current')
if mibBuilder.loadTexts: concSelectMatchMask.setDescription('The selected value of the given information element is masked with this value. The resulting value is compared to concSelectMatchStartValue and the flow record is selected if they match. If concSelectFilterMatchEndValue and concnetSelectFilterMatchMask are defined at the same time, concSelectFilterMatchEndValue is ignored. Note that a mask is not useful for all information elements and, if it is specified, the mask has the same data type and encoding as the information element referenced by concSelectMatchInfoEltId.')
concSelectMatchRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concSelectMatchRowStatus.setStatus('current')
if mibBuilder.loadTexts: concSelectMatchRowStatus.setDescription('The status of this row of the table.')
concAggregation = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 1, 3))
concAggrIsAvail = MibScalar((1, 3, 6, 1, 2, 1, 5555, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: concAggrIsAvail.setStatus('current')
if mibBuilder.loadTexts: concAggrIsAvail.setDescription('This object indicates the availability of the aggregating flow records.')
concAggrParamSetTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 3, 2), )
if mibBuilder.loadTexts: concAggrParamSetTable.setStatus('current')
if mibBuilder.loadTexts: concAggrParamSetTable.setDescription('This table lists parameters that are used for aggregating flow records.')
concAggrParamSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 3, 2, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concAggrIndex"))
if mibBuilder.loadTexts: concAggrParamSetEntry.setStatus('current')
if mibBuilder.loadTexts: concAggrParamSetEntry.setDescription('Defines an entry in the concAggrParamSetTable')
concAggrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concAggrIndex.setStatus('current')
if mibBuilder.loadTexts: concAggrIndex.setDescription("Locally arbitrary, but unique identifier of an entry in concAggrParamSetTable. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization. It is used in entries of the concBaseAssocTable as reference to the concAggrParamSetTable table and its associated parameters.")
concAggrTimeInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: concAggrTimeInterval.setStatus('current')
if mibBuilder.loadTexts: concAggrTimeInterval.setDescription('This object specifies a time interval that is used by the aggregation process. This process gathers flow records within this time interval and then aggregates flow records that have a common property.')
concAggrParamRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concAggrParamRowStatus.setStatus('current')
if mibBuilder.loadTexts: concAggrParamRowStatus.setDescription('The status of this row of the table.')
concAggrFieldSetTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 3, 3), )
if mibBuilder.loadTexts: concAggrFieldSetTable.setStatus('current')
if mibBuilder.loadTexts: concAggrFieldSetTable.setDescription('This table lists field modifiers that are used for aggregating flow records.')
concAggrFieldSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 3, 3, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concAggrIndex"), (0, "IPFIX-CONCENTRATOR-MIB", "concAggrFieldSetId"))
if mibBuilder.loadTexts: concAggrFieldSetEntry.setStatus('current')
if mibBuilder.loadTexts: concAggrFieldSetEntry.setDescription('Defines an entry in the concAggrParamSetTable')
concAggrFieldSetId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concAggrFieldSetId.setStatus('current')
if mibBuilder.loadTexts: concAggrFieldSetId.setDescription('This object specifies the id of the information element. These are encoded as the InfoEltId that is defined in IPFIX/PSAMP Information Models.')
concAggrFieldModifier = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 3, 3, 1, 3), ConcFieldModifier().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concAggrFieldModifier.setStatus('current')
if mibBuilder.loadTexts: concAggrFieldModifier.setDescription('This field modifier is used by the aggregation process. If the keep modifier of this object is specified, the information element of concAggrFieldSetId is distinguished in the aggregated flow record. In addition, if the information element of concAggrFieldSetId is the flow key, this field becomes the key of aggregated flow. If it is not the flow key, this field is merged into a single counter. If the IP address field and prefix field are specified, a significant bit of the IP address field is reduced by the prefix. That means the keep modifier of the mask value of this IP address is specified.')
concAggrFieldRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 3, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concAggrFieldRowStatus.setStatus('current')
if mibBuilder.loadTexts: concAggrFieldRowStatus.setDescription('The status of this row of the table.')
concAggrAddFieldSetTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 3, 4), )
if mibBuilder.loadTexts: concAggrAddFieldSetTable.setStatus('current')
if mibBuilder.loadTexts: concAggrAddFieldSetTable.setDescription('This table lists the information element id that is added to the aggregated flow.')
concAggrAddFieldSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 3, 4, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concAggrIndex"), (0, "IPFIX-CONCENTRATOR-MIB", "concAggrAddFieldSetId"))
if mibBuilder.loadTexts: concAggrAddFieldSetEntry.setStatus('current')
if mibBuilder.loadTexts: concAggrAddFieldSetEntry.setDescription('Defines an entry in the concAggrAddFieldSetTable')
concAggrAddFieldSetId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concAggrAddFieldSetId.setStatus('current')
if mibBuilder.loadTexts: concAggrAddFieldSetId.setDescription('This object specifies the Id of the information element. This object is encoded as the InfoEltId that is defined in IPFIX/PSAMP Information Models. This information element complements information that is discarded during the aggregation process. For example, these information elements are the total number of flows in aggregated flow and an average number of packets per-flow in aggregated flow. If this object is specified as an information element, the aggregation process calculates and adds to create this field and this information element is included in the aggregated flow record.')
concAggrAddFieldRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concAggrAddFieldRowStatus.setStatus('current')
if mibBuilder.loadTexts: concAggrAddFieldRowStatus.setDescription('The status of this row of the table.')
concReport = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 1, 4))
concReportCtrTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1), )
if mibBuilder.loadTexts: concReportCtrTable.setStatus('current')
if mibBuilder.loadTexts: concReportCtrTable.setDescription('This table lists collectors to which IPFIX concentrator selected flow records are exported.')
concReportCtrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concReportCtrIndex"))
if mibBuilder.loadTexts: concReportCtrEntry.setStatus('current')
if mibBuilder.loadTexts: concReportCtrEntry.setDescription('Defines an entry in the concReportCtrTable.')
concReportCtrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concReportCtrIndex.setStatus('current')
if mibBuilder.loadTexts: concReportCtrIndex.setDescription("Locally arbitrary, but unique identifier of an entry in this collector table. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization. It is used in entries of concReportCtrGrTable as reference to this collector and its associated parameters.")
concReportCtrDstIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concReportCtrDstIpAddrType.setStatus('current')
if mibBuilder.loadTexts: concReportCtrDstIpAddrType.setDescription('The IP address type of the collector. The value for IPv4 is ipv4(1). The value for IPv6 is ipv6(2).')
concReportCtrDstIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concReportCtrDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: concReportCtrDstIpAddr.setDescription('The IP address of the collector.')
concReportCtrDstProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(132)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concReportCtrDstProtocol.setStatus('current')
if mibBuilder.loadTexts: concReportCtrDstProtocol.setDescription('Transport protocol used for exporting sampled packets to the collector. The recommended protocols are TCP (6), UDP (17), and SCTP (132). The default is SCTP.')
concReportCtrDstPort = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4739)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concReportCtrDstPort.setStatus('current')
if mibBuilder.loadTexts: concReportCtrDstPort.setDescription('Transport protocol port number of the collector.')
concReportCtrReportsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concReportCtrReportsSent.setStatus('current')
if mibBuilder.loadTexts: concReportCtrReportsSent.setDescription('Number of packet reports sent to the collector.')
concReportCtrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concReportCtrRowStatus.setStatus('current')
if mibBuilder.loadTexts: concReportCtrRowStatus.setDescription('Status of this row of the table.')
concReportCtrGrTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 4, 2), )
if mibBuilder.loadTexts: concReportCtrGrTable.setStatus('current')
if mibBuilder.loadTexts: concReportCtrGrTable.setDescription('This table lists groups of collectors to which IPFIX concentrator selected flow records are exported simultaneously. If IPFIX concentrator selected flow records are exported to only one collector, the group consists of exactly one collector.')
concReportCtrGrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 4, 2, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concReportCtrGrIndex"), (0, "IPFIX-CONCENTRATOR-MIB", "concReportCtrIndex"))
if mibBuilder.loadTexts: concReportCtrGrEntry.setStatus('current')
if mibBuilder.loadTexts: concReportCtrGrEntry.setDescription('Defines an entry in the concReportCtrGrTable.')
concReportCtrGrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concReportCtrGrIndex.setStatus('current')
if mibBuilder.loadTexts: concReportCtrGrIndex.setDescription("Locally arbitrary, but unique identifier of an entry in this parameter set table. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization. It is used in entries of the concBaseAssocTable as reference to this collector group and its associated parameters.")
concReportCtrGrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concReportCtrGrRowStatus.setStatus('current')
if mibBuilder.loadTexts: concReportCtrGrRowStatus.setDescription('The status of this row of the table.')
concReportTemplateRcdTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 4, 3), )
if mibBuilder.loadTexts: concReportTemplateRcdTable.setStatus('current')
if mibBuilder.loadTexts: concReportTemplateRcdTable.setDescription('This table lists templates used by the exporter.')
concReportTemplateRcdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 4, 3, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concReportTemplateRcdId"), (0, "IPFIX-CONCENTRATOR-MIB", "concReportTemplateRcdIndex"))
if mibBuilder.loadTexts: concReportTemplateRcdEntry.setStatus('current')
if mibBuilder.loadTexts: concReportTemplateRcdEntry.setDescription('Defines an entry in the concReportTemplateTable.')
concReportTemplateRcdId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concReportTemplateRcdId.setStatus('current')
if mibBuilder.loadTexts: concReportTemplateRcdId.setDescription("Locally arbitrary, but unique identifier of an entry in this template record table. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization. It is used in entries of the concBaseAssocTable as reference to this template record and its associated parameters. It groups the information element ids in a template record.")
concReportTemplateRcdIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concReportTemplateRcdIndex.setStatus('current')
if mibBuilder.loadTexts: concReportTemplateRcdIndex.setDescription("Locally arbitrary, but unique identifier of a information element id in the template record identified by concReportTemplateRcdId. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization. The concReportTemplateRcdIndex specifies the order in which the information element ids are used in the template record.")
concReportTemplateRcdInfoEltId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concReportTemplateRcdInfoEltId.setStatus('current')
if mibBuilder.loadTexts: concReportTemplateRcdInfoEltId.setDescription('The Information Elt Id at position concReportTemplateRcdIndex in the template concReportTemplateRcdId. This implicitly gives the data type and state values that are exported.')
concReportTemplateRcdRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concReportTemplateRcdRowStatus.setStatus('current')
if mibBuilder.loadTexts: concReportTemplateRcdRowStatus.setDescription('The status of this row of the table.')
concStoring = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 1, 5))
concStoringIsAvail = MibScalar((1, 3, 6, 1, 2, 1, 5555, 1, 5, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: concStoringIsAvail.setStatus('current')
if mibBuilder.loadTexts: concStoringIsAvail.setDescription('This object indicates the availability of the storing function.')
concStoringParamSetTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 5, 2), )
if mibBuilder.loadTexts: concStoringParamSetTable.setStatus('current')
if mibBuilder.loadTexts: concStoringParamSetTable.setDescription('This table lists the field modifiers that are used for storing IPFIX header information.')
concStoringParamSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 5, 2, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concStoringIndex"))
if mibBuilder.loadTexts: concStoringParamSetEntry.setStatus('current')
if mibBuilder.loadTexts: concStoringParamSetEntry.setDescription('Defines an entry in the concStoringParamSetTable')
concStoringIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concStoringIndex.setStatus('current')
if mibBuilder.loadTexts: concStoringIndex.setDescription("Locally arbitrary, but unique identifier of an entry in this parameter set table. The value is expected to remain constant from one re-initialization of the entity's network management system to the next re-initialization. It is used in entries as the concBaseAssocTable reference to this method and its associated parameter set.")
concStoringSourceidModifier = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 5, 2, 1, 2), ConcFieldModifier().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concStoringSourceidModifier.setStatus('current')
if mibBuilder.loadTexts: concStoringSourceidModifier.setDescription('This field modifier is used by the storing process. If the keep modifier of this object is specified, the source Id of IPFIX header information is stored in the storage database. If the discard modifier of this object is specified, it is not stored.')
concStoringExportTimeModifier = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 5, 2, 1, 3), ConcFieldModifier().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concStoringExportTimeModifier.setStatus('current')
if mibBuilder.loadTexts: concStoringExportTimeModifier.setDescription('This field modifier is used by the storing process. If the keep modifier of this object is specified, the Export time of IPFIX header information is stored in the storage database. If the discard modifier of this object is specified, it is not stored.')
concStoringProcessId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concStoringProcessId.setStatus('current')
if mibBuilder.loadTexts: concStoringProcessId.setDescription('The process id is used by this storing process.')
concStoringParamRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 5, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concStoringParamRowStatus.setStatus('current')
if mibBuilder.loadTexts: concStoringParamRowStatus.setDescription('The status of this row of the table.')
concStoringFieldSetTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 5, 3), )
if mibBuilder.loadTexts: concStoringFieldSetTable.setStatus('current')
if mibBuilder.loadTexts: concStoringFieldSetTable.setDescription('This table lists field modifiers that are used for storing flow records.')
concStoringFieldSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 5, 3, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concStoringIndex"), (0, "IPFIX-CONCENTRATOR-MIB", "concStoringInfoEltId"))
if mibBuilder.loadTexts: concStoringFieldSetEntry.setStatus('current')
if mibBuilder.loadTexts: concStoringFieldSetEntry.setDescription('Defines an entry in concStoringFieldSetTable')
concStoringInfoEltId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concStoringInfoEltId.setStatus('current')
if mibBuilder.loadTexts: concStoringInfoEltId.setDescription('This object specifies the id of the information element. These are encoded as the InfoEltId that is defined in the IPFIX/PSAMP Information Models.')
concStoringFieldModifier = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 5, 3, 1, 3), ConcFieldModifier().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concStoringFieldModifier.setStatus('current')
if mibBuilder.loadTexts: concStoringFieldModifier.setDescription('This field modifier is used by the storing process. If the keep modifier of this object is specified, the information element of concStoringInfoEltId is stored in the storage database. If the discard modifier of this object is specified, the information element of concStoringInfoEltId is discarded.')
concStoringRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concStoringRowStatus.setStatus('current')
if mibBuilder.loadTexts: concStoringRowStatus.setDescription('The status of this row of the table.')
concBaseAssociations = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 1, 6))
concBaseAssocTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1), )
if mibBuilder.loadTexts: concBaseAssocTable.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocTable.setDescription('This table lists all Base Associations at the managed node.')
concBaseAssocEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concBaseAssocIndex"))
if mibBuilder.loadTexts: concBaseAssocEntry.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocEntry.setDescription('Defines an entry in the concBaseAssocTable')
concBaseAssocIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concBaseAssocIndex.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocIndex.setDescription("Locally arbitrary, but unique identifier of an entry in this parameter set table. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization.")
concBaseAssocSelectMatchIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concBaseAssocSelectMatchIndex.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocSelectMatchIndex.setDescription('This object is the Index of the concSelectMatchIndex object. It links the instance when the identified selection match parameter table is applied to the method of selection that uses the input flow records.')
concBaseAssocAggrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concBaseAssocAggrIndex.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocAggrIndex.setDescription('This object is the Index of the concAggrIndex object. It links the instance when the identified aggregation parameter set table including the associated table is applied to the method of aggregation of selected flow records.')
concBaseAssocReportCtrGrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concBaseAssocReportCtrGrIndex.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocReportCtrGrIndex.setDescription('This object is the index of the collector group to which packet reports are sent.')
concBaseAssocReportTemplateRcdId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concBaseAssocReportTemplateRcdId.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocReportTemplateRcdId.setDescription('This object is the Id of a template in the template table. It links the instance, concEtrListTable, and template together. The identified template is applied to the stream of selected/aggregated flow records.')
concBaseAssocStoringIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concBaseAssocStoringIndex.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocStoringIndex.setDescription('This object is the index of the concStoringIndex object. It links the instance when the identified storing parameter is applied to the method of storing of input flow records. In addition, if the index of the concBaseAssocExtractIndex is specified, this object SHOULD not be specified.')
concBaseAssocMeteringProcessId = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concBaseAssocMeteringProcessId.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocMeteringProcessId.setDescription('The process Id of the metering process is used by this Base Association. The metering process means the chain of selection process and aggregation process, and reporting process.')
concBaseAssocExtractIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concBaseAssocExtractIndex.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocExtractIndex.setDescription('This object is the Index of the concExtractIndex object. When it is specified, it links the parameters that are used by extracting flow records from the storage database. In addition, if the index of the concBaseAssocStoringIndex or concExporterListIndex is specified, this object SHOULD not be specified.')
concBaseAssocRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concBaseAssocRowStatus.setStatus('current')
if mibBuilder.loadTexts: concBaseAssocRowStatus.setDescription('The status of this row of the table.')
concExporterListTable = MibTable((1, 3, 6, 1, 2, 1, 5555, 1, 6, 2), )
if mibBuilder.loadTexts: concExporterListTable.setStatus('current')
if mibBuilder.loadTexts: concExporterListTable.setDescription('This table lists the concCollectExporterIndexes in the Base Association.')
concExporterListEntry = MibTableRow((1, 3, 6, 1, 2, 1, 5555, 1, 6, 2, 1), ).setIndexNames((0, "IPFIX-CONCENTRATOR-MIB", "concBaseAssocIndex"), (0, "IPFIX-CONCENTRATOR-MIB", "concExporterListIndex"))
if mibBuilder.loadTexts: concExporterListEntry.setStatus('current')
if mibBuilder.loadTexts: concExporterListEntry.setDescription('Defines an entry in concExporterListTable')
concExporterListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: concExporterListIndex.setStatus('current')
if mibBuilder.loadTexts: concExporterListIndex.setDescription("Locally arbitrary, but unique identifier of an entry in this parameter set table. The value is expected to remain constant from a re-initialization of the entity's network management system to the next re-initialization.")
concExporterListMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concExporterListMethod.setStatus('current')
if mibBuilder.loadTexts: concExporterListMethod.setDescription('The object is represented by a pointer (OID) of the collectExporterIndex in IPFIX collector MIB objects. If the Base Association deals with only flow records from one exporter, the table will hold exactly one entry per Base Association. The concExporterListIndex does not mean the position in the exporter list.')
concExporterListRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 5555, 1, 6, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: concExporterListRowStatus.setStatus('current')
if mibBuilder.loadTexts: concExporterListRowStatus.setDescription('The status of this row of the table.')
concCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 2, 1))
concGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 5555, 2, 2))
concCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 5555, 2, 1, 1)).setObjects(("IPFIX-CONCENTRATOR-MIB", "concGroupMetering"), ("IPFIX-CONCENTRATOR-MIB", "concGroupExtracting"), ("IPFIX-CONCENTRATOR-MIB", "concGroupStoring"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    concCompliance = concCompliance.setStatus('current')
if mibBuilder.loadTexts: concCompliance.setDescription('An implementation that complies to this module must implement the objects defined in the mandatory groups concGroupMetering. The imeplementation of all other objects depends on the imeplementation of the corresponding functionality in the equipment.')
concGroupMetering = ObjectGroup((1, 3, 6, 1, 2, 1, 5555, 2, 2, 1)).setObjects(("IPFIX-CONCENTRATOR-MIB", "concAggrTimeInterval"), ("IPFIX-CONCENTRATOR-MIB", "concAggrParamRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concAggrFieldModifier"), ("IPFIX-CONCENTRATOR-MIB", "concAggrFieldRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concAggrAddFieldRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concAggrFieldSetId"), ("IPFIX-CONCENTRATOR-MIB", "concAggrIsAvail"), ("IPFIX-CONCENTRATOR-MIB", "concAggrAddFieldSetId"), ("IPFIX-CONCENTRATOR-MIB", "concSelectMatchInfoEltId"), ("IPFIX-CONCENTRATOR-MIB", "concSelectMatchStartValue"), ("IPFIX-CONCENTRATOR-MIB", "concSelectMatchEndValue"), ("IPFIX-CONCENTRATOR-MIB", "concSelectMatchMask"), ("IPFIX-CONCENTRATOR-MIB", "concSelectMatchRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concSelectIsAvail"), ("IPFIX-CONCENTRATOR-MIB", "concReportCtrDstIpAddrType"), ("IPFIX-CONCENTRATOR-MIB", "concReportCtrDstIpAddr"), ("IPFIX-CONCENTRATOR-MIB", "concReportCtrDstProtocol"), ("IPFIX-CONCENTRATOR-MIB", "concReportCtrDstPort"), ("IPFIX-CONCENTRATOR-MIB", "concReportCtrReportsSent"), ("IPFIX-CONCENTRATOR-MIB", "concReportCtrRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concReportCtrGrRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concReportTemplateRcdInfoEltId"), ("IPFIX-CONCENTRATOR-MIB", "concReportTemplateRcdRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concBaseAssocReportCtrGrIndex"), ("IPFIX-CONCENTRATOR-MIB", "concBaseAssocReportTemplateRcdId"), ("IPFIX-CONCENTRATOR-MIB", "concBaseAssocSelectMatchIndex"), ("IPFIX-CONCENTRATOR-MIB", "concBaseAssocAggrIndex"), ("IPFIX-CONCENTRATOR-MIB", "concBaseAssocMeteringProcessId"), ("IPFIX-CONCENTRATOR-MIB", "concBaseAssocRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concExporterListMethod"), ("IPFIX-CONCENTRATOR-MIB", "concExporterListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    concGroupMetering = concGroupMetering.setStatus('current')
if mibBuilder.loadTexts: concGroupMetering.setDescription('All objects that are basic for the aggregation function and the selection function and reporting function.')
concGroupExtracting = ObjectGroup((1, 3, 6, 1, 2, 1, 5555, 2, 2, 2)).setObjects(("IPFIX-CONCENTRATOR-MIB", "concExtractIsAvail"), ("IPFIX-CONCENTRATOR-MIB", "concExtractEtrIpAddrType"), ("IPFIX-CONCENTRATOR-MIB", "concExtractEtrIpAddr"), ("IPFIX-CONCENTRATOR-MIB", "concExtractStartTime"), ("IPFIX-CONCENTRATOR-MIB", "concExtractEndTime"), ("IPFIX-CONCENTRATOR-MIB", "concExtractProcessId"), ("IPFIX-CONCENTRATOR-MIB", "concExtractRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concBaseAssocExtractIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    concGroupExtracting = concGroupExtracting.setStatus('current')
if mibBuilder.loadTexts: concGroupExtracting.setDescription('All objects that are basic for the extraction function. This function is needed for extracting flow records from storage database.')
concGroupStoring = ObjectGroup((1, 3, 6, 1, 2, 1, 5555, 2, 2, 3)).setObjects(("IPFIX-CONCENTRATOR-MIB", "concStoringSourceidModifier"), ("IPFIX-CONCENTRATOR-MIB", "concStoringExportTimeModifier"), ("IPFIX-CONCENTRATOR-MIB", "concStoringProcessId"), ("IPFIX-CONCENTRATOR-MIB", "concStoringParamRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concBaseAssocStoringIndex"), ("IPFIX-CONCENTRATOR-MIB", "concStoringRowStatus"), ("IPFIX-CONCENTRATOR-MIB", "concStoringFieldModifier"), ("IPFIX-CONCENTRATOR-MIB", "concStoringInfoEltId"), ("IPFIX-CONCENTRATOR-MIB", "concStoringIsAvail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    concGroupStoring = concGroupStoring.setStatus('current')
if mibBuilder.loadTexts: concGroupStoring.setDescription('All objects that are basic for the storing function. This function is needed for storing flow records to storage database.')
mibBuilder.exportSymbols("IPFIX-CONCENTRATOR-MIB", concStoringFieldSetEntry=concStoringFieldSetEntry, concExporterListRowStatus=concExporterListRowStatus, concExtractEtrIpAddr=concExtractEtrIpAddr, concReportTemplateRcdEntry=concReportTemplateRcdEntry, concExtractTable=concExtractTable, concExtractEntry=concExtractEntry, ipfixConcentratorMIB=ipfixConcentratorMIB, concBaseAssocStoringIndex=concBaseAssocStoringIndex, concExporterListIndex=concExporterListIndex, concAggrParamSetTable=concAggrParamSetTable, concExtractRowStatus=concExtractRowStatus, concExporterListMethod=concExporterListMethod, concExtractIndex=concExtractIndex, concReportTemplateRcdId=concReportTemplateRcdId, concReportCtrDstProtocol=concReportCtrDstProtocol, concStoringSourceidModifier=concStoringSourceidModifier, concStoringInfoEltId=concStoringInfoEltId, concExporterListEntry=concExporterListEntry, concAggrAddFieldRowStatus=concAggrAddFieldRowStatus, concGroupExtracting=concGroupExtracting, concStoringFieldModifier=concStoringFieldModifier, concAggrAddFieldSetEntry=concAggrAddFieldSetEntry, concReportCtrRowStatus=concReportCtrRowStatus, concReportCtrGrTable=concReportCtrGrTable, concAggrFieldSetTable=concAggrFieldSetTable, PYSNMP_MODULE_ID=ipfixConcentratorMIB, concBaseAssocEntry=concBaseAssocEntry, concAggregation=concAggregation, concStoringExportTimeModifier=concStoringExportTimeModifier, concSelectMatchParamSetEntry=concSelectMatchParamSetEntry, concentratorObjects=concentratorObjects, concSelectMatchIndex=concSelectMatchIndex, concAggrFieldSetId=concAggrFieldSetId, concReportTemplateRcdIndex=concReportTemplateRcdIndex, concSelectMatchParamSetTable=concSelectMatchParamSetTable, concExtractStartTime=concExtractStartTime, concBaseAssocMeteringProcessId=concBaseAssocMeteringProcessId, concExtractProcessId=concExtractProcessId, concGroups=concGroups, concentratorConformance=concentratorConformance, concReportCtrGrIndex=concReportCtrGrIndex, concStoringParamSetTable=concStoringParamSetTable, concBaseAssocReportCtrGrIndex=concBaseAssocReportCtrGrIndex, concAggrParamSetEntry=concAggrParamSetEntry, concBaseAssocReportTemplateRcdId=concBaseAssocReportTemplateRcdId, concAggrFieldModifier=concAggrFieldModifier, concExporterListTable=concExporterListTable, concReportTemplateRcdTable=concReportTemplateRcdTable, concReportCtrGrRowStatus=concReportCtrGrRowStatus, concSelectIsAvail=concSelectIsAvail, concStoringIndex=concStoringIndex, concStoringIsAvail=concStoringIsAvail, concAggrAddFieldSetId=concAggrAddFieldSetId, concBaseAssocRowStatus=concBaseAssocRowStatus, concReport=concReport, concReportCtrReportsSent=concReportCtrReportsSent, concReportCtrGrEntry=concReportCtrGrEntry, concReportCtrDstIpAddrType=concReportCtrDstIpAddrType, concExtractIsAvail=concExtractIsAvail, concAggrTimeInterval=concAggrTimeInterval, concBaseAssociations=concBaseAssociations, concCompliances=concCompliances, concSelectMatchEndValue=concSelectMatchEndValue, ConcFieldModifier=ConcFieldModifier, concStoringRowStatus=concStoringRowStatus, concBaseAssocAggrIndex=concBaseAssocAggrIndex, concExtractEndTime=concExtractEndTime, concSelectMatchMask=concSelectMatchMask, concReportCtrEntry=concReportCtrEntry, concBaseAssocTable=concBaseAssocTable, concBaseAssocSelectMatchIndex=concBaseAssocSelectMatchIndex, concCompliance=concCompliance, concStoringParamRowStatus=concStoringParamRowStatus, concGroupStoring=concGroupStoring, concAggrParamRowStatus=concAggrParamRowStatus, concGroupMetering=concGroupMetering, concReportCtrDstPort=concReportCtrDstPort, concStoring=concStoring, concReportCtrIndex=concReportCtrIndex, concSelectMatchRowStatus=concSelectMatchRowStatus, concReportCtrTable=concReportCtrTable, concStoringParamSetEntry=concStoringParamSetEntry, concStoringFieldSetTable=concStoringFieldSetTable, concSelectMatchStartValue=concSelectMatchStartValue, concAggrIndex=concAggrIndex, concExtraction=concExtraction, concSelection=concSelection, concAggrFieldSetEntry=concAggrFieldSetEntry, concReportCtrDstIpAddr=concReportCtrDstIpAddr, concExtractEtrIpAddrType=concExtractEtrIpAddrType, concAggrAddFieldSetTable=concAggrAddFieldSetTable, concBaseAssocIndex=concBaseAssocIndex, concAggrIsAvail=concAggrIsAvail, concStoringProcessId=concStoringProcessId, concBaseAssocExtractIndex=concBaseAssocExtractIndex, concReportTemplateRcdInfoEltId=concReportTemplateRcdInfoEltId, concAggrFieldRowStatus=concAggrFieldRowStatus, concReportTemplateRcdRowStatus=concReportTemplateRcdRowStatus, concSelectMatchInfoEltId=concSelectMatchInfoEltId)
