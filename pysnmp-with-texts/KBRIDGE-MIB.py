#
# PySNMP MIB module KBRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KBRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, TimeTicks, IpAddress, Integer32, Counter64, Gauge32, enterprises, Counter32, NotificationType, ModuleIdentity, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "TimeTicks", "IpAddress", "Integer32", "Counter64", "Gauge32", "enterprises", "Counter32", "NotificationType", "ModuleIdentity", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
karlnet = ModuleIdentity((1, 3, 6, 1, 4, 1, 762))
karlnet.setRevisions(('2002-01-28 12:00', '2001-07-17 12:00', '2001-05-09 12:00', '2000-09-18 12:00', '2000-07-25 12:00', '2000-07-11 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: karlnet.setRevisionsDescriptions(('Several minor updates; also added ClientInfo and SEC MIB sections.', 'Converted to public form.', 'Updated CONTACT-INFO. Added the kbSEC and kbClientInfo sections.', 'Changed kbWirelessStationSNR type from Gauge32 to INTEGER', 'Added description text on kbControlTemperature to clarify that the temperature given is in half-degree increments centigrade. That is, kbControlTemperature = 66 implies 33 degrees Celsius.', 'Initial Release.',))
if mibBuilder.loadTexts: karlnet.setLastUpdated('200201281200Z')
if mibBuilder.loadTexts: karlnet.setOrganization('KarlNet Incorporated')
if mibBuilder.loadTexts: karlnet.setContactInfo('Postal: KarlNet Incorporated 525 Metro Place North Suite 100 Dublin, OH 43017 USA Tel: +1 614 822 5275 Fax: +1 614 822 0024 E-mail: info@karlnet.com')
if mibBuilder.loadTexts: karlnet.setDescription('The MIB module for KarlNet entities. iso(1).org(3).dod(6).internet(1).mgmt(4).enterprises(1).karlnet(762)')
kbridge_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 762, 2)).setLabel("kbridge-mib")
karlNetKBControl = MibIdentifier((1, 3, 6, 1, 4, 1, 762, 2, 1))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

kbControlReboot = MibScalar((1, 3, 6, 1, 4, 1, 762, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: kbControlReboot.setStatus('current')
if mibBuilder.loadTexts: kbControlReboot.setDescription('Set this OID value to 1 to reboot the KarlBridge.')
kbControlTestSNMPWrite = MibScalar((1, 3, 6, 1, 4, 1, 762, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: kbControlTestSNMPWrite.setStatus('current')
if mibBuilder.loadTexts: kbControlTestSNMPWrite.setDescription('This OID is provided to test whether your SNMP software can successfully set an OID on the KarlBridge by setting its value to 1.')
kbControlShutdown = MibScalar((1, 3, 6, 1, 4, 1, 762, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: kbControlShutdown.setStatus('current')
if mibBuilder.loadTexts: kbControlShutdown.setDescription('Set this OID to 1 to shutdown the KarlBridge.')
kbControlTemperature = MibScalar((1, 3, 6, 1, 4, 1, 762, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbControlTemperature.setStatus('current')
if mibBuilder.loadTexts: kbControlTemperature.setDescription("For KarlBridges equipped with a Dallas temperature chip, returns the temperature of the Dallas chip in 1/2 degree centigrade increments (+/- 0.5 degrees C). To determine the correct temperature in Centigrade, divide by 2. To determine the correct temperature in Fahrenheit, divide by 2, then multiply by 9/5 and add 32. KarlBridges that are not equipped with the Dallas chip return a 'noSuchName' error.")
kbWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 762, 2, 5))
kbWirelessStationNumber = MibScalar((1, 3, 6, 1, 4, 1, 762, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationNumber.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationNumber.setDescription('The number of registered stations (i.e. valid entries) in the kbWirelessStationTable.')
kbWirelessStationTable = MibTable((1, 3, 6, 1, 4, 1, 762, 2, 5, 2), )
if mibBuilder.loadTexts: kbWirelessStationTable.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationTable.setDescription('List of wireless connections and their attributes. Each entry in the table corresponds to a particular wireless station (usually a satellite) that is attached to a particular wireless interface.')
kbWirelessStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1), ).setIndexNames((0, "KBRIDGE-MIB", "kbWirelessStationIndex"))
if mibBuilder.loadTexts: kbWirelessStationEntry.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationEntry.setDescription("An entry in the kbWirelessStationTable. Each entry corresponds to a particular wireless station connected to one of the KarlBridge's interfaces. The entries are indexed by kbWirelessStationIndex and also can be generally considered unique based upon the kbWirelessStationMACAddress field.")
kbWirelessStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationIndex.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationIndex.setDescription('The index of this entry in the kbWirelessStationTable. Each entry in the table has a unique kbWirelessStationIndex.')
kbWirelessStationInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationInterfaceNumber.setDescription('The interface number of the wireless network interface that this entry is attached to. When a KarlBridge contains multiple wireless network interfaces, different entries may contain different values for this field. Interface numbering includes non-wireless interfaces, with the first network interface being number 1.')
kbWirelessStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationName.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationName.setDescription('The name of the remote wireless station as reported to the KarlBridge.')
kbWirelessStationExclHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationExclHellos.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationExclHellos.setDescription('The number of Hello packets from the KarlBridge that were received by the remote station with Excellent signal quality.')
kbWirelessStationGoodHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationGoodHellos.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationGoodHellos.setDescription('The number of Hello packets from the KarlBridge that were received by the remote station with Good signal quality.')
kbWirelessStationLowHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationLowHellos.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationLowHellos.setDescription('The number of Hello packets from the KarlBridge that were received by the remote station with Low signal quality.')
kbWirelessStationSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationSignalLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationSignalLevel.setDescription('The radio signal level in percentage.')
kbWirelessStationNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationNoiseLevel.setDescription('The radio noise level in percentage.')
kbWirelessStationSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationSignalQuality.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationSignalQuality.setDescription('The relative signal quality of the radio transmissions.')
kbWirelessStationPktTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationPktTransmits.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationPktTransmits.setDescription('The number of Ethernet packets the remote station has transmitted through the wireless interface connected to the KarlBridge.')
kbWirelessStationMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationMACAddress.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationMACAddress.setDescription("The Ethernet (MAC) address of the remote station's wireless interface that is connected to the KarlBridge.")
kbWirelessStationTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationTransmits.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationTransmits.setDescription('The total number of wireless transmissions the KarlBridge has made to the remote station through this interface. This number does not necessarily correspond to the number of Ethernet packets transmitted through this interface (see kbWirelessStationPktTransmits).')
kbWirelessStationBadTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationBadTransmits.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationBadTransmits.setDescription('The total number of failed wireless transmissions the KarlBridge has made to the remote station through this interface. If a wireless transmission is not received after 10 attempts, this counter is incremented.')
kbWirelessStationReTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationReTransmits.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationReTransmits.setDescription('The total number of wireless re-transmissions the KarlBridge has attempted to the remote station through this interface.')
kbWirelessStationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationIPAddress.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationIPAddress.setDescription('The IP address of the remote station, if any.')
kbWirelessStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("compatibility-Mode", 1), ("tc-Peer-to-Peer", 2), ("tc-Base-Station", 3), ("tc-Satellite-Station", 4), ("tc-Polling-Base-Station", 5), ("tc-PtP-Controller", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationType.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationType.setDescription("The remote station's mode of operation on this radio interface. Possible values are: compatibility-Mode(1) -- IEEE 802.11 mode or legacy Wireless(-I) mode tc-Peer-to-Peer(2) -- TurboCell Peer-to-Peer Station (no base stations, no polling) tc-Base-Station(3) -- TurboCell Base Station tc-Satellite-Station(4) -- TurboCell Satellite Station tc-Polling-Base-Station(5) -- TurboCell Polling Base Station tc-PtP-Controller(6) -- TurboCell Point-to-Point Controller (Single-User Base Station)")
kbWirelessStationSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown-SNR", 1), ("low-SNR", 2), ("good-SNR", 3), ("excellent-SNR", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationSNR.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationSNR.setDescription('The relative Signal-to-Noise Ratio of the wireless connection between the remote station and the KarlBridge.')
kbWirelessStationState = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationState.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationState.setDescription("The remote station's wireless connection status. The remote station is said to be offline when it appears to cease wireless communication, either because it no longer acknowledges poll packets or no longer sends poll packets")
kbWirelessPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessPoll.setStatus('current')
if mibBuilder.loadTexts: kbWirelessPoll.setDescription('The number of times the KarlBridge has polled the remote station.')
kbWirelessPollData = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessPollData.setStatus('current')
if mibBuilder.loadTexts: kbWirelessPollData.setDescription("The number of times the KarlBridge has polled the remote station that the remote station has responded with data, after which the remote station's transmit queue is empty.")
kbWirelessPollNoData = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessPollNoData.setStatus('current')
if mibBuilder.loadTexts: kbWirelessPollNoData.setDescription('The number of times the KarlBridge has polled the remote station that the remote station has not responded with data.')
kbWirelessPollMoreData = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessPollMoreData.setStatus('deprecated')
if mibBuilder.loadTexts: kbWirelessPollMoreData.setDescription('The number of times the KarlBridge has polled the remote station that the remote station has had more data in its transmit queue than it could transmit in a single poll response.')
kbWirelessPollTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kbWirelessPollTimeouts.setStatus('current')
if mibBuilder.loadTexts: kbWirelessPollTimeouts.setDescription('The number of times the KarlBridge has polled the remote station and the remote station has not responded before the timeout period expired.')
kbWirelessPollOfflines = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kbWirelessPollOfflines.setStatus('current')
if mibBuilder.loadTexts: kbWirelessPollOfflines.setDescription('The number of times the remote station has gone offline. The value is relevant only when the KarlBridge is in one of the Base Station modes (polling or non-polling).')
kbWirelessTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kbWirelessTestTime.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestTime.setDescription('The number of seconds remaining in the wireless link test. This value is read-writable, and is decremented by the device every second until it reaches 0, at which point the test is finished. To stop the test, set this value to 0.')
kbWirelessTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kbWirelessTestInterval.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestInterval.setDescription('The duration (in hundredths of seconds) of the radio link test performed between the KarlBridge and the remote station.')
kbWirelessTestPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kbWirelessTestPacketSize.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestPacketSize.setDescription('The size of the radio link test packets sent between the KarlBridge and the remote station.')
kbWirelessTestOurTx = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurTx.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurTx.setDescription("The radio transmit rate of the KarlBridge's radio when performing the radio link test.")
kbWirelessTestOurRx = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurRx.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurRx.setDescription('The radio receive rate used by the KarlBridge when performing the radio link test.')
kbWirelessTestHisTx = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisTx.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisTx.setDescription("The radio transmit rate of the remote station's radio when performing the radio link test.")
kbWirelessTestHisRx = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisRx.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisRx.setDescription('The radio receive rate used by the remote station when performing the radio link test.')
kbWirelessTestOurCurSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurCurSignalLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurCurSignalLevel.setDescription('The current local signal level for the radio link test as recorded by the KarlBridge.')
kbWirelessTestOurCurNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurCurNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurCurNoiseLevel.setDescription('The current local noise level for the radio link test as recorded by the KarlBridge.')
kbWirelessTestOurCurSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurCurSignalQuality.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurCurSignalQuality.setDescription('The current relative signal quality for the radio link test as recorded by the KarlBridge.')
kbWirelessTestOurCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurCurSNR.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurCurSNR.setDescription('The current local Signal-to-Noise Ratio (SNR) for the radio link test as recorded by the KarlBridge.')
kbWirelessTestOurMinSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurMinSignalLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurMinSignalLevel.setDescription('The minimum local signal level recorded by the KarlBridge during the radio link test.')
kbWirelessTestOurMinNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurMinNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurMinNoiseLevel.setDescription('The minimum local noise level recorded by the KarlBridge during the radio link test.')
kbWirelessTestOurMinSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurMinSignalQuality.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurMinSignalQuality.setDescription('The minimum local signal quality recorded by the KarlBridge during the radio link test.')
kbWirelessTestOurMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurMinSNR.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurMinSNR.setDescription('The minimum local Signal-to-Noise Ratio (SNR) recorded by the KarlBridge during the radio link test.')
kbWirelessTestOurMaxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurMaxSignalLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurMaxSignalLevel.setDescription('The maximum local signal level recorded by the KarlBridge during the radio link test.')
kbWirelessTestOurMaxNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurMaxNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurMaxNoiseLevel.setDescription('The maximum local noise level recorded by the KarlBridge during the radio link test.')
kbWirelessTestOurMaxSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurMaxSignalQuality.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurMaxSignalQuality.setDescription('The maximum local signal quality recorded by the KarlBridge during the radio link test.')
kbWirelessTestOurMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestOurMaxSNR.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestOurMaxSNR.setDescription('The maximum local Signal-to-Noise Ratio (SNR) recorded by the KarlBridge during the radio link test.')
kbWirelessTestHisCurSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisCurSignalLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisCurSignalLevel.setDescription('The current signal level at the remote station for the radio link test.')
kbWirelessTestHisCurNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisCurNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisCurNoiseLevel.setDescription('The current noise level at the remote station for the radio link test.')
kbWirelessTestHisCurSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisCurSignalQuality.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisCurSignalQuality.setDescription('The current signal quality at the remote station for the radio link test.')
kbWirelessTestHisCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisCurSNR.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisCurSNR.setDescription('The current Signal-to-Noise Ratio (SNR) at the remote station for the radio link test.')
kbWirelessTestHisMinSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisMinSignalLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisMinSignalLevel.setDescription('The minimum signal level recorded at the remote station during the radio link test.')
kbWirelessTestHisMinNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisMinNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisMinNoiseLevel.setDescription('The minimum noise level recorded at the remote station during the radio link test.')
kbWirelessTestHisMinSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisMinSignalQuality.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisMinSignalQuality.setDescription('The minimum signal quality recorded at the remote station during the radio link test.')
kbWirelessTestHisMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisMinSNR.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisMinSNR.setDescription('The minimum signal level recorded at the remote station during the radio link test.')
kbWirelessTestHisMaxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisMaxSignalLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisMaxSignalLevel.setDescription('The maximum signal level recorded at the remote station during the radio link test.')
kbWirelessTestHisMaxNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisMaxNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisMaxNoiseLevel.setDescription('The maximum remote noise level recorded at the remote station during the radio link test.')
kbWirelessTestHisMaxSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisMaxSignalQuality.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisMaxSignalQuality.setDescription('The maximum signal quality recorded at the remote station during the radio link test.')
kbWirelessTestHisMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestHisMaxSNR.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestHisMaxSNR.setDescription('The maximum Signal-to-Noise Ratio (SNR) recorded at the remote station during the radio link test.')
kbWirelessTestLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestLinkUp.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestLinkUp.setDescription('The status of the radio link test. Possible values are: down(0) -- the radio link test IS NOT currently running up(1) -- the radio link test IS currently running')
kbWirelessTestLostLink = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestLostLink.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestLostLink.setDescription('The number of time this link was lost while performing the radio link test.')
kbWirelessTestLostTestPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessTestLostTestPkts.setStatus('current')
if mibBuilder.loadTexts: kbWirelessTestLostTestPkts.setDescription('The total number of radio link test packets that were lost during the test interval.')
kbWirelessStationRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("waveLAN-I", 0), ("clarion-M10", 1), ("waveLAN-IEEE", 2), ("microwave", 3), ("radioLAN", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationRadioType.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationRadioType.setDescription('The type of radio the remote station is using on this interface. Possible values include: waveLAN-I(0) -- legacy Lucent Wireless-I radio (900 MHz) clarion-M10(1) -- Clarion M10 radio waveLAN-IEEE(2) -- Lucent ORiNOCO (WaveLAN) IEEE 802.11 radio (2.4 GHz) microwave(3) -- some type of microwave radio radioLAN(4) -- some type of RadioLAN radio')
kbWirelessRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linktest", 1), ("turboCell", 2), ("combination", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessRecordType.setStatus('current')
if mibBuilder.loadTexts: kbWirelessRecordType.setDescription('The type of this record entry. Possible values include: linktest(1) -- This record contains ONLY LinkTest results turboCell(2) -- This record contains ONLY a TurboCell station entry combination(3) -- This record contains BOTH LinkTest results AND a TurboCell station entry')
kbWirelessStationPktReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationPktReceives.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationPktReceives.setDescription('The number of packets the KarlBridge has received on this link.')
kbWirelessStationReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationReceives.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationReceives.setDescription('The number of wireless transmissions the KarlBridge has received on this link.')
kbWirelessStationBytesReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationBytesReceives.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationBytesReceives.setDescription('The number of bytes received by the KarlBridge on this link, including wireless packet headers.')
kbWirelessStationBytesTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationBytesTransmits.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationBytesTransmits.setDescription('The number of bytes transmitted by the KarlBridge on this link, including wireless packet headers.')
kbWirelessRegistrationRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessRegistrationRecord.setStatus('obsolete')
if mibBuilder.loadTexts: kbWirelessRegistrationRecord.setDescription('For testing purposes only.')
kbWirelessStationFragmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationFragmentDiscards.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationFragmentDiscards.setDescription('The number of times on this connection that the KarlBridge has discarded a fragment. A fragment is discarded because not all fragments needed to reconstruct a packet are present or we need room for a more recent fragment.')
kbWirelessStationFragmentMissings = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationFragmentMissings.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationFragmentMissings.setDescription('The number of times on this connection that the KarlBridge has detected that a fragment needed to recontruct a packet is missing.')
kbWirelessStationFragmentLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationFragmentLostFrames.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationFragmentLostFrames.setDescription('The number of times on this connection that the KarlBridge detected that a frame containing fragments needed to reconstruct a packet is lost.')
kbWirelessStationFragmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 5, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWirelessStationFragmentErrors.setStatus('current')
if mibBuilder.loadTexts: kbWirelessStationFragmentErrors.setDescription('The number of times on this connection the KarlBridge has encountered an error while reconstructing a packet from fragments.')
kbSEC = MibIdentifier((1, 3, 6, 1, 4, 1, 762, 2, 8))
kbSECClientTable = MibTable((1, 3, 6, 1, 4, 1, 762, 2, 8, 1), )
if mibBuilder.loadTexts: kbSECClientTable.setStatus('current')
if mibBuilder.loadTexts: kbSECClientTable.setDescription('A table that contains information about Super Ethernet Converter (SEC) clients and the SEC station through which they are connected.')
kbSECClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 762, 2, 8, 1, 1), ).setIndexNames((0, "KBRIDGE-MIB", "kbSECClientAddress"))
if mibBuilder.loadTexts: kbSECClientEntry.setStatus('current')
if mibBuilder.loadTexts: kbSECClientEntry.setDescription("An entry in the kbSECClientTable. Each entry contains the client's MAC address (which is the table index) and the MAC address of the SEC through which the client is connected.")
kbSECClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 8, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbSECClientAddress.setStatus('current')
if mibBuilder.loadTexts: kbSECClientAddress.setDescription('The unicast MAC address of the client station that is connecting through the SEC unit denoted by kbSECStationAddress.')
kbSECStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 8, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbSECStationAddress.setStatus('current')
if mibBuilder.loadTexts: kbSECStationAddress.setDescription('The unicast MAC address of the SEC station through which the client is connected.')
kbClientInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 762, 2, 9))
kbClientInfoByNumberTable = MibTable((1, 3, 6, 1, 4, 1, 762, 2, 9, 1), )
if mibBuilder.loadTexts: kbClientInfoByNumberTable.setStatus('current')
if mibBuilder.loadTexts: kbClientInfoByNumberTable.setDescription('A table that contains information about (wireless) clients that pass traffic through this KarlBridge, indexed by a virtual port number that is unique only within this table.')
kbClientInfoByNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1), ).setIndexNames((0, "KBRIDGE-MIB", "kbCIbyNumberVirtualPort"))
if mibBuilder.loadTexts: kbClientInfoByNumberEntry.setStatus('current')
if mibBuilder.loadTexts: kbClientInfoByNumberEntry.setDescription("An entry in the kbClientInfoByNumberTable. Each entry contains information for a particular client station indexed by the client's virtual port number.")
kbCIbyNumberVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyNumberVirtualPort.setStatus('current')
if mibBuilder.loadTexts: kbCIbyNumberVirtualPort.setDescription('The virtual port number to which the client is connected. Used as the index for this table.')
kbCIbyNumberMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyNumberMACAddress.setStatus('current')
if mibBuilder.loadTexts: kbCIbyNumberMACAddress.setDescription("The client's unique unicast MAC Address. This value can be used as the index in the kbClientInfoByMacTable.")
kbCIByNumberInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIByNumberInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: kbCIByNumberInterfaceNum.setDescription('The KarlBridge interface to which the client is connected.')
kbCIbyNumberStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyNumberStationName.setStatus('current')
if mibBuilder.loadTexts: kbCIbyNumberStationName.setDescription("The client's ASCII Station Name.")
kbCIbyNumberTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyNumberTotalBytes.setStatus('current')
if mibBuilder.loadTexts: kbCIbyNumberTotalBytes.setDescription('The total number of bytes that have been passed through the KarlBridge for this client (clientTotalBytes = clientSentBytes + clientRecvBytes)')
kbCIbyNumberTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyNumberTotalPackets.setStatus('current')
if mibBuilder.loadTexts: kbCIbyNumberTotalPackets.setDescription('The total number of packets that have been passed through the KarlBridge for this client (clientTotalPackets = clientSentPackets + clientRecvPackets)')
kbCIbyNumberSNRAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyNumberSNRAverage.setStatus('current')
if mibBuilder.loadTexts: kbCIbyNumberSNRAverage.setDescription('The running average of the Signal-to-Noise Ratio (SNR) for this client, if the client is connected directly to the KarlBridge on a wireless interface. 0 otherwise.')
kbCIbyNumberTimeLastRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyNumberTimeLastRecv.setStatus('current')
if mibBuilder.loadTexts: kbCIbyNumberTimeLastRecv.setDescription('The number of time ticks (in 1/100ths of a second) since a packet was last received from this client.')
kbClientInfoByMacTable = MibTable((1, 3, 6, 1, 4, 1, 762, 2, 9, 2), )
if mibBuilder.loadTexts: kbClientInfoByMacTable.setStatus('current')
if mibBuilder.loadTexts: kbClientInfoByMacTable.setDescription('A table that contains information about (wireless) clients that pass traffic through this KarlBridge, indexed by client MAC Address.')
kbClientInfoByMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1), ).setIndexNames((0, "KBRIDGE-MIB", "kbCIbyMacMACAddress"))
if mibBuilder.loadTexts: kbClientInfoByMacEntry.setStatus('current')
if mibBuilder.loadTexts: kbClientInfoByMacEntry.setDescription("An entry in the kbClientInfoByMacTable. Each entry contains information for a particular client station indexed by the client's unique MAC Address.")
kbCIbyMacMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyMacMACAddress.setStatus('current')
if mibBuilder.loadTexts: kbCIbyMacMACAddress.setDescription("The client's unique unicast MAC Address. Used as the index for this table.")
kbCIbyMacVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyMacVirtualPort.setStatus('current')
if mibBuilder.loadTexts: kbCIbyMacVirtualPort.setDescription('The virtual port number to which the client is connected. This value can be used as the index in the kbClientInfoByNumberTable.')
kbCIbyMacInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyMacInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: kbCIbyMacInterfaceNum.setDescription('The KarlBridge interface to which the client is connected.')
kbCIbyMacStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyMacStationName.setStatus('current')
if mibBuilder.loadTexts: kbCIbyMacStationName.setDescription("The client's ASCII Station Name.")
kbCIbyMacTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyMacTotalBytes.setStatus('current')
if mibBuilder.loadTexts: kbCIbyMacTotalBytes.setDescription('The total number of bytes that have been passed through the KarlBridge for this client (clientTotalBytes = clientSentBytes + clientRecvBytes)')
kbCIbyMacTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyMacTotalPackets.setStatus('current')
if mibBuilder.loadTexts: kbCIbyMacTotalPackets.setDescription('The total number of packets that have been passed through the KarlBridge for this client (clientTotalPackets = clientSentPackets + clientRecvPackets)')
kbCIbyMacSNRAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyMacSNRAverage.setStatus('current')
if mibBuilder.loadTexts: kbCIbyMacSNRAverage.setDescription('The running average of the Signal-to-Noise Ratio (SNR) for this client, if the client is connected directly to the KarlBridge on a wireless interface. 0 otherwise.')
kbCIbyMacTimeLastRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 762, 2, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbCIbyMacTimeLastRecv.setStatus('current')
if mibBuilder.loadTexts: kbCIbyMacTimeLastRecv.setDescription('The number of time ticks (in 1/100ths of a second) since a packet was last received from this client.')
mibBuilder.exportSymbols("KBRIDGE-MIB", karlnet=karlnet, kbWirelessRegistrationRecord=kbWirelessRegistrationRecord, kbControlReboot=kbControlReboot, kbSEC=kbSEC, kbSECClientEntry=kbSECClientEntry, kbWirelessTestHisCurSNR=kbWirelessTestHisCurSNR, kbWirelessPoll=kbWirelessPoll, kbWirelessStationSignalQuality=kbWirelessStationSignalQuality, kbWirelessStationName=kbWirelessStationName, kbWirelessTestOurMinSignalLevel=kbWirelessTestOurMinSignalLevel, kbWirelessStationFragmentDiscards=kbWirelessStationFragmentDiscards, kbCIbyNumberTotalBytes=kbCIbyNumberTotalBytes, kbWirelessStationRadioType=kbWirelessStationRadioType, kbClientInfoByMacEntry=kbClientInfoByMacEntry, kbWirelessTestLostLink=kbWirelessTestLostLink, kbControlTestSNMPWrite=kbControlTestSNMPWrite, kbWirelessTestHisCurSignalQuality=kbWirelessTestHisCurSignalQuality, kbCIbyMacTimeLastRecv=kbCIbyMacTimeLastRecv, kbCIbyNumberMACAddress=kbCIbyNumberMACAddress, kbWirelessPollMoreData=kbWirelessPollMoreData, kbCIbyMacTotalBytes=kbCIbyMacTotalBytes, kbCIbyNumberSNRAverage=kbCIbyNumberSNRAverage, kbClientInfoByNumberEntry=kbClientInfoByNumberEntry, kbSECClientAddress=kbSECClientAddress, kbWirelessTestHisMaxSignalLevel=kbWirelessTestHisMaxSignalLevel, kbWirelessTestHisMinSignalLevel=kbWirelessTestHisMinSignalLevel, kbWirelessTestHisRx=kbWirelessTestHisRx, kbWirelessStationNoiseLevel=kbWirelessStationNoiseLevel, kbWirelessStationInterfaceNumber=kbWirelessStationInterfaceNumber, kbWirelessTestOurMaxNoiseLevel=kbWirelessTestOurMaxNoiseLevel, kbWirelessTestHisMinNoiseLevel=kbWirelessTestHisMinNoiseLevel, kbWirelessStationLowHellos=kbWirelessStationLowHellos, kbWirelessTestHisCurNoiseLevel=kbWirelessTestHisCurNoiseLevel, kbWirelessTestInterval=kbWirelessTestInterval, kbCIbyMacStationName=kbCIbyMacStationName, kbWirelessTestOurMaxSignalLevel=kbWirelessTestOurMaxSignalLevel, kbWirelessTestHisMaxNoiseLevel=kbWirelessTestHisMaxNoiseLevel, kbCIbyMacTotalPackets=kbCIbyMacTotalPackets, kbWirelessStationPktReceives=kbWirelessStationPktReceives, kbCIbyNumberVirtualPort=kbCIbyNumberVirtualPort, kbControlTemperature=kbControlTemperature, kbWirelessTestOurCurNoiseLevel=kbWirelessTestOurCurNoiseLevel, kbWirelessTestOurCurSNR=kbWirelessTestOurCurSNR, kbWirelessTestOurMinNoiseLevel=kbWirelessTestOurMinNoiseLevel, kbWirelessStationEntry=kbWirelessStationEntry, kbWirelessStationIPAddress=kbWirelessStationIPAddress, kbWirelessRecordType=kbWirelessRecordType, kbCIbyNumberTotalPackets=kbCIbyNumberTotalPackets, kbClientInfo=kbClientInfo, kbWirelessStationMACAddress=kbWirelessStationMACAddress, kbWirelessTestLinkUp=kbWirelessTestLinkUp, kbWirelessTestTime=kbWirelessTestTime, kbWirelessTestOurRx=kbWirelessTestOurRx, kbClientInfoByMacTable=kbClientInfoByMacTable, kbCIByNumberInterfaceNum=kbCIByNumberInterfaceNum, kbWirelessStationSignalLevel=kbWirelessStationSignalLevel, kbWirelessStationTransmits=kbWirelessStationTransmits, kbCIbyMacInterfaceNum=kbCIbyMacInterfaceNum, kbControlShutdown=kbControlShutdown, kbWirelessTestOurMaxSignalQuality=kbWirelessTestOurMaxSignalQuality, kbWirelessStationNumber=kbWirelessStationNumber, kbWirelessStationFragmentLostFrames=kbWirelessStationFragmentLostFrames, kbWirelessStationFragmentMissings=kbWirelessStationFragmentMissings, PYSNMP_MODULE_ID=karlnet, kbSECStationAddress=kbSECStationAddress, kbWirelessPollData=kbWirelessPollData, MacAddress=MacAddress, kbWirelessTestOurTx=kbWirelessTestOurTx, kbWirelessPollTimeouts=kbWirelessPollTimeouts, kbWirelessPollNoData=kbWirelessPollNoData, kbWirelessTestOurCurSignalQuality=kbWirelessTestOurCurSignalQuality, kbWirelessStationReceives=kbWirelessStationReceives, kbWirelessTestOurMinSNR=kbWirelessTestOurMinSNR, kbWirelessStationTable=kbWirelessStationTable, kbWirelessStationType=kbWirelessStationType, kbWirelessTestOurCurSignalLevel=kbWirelessTestOurCurSignalLevel, kbCIbyMacVirtualPort=kbCIbyMacVirtualPort, kbWirelessTestOurMaxSNR=kbWirelessTestOurMaxSNR, kbWirelessTestLostTestPkts=kbWirelessTestLostTestPkts, kbSECClientTable=kbSECClientTable, kbWirelessStationBytesTransmits=kbWirelessStationBytesTransmits, kbWirelessStationState=kbWirelessStationState, kbWirelessTestPacketSize=kbWirelessTestPacketSize, kbWirelessTestHisCurSignalLevel=kbWirelessTestHisCurSignalLevel, kbCIbyNumberTimeLastRecv=kbCIbyNumberTimeLastRecv, kbWirelessStationSNR=kbWirelessStationSNR, kbCIbyMacMACAddress=kbCIbyMacMACAddress, kbWirelessStationReTransmits=kbWirelessStationReTransmits, kbWirelessStationBadTransmits=kbWirelessStationBadTransmits, kbCIbyMacSNRAverage=kbCIbyMacSNRAverage, kbridge_mib=kbridge_mib, kbWirelessStationGoodHellos=kbWirelessStationGoodHellos, karlNetKBControl=karlNetKBControl, kbCIbyNumberStationName=kbCIbyNumberStationName, kbWirelessStationBytesReceives=kbWirelessStationBytesReceives, kbWirelessTestHisMinSignalQuality=kbWirelessTestHisMinSignalQuality, kbWirelessStationIndex=kbWirelessStationIndex, kbWirelessTestHisMaxSignalQuality=kbWirelessTestHisMaxSignalQuality, kbWirelessStationPktTransmits=kbWirelessStationPktTransmits, kbWirelessTestOurMinSignalQuality=kbWirelessTestOurMinSignalQuality, kbWirelessStationFragmentErrors=kbWirelessStationFragmentErrors, kbWirelessPollOfflines=kbWirelessPollOfflines, kbWirelessTestHisTx=kbWirelessTestHisTx, kbWirelessTestHisMaxSNR=kbWirelessTestHisMaxSNR, kbWirelessTestHisMinSNR=kbWirelessTestHisMinSNR, kbClientInfoByNumberTable=kbClientInfoByNumberTable, kbWirelessStationExclHellos=kbWirelessStationExclHellos, kbWireless=kbWireless)
