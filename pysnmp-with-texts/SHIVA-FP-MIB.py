#
# PySNMP MIB module SHIVA-FP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SHIVA-FP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:03:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
fastpath, = mibBuilder.importSymbols("SHIVA-MIB", "fastpath")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Unsigned32, IpAddress, iso, TimeTicks, Integer32, Counter64, ModuleIdentity, Counter32, Bits, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "IpAddress", "iso", "TimeTicks", "Integer32", "Counter64", "ModuleIdentity", "Counter32", "Bits", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fpBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 166, 2, 1, 1))
fpConf = MibIdentifier((1, 3, 6, 1, 4, 1, 166, 2, 1, 2))
k_star = MibIdentifier((1, 3, 6, 1, 4, 1, 166, 2, 1, 3)).setLabel("k-star")
bufferSize = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSize.setDescription('The size of the buffers in the buffer pool. All buffers are the same size.')
bufferAvail = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferAvail.setStatus('mandatory')
if mibBuilder.loadTexts: bufferAvail.setDescription('The total number of buffers initialized. This does not indicate the number of currently free buffers. Rather it is the total number of buffers which were created and made free at boot time.')
bufferDrops = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferDrops.setStatus('mandatory')
if mibBuilder.loadTexts: bufferDrops.setDescription('The total number of times that a buffer was requested when none was available.')
bufferTypeTable = MibTable((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4), )
if mibBuilder.loadTexts: bufferTypeTable.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeTable.setDescription('Each row of this table describes statistics on buffers allocated for a specific purpose. The sum of bufferTypeCount for all rows should always equal the bufferAvail count.')
bufferTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4, 1), ).setIndexNames((0, "SHIVA-FP-MIB", "bufferTypeIndex"))
if mibBuilder.loadTexts: bufferTypeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeEntry.setDescription('The object type of the rows in bufferTypeTable.')
bufferTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeIndex.setDescription('The enumeration of each buffer type row.')
bufferTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("free", 2), ("localtalk", 3), ("ethernet", 4), ("arp", 5), ("data", 6), ("erbf", 7), ("etbf", 8), ("malloc", 9), ("serial", 10), ("tokenring", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferTypeType.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeType.setDescription('enumerated type of buffer type.')
bufferTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferTypeDescr.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeDescr.setDescription('Text description of buffer type.')
bufferTypeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferTypeCount.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeCount.setDescription('The number of buffers of the type which is described by the value of bufferTypeType for this row.')
bufferTypeDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferTypeDrops.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeDrops.setDescription('The number of requests for buffers this type which were not fulfilled because no free buffers were available.')
bufferTypeRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferTypeRequests.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeRequests.setDescription('The number of times buffers of this type were requested.')
bufferTypeMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 166, 2, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferTypeMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: bufferTypeMaximum.setDescription('A high water mark for buffers of this type. This number represents the greatest number of buffers of this type ever allocated concurrently.')
confReboot = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 1), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confReboot.setStatus('mandatory')
if mibBuilder.loadTexts: confReboot.setDescription('The amount of time, in hundredths of a second, until the device reboots itself.')
confCheckSum = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confCheckSum.setStatus('mandatory')
if mibBuilder.loadTexts: confCheckSum.setDescription("Indicates the validity of the FastPath's configuration. If written to, allows the management station to flush the configuration (by setting invalid), or to protect it (by setting valid).")
codeCheckSum = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: codeCheckSum.setStatus('mandatory')
if mibBuilder.loadTexts: codeCheckSum.setDescription("Indicates the validity of the FastPath's downloaded image. If written to, allows the management station to flush the downloaded image (by setting invalid), or to protect the it (by setting valid).")
promVersion = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVersion.setStatus('mandatory')
if mibBuilder.loadTexts: promVersion.setDescription('The version number of the PROM multiplied by 100, for instance, PROM version 4.1 would return 410.')
hwStatus = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwStatus.setDescription("This integer is a bit mask which holds the following flags: (not all bits are valid for all products) 0x00000001 - LocalTalk failed tests 0x00000002 - LAN controller failed tests 0x00000004 - The battery is low 0x00000008 - Expansion RAM is present 0x00000010 - Ethernet 12V Fuse blown 0x00000020 - Expansion RAM failed tests 0x00000040 - Disable Enet CRS jumper installed 0x00000080 - Disable Enet SQE jumper installed 0x00000100 - Software Jumper 1 installed 0x00000200 - Software Jumper 2 installed 0x00000400 - Software Jumper 3 installed 0x00000800 - Software Jumper 4 installed 0x00007000 - EtherModule type field 0x00008000 - EtherModule type field is valid 0x00010000 - RAM Bank 3 is present 0x00020000 - RAM Bank 3 failed tests 0x00040000 - RAM Bank 4 is present 0x00080000 - RAM Bank 4 failed tests 0x00100000 - Downloader mode 0x00200000 - Software Jumper 5 installed 0x00400000 - Hardware has LocalTalk IOP 0x00800000 - VROM on top of 'sam' PROM 0x01000000 - Auxiliary memory board present 0x02000000 - Auxiliary memory board failed tests.")
confWhyReboot = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("hardware", 2), ("firmware", 3), ("software", 4), ("config", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confWhyReboot.setStatus('mandatory')
if mibBuilder.loadTexts: confWhyReboot.setDescription('Reason code for reboot scheduled by confReboot')
confWhoReboot = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confWhoReboot.setStatus('mandatory')
if mibBuilder.loadTexts: confWhoReboot.setDescription('Person responsible for reboot scheduled by confReboot')
confRebootComment = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confRebootComment.setStatus('mandatory')
if mibBuilder.loadTexts: confRebootComment.setDescription('Comment string for reboot scheduled by confReboot')
confHowReboot = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cold", 1), ("warm", 2), ("ramdl", 3), ("reset", 4), ("romdl", 5), ("dl", 6), ("bstrap", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confHowReboot.setStatus('mandatory')
if mibBuilder.loadTexts: confHowReboot.setDescription('Action taken when reboot scheduled by confReboot occurs')
confSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 166, 2, 1, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: confSerialNum.setDescription('FastPath Serial Number')
mibBuilder.exportSymbols("SHIVA-FP-MIB", bufferTypeEntry=bufferTypeEntry, bufferTypeTable=bufferTypeTable, bufferTypeMaximum=bufferTypeMaximum, bufferTypeCount=bufferTypeCount, confWhyReboot=confWhyReboot, confRebootComment=confRebootComment, bufferAvail=bufferAvail, bufferTypeDescr=bufferTypeDescr, promVersion=promVersion, bufferTypeType=bufferTypeType, bufferTypeIndex=bufferTypeIndex, bufferTypeDrops=bufferTypeDrops, bufferSize=bufferSize, bufferTypeRequests=bufferTypeRequests, confReboot=confReboot, confWhoReboot=confWhoReboot, k_star=k_star, confHowReboot=confHowReboot, confCheckSum=confCheckSum, hwStatus=hwStatus, fpConf=fpConf, fpBuffer=fpBuffer, bufferDrops=bufferDrops, codeCheckSum=codeCheckSum, confSerialNum=confSerialNum)
