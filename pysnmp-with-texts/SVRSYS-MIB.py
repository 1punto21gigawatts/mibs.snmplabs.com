#
# PySNMP MIB module SVRSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SVRSYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, enterprises, Counter64, Unsigned32, MibIdentifier, mgmt, NotificationType, Integer32, ModuleIdentity, Gauge32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "enterprises", "Counter64", "Unsigned32", "MibIdentifier", "mgmt", "NotificationType", "Integer32", "ModuleIdentity", "Gauge32", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
class KBytes(Integer32):
    pass

class BusTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("systemBus", 3), ("isa", 4), ("eisa", 5), ("mca", 6), ("turbochannel", 7), ("pci", 8), ("vme", 9), ("nuBus", 10), ("pcmcia", 11), ("cBus", 12), ("mpi", 13), ("mpsa", 14), ("usb", 15))

class SystemStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("failed", 4))

class MemoryAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class ThermUnits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("degreesF", 3), ("degreesC", 4), ("tempRelative", 5))

class PowerUnits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("milliVoltsDC", 3), ("milliVoltsAC", 4), ("voltsDC", 5), ("voltsAC", 6), ("milliAmpsDC", 7), ("milliAmpsAC", 8), ("ampsDC", 9), ("ampsAC", 10), ("relative", 11))

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

mib_extensions_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18)).setLabel("mib-extensions-1")
svrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22))
svrBaseSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1))
svrSysMibInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 1))
svrBaseSysDescr = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2))
svrProcessors = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3))
svrMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4))
svrBuses = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5))
svrDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6))
svrConsoleKeyboard = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 4))
svrConsoleDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5))
svrConsolePointDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 6))
svrPhysicalConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7))
svrEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8))
svrThermalSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1))
svrCoolingSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2))
svrPowerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3))
svrSysMibMajorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSysMibMajorRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrSysMibMajorRev.setDescription('The Major Revision of this implementation of the svrSystem MIB. Will be 1.')
svrSysMibMinorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSysMibMinorRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrSysMibMinorRev.setDescription('The minor rev of this implementation of the svrSystem MIB. Will be 0.')
svrSystemFamily = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("x86", 3), ("alpha", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemFamily.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemFamily.setDescription('Major system family; i.e. Alpha or Intel or Other.')
svrSystemModel = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemModel.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemModel.setDescription('Qualify SystemFamily with model, e.g. AlphaServer 2100')
svrSystemDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemDescr.setDescription('For consistency with previous versions of MIB, very general text description of system type. Starts with Digital (Intel or Alpha) Server... plus any other descriptive text.')
svrSystemBoardFruIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemBoardFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemBoardFruIndex.setDescription('The index of the Field Replaceable Unit (FRU) in the FRU table describing the serial # and other asset info of this board. 0 if unknown.')
svrSystemOCPDisplay = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrSystemOCPDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemOCPDisplay.setDescription('The content of the operator control panel (OCP). Null if unknown. Writeable on some systems.')
svrSystemBootedOS = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("windowsNT", 3), ("netWare", 4), ("scoUnix", 5), ("digitalUnix", 6), ("openVms", 7), ("windows", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemBootedOS.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemBootedOS.setDescription('Current booted operating system.')
svrSystemBootedOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemBootedOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemBootedOSVersion.setDescription("Version of the OS that's booted on the system.")
svrSystemShutdownReason = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemShutdownReason.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemShutdownReason.setDescription('The possible reason for the system shutdown.')
svrSystemRemoteMgrNum = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrSystemRemoteMgrNum.setStatus('mandatory')
if mibBuilder.loadTexts: svrSystemRemoteMgrNum.setDescription('A phone number entry for a remote manager.')
svrFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10), )
if mibBuilder.loadTexts: svrFirmwareTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrFirmwareTable.setDescription('Table of information about the firmware, or firmwares, that may be present on this system. It may include SRM & ARC console firmware, optionally Fail Safe Loader. On Intel-family systems, will describe the System BIOS. May also include second levels, such as PALcode and BIOS emulator versions, if they are accessible to the software.')
svrFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrFirmwareIndex"))
if mibBuilder.loadTexts: svrFirmwareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrFirmwareEntry.setDescription('Each entry represents a single instance of firmware in the system.')
svrFirmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFirmwareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrFirmwareIndex.setDescription('Locally-unique index for this entry.')
svrFirmwareDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFirmwareDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrFirmwareDescr.setDescription('e.g. SRM console, ARC console, System BIOS, etc.')
svrFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: svrFirmwareRev.setDescription('A version number possibly of the form Vx.y or Vx.y-z.')
svrFwSymbolTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 11), )
if mibBuilder.loadTexts: svrFwSymbolTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrFwSymbolTable.setDescription('Table of soft switches and symbols maintained by the firmware. May be operating system and/or option-specific and will certainly be system-specific. This list is intended to be easily extensible and support arbitrary datatypes. It includes such switches as powerup options, default dump device, etc. Note - the string comparision for svrFwSymbolName is case insensitive.')
svrFwSymbolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 11, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrFwSymbolName"))
if mibBuilder.loadTexts: svrFwSymbolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrFwSymbolEntry.setDescription(' Each entry represents one variable or symbol maintained by or stored by some instance of firmware in the system.')
svrFwSymbolName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFwSymbolName.setStatus('mandatory')
if mibBuilder.loadTexts: svrFwSymbolName.setDescription('The symbol name as visible at the console.')
svrFwSymbolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFwSymbolValue.setStatus('mandatory')
if mibBuilder.loadTexts: svrFwSymbolValue.setDescription('The symbol value. Null if none or unknown.')
svrCpuPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrCpuPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuPollInterval.setDescription('In seconds, interval between polls for utilization. Values less than svrCpuMinPollInterval are erroneous except for 0, which disables polling.')
svrCpuMinPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuMinPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuMinPollInterval.setDescription('In seconds, minimum allowable time between polls for this implementation. Must be greater than 0. ')
svrCpuTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3), )
if mibBuilder.loadTexts: svrCpuTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuTable.setDescription('Table of central processors on this system and their base configuration data. This is an extension to the hrDeviceTable of the Host Resources MIB; RFC1514. The cache and utilization data are conceptual dimensions added to this table.')
svrCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrCpuIndex"))
if mibBuilder.loadTexts: svrCpuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuEntry.setDescription('Each entry represents one distinct processor in the system.')
svrCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuIndex.setDescription('Locally-unique index value for this CPU entry.')
svrCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("i386", 3), ("i486", 4), ("pentium", 5), ("pentiumPro", 6), ("alpha21064", 7), ("alpha21164", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuType.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuType.setDescription('The processor type.')
svrCpuManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuManufacturer.setDescription('The manufacturer of this processor. ')
svrCpuRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuRevision.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuRevision.setDescription('Version information in processor-specific format.')
svrCpuFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuFruIndex.setDescription('The index of the FRU entry in the FRU table describing the asset info of the component containing this processor. 0 if unknown.')
svrCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuSpeed.setDescription('in MHz, 0 if unknown')
svrCpuUtilCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuUtilCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuUtilCurrent.setDescription('Percentage of cpu utilization over the last svrCpuPollInterval.')
svrCpuAvgNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuAvgNextIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuAvgNextIndex.setDescription('Next available index for creating a cpu utilization averaging interval.')
svrCpuHrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuHrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuHrIndex.setDescription('Reference to index of hrDeviceEntry for this cpu in Host Resources MIB. 0 if unknown.')
svrCpuAvgTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4), )
if mibBuilder.loadTexts: svrCpuAvgTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuAvgTable.setDescription('Extension to svrCpuTable, this table contains utilization averages maintained over a set of manager-settable intervals.')
svrCpuAvgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrCpuIndex"), (0, "SVRSYS-MIB", "svrCpuAvgIndex"))
if mibBuilder.loadTexts: svrCpuAvgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuAvgEntry.setDescription('Entry describes a CPU, an interval over which CPU utilization is averaged, and average utilization measured at the last interval')
svrCpuAvgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuAvgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuAvgIndex.setDescription('Local index. May have implementation max.')
svrCpuAvgInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrCpuAvgInterval.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuAvgInterval.setDescription('In minutes, averaging interval for this entry.')
svrCpuAvgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("underCreation", 1), ("rowInvalid", 2), ("rowEnabled", 3), ("rowDisabled", 4), ("rowError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrCpuAvgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuAvgStatus.setDescription(' This variable describes the status of the row. When the row is created with the initial set, svrCpuAvgStatus must be set to underCreation. When the management console has completed row setup, it should set this variable to rowEnabled. Variables in the row may only be written if svrCpuAvgStatus is in the initial underCreation state or has been set to rowDisabled. To delete the row, set the status to rowInvalid. It is a local implementation matter whether the row is actually removed from the table. Management applications must be prepared to ignore rows with a status of rowInvalid. Errors in cpu utilization polling and averaging that are determined by local implementation to be non-correctable will cause a row status change to rowError.')
svrCpuAvgPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 4), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrCpuAvgPersist.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuAvgPersist.setDescription('True if this row is to persist across agent restarts.')
svrCpuAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuAvgValue.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuAvgValue.setDescription('Averaged load over the last measured interval. First set to instantaneous utilization.')
svrCpuCacheTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5), )
if mibBuilder.loadTexts: svrCpuCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuCacheTable.setDescription('Extension of svrCpuTable describing the caches used by each of the system processors.')
svrCpuCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrCpuIndex"), (0, "SVRSYS-MIB", "svrCpuCacheIndex"))
if mibBuilder.loadTexts: svrCpuCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuCacheEntry.setDescription('An entry describes a single cache for a single cpu.')
svrCpuCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuCacheIndex.setDescription('Local index value.')
svrCpuCacheLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("primary", 3), ("secondary", 4), ("tertiary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheLevel.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuCacheLevel.setDescription('Level 1 or Level 2 or Level 3 cache. Or other or unknown.')
svrCpuCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("internalI", 3), ("internalD", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheType.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuCacheType.setDescription('Type of cache - Internal, external, internal instruction or internal data.')
svrCpuCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 4), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuCacheSize.setDescription('Cache size in KBytes. ')
svrCpuCacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuCacheSpeed.setDescription('In nanoseconds, cache speed. 0 if unknown.')
svrCpuCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrCpuCacheStatus.setDescription('Current status of the cache - enabled, disabled, other or unknown.')
svrPhysicalMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 1), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPhysicalMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: svrPhysicalMemorySize.setDescription('In KBytes, total amount of physical memory as seen by the OS.')
svrPhysicalMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 2), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPhysicalMemoryFree.setStatus('mandatory')
if mibBuilder.loadTexts: svrPhysicalMemoryFree.setDescription('In KBytes, amount of free physical memory.')
svrPagingMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPagingMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: svrPagingMemorySize.setDescription('In KBytes, total virtual memory available from the OS.')
svrPagingMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 4), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPagingMemoryFree.setStatus('mandatory')
if mibBuilder.loadTexts: svrPagingMemoryFree.setDescription('In KBytes, available paging memory.')
svrMemComponentTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5), )
if mibBuilder.loadTexts: svrMemComponentTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemComponentTable.setDescription('Table describing hardware configuration of memory')
svrMemComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrMemIndex"))
if mibBuilder.loadTexts: svrMemComponentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemComponentEntry.setDescription('Entries describe physical memory hardware component.')
svrMemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemIndex.setStatus('optional')
if mibBuilder.loadTexts: svrMemIndex.setDescription('Unique index for this entry')
svrMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("systemMemory", 3), ("shadowMemory", 4), ("videoMemory", 5), ("flashMemory", 6), ("nvram", 7), ("expansionRam", 8), ("expansionROM", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemType.setStatus('optional')
if mibBuilder.loadTexts: svrMemType.setDescription('Type of memory may be system, shadow, bios, video, ....')
svrMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemSize.setStatus('optional')
if mibBuilder.loadTexts: svrMemSize.setDescription('In KBytes, length of memory range')
svrMemStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 4), MemoryAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemStartAddress.setStatus('optional')
if mibBuilder.loadTexts: svrMemStartAddress.setDescription('64-bit starting address of memory contained on or controlled by this component.')
svrMemPhysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("systemBoard", 3), ("memoryBoard", 4), ("processorBoard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemPhysLocation.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemPhysLocation.setDescription('Location of the memory.')
svrMemEdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("none", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemEdcType.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemEdcType.setDescription('Type of error detection & correction(EDC) provided for memory contained on or controlled by this component.')
svrMemElementSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementSlots.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementSlots.setDescription('Total number of slots for removeable memory elements (simms, dimms, etc). 0 if unknown.')
svrMemElementSlotsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementSlotsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementSlotsUsed.setDescription('Total number of slots occupied by removable memory elements. 0 if unknown.')
svrMemInterleafFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemInterleafFactor.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemInterleafFactor.setDescription('Interleaving factor. 0 if unknown, 1 if none, 2 if 2-way, etc...')
svrMemInterleafElement = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemInterleafElement.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemInterleafElement.setDescription('Which element this is in interleaving. 0 if non-interleaved.')
svrMemFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemFruIndex.setDescription('Index of the FRU entry in the FRU table on which this memory resides, if known. 0 if unknown.')
svrMemElementTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6), )
if mibBuilder.loadTexts: svrMemElementTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementTable.setDescription('An extension to the svrMemComponentTable, this table describes the actual memory hardware elements. If the memory component does not lend itself to decomposition by element, there may be a generic element entry listed to hold the attributes.')
svrMemElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrMemIndex"), (0, "SVRSYS-MIB", "svrMemElementIndex"))
if mibBuilder.loadTexts: svrMemElementEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementEntry.setDescription('A chunk of memory which may be non-removable, a SIMM, a DIMM or some undefined piece.')
svrMemElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementIndex.setDescription('A local index value.')
svrMemElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("nonremoveable", 3), ("simm", 4), ("dimm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementType.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementType.setDescription('Whether non-removable, SIMM, DIMM, etc.')
svrMemElementSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementSlotNo.setDescription('If removeable, the slot number in which it resides. 0 if unknown.')
svrMemElementWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementWidth.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementWidth.setDescription('In bytes, width if known. 0 if unknown.')
svrMemElementDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 5), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementDepth.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementDepth.setDescription('In KBytes, depth if known. 0 if unknown.')
svrMemElementSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementSpeed.setDescription('In nanoseconds, speed as used. May be less than maximum possible speed. 0 if unknown.')
svrMemElementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 7), SystemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrMemElementStatus.setDescription('Current status of the element.')
svrBusCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrBusCount.setDescription('Number of buses seen by the system.')
svrBusTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2), )
if mibBuilder.loadTexts: svrBusTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrBusTable.setDescription('Each entry represents a bus as seen by the OS.')
svrBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrBusIndex"))
if mibBuilder.loadTexts: svrBusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrBusEntry.setDescription('Entry describing a single bus.')
svrBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrBusIndex.setDescription('A locally-unique index value.')
svrBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1, 2), BusTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusType.setStatus('mandatory')
if mibBuilder.loadTexts: svrBusType.setDescription('Type of bus this represents.')
svrBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svrBusNumber.setDescription('The bus number, unique among buses of this type')
svrBusSlotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusSlotCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrBusSlotCount.setDescription('Number of physical slots on this bus. 0 if unknown.')
svrLogicalSlotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3), )
if mibBuilder.loadTexts: svrLogicalSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrLogicalSlotTable.setDescription('Table on logical bus slots. Indexed by busIndex & slot number. May be more logical slots than physical slots.')
svrLogicalSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrBusIndex"), (0, "SVRSYS-MIB", "svrLogicalSlotNumber"))
if mibBuilder.loadTexts: svrLogicalSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrLogicalSlotEntry.setDescription('Represents a slot as seen by OS. May not have associated physical slot.')
svrLogicalSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svrLogicalSlotNumber.setDescription('Unique logical slot number on a given bus.')
svrLogicalSlotDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrLogicalSlotDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrLogicalSlotDescr.setDescription('Device description derived from ID, or as set by mgt station.')
svrLogicalSlotDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotDeviceID.setStatus('mandatory')
if mibBuilder.loadTexts: svrLogicalSlotDeviceID.setDescription('Vendor-supplied ID of device.')
svrLogicalSlotVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotVendor.setStatus('mandatory')
if mibBuilder.loadTexts: svrLogicalSlotVendor.setDescription('Name of manufacturer derived from vendor ID, the vendor ID itself or null if unknown.')
svrLogicalSlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotRevision.setStatus('mandatory')
if mibBuilder.loadTexts: svrLogicalSlotRevision.setDescription('Vendor supplied major and minor revision of device in this slot.')
svrLogicalSlotFnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotFnCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrLogicalSlotFnCount.setDescription('Number of functions for multi-function device. Usually 1 for PCI devices.')
svrSlotFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4), )
if mibBuilder.loadTexts: svrSlotFunctionTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrSlotFunctionTable.setDescription('An extension to the logical slot table, describes the functions on the device. Often, there will be only 1.')
svrSlotFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrBusIndex"), (0, "SVRSYS-MIB", "svrLogicalSlotNumber"), (0, "SVRSYS-MIB", "svrSlotFnIndex"))
if mibBuilder.loadTexts: svrSlotFunctionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrSlotFunctionEntry.setDescription('Each entry describes a device function at this logical slot.')
svrSlotFnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSlotFnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrSlotFnIndex.setDescription('A local index value.')
svrSlotFnDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSlotFnDevType.setStatus('mandatory')
if mibBuilder.loadTexts: svrSlotFnDevType.setDescription('Device type represented by this function. May be derived by table lookup of device id.')
svrSlotFnRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSlotFnRevision.setStatus('mandatory')
if mibBuilder.loadTexts: svrSlotFnRevision.setDescription('Revision of the device function.')
svrDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDeviceCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrDeviceCount.setDescription('Number of entries in svrDeviceTable')
svrSerialPortCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSerialPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrSerialPortCount.setDescription('Number of entries in svrSerialPortTable')
svrParallelPortCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrParallelPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrParallelPortCount.setDescription('Number of entries in svrParallelPortTable')
svrKeybdHrIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrKeybdHrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrKeybdHrIndex.setDescription('Index of the hrDeviceEntry in Host Resources MIB. 0 if unknown.')
svrKeybdDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrKeybdDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrKeybdDescr.setDescription('Textual description provide by OS.')
svrVideoHrIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoHrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrVideoHrIndex.setDescription('Index in Host Devices table. 0 if unknown.')
svrVideoDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrVideoDescr.setDescription('Text description supplied by OS')
svrVideoXRes = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoXRes.setStatus('mandatory')
if mibBuilder.loadTexts: svrVideoXRes.setDescription('X-axis resolution.')
svrVideoYRes = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoYRes.setStatus('mandatory')
if mibBuilder.loadTexts: svrVideoYRes.setDescription('Y-axis resolution.')
svrVideoNumColor = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoNumColor.setStatus('mandatory')
if mibBuilder.loadTexts: svrVideoNumColor.setDescription('Number of colors (converted, if necessary, from bits-per-pixel).')
svrVideoRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: svrVideoRefreshRate.setDescription('In Hz, current refresh rate. 0 if unavailable, 1 if hardware default rate.')
svrVideoScanMode = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("interlaced", 2), ("nonInterlaced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoScanMode.setStatus('mandatory')
if mibBuilder.loadTexts: svrVideoScanMode.setDescription('Whether or not this is interlaced, if we know.')
svrVideoMemory = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 8), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoMemory.setStatus('mandatory')
if mibBuilder.loadTexts: svrVideoMemory.setDescription('Amount of video memory available or in use, in KBytes.')
svrPointingHrIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPointingHrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrPointingHrIndex.setDescription('Index in host devices table. 0 if unknown.')
svrPointingDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPointingDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrPointingDescr.setDescription('Description provided by host OS.')
svrNumButtons = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrNumButtons.setStatus('mandatory')
if mibBuilder.loadTexts: svrNumButtons.setDescription('Number of buttons on this mouse.')
svrSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7), )
if mibBuilder.loadTexts: svrSerialPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrSerialPortTable.setDescription('Serial port information.')
svrSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrSerialIndex"))
if mibBuilder.loadTexts: svrSerialPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrSerialPortEntry.setDescription('Each entry describes a serial port in this system.')
svrSerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSerialIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrSerialIndex.setDescription('Locally-unique index value.')
svrSerialPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSerialPortDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrSerialPortDescr.setDescription('Text description of port.')
svrSerialHrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSerialHrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrSerialHrIndex.setDescription('The hrDeviceIndex value from the hrDeviceEntry in the Host Resources MIB describing this port. 0 if unknown.')
svrParallelPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8), )
if mibBuilder.loadTexts: svrParallelPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrParallelPortTable.setDescription('Parallel port information.')
svrParallelPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrParallelIndex"))
if mibBuilder.loadTexts: svrParallelPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrParallelPortEntry.setDescription('Each entry describes a parallel port in this system.')
svrParallelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrParallelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrParallelIndex.setDescription('Locally-unique index value.')
svrParallelPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrParallelPortDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrParallelPortDescr.setDescription('Text description of port device as seen by OS.')
svrParallelHrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrParallelHrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrParallelHrIndex.setDescription('Reference to index of hrDeviceEntry for this port in Host Resources MIB. 0 if unknown.')
svrDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9), )
if mibBuilder.loadTexts: svrDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrDeviceTable.setDescription('Device configuration or adapter device as seen by the Host OS.')
svrDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrDevIndex"))
if mibBuilder.loadTexts: svrDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrDeviceEntry.setDescription('Each entry represents one resource as seen by the Host OS.')
svrDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevIndex.setDescription('Local unique integer value for this entry')
svrDevDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevDescr.setDescription('String description of the device as seen by the OS.')
svrDevBusInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 3), BusTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevBusInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevBusInterfaceType.setDescription('Type of bus for this interface.')
svrDevBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevBusNumber.setDescription('The index of bus on which this device resides (0=internal)')
svrDevSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevSlotNumber.setDescription('The logical slot number where this device resides. 0 if unknown.')
svrDevFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevFruIndex.setDescription('The index of the FRU entry in the FRU table that contains this device. 0 if unknown.')
svrDevCPUAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevCPUAffinity.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevCPUAffinity.setDescription('Bit map describing processors to which interrupts are dispatched. Use first IRQL entry if they are different. Bit position = cpu # starting from Least Significant Bit (LSB).')
svrDevHrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevHrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevHrIndex.setDescription('Index of the device in the Host Resources MIB device table. 0 if unknown.')
svrDevInterruptTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10), )
if mibBuilder.loadTexts: svrDevInterruptTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevInterruptTable.setDescription('Table of interrupt configurations for this device. Extension to svrDeviceTable.')
svrDevIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrDevIndex"), (0, "SVRSYS-MIB", "svrDevIntIndex"))
if mibBuilder.loadTexts: svrDevIntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevIntEntry.setDescription('Each entry describes one interrupt for the device.')
svrDevIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevIntIndex.setDescription('Implementation-specific index of entry')
svrDevIntLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntLevel.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevIntLevel.setDescription('OS interrupt-level for which this device is configured. IRQL in Windows NT.')
svrDevIntVector = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntVector.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevIntVector.setDescription('Interrupt vector.')
svrDevIntShared = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 4), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntShared.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevIntShared.setDescription('True if interrupt is shared.')
svrDevIntTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level", 1), ("latch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevIntTrigger.setDescription('Trigger type - level or edge')
svrDevMemTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11), )
if mibBuilder.loadTexts: svrDevMemTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevMemTable.setDescription('Table of memory configuration used by this adapter device. Extension to svrDeviceTable.')
svrDevMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrDevIndex"), (0, "SVRSYS-MIB", "svrDevMemIndex"))
if mibBuilder.loadTexts: svrDevMemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevMemEntry.setDescription('A single memory address configuration for this device.')
svrDevMemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevMemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevMemIndex.setDescription('Implementation-specific index value.')
svrDevMemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1, 2), MemoryAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevMemAddress.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevMemAddress.setDescription('Physical address of the start of the memory range.')
svrDevMemLength = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevMemLength.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevMemLength.setDescription('In bytes, size of the memory range.')
svrDevMemMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("memoryMapped", 3), ("ioSpaceMapped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevMemMapping.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevMemMapping.setDescription('Whether this is memory mapped or I/O mapped address space.')
svrDevDmaTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 12), )
if mibBuilder.loadTexts: svrDevDmaTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevDmaTable.setDescription('Table of DMA configurations for this device.')
svrDevDmaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 12, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrDevIndex"), (0, "SVRSYS-MIB", "svrDevDmaIndex"))
if mibBuilder.loadTexts: svrDevDmaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevDmaEntry.setDescription('Each entry describes use of a DMA channel.')
svrDevDmaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevDmaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevDmaIndex.setDescription('Implementation-specific index value')
svrDevDmaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevDmaChannel.setStatus('mandatory')
if mibBuilder.loadTexts: svrDevDmaChannel.setDescription('Channel on DMA controller')
svrChassisType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("desktop", 3), ("tower", 4), ("miniTower", 5), ("rackMount", 6), ("laptop", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: svrChassisType.setDescription('A description of the type of box in which this system resides.')
svrChassisFruIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrChassisFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrChassisFruIndex.setDescription('The index of the chassis FRU descriptor in the FRU table. 0 if unknown.')
svrFruTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3), )
if mibBuilder.loadTexts: svrFruTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruTable.setDescription('Table of Field Replaceable Units of system, providing inventory and asset control information. This table is referenced from logical hardware descriptions elsewhere in the MIB.')
svrFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrFruIndex"))
if mibBuilder.loadTexts: svrFruEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruEntry.setDescription('Each entry represents a Field Replaceable Unit (FRU) of hardware.')
svrFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruIndex.setDescription('A locally-unique index value.')
svrFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("motherBoard", 3), ("processor", 4), ("memoryCard", 5), ("memoryModule", 6), ("peripheralDevice", 7), ("systemBusBridge", 8), ("powerSupply", 9), ("chassis", 10), ("fan", 11), ("ioCard", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruType.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruType.setDescription('General category of the type of FRU that this is.')
svrFruDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrFruDescr.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruDescr.setDescription('More detailed description of FRU type, if known.')
svrFruVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruVendor.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruVendor.setDescription('Manufacturer name or ID.')
svrFruPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruPartNumber.setDescription('Number by which this unit is orderable.')
svrFruRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruRevision.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruRevision.setDescription("Version number of this unit. If artwork level is available, it will appear as 'Artwork: XXX' following FRU version portion.")
svrFruFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruFirmwareRevision.setDescription('The revision of the firmware, if any. Otherwise null.')
svrFruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruSerialNumber.setDescription("The serial number of this unit's instance.")
svrFruAssetNo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrFruAssetNo.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruAssetNo.setDescription('The asset number for unit.')
svrFruClass = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("currentBoardInSlot", 3), ("priorBoardInSlot", 4), ("parentBoard", 5), ("priorParentBoard", 6), ("priorParentSystem", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruClass.setStatus('mandatory')
if mibBuilder.loadTexts: svrFruClass.setDescription('Represents the status category of the unit. ')
svrThermalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThermalSensorCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrThermalSensorCount.setDescription('The number of thermal sensors present and readable in this system. ')
svrThermalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2), )
if mibBuilder.loadTexts: svrThermalSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrThermalSensorTable.setDescription('Table of thermal sensors in the system. May be gauges or status indicators. Not present if svrThermalSensorCount = 0.')
svrThermalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrThSensorIndex"))
if mibBuilder.loadTexts: svrThermalSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrThermalSensorEntry.setDescription('A single temperature gauge or status indicator.')
svrThSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorIndex.setDescription('A locally-unique index value.')
svrThSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThSensorLocation.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorLocation.setDescription('May be system box, main CPU, etc. Null if unknown.')
svrThSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorReading.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorReading.setDescription('The current value read by the sensor, in units described by svrThSensorReadingUnits.')
svrThSensorReadingUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 4), ThermUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorReadingUnits.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorReadingUnits.setDescription('Whether this sensor reads degrees Fahrenheit, Celsius, or relative value. If no reading is available, value will be unknown.')
svrThSensorLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorLowThresh.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorLowThresh.setDescription('Default value for low temperature threshold. Units are as described in svrThSensorThreshUnits.')
svrThSensorHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorHighThresh.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorHighThresh.setDescription('Default value for high temperature threshold. Units are as described in svrThSensorThreshUnits.')
svrThSensorShutSoonThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorShutSoonThresh.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorShutSoonThresh.setDescription('Default value for Shutdown Soon temperature threshold. Units are as described in svrThSensorThreshUnits.')
svrThSensorShutNowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorShutNowThresh.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorShutNowThresh.setDescription('Default value for Shutdown Now temperature threshold. Units are as described in svrThSensorThreshUnits.')
svrThSensorThreshUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 9), ThermUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorThreshUnits.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorThreshUnits.setDescription('Represents how all the threshold values should be interpreted. If default thresholds not supported, value will be unknown.')
svrThSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("low", 3), ("lowWarning", 4), ("statusOk", 5), ("highWarning", 6), ("high", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorStatus.setDescription('Status value of the sensor. ')
svrThSensorFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrThSensorFruIndex.setDescription('Index to the FRU entry in the FRU table on which this sensor resides, if known. 0 if unknown.')
svrFanCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrFanCount.setDescription('Number of fans whose state is detectable. ')
svrFanTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2), )
if mibBuilder.loadTexts: svrFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrFanTable.setDescription('Table of fans in system. Not present if svrFanCount = 0.')
svrFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrFanIndex"))
if mibBuilder.loadTexts: svrFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrFanEntry.setDescription('One per detectable fan.')
svrFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrFanIndex.setDescription('A locally-unique index value.')
svrFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrFanLocation.setStatus('mandatory')
if mibBuilder.loadTexts: svrFanLocation.setDescription('Location of the fan. Null if unknown.')
svrFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("backup", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrFanStatus.setDescription('Current status of fan.')
svrFanBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanBackup.setStatus('mandatory')
if mibBuilder.loadTexts: svrFanBackup.setDescription('The index of the fan for which this is backup. 0 if unknown or n/a.')
svrFanFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrFanFruIndex.setDescription('The index of the FRU entry in the FRU table containing this fan, if known. 0 if unknown.')
svrPowerRedunEnable = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 1), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerRedunEnable.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerRedunEnable.setDescription('Is redunancy enabled in this power supply subsystem?')
svrPowerSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorCount.setDescription('The number of detectable voltage sensors represented in svrVoltageSensorTable.')
svrPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSupplyCount.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSupplyCount.setDescription('The number of detectable power supplies reflected as entries in the svrPowerSupplyTable.')
svrPowerSensorTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4), )
if mibBuilder.loadTexts: svrPowerSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorTable.setDescription('Table of power supplies - voltage or current. Not present if svrPowerSensorCount = 0.')
svrPowerSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrPowerSensorIndex"))
if mibBuilder.loadTexts: svrPowerSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorEntry.setDescription('One entry per detectable voltage or current sensor.')
svrPowerSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorIndex.setDescription('A locally-unique index value.')
svrPowerSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrPowerSensorLocation.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorLocation.setDescription('Description of physical location in system if known. Null if unknown. ')
svrPowerSensorRating = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorRating.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorRating.setDescription('Nominal rating for this sensor, in units expressed by svrPowerSensorReadingUnits. If not supported, value will be unknown.')
svrPowerSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorReading.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorReading.setDescription('Current state of voltage or current as detected by this sensor in units described by svrPowerSensorReadingUnits.')
svrPowerSensorReadingUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 5), PowerUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorReadingUnits.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorReadingUnits.setDescription('Volts AC, DC, amperes AC, DC, ... If not supported, value will be unknown.')
svrPowerSensorNeedPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorNeedPwrThresh.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorNeedPwrThresh.setDescription('Default value for Need More Power voltage threshold. Units are as described in svrPowerSensorThreshUnits.')
svrPowerSensorLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorLowThresh.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorLowThresh.setDescription('Default value for low voltage threshold. Units are as described in svrPowerSensorThreshUnits.')
svrPowerSensorHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorHighThresh.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorHighThresh.setDescription('Default value for high voltage threshold. Units are as described in svrPowerSensorThreshUnits.')
svrPowerSensorShutNowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorShutNowThresh.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorShutNowThresh.setDescription('Default value for Shutdown Now voltage threshold. Units are as described in svrPowerSensorThreshUnits.')
svrPowerSensorThreshUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 10), PowerUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorThreshUnits.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorThreshUnits.setDescription('Represents how all the threshold values should be interpreted. If default thresholds not supported, value will be unknown.')
svrPowerSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("low", 3), ("lowWarning", 4), ("statusOk", 5), ("highWarning", 6), ("high", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorStatus.setDescription('Status value of the sensor. ')
svrPowerSensorFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSensorFruIndex.setDescription('The index of the FRU entry in the FRU table containing this sensor, if known. 0 if unknown.')
svrPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5), )
if mibBuilder.loadTexts: svrPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSupplyTable.setDescription('Table of power supply information. Not present if svrPowerSupplyCount = 0.')
svrPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrPowerSupplyIndex"))
if mibBuilder.loadTexts: svrPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSupplyEntry.setDescription('One entry per detectable power supply.')
svrPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSupplyIndex.setDescription('A locally-unique index value.')
svrPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("backup", 3), ("warning", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSupplyStatus.setDescription('Current state of the power supply.')
svrPowerSupplyFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSupplyFruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: svrPowerSupplyFruIndex.setDescription('The index of the FRUentry in the FRU table containing this power supply, if known. 0 if unknown.')
mibBuilder.exportSymbols("SVRSYS-MIB", svrThSensorLocation=svrThSensorLocation, svrCpuManufacturer=svrCpuManufacturer, svrPowerSensorFruIndex=svrPowerSensorFruIndex, svrCpuIndex=svrCpuIndex, svrSlotFunctionEntry=svrSlotFunctionEntry, svrDevMemLength=svrDevMemLength, svrParallelIndex=svrParallelIndex, svrDevMemEntry=svrDevMemEntry, svrSystemRemoteMgrNum=svrSystemRemoteMgrNum, svrCpuCacheLevel=svrCpuCacheLevel, svrMemElementSlotNo=svrMemElementSlotNo, svrPowerSensorThreshUnits=svrPowerSensorThreshUnits, svrFirmwareDescr=svrFirmwareDescr, svrDeviceCount=svrDeviceCount, svrVideoXRes=svrVideoXRes, svrDevIntEntry=svrDevIntEntry, svrThSensorReading=svrThSensorReading, svrPowerSensorStatus=svrPowerSensorStatus, svrMemType=svrMemType, svrCoolingSystem=svrCoolingSystem, svrFwSymbolEntry=svrFwSymbolEntry, svrLogicalSlotVendor=svrLogicalSlotVendor, svrCpuRevision=svrCpuRevision, svrBusCount=svrBusCount, svrDevDescr=svrDevDescr, svrSerialPortEntry=svrSerialPortEntry, svrVideoScanMode=svrVideoScanMode, svrPointingDescr=svrPointingDescr, svrDevIntIndex=svrDevIntIndex, svrLogicalSlotTable=svrLogicalSlotTable, svrBusNumber=svrBusNumber, svrCpuSpeed=svrCpuSpeed, ThermUnits=ThermUnits, svrSystemShutdownReason=svrSystemShutdownReason, svrMemStartAddress=svrMemStartAddress, svrCpuAvgValue=svrCpuAvgValue, svrSlotFunctionTable=svrSlotFunctionTable, svrCpuCacheIndex=svrCpuCacheIndex, svrNumButtons=svrNumButtons, svrDeviceTable=svrDeviceTable, svrDevHrIndex=svrDevHrIndex, svrCpuAvgPersist=svrCpuAvgPersist, svrDevMemIndex=svrDevMemIndex, svrThermalSensorTable=svrThermalSensorTable, svrMemIndex=svrMemIndex, svrDevBusInterfaceType=svrDevBusInterfaceType, svrPowerSensorRating=svrPowerSensorRating, svrDevices=svrDevices, svrCpuAvgEntry=svrCpuAvgEntry, svrMemElementEntry=svrMemElementEntry, svrThSensorShutNowThresh=svrThSensorShutNowThresh, BusTypes=BusTypes, svrFanStatus=svrFanStatus, svrFruTable=svrFruTable, svrPowerSensorReadingUnits=svrPowerSensorReadingUnits, svrParallelPortDescr=svrParallelPortDescr, svrFwSymbolName=svrFwSymbolName, svrMemSize=svrMemSize, svrMemComponentTable=svrMemComponentTable, svrFruSerialNumber=svrFruSerialNumber, svrCpuHrIndex=svrCpuHrIndex, svrDevIntVector=svrDevIntVector, svrPowerRedunEnable=svrPowerRedunEnable, svrSystemDescr=svrSystemDescr, svrPowerSupplyIndex=svrPowerSupplyIndex, svrMemElementSlots=svrMemElementSlots, svrCpuCacheSpeed=svrCpuCacheSpeed, svrFruVendor=svrFruVendor, svrFruFirmwareRevision=svrFruFirmwareRevision, svrSlotFnDevType=svrSlotFnDevType, svrFanTable=svrFanTable, svrDevMemTable=svrDevMemTable, svrPowerSensorTable=svrPowerSensorTable, svrLogicalSlotEntry=svrLogicalSlotEntry, dec=dec, svrDevSlotNumber=svrDevSlotNumber, svrThermalSensorEntry=svrThermalSensorEntry, svrLogicalSlotDescr=svrLogicalSlotDescr, svrCpuEntry=svrCpuEntry, svrFanIndex=svrFanIndex, svrThSensorHighThresh=svrThSensorHighThresh, svrKeybdHrIndex=svrKeybdHrIndex, svrThSensorFruIndex=svrThSensorFruIndex, svrThSensorShutSoonThresh=svrThSensorShutSoonThresh, svrFirmwareEntry=svrFirmwareEntry, svrCpuTable=svrCpuTable, svrLogicalSlotRevision=svrLogicalSlotRevision, svrSerialPortTable=svrSerialPortTable, svrSysMibInfo=svrSysMibInfo, svrPowerSystem=svrPowerSystem, svrFirmwareTable=svrFirmwareTable, svrParallelPortEntry=svrParallelPortEntry, svrPowerSensorShutNowThresh=svrPowerSensorShutNowThresh, svrParallelHrIndex=svrParallelHrIndex, svrThSensorLowThresh=svrThSensorLowThresh, svrPowerSensorNeedPwrThresh=svrPowerSensorNeedPwrThresh, svrPagingMemoryFree=svrPagingMemoryFree, svrBusTable=svrBusTable, svrDevCPUAffinity=svrDevCPUAffinity, svrChassisFruIndex=svrChassisFruIndex, svrFruType=svrFruType, svrSerialIndex=svrSerialIndex, svrFanEntry=svrFanEntry, svrCpuAvgTable=svrCpuAvgTable, svrPowerSensorIndex=svrPowerSensorIndex, svrDevBusNumber=svrDevBusNumber, svrMemElementStatus=svrMemElementStatus, svrSystemBootedOSVersion=svrSystemBootedOSVersion, svrConsoleDisplay=svrConsoleDisplay, svrCpuPollInterval=svrCpuPollInterval, Boolean=Boolean, ema=ema, svrPowerSensorHighThresh=svrPowerSensorHighThresh, svrLogicalSlotDeviceID=svrLogicalSlotDeviceID, svrSystemBoardFruIndex=svrSystemBoardFruIndex, svrMemFruIndex=svrMemFruIndex, svrBaseSystem=svrBaseSystem, svrConsoleKeyboard=svrConsoleKeyboard, svrCpuType=svrCpuType, svrPointingHrIndex=svrPointingHrIndex, svrThSensorThreshUnits=svrThSensorThreshUnits, svrPowerSupplyTable=svrPowerSupplyTable, svrMemory=svrMemory, svrMemInterleafElement=svrMemInterleafElement, svrVideoNumColor=svrVideoNumColor, svrFanCount=svrFanCount, svrFruDescr=svrFruDescr, svrPowerSupplyFruIndex=svrPowerSupplyFruIndex, svrDevIntTrigger=svrDevIntTrigger, svrBusEntry=svrBusEntry, svrFanLocation=svrFanLocation, svrEnvironment=svrEnvironment, svrMemEdcType=svrMemEdcType, svrDevIndex=svrDevIndex, svrDevMemMapping=svrDevMemMapping, svrFruIndex=svrFruIndex, svrVideoMemory=svrVideoMemory, svrFruClass=svrFruClass, svrPowerSensorLowThresh=svrPowerSensorLowThresh, svrFwSymbolValue=svrFwSymbolValue, svrMemElementSlotsUsed=svrMemElementSlotsUsed, svrParallelPortCount=svrParallelPortCount, svrFanBackup=svrFanBackup, svrSerialPortCount=svrSerialPortCount, SystemStatus=SystemStatus, svrMemElementTable=svrMemElementTable, svrDevIntShared=svrDevIntShared, svrDevDmaEntry=svrDevDmaEntry, svrThSensorIndex=svrThSensorIndex, svrCpuAvgStatus=svrCpuAvgStatus, svrPhysicalConfiguration=svrPhysicalConfiguration, svrProcessors=svrProcessors, svrCpuCacheSize=svrCpuCacheSize, svrCpuFruIndex=svrCpuFruIndex, svrCpuAvgNextIndex=svrCpuAvgNextIndex, svrKeybdDescr=svrKeybdDescr, svrCpuUtilCurrent=svrCpuUtilCurrent, svrMemPhysLocation=svrMemPhysLocation, svrVideoHrIndex=svrVideoHrIndex, svrChassisType=svrChassisType, svrDevMemAddress=svrDevMemAddress, svrPhysicalMemorySize=svrPhysicalMemorySize, svrSystem=svrSystem, svrMemElementSpeed=svrMemElementSpeed, svrFruEntry=svrFruEntry, svrMemElementWidth=svrMemElementWidth, svrCpuAvgInterval=svrCpuAvgInterval, svrPowerSensorCount=svrPowerSensorCount, svrPowerSupplyStatus=svrPowerSupplyStatus, svrPowerSensorEntry=svrPowerSensorEntry, PowerUnits=PowerUnits, MemoryAddress=MemoryAddress, svrBusSlotCount=svrBusSlotCount, svrSystemBootedOS=svrSystemBootedOS, svrCpuCacheEntry=svrCpuCacheEntry, svrSlotFnIndex=svrSlotFnIndex, KBytes=KBytes, svrVideoRefreshRate=svrVideoRefreshRate, svrFruPartNumber=svrFruPartNumber, svrCpuCacheStatus=svrCpuCacheStatus, svrDevFruIndex=svrDevFruIndex, svrVideoDescr=svrVideoDescr, svrCpuMinPollInterval=svrCpuMinPollInterval, svrThermalSystem=svrThermalSystem, svrLogicalSlotNumber=svrLogicalSlotNumber, svrDevIntLevel=svrDevIntLevel, svrDevDmaChannel=svrDevDmaChannel, svrFirmwareRev=svrFirmwareRev, svrDevDmaTable=svrDevDmaTable, svrThSensorReadingUnits=svrThSensorReadingUnits, svrSerialHrIndex=svrSerialHrIndex, mib_extensions_1=mib_extensions_1, svrSysMibMinorRev=svrSysMibMinorRev, svrLogicalSlotFnCount=svrLogicalSlotFnCount, svrPowerSupplyCount=svrPowerSupplyCount, svrSystemFamily=svrSystemFamily, svrCpuCacheType=svrCpuCacheType, svrDevDmaIndex=svrDevDmaIndex, svrPhysicalMemoryFree=svrPhysicalMemoryFree, svrThSensorStatus=svrThSensorStatus, svrThermalSensorCount=svrThermalSensorCount, svrBuses=svrBuses, svrCpuCacheTable=svrCpuCacheTable, svrVideoYRes=svrVideoYRes, svrSerialPortDescr=svrSerialPortDescr, svrSysMibMajorRev=svrSysMibMajorRev, svrParallelPortTable=svrParallelPortTable, svrSystemOCPDisplay=svrSystemOCPDisplay, svrFruAssetNo=svrFruAssetNo, svrDeviceEntry=svrDeviceEntry, svrConsolePointDevice=svrConsolePointDevice, svrMemElementType=svrMemElementType, svrMemElementIndex=svrMemElementIndex, svrBaseSysDescr=svrBaseSysDescr, svrSystemModel=svrSystemModel, svrFwSymbolTable=svrFwSymbolTable, svrMemInterleafFactor=svrMemInterleafFactor, svrSlotFnRevision=svrSlotFnRevision, svrFanFruIndex=svrFanFruIndex, svrPowerSupplyEntry=svrPowerSupplyEntry, svrPowerSensorLocation=svrPowerSensorLocation, svrBusIndex=svrBusIndex, svrBusType=svrBusType, svrFirmwareIndex=svrFirmwareIndex, svrCpuAvgIndex=svrCpuAvgIndex, svrDevInterruptTable=svrDevInterruptTable, svrPagingMemorySize=svrPagingMemorySize, svrPowerSensorReading=svrPowerSensorReading, svrFruRevision=svrFruRevision, svrMemElementDepth=svrMemElementDepth, svrMemComponentEntry=svrMemComponentEntry)
