#
# PySNMP MIB module ZYXEL-TRANSCEIVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-TRANSCEIVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Integer32, Counter64, Bits, ObjectIdentity, MibIdentifier, TimeTicks, iso, IpAddress, Gauge32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Integer32", "Counter64", "Bits", "ObjectIdentity", "MibIdentifier", "TimeTicks", "iso", "IpAddress", "Gauge32", "ModuleIdentity", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelTransceiver = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84))
if mibBuilder.loadTexts: zyxelTransceiver.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelTransceiver.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelTransceiver.setContactInfo('')
if mibBuilder.loadTexts: zyxelTransceiver.setDescription('The subtree for transceiver')
zyxelTransceiverStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1))
zyxelTransceiverTrapInfoObject = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 2))
zyxelTransceiverNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3))
zyxelTransceiverSerialTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1), )
if mibBuilder.loadTexts: zyxelTransceiverSerialTable.setStatus('current')
if mibBuilder.loadTexts: zyxelTransceiverSerialTable.setDescription('The table contains transceiver serial information.')
zyxelTransceiverSerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelTransceiverSerialEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelTransceiverSerialEntry.setDescription('An entry contains transceiver serial information.')
zyTransceiverSerialModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okWithDdm", 1), ("okWithoutDdm", 2), ("nonoperational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverSerialModuleType.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverSerialModuleType.setDescription('Transceiver module type.')
zyTransceiverSerialVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverSerialVendor.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverSerialVendor.setDescription('Transceiver module vendor name.')
zyTransceiverSerialPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverSerialPartNumber.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverSerialPartNumber.setDescription('Part number provided by transceiver module vendor.')
zyTransceiverSerialSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverSerialSerialNumber.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverSerialSerialNumber.setDescription('Serial number provided by transceiver module vendor.')
zyTransceiverSerialRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverSerialRevision.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverSerialRevision.setDescription('Revision level for part number provided by transceiver module vendor.')
zyTransceiverSerialDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverSerialDateCode.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverSerialDateCode.setDescription("Transceiver module vendor's manufacturing date code.")
zyTransceiverSerialTransceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverSerialTransceiver.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverSerialTransceiver.setDescription('Transceiver module type names.')
zyxelTransceiverDdmiTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2), )
if mibBuilder.loadTexts: zyxelTransceiverDdmiTable.setStatus('current')
if mibBuilder.loadTexts: zyxelTransceiverDdmiTable.setDescription('The table contains transceiver DDMI information.')
zyxelTransceiverDdmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ZYXEL-TRANSCEIVER-MIB", "zyTransceiverDdmiType"))
if mibBuilder.loadTexts: zyxelTransceiverDdmiEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelTransceiverDdmiEntry.setDescription('An entry contains transceiver DDMI information.')
zyTransceiverDdmiType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverDdmiType.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiType.setDescription('Transceiver DDMI information type.')
zyTransceiverDdmiAlarmMax = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverDdmiAlarmMax.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiAlarmMax.setDescription('Transceiver high alarm threshold. The unit for temperature is 0.01C The unit for voltage is 0.01V The unit for TX bias is 0.01mA The unit for TX/RX power is 0.01dbm')
zyTransceiverDdmiAlarmMin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverDdmiAlarmMin.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiAlarmMin.setDescription('Transceiver low alarm threshold. The unit for temperature is 0.01C The unit for voltage is 0.01V The unit for TX bias is 0.01mA The unit for TX/RX power is 0.01dbm')
zyTransceiverDdmiWarnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverDdmiWarnMax.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiWarnMax.setDescription('Transceiver high warn threshold. The unit for temperature is 0.01C The unit for voltage is 0.01V The unit for TX bias is 0.01mA The unit for TX/RX power is 0.01dbm')
zyTransceiverDdmiWarnMin = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverDdmiWarnMin.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiWarnMin.setDescription('Transceiver low warn threshold. The unit for temperature is 0.01C The unit for voltage is 0.01V The unit for TX bias is 0.01mA The unit for TX/RX power is 0.01dbm')
zyTransceiverDdmiCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverDdmiCurrent.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiCurrent.setDescription('Transceiver current DDMI value. The unit for temperature is 0.01C The unit for voltage is 0.01V The unit for TX bias is 0.01mA The unit for TX/RX power is 0.01dbm')
zyTransceiverDdmiDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyTransceiverDdmiDescription.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiDescription.setDescription('Transceiver DDMI description. Show N/A if transceiver DDMI is not available.')
zyTransceiverTrapOutOfRangeType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("alarmHigh", 0), ("warnHigh", 1), ("alarmLow", 2), ("warnLow", 3))))
if mibBuilder.loadTexts: zyTransceiverTrapOutOfRangeType.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverTrapOutOfRangeType.setDescription('There are the type of DDMI out of the normal operation range.')
zyTransceiverTrapOutOfRangeValue = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 2, 2), Integer32())
if mibBuilder.loadTexts: zyTransceiverTrapOutOfRangeValue.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverTrapOutOfRangeValue.setDescription('There are the value of DDMI out of the normal operation range.')
zyTransceiverDdmiTemperatureOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 1)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiTemperatureOutOfRange.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiTemperatureOutOfRange.setDescription('DDMI temperature is out of the normal operation range.')
zyTransceiverDdmiTxPowerOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 2)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiTxPowerOutOfRange.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiTxPowerOutOfRange.setDescription('DDMI TxPower is out of the normal operation range.')
zyTransceiverDdmiRxPowerOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 3)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiRxPowerOutOfRange.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiRxPowerOutOfRange.setDescription('DDMI RxPower is out of the normal operation range.')
zyTransceiverDdmiVoltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 4)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiVoltageOutOfRange.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiVoltageOutOfRange.setDescription('DDMI voltage is out of the normal operation range.')
zyTransceiverDdmiTxBiasOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 5)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiTxBiasOutOfRange.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiTxBiasOutOfRange.setDescription('DDMI TX bias is out of the normal operation range.')
zyTransceiverDdmiTemperatureOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 6)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiTemperatureOutOfRangeRecovered.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiTemperatureOutOfRangeRecovered.setDescription('DDMI temperature is recovered from out of the normal operation range.')
zyTransceiverDdmiTxPowerOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 7)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiTxPowerOutOfRangeRecovered.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiTxPowerOutOfRangeRecovered.setDescription('DDMI TxPower is recovered from out of the normal operation range.')
zyTransceiverDdmiRxPowerOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 8)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiRxPowerOutOfRangeRecovered.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiRxPowerOutOfRangeRecovered.setDescription('DDMI RxPower is recovered from out of the normal operation range.')
zyTransceiverDdmiVoltageOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 9)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiVoltageOutOfRangeRecovered.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiVoltageOutOfRangeRecovered.setDescription('DDMI voltage is recovered from out of the normal operation range.')
zyTransceiverDdmiTxBiasOutOfRangeRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 84, 3, 10)).setObjects(("IF-MIB", "ifIndex"), ("ZYXEL-TRANSCEIVER-MIB", "zyTransceiverTrapOutOfRangeType"))
if mibBuilder.loadTexts: zyTransceiverDdmiTxBiasOutOfRangeRecovered.setStatus('current')
if mibBuilder.loadTexts: zyTransceiverDdmiTxBiasOutOfRangeRecovered.setDescription('DDMI TX bias is recovered from out of the normal operation range.')
mibBuilder.exportSymbols("ZYXEL-TRANSCEIVER-MIB", zyTransceiverDdmiWarnMax=zyTransceiverDdmiWarnMax, zyTransceiverSerialDateCode=zyTransceiverSerialDateCode, zyTransceiverDdmiVoltageOutOfRangeRecovered=zyTransceiverDdmiVoltageOutOfRangeRecovered, zyTransceiverTrapOutOfRangeType=zyTransceiverTrapOutOfRangeType, zyTransceiverDdmiDescription=zyTransceiverDdmiDescription, zyTransceiverDdmiTxBiasOutOfRangeRecovered=zyTransceiverDdmiTxBiasOutOfRangeRecovered, zyTransceiverDdmiAlarmMin=zyTransceiverDdmiAlarmMin, zyxelTransceiverDdmiTable=zyxelTransceiverDdmiTable, zyTransceiverDdmiTxBiasOutOfRange=zyTransceiverDdmiTxBiasOutOfRange, zyxelTransceiverSerialTable=zyxelTransceiverSerialTable, zyxelTransceiverSerialEntry=zyxelTransceiverSerialEntry, zyTransceiverSerialVendor=zyTransceiverSerialVendor, zyTransceiverSerialRevision=zyTransceiverSerialRevision, zyxelTransceiver=zyxelTransceiver, zyTransceiverDdmiVoltageOutOfRange=zyTransceiverDdmiVoltageOutOfRange, zyTransceiverDdmiTxPowerOutOfRangeRecovered=zyTransceiverDdmiTxPowerOutOfRangeRecovered, zyTransceiverSerialModuleType=zyTransceiverSerialModuleType, zyTransceiverDdmiTemperatureOutOfRangeRecovered=zyTransceiverDdmiTemperatureOutOfRangeRecovered, zyTransceiverTrapOutOfRangeValue=zyTransceiverTrapOutOfRangeValue, zyxelTransceiverDdmiEntry=zyxelTransceiverDdmiEntry, zyTransceiverDdmiTemperatureOutOfRange=zyTransceiverDdmiTemperatureOutOfRange, zyTransceiverSerialSerialNumber=zyTransceiverSerialSerialNumber, zyTransceiverDdmiRxPowerOutOfRange=zyTransceiverDdmiRxPowerOutOfRange, zyxelTransceiverTrapInfoObject=zyxelTransceiverTrapInfoObject, zyTransceiverDdmiWarnMin=zyTransceiverDdmiWarnMin, zyTransceiverDdmiType=zyTransceiverDdmiType, zyTransceiverDdmiTxPowerOutOfRange=zyTransceiverDdmiTxPowerOutOfRange, zyxelTransceiverNotifications=zyxelTransceiverNotifications, zyTransceiverSerialPartNumber=zyTransceiverSerialPartNumber, zyxelTransceiverStatus=zyxelTransceiverStatus, zyTransceiverSerialTransceiver=zyTransceiverSerialTransceiver, zyTransceiverDdmiAlarmMax=zyTransceiverDdmiAlarmMax, PYSNMP_MODULE_ID=zyxelTransceiver, zyTransceiverDdmiRxPowerOutOfRangeRecovered=zyTransceiverDdmiRxPowerOutOfRangeRecovered, zyTransceiverDdmiCurrent=zyTransceiverDdmiCurrent)
