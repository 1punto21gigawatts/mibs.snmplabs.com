#
# PySNMP MIB module CISCO-ATM-ACCESS-LIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-ACCESS-LIST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, NotificationType, Counter64, Integer32, Bits, TimeTicks, Unsigned32, IpAddress, Gauge32, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Counter64", "Integer32", "Bits", "TimeTicks", "Unsigned32", "IpAddress", "Gauge32", "Counter32", "iso")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
ciscoAtmAccessListMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 67))
ciscoAtmAccessListMIB.setRevisions(('1996-11-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmAccessListMIB.setRevisionsDescriptions(('Initial Version of this MIB module.',))
if mibBuilder.loadTexts: ciscoAtmAccessListMIB.setLastUpdated('9611100000Z')
if mibBuilder.loadTexts: ciscoAtmAccessListMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAtmAccessListMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmAccessListMIB.setDescription('A cisco ATM access list mib module.')
ciscoAtmAccessListMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 67, 1))
ciscoAtmAddressTemplate = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 1))
ciscoAtmAddressFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2))
ciscoAtmAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 3))
class CiscoAtmAddressTemplate(DisplayString):
    description = 'A NSAP address or address template string. If it only contains hexadecimal digits, 20-octet long, it represents a single NSAP address. For example, 47.0091.8100.0000.0060.3e5b.7201.4000.0c is an NSAP address with no wild cards. If it contains one or more wild-card characters, it then represents multiple NSAP addresses as follows. An ellipsis ... matches any number of leading or trailing hexadecimal digits. For example, 12.8344... will match any address that starts with 12.8344 and ...0201.01 will match any address that ends with 0201.01. An asterisk * can be used to match any single 4-bit nibble in an address string. For example, in 47.8*9*1200000000603E5B7201.00603E5B7201.00 the 2nd nibble of the 2nd most significant byte and 2nd nibble of 3rd most significant byte will match any 4bit nibble value. An asterisk (*) enclosed by a pair of parentheses, can also be used to match any binary bit (0 or 1) in a 4-bit nibble. For example, in ...92(1*0*)8.01 the asterisk within parentheses will match either binary values 0 and 1.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 70)

ciscoAtmAddressTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 1, 1), )
if mibBuilder.loadTexts: ciscoAtmAddressTemplateTable.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAddressTemplateTable.setDescription('The ATM address template alias Table. Entries in this table can be created and deleted by setting the atmAddressTemplateRowStatus object to appropriate values. Existing rows can be modified when the row is active. Entries in this table can be created/modified/ deleted through the commands provided by CLI also.')
ciscoAtmAddressTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ATM-ACCESS-LIST-MIB", "atmAddressAliasName"))
if mibBuilder.loadTexts: ciscoAtmAddressTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAddressTemplateEntry.setDescription(' An entry in the address template table.')
atmAddressAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: atmAddressAliasName.setStatus('current')
if mibBuilder.loadTexts: atmAddressAliasName.setDescription('The alias name for an ATM address template.')
atmAddressTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 1, 1, 1, 2), CiscoAtmAddressTemplate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressTemplate.setStatus('current')
if mibBuilder.loadTexts: atmAddressTemplate.setDescription('The Address Template to be aliased.')
atmAddressTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmAddressTemplateRowStatus.setDescription('To create, delete, read and write a row. Entries in this table can be modified on the fly. For example, value of atmAddressTemplateObject can be changed even when the corresponding atmAddressTemplateRowStatus object indicates that the row is active.')
ciscoAtmAddressFilterSetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1), )
if mibBuilder.loadTexts: ciscoAtmAddressFilterSetTable.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAddressFilterSetTable.setDescription('The ATM address filter set Table. Entries in this table can be created/deleted by setting the atmAddressFilterSetRowStatus object to appropriate values. Existing entries in this table can be modified on the fly. Entries in this table can be created/modified/deleted through the commands provided by the CLI also.')
ciscoAtmAddressFilterSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetName"), (0, "CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetIndex"))
if mibBuilder.loadTexts: ciscoAtmAddressFilterSetEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAddressFilterSetEntry.setDescription(' An entry in the address filter set table.')
atmAddressFilterSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: atmAddressFilterSetName.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetName.setDescription('The name for an ATM address filter set.')
atmAddressFilterSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: atmAddressFilterSetIndex.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetIndex.setDescription('The Index for a Filter in an ATM address filter set. The filters are matched in the ascending order of atmAddressFilterSetIndex. A filter with a lower atmAddressFilterSetIndex value is matched prior to a filter with a higher atmAddressFilterSetIndex value. The only exception to this rule are those address filters that specify all 20-bytes without using wildcards. These filters are matched before any other wildcard filter in a filter-set irrespective of the atmAddressFilterSetIndex value.')
atmAddressFilterSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("addressFilter", 1), ("timeOfDayFilter", 2))).clone('addressFilter')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterSetType.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetType.setDescription('Indicates the type of a filter whether atm Address filter or a Time-of-day filter. If the value of this object is addressFilter(1) then the objects atmAddressFilterSetStartHour, atmAddressFilterSetStartMinute, atmAddressFilterSetEndHour and atmAddressFilterSetEndMinute shall contain only the default values and cannot be set to any other value. If the value of this object is timeOfDayFilter(2) then the object atmAddressFilterSetTemplate shall contain only the default value and cannot be set to any other value. If the value of this object is modified to timeOfDayFilter(2), for an existing addressFilter row, the corresponding atmAddressFilterSetTemplate object will be set to its default value automatically. If the value of this object is modified to addressFilter(1) for an existing timeOfDayFilter row, the corresponding objects atmAddressFilterSetStartHour, atmAddressFilterSetStartMinute, atmAddressFilterSetEndHour and atmAddressFilterSetEndMinute will be set to their default values automatically.')
atmAddressFilterSetTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 70)).clone('...')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterSetTemplate.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetTemplate.setDescription("This is either an existing atmAddressAliasName, or an ATM address template, as described in the CiscoAtmAddressTemplate. If the value of this object matches an atmAddressAliasName in the ciscoAtmAddressTemplateTable, then the value of the corresponding atmAddressTemplate object will be used. And subsequent attempts to read this object will return the address-template instead of the alias name. Only if a such a match is not found in ciscoAtmAddressTemplateTable, an attempt can be made to interpret this object as a CiscoAtmAddressTemplate. The value of this object shall be '...' and cannot be set to any other value if a filter is of the type timeOfDayFilter")
atmAddressFilterSetStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterSetStartHour.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetStartHour.setDescription('Indicates the Hours portion of the Start time of a Time-of-day filter. If the value of atmAddressFilterSetType object is addressFilter, then this object cannot be set and shall only contain the default value')
atmAddressFilterSetStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterSetStartMinute.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetStartMinute.setDescription('Indicates the Minutes portion of the Start time of a Time-of-day filter. If the value of atmAddressFilterSetType object is addressFilter, then this object cannot be set and shall only contain the default value')
atmAddressFilterSetEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterSetEndHour.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetEndHour.setDescription('Indicates the Hours portion of the End time of a Time-of-day filter. If the value of atmAddressFilterSetType object is addressFilter, then this object cannot be set and shall only contain the default value')
atmAddressFilterSetEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterSetEndMinute.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetEndMinute.setDescription('Indicates the Minutes portion of the End time of a Time-of-day filter. If the value of atmAddressFilterSetType object is addressFilter, then this object cannot be set and shall only contain the default value')
atmAddressFilterSetPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterSetPermission.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetPermission.setDescription('Indicates the action of a filter set (either permit or deny), when a specific ATM address matches with the atmAddressFilterSetTemplate defined in this address filter set in case of an addressFilter or when the current time falls in the interval specified by the atmAddressFilterSetStartHour, atmAddressFiltersetStartMinute, atmAddressFilterSetEndHour and atmAddressFiltersetEndMinute objects in case of a timeOfDayFilter.')
atmAddressFilterSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterSetRowStatus.setDescription('To create, delete, read and write a row. Entries in this table can be modified on the fly. For exmaple, atmAddressFilterSetTemplate object of an existing addressFilter can be modified even if the value of the corresponding atmAddressFilterSetRowStatus object indicates that the row is active.')
ciscoAtmAddressFilterExpressionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2), )
if mibBuilder.loadTexts: ciscoAtmAddressFilterExpressionTable.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAddressFilterExpressionTable.setDescription('The ATM address filter expression table. Entries in this table can be created/deleted by setting the atmAddressFilterExpressionRowStatus object to appropriate values. Existing entries in this table cannot be modified on the fly. Before an existing active entry can be modified, it has to be brought to notInService by setting the corresponding atmAddressFilterExpressionRowStatus object to notInService. Entries in this table can also be created/modified/deleted through the commands provided by the CLI.')
ciscoAtmAddressFilterExpressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterExpressionName"))
if mibBuilder.loadTexts: ciscoAtmAddressFilterExpressionEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAddressFilterExpressionEntry.setDescription(' An entry in the address filter expression table.')
atmAddressFilterExpressionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: atmAddressFilterExpressionName.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterExpressionName.setDescription('The name for an ATM address filter expression.')
atmAddressFilterExpressionQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("none", 3))).clone('destination')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterExpressionQualifier1.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterExpressionQualifier1.setDescription('This object indicates the ATM filter set specified by the atmAddressFilterExpressionTerm1 should be applied to either the source (calling party) or destination (called party) ATM address. atmAddressFilterExpressionQualifier1 shall be none(3) if atmAddressFilterExpressionTerm1 is a Filter Expression or a timeOfDayFilter. The value of this object can be modified for an existing row only after placing that row notInService by setting the corresponding atmAddressFilterExpressionRowStatus object to notInService(2).')
atmAddressFilterExpressionTerm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterExpressionTerm1.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterExpressionTerm1.setDescription("This object is the name of the first ATM address filter set or ATM address filter expression used in the logical expression. The value of this object can only be either an already existing atmAddressFilterSetName whose row is already active in the ciscoAtmAddressFilterSetTable or an atmAddressFilterExpressionName whose row is already active in the ciscoAtmAddressFilterExpressionTable. When the reference that this object is pointing to gets deleted out from under it, this object may have a value that does not exist in both ciscoAtmAddressFilterSetTable and ciscoAtmAddressFilterExpressionTable and the expression will be evaluated as if the deleted filter resulted in a match with a permission of 'permit'. The value of this object can be modified for an existing row only after placing that row notInService by setting the corresponding atmAddressFilterExpressionRowStatus object to notInService.")
atmAddressFilterExpressionQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("none", 3))).clone('destination')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterExpressionQualifier2.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterExpressionQualifier2.setDescription('Indicates the ATM filter set or filter expression specified by the atmAddressFilterExpressionTerm2 should be applied to either the source (calling party) or destination (called party) ATM address. It is not used if the logical operator is NOT. atmAddressFilterExpressionQualifier2 shall be none(3) if atmAddressFilterExpressionTerm2 is a Filter Expression or timeOfDayFilter. The value of this object can be modified for an existing row only after placing the row notInService by setting the corresponding atmAddressFilterExpressionRowStatus object to notInService(2).')
atmAddressFilterExpressionTerm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterExpressionTerm2.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterExpressionTerm2.setDescription("The name of the second ATM address filter set or ATM address filter expression used in the logical expression. The value of this object can only be either an existing atmAddressFilterSetName whose row is already active in the ciscoAtmAddressFilterSetTable or an existing atmAddressFilterExpressionName whose row is already active in the ciscoAtmAddressFilterExpressionTable. The value of this object shall be null if the value of corresponding atmAddressFilterExpressionOperator object is not(4) or none(5). When the reference that this object is pointing to gets deleted out from under it, this object may have a value that does not exist in both ciscoAtmAddressFilterExpressionTable and ciscoAtmAddressFilterSetTable and the expression will be evaluated as if the deleted filter resulted in a match with a permission of 'permit'. The value of this object can be modified for an existing row only after placing that row notInService by setting the respective atmAddressFilterExpressionRowStatus object to the value notInService.")
atmAddressFilterExpressionOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("and", 1), ("or", 2), ("xor", 3), ("not", 4), ("none", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterExpressionOperator.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterExpressionOperator.setDescription('The logical operator to be applied to the associated ATM address filter logical expression. The value of this object can be modified for an existing row only after placing that row notInService by setting the corresponding atmAddressFilterExpressionRowStatus object to the value notInService.')
atmAddressFilterExpressionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmAddressFilterExpressionRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmAddressFilterExpressionRowStatus.setDescription('To create, delete, read and write a row. Existing entries in this table that are active cannot be modified on the fly. Before an existing entry in this table that is active can be modified, the corresponding atmAddressFilterExpressionRowStatus object has to be set to notInService.')
ciscoAtmAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoAtmAccessGroupTable.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAccessGroupTable.setDescription('The ATM access group Table. This table shall only include interfaces whose ifType is atm(37) or logicalAtm(80). Entries in this table can be modified through the commands provided by the CLI also.')
ciscoAtmAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ciscoAtmAccessGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAccessGroupEntry.setDescription('An entry in the ATM access group table. This table shall only include interfaces whose ifType is atm(37) or logicalAtm(80)')
atmInboundAccessGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmInboundAccessGroupName.setStatus('current')
if mibBuilder.loadTexts: atmInboundAccessGroupName.setDescription('The name of an ATM address filter set or expression used for access control for inbound call on the associated interface.')
atmOutboundAccessGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 67, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOutboundAccessGroupName.setStatus('current')
if mibBuilder.loadTexts: atmOutboundAccessGroupName.setDescription('The name of an ATM address filter set or expression used for access control for outbound call on the associated interface.')
ciscoAtmAccessListMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 67, 3))
ciscoAtmAccessListMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 67, 3, 1))
ciscoAtmAccessListMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 67, 3, 2))
ciscoAtmAccessListMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 67, 3, 1, 1)).setObjects(("CISCO-ATM-ACCESS-LIST-MIB", "ciscoAtmAccessListMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmAccessListMIBCompliance = ciscoAtmAccessListMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAccessListMIBCompliance.setDescription('The compliance statement for the Cisco ATM access list group.')
ciscoAtmAccessListMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 67, 3, 2, 1)).setObjects(("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressTemplate"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressTemplateRowStatus"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetType"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetTemplate"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetStartHour"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetStartMinute"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetEndHour"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetEndMinute"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetPermission"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterSetRowStatus"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterExpressionQualifier1"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterExpressionTerm1"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterExpressionQualifier2"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterExpressionTerm2"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterExpressionOperator"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmAddressFilterExpressionRowStatus"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmInboundAccessGroupName"), ("CISCO-ATM-ACCESS-LIST-MIB", "atmOutboundAccessGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmAccessListMIBGroup = ciscoAtmAccessListMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmAccessListMIBGroup.setDescription('')
mibBuilder.exportSymbols("CISCO-ATM-ACCESS-LIST-MIB", atmAddressTemplateRowStatus=atmAddressTemplateRowStatus, ciscoAtmAccessGroupEntry=ciscoAtmAccessGroupEntry, ciscoAtmAccessListMIBGroup=ciscoAtmAccessListMIBGroup, atmAddressFilterSetPermission=atmAddressFilterSetPermission, ciscoAtmAddressFilter=ciscoAtmAddressFilter, ciscoAtmAddressFilterExpressionEntry=ciscoAtmAddressFilterExpressionEntry, ciscoAtmAccessGroupTable=ciscoAtmAccessGroupTable, ciscoAtmAccessListMIBCompliances=ciscoAtmAccessListMIBCompliances, atmAddressFilterSetStartMinute=atmAddressFilterSetStartMinute, PYSNMP_MODULE_ID=ciscoAtmAccessListMIB, atmAddressFilterSetName=atmAddressFilterSetName, atmAddressFilterSetRowStatus=atmAddressFilterSetRowStatus, ciscoAtmAccessListMIBConformance=ciscoAtmAccessListMIBConformance, ciscoAtmAddressTemplateTable=ciscoAtmAddressTemplateTable, atmInboundAccessGroupName=atmInboundAccessGroupName, atmAddressFilterSetIndex=atmAddressFilterSetIndex, atmAddressFilterSetEndMinute=atmAddressFilterSetEndMinute, atmAddressFilterExpressionOperator=atmAddressFilterExpressionOperator, atmOutboundAccessGroupName=atmOutboundAccessGroupName, atmAddressFilterExpressionName=atmAddressFilterExpressionName, atmAddressFilterExpressionTerm1=atmAddressFilterExpressionTerm1, atmAddressFilterExpressionQualifier1=atmAddressFilterExpressionQualifier1, ciscoAtmAddressTemplate=ciscoAtmAddressTemplate, ciscoAtmAccessListMIBObjects=ciscoAtmAccessListMIBObjects, atmAddressTemplate=atmAddressTemplate, atmAddressFilterSetEndHour=atmAddressFilterSetEndHour, atmAddressFilterSetType=atmAddressFilterSetType, atmAddressFilterExpressionRowStatus=atmAddressFilterExpressionRowStatus, atmAddressFilterExpressionQualifier2=atmAddressFilterExpressionQualifier2, ciscoAtmAddressTemplateEntry=ciscoAtmAddressTemplateEntry, CiscoAtmAddressTemplate=CiscoAtmAddressTemplate, ciscoAtmAccessGroup=ciscoAtmAccessGroup, atmAddressFilterExpressionTerm2=atmAddressFilterExpressionTerm2, ciscoAtmAccessListMIBCompliance=ciscoAtmAccessListMIBCompliance, ciscoAtmAddressFilterSetEntry=ciscoAtmAddressFilterSetEntry, atmAddressFilterSetTemplate=atmAddressFilterSetTemplate, atmAddressAliasName=atmAddressAliasName, ciscoAtmAccessListMIB=ciscoAtmAccessListMIB, ciscoAtmAddressFilterExpressionTable=ciscoAtmAddressFilterExpressionTable, ciscoAtmAddressFilterSetTable=ciscoAtmAddressFilterSetTable, atmAddressFilterSetStartHour=atmAddressFilterSetStartHour, ciscoAtmAccessListMIBGroups=ciscoAtmAccessListMIBGroups)
