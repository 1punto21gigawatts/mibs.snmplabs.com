#
# PySNMP MIB module MICOM-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-ISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
callActiveSetupTime, dialCtlPeerCfgId, callActiveIndex = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "callActiveSetupTime", "dialCtlPeerCfgId", "callActiveIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, NotificationType, Unsigned32, Counter64, Integer32, Counter32, iso, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "NotificationType", "Unsigned32", "Counter64", "Integer32", "Counter32", "iso", "Gauge32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_isdn = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 24)).setLabel("micom-isdn")
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2))
nvmIsdnBasicRateTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 1), )
if mibBuilder.loadTexts: nvmIsdnBasicRateTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnBasicRateTable.setDescription('NAME = ; DESC = Table containing configuration and operational \\ parameters for all physical Basic Rate interfaces \\ on this managed device. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
nvmIsdnBasicRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nvmIsdnBasicRateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnBasicRateEntry.setDescription('NAME = ; DESC = An entry in the ISDN Basic Rate Table. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnBasicRateLineTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("pointToMultipoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnBasicRateLineTopology.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnBasicRateLineTopology.setDescription('NAME = ; DESC = The line topology to be used for this interface. \\ Note that setting nvmIsdnBasicRateIfType to isdns(75) \\ does not necessarily mean a line topology of \\ point-to-multipoint. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnBasicRateSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dialup", 1), ("leased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnBasicRateSignalMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnBasicRateSignalMode.setDescription('NAME = ; DESC = The signaling channel operational mode for this \\ interface. If dialup(1), there is a signaling channel \\ on this interface and the corresponding operational \\ object, isdnBasicRateSignalMode (see rfc2127.mib), \\ will be active(1). If leased(2), a signaling channel \\ is not available and the corresponding operational \\ object, isdnBasicRateSignalMode, will be inactive(2). \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnSignalingTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 2), )
if mibBuilder.loadTexts: nvmIsdnSignalingTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnSignalingTable.setDescription('NAME = ; DESC = ISDN signaling table containing configuration and \\ operational parameters for all ISDN signaling \\ channels on this managed device. (Configuration) ; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
nvmIsdnSignalingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 2, 1), ).setIndexNames((0, "MICOM-ISDN-MIB", "nvmIsdnSignalingIndex"))
if mibBuilder.loadTexts: nvmIsdnSignalingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnSignalingEntry.setDescription('NAME = ; DESC = An entry in the ISDN Signaling Table. To create a \\ new entry, only nvmIsdnSignalingProtocol needs to be \\ specified before nvmIsdnSignalingStatus can become \\ active(1). (Configuration) ; HELP = ; CAPABILITIES = ;')
nvmIsdnSignalingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIsdnSignalingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnSignalingIndex.setDescription("NAME = ; DESC = The index value which uniquely identifies an entry \\ in the nvmIsdnSignalingTable. (Configuration); HELP = This managed object corresponds to the port index used \\ in the ICM ('primary' and 'backup' ports supported).; CAPABILITIES = ;")
nvmIsdnSignalingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6, 7, 9, 12, 13, 17, 19, 23))).clone(namedValues=NamedValues(("dss1", 2), ("etsi", 3), ("ess5", 6), ("dms100", 7), ("ni1", 9), ("vn2", 12), ("vn3", 13), ("ins64", 17), ("itr6", 19), ("qsig", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnSignalingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnSignalingProtocol.setDescription('NAME = ; DESC = The particular protocol type supported by the \\ switch providing access to the ISDN network \\ to which this signaling channel is connected. (Configuration); HELP = Enumerations supported by access device are 2, 3, 6, 7, \\ 9, 12, 13, 17, and 19.; CAPABILITIES = ;')
nvmIsdnSignalingCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 131))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnSignalingCallingAddress.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: nvmIsdnSignalingCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnSignalingCallingAddress.setDescription("NAME = ; DESC = The ISDN Address to be assigned to this signaling \\ channel. More specifically, this is the 'Calling Address \\ information element' as being passed to the switch \\ in outgoing call setup messages. \\ It can be an EAZ (1TR6), a calling number (DSS1, \\ ETSI)or any other number necessary to identify a \\ signaling interface. If there is no such number defined \\ or required, this is a zero length string. It is represented \\ in DisplayString form. \\ Incoming calls can also be identified by this number. \\ If the Directory Number, i.e. the Called Number in \\ incoming calls, is different to this number, the \\ isdnDirectoryTable has to be used to specify all \\ possible Directory Numbers. \\ The format of this information largely depends on the \\ type of switch or PBX the device is connected to. Therefore, \\ the detailed format of this information is not \\ specified and is implementation dependent. \\ If possible, the agent should implement this information \\ using the E.164 number format. In this case, the number \\ must start with '+'. Otherwise, IA5 number digits must \\ be used. (Configuration) ; HELP = ; CAPABILITIES = ;")
nvmIsdnSignalingSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 131))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnSignalingSubAddress.setReference('ITU-T I.330, Q.931 chapter 4.5.11')
if mibBuilder.loadTexts: nvmIsdnSignalingSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnSignalingSubAddress.setDescription('NAME = ; DESC = Supplementary information to the ISDN address assigned \\ to this signaling channel. Usually, this is the \\ subaddress as defined in Q.931. \\ If there is no such number defined or required, this is \\ a zero length string. \\ The subaddress is used for incoming calls as well as \\ for outgoing calls. \\ The subaddress is an user supplied string of up to 20 \\ IA5 characters and is transmitted transparently through \\ the network. (Configuration) ; HELP = ; CAPABILITIES = ;')
nvmIsdnSignalingInfoTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnSignalingInfoTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnSignalingInfoTrapEnable.setDescription('NAME = ; DESC = Indicates whether isdnMibCallInformation traps \\ should be generated for calls on this signaling \\ channel. (Configuration); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3), )
if mibBuilder.loadTexts: mcmIsdnLapdTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdTable.setDescription('NAME = ; DESC = Table containing configuration and statistics \\ information for all LAPD (D channel Data Link) \\ interfaces on this managed device. \\ Only statistical information which is not already being \\ counted in the ifTable is being defined in this table. \\ This table is an extension to the LAPD table resident in \\ the RFC2127 MIB. (Operational) HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcmIsdnLapdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mcmIsdnLapdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdEntry.setDescription('NAME = ; DESC = An entry in the LAPD Table. (Extensions to LAPD \\ table in RFC2127 MIB.) (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdTxwinsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdTxwinsiz.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdTxwinsiz.setDescription('NAME = ; DESC = The value of this object specifies the transmit \\ window size (maximum number of outstanding \\ unacknowledged information frames. (Operational); HELP = Default values: 7 for PRI, 1 for BRI with SAPI=0, \\ 3 for BRI with other SAPIs.; CAPABILITIES = ;')
mcmIsdnLapdRxwinsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdRxwinsiz.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdRxwinsiz.setDescription('NAME = ; DESC = The value of this object specifies the receive \\ window size (maximum number of outstanding \\ unacknowledged information frames. (Operational); HELP = Default values: 7 for PRI, 1 for BRI with SAPI=0, \\ 3 for BRI with other SAPIs.; CAPABILITIES = ;')
mcmIsdnLapdTxfrmsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdTxfrmsiz.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdTxfrmsiz.setDescription('NAME = ; DESC = The value of this object specifies the maximum \\ transmit frame size (in bytes). (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdRxfrmsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdRxfrmsiz.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdRxfrmsiz.setDescription('NAME = ; DESC = The value of this object specifies the maximum \\ receive frame size (in bytes). (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdTimert200 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdTimert200.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdTimert200.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ T200 value (in milliseconds). T200 is the time \\ to wait for an acknowledgment to a frame \\ before initiating recovery. (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdTimert201 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000)).clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdTimert201.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdTimert201.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ T201 value (in milliseconds). T201 is the minimum \\ time between the transmission of the TEI identity \\ check messages. (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdTimert202 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdTimert202.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdTimert202.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ T202 value (in milliseconds). T201 is the minimum \\ time between the transmission of the TEI identity \\ request messages. (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdTimert203 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000)).clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdTimert203.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdTimert203.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ T203 value (in milliseconds). T203 is the maximum \\ time allowed without frames being exchanged. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdTimertm20 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdTimertm20.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdTimertm20.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ TM20 value (in milliseconds) for TEI management. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdn200 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdn200.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdn200.setDescription('NAME = ; DESC = The value of this object specifies the Retry \\ Counter N200. This is the maximum number \\ of retransmissions of a frame. (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdn202 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdn202.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdn202.setDescription('NAME = ; DESC = The value of this object specifies the Retry \\ Counter N202. This is the maximum number \\ of transmissions of a TEI identity request \\ message. (Operational); HELP = ; CAPABILITIES = ;')
mcmIsdnLapdnm20 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdnm20.setStatus('mandatory')
if mibBuilder.loadTexts: mcmIsdnLapdnm20.setDescription('NAME = ; DESC = The value of this object specifies the Retry \\ Counter NM20 (for TEI management). \\ (Operational); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4), )
if mibBuilder.loadTexts: nvmIsdnLapdTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdTable.setDescription('NAME = ; DESC = Table containing configuration and statistics \\ information for all LAPD (D channel Data Link) \\ interfaces on this managed device. \\ Only statistical information which is not already being \\ counted in the ifTable is being defined in this table. \\ This table is an extension to the LAPD table resident in \\ the RFC2127 MIB. (Configuration) HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
nvmIsdnLapdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nvmIsdnLapdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdEntry.setDescription('NAME = ; DESC = An entry in the LAPD Table. (Extensions to LAPD \\ table in RFC2127 MIB.) (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdTxwinsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdTxwinsiz.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdTxwinsiz.setDescription('NAME = ; DESC = The value of this object specifies the transmit \\ window size (maximum number of outstanding \\ unacknowledged information frames. (Configuration); HELP = Default values: 7 for PRI, 1 for BRI with SAPI=0, \\ 3 for BRI with other SAPIs.; CAPABILITIES = ;')
nvmIsdnLapdRxwinsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdRxwinsiz.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdRxwinsiz.setDescription('NAME = ; DESC = The value of this object specifies the receive \\ window size (maximum number of outstanding \\ unacknowledged information frames. (Configuration); HELP = Default values: 7 for PRI, 1 for BRI with SAPI=0, \\ 3 for BRI with other SAPIs.; CAPABILITIES = ;')
nvmIsdnLapdTxfrmsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdTxfrmsiz.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdTxfrmsiz.setDescription('NAME = ; DESC = The value of this object specifies the maximum \\ transmit frame size (in bytes). (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdRxfrmsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdRxfrmsiz.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdRxfrmsiz.setDescription('NAME = ; DESC = The value of this object specifies the maximum \\ receive frame size (in bytes). (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdTimert200 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdTimert200.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdTimert200.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ T200 value (in milliseconds). T200 is the time \\ to wait for an acknowledgment to a frame \\ before initiating recovery. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdTimert201 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdTimert201.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdTimert201.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ T201 value (in milliseconds). T201 is the minimum \\ time between the transmission of the TEI identity \\ check messages. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdTimert202 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdTimert202.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdTimert202.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ T202 value (in milliseconds). T201 is the minimum \\ time between the transmission of the TEI identity \\ request messages. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdTimert203 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdTimert203.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdTimert203.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ T203 value (in milliseconds). T203 is the maximum \\ time allowed without frames being exchanged. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdTimertm20 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdTimertm20.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdTimertm20.setDescription('NAME = ; DESC = The value of this object specifies the timer \\ TM20 value (in milliseconds) for TEI management. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdn200 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdn200.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdn200.setDescription('NAME = ; DESC = The value of this object specifies the Retry \\ Counter N200. This is the maximum number \\ of retransmissions of a frame. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdn202 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdn202.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdn202.setDescription('NAME = ; DESC = The value of this object specifies the Retry \\ Counter N202. This is the maximum number \\ of transmissions of a TEI identity request \\ message. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnLapdnm20 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnLapdnm20.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnLapdnm20.setDescription('NAME = ; DESC = The value of this object specifies the Retry \\ Counter NM20 (for TEI management). \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnEndpointTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 5), )
if mibBuilder.loadTexts: nvmIsdnEndpointTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnEndpointTable.setDescription('NAME = ; DESC = Table containing configuration for Terminal \\ Endpoints. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
nvmIsdnEndpointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 5, 1), ).setIndexNames((0, "MICOM-ISDN-MIB", "nvmIsdnEndpointIndex"))
if mibBuilder.loadTexts: nvmIsdnEndpointEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnEndpointEntry.setDescription('NAME = ; DESC = An entry in the Terminal Endpoint Table. The value \\ of nvmIsdnEndpointIfType must be supplied for a row \\ in this table to become active. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnEndpointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIsdnEndpointIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnEndpointIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an entry \\ in the nvmIsdnEndpointTable. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnEndpointTeiType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnEndpointTeiType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnEndpointTeiType.setDescription('NAME = ; DESC = The type of TEI (Terminal Endpoint Identifier) \\ used for this Terminal Endpoint. In case of dynamic(1), \\ the TEI value is selected by the switch. In \\ case of static(2), a valid TEI value has to be \\ entered in the nvmIsdnEndpointTeiValue object. \\ The default value for this object depends on the \\ interface type as well as the Terminal Endpoint type. \\ On Primary Rate interfaces the default value is \\ static(2). On Basic Rate interfaces the default value \\ is dynamic(1) for isdn(63) Terminal Endpoints and \\ static(2) for x25ple(40) Terminal Endpoints. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnEndpointTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnEndpointTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnEndpointTeiValue.setDescription('NAME = ; DESC = The TEI (Terminal Endpoint Identifier) value \\ for this Terminal Endpoint. If nvmIsdnEndpointTeiType \\ is set to static(2), valid numbers are 0..63, \\ while otherwise the value is set internally. \\ The default value of this object is 0 for static \\ TEI assignment. \\ The default value for dynamic TEI assignment is also \\ 0 as long as no TEI has been assigned. After TEI \\ assignment, the assigned TEI value is returned. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnEndpointSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 131))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnEndpointSpid.setReference('Bellcore SR-NWT-001953, Generic Guidelines for ISDN Terminal Equipment on Basic Access Interfaces, Chapter 8.5.1.')
if mibBuilder.loadTexts: nvmIsdnEndpointSpid.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnEndpointSpid.setDescription('NAME = ; DESC = The Service profile IDentifier (SPID) information \\ for this Terminal Endpoint. \\ The SPID is composed of 9-20 numeric characters. \\ This information has to be defined in addition to \\ the local number for some switch protocol types, \\ e.g. Bellcore NI-1 and NI-2. \\ If this object is not required, it is a \\ zero length string. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 6), )
if mibBuilder.loadTexts: nvmIsdnDirectoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnDirectoryTable.setDescription('NAME = ; DESC = Table containing Directory Numbers. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
nvmIsdnDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 6, 1), ).setIndexNames((0, "MICOM-ISDN-MIB", "nvmIsdnDirectoryIndex"))
if mibBuilder.loadTexts: nvmIsdnDirectoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnDirectoryEntry.setDescription('NAME = ; DESC = An entry in the Directory Number Table. All objects \\ in an entry must be set for a new row to become active. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIsdnDirectoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnDirectoryIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an entry \\ in the nvmIsdnDirectoryTable. (Configuration); HELP = ; CAPABILITIES = ;')
nvmIsdnDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 131))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnDirectoryNumber.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: nvmIsdnDirectoryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnDirectoryNumber.setDescription("NAME = ; DESC = A Directory Number. Directory Numbers are used \\ to identify incoming calls on the signaling \\ channel given in nvmIsdnDirectorySigIndex. \\ The format of this information largely depends on the \\ type of switch or PBX the device is connected to. \\ Therefore, the detailed format of this information is \\ not specified and is implementation dependent. \\ If possible, the agent should implement this information \\ using the E.164 number format. In this case, the number \\ must start with '+'. Otherwise, IA5 number digits must \\ be used. (Configuration); HELP = This ICM variable contains the remote address for which \\ incoming calls are handled.; CAPABILITIES = ;")
nvmIsdnDirectorySigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnDirectorySigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnDirectorySigIndex.setDescription('NAME = ; DESC = An index pointing to an ISDN signaling channel. \\ Incoming calls are accepted on this \\ signaling channel if the nvmIsdnDirectoryNumber is \\ presented as Called Number in the SETUP message. \\ (Configuration); HELP = This is an index to a link in the dialCtlPeerCfg table \\ (and not an index to a signaling channel). The ICM \\ changes the meaning of this managed object in order \\ to be able to extract the link for which the directory \\ number is specified.; CAPABILITIES = ;')
nvmIsdnDirectoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmIsdnDirectoryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmIsdnDirectoryStatus.setDescription("NAME = ; DESC = For software releases prior to 3.0 \\ this object only supported enumerations of \\ add and delete with an access of write-only. \\ This object is used to create and delete rows in the \\ nvmIsdnDirectoryTable. Upon creation of a row, the \\ the row status is internally set to 'active'. \\ (Configuration); HELP = ; CAPABILITIES = ;")
nvmDialCtlConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 7))
nvmDialCtlAcceptMode = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acceptNone", 1), ("acceptAll", 2), ("acceptKnown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlAcceptMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlAcceptMode.setDescription('NAME = ; DESC = The security level for acceptance of incoming calls. \\ acceptNone(1) - incoming calls will not be accepted. \\ acceptAll(2) - incoming calls will be accepted, even. \\ if there is no matching entry in the nvmDialCtlPeerCfgTable. \\ acceptKnown(3) - incoming calls will be accepted only \\ if there is a matching entry in the nvmDialCtlPeerCfgTable. \\ (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmDialCtlTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlTrapEnable.setDescription('NAME = ; DESC = This object indicates whether nvmDialCtlPeerCallInformation \\ and nvmDialCtlPeerCallSetup traps should be generated for \\ all peers. If the value of this object is enabled(1), \\ traps will be generated for all peers. If the value \\ of this object is disabled(2), traps will be generated \\ only for peers having nvmDialCtlPeerCfgTrapEnable set \\ to enabled(1). (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmDialCtlPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 8), )
if mibBuilder.loadTexts: mcmDialCtlPeerCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmDialCtlPeerCfgTable.setDescription('NAME = ; DESC = The list of peers from which the managed device \\ will accept calls or to which it will place them. \\ This table is an extension to the Peer Group table \\ resident in the RFC2128 MIB. (Operational) HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmDialCtlPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 8, 1), ).setIndexNames((0, "MICOM-ISDN-MIB", "mcmDialCtlPeerCfgId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mcmDialCtlPeerCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmDialCtlPeerCfgEntry.setDescription('NAME = ; DESC = An entry in the Peer Group Table. (Extension to \\ Peer Group table in RFC2128 MIB. (Operational);\\ HELP = ; CAPABILITIES = ;')
mcmDialCtlPeerCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmDialCtlPeerCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmDialCtlPeerCfgId.setDescription('NAME = ; DESC = This object identifies a single peer. There may \\ be several entries in this table for one peer, \\ defining different ways of reaching this peer. \\ Thus, there may be several entries in this table \\ with the same value of mcmDialCtlPeerCfgId. \\ Multiple entries for one peer may be used to support \\ multilink as well as backup lines. \\ A single peer will be identified by a unique value \\ of this object. Several entries for one peer MUST \\ have the same value of mcmDialCtlPeerCfgId, but different \\ ifEntries and thus different values of ifIndex. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmDialCtlPeerCfgBchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmDialCtlPeerCfgBchannel.setStatus('mandatory')
if mibBuilder.loadTexts: mcmDialCtlPeerCfgBchannel.setDescription("NAME = ; DESC = The value of this object specifies the B channel to be used \\ for leased lines. (Operational); HELP = Note: 0 = 'any'. This managed object is not part of the \\ original Dial Control MIB (RFC2128). This proprietary \\ object was added for ICM purposes.; CAPABILITIES = ;")
nvmDialCtlPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9), )
if mibBuilder.loadTexts: nvmDialCtlPeerCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgTable.setDescription('NAME = ; DESC = The list of peers from which the managed device \\ will accept calls or to which it will place them. \\ (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmDialCtlPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1), ).setIndexNames((0, "MICOM-ISDN-MIB", "nvmDialCtlPeerCfgId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nvmDialCtlPeerCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgEntry.setDescription('NAME = ; DESC = Configuration data for a single Peer. This entry is \\ effectively permanent, and contains information \\ to identify the peer, how to connect to the peer, \\ how to identify the peer and its permissions. \\ The value of nvmDialCtlPeerCfgOriginateAddress must be \\ specified before a new row in this table can become \\ active(1). Any writeable parameters in an existing entry \\ can be modified while the entry is active. The modification \\ will take effect when the peer in question will be \\ called the next time. \\ An entry in this table can only be created if the \\ associated ifEntry already exists. (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgId.setDescription('NAME = ; DESC = This object identifies a single peer. There may \\ be several entries in this table for one peer, \\ defining different ways of reaching this peer. \\ Thus, there may be several entries in this table \\ with the same value of nvmDialCtlPeerCfgId. \\ Multiple entries for one peer may be used to support \\ multilink as well as backup lines. \\ A single peer will be identified by a unique value \\ of this object. Several entries for one peer MUST \\ have the same value of nvmDialCtlPeerCfgId, but different \\ ifEntries and thus different values of ifIndex. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgBchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgBchannel.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgBchannel.setDescription("NAME = ; DESC = The value of this object specifies the B channel to be used \\ for leased lines. (Configuration); HELP = Note: 0 = 'any'. This managed object is not part of the \\ original Dial Control MIB (RFC2128). This proprietary \\ object was added for ICM purposes.; CAPABILITIES = ;")
nvmDialCtlPeerCfgLowerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgLowerIf.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgLowerIf.setDescription('NAME = ; DESC = ifIndex value of an interface the peer will have to be \\ called on. For example, on an ISDN interface, this can be \\ the ifIndex value of a D channel or the ifIndex value of a \\ B channel, whatever is appropriate for a given peer. \\ As an example, for Basic Rate leased lines it will be \\ necessary to specify a B channel ifIndex, while for \\ semi-permanent connections the D channel ifIndex has \\ to be specified. \\ If the interface can be dynamically assigned, this object \\ has a value of zero. (Configuration); HELP = The LowerIf is the ifIndex value of a D channel index \\ (primary or backup port for a semi-permanent connection), \\ or the ifIndex value of a B channel for a leased line.; CAPABILITIES = ;')
nvmDialCtlPeerCfgOriginateAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 131))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgOriginateAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgOriginateAddress.setDescription("NAME = ; DESC = Call Address at which the peer will be called. \\ Think of this as the set of characters following 'ATDT ' \\ or the 'phone number' included in a D channel call request. \\ The structure of this information will be switch type \\ specific. If there is no address information required \\ for reaching the peer, i.e., for leased lines, \\ this object will be a zero length string. (Configuration); HELP = ; CAPABILITIES = ;")
nvmDialCtlPeerCfgSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 131))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgSubAddress.setDescription('NAME = ; DESC = Subaddress at which the peer will be called. \\ If the subaddress is undefined for the given media or \\ unused, this is a zero length string. (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgClosedUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 131))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgClosedUserGroup.setReference('Q.931, chapter 4.6.1.')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgClosedUserGroup.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgClosedUserGroup.setDescription('NAME = ; DESC = Closed User Group at which the peer will be called. \\ If the Closed User Group is undefined for the given media \\ or unused, this is a zero length string. (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgSpeed.setDescription('NAME = ; DESC = The desired information transfer speed in bits/second \\ when calling this peer. \\ The detailed media specific information, e.g. information \\ type and information transfer rate for ISDN circuits, \\ has to be extracted from this object. \\ If the transfer speed to be used is unknown or the default \\ speed for this type of interfaces, the value of this object \\ may be zero. (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9), ("fax", 10))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgInfoType.setDescription('NAME = ; DESC = The Information Transfer Capability to be used when \\ calling this peer. \\ speech(2) refers to a non-data connection, whereas \\ audio31(6) and audio7(7) refer to data mode \\ connections. (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("both", 3), ("none", 5))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgPermission.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgPermission.setDescription("NAME = ; DESC = Applicable permissions. callback(4) either rejects the \\ call and then calls back, or uses the 'Reverse charging' \\ information element if it is available. \\ Note that callback(4) is supposed to control charging, not \\ security, and applies to callback prior to accepting a \\ call. Callback for security reasons can be handled using \\ PPP callback. (Configuration); HELP = Access device ISDN does not support 'callback(4)'. The value \\ 'originate' is for outgoing calls. The value 'answer' is \\ for incoming calls.; CAPABILITIES = ;")
nvmDialCtlPeerCfgCallRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgCallRetries.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgCallRetries.setDescription('NAME = ; DESC = The number of calls to a non-responding address \\ that may be made. A retry count of zero means \\ there is no bound. The intent is to bound \\ the number of successive calls to an address \\ which is inaccessible, or which refuses those calls. \\ Some countries regulate the number of call retries \\ to a given peer that can be made. (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgRetryDelay.setDescription('NAME = ; DESC = The time in seconds between call retries if a peer \\ cannot be reached. \\ A value of zero means that call retries may be done \\ without any delay. (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgFailureDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgFailureDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgFailureDelay.setDescription('NAME = ; DESC = The time in seconds after which call attempts are \\ to be placed again after a peer has been noticed \\ to be unreachable, i.e. after nvmDialCtlPeerCfgCallRetries \\ unsuccessful call attempts. \\ A value of zero means that a peer will not be called \\ again after nvmDialCtlPeerCfgCallRetries unsuccessful call \\ attempts. (Configuration); HELP = This value is the time to wait with another call \\ retry after nvmDialCtlPeerCfgCallRetries unsuccessful \\ calls. ICM uses the default value of zero, which means \\ that a peer will not be called again after \\ nvmDialCtlPeerCfgCallRetriesattempts. The whole call \\ retry logic will be implemented.; CAPABILITIES = ;')
nvmDialCtlPeerCfgTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgTrapEnable.setDescription('NAME = ; DESC = This object indicates whether dialCtlPeerCallInformation \\ and dialCtlPeerCallSetup traps should be generated for \\ this peer. (Configuration); HELP = ; CAPABILITIES = ;')
nvmDialCtlPeerCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmDialCtlPeerCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmDialCtlPeerCfgStatus.setDescription("NAME = ; DESC = For software releases prior to 3.0 \\ this object only supported enumerations of \\ add and delete with an access of write-only. \\ This object is used to create and delete rows in the \\ nvmDialCtlPeerCfgTable. Upon creation of a row, the \\ the row status is internally set to 'active'. \\ (Configuration); HELP = ; CAPABILITIES = ;")
nvmCallHistoryTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmCallHistoryTableMaxLength.setStatus('mandatory')
if mibBuilder.loadTexts: nvmCallHistoryTableMaxLength.setDescription('NAME = ; DESC = The upper limit on the number of entries that the \\ callHistoryTable may contain. A value of 0 \\ will prevent any history from being retained. When \\ this table is full, the oldest entry will be deleted \\ and the new one will be created. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmIsdnSigStatsCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 1), )
if mibBuilder.loadTexts: mcmIsdnSigStatsCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmIsdnSigStatsCntrTable.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The ISDN Signaling Statistics counter reset table.; HELP = ; CAPABILITIES = NET_OPER, VPN_OPER;')
mcmIsdnSigStatsCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 1, 1), ).setIndexNames((0, "MICOM-ISDN-MIB", "mcmIsdnSigStatsCntrIndex"))
if mibBuilder.loadTexts: mcmIsdnSigStatsCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmIsdnSigStatsCntrEntry.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ An entry in the ISDN Signaling Statistics counter \\ reset table.; HELP = ; CAPABILITIES = ;')
mcmIsdnSigStatsCntrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnSigStatsCntrIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmIsdnSigStatsCntrIndex.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The value of this object represents a unique \\ identifier used as the index into the \\ ISDN Signaling Statistics counter reset table. \\ This index specifies the particular row of counter \\ objects to be reset (objects defined in the ISDN \\ Signaling Statistics table in the MIB file rfc2127.mib). \\ This index has the identical value as the object \\ isdnSignalingIndex (also defined in the MIB \\ file rfc2127.mib).; HELP = ; CAPABILITIES = ;')
mcmIsdnSigStatsCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmIsdnSigStatsCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmIsdnSigStatsCntrAction.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ Setting this object to reset(1) will zero \\ the values of a specific row of counters in \\ the ISDN Signaling Statistics table defined \\ in the MIB file rfc2127.mib.; HELP = When set to reset(1), a row containing \\ the following counter objects are reset: \\ isdnSigStatsInCalls \\ isdnSigStatsInConnected \\ isdnSigStatsOutCalls \\ isdnSigStatsOutConnected \\ isdnSigStatsChargedUnits; CAPABILITIES = ;')
mcmIsdnLapdCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 2), )
if mibBuilder.loadTexts: mcmIsdnLapdCntrTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmIsdnLapdCntrTable.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The ISDN LAPD counter reset table.; HELP = ; CAPABILITIES = NET_OPER, VPN_OPER;')
mcmIsdnLapdCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 2, 1), ).setIndexNames((0, "MICOM-ISDN-MIB", "mcmIsdnLapdCntrIndex"))
if mibBuilder.loadTexts: mcmIsdnLapdCntrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmIsdnLapdCntrEntry.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ An entry in the ISDN LAPD counter \\ reset table.; HELP = ; CAPABILITIES = ;')
mcmIsdnLapdCntrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIsdnLapdCntrIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmIsdnLapdCntrIndex.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The value of this object represents a unique \\ identifier used as the index into the ISDN \\ LAPD counter reset table. This index specifies \\ the particular row of counter objects to be reset \\ (objects defined in the ISDN LAPD table in the \\ MIB file rfc2127.mib). This index has the \\ identical value as the object ifIndex (defined in \\ the IF-MIB).; HELP = ; CAPABILITIES = ;')
mcmIsdnLapdCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmIsdnLapdCntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmIsdnLapdCntrAction.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ Setting this object to reset(1) will zero \\ the values of a specific row of counters in \\ the ISDN LAPD table defined in the MIB \\ file rfc2127.mib.; HELP = When set to reset(1), a row containing \\ the following counter objects are reset: \\ isdnLapdPeerSabme \\ isdnLapdRecvdFrmr; CAPABILITIES = ;')
mcmDialCtlPeerStatsGaugeTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 3), )
if mibBuilder.loadTexts: mcmDialCtlPeerStatsGaugeTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmDialCtlPeerStatsGaugeTable.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The Dial Control Peer Statistics gauge reset table.; HELP = ; CAPABILITIES = NET_OPER, VPN_OPER;')
mcmDialCtlPeerStatsGaugeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 3, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "dialCtlPeerCfgId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mcmDialCtlPeerStatsGaugeEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmDialCtlPeerStatsGaugeEntry.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ An entry in the Dial Control Peer Statistics gauge \\ reset table.; HELP = ; CAPABILITIES = ;')
mcmDialCtlPeerStatsGaugeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmDialCtlPeerStatsGaugeAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmDialCtlPeerStatsGaugeAction.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ Setting this object to reset(1) will zero \\ the values of a specific row of gauges in \\ the Dial Control Peer Statistics table defined \\ in the MIB file rfc2128.mib.; HELP = When set to reset(1), a row containing \\ the following counter objects are reset: \\ dialCtlPeerStatsConnectTime \\ dialCtlPeerStatsChargedUnits \\ dialCtlPeerStatsSuccessCalls \\ dialCtlPeerStatsFailCalls \\ dialCtlPeerStatsAcceptCalls \\ dialCtlPeerStatsRefuseCalls; CAPABILITIES = ;')
mcmCallActiveGaugeTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 4), )
if mibBuilder.loadTexts: mcmCallActiveGaugeTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmCallActiveGaugeTable.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ The Dial Control Call Active gauge reset table.; HELP = ; CAPABILITIES = NET_OPER, VPN_OPER;')
mcmCallActiveGaugeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 4, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: mcmCallActiveGaugeEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmCallActiveGaugeEntry.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ An entry in the Dial Control Call Active gauge \\ reset table.; HELP = ; CAPABILITIES = ;')
mcmCallActiveGaugeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmCallActiveGaugeAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmCallActiveGaugeAction.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ Setting this object to reset(1) will zero \\ the values of a specific row of gauges in \\ the Dial Control Call Active table defined \\ in the MIB file rfc2128.mib.; HELP = When set to reset(1), a row containing \\ the following counter objects are reset: \\ callActiveChargedUnits \\ callActiveTransmitPackets \\ callActiveTransmitBytes \\ callActiveReceivePackets \\ callActiveReceiveBytes; CAPABILITIES = ;')
mcmCallHistoryTableResetCmd = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 24, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmCallHistoryTableResetCmd.setStatus('obsolete')
if mibBuilder.loadTexts: mcmCallHistoryTableResetCmd.setDescription('NAME = ; DESC = This table was obsoleted as of release \\ 3.0; and is included here only to support \\ backwards compatibility for software \\ versions prior to release 3.0. \\ Setting this object to reset(1) will clear \\ the entire Dial Control Call History table \\ defined in the MIB file rfc2128.mib.; HELP = ; CAPABILITIES = NET_OPER, VPN_OPER;')
mibBuilder.exportSymbols("MICOM-ISDN-MIB", nvmIsdnEndpointIndex=nvmIsdnEndpointIndex, mcmCallActiveGaugeAction=mcmCallActiveGaugeAction, mcmDialCtlPeerCfgEntry=mcmDialCtlPeerCfgEntry, nvmIsdnBasicRateLineTopology=nvmIsdnBasicRateLineTopology, mcmIsdnLapdTimert201=mcmIsdnLapdTimert201, nvmIsdnLapdn202=nvmIsdnLapdn202, nvmIsdnLapdn200=nvmIsdnLapdn200, nvmDialCtlPeerCfgBchannel=nvmDialCtlPeerCfgBchannel, nvmDialCtlPeerCfgSubAddress=nvmDialCtlPeerCfgSubAddress, nvmIsdnLapdRxfrmsiz=nvmIsdnLapdRxfrmsiz, mcmDialCtlPeerStatsGaugeTable=mcmDialCtlPeerStatsGaugeTable, nvmDialCtlConfiguration=nvmDialCtlConfiguration, nvmIsdnLapdTxfrmsiz=nvmIsdnLapdTxfrmsiz, nvmIsdnDirectoryStatus=nvmIsdnDirectoryStatus, mcmCallHistoryTableResetCmd=mcmCallHistoryTableResetCmd, nvmDialCtlPeerCfgCallRetries=nvmDialCtlPeerCfgCallRetries, mcmIsdnSigStatsCntrEntry=mcmIsdnSigStatsCntrEntry, nvmIsdnEndpointTeiValue=nvmIsdnEndpointTeiValue, nvmDialCtlPeerCfgOriginateAddress=nvmDialCtlPeerCfgOriginateAddress, mcmIsdnLapdTimert202=mcmIsdnLapdTimert202, nvmDialCtlPeerCfgStatus=nvmDialCtlPeerCfgStatus, mcmIsdnLapdRxwinsiz=mcmIsdnLapdRxwinsiz, nvmDialCtlPeerCfgTable=nvmDialCtlPeerCfgTable, nvmIsdnLapdTimert200=nvmIsdnLapdTimert200, mcmDialCtlPeerCfgBchannel=mcmDialCtlPeerCfgBchannel, mcmIsdnLapdn200=mcmIsdnLapdn200, nvmIsdnEndpointTeiType=nvmIsdnEndpointTeiType, mcmIsdnLapdTxfrmsiz=mcmIsdnLapdTxfrmsiz, nvmIsdnDirectorySigIndex=nvmIsdnDirectorySigIndex, nvmIsdnDirectoryIndex=nvmIsdnDirectoryIndex, mcmIsdnLapdTimert200=mcmIsdnLapdTimert200, nvmIsdnSignalingEntry=nvmIsdnSignalingEntry, nvmIsdnEndpointTable=nvmIsdnEndpointTable, nvmIsdnSignalingInfoTrapEnable=nvmIsdnSignalingInfoTrapEnable, nvmIsdnSignalingCallingAddress=nvmIsdnSignalingCallingAddress, mcmIsdnLapdnm20=mcmIsdnLapdnm20, nvmIsdnEndpointEntry=nvmIsdnEndpointEntry, mcmIsdnLapdTable=mcmIsdnLapdTable, nvmIsdnSignalingTable=nvmIsdnSignalingTable, nvmDialCtlPeerCfgEntry=nvmDialCtlPeerCfgEntry, mcmIsdnLapdEntry=mcmIsdnLapdEntry, nvmIsdnLapdEntry=nvmIsdnLapdEntry, nvmDialCtlPeerCfgSpeed=nvmDialCtlPeerCfgSpeed, nvmIsdnLapdTxwinsiz=nvmIsdnLapdTxwinsiz, mcmDialCtlPeerStatsGaugeAction=mcmDialCtlPeerStatsGaugeAction, mcmIsdnLapdCntrTable=mcmIsdnLapdCntrTable, mcmDialCtlPeerCfgTable=mcmDialCtlPeerCfgTable, nvmIsdnBasicRateTable=nvmIsdnBasicRateTable, mcmIsdnLapdTxwinsiz=mcmIsdnLapdTxwinsiz, nvmDialCtlPeerCfgPermission=nvmDialCtlPeerCfgPermission, mcmIsdnLapdCntrIndex=mcmIsdnLapdCntrIndex, mcmIsdnLapdn202=mcmIsdnLapdn202, nvmIsdnDirectoryTable=nvmIsdnDirectoryTable, nvmIsdnDirectoryNumber=nvmIsdnDirectoryNumber, nvmIsdnLapdTimert201=nvmIsdnLapdTimert201, mcmIsdnLapdTimert203=mcmIsdnLapdTimert203, mcmIsdnLapdCntrEntry=mcmIsdnLapdCntrEntry, nvmIsdnSignalingIndex=nvmIsdnSignalingIndex, nvmIsdnSignalingProtocol=nvmIsdnSignalingProtocol, nvmIsdnDirectoryEntry=nvmIsdnDirectoryEntry, nvmIsdnLapdTimert202=nvmIsdnLapdTimert202, micom_isdn=micom_isdn, control=control, nvmDialCtlPeerCfgClosedUserGroup=nvmDialCtlPeerCfgClosedUserGroup, nvmIsdnLapdRxwinsiz=nvmIsdnLapdRxwinsiz, mcmIsdnSigStatsCntrAction=mcmIsdnSigStatsCntrAction, nvmDialCtlAcceptMode=nvmDialCtlAcceptMode, mcmDialCtlPeerCfgId=mcmDialCtlPeerCfgId, mcmDialCtlPeerStatsGaugeEntry=mcmDialCtlPeerStatsGaugeEntry, nvmDialCtlPeerCfgTrapEnable=nvmDialCtlPeerCfgTrapEnable, nvmDialCtlTrapEnable=nvmDialCtlTrapEnable, mcmIsdnLapdRxfrmsiz=mcmIsdnLapdRxfrmsiz, nvmIsdnLapdTimertm20=nvmIsdnLapdTimertm20, nvmDialCtlPeerCfgId=nvmDialCtlPeerCfgId, nvmIsdnLapdTable=nvmIsdnLapdTable, nvmIsdnLapdnm20=nvmIsdnLapdnm20, nvmDialCtlPeerCfgRetryDelay=nvmDialCtlPeerCfgRetryDelay, mcmIsdnSigStatsCntrIndex=mcmIsdnSigStatsCntrIndex, nvmIsdnLapdTimert203=nvmIsdnLapdTimert203, mcmIsdnSigStatsCntrTable=mcmIsdnSigStatsCntrTable, nvmIsdnSignalingSubAddress=nvmIsdnSignalingSubAddress, nvmIsdnBasicRateSignalMode=nvmIsdnBasicRateSignalMode, mcmIsdnLapdTimertm20=mcmIsdnLapdTimertm20, nvmIsdnBasicRateEntry=nvmIsdnBasicRateEntry, configuration=configuration, nvmDialCtlPeerCfgInfoType=nvmDialCtlPeerCfgInfoType, nvmIsdnEndpointSpid=nvmIsdnEndpointSpid, nvmDialCtlPeerCfgLowerIf=nvmDialCtlPeerCfgLowerIf, mcmCallActiveGaugeEntry=mcmCallActiveGaugeEntry, mcmCallActiveGaugeTable=mcmCallActiveGaugeTable, nvmCallHistoryTableMaxLength=nvmCallHistoryTableMaxLength, mcmIsdnLapdCntrAction=mcmIsdnLapdCntrAction, nvmDialCtlPeerCfgFailureDelay=nvmDialCtlPeerCfgFailureDelay)
