#
# PySNMP MIB module ALPHA-RESOURCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALPHA-RESOURCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:20:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, NotificationType, TimeTicks, MibIdentifier, enterprises, Counter64, ModuleIdentity, iso, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "NotificationType", "TimeTicks", "MibIdentifier", "enterprises", "Counter64", "ModuleIdentity", "iso", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alpha = ModuleIdentity((1, 3, 6, 1, 4, 1, 7309))
alpha.setRevisions(('2015-10-19 00:00', '2015-07-28 00:00', '2015-06-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alpha.setRevisionsDescriptions((' Added alarm table(s) to allow active polling of alarm states available in the Cordex HP. ', ' Updated to follow MIB structure conformance rules. Tested with SimpleWeb: http://www.simpleweb.org Passed highest level of compliance. (level 6) ', 'General version, Cordex HP Controller',))
if mibBuilder.loadTexts: alpha.setLastUpdated('201507280000Z')
if mibBuilder.loadTexts: alpha.setOrganization('Alpha Technologies Ltd.')
if mibBuilder.loadTexts: alpha.setContactInfo('Alpha Technologies Ltd. 7700 Riverfront Gate Burnaby, BC V5J 5M4 Canada Tel: 1-604-436-5900 Fax: 1-604-436-1233')
if mibBuilder.loadTexts: alpha.setDescription('This MIB defines the information block(s) available in system controllers.')
class ScaledNumber(TextualConvention, Integer32):
    description = ' Fixed point, 3 decimal places. '
    status = 'current'
    displayHint = 'd-3'

controller = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5))
controllerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 1))
resource = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2))
simple = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3))
controllerInfoName = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoName.setStatus('current')
if mibBuilder.loadTexts: controllerInfoName.setDescription('User configurable text name of the Controller.')
controllerInfoDescription = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoDescription.setStatus('current')
if mibBuilder.loadTexts: controllerInfoDescription.setDescription('User configurable description of the Controller.')
controllerInfoSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: controllerInfoSoftwareVersion.setDescription('Software version of the Controller application.')
controllerInfoOperatingSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoOperatingSystemVersion.setStatus('current')
if mibBuilder.loadTexts: controllerInfoOperatingSystemVersion.setDescription('Operating system version number.')
controllerInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerInfoHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: controllerInfoHardwareVersion.setDescription('Hardware version number.')
controllerExtInfoTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100), )
if mibBuilder.loadTexts: controllerExtInfoTable.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoTable.setDescription(' Controller specific information table. ')
controllerExtInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "controllerExtInfoIndex"))
if mibBuilder.loadTexts: controllerExtInfoEntry.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoEntry.setDescription(' Entries appear in this table for each possible alarm state. This table MUST be persistent across system reboots. ')
controllerExtInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: controllerExtInfoIndex.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoIndex.setDescription(' Incremental integer value for each instance of the . ')
controllerExtInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerExtInfoName.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoName.setDescription(' Name of the data value presented in the instance of the entry. ')
controllerExtInfoStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerExtInfoStringValue.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoStringValue.setDescription(' String value of the data field presented by the controller info entry. ')
controllerExtInfoUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerExtInfoUnit.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoUnit.setDescription(' Unit name of the numeric value of the controller info entry. ')
controllerExtInfoNumberValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 1, 100, 1, 5), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerExtInfoNumberValue.setStatus('current')
if mibBuilder.loadTexts: controllerExtInfoNumberValue.setDescription(' Number value of the data field presented by the controller info entry. ')
componentList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1))
componentListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListCount.setStatus('current')
if mibBuilder.loadTexts: componentListCount.setDescription(' The number of available objects in componentList. ')
componentListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2), )
if mibBuilder.loadTexts: componentListTable.setStatus('current')
if mibBuilder.loadTexts: componentListTable.setDescription(' Object componentList describes the following: Systems ( DC System, AC System, Converter System, etc. ) Devices ( ADIO, Rectifier, Converter, Inverter, etc. ) ')
componentListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: componentListEntry.setStatus('current')
if mibBuilder.loadTexts: componentListEntry.setDescription(' Entry to the component list describing the available systems and devices within the Cordex controller. Indexing: 1. Component type - please refer to componentListType 2. Snmp ID - please refer to componentListReference Configurable ID allow for component monitoring on a specific index if the method of monitoring is locked on the index value. ')
componentListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: componentListReference.setStatus('current')
if mibBuilder.loadTexts: componentListReference.setDescription(' Indentification number assigned to the component.')
componentListStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListStaticName.setStatus('current')
if mibBuilder.loadTexts: componentListStaticName.setDescription(' Non-configurable name permanently assigned to the component. Filtering on this data value is possible and recommended due to its static nature. ')
componentListConfiguredName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: componentListConfiguredName.setStatus('current')
if mibBuilder.loadTexts: componentListConfiguredName.setDescription(' User configurable name of the component. Filtering on this data value is not recommended. ')
componentListType = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: componentListType.setStatus('current')
if mibBuilder.loadTexts: componentListType.setDescription(' The type of the component based on power system terminology. 1 - Controller 2 - DC System 3 - ADIO 4 - Rectifier 5 - Converter 6 - Inverter 7 - BCMC 8 - T2S 9 - AC Input Bus 10 - Battery String 11 - Disconnect 12 - Load 13 - Shunt 14 - SNMP Destinations 15 - CAN Bus ')
componentListModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListModelNumber.setStatus('current')
if mibBuilder.loadTexts: componentListModelNumber.setDescription(' Component model number where applicable. This is available on component entries which describes hardware modules. ')
componentListSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListSerialNumber.setStatus('current')
if mibBuilder.loadTexts: componentListSerialNumber.setDescription(' Serial number of the device only if the component is of physical device type. ')
componentListSystemPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 1, 2, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentListSystemPointer.setStatus('current')
if mibBuilder.loadTexts: componentListSystemPointer.setDescription(' Table entry reference to the component table of the system component that the described item belongs to. Example: A rectifier component will have a reference to the Rectifier System that it belongs to. ')
dataList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2))
dataListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataListCount.setStatus('current')
if mibBuilder.loadTexts: dataListCount.setDescription('The number of defined data fields available for query.')
dataListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2), )
if mibBuilder.loadTexts: dataListTable.setStatus('current')
if mibBuilder.loadTexts: dataListTable.setDescription(' Table of data fields available for query. ')
dataListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "dataListReference"))
if mibBuilder.loadTexts: dataListEntry.setStatus('current')
if mibBuilder.loadTexts: dataListEntry.setDescription(' Data field entry of available fields. Indexes: 1. componentListType - indicates which component can provide the field of interest. 2. dataListReference - the ID permanently assigned to the field. ')
dataListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: dataListReference.setStatus('current')
if mibBuilder.loadTexts: dataListReference.setDescription(' Non-configurable ID permanently assigned to the field entry. ')
dataListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataListName.setStatus('current')
if mibBuilder.loadTexts: dataListName.setDescription(' Non-configurable string name of the field represented in the entry. ')
dataListType = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: dataListType.setStatus('current')
if mibBuilder.loadTexts: dataListType.setDescription(' Canonical data type of the field entry. 0 - None 1 - Numeric 2 - Boolean 3 - Time 4 - String 5 - Choice / Selected options ')
dataListUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 2, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataListUnit.setStatus('current')
if mibBuilder.loadTexts: dataListUnit.setDescription(' Unit type of the value represented by the entry. ')
data = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3))
dataCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCount.setStatus('current')
if mibBuilder.loadTexts: dataCount.setDescription('The number of defined data points available for query.')
dataTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2), )
if mibBuilder.loadTexts: dataTable.setStatus('current')
if mibBuilder.loadTexts: dataTable.setDescription('Table of data values associated to live data availabe from the Cordex HP controller.')
dataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "dataListReference"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: dataEntry.setStatus('current')
if mibBuilder.loadTexts: dataEntry.setDescription('Conceptual row of data value for the referencing data field type and component that it belongs to.')
dataReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: dataReference.setStatus('current')
if mibBuilder.loadTexts: dataReference.setDescription(' Non-configurable ID permanently assigned to the field entry. ')
dataNumberValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2, 1, 2), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataNumberValue.setStatus('current')
if mibBuilder.loadTexts: dataNumberValue.setDescription(' Numeric value of the data field. ')
dataStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataStringValue.setStatus('current')
if mibBuilder.loadTexts: dataStringValue.setDescription(' String value of the data field. ')
configurationList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4))
configurationListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationListCount.setStatus('current')
if mibBuilder.loadTexts: configurationListCount.setDescription('The number of defined configuration fields available for query.')
configurationListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2), )
if mibBuilder.loadTexts: configurationListTable.setStatus('current')
if mibBuilder.loadTexts: configurationListTable.setDescription(' Table of configuration entries. ')
configurationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "configurationListReference"))
if mibBuilder.loadTexts: configurationListEntry.setStatus('current')
if mibBuilder.loadTexts: configurationListEntry.setDescription(' Configuration field entries available for GET and SET. ')
configurationListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: configurationListReference.setStatus('current')
if mibBuilder.loadTexts: configurationListReference.setDescription(' A numerical ID value permanently assigned to the configuration field. ')
configurationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationListName.setStatus('current')
if mibBuilder.loadTexts: configurationListName.setDescription(' A non-configurable string name of the configuration field. ')
configurationListType = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationListType.setStatus('current')
if mibBuilder.loadTexts: configurationListType.setDescription(' Conanical data type of the configuration field. 0 - Unknown 1 - Numeric 2 - Boolean 3 - Time 4 - String 5 - Choice / Selected Options ')
configurationListUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationListUnit.setStatus('current')
if mibBuilder.loadTexts: configurationListUnit.setDescription(' Unit of the numeric value of the configuration field. ')
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5))
configurationCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationCount.setStatus('current')
if mibBuilder.loadTexts: configurationCount.setDescription(' The number of defined configuration points available for query. ')
configurationTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2), )
if mibBuilder.loadTexts: configurationTable.setStatus('current')
if mibBuilder.loadTexts: configurationTable.setDescription(' Table of configuration entries. ')
configurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "configurationListReference"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: configurationEntry.setStatus('current')
if mibBuilder.loadTexts: configurationEntry.setDescription(' Configuration field entry. ')
configurationReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: configurationReference.setStatus('current')
if mibBuilder.loadTexts: configurationReference.setDescription(' Non-configurable ID permanently assigned to the field entry. ')
configurationNumberValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2, 1, 2), ScaledNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationNumberValue.setStatus('current')
if mibBuilder.loadTexts: configurationNumberValue.setDescription(' Numbered value of the configuration referenced by the Configuration Type and the Component Reference. ')
configurationStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configurationStringValue.setStatus('current')
if mibBuilder.loadTexts: configurationStringValue.setDescription(' String value of the configuration referenced by the Configuration Type and the Component Reference. ')
commandList = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6))
commandListCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commandListCount.setStatus('current')
if mibBuilder.loadTexts: commandListCount.setDescription('The number of defined data points available for query.')
commandListTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 2), )
if mibBuilder.loadTexts: commandListTable.setStatus('current')
if mibBuilder.loadTexts: commandListTable.setDescription(' Table of commands available from the Cordex HP Controller. ')
commandListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "commandListReference"))
if mibBuilder.loadTexts: commandListEntry.setStatus('current')
if mibBuilder.loadTexts: commandListEntry.setDescription(' Conceptual row of a command item in the Command List Table. ')
commandListReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: commandListReference.setStatus('current')
if mibBuilder.loadTexts: commandListReference.setDescription(' Reference value to identify available commands published by the Cordex HP Controller. ')
commandListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandListName.setStatus('current')
if mibBuilder.loadTexts: commandListName.setDescription(' Name of the command. ')
command = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7))
commandCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commandCount.setStatus('current')
if mibBuilder.loadTexts: commandCount.setDescription('The number of defined command points available for query.')
commandTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 2), )
if mibBuilder.loadTexts: commandTable.setStatus('current')
if mibBuilder.loadTexts: commandTable.setDescription(' Table of command fields that are available in the Cordex HP Controller. ')
commandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "commandListReference"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: commandEntry.setStatus('current')
if mibBuilder.loadTexts: commandEntry.setDescription(' Conceptual row of the Command Table. ')
commandReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: commandReference.setStatus('current')
if mibBuilder.loadTexts: commandReference.setDescription(' Non-configurable ID permanently assigned to the field entry. ')
commandTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandTrigger.setStatus('current')
if mibBuilder.loadTexts: commandTrigger.setDescription(' Command field that is the trigger to send command referenced by the Command Type and the Component that it belongs to. ')
alarmType = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8))
alarmTypeCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTypeCount.setStatus('current')
if mibBuilder.loadTexts: alarmTypeCount.setDescription('The number of defined alarm points available for query.')
alarmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 2), )
if mibBuilder.loadTexts: alarmTypeTable.setStatus('current')
if mibBuilder.loadTexts: alarmTypeTable.setDescription(' Table of alarms available from the Cordex HP Controller. ')
alarmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "alarmTypeReference"))
if mibBuilder.loadTexts: alarmTypeEntry.setStatus('current')
if mibBuilder.loadTexts: alarmTypeEntry.setDescription(' Conceptual row of a alarm item in the Alarm List Table. ')
alarmTypeReference = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: alarmTypeReference.setStatus('current')
if mibBuilder.loadTexts: alarmTypeReference.setDescription(' Reference value to identify available alarms published by the Cordex HP Controller. ')
alarmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 8, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTypeName.setStatus('current')
if mibBuilder.loadTexts: alarmTypeName.setDescription(' Name of the alarm. ')
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9))
alarmCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCount.setStatus('current')
if mibBuilder.loadTexts: alarmCount.setDescription('The number of defined alarm points available for query.')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9, 2), )
if mibBuilder.loadTexts: alarmTable.setStatus('current')
if mibBuilder.loadTexts: alarmTable.setDescription(' Table of alarm fields that are available in the Cordex HP Controller. ')
alarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9, 2, 1), ).setIndexNames((0, "ALPHA-RESOURCE-MIB", "componentListType"), (0, "ALPHA-RESOURCE-MIB", "alarmTypeReference"), (0, "ALPHA-RESOURCE-MIB", "componentListReference"))
if mibBuilder.loadTexts: alarmEntry.setStatus('current')
if mibBuilder.loadTexts: alarmEntry.setDescription(' Conceptual row of the Alarm Table. ')
alarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 5, 2, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('current')
if mibBuilder.loadTexts: alarmState.setDescription(' Interger representation of the state of the alarm and its priority level. 0 - Normal 1 - Warning 2 - Minor 3 - Major 4 - Critical ')
resourceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100))
resourceCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1))
resourceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 1)).setObjects(("ALPHA-RESOURCE-MIB", "alphaControllerGroup"), ("ALPHA-RESOURCE-MIB", "alphaComponentGroup"), ("ALPHA-RESOURCE-MIB", "alphaDataTypeGroup"), ("ALPHA-RESOURCE-MIB", "alphaDataGroup"), ("ALPHA-RESOURCE-MIB", "alphaConfigurationTypeGroup"), ("ALPHA-RESOURCE-MIB", "alphaConfigurationGroup"), ("ALPHA-RESOURCE-MIB", "alphaCommandTypeGroup"), ("ALPHA-RESOURCE-MIB", "alphaCommandGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resourceCompliance = resourceCompliance.setStatus('current')
if mibBuilder.loadTexts: resourceCompliance.setDescription('The compliance statement for systems supporting the Alpha Resource MIB.')
resourceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2))
alphaControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 1)).setObjects(("ALPHA-RESOURCE-MIB", "controllerInfoName"), ("ALPHA-RESOURCE-MIB", "controllerInfoDescription"), ("ALPHA-RESOURCE-MIB", "controllerInfoSoftwareVersion"), ("ALPHA-RESOURCE-MIB", "controllerInfoOperatingSystemVersion"), ("ALPHA-RESOURCE-MIB", "controllerInfoHardwareVersion"), ("ALPHA-RESOURCE-MIB", "controllerExtInfoName"), ("ALPHA-RESOURCE-MIB", "controllerExtInfoStringValue"), ("ALPHA-RESOURCE-MIB", "controllerExtInfoUnit"), ("ALPHA-RESOURCE-MIB", "controllerExtInfoNumberValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaControllerGroup = alphaControllerGroup.setStatus('current')
if mibBuilder.loadTexts: alphaControllerGroup.setDescription('Alpha controller data list group.')
alphaComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 2)).setObjects(("ALPHA-RESOURCE-MIB", "componentListCount"), ("ALPHA-RESOURCE-MIB", "componentListStaticName"), ("ALPHA-RESOURCE-MIB", "componentListConfiguredName"), ("ALPHA-RESOURCE-MIB", "componentListModelNumber"), ("ALPHA-RESOURCE-MIB", "componentListSerialNumber"), ("ALPHA-RESOURCE-MIB", "componentListSystemPointer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaComponentGroup = alphaComponentGroup.setStatus('current')
if mibBuilder.loadTexts: alphaComponentGroup.setDescription('Component data list group.')
alphaDataTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 3)).setObjects(("ALPHA-RESOURCE-MIB", "dataListCount"), ("ALPHA-RESOURCE-MIB", "dataListName"), ("ALPHA-RESOURCE-MIB", "dataListUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaDataTypeGroup = alphaDataTypeGroup.setStatus('current')
if mibBuilder.loadTexts: alphaDataTypeGroup.setDescription('Data type list group.')
alphaDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 4)).setObjects(("ALPHA-RESOURCE-MIB", "dataCount"), ("ALPHA-RESOURCE-MIB", "dataNumberValue"), ("ALPHA-RESOURCE-MIB", "dataStringValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaDataGroup = alphaDataGroup.setStatus('current')
if mibBuilder.loadTexts: alphaDataGroup.setDescription('Data type list group.')
alphaConfigurationTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 5)).setObjects(("ALPHA-RESOURCE-MIB", "configurationListCount"), ("ALPHA-RESOURCE-MIB", "configurationListName"), ("ALPHA-RESOURCE-MIB", "configurationListType"), ("ALPHA-RESOURCE-MIB", "configurationListUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaConfigurationTypeGroup = alphaConfigurationTypeGroup.setStatus('current')
if mibBuilder.loadTexts: alphaConfigurationTypeGroup.setDescription('Data type list group.')
alphaConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 6)).setObjects(("ALPHA-RESOURCE-MIB", "configurationCount"), ("ALPHA-RESOURCE-MIB", "configurationStringValue"), ("ALPHA-RESOURCE-MIB", "configurationNumberValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaConfigurationGroup = alphaConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: alphaConfigurationGroup.setDescription('Data type list group.')
alphaCommandTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 7)).setObjects(("ALPHA-RESOURCE-MIB", "commandListCount"), ("ALPHA-RESOURCE-MIB", "commandListName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaCommandTypeGroup = alphaCommandTypeGroup.setStatus('current')
if mibBuilder.loadTexts: alphaCommandTypeGroup.setDescription('Data type list group.')
alphaCommandGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 2, 100, 1, 2, 8)).setObjects(("ALPHA-RESOURCE-MIB", "commandCount"), ("ALPHA-RESOURCE-MIB", "commandTrigger"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alphaCommandGroup = alphaCommandGroup.setStatus('current')
if mibBuilder.loadTexts: alphaCommandGroup.setDescription('Data type list group.')
mibBuilder.exportSymbols("ALPHA-RESOURCE-MIB", commandListEntry=commandListEntry, alarmType=alarmType, componentListTable=componentListTable, configurationListUnit=configurationListUnit, dataCount=dataCount, command=command, configuration=configuration, controllerInfoDescription=controllerInfoDescription, configurationListCount=configurationListCount, componentListType=componentListType, commandTable=commandTable, alarm=alarm, alphaConfigurationTypeGroup=alphaConfigurationTypeGroup, dataListUnit=dataListUnit, data=data, commandEntry=commandEntry, componentListConfiguredName=componentListConfiguredName, componentListModelNumber=componentListModelNumber, commandReference=commandReference, dataListReference=dataListReference, resource=resource, dataReference=dataReference, controllerExtInfoStringValue=controllerExtInfoStringValue, controllerInfoHardwareVersion=controllerInfoHardwareVersion, alpha=alpha, PYSNMP_MODULE_ID=alpha, commandList=commandList, alphaComponentGroup=alphaComponentGroup, simple=simple, alarmTypeReference=alarmTypeReference, controllerExtInfoTable=controllerExtInfoTable, controller=controller, dataStringValue=dataStringValue, controllerExtInfoName=controllerExtInfoName, alphaConfigurationGroup=alphaConfigurationGroup, configurationListEntry=configurationListEntry, componentListSerialNumber=componentListSerialNumber, controllerInfoOperatingSystemVersion=controllerInfoOperatingSystemVersion, commandListName=commandListName, alarmTable=alarmTable, alphaDataTypeGroup=alphaDataTypeGroup, controllerExtInfoIndex=controllerExtInfoIndex, configurationListName=configurationListName, dataList=dataList, dataEntry=dataEntry, componentListReference=componentListReference, dataTable=dataTable, resourceConformance=resourceConformance, controllerInfo=controllerInfo, ScaledNumber=ScaledNumber, componentListCount=componentListCount, dataListName=dataListName, dataListType=dataListType, configurationNumberValue=configurationNumberValue, alarmEntry=alarmEntry, resourceCompliance=resourceCompliance, componentListEntry=componentListEntry, controllerInfoName=controllerInfoName, alphaDataGroup=alphaDataGroup, componentListStaticName=componentListStaticName, resourceGroups=resourceGroups, controllerExtInfoEntry=controllerExtInfoEntry, alarmState=alarmState, resourceCompliances=resourceCompliances, controllerInfoSoftwareVersion=controllerInfoSoftwareVersion, commandCount=commandCount, configurationEntry=configurationEntry, commandListTable=commandListTable, configurationList=configurationList, componentListSystemPointer=componentListSystemPointer, dataListCount=dataListCount, commandListReference=commandListReference, alarmTypeTable=alarmTypeTable, alphaCommandGroup=alphaCommandGroup, configurationReference=configurationReference, alarmTypeEntry=alarmTypeEntry, alarmTypeCount=alarmTypeCount, alphaControllerGroup=alphaControllerGroup, configurationListReference=configurationListReference, commandListCount=commandListCount, dataListTable=dataListTable, alarmCount=alarmCount, configurationStringValue=configurationStringValue, componentList=componentList, configurationCount=configurationCount, configurationTable=configurationTable, dataNumberValue=dataNumberValue, configurationListType=configurationListType, alarmTypeName=alarmTypeName, controllerExtInfoUnit=controllerExtInfoUnit, commandTrigger=commandTrigger, configurationListTable=configurationListTable, dataListEntry=dataListEntry, alphaCommandTypeGroup=alphaCommandTypeGroup, controllerExtInfoNumberValue=controllerExtInfoNumberValue)
