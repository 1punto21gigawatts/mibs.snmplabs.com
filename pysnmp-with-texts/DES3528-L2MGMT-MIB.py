#
# PySNMP MIB module DES3528-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES3528-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, Gauge32, TimeTicks, Bits, NotificationType, Unsigned32, ObjectIdentity, ModuleIdentity, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Gauge32", "TimeTicks", "Bits", "NotificationType", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso")
DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
des3528, = mibBuilder.importSymbols("SW3528PRIMGMT-MIB", "des3528")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('0812010000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swL2MgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swL2MgmtMIB.setDescription('The Structure of Layer 2 Network Management Information.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1))
swL2VLANMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3))
swL2LimitedMulticastMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7))
swL2DhcpRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 10))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 14))
swL2MulticastFilterMode = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 17))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18))
swL2DhcpLocalRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 24))
swL2PPPoEMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 25))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100))
swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setDescription('The number of ports within this switch. This value is the sum of the ports within this switch.')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setDescription('The number of ports in this switch connected to the segment or the end stations.')
swDevInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setStatus('current')
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setDescription('This object is a set of system LED indications. The first five octets are defined as system LED. The first two octets are currently unused and must be set to zero. The third octet indicates the power LED. The fourth octet indicates the console LED. The fifth LED is RPS (Redundancy Power Supply) LED. The other octets are the logical port LED. Every two bytes are presented to a port. The first byte is presented as the Link/Activity LED. The second byte is presented as the Speed LED. System LED: 01 = fail/error/non existence. 02 = work normal Link/Activity LED : The most significant bit is used for blink/solid: 8 = The LED blinks. The second most significant bit is used for link status: 1 = link fail. 2 = link pass. Speed LED : 01 = 10Mbps. 02 = 100Mbps. 03 = 1000Mbps. The four remaining bits are currently unused and must be 0.')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlStpState.setDescription('This object can enable or disable the spanning tree algorithm during the runtime of the system.')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setDescription('This object indicates if the layer 2 Internet Group Management Protocol (IGMP) capture function is enabled or disabled.')
swL2DevCtrlIGMPSnoopingMcstRTOnly = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setDescription('This object controls IGMP snooping forward multicast routing only state.')
swL2DevCtrlSnmpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setDescription('This object controls the SNMP trap status.')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setDescription('When the object is set to active, all statistical counters will be cleared. If set to normal, no action.')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setDescription('Indicates the VLAN ID to which the Dot1dTpFdbTable belongs; The default value is DEFAULT_VLAN_ID of the system.')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyState.setDescription('This object can enable or disable MAC Notification.')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setDescription('This object indicates the history size of MAC addresses in the MAC Address table. The default value is 1 .')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyInterval.setDescription('This object indicates the time interval, in seconds, which will trigger MAC notification messages.')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setDescription('This object enables or disables asymmetric VLANs during the runtime of the system.')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 14))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setDescription('This object controls the Telnet status.')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setDescription('This object designates TCP ports. When Telnet is disabled, this object is not accessible.')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setDescription('This object controls which previously created VLANs are included in the System IP Interface.')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 17))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebState.setDescription('This object controls the Web status.')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setDescription('This object designates TCP ports. When Web is disabled, this object is not accessible.')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setDescription('Specifies the state of the LLDP function. When this function is enabled, the switch can start to transmit LLDP packets and receive and process the LLDP packets. The specific function of each port will depend on the per port LLDP setting. For the advertisement of LLDP packets, the switch announces the information to its neighbor through ports. For the receiving of LLDP packets, the switch will learn the information from the LLDP packets advertised from the neighbor in the neighbor table. ')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setDescription('When lldp is disabled and lldp forward_message is enabled, the received LLDP Data Unit packets will be forwarded. ')
swL2DevCtrlIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setDescription('This object controls the IP auto configuration state.')
swL2DevCtrlCFM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 21))
swL2DevCtrlCFMState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setDescription('This object indicates the CFM global state.')
swL2DevCtrlCFMPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 21, 2), )
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setDescription('A table containing CFM state of speicified ports.')
swL2DevCtrlCFMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 21, 2, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2DevCtrlCFMPortIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setDescription('The entry of CFM state on speicified ports.')
swL2DevCtrlCFMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 21, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setDescription('This object indicates the port-num.')
swL2DevCtrlCFMPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setDescription('This object indicates the CFM state on per-port.')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setDescription('This indicates the global state of the VLAN trunking feature of the device.')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setDescription('When the device has become the new root of the Spanning Tree, this object decides whether to send a new root trap.')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setDescription('This object determines whether or not to send a trap message when the switch topology changes. If the object is enabled(3), the topologyChange trap is sent by the device when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port transition, the device does not send the trap if this object value is disabled or other.')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setDescription('This object determines whether or not to send a trap message when the link was changed. If the object is enabled(3), the Link Change trap is sent by the device when any of its ports link change. The device does not send the trap if this object value is disabled or other.')
swL2VlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 1), )
if mibBuilder.loadTexts: swL2VlanStaticTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticTable.setDescription('A table containing static configuration information for each VLAN configured into the device by (local or network) management. All entries are permanent and will be restored after the device is reset.')
swL2VlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 1, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanStaticEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticEntry.setDescription('Static information for a VLAN configured into the device by (local or network) management.')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
swL2VLANAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VLANAdvertisement.setStatus('current')
if mibBuilder.loadTexts: swL2VLANAdvertisement.setDescription('This object indicates if the advertisement is active or not.')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setDescription("This object controls the PVID auto assigment state. If 'Auto-assign PVID' is disabled, PVID can only be changed by PVID configuration (user changes explicitly). The VLAN configuration will not automatically change the PVID. If 'Auto-assign PVID' is enabled, the PVID will be changed by PVID or VLAN configuration. When a user configures a port to VLAN X's untagged membership, this port's PVID will be updated with VLAN X. Using the VLAN list command, PVID is updated as the last item of the VLAN list. When a user removes a port from the untagged membership of the PVID's VLAN, the port's PVID will be assigned 'default VLAN'.")
swL2VlanPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 3), )
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setDescription('A table containing vlan and port role information of each port.')
swL2VlanPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 3, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2VlanPortInfoPortIndex"), (0, "DES3528-L2MGMT-MIB", "swL2VlanPortInfoVid"))
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setDescription('The table entry of vlan port information.')
swL2VlanPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setDescription('The port index.')
swL2VlanPortInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setDescription('The VLAN-ID assigned to a special port')
swL2VlanPortInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("untagged", 2), ("tagged", 3), ("dynamic", 4), ("forbidden", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setDescription('The port role of a special port.when none,it means this port is not belong to the vlan.')
swL2NniGvrpBpduAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1ad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setStatus('current')
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setDescription("Specifies the GVRP's BPDU MAC address of NNI port In Q-in_Q status.")
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoTable.setDescription('A table that contains information about every port.')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DES3528-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoEntry.setDescription('A list of information for each port of the device.')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoMediumType.setDescription('Indicates medium type of the port number.')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoUnitID.setDescription('Indicates ID of the unit in the system')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("portType-none", 0), ("portType-100Base-T", 2), ("portType-100Base-X", 3), ("portType-1000Base-T", 4), ("portType-1000Base-X", 5), ("portType-10GBase-R", 6), ("portType-10GBase-CX4", 7), ("portType-SIO", 8), ("portType-module-empty", 9), ("portType-user-last", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoType.setDescription('This object indicates the connector type of this port.')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("link-down", 0), ("full-10Mbps-8023x", 1), ("full-10Mbps-none", 2), ("half-10Mbps-backp", 3), ("half-10Mbps-none", 4), ("full-100Mbps-8023x", 5), ("full-100Mbps-none", 6), ("half-100Mbps-backp", 7), ("half-100Mbps-none", 8), ("full-1Gigabps-8023x", 9), ("full-1Gigabps-none", 10), ("half-1Gigabps-backp", 11), ("half-1Gigabps-none", 12), ("full-10Gigabps-8023x", 13), ("full-10Gigabps-none", 14), ("half-10Gigabps-8023x", 15), ("half-10Gigabps-none", 16), ("empty", 17), ("err-disabled", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("unknow", 3), ("ctp-lbd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setDescription('This object indicates the blocking type of this port.')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlTable.setDescription('A table that contains control information about every port.')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DES3528-L2MGMT-MIB", "swL2PortCtrlMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlEntry.setDescription('A list of control information for each port on the device.')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setDescription('Indicates the medium type of the port number.')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setDescription('Indicates the ID of the unit in the device')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setDescription('This object decides if the port is enabled or disabled.')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setDescription('Chose the port speed, duplex mode, and N-Way function mode.')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setDescription('The flow control mechanism is different between full duplex mode and half duplex mode. For half duplex mode, the jamming signal is asserted. For full duplex mode, the IEEE 802.3x flow control function sends PAUSE frames and receives PAUSE frames.')
swL2PortCtrlLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setDescription('This object decides if the port is locked or not.')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setDescription("This object sets each port's MAC notification state.")
swL2PortCtrlMDIXState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setDescription('This object configures the MDIX setting of the port.')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setDescription("This object configures the switch's jumbo frame settings.")
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setDescription('This object describes how many bytes the max jumbo frame is.')
swL2PortCableDiagnosisTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 5), )
if mibBuilder.loadTexts: swL2PortCableDiagnosisTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisTable.setDescription('A table that contains cable diagnostic information about every port.')
swL2PortCableDiagnosisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 5, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2PortCableDiagnosisPortIndex"), (0, "DES3528-L2MGMT-MIB", "swL2PortCableDiagnosisPairIndex"))
if mibBuilder.loadTexts: swL2PortCableDiagnosisEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisEntry.setDescription('A list of cable diagnostic information for each port of the device.')
swL2PortCableDiagnosisPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCableDiagnosisPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairIndex.setDescription('Indicates pair index of the port. The pair 1 means the pin 3 and 6 of the connector. The pair 2 means the pin 1 and 2 of the connector. The pair 3 means the pin 7 and 8 of the connector. The pair 4 means the pin 4 and 5 of the connector.')
swL2PortCableDiagnosisCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("not-support", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisCableStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisCableStatus.setDescription('This object indicates the cable status.')
swL2PortCableDiagnosisPairStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("fail", 3), ("not-supported", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairStatus.setDescription('This object indicates the status of the pair.')
swL2PortCableDiagnosisPairLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLength.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLength.setDescription('This object indicates the approx. length or length to failure of the pair. The unit value is in meters.')
swL2PortCableDiagnosisPairLengthInaccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLengthInaccuracy.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLengthInaccuracy.setDescription('This object indicates the inaccuracy of a pair length. The unit value is in meters.')
swL2PortCounterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 6), )
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setDescription('A table that used to clear counter information about every port.')
swL2PortCounterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 6, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2PortCounterCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setDescription('A list of entry used to clear counter information for each port of the device.')
swL2PortCounterCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCounterClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setDescription('This object indicates if to clear the counters for each port of the device or not.')
swL2PortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 7), )
if mibBuilder.loadTexts: swL2PortErrTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrTable.setDescription('A table that contains error information for each port.')
swL2PortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 7, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2PortErrPortIndex"))
if mibBuilder.loadTexts: swL2PortErrEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrEntry.setDescription('A list of information regarding port errors on the device.')
swL2PortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module).")
swL2PortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortState.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortState.setDescription('This object indicates the port state is enabled or disabled.')
swL2PortErrPortConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortConnStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortConnStatus.setDescription('This object indicates whether the PortStatus is err-disabled or not.')
swL2PortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("storm-control", 2), ("ctp-lbd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortReason.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortReason.setDescription('This object describes if the reason for the port error is STP LBD or Storm control.')
swL2MulticastFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 1), )
if mibBuilder.loadTexts: swL2MulticastFilterProfileTable.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterProfileTable.setDescription(' A table that contains information about multicast filter address.')
swL2MulticastFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 1, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2MulticastFilterProfileIndex"))
if mibBuilder.loadTexts: swL2MulticastFilterProfileEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterProfileEntry.setDescription('A list of multicast filter address information for each profile ID. ')
swL2MulticastFilterProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterProfileIndex.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterProfileIndex.setDescription('Indicates index for each profile.')
swL2MulticastFilterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastFilterProfileName.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterProfileName.setDescription('Specifies a profile name for each multicast filter profile.')
swL2MulticastFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastFilterStatus.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterStatus.setDescription('This object indicates the status of this entry.')
swL2MulticastFilterProfileAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 2), )
if mibBuilder.loadTexts: swL2MulticastFilterProfileAddressTable.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterProfileAddressTable.setDescription(' A table that contains information about multicast filter address.')
swL2MulticastFilterProfileAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 2, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2MulticastFilterProfileIdIndex"), (0, "DES3528-L2MGMT-MIB", "swL2MulticastFilterFromIp"), (0, "DES3528-L2MGMT-MIB", "swL2MulticastFilterToIp"))
if mibBuilder.loadTexts: swL2MulticastFilterProfileAddressEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterProfileAddressEntry.setDescription('A list of multicast filter address information for each profile ID. ')
swL2MulticastFilterProfileIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterProfileIdIndex.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterProfileIdIndex.setDescription('Indicates index for each profile.')
swL2MulticastFilterFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterFromIp.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterFromIp.setDescription('Specifies the head IP address of a multicast address range which will be binded to a multicast filter profile.')
swL2MulticastFilterToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterToIp.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterToIp.setDescription('Specifies the tail IP address of a multicast address range which will be binded to a multicast filter profile.')
swL2MulticastFilterAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastFilterAddressState.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterAddressState.setDescription('This object indicates the status of this entry. Setting value to createAndGo(4) will add the multicast address list specified in swL2MulticastFilterFromIp and swL2MulticastFilterToIp to multicast filter profile. Setting value to destroy(6) will remove the multicast address list specified in swL2MulticastFilterFromIp and swL2MulticastFilterToIp from multicast filter profile.')
swL2LimitedMulticastFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 3), )
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortTable.setDescription(' A table that used to bind port to profile id.')
swL2LimitedMulticastFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 3, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2LimitedMulticastFilterPortIndex"))
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortEntry.setDescription('A list of information that used to bind port to profile id. ')
swL2LimitedMulticastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortIndex.setDescription('Specifies port as an index.')
swL2LimitedMulticastFilterPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortAccess.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortAccess.setDescription('This object indicates the access status for each port.')
swL2LimitedMulticastFilterPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortProfileID.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortProfileID.setDescription('This object specifies a profile ID list for each port.')
swL2LimitedMulticastFilterPortProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortProfileStatus.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortProfileStatus.setDescription("Controls the multicast filter profile list which bind to each port. When set add(2), multicast filter profile ID list which specifies in swL2LimitedMulticastFilterPortProfileID will be bound to the port. When set delete(3), multicast filter profile ID list which specifies in swL2LimitedMulticastFilterPortProfileID will be unbound from the port. The attribute value reverts to 'other' once the action has been done.")
swL2MulticastFilterPortMaxGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 4), )
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupTable.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupTable.setDescription(' A table that contains information about max group number based on port.')
swL2MulticastFilterPortMaxGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 4, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2MulticastFilterPortMaxGroupPortIndex"))
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupEntry.setDescription('A list of max group number information for each port. ')
swL2MulticastFilterPortMaxGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupPortIndex.setDescription('Specifies port number as table index.')
swL2MulticastFilterPortMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroup.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroup.setDescription('Specifies maximum multicast filter group numbers for each port. Default value is 0,and 0 means infinite.')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setDescription('.')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 1, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setDescription('A list of information contained in the swL2QOSBandwidthControlTable.')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setDescription('Indicates the port .')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024001))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setDescription('Indicates RX Rate of the specified port. Value 1024001 means no limit.')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024001))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setDescription('Indicates TX Rate of the specified port. Value 1024001 means no limit.')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setDescription('The RxRate value comes from RADIUS server, If an 802.1X port is authenticated, this value will overwrites the locally configured RxRate. ')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setDescription('The TxRate value comes from RADIUS server, If an 802.1X port is authenticated, this value will overwrites the locally configured TxRate. ')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setDescription('.')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 2, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setDescription('A list of information contained in the swL2QOSSchedulingTable.')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setDescription('Indicates the hardware queue number.')
swL2QOSSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setDescription('Indicates the maximum number of packets the hardware priority queue will be allowed to transmit before allowing the next lowest priority queue to transmit its packets. a value between 0 and 15 can be specified.')
swL2QOSSchedulingMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setDescription('Indicates the mechanism of QoS scheduling.')
swL2QOSSchedulingMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxLatency.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMaxLatency.setDescription('Indicates the maximum amount of time the hardware priority queue will be allowed to transmit packets before allowing the next lowest priority queue to begin transmitting its packets. A value between 0 and 255 can be specified- with this value multiplied by 16 ms to arrive at the total allowed time for queue to transmit packets. For example, a value of 3 specifies 3*16=48 ms. The queue will continue transmitting the last packet until it is finished when the max_latency timer expires. ')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setDescription('.')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 3, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setDescription('A list of information contained in the swL2QOS8021pUserPriorityTable.')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setDescription('The 802.1p user priority .')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setDescription("The number of the switch's hardware priority queue. The switch has seven hardware priority queues available. They are numbered between 0 (the lowest priority) and 6 (the highest priority).")
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setDescription('.')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 4, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setDescription('A list of information contained in the swL2QOS8021pDefaultPriorityTable.')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setDescription('Indicates the port number .')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setDescription('The priority value to assign to untagged packets received by the switch ports on the switch..')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setDescription('The value of 802.1p comes from RADIUS server. If an 802.1X port is authenticated, this value will overwrite the local configured value.')
swL2QOSSchedulingMechanismCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setDescription('This object controls QoS scheduling Mechanism.')
swL2QOSHolPreventionCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSHolPreventionCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2QOSHolPreventionCtrl.setDescription('Controls QoS HoL Prevention')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setDescription('A port security feature which controls the address leaning capability and traffic forwarding decisions. Each port can be enabled or disabled for this function. When it is enabled and a number is given said N, which allows N addresses to be learned on this port, the first N learned addresses are locked at this port as static entries. When the learned addresses number reaches N, any incoming packet without learned source addresses are discarded (e.g. dropped) and no more new addresses can be learned on this port.')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 1, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setDescription('A list of information contained in the swL2PortSecurityControlTable.')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setDescription('Indicates the secured port to lock address learning.')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setDescription('Indicates allowable number of addresses to be learned on this port.')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMode.setDescription('Indicates the mode of locking address. In deleteOnTimeout(3) mode - the locked addresses can be aged out after the aging timer expires. In this mode, when the locked address is aged out, the number of addresses that can be learned has to be increased by one. In deleteOnReset(4) mode - Locked addresses never age out unless the system restarts which will prevent port movement or intrusion.')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setDescription('Indicates administration state of locking address.')
swL2PortSecurityEntryClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityEntryClearCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityEntryClearCtrl.setDescription("Used to clear port security entries by port. Setting this value to 'start' will execute the clear action, Once cleared, the value returns to 'other'.")
swL2PortSecurityDelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 2))
swL2PortSecurityDelVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setDescription('Indicates VLAN name.')
swL2PortSecurityDelPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setDescription('Indicates the port.')
swL2PortSecurityDelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 2, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setDescription('Specifies a MAC address.')
swL2PortSecurityDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setDescription('.')
swL2PortSecurityTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setDescription("When enabled(2),whenever there's a new MAC address that violates the pre-defined port security configuration, traps will be sent out and the relevant information will be logged into the system.")
swL2DhcpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayState.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayState.setDescription('This object indicates if the DHCP relay function is enabled or disabled.')
swL2DhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayHopCount.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayHopCount.setDescription('This object indicates the maximum number of router hops that DHCP packets can cross.')
swL2DhcpRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayTimeThreshold.setDescription('This object indicates the minimum time in seconds within which the switch must relay the DHCP request. If this time is exceeded, the switch will drop the DHCP packet.')
swL2DhcpRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82State.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayOption82State.setDescription('This object indicates if the DHCP relay agent information option 82 function is enabled or disabled.')
swL2DhcpRelayOption82Check = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Check.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayOption82Check.setDescription('This object indicates if the checking mechanism of DHCP relay agent information option 82 is enabled or disabled.')
swL2DhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Policy.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayOption82Policy.setDescription('This object indicates the reforwarding policy of DHCP relay agent information option 82. replace(1) - replace the exiting option 82 field in messages. drop(2) - discard messages with existing option 82 field. keep(3) - retain the existing option 82 field messages.')
swL2DhcpRelayCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 7), )
if mibBuilder.loadTexts: swL2DhcpRelayCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlTable.setDescription('This table specifies the IP address as a destination to forward (relay) DHCP packets to.')
swL2DhcpRelayCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 7, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2DhcpRelayCtrlInterfaceName"), (0, "DES3528-L2MGMT-MIB", "swL2DhcpRelayCtrlServer"))
if mibBuilder.loadTexts: swL2DhcpRelayCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlEntry.setDescription('A list of information that specifies the IP address as a destination to forward (relay) DHCP packets to.')
swL2DhcpRelayCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlInterfaceName.setDescription('The name of the IP interface.')
swL2DhcpRelayCtrlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlServer.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlServer.setDescription('The DHCP server IP address.')
swL2DhcpRelayCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry resides in the table.')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setDescription('Maximum number of entries in the trunk configuration table (swL2TrunkCtrlTable).')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setDescription('Current active number of entries in the trunk configuration table.')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setDescription('This table specifies which ports group a set of ports(up to 8) into a single logical link.')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 3, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setDescription('A list of information that specifies which ports group a set of ports(up to 8) into a single logical link.')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkIndex.setDescription('The index number of the logical port trunk group. The trunk group number depends on the existence of unit and module.')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMasterPort.setDescription('The object indicates the master port number of the port trunk entry. When using Port Trunk, you cannot configure the other ports of the group except the master port. Their configuration must be same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMember.setDescription('Indicates the number of ports included in this Trunk group. The trunk port number depends on the existence of the module. The maximum number of ports is 8 for one trunk group.')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setDescription('The object indicates the flooding port number of the port trunk entry. The first port of the Trunk group is implicitly configured to be the flooding port.')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkType.setDescription('This object indicates the type of trunk group. static : is static trunk group lacp : is LACP trunk group . ')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkState.setDescription('This object indicates the status of this entry.')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setDescription('This object configures to part of the packet examined by the switch when selecting the egress port for transmitting load-sharing data.')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setDescription('This table specifies which ports group a set of ports(up to 8) into a single logical link.')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 5, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setDescription('A list of information specifies which ports group a set of ports(up to 8) into a single logical link.')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setDescription('The index of logical port LACP. ')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setDescription('The state of logical port LACP.')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANTable.setDescription('This table is used to manage the VLAN trunking feature of the device.')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 6, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setDescription('This object is used to configure the VLAN trunking settings for each port.')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANPort.setDescription('This object indicates the port being configured.')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANState.setDescription('The state of the logical port.')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setDescription('This object indicates which switch port will sniff another port. A trunk port member cannot be configured as a target snooping port. The port number is the sequential (logical) number which is also applied to the bridge MIB, etc.')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setDescription('This represents the port where ingress packets will be sniffed.')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setDescription('This represents the port where egress packets will be sniffed.')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortState.setDescription('This object indicates the port mirroring state. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - After writing this value to the object, the corresponding entry will be removed from the table. enabled(3) - This entry resides in the table.')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setDescription('Maximum number of VLANs in the layer 2 IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPMaxIpGroupNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setDescription('Maximum number of multicast IP groups per VLAN in the layer 2 IGMP information table(swL2IGMPQueryInfoTable).')
swL2IGMPSnoopingMulticastVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingMulticastVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPSnoopingMulticastVlanState.setDescription('It indicates the global state of igmp_snoop multicast_vlan.')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setDescription("The table controls the VLAN's IGMP function. Its scale depends on the current VLAN state (swL2VlanInfoStatus). If the VLAN is disabled, there is only one entry in the table, with an index of 1. If the VLAN is in Port-Base or 802.1q mode, the maximum number of entries can be 12, with an index range from 1 to 12.")
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setDescription('The entry in IGMP control table (swL2IGMPCtrlTable). The entry is effective only when IGMP capture switch (swL2DevCtrlIGMPSnooping) is enabled.')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setDescription("This object indicates the IGMP control entry's VLAN ID. If the VLAN is disabled, the VID is always 0 and cannot be changed by management users. If the VLAN is in Port-Base mode, the VID is arranged from 1 to 12, in a fixed form. If the VLAN is in 802.1q mode, the VID setting can be changed from 1 to 4094 by the management user, and the VID in each entry must be unique within the IGMP Control Table.")
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setDescription('The frequency at which IGMP Host-Query packets are transmitted on this switch.')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setDescription('The maximum query response time on this switch.')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses.')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setDescription('The Last Member Query Interval is the Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages.')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setDescription('The timer value for sending IGMP query packets when none were sent by the host on the LAN. The timer works on a per-VLAN basis. Our device will be activated to send the query messages if the timer expires. Please reference RFC2236-1997.')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setDescription('The Router Timeout is how long a host must wait after hearing a Query before it may send any IGMPv2 messages.')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setDescription('When a querier receives a Leave Group message for a group that has group members on the reception interface, it sends Group-Specific Queries every swL2IGMPLeaveTimer to the group being left.')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryState.setDescription('This object decides if the IGMP query is enabled or disabled.')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCurrentState.setDescription('This object indicates the current IGMP query state.')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - IGMP function is disabled for this entry. enable(3) - IGMP function is enabled for this entry.')
swL2IGMPFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setDescription('This object indicates the fast_leave status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - IGMP fast-leave function is disabled for this entry. enable(3) - IGMP fast-leave function is enabled for this entry.')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 5), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setDescription('The table contains the number current IGMP query packets which are captured by this device, as well as the IGMP query packets sent by the device.')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 5, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setDescription('Information about current IGMP query information, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrState of the associated VLAN entry are all enabled.')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoVid.setDescription('This object indicates the VID of associated IGMP info table entry. It follows swL2IGMPCtrlVid in the associated entry of IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function was enabled, on a per-VLAN basis.')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, in per-VLAN basis. In case of IGMP timer expiration, the switch sends IGMP query packets to related VLAN member ports and increment this object by 1.')
swL2IGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 6), )
if mibBuilder.loadTexts: swL2IGMPInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTable.setDescription("The table containing current IGMP information which was captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of the associated VLAN entries are all enabled. Note that the priority of IGMP table entries is lower than the Filtering Table, i.e. if there is a table hash collision between entries in the IGMP Table and Filtering Table inside the switch's H/W address table, then Filtering Table entry overwrites the colliding entry of the IGMP Table. Also see the swL2FilterMgmt description.")
swL2IGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 6, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2IGMPVid"), (0, "DES3528-L2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setDescription('Information about current IGMP information which was captured by this device, provided that the swL2DevCtrlIGMPSnooping and the swL2IGMPCtrlState of associated VLAN entries are all enabled.')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPVid.setDescription('This object indicates the VID of individual IGMP table entries. It shows the VID IGMP report information captured on the network.')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setDescription('This object identifies group IP addresses which were captured from IGMP packets, on a per-VLAN basis.')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMacAddr.setDescription('This object identifies MAC addresses which correspond to the swL2IGMPGroupIpAddr, on per-VLAN basis.')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 6, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPPortMap.setDescription("This object indicates which ports belong to the same multicast group, on a per-VLAN basis. Each multicast group has an octet string which is indicated by a port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'(Note that the setting of the bits corresponding to the port from which a frame is received is irrelevant). The 4 octets represent one unit port according to its logical port. If the unit is less than 32 ports, other ports are not affected and are replaced with zeroes.")
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setDescription('This object indicates how many report packets were receive by our device, that correspond with this entry when the IGMP function is enabled on per-VLAN basis.')
swL2IGMPRouterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 7), )
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setDescription('The information of the router port table.')
swL2IGMPRouterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 7, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2IGMPRouterPortVlanid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setDescription('The entry of swL2IGMPRouterPortTable.')
swL2IGMPRouterPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setDescription('This object indicates the VLAN ID of the router port entry.')
swL2IGMPRouterPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setDescription('This object indicates the VLAN name of the router port entry.')
swL2IGMPRouterPortStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 7, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setDescription('This object indicates the static portlist of the router port entry.')
swL2IGMPRouterPortDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setDescription('This object indicates the dynamic portlist of the router port entry.')
swL2IGMPRouterPortForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 7, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setDescription('This object indicates the forbidden portlist of the router port entry.')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setDescription('The information of the IGMP snooping multicast VLAN table.')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setDescription('The entry of swL2IGMPMulticastVlanTable.')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setDescription('This object indicates the VLAN ID of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setDescription('This object indicates the VLAN name of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setDescription('This object indicate the portlist of the source ports of IGMP snooping multicast VLAN. The source ports will be set as tag ports of the VLAN entry. And the IGMP control messages received from the member ports would be forwarded to the source ports. ')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setDescription('This object indicate the portlist of the member ports of the IGMP snooping multicast VLAN. The source ports will be set as untagged ports of the VLAN entry. And the IGMP control messages received from the member ports would be forwarded to the source ports. ')
swL2IGMPMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setDescription('This object indicate the portlist of the tag member ports of IGMP snooping multicast VLAN.')
swL2IGMPMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setDescription(' This object can be enabled or disabled IGMP_snooping multicast VLAN.')
swL2IGMPMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIp.setDescription('The replace source IP of this multicast vlan.')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setDescription('This object indicates the status of this entry.')
swL2IGMPMulticastVlanRemoveAllMcastAddrListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemoveAllMcastAddrListAction.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemoveAllMcastAddrListAction.setDescription('This object indicates if remove all the multicast address list from the IGMP multicast VLAN or not.')
swL2IGMPMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 9), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setDescription('The table containing the IGMP snooping multicast VLAN group information')
swL2IGMPMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 9, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupVid"), (0, "DES3528-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupFromIp"), (0, "DES3528-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setDescription('Information about current IGMP snooping multicast VLAN group.')
swL2IGMPMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setDescription('This object indicates the Vid of IGMP snooping multicast VLAN group.')
swL2IGMPMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupFromIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupFromIp.setDescription('Specifies the multicast address list for this VLAN.')
swL2IGMPMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupToIp.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupToIp.setDescription('Specifies the multicast address list for this VLAN.')
swL2IGMPMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 11, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupStatus.setDescription('This object indicates the status of this entry.')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegTable.setDescription('This table specifies that the port can just forward traffic to the specific port list.')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 14, 1, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegEntry.setDescription('A list of information which specifies the port with its traffic forwarding list.')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegPort.setDescription('The port number of the logical port.')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setDescription('The port list to which the specific port can forward traffic.')
swL2MulticastFilterModeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 17, 1), )
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setDescription(' A table that contains information about VLAN multicast filter mode.')
swL2MulticastFilterModeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 17, 1, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2MulticastFilterVid"))
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setDescription('A list of multicast filter mode information for each VLAN. ')
swL2MulticastFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterVid.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterVid.setDescription('Indicates VID for each VLAN.')
swL2MulticastFilterVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setDescription('Specifies multicast filter mode for each VLAN.')
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setDescription('This object indicates the loopback detection status for the system.')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectInterval.setDescription('This object indicates the interval value, the range is from 1 to 32767 seconds.')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setDescription('This object indicates the recover time, the range is from 60 to 1000000. The value of 0 disables the recover function.')
swL2LoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectMode.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectMode.setDescription('This object indicates the loopback detection mode for the system.')
swL2LoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop_detected", 2), ("loop_cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setDescription('This object indicates the loopback detection trap mode for the system.')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setDescription('The table specifies the loopback detection function specified by port.')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 2, 1, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setDescription('The table specifies the loopback detection function specified by port.')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number specified in the module")
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortState.setDescription('This object indicates the loopback detection function state on the port.')
swL2LoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setDescription('This object indicates the VLAN list that has detected a loopback.')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setDescription('This object indicates the port status.')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1))
swL2NotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 0))
swL2macNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 1, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2macNotificationSeverity.setStatus('current')
if mibBuilder.loadTexts: swL2macNotificationSeverity.setDescription('Indicate the level of macNotification detection.')
swL2PortSecurityViolationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 1, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setDescription('Indicate the level of PortSecurityViolation detection.')
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 0, 1)).setObjects(("DES3528-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
if mibBuilder.loadTexts: swL2macNotification.setDescription(' This trap indicates the MAC addresses variation in address table . ')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 0, 2)).setObjects(("DES3528-L2MGMT-MIB", "swL2PortSecurityPortIndex"), ("DES3528-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setDescription('When the port_security trap is enabled, new MAC addresses that violate the pre-defined port security configuration will trigger trap messages to be sent out.')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 0, 3)).setObjects(("DES3528-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopOccurred.setDescription('The trap is sent when Port loop occurred.')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 0, 4)).setObjects(("DES3528-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopRestart.setDescription('The trap is sent when Port loop restart after interval time.')
swL2VlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 0, 5)).setObjects(("DES3528-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DES3528-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setDescription('The trap is sent when Port with VID loop occurred.')
swL2VlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 0, 6)).setObjects(("DES3528-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DES3528-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopRestart.setDescription('The trap is sent when Port with VID loop restart after interval time.')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
if mibBuilder.loadTexts: swL2macNotifyInfo.setDescription('This object indicates the last time reboot information.')
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setDescription('This object indicates the MAC address that violates the port security configuration.')
swL2VlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 100, 1, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setDescription('This object indicates the VID that has detected a loopback.')
swL2DhcpLocalRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setDescription('This object indicates the status of the DHCP local relay function of the switch.')
swL2DhcpLocalRelayVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 24, 2), )
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setDescription('This table is used to manage the DHCP local relay status for each VLAN.')
swL2DhcpLocalRelayVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 24, 2, 1), ).setIndexNames((0, "DES3528-L2MGMT-MIB", "swL2DhcpLocalRelayVLANID"))
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setDescription('This object lists the current VLANs in the switch and their corresponding DHCP local relay status.')
swL2DhcpLocalRelayVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setDescription('This object shows the VIDs of the current VLANS in the switch.')
swL2DhcpLocalRelayVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setDescription('This object indicates the status of the DHCP relay function of the VLAN.')
swL2PPPoECirIDinsertState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 105, 1, 2, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PPPoECirIDinsertState.setStatus('current')
if mibBuilder.loadTexts: swL2PPPoECirIDinsertState.setDescription('This object indicates the status of the PPPoE circuit ID insertion state of the switch.')
mibBuilder.exportSymbols("DES3528-L2MGMT-MIB", swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2IGMPMulticastVlanGroupFromIp=swL2IGMPMulticastVlanGroupFromIp, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2MulticastFilterStatus=swL2MulticastFilterStatus, swL2IGMPRouterPortTable=swL2IGMPRouterPortTable, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2MulticastFilterProfileName=swL2MulticastFilterProfileName, swL2NniGvrpBpduAddress=swL2NniGvrpBpduAddress, swL2PortErrTable=swL2PortErrTable, swL2IGMPInfoEntry=swL2IGMPInfoEntry, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2VlanPortInfoPortIndex=swL2VlanPortInfoPortIndex, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swL2TrunkMgmt=swL2TrunkMgmt, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2MulticastFilterProfileAddressEntry=swL2MulticastFilterProfileAddressEntry, swL2TrafficSegPort=swL2TrafficSegPort, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2PortCableDiagnosisPortIndex=swL2PortCableDiagnosisPortIndex, swL2MulticastFilterProfileAddressTable=swL2MulticastFilterProfileAddressTable, swL2IGMPMulticastVlanTagMemberPort=swL2IGMPMulticastVlanTagMemberPort, swL2MulticastFilterModeVlanTable=swL2MulticastFilterModeVlanTable, swL2MulticastFilterProfileEntry=swL2MulticastFilterProfileEntry, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2PortInfoType=swL2PortInfoType, swL2PortCableDiagnosisPairLengthInaccuracy=swL2PortCableDiagnosisPairLengthInaccuracy, swL2VlanPortInfoEntry=swL2VlanPortInfoEntry, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swL2Notify=swL2Notify, swL2DhcpLocalRelayVLANID=swL2DhcpLocalRelayVLANID, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2IGMPQueryState=swL2IGMPQueryState, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swL2IGMPMulticastVlanGroupVid=swL2IGMPMulticastVlanGroupVid, swL2DevCtrlCFMPortEntry=swL2DevCtrlCFMPortEntry, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swL2LoopDetectPortLoopVLAN=swL2LoopDetectPortLoopVLAN, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2PortSecurityViolationSeverity=swL2PortSecurityViolationSeverity, swL2PortErrEntry=swL2PortErrEntry, swL2MulticastFilterMode=swL2MulticastFilterMode, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2PortSecurityDelMacAddress=swL2PortSecurityDelMacAddress, swL2LoopDetectMode=swL2LoopDetectMode, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2VlanStaticTable=swL2VlanStaticTable, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swL2VlanIndex=swL2VlanIndex, swL2PortCounterCtrlTable=swL2PortCounterCtrlTable, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swL2IGMPRouterPortStaticPortList=swL2IGMPRouterPortStaticPortList, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2DhcpRelayTimeThreshold=swL2DhcpRelayTimeThreshold, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2DhcpRelayCtrlState=swL2DhcpRelayCtrlState, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2DhcpRelayOption82State=swL2DhcpRelayOption82State, swL2DhcpRelayCtrlServer=swL2DhcpRelayCtrlServer, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2QOSSchedulingMaxPkts=swL2QOSSchedulingMaxPkts, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2DhcpRelayCtrlEntry=swL2DhcpRelayCtrlEntry, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2LimitedMulticastFilterPortProfileStatus=swL2LimitedMulticastFilterPortProfileStatus, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2VlanLoopDetectVID=swL2VlanLoopDetectVID, swL2PortSecurityDelActivity=swL2PortSecurityDelActivity, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2PortErrPortConnStatus=swL2PortErrPortConnStatus, swL2IGMPVid=swL2IGMPVid, swL2DhcpRelayHopCount=swL2DhcpRelayHopCount, swL2PortCtrlMediumType=swL2PortCtrlMediumType, swL2IGMPRouterPortVlanName=swL2IGMPRouterPortVlanName, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swL2DhcpRelayState=swL2DhcpRelayState, swL2QOSSchedulingMechanismCtrl=swL2QOSSchedulingMechanismCtrl, swL2IGMPFastLeaveState=swL2IGMPFastLeaveState, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2MulticastFilterVlanMode=swL2MulticastFilterVlanMode, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2DevCtrlCFMState=swL2DevCtrlCFMState, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2PortMgmt=swL2PortMgmt, swL2PortCableDiagnosisTable=swL2PortCableDiagnosisTable, swL2PortErrPortState=swL2PortErrPortState, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2PortInfoUnitID=swL2PortInfoUnitID, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2PortLoopOccurred=swL2PortLoopOccurred, swL2DhcpRelayCtrlInterfaceName=swL2DhcpRelayCtrlInterfaceName, swL2MulticastFilterProfileIndex=swL2MulticastFilterProfileIndex, swL2MulticastFilterAddressState=swL2MulticastFilterAddressState, swL2PortInfoTable=swL2PortInfoTable, swL2TrunkIndex=swL2TrunkIndex, swL2IGMPMulticastVlanState=swL2IGMPMulticastVlanState, swL2DevCtrlIpAutoconfig=swL2DevCtrlIpAutoconfig, swL2TrafficSegTable=swL2TrafficSegTable, swL2IGMPMgmt=swL2IGMPMgmt, swL2PortInfoEntry=swL2PortInfoEntry, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swL2MulticastFilterProfileTable=swL2MulticastFilterProfileTable, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2NotifyMgmt=swL2NotifyMgmt, swL2VlanPortInfoTable=swL2VlanPortInfoTable, swL2macNotificationSeverity=swL2macNotificationSeverity, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2MulticastFilterModeVlanEntry=swL2MulticastFilterModeVlanEntry, swL2DevCtrlIGMPSnoopingMcstRTOnly=swL2DevCtrlIGMPSnoopingMcstRTOnly, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2VlanPortInfoPortRole=swL2VlanPortInfoPortRole, swL2QOSHolPreventionCtrl=swL2QOSHolPreventionCtrl, swL2DevInfo=swL2DevInfo, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2LimitedMulticastFilterPortProfileID=swL2LimitedMulticastFilterPortProfileID, swL2DevCtrlCFMPortIndex=swL2DevCtrlCFMPortIndex, swL2VLANAdvertisement=swL2VLANAdvertisement, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2PortCableDiagnosisPairLength=swL2PortCableDiagnosisPairLength, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2PortCtrlTable=swL2PortCtrlTable, swL2IGMPSnoopingMulticastVlanState=swL2IGMPSnoopingMulticastVlanState, swL2QOSMgmt=swL2QOSMgmt, swL2DhcpRelayCtrlTable=swL2DhcpRelayCtrlTable, swL2MgmtMIB=swL2MgmtMIB, swL2MulticastFilterFromIp=swL2MulticastFilterFromIp, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swL2DevAlarm=swL2DevAlarm, swL2PortSecurityEntryClearCtrl=swL2PortSecurityEntryClearCtrl, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2PortCounterClearCtrl=swL2PortCounterClearCtrl, swL2PortSecurityDelVlanName=swL2PortSecurityDelVlanName, swL2VlanLoopOccurred=swL2VlanLoopOccurred, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2NotifFirmware=swL2NotifFirmware, swL2LimitedMulticastFilterPortEntry=swL2LimitedMulticastFilterPortEntry, swL2IGMPRouterPortVlanid=swL2IGMPRouterPortVlanid, swDevInfoFrontPanelLedStatus=swDevInfoFrontPanelLedStatus, swL2PortCounterCtrlPortIndex=swL2PortCounterCtrlPortIndex, swL2PortCableDiagnosisEntry=swL2PortCableDiagnosisEntry, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swL2PortCableDiagnosisPairIndex=swL2PortCableDiagnosisPairIndex, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swL2LoopDetectTrapMode=swL2LoopDetectTrapMode, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2DhcpLocalRelayVLANTable=swL2DhcpLocalRelayVLANTable, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2VlanStaticEntry=swL2VlanStaticEntry, swL2IGMPInfoTable=swL2IGMPInfoTable, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, VlanId=VlanId, swL2VlanLoopRestart=swL2VlanLoopRestart, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2PortSecurityDelCtrl=swL2PortSecurityDelCtrl, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swl2NotificationBidings=swl2NotificationBidings, swL2NotifyPrefix=swL2NotifyPrefix, swL2LimitedMulticastFilterPortTable=swL2LimitedMulticastFilterPortTable, swL2IGMPPortMap=swL2IGMPPortMap, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2DhcpRelayOption82Policy=swL2DhcpRelayOption82Policy, swL2PortErrPortIndex=swL2PortErrPortIndex, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2PPPoECirIDinsertState=swL2PPPoECirIDinsertState, swL2IGMPMulticastVlanGroupStatus=swL2IGMPMulticastVlanGroupStatus, swL2DevCtrl=swL2DevCtrl, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2DevCtrlCFMPortState=swL2DevCtrlCFMPortState, swL2LimitedMulticastFilterPortAccess=swL2LimitedMulticastFilterPortAccess, swL2PortSecurityTrapLogState=swL2PortSecurityTrapLogState, swL2IGMPRouterPortForbiddenPortList=swL2IGMPRouterPortForbiddenPortList, swL2VlanPortInfoVid=swL2VlanPortInfoVid, swL2IGMPRouterPortEntry=swL2IGMPRouterPortEntry, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2IGMPMulticastVlanGroupEntry=swL2IGMPMulticastVlanGroupEntry, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2TrunkState=swL2TrunkState, swL2VLANMgmt=swL2VLANMgmt, swL2PPPoEMgmt=swL2PPPoEMgmt, swL2QOSSchedulingMechanism=swL2QOSSchedulingMechanism, swL2LimitedMulticastFilterPortIndex=swL2LimitedMulticastFilterPortIndex, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, MacAddress=MacAddress, swL2IGMPMulticastVlanGroupTable=swL2IGMPMulticastVlanGroupTable, swL2IGMPMacAddr=swL2IGMPMacAddr, swL2MulticastFilterToIp=swL2MulticastFilterToIp, swL2PortCableDiagnosisCableStatus=swL2PortCableDiagnosisCableStatus, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2DhcpLocalRelayVLANState=swL2DhcpLocalRelayVLANState, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2IGMPMaxIpGroupNumPerVlan=swL2IGMPMaxIpGroupNumPerVlan, swL2QOSSchedulingMaxLatency=swL2QOSSchedulingMaxLatency, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2TrunkMember=swL2TrunkMember, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swL2IGMPRouterPortDynamicPortList=swL2IGMPRouterPortDynamicPortList, swL2MACNotifyState=swL2MACNotifyState, swL2DevMgmt=swL2DevMgmt, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2MulticastFilterPortMaxGroupPortIndex=swL2MulticastFilterPortMaxGroupPortIndex, swL2IGMPMulticastVlanReplaceSourceIp=swL2IGMPMulticastVlanReplaceSourceIp, swL2IGMPRobustness=swL2IGMPRobustness, swL2PortCtrlMDIXState=swL2PortCtrlMDIXState, swL2MulticastFilterVid=swL2MulticastFilterVid, swL2macNotification=swL2macNotification, swL2MulticastFilterProfileIdIndex=swL2MulticastFilterProfileIdIndex, swL2DevCtrlCFMPortTable=swL2DevCtrlCFMPortTable, swL2PortLoopRestart=swL2PortLoopRestart, swL2macNotifyInfo=swL2macNotifyInfo, swL2DhcpLocalRelayVLANEntry=swL2DhcpLocalRelayVLANEntry, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress)
mibBuilder.exportSymbols("DES3528-L2MGMT-MIB", swL2MirrorPortState=swL2MirrorPortState, swL2IGMPMulticastVlanRemoveAllMcastAddrListAction=swL2IGMPMulticastVlanRemoveAllMcastAddrListAction, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2PortCableDiagnosisPairStatus=swL2PortCableDiagnosisPairStatus, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2TrunkVLANState=swL2TrunkVLANState, swL2IGMPMulticastVlanGroupToIp=swL2IGMPMulticastVlanGroupToIp, swL2LimitedMulticastMgmt=swL2LimitedMulticastMgmt, swL2MulticastFilterPortMaxGroup=swL2MulticastFilterPortMaxGroup, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, PortList=PortList, swL2PortCtrlLearningState=swL2PortCtrlLearningState, swL2PortSecurityMode=swL2PortSecurityMode, swL2PortSecurityDelPort=swL2PortSecurityDelPort, swL2PortCounterCtrlEntry=swL2PortCounterCtrlEntry, swL2DhcpLocalRelayMgmt=swL2DhcpLocalRelayMgmt, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swL2DhcpRelayMgmt=swL2DhcpRelayMgmt, swL2TrunkType=swL2TrunkType, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2PortErrPortReason=swL2PortErrPortReason, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2MulticastFilterPortMaxGroupEntry=swL2MulticastFilterPortMaxGroupEntry, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2MirrorMgmt=swL2MirrorMgmt, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2DhcpRelayOption82Check=swL2DhcpRelayOption82Check, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2DevCtrlSnmpTrapState=swL2DevCtrlSnmpTrapState, swL2DevCtrlCFM=swL2DevCtrlCFM, swL2DhcpLocalRelayState=swL2DhcpLocalRelayState, swL2MulticastFilterPortMaxGroupTable=swL2MulticastFilterPortMaxGroupTable)
