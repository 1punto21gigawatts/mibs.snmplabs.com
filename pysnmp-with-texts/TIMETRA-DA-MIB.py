#
# PySNMP MIB module TIMETRA-DA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-DA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
InetAddress, InetAddressType, InetPortNumber, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber", "InetAddressPrefixLength")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, MibIdentifier, iso, Counter32, NotificationType, TimeTicks, Unsigned32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "MibIdentifier", "iso", "Counter32", "NotificationType", "TimeTicks", "Unsigned32", "ObjectIdentity", "Counter64")
TextualConvention, TimeStamp, MacAddress, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "MacAddress", "TruthValue", "DisplayString", "RowStatus")
tmnxSRConfs, timetraSRMIBModules, tmnxSRObjs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRNotifyPrefix")
TmnxAdminState, TmnxOperState, TNamedItemOrEmpty, TmnxEnabledDisabled, TItemDescription, TNamedItem, TLNamedItemOrEmpty = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxAdminState", "TmnxOperState", "TNamedItemOrEmpty", "TmnxEnabledDisabled", "TItemDescription", "TNamedItem", "TLNamedItemOrEmpty")
timetraDAMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 82))
timetraDAMIBModule.setRevisions(('1911-05-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraDAMIBModule.setRevisionsDescriptions(('Rev 0.1 23 May 2011 00:00 Initial version of the TIMETRA-DA-MIB.',))
if mibBuilder.loadTexts: timetraDAMIBModule.setLastUpdated('201106010000Z')
if mibBuilder.loadTexts: timetraDAMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraDAMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraDAMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the Delivery Appliance features for Content Delivery Networks (CDN). Copyright 2008-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxDA = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82))
tmnxDAObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1))
tmnxDAConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82))
tmnxDACompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82, 1))
tmnxDAGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82, 2))
tmnxDANotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 82))
tmnxDANotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 82, 0))
tmnxDASvrGrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASvrGrpTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpTableLastChanged.setDescription('The value of tmnxDASvrGrpTableLastChanged indicates the sysUpTime at the time of the last modification to tmnxDASvrGrpTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxDASvrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2), )
if mibBuilder.loadTexts: tmnxDASvrGrpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpTable.setDescription('There can be multiple Delivery Appliance (DA) proxy server groups in a system. One or more caching blades (DA servers) form a server group. A caching blade can appear in only one server group. The tmnxDASvrGrpTable has an entry for each such server group in the system.')
tmnxDASvrGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDASvrGrpIndex"))
if mibBuilder.loadTexts: tmnxDASvrGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpEntry.setDescription('Each row entry represents a DA server group in the system. Entries can be created and deleted by the user.')
tmnxDASvrGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4), )))
if mibBuilder.loadTexts: tmnxDASvrGrpIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpIndex.setDescription('The value of tmnxDASvrGrpIndex specifies the server group index for this server group.')
tmnxDASvrGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDASvrGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpRowStatus.setDescription('The value of tmnxDASvrGrpRowStatus specifies the row status of this row in the DA Server Group Table. It is used to create and delete row entries in this table.')
tmnxDASvrGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASvrGrpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpLastChanged.setDescription('The value of tmnxDASvrGrpLastChanged indicates the timestamp of last change to this row in tmnxDASvrGrpTable.')
tmnxDASvrGrpCardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 4), Bits().clone(namedValues=NamedValues(("card1", 0), ("card2", 1), ("card3", 2), ("card4", 3), ("card5", 4), ("card6", 5), ("card7", 6), ("card8", 7), ("card9", 8), ("card10", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDASvrGrpCardSlotNumber.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpCardSlotNumber.setDescription('The bit value of tmnxDASvrGrpCardSlotNumber specifies the card number being used by the DA server.')
tmnxDASvrGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDASvrGrpAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpAdminState.setDescription('The value of tmnxDASvrGrpAdminState specifies the desired administrative state of the DA server-group.')
tmnxDASvrGrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 2, 1, 6), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASvrGrpOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxDASvrGrpOperState.setDescription('The value of tmnxDASvrGrpOperState indicates the current operational state of the DA server-group.')
tmnxDAGrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpTableLastChanged.setDescription('The value of tmnxDAGrpTableLastChanged indicates the sysUpTime at the time of the last modification to tmnxDAGrpTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxDAGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4), )
if mibBuilder.loadTexts: tmnxDAGrpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpTable.setDescription('The tmnxDAGrpTable has an entry for each virtual Delivery Appliance (DA) proxy server in a server group. There can be multiple virtual DA proxy servers within a server group.')
tmnxDAGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"))
if mibBuilder.loadTexts: tmnxDAGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpEntry.setDescription('Each row entry represents a virtual DA proxy server. Entries can be created and deleted by the user.')
tmnxDAGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxDAGrpName.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpName.setDescription('The value of tmnxDAGrpName specifies the group name for this virtual DA proxy server in the specified server group.')
tmnxDAGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpRowStatus.setDescription("The value of tmnxDAGrpRowStatus specifies the row status of this row in the DA group table. It is used to create and delete row entries in this table. The value of the object tmnxDAGrpServerGroupIndex specifies the index of the server group on which this DA Group must be instantiated. The value of tmnxDAGrpServerGroupIndex must be specified when the row is created and cannot be changed while tmnxDAGrpRowStatus is 'active'.")
tmnxDAGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpLastChanged.setDescription('The value of tmnxDAGrpLastChanged indicates the timestamp of last change to this row in tmnxDAGrpTable.')
tmnxDAGrpServerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpServerGroupIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpServerGroupIndex.setDescription("The value of tmnxDAGrpServerGroupIndex specifies the index of the server group on which this DA Group must be instantiated. The value of this object must be specified when the row is created and cannot be changed while tmnxDAGrpRowStatus is 'active'. An 'inconsistentValue' error is returned if an attempt is made to set this object individually.")
tmnxDAGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpAdminState.setDescription('The value of tmnxDAGrpAdminState specifies the desired administrative state of the DA group.')
tmnxDAGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDescription.setDescription('The value of tmnxDAGrpDescription specifies the user provided description string for this DA group entry.')
tmnxDAGrpDnsClientIsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDnsClientIsmLinkName.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDnsClientIsmLinkName.setDescription('The value of tmnxDAGrpDnsClientIsmLinkName specifies the Integrated Services Module (ISM) link name used in DNS lookup request packets. The ISM link is an IP interface in the DA group on the ISM. The ISM link must already be configured in the DA group before it is assigned to this object.')
tmnxDAGrpDCAuthCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("useCache", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCache.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCache.setDescription("The value of tmnxDAGrpDCAuthCache specifies what happens when the DA loses connectivity to all DCs in the network. A value of 'none' specifies that the cache is invalidated and all incoming delivery requests will be rejected. A value of 'useCache' specifies that the DA will continue to use its cached authorizations until they expire.")
tmnxDAGrpDCAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 9), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAdminState.setDescription('The value of tmnxDAGrpDCAdminState specifies the desired administrative state of the DA group for this DC.')
tmnxDAGrpDCIsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 10), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCIsmLinkName.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCIsmLinkName.setDescription('The value of tmnxDAGrpDCIsmLinkName specifies the Integrated Services Module (ISM) link name used in the DA group for this DC. The ISM link is an IP interface in the DA group on the ISM. The ISM link must already be configured in the DA group before it is assigned to this object.')
tmnxDAGrpDCBootStrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 11), InetPortNumber().clone(22345)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCBootStrapPort.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCBootStrapPort.setDescription('The value of tmnxDAGrpDCBootStrapPort specifies the DC port number of the bootstrap-servers.')
tmnxDAGrpDCConnRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 300000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCConnRetryTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCConnRetryTimer.setDescription('The value of tmnxDAGrpDCConnRetryTimer specifies in milli-seconds the amount of time after which the delivery-controller will retry periodically to establish a connection with its client if not initially successful.')
tmnxDAGrpDCIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDCIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCIdleTimeout.setDescription('The value of tmnxDAGrpDCIdleTimeout specifies the max time for any outstanding requests to a delivery-controller to be replied. If a reply is not received within this time after the request was sent, the DA closes the TCP connection.')
tmnxDAGrpBytesFromCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCache.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCache.setDescription('The value of tmnxDAGrpBytesFromCache indicates the number of bytes that are served from the cache.')
tmnxDAGrpBytesFromCacheL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCacheL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCacheL32.setDescription('The value of tmnxDAGrpBytesFromCacheL32 indicates the lower 32 bits of the value of tmnxDAGrpBytesFromCache.')
tmnxDAGrpBytesFromCacheH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCacheH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpBytesFromCacheH32.setDescription('The value of tmnxDAGrpBytesFromCacheH32 indicates the higher 32 bits of the value of tmnxDAGrpBytesFromCache.')
tmnxDAGrpBytesNotFromCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCache.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCache.setDescription('The value of tmnxDAGrpBytesNotFromCache indicates the number of bytes that are fetched from the server and not served from the cache.')
tmnxDAGrpBytesNotFromCacheL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCacheL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCacheL32.setDescription('The value of tmnxDAGrpBytesNotFromCacheL32 indicates the lower 32 bits of the value of tmnxDAGrpBytesNotFromCache.')
tmnxDAGrpBytesNotFromCacheH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCacheH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpBytesNotFromCacheH32.setDescription('The value of tmnxDAGrpBytesNotFromCacheH32 indicates the higher 32 bits of the value of tmnxDAGrpBytesNotFromCache.')
tmnxDAGrpObjectsFromCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCache.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCache.setDescription('The value of tmnxDAGrpObjectsFromCache indicates the number of objects that are served from the cache.')
tmnxDAGrpObjectsFromCacheL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCacheL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCacheL32.setDescription('The value of tmnxDAGrpObjectsFromCacheL32 indicates the lower 32 bits of the value of tmnxDAGrpObjectsFromCache.')
tmnxDAGrpObjectsFromCacheH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCacheH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectsFromCacheH32.setDescription('The value of tmnxDAGrpObjectsFromCacheH32 indicates the higher 32 bits of the value of tmnxDAGrpObjectsFromCache.')
tmnxDAGrpObjectsNotFromCache = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCache.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCache.setDescription('The value of tmnxDAGrpObjectsNotFromCache indicates the number of objects that are fetched from the server and not served from the cache.')
tmnxDAGrpObjectsNotFromCacheL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCacheL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCacheL32.setDescription('The value of tmnxDAGrpObjectsNotFromCacheL32 indicates the lower 32 bits of the value of tmnxDAGrpObjectsNotFromCache.')
tmnxDAGrpObjectsNotFromCacheH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCacheH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectsNotFromCacheH32.setDescription('The value of tmnxDAGrpObjectsNotFromCacheH32 indicates the higher 32 bits of the value of tmnxDAGrpObjectsNotFromCache.')
tmnxDAGrpObjectByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 26), Counter64()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCount.setDescription('The value of tmnxDAGrpObjectByteCount indicates object byte count.')
tmnxDAGrpObjectByteCountL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 27), Counter32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCountL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCountL32.setDescription('The value of tmnxDAGrpObjectByteCountL32 indicates the lower 32 bits of the value of tmnxDAGrpObjectByteCount.')
tmnxDAGrpObjectByteCountH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 28), Counter32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCountH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpObjectByteCountH32.setDescription('The value of tmnxDAGrpObjectByteCountH32 indicates the higher 32 bits of the value of tmnxDAGrpObjectByteCount.')
tmnxDAGrpNumberOfOrigins = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOrigins.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOrigins.setDescription('The value of tmnxDAGrpNumberOfOrigins indicates the number of origin servers.')
tmnxDAGrpNumberOfOriginsL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOriginsL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOriginsL32.setDescription('The value of tmnxDAGrpNumberOfOriginsL32 indicates the lower 32 bits of the value of tmnxDAGrpNumberOfOrigins.')
tmnxDAGrpNumberOfOriginsH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOriginsH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpNumberOfOriginsH32.setDescription('The value of tmnxDAGrpNumberOfOriginsH32 indicates the higher 32 bits of the value of tmnxDAGrpNumberOfOrigins.')
tmnxDAGrpDCAuthCacheHit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHit.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHit.setDescription('The value of tmnxDAGrpDCAuthCacheHit indicates the number of auth cache hits.')
tmnxDAGrpDCAuthCacheHitL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHitL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHitL32.setDescription('The value of tmnxDAGrpDCAuthCacheHitL32 indicates the lower 32 bits of the value of tmnxDAGrpDCAuthCacheHit.')
tmnxDAGrpDCAuthCacheHitH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHitH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheHitH32.setDescription('The value of tmnxDAGrpDCAuthCacheHitH32 indicates the higher 32 bits of the value of tmnxDAGrpDCAuthCacheHit.')
tmnxDAGrpDCAuthCacheMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMiss.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMiss.setDescription('The value of tmnxDAGrpDCAuthCacheMiss indicates the number of auth cache misses.')
tmnxDAGrpDCAuthCacheMissL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMissL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMissL32.setDescription('The value of tmnxDAGrpDCAuthCacheMissL32 indicates the lower 32 bits of the value of tmnxDAGrpDCAuthCacheMiss.')
tmnxDAGrpDCAuthCacheMissH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMissH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAuthCacheMissH32.setDescription('The value of tmnxDAGrpDCAuthCacheMissH32 indicates the higher 32 bits of the value of tmnxDAGrpDCAuthCacheMiss.')
tmnxDAGrpDCDeniedAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuth.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuth.setDescription('The value of tmnxDAGrpDCDeniedAuth indicates the number of denied auth sessions.')
tmnxDAGrpDCDeniedAuthL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuthL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuthL32.setDescription('The value of tmnxDAGrpDCDeniedAuthL32 indicates the lower 32 bits of the value of tmnxDAGrpDCDeniedAuth.')
tmnxDAGrpDCDeniedAuthH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuthH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCDeniedAuthH32.setDescription('The value of tmnxDAGrpDCDeniedAuthH32 indicates the higher 32 bits of the value of tmnxDAGrpDCDeniedAuth.')
tmnxDAGrpDCMinRTTPerPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCMinRTTPerPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCMinRTTPerPeer.setDescription('The value of tmnxDAGrpDCMinRTTPerPeer indicates the minimum Round Trip Time per peer.')
tmnxDAGrpDCAvgRTTPerPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCAvgRTTPerPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCAvgRTTPerPeer.setDescription('The value of tmnxDAGrpDCAvgRTTPerPeer indicates the average Round Trip Time per peer.')
tmnxDAGrpDCMaxRTTPerPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDCMaxRTTPerPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDCMaxRTTPerPeer.setDescription('The value of tmnxDAGrpDCMaxRTTPerPeer indicates the maximum Round Trip Time per peer.')
tmnxDAGrpDnsSvrTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrTableLastChanged.setDescription('The value of tmnxDAGrpDnsSvrTableLastChanged indicates the sysUpTime at the time of the last modification to tmnxDAGrpDnsSvrTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxDAGrpDnsSvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6), )
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrTable.setDescription('The tmnxDAGrpDnsSvrTable has an entry for each DNS server IP address within a Delivery Appliance (DA) group network. A user can provision up to four DNS server IP addresses per DA group.')
tmnxDAGrpDnsSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrAddrTyp"), (0, "TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrAddress"))
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrEntry.setDescription('Each row entry represents a DNS server IP address within a DA group network. Entries can be created and deleted by the user. A maximum of four entries can be configured.')
tmnxDAGrpDnsSvrAddrTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrAddrTyp.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrAddrTyp.setDescription('The value of tmnxDAGrpDnsSvrAddrTyp specifies the address-type of the DNS server IP address.')
tmnxDAGrpDnsSvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrAddress.setDescription('The value of tmnxDAGrpDnsSvrAddress specifies the IP address of a DNS server in a DA group.')
tmnxDAGrpDnsSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrRowStatus.setDescription('The value of tmnxDAGrpDnsSvrRowStatus specifies the row status of this row in the tmnxDAGrpDnsSvrTable. It is used to create and delete row entries in this table.')
tmnxDAGrpDnsSvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 6, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpDnsSvrLastChanged.setDescription('The value of tmnxDAGrpDnsSvrLastChanged indicates the timestamp of last change to this row in tmnxDAGrpDnsSvrTable.')
tmnxDADCBtStSvrTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCBtStSvrTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCBtStSvrTableLastChanged.setDescription('The value of tmnxDADCBtStSvrTableLastChanged indicates the sysUpTime at the time of the last modification to tmnxDADCBtStSvrTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxDADCBtStSvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8), )
if mibBuilder.loadTexts: tmnxDADCBtStSvrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCBtStSvrTable.setDescription('The tmnxDADCBtStSvrTable has an entry for each Delivery Controller (DC) bootstrap server. The bootstrap server is used at Delivery Appliance (DA) initialization. The DA downloads the rest of the DC list from one of the bootstrap servers. Multiple bootstrap servers can be specified per DA Group for redundancy purposes.')
tmnxDADCBtStSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDADCBtStSvrIndex"))
if mibBuilder.loadTexts: tmnxDADCBtStSvrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCBtStSvrEntry.setDescription('Each row entry represents a DC bootstrap server. Entries can be created and deleted by the user.')
tmnxDADCBtStSvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4), )))
if mibBuilder.loadTexts: tmnxDADCBtStSvrIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCBtStSvrIndex.setDescription('The value of tmnxDADCBtStSvrIndex specifies a unique value which identifies this bootstrap server entry.')
tmnxDADCBtStSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDADCBtStSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCBtStSvrRowStatus.setDescription('The value of tmnxDADCBtStSvrRowStatus specifies the row status of this row in the tmnxDADCBtStSvrTable. It is used to create and delete row entries in this table. The value of tmnxDADCBtStSvrAddrType and tmnxDADCBtStSvrAddress must also be specified when the row is created.')
tmnxDADCBtStSvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCBtStSvrLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCBtStSvrLastChanged.setDescription('The value of tmnxDADCBtStSvrLastChanged indicates the timestamp of last change to this row in tmnxDADCBtStSvrTable.')
tmnxDADCBtStSvrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDADCBtStSvrAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCBtStSvrAddrType.setDescription('The value of tmnxDADCBtStSvrAddrType specifies the type of address represented by tmnxDADCBtStSvrAddress.')
tmnxDADCBtStSvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 8, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDADCBtStSvrAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCBtStSvrAddress.setDescription('The value of tmnxDADCBtStSvrAddress specifies the IP Address or DNS name of the bootstrap server. If the IP address is an IPv4 address, it must be specified in the a.b.c.d dotted-decimal notation. An IPv6 address must be specified as defined in RFC1924.')
tmnxDAHttpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpTableLastChanged.setDescription('The value of tmnxDAHttpTableLastChanged indicates the sysUpTime at the time of the last modification to tmnxDAHttpTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxDAHttpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10), )
if mibBuilder.loadTexts: tmnxDAHttpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpTable.setDescription('The tmnxDAHttpTable has an entry for each Delivery Appliance (DA) group. Each row entry specifies the HTTP proxy configuration for this DA group.')
tmnxDAHttpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1), )
tmnxDAGrpEntry.registerAugmentions(("TIMETRA-DA-MIB", "tmnxDAHttpEntry"))
tmnxDAHttpEntry.setIndexNames(*tmnxDAGrpEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxDAHttpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpEntry.setDescription('Each row entry represents the HTTP proxy configuration for a DA group. Entries can be created and deleted by the user.')
tmnxDAHttpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpLastChanged.setDescription('The value of tmnxDAHttpLastChanged indicates the timestamp of last change to this row in tmnxDAHttpTable.')
tmnxDAHttpServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 2), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpServerAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerAdminState.setDescription("The value of tmnxDAHttpServerAdminState specifies the desired administrative state of the HTTP server's configuration for this DA group.")
tmnxDAHttpServerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 3), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerOperState.setDescription("The value of tmnxDAHttpServerOperState indicates the current operational state of the HTTP server's configuration for this DA group.")
tmnxDAHttpServerIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpServerIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerIdleTimeout.setDescription('The value of tmnxDAHttpServerIdleTimeout specifies the time interval after which the http-server will timeout and close the HTTP connection if there has been no activity on that connection for that time.')
tmnxDAHttpServerViaString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 5), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpServerViaString.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerViaString.setDescription('The value of tmnxDAHttpServerViaString specifies the HTTP via header.')
tmnxDAHttpServerStrBWInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 6), Counter64()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUse.setDescription('The value of tmnxDAHttpServerStrBWInUse indicates the amount of bandwidth that is used by the HTTP server while streaming content. This object follows the behavior of a gauge64 in that its value can increase or decrease with time.')
tmnxDAHttpServerStrBWInUseL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 7), Counter32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUseL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUseL32.setDescription('The value of tmnxDAHttpServerStrBWInUseL32 indicates the lower 32 bits of the value of tmnxDAHttpServerStrBWInUse.')
tmnxDAHttpServerStrBWInUseH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 8), Counter32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUseH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerStrBWInUseH32.setDescription('The value of tmnxDAHttpServerStrBWInUseH32 indicates the higher 32 bits of the value of tmnxDAHttpServerStrBWInUse.')
tmnxDAHttpServerXferInProg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferInProg.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerXferInProg.setDescription('The value of tmnxDAHttpServerXferInProg indicates the number of HTTP transfers that are in progress by the HTTP server.')
tmnxDAHttpServerXferCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompleted.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompleted.setDescription('The value of tmnxDAHttpServerXferCompleted indicates the number of HTTP transfers that have been completed by the HTTP server.')
tmnxDAHttpServerXferCompletedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompletedL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompletedL32.setDescription('The value of tmnxDAHttpServerXferCompletedL32 indicates the lower 32 bits of the value of tmnxDAHttpServerXferCompleted.')
tmnxDAHttpServerXferCompletedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompletedH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerXferCompletedH32.setDescription('The value of tmnxDAHttpServerXferCompletedH32 indicates the higher 32 bits of the value of tmnxDAHttpServerXferCompleted.')
tmnxDAHttpServerXferTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferTimeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerXferTimeouts.setDescription('The value of tmnxDAHttpServerXferTimeouts indicates the number of HTTP server sessions that timed out due to inactivity.')
tmnxDAHttpServerXferFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerXferFailed.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerXferFailed.setDescription('The value of tmnxDAHttpServerXferFailed indicates the number of HTTP transfers that failed when the HTTP server was transferring HTTP content.')
tmnxDAHttpServerValidRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequests.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequests.setDescription('The value of tmnxDAHttpServerValidRequests indicates the number of valid HTTP requests that were received by the HTTP server.')
tmnxDAHttpServerValidRequestsL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequestsL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequestsL32.setDescription('The value of tmnxDAHttpServerValidRequestsL32 indicates the lower 32 bits of the value of tmnxDAHttpServerValidRequests.')
tmnxDAHttpServerValidRequestsH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequestsH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerValidRequestsH32.setDescription('The value of tmnxDAHttpServerValidRequestsH32 indicates the higher 32 bits of the value of tmnxDAHttpServerValidRequests.')
tmnxDAHttpServerInvalidRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerInvalidRequests.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerInvalidRequests.setDescription('The value of tmnxDAHttpServerInvalidRequests indicates the number of invalid HTTP requests that were received by the HTTP server.')
tmnxDAHttpServerMethodNotSuppted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerMethodNotSuppted.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerMethodNotSuppted.setDescription('The value of tmnxDAHttpServerMethodNotSuppted indicates the number of times the HTTP server rejected the request because the requested method is not supported.')
tmnxDAHttpServerHostNotSuppted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServerHostNotSuppted.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServerHostNotSuppted.setDescription('The value of tmnxDAHttpServerHostNotSuppted indicates the number of times the HTTP server rejected the request because the requested host is not supported.')
tmnxDAHttpServer1XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSent.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSent.setDescription('The value of tmnxDAHttpServer1XXCountSent indicates the count of type 1XX error responses sent by the HTTP Server.')
tmnxDAHttpServer1XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSentL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSentL32.setDescription('The value of tmnxDAHttpServer1XXCountSentL32 indicates the lower 32 bits of the value of tmnxDAHttpServer1XXCountSent.')
tmnxDAHttpServer1XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSentH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer1XXCountSentH32.setDescription('The value of tmnxDAHttpServer1XXCountSentH32 indicates the higher 32 bits of the value of tmnxDAHttpServer1XXCountSent.')
tmnxDAHttpServer2XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSent.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSent.setDescription('The value of tmnxDAHttpServer2XXCountSent indicates the count of type 2XX error responses sent by the HTTP Server.')
tmnxDAHttpServer2XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSentL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSentL32.setDescription('The value of tmnxDAHttpServer2XXCountSentL32 indicates the lower 32 bits of the value of tmnxDAHttpServer2XXCountSent.')
tmnxDAHttpServer2XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSentH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer2XXCountSentH32.setDescription('The value of tmnxDAHttpServer2XXCountSentH32 indicates the higher 32 bits of the value of tmnxDAHttpServer2XXCountSent.')
tmnxDAHttpServer3XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSent.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSent.setDescription('The value of tmnxDAHttpServer3XXCountSent indicates the count of type 3XX error responses sent by the HTTP Server.')
tmnxDAHttpServer3XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSentL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSentL32.setDescription('The value of tmnxDAHttpServer3XXCountSentL32 indicates the lower 32 bits of the value of tmnxDAHttpServer3XXCountSent.')
tmnxDAHttpServer3XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSentH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer3XXCountSentH32.setDescription('The value of tmnxDAHttpServer3XXCountSentH32 indicates the higher 32 bits of the value of tmnxDAHttpServer3XXCountSent.')
tmnxDAHttpServer4XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSent.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSent.setDescription('The value of tmnxDAHttpServer4XXCountSent indicates the count of type 4XX error responses sent by the HTTP Server.')
tmnxDAHttpServer4XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSentL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSentL32.setDescription('The value of tmnxDAHttpServer4XXCountSentL32 indicates the lower 32 bits of the value of tmnxDAHttpServer4XXCountSent.')
tmnxDAHttpServer4XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSentH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer4XXCountSentH32.setDescription('The value of tmnxDAHttpServer4XXCountSentH32 indicates the higher 32 bits of the value of tmnxDAHttpServer4XXCountSent.')
tmnxDAHttpServer5XXCountSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSent.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSent.setDescription('The value of tmnxDAHttpServer5XXCountSent indicates the count of type 5XX error responses sent by the HTTP Server.')
tmnxDAHttpServer5XXCountSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSentL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSentL32.setDescription('The value of tmnxDAHttpServer5XXCountSentL32 indicates the lower 32 bits of the value of tmnxDAHttpServer5XXCountSent.')
tmnxDAHttpServer5XXCountSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSentH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpServer5XXCountSentH32.setDescription('The value of tmnxDAHttpServer5XXCountSentH32 indicates the higher 32 bits of the value of tmnxDAHttpServer5XXCountSent.')
tmnxDAHttpIngestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 36), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpIngestAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestAdminState.setDescription("The value of tmnxDAHttpIngestAdminState specifies the desired administrative state of the HTTP proxy's ingest configuration for this DA group.")
tmnxDAHttpIngestOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 37), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestOperState.setDescription("The value of tmnxDAHttpIngestOperState indicates the current operational state of the HTTP proxy's ingest configuration for this DA group.")
tmnxDAHttpIngestIsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 38), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpIngestIsmLinkName.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestIsmLinkName.setDescription('The value of tmnxDAHttpIngestIsmLinkName specifies the Integrated Services Module (ISM) link name used for HTTP ingest connections to the origin server. The ISM link is an IP interface in the DA group on the ISM. The ISM link must already be configured in the DA group before it is assigned to this object.')
tmnxDAHttpIngestIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAHttpIngestIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestIdleTimeout.setDescription('The value of tmnxDAHttpIngestIdleTimeout specifies the time interval after which the HTTP proxy will timeout and close the HTTP connection if there has been no activity from the origin server on that connection for that time.')
tmnxDAHttpIngestXferInProg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferInProg.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestXferInProg.setDescription('The value of tmnxDAHttpIngestXferInProg indicates the number of HTTP ingest transfers in progress from the origin server to the HTTP proxy.')
tmnxDAHttpIngestXferCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompleted.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompleted.setDescription('The value of tmnxDAHttpIngestXferCompleted indicates the number of HTTP ingest transfers completed from the origin server to the HTTP proxy.')
tmnxDAHttpIngestXferCompletedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompletedL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompletedL32.setDescription('The value of tmnxDAHttpIngestXferCompletedL32 indicates the lower 32 bits of the value of tmnxDAHttpIngestXferCompleted.')
tmnxDAHttpIngestXferCompletedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompletedH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestXferCompletedH32.setDescription('The value of tmnxDAHttpIngestXferCompletedH32 indicates the higher 32 bits of the value of tmnxDAHttpIngestXferCompleted.')
tmnxDAHttpIngestXferTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferTimeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestXferTimeouts.setDescription('The value of tmnxDAHttpIngestXferTimeouts indicates the number of HTTP ingest transfers from the origin server to the HTTP proxy that timed-out.')
tmnxDAHttpIngestXferFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngestXferFailed.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngestXferFailed.setDescription('The value of tmnxDAHttpIngestXferFailed indicates the number of HTTP ingest transfers that failed from the origin server to the HTTP proxy.')
tmnxDAHttpIngest1XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecd.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecd.setDescription('The value of tmnxDAHttpIngest1XXCountRecd indicates the count of type 1XX errors that were received by the HTTP proxy from the origin server.')
tmnxDAHttpIngest1XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecdL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecdL32.setDescription('The value of tmnxDAHttpIngest1XXCountRecdL32 indicates the lower 32 bits of the value of tmnxDAHttpIngest1XXCountRecd.')
tmnxDAHttpIngest1XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecdH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest1XXCountRecdH32.setDescription('The value of tmnxDAHttpIngest1XXCountRecdH32 indicates the higher 32 bits of the value of tmnxDAHttpIngest1XXCountRecd.')
tmnxDAHttpIngest2XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecd.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecd.setDescription('The value of tmnxDAHttpIngest2XXCountRecd indicates the count of type 2XX errors that were received by the HTTP proxy from the origin server.')
tmnxDAHttpIngest2XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecdL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecdL32.setDescription('The value of tmnxDAHttpIngest2XXCountRecdL32 indicates the lower 32 bits of the value of tmnxDAHttpIngest2XXCountRecd.')
tmnxDAHttpIngest2XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecdH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest2XXCountRecdH32.setDescription('The value of tmnxDAHttpIngest2XXCountRecdH32 indicates the higher 32 bits of the value of tmnxDAHttpIngest2XXCountRecd.')
tmnxDAHttpIngest3XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecd.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecd.setDescription('The value of tmnxDAHttpIngest3XXCountRecd indicates the count of type 3XX errors that were received by the HTTP proxy from the origin server.')
tmnxDAHttpIngest3XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecdL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecdL32.setDescription('The value of tmnxDAHttpIngest3XXCountRecdL32 indicates the lower 32 bits of the value of tmnxDAHttpIngest3XXCountRecd.')
tmnxDAHttpIngest3XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecdH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest3XXCountRecdH32.setDescription('The value of tmnxDAHttpIngest3XXCountRecdH32 indicates the higher 32 bits of the value of tmnxDAHttpIngest3XXCountRecd.')
tmnxDAHttpIngest4XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecd.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecd.setDescription('The value of tmnxDAHttpIngest4XXCountRecd indicates the count of type 4XX errors that were received by the HTTP proxy from the origin server.')
tmnxDAHttpIngest4XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecdL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecdL32.setDescription('The value of tmnxDAHttpIngest4XXCountRecdL32 indicates the lower 32 bits of the value of tmnxDAHttpIngest4XXCountRecd.')
tmnxDAHttpIngest4XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecdH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest4XXCountRecdH32.setDescription('The value of tmnxDAHttpIngest4XXCountRecdH32 indicates the higher 32 bits of the value of tmnxDAHttpIngest4XXCountRecd.')
tmnxDAHttpIngest5XXCountRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecd.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecd.setDescription('The value of tmnxDAHttpIngest5XXCountRecd indicates the count of type 5XX errors that were received by the HTTP proxy from the origin server.')
tmnxDAHttpIngest5XXCountRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecdL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecdL32.setDescription('The value of tmnxDAHttpIngest5XXCountRecdL32 indicates the lower 32 bits of the value of tmnxDAHttpIngest5XXCountRecd.')
tmnxDAHttpIngest5XXCountRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 10, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecdH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAHttpIngest5XXCountRecdH32.setDescription('The value of tmnxDAHttpIngest5XXCountRecdH32 indicates the higher 32 bits of the value of tmnxDAHttpIngest5XXCountRecd.')
tmnxDAIsmLinkTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkTableLastChanged.setDescription('The value of tmnxDAIsmLinkTableLastChanged indicates the sysUpTime at the time of the last modification to tmnxDAIsmLinkTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxDAIsmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12), )
if mibBuilder.loadTexts: tmnxDAIsmLinkTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkTable.setDescription('The tmnxDAIsmLinkTable has an entry for each ISM-link within a group configured in the Delivery Appliance (DA). Multiple IP ISM-links in the same group are assumed to belong to the same network. IP ISM-links in different groups are currently assumed to belong to different networks.')
tmnxDAIsmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAIsmLinkName"))
if mibBuilder.loadTexts: tmnxDAIsmLinkEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkEntry.setDescription('Each row entry represents an Integrated Services Module (ISM) link within a group configured in the Delivery Appliance (DA). Entries can be created and deleted by the user.')
tmnxDAIsmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxDAIsmLinkName.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkName.setDescription('The value of tmnxDAIsmLinkName specifies the ISM-link name within a group in the DA.')
tmnxDAIsmLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkRowStatus.setDescription('The value of tmnxDAIsmLinkRowStatus specifies the row status of this row in the tmnxDAIsmLinkTable. It is used to create and delete row entries in this table.')
tmnxDAIsmLinkLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkLastChanged.setDescription('The value of tmnxDAIsmLinkLastChanged indicates the timestamp of last change to this row in tmnxDAIsmLinkTable.')
tmnxDAIsmLinkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkAddrType.setDescription('The value of tmnxDAIsmLinkAddrType specifies the address-type of the ISM-link address used in the DA group.')
tmnxDAIsmLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkAddress.setDescription('The value of tmnxDAIsmLinkAddress specifies the IP address used for the ISM-link address in the DA group.')
tmnxDAIsmLinkAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 6), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkAddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkAddrPrefixLength.setDescription('The value of tmnxDAIsmLinkAddrPrefixLength specifies the prefix length of the ISM-link address used in the DA group.')
tmnxDAIsmLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 7), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkDescription.setDescription('The value of tmnxDAIsmLinkDescription specifies the user provided description string for this ISM-link within the DA group.')
tmnxDAIsmLinkHttpd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkHttpd.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkHttpd.setDescription('The value of tmnxDAIsmLinkHttpd specifies if the HTTP server should be enabled on this ISM-link.')
tmnxDAIsmLinkHttpListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 9), InetPortNumber().clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkHttpListenPort.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkHttpListenPort.setDescription('The value of tmnxDAIsmLinkHttpListenPort specifies the HTTP listner port number on this ISM-link if HTTPD is enabled on this ISM-link.')
tmnxDAIsmLinkIpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 9212)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkIpMtu.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkIpMtu.setDescription('The value of tmnxDAIsmLinkIpMtu specifies the Maximum Transmission Unit (MTU) value for this ISM-link within the DA group.')
tmnxDAIsmLinkQtag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkQtag.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkQtag.setDescription('The value of tmnxDAIsmLinkQtag specifies the ISM-link identifier for this ISM-link within the DA group.')
tmnxDAIsmLinkMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 12), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkMacAddress.setDescription('The value of the object tmnxDAIsmLinkMacAddress specifies the MAC address for this ISM-link within the DA group. By default the system will use an internally generated MAC address.')
tmnxDAIsmLinkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 13), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkAdminState.setDescription('The value of tmnxDAIsmLinkAdminState specifies the desired administrative state of the ISM-link used in the DA group.')
tmnxDAIsmLinkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 14), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkOperState.setDescription('The value of tmnxDAIsmLinkOperState indicates the current operational state of the ISM-link used in the DA group.')
tmnxDAIsmLinkBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 12, 1, 15), Bits().clone(namedValues=NamedValues(("deliveryController", 0), ("httpIngest", 1), ("dnsClient", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkBindings.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkBindings.setDescription('The value of tmnxDAIsmLinkBindings indicates whether the ism-link is configured on the delivery-controller, http-ingest and dns-client. If the bit for an entity is set, it indicates that the ism-link has been configured on that entity. If the bit for an entity is unset it indicates that the ism-link is not configured on the entity.')
tmnxDAIsmLinkArpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpTableLastChanged.setDescription('The value of tmnxDAIsmLinkArpTableLastChanged indicates the sysUpTime at the time of the last modification to tmnxDAIsmLinkArpTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxDAIsmLinkArpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14), )
if mibBuilder.loadTexts: tmnxDAIsmLinkArpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpTable.setDescription('The tmnxDAIsmLinkArpTable has an entry for each ARP address of an interface within a Delivery Appliance (DA) group.')
tmnxDAIsmLinkArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAIsmLinkName"), (0, "TIMETRA-DA-MIB", "tmnxDAIsmLinkArpAddrType"), (0, "TIMETRA-DA-MIB", "tmnxDAIsmLinkArpAddress"))
if mibBuilder.loadTexts: tmnxDAIsmLinkArpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpEntry.setDescription('Each row entry represents an ARP address of an interface within a DA group. Entries can be created and deleted by the user.')
tmnxDAIsmLinkArpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxDAIsmLinkArpAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpAddrType.setDescription('The value of tmnxDAIsmLinkArpAddrType specifies the ARP address-type of the interface used in the DA group.')
tmnxDAIsmLinkArpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDAIsmLinkArpAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpAddress.setDescription('The value of tmnxDAIsmLinkArpAddress specifies the ARP address of the interface used in the DA group.')
tmnxDAIsmLinkArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpRowStatus.setDescription('The value of tmnxDAIsmLinkArpRowStatus specifies the row status of this row in the tmnxDAIsmLinkArpTable. It is used to create and delete row entries in this table.')
tmnxDAIsmLinkArpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpLastChanged.setDescription('The value of tmnxDAIsmLinkArpLastChanged indicates the timestamp of last change to this row in tmnxDAIsmLinkArpTable.')
tmnxDAIsmLinkArpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpMacAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpMacAddr.setDescription('The value of the object tmnxDAIsmLinkArpMacAddr specifies the MAC address for this ARP interface within the DA group.')
tmnxDAIsmLinkArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 14, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAIsmLinkArpType.setStatus('current')
if mibBuilder.loadTexts: tmnxDAIsmLinkArpType.setDescription("The value of the object tmnxDAIsmLinkArpType indicates if the ARP entry is static or dynamic. When the value of tmnxDAIsmLinkArpType is 'true' the ARP entry is dynamic and when it is 'false' the ARP entry is static.")
tmnxDAStRouteTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAStRouteTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteTableLastChanged.setDescription('The value of tmnxDAStRouteTableLastChanged indicates the sysUpTime at the time of the last modification to tmnxDAStRouteTable by adding, deleting an entry or change to a writable object in the table. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxDAStRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16), )
if mibBuilder.loadTexts: tmnxDAStRouteTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteTable.setDescription('The tmnxDAStRouteTable has an entry for each static-route address of an interface within a Delivery Appliance (DA) group.')
tmnxDAStRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAStRouteAddrType"), (0, "TIMETRA-DA-MIB", "tmnxDAStRouteAddress"), (0, "TIMETRA-DA-MIB", "tmnxDAStRoutePrefixLength"), (0, "TIMETRA-DA-MIB", "tmnxDAStRouteNextHopAddrType"), (0, "TIMETRA-DA-MIB", "tmnxDAStRouteNextHopAddress"))
if mibBuilder.loadTexts: tmnxDAStRouteEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteEntry.setDescription('Each row entry represents a static-route address of an interface within a DA group. Entries can be created and deleted by the user.')
tmnxDAStRouteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxDAStRouteAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteAddrType.setDescription('The value of tmnxDAStRouteAddrType specifies the static-route address-type for a static-route the user wishes to create.')
tmnxDAStRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDAStRouteAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteAddress.setDescription('The value of tmnxDAStRouteAddress specifies the route address for which the user wishes to create a static-route.')
tmnxDAStRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: tmnxDAStRoutePrefixLength.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRoutePrefixLength.setDescription('The value of tmnxDAStRoutePrefixLength specifies the prefix length of the static-route address.')
tmnxDAStRouteNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 4), InetAddressType())
if mibBuilder.loadTexts: tmnxDAStRouteNextHopAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteNextHopAddrType.setDescription('The value of tmnxDAStRouteNextHopAddrType specifies the next-hop address-type for the static-route.')
tmnxDAStRouteNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDAStRouteNextHopAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteNextHopAddress.setDescription('The value of tmnxDAStRouteNextHopAddress specifies the next-hop address for the specified static-route.')
tmnxDAStRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAStRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteRowStatus.setDescription('The value of tmnxDAStRouteRowStatus specifies the row status of this row in the tmnxDAStRouteTable. It is used to create and delete row entries in this table.')
tmnxDAStRouteLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAStRouteLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteLastChanged.setDescription('The value of tmnxDAStRouteLastChanged indicates the timestamp of last change to this row in tmnxDAStRouteTable.')
tmnxDAStRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 16, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDAStRouteMetric.setStatus('current')
if mibBuilder.loadTexts: tmnxDAStRouteMetric.setDescription('The value of tmnxDAStRouteMetric specifies the route metric of the static-route.')
tmnxDASGCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17), )
if mibBuilder.loadTexts: tmnxDASGCardTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTable.setDescription('There can be multiple Delivery Appliance (DA) proxy server groups in a system. One or more caching blades (DA servers) form a server group. A card can be part of multiple server groups. The tmnxDASGCardTable has an entry for a card in every server group that it is associated with in the system.')
tmnxDASGCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDASvrGrpIndex"), (0, "TIMETRA-DA-MIB", "tmnxDASGCardNumber"))
if mibBuilder.loadTexts: tmnxDASGCardEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardEntry.setDescription('Each row entry represents a DA server-group card entry in the system.')
tmnxDASGCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("card1", 1), ("card2", 2), ("card3", 3), ("card4", 4), ("card5", 5), ("card6", 6), ("card7", 7), ("card8", 8), ("card9", 9), ("card10", 10))))
if mibBuilder.loadTexts: tmnxDASGCardNumber.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardNumber.setDescription('The value of tmnxDASGCardNumber specifies the card number that is associated with the DA server-group.')
tmnxDASGCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardUpTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardUpTime.setDescription('The value of tmnxDASGCardUpTime indicates the uptime of the card within this DA server-group.')
tmnxDASGCardTotNumTCPConn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTotNumTCPConn.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTotNumTCPConn.setDescription('The value of tmnxDASGCardTotNumTCPConn indicates the total number of TCP connections for the card within this DA server-group.')
tmnxDASGCardTCPConnEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstab.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstab.setDescription('The value of tmnxDASGCardTCPConnEstab indicates the number of TCP connections that have been established for the card within this DA server-group.')
tmnxDASGCardTCPConnEstabL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstabL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstabL32.setDescription('The value of tmnxDASGCardTCPConnEstabL32 indicates the lower 32 bits of the value of tmnxDASGCardTCPConnEstab.')
tmnxDASGCardTCPConnEstabH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstabH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPConnEstabH32.setDescription('The value of tmnxDASGCardTCPConnEstabH32 indicates the higher 32 bits of the value of tmnxDASGCardTCPConnEstab.')
tmnxDASGCardTCPConnClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosed.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosed.setDescription('The value of tmnxDASGCardTCPConnClosed indicates the number of TCP connections that have been closed for the card within this DA server-group.')
tmnxDASGCardTCPConnClosedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosedL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosedL32.setDescription('The value of tmnxDASGCardTCPConnClosedL32 indicates the lower 32 bits of the value of tmnxDASGCardTCPConnClosed.')
tmnxDASGCardTCPConnClosedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosedH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPConnClosedH32.setDescription('The value of tmnxDASGCardTCPConnClosedH32 indicates the higher 32 bits of the value of tmnxDASGCardTCPConnClosed.')
tmnxDASGCardTCPRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPRetries.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPRetries.setDescription('The value of tmnxDASGCardTCPRetries indicates the number of TCP retries that have been made for the card within this DA server-group.')
tmnxDASGCardTCPRetriesL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPRetriesL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPRetriesL32.setDescription('The value of tmnxDASGCardTCPRetriesL32 indicates the lower 32 bits of the value of tmnxDASGCardTCPRetries.')
tmnxDASGCardTCPRetriesH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPRetriesH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPRetriesH32.setDescription('The value of tmnxDASGCardTCPRetriesH32 indicates the higher 32 bits of the value of tmnxDASGCardTCPRetries.')
tmnxDASGCardTCPAckTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOut.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOut.setDescription('The value of tmnxDASGCardTCPAckTimeOut indicates the number of TCP acknowledgement timeouts that have occured for the card within this DA server-group.')
tmnxDASGCardTCPAckTimeOutL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOutL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOutL32.setDescription('The value of tmnxDASGCardTCPAckTimeOutL32 indicates the lower 32 bits of the value of tmnxDASGCardTCPAckTimeOut.')
tmnxDASGCardTCPAckTimeOutH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOutH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPAckTimeOutH32.setDescription('The value of tmnxDASGCardTCPAckTimeOutH32 indicates the higher 32 bits of the value of tmnxDASGCardTCPAckTimeOut.')
tmnxDASGCardTCPFarEndClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosed.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosed.setDescription('The value of tmnxDASGCardTCPFarEndClosed indicates the number of TCP connections that have been closed at the receiving end for the card within this DA server-group.')
tmnxDASGCardTCPFarEndClosedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosedL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosedL32.setDescription('The value of tmnxDASGCardTCPFarEndClosedL32 indicates the lower 32 bits of the value of tmnxDASGCardTCPFarEndClosed.')
tmnxDASGCardTCPFarEndClosedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosedH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPFarEndClosedH32.setDescription('The value of tmnxDASGCardTCPFarEndClosedH32 indicates the higher 32 bits of the value of tmnxDASGCardTCPFarEndClosed.')
tmnxDASGCardTCPLocalEndClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosed.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosed.setDescription('The value of tmnxDASGCardTCPLocalEndClosed indicates the number of TCP connections that have been closed locally for the card within this DA server-group.')
tmnxDASGCardTCPLocalEndClosedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosedL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosedL32.setDescription('The value of tmnxDASGCardTCPLocalEndClosedL32 indicates the lower 32 bits of the value of tmnxDASGCardTCPLocalEndClosed.')
tmnxDASGCardTCPLocalEndClosedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosedH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardTCPLocalEndClosedH32.setDescription('The value of tmnxDASGCardTCPLocalEndClosedH32 indicates the higher 32 bits of the value of tmnxDASGCardTCPLocalEndClosed.')
tmnxDASGCardUsedStorageCpcty = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpcty.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpcty.setDescription('The value of tmnxDASGCardUsedStorageCpcty indicates the amount of used storage capacity for the card within this DA server-group.')
tmnxDASGCardUsedStorageCpctyL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpctyL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpctyL32.setDescription('The value of tmnxDASGCardUsedStorageCpctyL32 indicates the lower 32 bits of the value of tmnxDASGCardUsedStorageCpcty.')
tmnxDASGCardUsedStorageCpctyH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpctyH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardUsedStorageCpctyH32.setDescription('The value of tmnxDASGCardUsedStorageCpctyH32 indicates the higher 32 bits of the value of tmnxDASGCardUsedStorageCpcty.')
tmnxDASGCardRemStorageCpcty = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpcty.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpcty.setDescription('The value of tmnxDASGCardRemStorageCpcty indicates the amount of remaining storage capacity that can be used for the card within this DA server-group.')
tmnxDASGCardRemStorageCpctyL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpctyL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpctyL32.setDescription('The value of tmnxDASGCardRemStorageCpctyL32 indicates the lower 32 bits of the value of tmnxDASGCardRemStorageCpcty.')
tmnxDASGCardRemStorageCpctyH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpctyH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardRemStorageCpctyH32.setDescription('The value of tmnxDASGCardRemStorageCpctyH32 indicates the higher 32 bits of the value of tmnxDASGCardRemStorageCpcty.')
tmnxDASGCardNumberOfAssets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardNumberOfAssets.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardNumberOfAssets.setDescription('The value of tmnxDASGCardNumberOfAssets indicates the number of assets for the card within this DA server-group.')
tmnxDASGCardNumberOfOrigins = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardNumberOfOrigins.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardNumberOfOrigins.setDescription('The value of tmnxDASGCardNumberOfOrigins indicates the number of origin servers connected to this card within this DA server-group.')
tmnxDASGCardNumberOfURIs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardNumberOfURIs.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardNumberOfURIs.setDescription("The value of tmnxDASGCardNumberOfURIs indicates the number of URI's that are connected to this card within this DA server-group.")
tmnxDASGCardECCBlockCorrections = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardECCBlockCorrections.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardECCBlockCorrections.setDescription('The value of tmnxDASGCardECCBlockCorrections indicates the number of ECC block corrections for the card within this DA server-group.')
tmnxDASGCardECCBlockFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardECCBlockFailures.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardECCBlockFailures.setDescription('The value of tmnxDASGCardECCBlockFailures indicates the number of ECC block failures for the card within this DA server-group.')
tmnxDASGCardPercentBadBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 33), Gauge32()).setUnits('hundredths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardPercentBadBlocks.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardPercentBadBlocks.setDescription('The value of tmnxDASGCardPercentBadBlocks indicates the percent amount of bad blocks on the card within this DA server-group.')
tmnxDASGCardFPGATotPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSent.setDescription('The value of tmnxDASGCardFPGATotPktsSent indicates the total number of packets sent to the FPGA by connections on this card within this DA server-group.')
tmnxDASGCardFPGATotPktsSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSentL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSentL32.setDescription('The value of tmnxDASGCardFPGATotPktsSentL32 indicates the lower 32 bits of the value of tmnxDASGCardFPGATotPktsSent.')
tmnxDASGCardFPGATotPktsSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSentH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsSentH32.setDescription('The value of tmnxDASGCardFPGATotPktsSentH32 indicates the higher 32 bits of the value of tmnxDASGCardFPGATotPktsSent.')
tmnxDASGCardFPGATotBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSent.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSent.setDescription('The value of tmnxDASGCardFPGATotBytesSent indicates the total number of bytes sent to the FPGA by connections on this card within this DA server-group.')
tmnxDASGCardFPGATotBytesSentL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSentL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSentL32.setDescription('The value of tmnxDASGCardFPGATotBytesSentL32 indicates the lower 32 bits of the value of tmnxDASGCardFPGATotBytesSent.')
tmnxDASGCardFPGATotBytesSentH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSentH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesSentH32.setDescription('The value of tmnxDASGCardFPGATotBytesSentH32 indicates the higher 32 bits of the value of tmnxDASGCardFPGATotBytesSent.')
tmnxDASGCardFPGATotPktsRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecd.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecd.setDescription('The value of tmnxDASGCardFPGATotPktsRecd indicates the total number of packets received from the FPGA by connections on this card within this DA server-group.')
tmnxDASGCardFPGATotPktsRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecdL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecdL32.setDescription('The value of tmnxDASGCardFPGATotPktsRecdL32 indicates the lower 32 bits of the value of tmnxDASGCardFPGATotPktsRecd.')
tmnxDASGCardFPGATotPktsRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecdH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotPktsRecdH32.setDescription('The value of tmnxDASGCardFPGATotPktsRecdH32 indicates the higher 32 bits of the value of tmnxDASGCardFPGATotPktsRecd.')
tmnxDASGCardFPGATotBytesRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecd.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecd.setDescription('The value of tmnxDASGCardFPGATotBytesRecd indicates the total number of bytes received from the FPGA by connections on this card within this DA server-group.')
tmnxDASGCardFPGATotBytesRecdL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecdL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecdL32.setDescription('The value of tmnxDASGCardFPGATotBytesRecdL32 indicates the lower 32 bits of the value of tmnxDASGCardFPGATotBytesRecd.')
tmnxDASGCardFPGATotBytesRecdH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecdH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGATotBytesRecdH32.setDescription('The value of tmnxDASGCardFPGATotBytesRecdH32 indicates the higher 32 bits of the value of tmnxDASGCardFPGATotBytesRecd.')
tmnxDASGCardFPGAUnderflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGAUnderflowErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGAUnderflowErrors.setDescription('The value of tmnxDASGCardFPGAUnderflowErrors indicates the number of FPGA underflow errors that occured with connections on the card within this DA server-group')
tmnxDASGCardFPGAOverflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 17, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDASGCardFPGAOverflowErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxDASGCardFPGAOverflowErrors.setDescription('The value of tmnxDASGCardFPGAOverflowErrors indicates the number of FPGA overflow errors that occured with connections on the card within this DA server-group.')
tmnxDADCIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18), )
if mibBuilder.loadTexts: tmnxDADCIntfTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfTable.setDescription('The tmnxDADCIntfTable has an entry for each Delivery Controller (DC) interface type.')
tmnxDADCIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDADCIntfServerIndex"), (0, "TIMETRA-DA-MIB", "tmnxDADCIntfType"), (0, "TIMETRA-DA-MIB", "tmnxDADCIntfIPAddrType"), (0, "TIMETRA-DA-MIB", "tmnxDADCIntfIPAddress"))
if mibBuilder.loadTexts: tmnxDADCIntfEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfEntry.setDescription('Each row entry represents a DC Interface type.')
tmnxDADCIntfServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 1), Gauge32())
if mibBuilder.loadTexts: tmnxDADCIntfServerIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfServerIndex.setDescription('The value of tmnxDADCIntfServerIndex indicates the internal server index of the delivery controller.')
tmnxDADCIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("service", 1), ("config", 2), ("health", 3), ("job", 4), ("metadata", 5), ("auth", 6), ("event", 7))))
if mibBuilder.loadTexts: tmnxDADCIntfType.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfType.setDescription('The value of tmnxDADCIntfType indicates the type of interface asociated with the delivery controller.')
tmnxDADCIntfIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tmnxDADCIntfIPAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfIPAddrType.setDescription('The value of tmnxDADCIntfIPAddrType indicates the type of address represented by tmnxDADCIntfIPAddress.')
tmnxDADCIntfIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxDADCIntfIPAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfIPAddress.setDescription('The value of tmnxDADCIntfIPAddress indicates the IP Address of the interface of the delivery controller.')
tmnxDADCIntfFQDNType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfFQDNType.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfFQDNType.setDescription('The value of tmnxDADCIntfFQDNType indicates the type of address represented by tmnxDADCIntfFQDN.')
tmnxDADCIntfFQDN = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfFQDN.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfFQDN.setDescription('The value of tmnxDADCIntfFQDN indicates the Fully Qualified Domain Name (FQDN) of the interface associated with the delivery controller.')
tmnxDADCIntfSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfSrcPort.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfSrcPort.setDescription('The value of tmnxDADCIntfSrcPort indicates the source-port of the interface associated with the delivery controller.')
tmnxDADCIntfDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfDestPort.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfDestPort.setDescription('The value of tmnxDADCIntfDestPort indicates the destination-port of the interface associated with the delivery controller.')
tmnxDADCIntfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 9), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfOperState.setDescription('The value of tmnxDADCIntfOperState indicates the operational state of the interface associated with the delivery controller.')
tmnxDADCIntfIPUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 10), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfIPUpTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfIPUpTime.setDescription('The value of tmnxDADCIntfIPUpTime indicates the up time for the interface associated with the delivery controller.')
tmnxDADCIntfIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 11), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfIdleTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfIdleTime.setDescription('The value of tmnxDADCIntfIdleTime indicates the idle time for the interface associated with the delivery controller.')
tmnxDADCIntfRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 12), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfRetry.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfRetry.setDescription('The value of tmnxDADCIntfRetry indicates the retry time for the interface associated with the delivery controller.')
tmnxDADCIntfTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfTimeToLive.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfTimeToLive.setDescription('The value of tmnxDADCIntfTimeToLive indicates Time To Live (TTL) for the interface entry associated with the delivery controller.')
tmnxDADCIntfEtag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 14), TLNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfEtag.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfEtag.setDescription('The value of tmnxDADCIntfEtag indicates the Etag value for the interface associated with the delivery controller.')
tmnxDADCIntfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfInterval.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfInterval.setDescription('The value of tmnxDADCIntfInterval indicates the interval for the interface associated with the delivery controller.')
tmnxDADCIntfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfPriority.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfPriority.setDescription('The value of tmnxDADCIntfPriority indicates the priority for the interface associated with the delivery controller.')
tmnxDADCIntfWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfWeight.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfWeight.setDescription('The value of tmnxDADCIntfWeight indicates the weight for the interface associated with the delivery controller.')
tmnxDADCIntfAttemptedSessStups = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfAttemptedSessStups.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfAttemptedSessStups.setDescription('The value of tmnxDADCIntfAttemptedSessStups indicates the number of attempted session startups for the interface associated with the delivery controller.')
tmnxDADCIntfFailedSessStups = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfFailedSessStups.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfFailedSessStups.setDescription('The value of tmnxDADCIntfFailedSessStups indicates the number of failed session startups for the interface associated with the delivery controller.')
tmnxDADCIntfPingReqTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfPingReqTxCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfPingReqTxCount.setDescription('The value of tmnxDADCIntfPingReqTxCount indicates the number of ping requests transmitted for the interface associated with the delivery controller.')
tmnxDADCIntfPingResRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfPingResRxCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfPingResRxCount.setDescription('The value of tmnxDADCIntfPingResRxCount indicates the number of ping response counts received for the interface associated with the delivery controller.')
tmnxDADCIntfReqMsgTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCount.setDescription('The value of tmnxDADCIntfReqMsgTxCount indicates the number of interface request messages transmitted for the interface associated with the delivery controller.')
tmnxDADCIntfReqMsgTxCountL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCountL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCountL32.setDescription('The value of tmnxDADCIntfReqMsgTxCountL32 indicates the lower 32 bits of the value of tmnxDADCIntfReqMsgTxCount.')
tmnxDADCIntfReqMsgTxCountH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCountH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfReqMsgTxCountH32.setDescription('The value of tmnxDADCIntfReqMsgTxCountH32 indicates the higher 32 bits of the value of tmnxDADCIntfReqMsgTxCount.')
tmnxDADCIntfResMsgRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCount.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCount.setDescription('The value of tmnxDADCIntfResMsgRxCount indicates the number of interface request messages received for the interface associated with the delivery controller.')
tmnxDADCIntfResMsgRxCountL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCountL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCountL32.setDescription('The value of tmnxDADCIntfResMsgRxCountL32 indicates the lower 32 bits of the value of tmnxDADCIntfResMsgRxCount.')
tmnxDADCIntfResMsgRxCountH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCountH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfResMsgRxCountH32.setDescription('The value of tmnxDADCIntfResMsgRxCountH32 indicates the higher 32 bits of the value of tmnxDADCIntfResMsgRxCount.')
tmnxDADCIntfDecodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfDecodeErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfDecodeErrors.setDescription('The value of tmnxDADCIntfDecodeErrors indicates the number of decode errors for the interface associated with the delivery controller.')
tmnxDADCIntfConnectionBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfConnectionBounce.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfConnectionBounce.setDescription('The value of tmnxDADCIntfConnectionBounce indicates the number of bounced connections for the interface associated with the delivery controller.')
tmnxDADCIntfRemoteClose = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfRemoteClose.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfRemoteClose.setDescription('The value of tmnxDADCIntfRemoteClose indicates the number of connections remotely closed for the interface associated with the delivery controller.')
tmnxDADCIntfNoResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 18, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDADCIntfNoResponse.setStatus('current')
if mibBuilder.loadTexts: tmnxDADCIntfNoResponse.setDescription('The value of tmnxDADCIntfNoResponse indicates the number of non-responsive interfacs associated with the delivery controller.')
tmnxDAGrpOrigSvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19), )
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrTable.setDescription('The tmnxDAGrpOrigSvrTable has an entry for each origin server.')
tmnxDAGrpOrigSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1), ).setIndexNames((0, "TIMETRA-DA-MIB", "tmnxDAGrpName"), (0, "TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrName"))
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrEntry.setDescription('Each row entry represents a different origin server.')
tmnxDAGrpOrigSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 94)))
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrName.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrName.setDescription('The value of tmnxDAGrpOrigSvrName indicates the Fully Qualified Domain name (FQDN) of the origin server. The length of the FQDN is restricted to 94 characters.')
tmnxDAGrpOrigSvrIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrIPAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrIPAddrType.setDescription('The value of tmnxDAGrpOrigSvrIPAddrType indicates the type of address represented by tmnxDAGrpOrigSvrIPAddress.')
tmnxDAGrpOrigSvrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrIPAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrIPAddress.setDescription('The value of tmnxDAGrpOrigSvrIPAddress indicates the IP Address of the interface to the origin server.')
tmnxDAGrpOrigSvrNumObjDelvred = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvred.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvred.setDescription('The value of tmnxDAGrpOrigSvrNumObjDelvred indicates the number of objects delivered to the origin server.')
tmnxDAGrpOrigSvrNumObjDelvredL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvredL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvredL32.setDescription('The value of tmnxDAGrpOrigSvrNumObjDelvredL32 indicates the lower 32 bits of the value of tmnxDAGrpOrigSvrNumObjDelvred.')
tmnxDAGrpOrigSvrNumObjDelvredH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvredH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjDelvredH32.setDescription('The value of tmnxDAGrpOrigSvrNumObjDelvredH32 indicates the higher 32 bits of the value of tmnxDAGrpOrigSvrNumObjDelvred.')
tmnxDAGrpOrigSvrNumObjFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailed.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailed.setDescription('The value of tmnxDAGrpOrigSvrNumObjFailed indicates the number of objects that could not be delivered to the origin server.')
tmnxDAGrpOrigSvrNumObjFailedL32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailedL32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailedL32.setDescription('The value of tmnxDAGrpOrigSvrNumObjFailedL32 indicates the lower 32 bits of the value of tmnxDAGrpOrigSvrNumObjFailed.')
tmnxDAGrpOrigSvrNumObjFailedH32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailedH32.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumObjFailedH32.setDescription('The value of tmnxDAGrpOrigSvrNumObjFailedH32 indicates the higher 32 bits of the value of tmnxDAGrpOrigSvrNumObjFailed.')
tmnxDAGrpOrigSvrNumCurTCPConn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 82, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumCurTCPConn.setStatus('current')
if mibBuilder.loadTexts: tmnxDAGrpOrigSvrNumCurTCPConn.setDescription('The value of tmnxDAGrpOrigSvrNumCurTCPConn indicates the number of current TCP connections to the origin server.')
tmnxDAV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82, 1, 1)).setObjects(("TIMETRA-DA-MIB", "tmnxDAV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDAV10v0Compliance = tmnxDAV10v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxDAV10v0Compliance.setDescription('The compliance statement for management of cdn features on version 10.0 of the Alcatel-Lucent SROS series systems.')
tmnxDAV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 82, 2, 1)).setObjects(("TIMETRA-DA-MIB", "tmnxDASvrGrpTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpRowStatus"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpLastChanged"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpCardSlotNumber"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpAdminState"), ("TIMETRA-DA-MIB", "tmnxDASvrGrpOperState"), ("TIMETRA-DA-MIB", "tmnxDAGrpTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAGrpRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAGrpLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAGrpServerGroupIndex"), ("TIMETRA-DA-MIB", "tmnxDAGrpAdminState"), ("TIMETRA-DA-MIB", "tmnxDAGrpDescription"), ("TIMETRA-DA-MIB", "tmnxDAGrpDnsClientIsmLinkName"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAdminState"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCIsmLinkName"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCBootStrapPort"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCConnRetryTimer"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCIdleTimeout"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesFromCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesFromCacheL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesFromCacheH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesNotFromCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesNotFromCacheL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpBytesNotFromCacheH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsFromCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsFromCacheL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsFromCacheH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsNotFromCache"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsNotFromCacheL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectsNotFromCacheH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectByteCount"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectByteCountL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpObjectByteCountH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpNumberOfOrigins"), ("TIMETRA-DA-MIB", "tmnxDAGrpNumberOfOriginsL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpNumberOfOriginsH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheHit"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheHitL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheHitH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheMiss"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheMissL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAuthCacheMissH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCDeniedAuth"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCDeniedAuthL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCDeniedAuthH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCMinRTTPerPeer"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCAvgRTTPerPeer"), ("TIMETRA-DA-MIB", "tmnxDAGrpDCMaxRTTPerPeer"), ("TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAGrpDnsSvrLastChanged"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrRowStatus"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrLastChanged"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrAddrType"), ("TIMETRA-DA-MIB", "tmnxDADCBtStSvrAddress"), ("TIMETRA-DA-MIB", "tmnxDAHttpTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAHttpLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerAdminState"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerOperState"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerIdleTimeout"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerViaString"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerStrBWInUse"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerStrBWInUseL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerStrBWInUseH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferInProg"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferCompleted"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferCompletedL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferCompletedH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferTimeouts"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerXferFailed"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerValidRequests"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerValidRequestsL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerValidRequestsH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerInvalidRequests"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerMethodNotSuppted"), ("TIMETRA-DA-MIB", "tmnxDAHttpServerHostNotSuppted"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer1XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer1XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer1XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer2XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer2XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer2XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer3XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer3XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer3XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer4XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer4XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer4XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer5XXCountSent"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer5XXCountSentL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpServer5XXCountSentH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestAdminState"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestOperState"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestIsmLinkName"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestIdleTimeout"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferInProg"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferCompleted"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferCompletedL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferCompletedH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferTimeouts"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngestXferFailed"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest1XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest1XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest1XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest2XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest2XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest2XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest3XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest3XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest3XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest4XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest4XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest4XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest5XXCountRecd"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest5XXCountRecdL32"), ("TIMETRA-DA-MIB", "tmnxDAHttpIngest5XXCountRecdH32"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkAddrType"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkAddress"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkAddrPrefixLength"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkDescription"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkHttpd"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkHttpListenPort"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkIpMtu"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkQtag"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkMacAddress"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkAdminState"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkOperState"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkBindings"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpMacAddr"), ("TIMETRA-DA-MIB", "tmnxDAIsmLinkArpType"), ("TIMETRA-DA-MIB", "tmnxDAStRouteTableLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAStRouteRowStatus"), ("TIMETRA-DA-MIB", "tmnxDAStRouteLastChanged"), ("TIMETRA-DA-MIB", "tmnxDAStRouteMetric"), ("TIMETRA-DA-MIB", "tmnxDASGCardUpTime"), ("TIMETRA-DA-MIB", "tmnxDASGCardTotNumTCPConn"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnEstab"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnEstabL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnEstabH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnClosed"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnClosedL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPConnClosedH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPRetries"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPRetriesL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPRetriesH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPAckTimeOut"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPAckTimeOutL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPAckTimeOutH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPFarEndClosed"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPFarEndClosedL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPFarEndClosedH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPLocalEndClosed"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPLocalEndClosedL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardTCPLocalEndClosedH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardUsedStorageCpcty"), ("TIMETRA-DA-MIB", "tmnxDASGCardUsedStorageCpctyL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardUsedStorageCpctyH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardRemStorageCpcty"), ("TIMETRA-DA-MIB", "tmnxDASGCardRemStorageCpctyL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardRemStorageCpctyH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardNumberOfAssets"), ("TIMETRA-DA-MIB", "tmnxDASGCardNumberOfOrigins"), ("TIMETRA-DA-MIB", "tmnxDASGCardNumberOfURIs"), ("TIMETRA-DA-MIB", "tmnxDASGCardECCBlockCorrections"), ("TIMETRA-DA-MIB", "tmnxDASGCardECCBlockFailures"), ("TIMETRA-DA-MIB", "tmnxDASGCardPercentBadBlocks"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsSent"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsSentL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsSentH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesSent"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesSentL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesSentH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsRecd"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsRecdL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotPktsRecdH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesRecd"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesRecdL32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGATotBytesRecdH32"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGAUnderflowErrors"), ("TIMETRA-DA-MIB", "tmnxDASGCardFPGAOverflowErrors"), ("TIMETRA-DA-MIB", "tmnxDADCIntfFQDNType"), ("TIMETRA-DA-MIB", "tmnxDADCIntfFQDN"), ("TIMETRA-DA-MIB", "tmnxDADCIntfSrcPort"), ("TIMETRA-DA-MIB", "tmnxDADCIntfDestPort"), ("TIMETRA-DA-MIB", "tmnxDADCIntfOperState"), ("TIMETRA-DA-MIB", "tmnxDADCIntfIPUpTime"), ("TIMETRA-DA-MIB", "tmnxDADCIntfIdleTime"), ("TIMETRA-DA-MIB", "tmnxDADCIntfRetry"), ("TIMETRA-DA-MIB", "tmnxDADCIntfTimeToLive"), ("TIMETRA-DA-MIB", "tmnxDADCIntfEtag"), ("TIMETRA-DA-MIB", "tmnxDADCIntfInterval"), ("TIMETRA-DA-MIB", "tmnxDADCIntfPriority"), ("TIMETRA-DA-MIB", "tmnxDADCIntfWeight"), ("TIMETRA-DA-MIB", "tmnxDADCIntfAttemptedSessStups"), ("TIMETRA-DA-MIB", "tmnxDADCIntfFailedSessStups"), ("TIMETRA-DA-MIB", "tmnxDADCIntfPingReqTxCount"), ("TIMETRA-DA-MIB", "tmnxDADCIntfPingResRxCount"), ("TIMETRA-DA-MIB", "tmnxDADCIntfReqMsgTxCount"), ("TIMETRA-DA-MIB", "tmnxDADCIntfReqMsgTxCountL32"), ("TIMETRA-DA-MIB", "tmnxDADCIntfReqMsgTxCountH32"), ("TIMETRA-DA-MIB", "tmnxDADCIntfResMsgRxCount"), ("TIMETRA-DA-MIB", "tmnxDADCIntfResMsgRxCountL32"), ("TIMETRA-DA-MIB", "tmnxDADCIntfResMsgRxCountH32"), ("TIMETRA-DA-MIB", "tmnxDADCIntfDecodeErrors"), ("TIMETRA-DA-MIB", "tmnxDADCIntfConnectionBounce"), ("TIMETRA-DA-MIB", "tmnxDADCIntfRemoteClose"), ("TIMETRA-DA-MIB", "tmnxDADCIntfNoResponse"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrIPAddrType"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrIPAddress"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjDelvred"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjDelvredL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjDelvredH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjFailed"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjFailedL32"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumObjFailedH32"), ("TIMETRA-DA-MIB", "tmnxDAGrpOrigSvrNumCurTCPConn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDAV10v0Group = tmnxDAV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxDAV10v0Group.setDescription('The group of objects supporting management of Delivery Appliance features on version 10.0 of the Alcatel-Lucent SROS series systems.')
mibBuilder.exportSymbols("TIMETRA-DA-MIB", tmnxDASvrGrpCardSlotNumber=tmnxDASvrGrpCardSlotNumber, tmnxDAIsmLinkArpRowStatus=tmnxDAIsmLinkArpRowStatus, tmnxDAIsmLinkAdminState=tmnxDAIsmLinkAdminState, tmnxDADCIntfReqMsgTxCountH32=tmnxDADCIntfReqMsgTxCountH32, tmnxDAGrpOrigSvrNumObjFailedH32=tmnxDAGrpOrigSvrNumObjFailedH32, tmnxDAIsmLinkArpEntry=tmnxDAIsmLinkArpEntry, timetraDAMIBModule=timetraDAMIBModule, tmnxDAGrpDnsSvrAddrTyp=tmnxDAGrpDnsSvrAddrTyp, tmnxDAGrpDCDeniedAuth=tmnxDAGrpDCDeniedAuth, tmnxDAHttpIngest2XXCountRecdH32=tmnxDAHttpIngest2XXCountRecdH32, tmnxDASGCardFPGATotBytesRecd=tmnxDASGCardFPGATotBytesRecd, tmnxDAIsmLinkQtag=tmnxDAIsmLinkQtag, tmnxDAHttpServer2XXCountSent=tmnxDAHttpServer2XXCountSent, tmnxDAStRouteNextHopAddrType=tmnxDAStRouteNextHopAddrType, tmnxDAHttpIngest1XXCountRecdH32=tmnxDAHttpIngest1XXCountRecdH32, tmnxDASGCardTCPConnClosed=tmnxDASGCardTCPConnClosed, tmnxDAHttpServerStrBWInUseH32=tmnxDAHttpServerStrBWInUseH32, tmnxDASGCardUsedStorageCpctyH32=tmnxDASGCardUsedStorageCpctyH32, tmnxDADCIntfResMsgRxCountH32=tmnxDADCIntfResMsgRxCountH32, tmnxDAIsmLinkDescription=tmnxDAIsmLinkDescription, tmnxDAStRoutePrefixLength=tmnxDAStRoutePrefixLength, tmnxDAV10v0Compliance=tmnxDAV10v0Compliance, tmnxDAStRouteNextHopAddress=tmnxDAStRouteNextHopAddress, tmnxDAHttpIngest3XXCountRecdH32=tmnxDAHttpIngest3XXCountRecdH32, tmnxDAGrpTableLastChanged=tmnxDAGrpTableLastChanged, tmnxDAHttpIngest3XXCountRecdL32=tmnxDAHttpIngest3XXCountRecdL32, tmnxDAGrpDnsSvrTableLastChanged=tmnxDAGrpDnsSvrTableLastChanged, tmnxDAStRouteEntry=tmnxDAStRouteEntry, tmnxDAStRouteLastChanged=tmnxDAStRouteLastChanged, tmnxDAGrpDCAuthCacheMissH32=tmnxDAGrpDCAuthCacheMissH32, tmnxDADCIntfEtag=tmnxDADCIntfEtag, tmnxDAGrpOrigSvrNumCurTCPConn=tmnxDAGrpOrigSvrNumCurTCPConn, tmnxDAGrpDCMinRTTPerPeer=tmnxDAGrpDCMinRTTPerPeer, tmnxDASvrGrpTableLastChanged=tmnxDASvrGrpTableLastChanged, tmnxDAHttpServer5XXCountSentH32=tmnxDAHttpServer5XXCountSentH32, tmnxDASGCardFPGATotPktsRecdH32=tmnxDASGCardFPGATotPktsRecdH32, tmnxDAIsmLinkBindings=tmnxDAIsmLinkBindings, tmnxDASvrGrpLastChanged=tmnxDASvrGrpLastChanged, tmnxDAGrpObjectsNotFromCache=tmnxDAGrpObjectsNotFromCache, tmnxDAGrpDescription=tmnxDAGrpDescription, tmnxDASGCardTCPAckTimeOut=tmnxDASGCardTCPAckTimeOut, tmnxDADCIntfServerIndex=tmnxDADCIntfServerIndex, tmnxDAHttpServerAdminState=tmnxDAHttpServerAdminState, tmnxDAHttpIngestIdleTimeout=tmnxDAHttpIngestIdleTimeout, tmnxDADCIntfIPAddrType=tmnxDADCIntfIPAddrType, tmnxDAIsmLinkTableLastChanged=tmnxDAIsmLinkTableLastChanged, tmnxDASGCardFPGAUnderflowErrors=tmnxDASGCardFPGAUnderflowErrors, tmnxDAGrpDCAuthCacheMiss=tmnxDAGrpDCAuthCacheMiss, tmnxDAHttpIngestXferCompletedL32=tmnxDAHttpIngestXferCompletedL32, tmnxDADCIntfIPUpTime=tmnxDADCIntfIPUpTime, tmnxDAHttpIngest3XXCountRecd=tmnxDAHttpIngest3XXCountRecd, tmnxDAIsmLinkHttpd=tmnxDAIsmLinkHttpd, tmnxDAGrpDCAvgRTTPerPeer=tmnxDAGrpDCAvgRTTPerPeer, tmnxDADCIntfAttemptedSessStups=tmnxDADCIntfAttemptedSessStups, tmnxDAConformance=tmnxDAConformance, tmnxDAHttpServerStrBWInUseL32=tmnxDAHttpServerStrBWInUseL32, tmnxDAGrpObjectByteCountH32=tmnxDAGrpObjectByteCountH32, tmnxDADCIntfDestPort=tmnxDADCIntfDestPort, tmnxDASvrGrpRowStatus=tmnxDASvrGrpRowStatus, tmnxDAIsmLinkAddress=tmnxDAIsmLinkAddress, tmnxDAGrpRowStatus=tmnxDAGrpRowStatus, tmnxDAHttpIngest5XXCountRecdH32=tmnxDAHttpIngest5XXCountRecdH32, tmnxDAHttpServerViaString=tmnxDAHttpServerViaString, tmnxDASvrGrpOperState=tmnxDASvrGrpOperState, tmnxDASGCardTCPConnClosedH32=tmnxDASGCardTCPConnClosedH32, tmnxDASGCardRemStorageCpcty=tmnxDASGCardRemStorageCpcty, tmnxDAHttpServerStrBWInUse=tmnxDAHttpServerStrBWInUse, tmnxDAHttpServer2XXCountSentL32=tmnxDAHttpServer2XXCountSentL32, tmnxDAHttpServer3XXCountSentH32=tmnxDAHttpServer3XXCountSentH32, tmnxDASGCardFPGATotPktsRecdL32=tmnxDASGCardFPGATotPktsRecdL32, tmnxDADCIntfSrcPort=tmnxDADCIntfSrcPort, tmnxDAHttpIngestXferCompleted=tmnxDAHttpIngestXferCompleted, tmnxDAIsmLinkArpAddrType=tmnxDAIsmLinkArpAddrType, tmnxDASGCardTCPRetries=tmnxDASGCardTCPRetries, tmnxDAHttpIngest2XXCountRecdL32=tmnxDAHttpIngest2XXCountRecdL32, tmnxDAHttpServerValidRequestsH32=tmnxDAHttpServerValidRequestsH32, PYSNMP_MODULE_ID=timetraDAMIBModule, tmnxDAGrpDnsSvrEntry=tmnxDAGrpDnsSvrEntry, tmnxDAStRouteAddress=tmnxDAStRouteAddress, tmnxDAGrpDnsSvrLastChanged=tmnxDAGrpDnsSvrLastChanged, tmnxDADCIntfType=tmnxDADCIntfType, tmnxDASGCardFPGATotPktsSentH32=tmnxDASGCardFPGATotPktsSentH32, tmnxDAGrpDCAuthCacheHitH32=tmnxDAGrpDCAuthCacheHitH32, tmnxDADCBtStSvrEntry=tmnxDADCBtStSvrEntry, tmnxDASGCardUsedStorageCpcty=tmnxDASGCardUsedStorageCpcty, tmnxDAHttpIngest4XXCountRecdH32=tmnxDAHttpIngest4XXCountRecdH32, tmnxDAGrpOrigSvrName=tmnxDAGrpOrigSvrName, tmnxDAHttpIngestOperState=tmnxDAHttpIngestOperState, tmnxDADCIntfFQDNType=tmnxDADCIntfFQDNType, tmnxDAGrpDnsSvrTable=tmnxDAGrpDnsSvrTable, tmnxDAStRouteRowStatus=tmnxDAStRouteRowStatus, tmnxDASGCardPercentBadBlocks=tmnxDASGCardPercentBadBlocks, tmnxDAHttpIngest2XXCountRecd=tmnxDAHttpIngest2XXCountRecd, tmnxDAV10v0Group=tmnxDAV10v0Group, tmnxDAStRouteTableLastChanged=tmnxDAStRouteTableLastChanged, tmnxDASGCardECCBlockCorrections=tmnxDASGCardECCBlockCorrections, tmnxDAGrpBytesNotFromCacheH32=tmnxDAGrpBytesNotFromCacheH32, tmnxDAHttpServer4XXCountSentL32=tmnxDAHttpServer4XXCountSentL32, tmnxDAGrpDCAuthCacheHit=tmnxDAGrpDCAuthCacheHit, tmnxDAHttpServer4XXCountSentH32=tmnxDAHttpServer4XXCountSentH32, tmnxDASGCardTCPLocalEndClosed=tmnxDASGCardTCPLocalEndClosed, tmnxDASGCardTable=tmnxDASGCardTable, tmnxDASGCardTCPFarEndClosedH32=tmnxDASGCardTCPFarEndClosedH32, tmnxDAGrpDnsSvrAddress=tmnxDAGrpDnsSvrAddress, tmnxDASGCardTCPAckTimeOutL32=tmnxDASGCardTCPAckTimeOutL32, tmnxDA=tmnxDA, tmnxDAGrpDnsClientIsmLinkName=tmnxDAGrpDnsClientIsmLinkName, tmnxDAHttpServer5XXCountSent=tmnxDAHttpServer5XXCountSent, tmnxDAGrpObjectsNotFromCacheL32=tmnxDAGrpObjectsNotFromCacheL32, tmnxDAHttpServer3XXCountSentL32=tmnxDAHttpServer3XXCountSentL32, tmnxDAIsmLinkAddrPrefixLength=tmnxDAIsmLinkAddrPrefixLength, tmnxDAStRouteAddrType=tmnxDAStRouteAddrType, tmnxDASGCardUpTime=tmnxDASGCardUpTime, tmnxDASGCardTCPLocalEndClosedL32=tmnxDASGCardTCPLocalEndClosedL32, tmnxDANotifications=tmnxDANotifications, tmnxDAHttpServerXferFailed=tmnxDAHttpServerXferFailed, tmnxDAGrpDCDeniedAuthH32=tmnxDAGrpDCDeniedAuthH32, tmnxDAHttpIngestAdminState=tmnxDAHttpIngestAdminState, tmnxDAIsmLinkHttpListenPort=tmnxDAIsmLinkHttpListenPort, tmnxDASGCardTCPLocalEndClosedH32=tmnxDASGCardTCPLocalEndClosedH32, tmnxDAHttpServerXferCompleted=tmnxDAHttpServerXferCompleted, tmnxDADCIntfRetry=tmnxDADCIntfRetry, tmnxDASvrGrpEntry=tmnxDASvrGrpEntry, tmnxDADCIntfResMsgRxCount=tmnxDADCIntfResMsgRxCount, tmnxDADCIntfPriority=tmnxDADCIntfPriority, tmnxDAGrpNumberOfOriginsL32=tmnxDAGrpNumberOfOriginsL32, tmnxDASvrGrpAdminState=tmnxDASvrGrpAdminState, tmnxDAGrpOrigSvrIPAddrType=tmnxDAGrpOrigSvrIPAddrType, tmnxDASGCardFPGATotPktsRecd=tmnxDASGCardFPGATotPktsRecd, tmnxDAHttpServer4XXCountSent=tmnxDAHttpServer4XXCountSent, tmnxDAIsmLinkTable=tmnxDAIsmLinkTable, tmnxDASvrGrpTable=tmnxDASvrGrpTable, tmnxDADCBtStSvrTable=tmnxDADCBtStSvrTable, tmnxDASGCardFPGATotBytesRecdH32=tmnxDASGCardFPGATotBytesRecdH32, tmnxDAGrpDCBootStrapPort=tmnxDAGrpDCBootStrapPort, tmnxDASGCardEntry=tmnxDASGCardEntry, tmnxDASvrGrpIndex=tmnxDASvrGrpIndex, tmnxDADCIntfEntry=tmnxDADCIntfEntry, tmnxDADCIntfReqMsgTxCountL32=tmnxDADCIntfReqMsgTxCountL32, tmnxDAGrpDCMaxRTTPerPeer=tmnxDAGrpDCMaxRTTPerPeer, tmnxDAGrpDnsSvrRowStatus=tmnxDAGrpDnsSvrRowStatus, tmnxDASGCardTCPRetriesH32=tmnxDASGCardTCPRetriesH32, tmnxDASGCardFPGATotBytesSentL32=tmnxDASGCardFPGATotBytesSentL32, tmnxDAHttpServerOperState=tmnxDAHttpServerOperState, tmnxDAObjs=tmnxDAObjs, tmnxDAGrpBytesFromCacheL32=tmnxDAGrpBytesFromCacheL32, tmnxDAGrpObjectByteCount=tmnxDAGrpObjectByteCount, tmnxDADCIntfDecodeErrors=tmnxDADCIntfDecodeErrors, tmnxDAIsmLinkArpTableLastChanged=tmnxDAIsmLinkArpTableLastChanged, tmnxDAGrpObjectsFromCache=tmnxDAGrpObjectsFromCache, tmnxDAHttpIngestXferTimeouts=tmnxDAHttpIngestXferTimeouts, tmnxDASGCardTCPConnEstab=tmnxDASGCardTCPConnEstab, tmnxDAIsmLinkArpAddress=tmnxDAIsmLinkArpAddress, tmnxDAHttpIngest4XXCountRecd=tmnxDAHttpIngest4XXCountRecd, tmnxDAHttpLastChanged=tmnxDAHttpLastChanged, tmnxDADCIntfWeight=tmnxDADCIntfWeight, tmnxDADCIntfResMsgRxCountL32=tmnxDADCIntfResMsgRxCountL32, tmnxDAIsmLinkAddrType=tmnxDAIsmLinkAddrType, tmnxDAHttpIngestXferCompletedH32=tmnxDAHttpIngestXferCompletedH32, tmnxDASGCardECCBlockFailures=tmnxDASGCardECCBlockFailures, tmnxDACompliances=tmnxDACompliances, tmnxDAIsmLinkName=tmnxDAIsmLinkName, tmnxDAGrpAdminState=tmnxDAGrpAdminState, tmnxDAHttpIngest5XXCountRecdL32=tmnxDAHttpIngest5XXCountRecdL32, tmnxDAGrpOrigSvrNumObjFailedL32=tmnxDAGrpOrigSvrNumObjFailedL32, tmnxDAHttpEntry=tmnxDAHttpEntry, tmnxDAHttpServerXferCompletedH32=tmnxDAHttpServerXferCompletedH32, tmnxDADCIntfInterval=tmnxDADCIntfInterval, tmnxDAGrpDCIdleTimeout=tmnxDAGrpDCIdleTimeout, tmnxDASGCardNumber=tmnxDASGCardNumber, tmnxDAHttpIngestIsmLinkName=tmnxDAHttpIngestIsmLinkName, tmnxDAStRouteTable=tmnxDAStRouteTable, tmnxDASGCardFPGATotBytesSent=tmnxDASGCardFPGATotBytesSent, tmnxDAHttpServerValidRequests=tmnxDAHttpServerValidRequests, tmnxDASGCardTCPRetriesL32=tmnxDASGCardTCPRetriesL32, tmnxDAIsmLinkArpMacAddr=tmnxDAIsmLinkArpMacAddr, tmnxDASGCardTotNumTCPConn=tmnxDASGCardTotNumTCPConn, tmnxDAHttpServerHostNotSuppted=tmnxDAHttpServerHostNotSuppted, tmnxDAGrpDCAdminState=tmnxDAGrpDCAdminState, tmnxDAIsmLinkRowStatus=tmnxDAIsmLinkRowStatus, tmnxDAGrpOrigSvrIPAddress=tmnxDAGrpOrigSvrIPAddress, tmnxDAGrpObjectsFromCacheL32=tmnxDAGrpObjectsFromCacheL32, tmnxDAGrpOrigSvrTable=tmnxDAGrpOrigSvrTable, tmnxDADCIntfOperState=tmnxDADCIntfOperState, tmnxDAHttpServer1XXCountSentH32=tmnxDAHttpServer1XXCountSentH32, tmnxDAGrpObjectsNotFromCacheH32=tmnxDAGrpObjectsNotFromCacheH32, tmnxDASGCardUsedStorageCpctyL32=tmnxDASGCardUsedStorageCpctyL32, tmnxDASGCardFPGATotBytesRecdL32=tmnxDASGCardFPGATotBytesRecdL32, tmnxDAGrpOrigSvrNumObjDelvred=tmnxDAGrpOrigSvrNumObjDelvred, tmnxDAGrpObjectsFromCacheH32=tmnxDAGrpObjectsFromCacheH32, tmnxDAGrpOrigSvrNumObjFailed=tmnxDAGrpOrigSvrNumObjFailed, tmnxDAIsmLinkEntry=tmnxDAIsmLinkEntry, tmnxDADCIntfIdleTime=tmnxDADCIntfIdleTime, tmnxDASGCardFPGATotPktsSentL32=tmnxDASGCardFPGATotPktsSentL32, tmnxDASGCardTCPConnEstabH32=tmnxDASGCardTCPConnEstabH32, tmnxDAHttpServerXferCompletedL32=tmnxDAHttpServerXferCompletedL32, tmnxDADCIntfPingReqTxCount=tmnxDADCIntfPingReqTxCount, tmnxDASGCardFPGATotBytesSentH32=tmnxDASGCardFPGATotBytesSentH32, tmnxDAGrpBytesFromCacheH32=tmnxDAGrpBytesFromCacheH32, tmnxDAGrpDCAuthCacheMissL32=tmnxDAGrpDCAuthCacheMissL32, tmnxDAGrpLastChanged=tmnxDAGrpLastChanged, tmnxDADCIntfReqMsgTxCount=tmnxDADCIntfReqMsgTxCount, tmnxDADCIntfConnectionBounce=tmnxDADCIntfConnectionBounce, tmnxDADCIntfIPAddress=tmnxDADCIntfIPAddress, tmnxDAGrpOrigSvrNumObjDelvredL32=tmnxDAGrpOrigSvrNumObjDelvredL32, tmnxDAGrpServerGroupIndex=tmnxDAGrpServerGroupIndex, tmnxDAGrpBytesNotFromCache=tmnxDAGrpBytesNotFromCache, tmnxDASGCardTCPFarEndClosedL32=tmnxDASGCardTCPFarEndClosedL32, tmnxDASGCardRemStorageCpctyL32=tmnxDASGCardRemStorageCpctyL32, tmnxDAHttpIngest5XXCountRecd=tmnxDAHttpIngest5XXCountRecd, tmnxDASGCardRemStorageCpctyH32=tmnxDASGCardRemStorageCpctyH32, tmnxDAHttpServerXferInProg=tmnxDAHttpServerXferInProg, tmnxDADCBtStSvrRowStatus=tmnxDADCBtStSvrRowStatus, tmnxDADCBtStSvrTableLastChanged=tmnxDADCBtStSvrTableLastChanged, tmnxDASGCardTCPConnClosedL32=tmnxDASGCardTCPConnClosedL32, tmnxDAStRouteMetric=tmnxDAStRouteMetric, tmnxDASGCardTCPConnEstabL32=tmnxDASGCardTCPConnEstabL32, tmnxDAHttpServerInvalidRequests=tmnxDAHttpServerInvalidRequests, tmnxDAHttpServer1XXCountSentL32=tmnxDAHttpServer1XXCountSentL32, tmnxDAHttpIngestXferFailed=tmnxDAHttpIngestXferFailed, tmnxDAGrpOrigSvrEntry=tmnxDAGrpOrigSvrEntry, tmnxDASGCardNumberOfURIs=tmnxDASGCardNumberOfURIs, tmnxDAGrpBytesFromCache=tmnxDAGrpBytesFromCache, tmnxDADCBtStSvrAddrType=tmnxDADCBtStSvrAddrType, tmnxDAHttpServer1XXCountSent=tmnxDAHttpServer1XXCountSent, tmnxDAHttpServerXferTimeouts=tmnxDAHttpServerXferTimeouts, tmnxDAHttpServer2XXCountSentH32=tmnxDAHttpServer2XXCountSentH32, tmnxDAGrpNumberOfOriginsH32=tmnxDAGrpNumberOfOriginsH32, tmnxDAHttpServerValidRequestsL32=tmnxDAHttpServerValidRequestsL32, tmnxDAHttpServer5XXCountSentL32=tmnxDAHttpServer5XXCountSentL32, tmnxDAHttpIngest1XXCountRecdL32=tmnxDAHttpIngest1XXCountRecdL32, tmnxDAGrpObjectByteCountL32=tmnxDAGrpObjectByteCountL32, tmnxDADCIntfNoResponse=tmnxDADCIntfNoResponse, tmnxDAGrpDCIsmLinkName=tmnxDAGrpDCIsmLinkName, tmnxDAGrpBytesNotFromCacheL32=tmnxDAGrpBytesNotFromCacheL32, tmnxDADCBtStSvrIndex=tmnxDADCBtStSvrIndex, tmnxDADCIntfTable=tmnxDADCIntfTable, tmnxDAGrpOrigSvrNumObjDelvredH32=tmnxDAGrpOrigSvrNumObjDelvredH32, tmnxDAHttpTable=tmnxDAHttpTable, tmnxDAGrpDCAuthCache=tmnxDAGrpDCAuthCache, tmnxDAHttpIngest4XXCountRecdL32=tmnxDAHttpIngest4XXCountRecdL32, tmnxDADCIntfFailedSessStups=tmnxDADCIntfFailedSessStups, tmnxDAHttpServerIdleTimeout=tmnxDAHttpServerIdleTimeout, tmnxDAIsmLinkOperState=tmnxDAIsmLinkOperState, tmnxDADCIntfTimeToLive=tmnxDADCIntfTimeToLive, tmnxDAGrpDCDeniedAuthL32=tmnxDAGrpDCDeniedAuthL32, tmnxDASGCardNumberOfOrigins=tmnxDASGCardNumberOfOrigins, tmnxDAGrpTable=tmnxDAGrpTable, tmnxDAHttpIngestXferInProg=tmnxDAHttpIngestXferInProg, tmnxDADCIntfPingResRxCount=tmnxDADCIntfPingResRxCount, tmnxDAIsmLinkArpType=tmnxDAIsmLinkArpType, tmnxDAIsmLinkMacAddress=tmnxDAIsmLinkMacAddress, tmnxDAHttpIngest1XXCountRecd=tmnxDAHttpIngest1XXCountRecd, tmnxDASGCardTCPAckTimeOutH32=tmnxDASGCardTCPAckTimeOutH32)
mibBuilder.exportSymbols("TIMETRA-DA-MIB", tmnxDAGroups=tmnxDAGroups, tmnxDAIsmLinkLastChanged=tmnxDAIsmLinkLastChanged, tmnxDADCBtStSvrAddress=tmnxDADCBtStSvrAddress, tmnxDASGCardTCPFarEndClosed=tmnxDASGCardTCPFarEndClosed, tmnxDAIsmLinkArpTable=tmnxDAIsmLinkArpTable, tmnxDAGrpNumberOfOrigins=tmnxDAGrpNumberOfOrigins, tmnxDAGrpEntry=tmnxDAGrpEntry, tmnxDAGrpName=tmnxDAGrpName, tmnxDAGrpDCConnRetryTimer=tmnxDAGrpDCConnRetryTimer, tmnxDANotifyPrefix=tmnxDANotifyPrefix, tmnxDAHttpServer3XXCountSent=tmnxDAHttpServer3XXCountSent, tmnxDAIsmLinkIpMtu=tmnxDAIsmLinkIpMtu, tmnxDASGCardFPGATotPktsSent=tmnxDASGCardFPGATotPktsSent, tmnxDAHttpServerMethodNotSuppted=tmnxDAHttpServerMethodNotSuppted, tmnxDAGrpDCAuthCacheHitL32=tmnxDAGrpDCAuthCacheHitL32, tmnxDASGCardFPGAOverflowErrors=tmnxDASGCardFPGAOverflowErrors, tmnxDADCIntfFQDN=tmnxDADCIntfFQDN, tmnxDADCBtStSvrLastChanged=tmnxDADCBtStSvrLastChanged, tmnxDADCIntfRemoteClose=tmnxDADCIntfRemoteClose, tmnxDAIsmLinkArpLastChanged=tmnxDAIsmLinkArpLastChanged, tmnxDAHttpTableLastChanged=tmnxDAHttpTableLastChanged, tmnxDASGCardNumberOfAssets=tmnxDASGCardNumberOfAssets)
