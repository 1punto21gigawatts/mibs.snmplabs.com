#
# PySNMP MIB module MY-ENTITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-ENTITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, iso, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, IpAddress, ObjectIdentity, TimeTicks, Gauge32, NotificationType, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "IpAddress", "ObjectIdentity", "TimeTicks", "Gauge32", "NotificationType", "ModuleIdentity", "Unsigned32")
MacAddress, TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
myEntityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21))
myEntityMIB.setRevisions(('2002-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: myEntityMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: myEntityMIB.setLastUpdated('200203200000Z')
if mibBuilder.loadTexts: myEntityMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: myEntityMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: myEntityMIB.setDescription('This module defines my entity mibs.')
myDeviceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1))
myDeviceMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDeviceMaxNumber.setStatus('current')
if mibBuilder.loadTexts: myDeviceMaxNumber.setDescription('Max number of devices of the system permitting.')
myDeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2), )
if mibBuilder.loadTexts: myDeviceInfoTable.setStatus('current')
if mibBuilder.loadTexts: myDeviceInfoTable.setDescription('List of devices.')
myDeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1), ).setIndexNames((0, "MY-ENTITY-MIB", "myDeviceInfoIndex"))
if mibBuilder.loadTexts: myDeviceInfoEntry.setStatus('current')
if mibBuilder.loadTexts: myDeviceInfoEntry.setDescription('Entry of a device information.')
myDeviceInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDeviceInfoIndex.setStatus('current')
if mibBuilder.loadTexts: myDeviceInfoIndex.setDescription('An unique value of each devices in system. Its value ranges between 1 and the value of the object myDeviceNumber.')
myDeviceInfoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDeviceInfoDescr.setStatus('current')
if mibBuilder.loadTexts: myDeviceInfoDescr.setDescription('Description of the device.')
myDeviceInfoSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDeviceInfoSlotNumber.setStatus('current')
if mibBuilder.loadTexts: myDeviceInfoSlotNumber.setDescription('The number of slots exists on the device.')
myDevicePowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rpsNoLink", 1), ("rpsLinkAndNoPower", 2), ("rpsLinkAndReadyForPower", 3), ("rpsLinkAndPower", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDevicePowerStatus.setStatus('current')
if mibBuilder.loadTexts: myDevicePowerStatus.setDescription('The power status of device')
myDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDeviceMacAddress.setStatus('current')
if mibBuilder.loadTexts: myDeviceMacAddress.setDescription('The physical address of device')
myDevicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDevicePriority.setStatus('current')
if mibBuilder.loadTexts: myDevicePriority.setDescription('The device priority value')
myDeviceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDeviceAlias.setStatus('current')
if mibBuilder.loadTexts: myDeviceAlias.setDescription('Alias of the device.')
myDeviceSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDeviceSWVersion.setStatus('current')
if mibBuilder.loadTexts: myDeviceSWVersion.setDescription('Description of the device.')
myDeviceHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDeviceHWVersion.setStatus('current')
if mibBuilder.loadTexts: myDeviceHWVersion.setDescription('Description of the device.')
mySlotInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 3), )
if mibBuilder.loadTexts: mySlotInfoTable.setStatus('current')
if mibBuilder.loadTexts: mySlotInfoTable.setDescription('a list of module Entries.')
mySlotInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 3, 1), ).setIndexNames((0, "MY-ENTITY-MIB", "mySlotInfoDeviceIndex"), (0, "MY-ENTITY-MIB", "mySlotInfoIndex"))
if mibBuilder.loadTexts: mySlotInfoEntry.setStatus('current')
if mibBuilder.loadTexts: mySlotInfoEntry.setDescription('Entry containing status information about one slot.')
mySlotInfoDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySlotInfoDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: mySlotInfoDeviceIndex.setDescription('The index of the device, that the slot exists on.')
mySlotInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySlotInfoIndex.setStatus('current')
if mibBuilder.loadTexts: mySlotInfoIndex.setDescription('A unique value for each slot exist on the device specified by the field mySlotInfoDeviceIndex, Its value ranges between 1 and the value of the solt num of this device.')
mySlotModuleInfoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySlotModuleInfoDescr.setStatus('current')
if mibBuilder.loadTexts: mySlotModuleInfoDescr.setDescription("Descriptions for the module in the Slot. just like 's1902m' etc. It is a unique value for identifing a kind of module.This value will be null string if slot is empty is NULL")
mySlotInfoPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySlotInfoPortNumber.setStatus('current')
if mibBuilder.loadTexts: mySlotInfoPortNumber.setDescription('Number of ports on this slot.This value will be 0 if slot is empty')
mySlotInfoPortMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySlotInfoPortMaxNumber.setStatus('current')
if mibBuilder.loadTexts: mySlotInfoPortMaxNumber.setDescription('Max number of ports on this slot has possibly.')
mySlotInfoDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySlotInfoDesc.setStatus('current')
if mibBuilder.loadTexts: mySlotInfoDesc.setDescription('Description of the slot,the same as the pannel show.')
myModuleTempStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 4), )
if mibBuilder.loadTexts: myModuleTempStateTable.setStatus('current')
if mibBuilder.loadTexts: myModuleTempStateTable.setDescription('Table of entrance to module temperature state table.')
myModuleTempStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 4, 1), ).setIndexNames((0, "MY-ENTITY-MIB", "myModuleTempStateDeviceIndex"), (0, "MY-ENTITY-MIB", "myModuleTempStateIndex"))
if mibBuilder.loadTexts: myModuleTempStateEntry.setStatus('current')
if mibBuilder.loadTexts: myModuleTempStateEntry.setDescription('Entrance to module temperature state.')
myModuleTempStateDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myModuleTempStateDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: myModuleTempStateDeviceIndex.setDescription('The index number for the device which the module is in.')
myModuleTempStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myModuleTempStateIndex.setStatus('current')
if mibBuilder.loadTexts: myModuleTempStateIndex.setDescription(' The module index number, ranging from 1 to the maximal slot number.')
myModuleTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tempNormal", 1), ("tempWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myModuleTempState.setStatus('current')
if mibBuilder.loadTexts: myModuleTempState.setDescription(' The module temperature state.')
myPowerStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 5), )
if mibBuilder.loadTexts: myPowerStateTable.setStatus('current')
if mibBuilder.loadTexts: myPowerStateTable.setDescription('Table of entrance to the power state.')
myPowerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 5, 1), ).setIndexNames((0, "MY-ENTITY-MIB", "myPowerStateDeviceIndex"), (0, "MY-ENTITY-MIB", "myPowerStateIndex"))
if mibBuilder.loadTexts: myPowerStateEntry.setStatus('current')
if mibBuilder.loadTexts: myPowerStateEntry.setDescription('Entrance to the power state.')
myPowerStateDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPowerStateDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: myPowerStateDeviceIndex.setDescription('The index number for the device which the power is in.')
myPowerStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPowerStateIndex.setStatus('current')
if mibBuilder.loadTexts: myPowerStateIndex.setDescription('The power index number.')
myPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noLink", 1), ("linkAndNoPower", 2), ("linkAndReadyForPower", 3), ("linkAndPower", 4), ("linkAndPowerAbnormal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPowerState.setStatus('current')
if mibBuilder.loadTexts: myPowerState.setDescription('Power state.')
myPowerStatePowerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myPowerStatePowerDescr.setStatus('current')
if mibBuilder.loadTexts: myPowerStatePowerDescr.setDescription('Description of the power.')
myFanStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 6), )
if mibBuilder.loadTexts: myFanStateTable.setStatus('current')
if mibBuilder.loadTexts: myFanStateTable.setDescription('Table of entrance to the fan state.')
myFanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 6, 1), ).setIndexNames((0, "MY-ENTITY-MIB", "myFanStateDeviceIndex"), (0, "MY-ENTITY-MIB", "myFanStateIndex"))
if mibBuilder.loadTexts: myFanStateEntry.setStatus('current')
if mibBuilder.loadTexts: myFanStateEntry.setDescription('Entrance to the fan state.')
myFanStateDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myFanStateDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: myFanStateDeviceIndex.setDescription('The index number for the device which the fan is in.')
myFanStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myFanStateIndex.setStatus('current')
if mibBuilder.loadTexts: myFanStateIndex.setDescription('Fan index number.')
myFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("work", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myFanState.setStatus('current')
if mibBuilder.loadTexts: myFanState.setDescription('Fan state.')
myFanStateFanDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myFanStateFanDescr.setStatus('current')
if mibBuilder.loadTexts: myFanStateFanDescr.setDescription('Description of the fan.')
myEntityMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 2))
myEntityStateChgDesc = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: myEntityStateChgDesc.setStatus('current')
if mibBuilder.loadTexts: myEntityStateChgDesc.setDescription('The description of entity change.')
myEntityStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 2, 2)).setObjects(("MY-ENTITY-MIB", "myEntityStateChgDesc"))
if mibBuilder.loadTexts: myEntityStatusChange.setStatus('current')
if mibBuilder.loadTexts: myEntityStatusChange.setDescription('while status of the entity changed, then this trap will be sent.')
myTemperatureWarningDesc = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: myTemperatureWarningDesc.setStatus('current')
if mibBuilder.loadTexts: myTemperatureWarningDesc.setDescription('Description on the temperature state changes.')
myTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 2, 4)).setObjects(("MY-ENTITY-MIB", "myTemperatureWarningDesc"))
if mibBuilder.loadTexts: myTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: myTemperatureWarning.setDescription(' When the temperature state of this module changes, this Trap will be sent.')
myDeviceMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3))
myDeviceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 1))
myDeviceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2))
myDeviceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 1, 1)).setObjects(("MY-ENTITY-MIB", "myDeviceInfoMIBGroup"), ("MY-ENTITY-MIB", "myModuleInfoMIBGroup"), ("MY-ENTITY-MIB", "myOptionalDevInfoMIBGroup"), ("MY-ENTITY-MIB", "myEntityChgDescGroup"), ("MY-ENTITY-MIB", "myDeviceMIBNotificationGroup"), ("MY-ENTITY-MIB", "myModuleTempStateGroup"), ("MY-ENTITY-MIB", "myPowerStateGroup"), ("MY-ENTITY-MIB", "myFanStateGroup"), ("MY-ENTITY-MIB", "myTemperatureWarningDescGroup"), ("MY-ENTITY-MIB", "myTemperatureWarningGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myDeviceMIBCompliance = myDeviceMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: myDeviceMIBCompliance.setDescription('The compliance statement for entities which implement the My Device MIB')
myDeviceInfoMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 1)).setObjects(("MY-ENTITY-MIB", "myDeviceMaxNumber"), ("MY-ENTITY-MIB", "myDeviceInfoIndex"), ("MY-ENTITY-MIB", "myDeviceInfoDescr"), ("MY-ENTITY-MIB", "myDeviceInfoSlotNumber"), ("MY-ENTITY-MIB", "myDevicePowerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myDeviceInfoMIBGroup = myDeviceInfoMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myDeviceInfoMIBGroup.setDescription('A collection of objects providing device information to a My agent.')
myOptionalDevInfoMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 2)).setObjects(("MY-ENTITY-MIB", "myDeviceMacAddress"), ("MY-ENTITY-MIB", "myDevicePriority"), ("MY-ENTITY-MIB", "myDeviceAlias"), ("MY-ENTITY-MIB", "myDeviceSWVersion"), ("MY-ENTITY-MIB", "myDeviceHWVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myOptionalDevInfoMIBGroup = myOptionalDevInfoMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myOptionalDevInfoMIBGroup.setDescription('A collection of objects providing optional device information to a My agent.')
myModuleInfoMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 3)).setObjects(("MY-ENTITY-MIB", "mySlotInfoDeviceIndex"), ("MY-ENTITY-MIB", "mySlotInfoIndex"), ("MY-ENTITY-MIB", "mySlotModuleInfoDescr"), ("MY-ENTITY-MIB", "mySlotInfoPortNumber"), ("MY-ENTITY-MIB", "mySlotInfoPortMaxNumber"), ("MY-ENTITY-MIB", "mySlotInfoDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myModuleInfoMIBGroup = myModuleInfoMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myModuleInfoMIBGroup.setDescription('A collection of objects providing module information to a My agent.')
myEntityChgDescGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 4)).setObjects(("MY-ENTITY-MIB", "myEntityStateChgDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myEntityChgDescGroup = myEntityChgDescGroup.setStatus('current')
if mibBuilder.loadTexts: myEntityChgDescGroup.setDescription("Objects that providing a literal description of entity's change.")
myDeviceMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 5)).setObjects(("MY-ENTITY-MIB", "myEntityStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myDeviceMIBNotificationGroup = myDeviceMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: myDeviceMIBNotificationGroup.setDescription('The collection of notifications which used to inform entity general status information')
myModuleTempStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 6)).setObjects(("MY-ENTITY-MIB", "myModuleTempStateDeviceIndex"), ("MY-ENTITY-MIB", "myModuleTempStateIndex"), ("MY-ENTITY-MIB", "myModuleTempState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myModuleTempStateGroup = myModuleTempStateGroup.setStatus('current')
if mibBuilder.loadTexts: myModuleTempStateGroup.setDescription('Collection of information on temperature state.')
myPowerStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 7)).setObjects(("MY-ENTITY-MIB", "myPowerStateDeviceIndex"), ("MY-ENTITY-MIB", "myPowerStateIndex"), ("MY-ENTITY-MIB", "myPowerState"), ("MY-ENTITY-MIB", "myPowerStatePowerDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myPowerStateGroup = myPowerStateGroup.setStatus('current')
if mibBuilder.loadTexts: myPowerStateGroup.setDescription('Collection of information on power state.')
myFanStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 8)).setObjects(("MY-ENTITY-MIB", "myFanStateDeviceIndex"), ("MY-ENTITY-MIB", "myFanStateIndex"), ("MY-ENTITY-MIB", "myFanState"), ("MY-ENTITY-MIB", "myFanStateFanDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myFanStateGroup = myFanStateGroup.setStatus('current')
if mibBuilder.loadTexts: myFanStateGroup.setDescription('Collection of information on fan state.')
myTemperatureWarningDescGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 9)).setObjects(("MY-ENTITY-MIB", "myTemperatureWarningDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myTemperatureWarningDescGroup = myTemperatureWarningDescGroup.setStatus('current')
if mibBuilder.loadTexts: myTemperatureWarningDescGroup.setDescription('Collection of description on temperature change notification.')
myTemperatureWarningGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 21, 3, 2, 10)).setObjects(("MY-ENTITY-MIB", "myTemperatureWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myTemperatureWarningGroup = myTemperatureWarningGroup.setStatus('current')
if mibBuilder.loadTexts: myTemperatureWarningGroup.setDescription('Collection of temperature change notification.')
mibBuilder.exportSymbols("MY-ENTITY-MIB", myDeviceHWVersion=myDeviceHWVersion, mySlotInfoDesc=mySlotInfoDesc, myDeviceMIBConformance=myDeviceMIBConformance, myDeviceSWVersion=myDeviceSWVersion, myEntityMIBTraps=myEntityMIBTraps, mySlotInfoPortNumber=mySlotInfoPortNumber, myFanStateEntry=myFanStateEntry, myDeviceInfoDescr=myDeviceInfoDescr, myFanStateFanDescr=myFanStateFanDescr, myDeviceInfoIndex=myDeviceInfoIndex, mySlotInfoDeviceIndex=mySlotInfoDeviceIndex, myEntityStatusChange=myEntityStatusChange, myModuleInfoMIBGroup=myModuleInfoMIBGroup, myModuleTempState=myModuleTempState, myFanStateTable=myFanStateTable, PYSNMP_MODULE_ID=myEntityMIB, myFanStateGroup=myFanStateGroup, mySlotInfoEntry=mySlotInfoEntry, myPowerStateIndex=myPowerStateIndex, myDeviceMaxNumber=myDeviceMaxNumber, myDeviceMIBObjects=myDeviceMIBObjects, myModuleTempStateEntry=myModuleTempStateEntry, myDeviceInfoMIBGroup=myDeviceInfoMIBGroup, mySlotInfoPortMaxNumber=mySlotInfoPortMaxNumber, myPowerStateEntry=myPowerStateEntry, myEntityStateChgDesc=myEntityStateChgDesc, myPowerStateDeviceIndex=myPowerStateDeviceIndex, myDeviceMIBNotificationGroup=myDeviceMIBNotificationGroup, myModuleTempStateGroup=myModuleTempStateGroup, myPowerStateGroup=myPowerStateGroup, myTemperatureWarningDesc=myTemperatureWarningDesc, myModuleTempStateIndex=myModuleTempStateIndex, myEntityChgDescGroup=myEntityChgDescGroup, myFanStateDeviceIndex=myFanStateDeviceIndex, myOptionalDevInfoMIBGroup=myOptionalDevInfoMIBGroup, myDeviceMIBCompliance=myDeviceMIBCompliance, myDeviceInfoEntry=myDeviceInfoEntry, myDeviceMIBCompliances=myDeviceMIBCompliances, myFanStateIndex=myFanStateIndex, myModuleTempStateDeviceIndex=myModuleTempStateDeviceIndex, myFanState=myFanState, mySlotInfoIndex=mySlotInfoIndex, myModuleTempStateTable=myModuleTempStateTable, myTemperatureWarning=myTemperatureWarning, myTemperatureWarningGroup=myTemperatureWarningGroup, myPowerStatePowerDescr=myPowerStatePowerDescr, myDeviceMacAddress=myDeviceMacAddress, mySlotInfoTable=mySlotInfoTable, myDeviceInfoSlotNumber=myDeviceInfoSlotNumber, myDeviceAlias=myDeviceAlias, myEntityMIB=myEntityMIB, myPowerStateTable=myPowerStateTable, mySlotModuleInfoDescr=mySlotModuleInfoDescr, myDeviceMIBGroups=myDeviceMIBGroups, myDevicePriority=myDevicePriority, myDevicePowerStatus=myDevicePowerStatus, myTemperatureWarningDescGroup=myTemperatureWarningDescGroup, myPowerState=myPowerState, myDeviceInfoTable=myDeviceInfoTable)
