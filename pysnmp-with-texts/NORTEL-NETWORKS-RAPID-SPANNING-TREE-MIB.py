#
# PySNMP MIB module NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
Timeout, dot1dBaseBridgeAddress, dot1dStpPort, BridgeId, dot1dStpDesignatedRoot = mibBuilder.importSymbols("BRIDGE-MIB", "Timeout", "dot1dBaseBridgeAddress", "dot1dStpPort", "BridgeId", "dot1dStpDesignatedRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter64, Gauge32, Counter32, ObjectIdentity, ModuleIdentity, Bits, Unsigned32, IpAddress, Integer32, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter64", "Gauge32", "Counter32", "ObjectIdentity", "ModuleIdentity", "Bits", "Unsigned32", "IpAddress", "Integer32", "MibIdentifier", "NotificationType")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
nnRapidSpanningTreeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 4))
nnRapidSpanningTreeMib.setRevisions(('2004-02-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nnRapidSpanningTreeMib.setRevisionsDescriptions(('v001: Initial version.',))
if mibBuilder.loadTexts: nnRapidSpanningTreeMib.setLastUpdated('200402240000Z')
if mibBuilder.loadTexts: nnRapidSpanningTreeMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: nnRapidSpanningTreeMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: nnRapidSpanningTreeMib.setDescription("Nortel Networks Rapid Spanning-Tree MIB Copyright 2003 Nortel Networks, Inc. All rights reserved. This Nortel Networks SNMP Management Information Base Specification embodies Nortel Networks' confidential and proprietary intellectual property. Nortel Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
nnRstNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 4, 0))
nnRstObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 4, 1))
nnRstDot1d = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1))
nnRstDot1dScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 1))
nnRstDot1dStpVersion = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnRstDot1dStpVersion.setReference('IEEE 802.1w clause 14.8.1, 17.12, 17.16.1')
if mibBuilder.loadTexts: nnRstDot1dStpVersion.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpVersion.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stpCompatible(0)' indicates the Spanning Tree Protocol specified in IEEE 802.1D and 'rstp(2)' indicates the Rapid Spanning Tree Protocol specified in IEEE 802.1w. New value may be defined as future versions of the protocol become available.")
nnRstDot1dStpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnRstDot1dStpTxHoldCount.setReference('IEEE 802.1w clause 17.16.6')
if mibBuilder.loadTexts: nnRstDot1dStpTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate.')
nnRstDot1dStpPathCostDefault = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp8021d1998", 1), ("stp8021t2001", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnRstDot1dStpPathCostDefault.setReference('IEEE 802.1D & 802.1t Table 8-5')
if mibBuilder.loadTexts: nnRstDot1dStpPathCostDefault.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPathCostDefault.setDescription('The version of the Spanning Tree default Path Costs that are to be used by this Bridge. A value of 8021d1998(1) uses the 16-bit default Path Costs from IEEE Std. 802.1D-1998. A value of stp8021t2001(2) uses the 32-bit default Path Costs from IEEE Std. 802.1t.')
nnRstDot1dStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 2), )
if mibBuilder.loadTexts: nnRstDot1dStpPortTable.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPortTable.setDescription('A table that contains port-specific Rapid Spanning Tree information.')
nnRstDot1dStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: nnRstDot1dStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPortEntry.setDescription('A list of Rapid Spanning Tree information maintained by each port.')
nnRstDot1dStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnRstDot1dStpPortProtocolMigration.setReference('IEEE 802.1w clause 14.8.2.4, 17.18.10, 17.26')
if mibBuilder.loadTexts: nnRstDot1dStpPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing TRUE(1) to this object forces this port to transmit RSTP BPDUs. Any other operation on this object has no effect and it always returns FALSE(2) when read.')
nnRstDot1dStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnRstDot1dStpPortAdminEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.3')
if mibBuilder.loadTexts: nnRstDot1dStpPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPortAdminEdgePort.setDescription('The administrative value of the Edge Port parameter. A value of TRUE(1) indicates that this port should be assumed as an edge-port and a value of FALSE(2) indicates that this port should be assumed as a non-edge-port.')
nnRstDot1dStpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1dStpPortOperEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.4')
if mibBuilder.loadTexts: nnRstDot1dStpPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPortOperEdgePort.setDescription('The operational value of the Edge Port parameter. The object is initialized to the value of nnRstDot1dStpPortAdminEdgePort and is set FALSE on reception of a BPDU.')
nnRstDot1dStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnRstDot1dStpPortAdminPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: nnRstDot1dStpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
nnRstDot1dStpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1dStpPortOperPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: nnRstDot1dStpPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment attached to this port. It indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the nnRstDot1dStpPortAdminPointToPoint object.')
nnRstDot1dStpPortParticipating = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnRstDot1dStpPortParticipating.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1dStpPortParticipating.setDescription('This object specifies whether a port is participating in the 802.1w protocol.')
nnRstDot1w = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2))
nnRstDot1wScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 1))
nnRstDot1wRstpUpCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wRstpUpCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wRstpUpCount.setDescription('The number of times RSTP Module has been enabled. A Trap is generated on the occurence of this event.')
nnRstDot1wRstpDownCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wRstpDownCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wRstpDownCount.setDescription('The number of times RSTP Module has been disabled. A Trap is generated on the occurence of this event.')
nnRstDot1wNewRootIdCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wNewRootIdCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wNewRootIdCount.setDescription('The number of times this Bridge has detected a Root Identifier change. A Trap is generated on the occurence of this event.')
nnRstDot1wPortRoleSelSmState = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortRoleSelSmState.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortRoleSelSmState.setDescription("This indicates the current state of the Port Role Selection State Machine. This object will hold the value 'initbridge' when the Port Role Selection state machine is in the INIT_BRIDGE state and the value of 'roleselection' when the state machine is in the ROLE_SELECTION state.")
nnRstDot1wOldDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wOldDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wOldDesignatedRoot.setDescription('The bridge identifier of the old root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. ')
nnRstDot1wPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2), )
if mibBuilder.loadTexts: nnRstDot1wPortTable.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortTable.setDescription('This is a table that is an extension to the nnRstDot1dStpPortTable. This contains object(s) that are Port-based.')
nnRstDot1wPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1), ).setIndexNames((0, "NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB", "nnRstDot1wPort"))
if mibBuilder.loadTexts: nnRstDot1wPortEntry.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortEntry.setDescription('Each entry in this table is for each port present in the system. This table is indexed by the nnRstDot1wPort.')
nnRstDot1wPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: nnRstDot1wPort.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPort.setDescription('A unique value, greater than zero, indicating the Port number.')
nnRstDot1wPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabledPort", 0), ("alternatePort", 1), ("backupPort", 2), ("rootPort", 3), ("designatedPort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortRole.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortRole.setDescription('This indicates the current Port Role assumed by this Port.')
nnRstDot1wPortOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortOperVersion.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortOperVersion.setDescription('This indicates whether the Port is operationally in the Rstp mode or the Stp-compatible mode i.e., whether the Port is transmitting RST BPDUs or Config/TCN BPDUs.')
nnRstDot1wPortInfoSmState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 0), ("aged", 1), ("update", 2), ("superior", 3), ("repeat", 4), ("agreement", 5), ("present", 6), ("receive", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortInfoSmState.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortInfoSmState.setDescription("This indicates the current state of the Port Information state machine. This object will hold the value 'disabled' when the Port Information state machine is in the DISABLED state, the value 'aged' when the state machine is in the AGED state, the value 'update' when the state machine is in the UPDATE state, the value 'superior' when the state machine is in the SUPERIOR state, the value 'repeat' when the state machine is in the REPEAT state, the value 'agreement' when the state machine is in the AGREEMENT state, the value 'present' when the state machine is in the CURRENT state and the value 'receive' when the state machine is in the RECEIVE state.")
nnRstDot1wPortMigSmState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 0), ("sendrstp", 1), ("sendingrstp", 2), ("sendstp", 3), ("sendingstp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortMigSmState.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortMigSmState.setDescription("This indicates the current state of the Port Protocol Migration state machine. This object will hold the value 'init' when the Protocol Migration state machine is in the INIT state, the value 'sendrstp' when the state machine is in the SEND_RSTP state, the value 'sendingrstp' when the state machine is in the SENDING_RSTP state, the value 'sendstp' when the state machine is in the SEND_STP state and the value 'sendingstp' when the state machine is in the SENDING_STP state.")
nnRstDot1wPortRoleTransSmState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("rootport", 3), ("designatedport", 4), ("backupport", 5), ("rootproposed", 6), ("rootagreed", 7), ("reroot", 8), ("rootforward", 9), ("rootlearn", 10), ("rerooted", 11), ("designatedpropose", 12), ("designatedsynced", 13), ("designatedretired", 14), ("designatedforward", 15), ("designatedlearn", 16), ("designatedlisten", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortRoleTransSmState.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortRoleTransSmState.setDescription("This indicates the current state of the Port Role Transition state machine. This object will hold the value 'init' when the Port Role Transition state machine is in the INIT state, the value 'blockport' when the state machine is in the BLOCK_PORT state, the value 'blockedport' when the state machine is in the BLOCKED_PORT state, the value 'rootport' when the state machine is in the ROOT_PORT state, the value 'desgport' when the state machine is in the DESIGNATED_PORT state, the value 'backupport' when the state machine is in BACKUP_PORT state, the value 'rootproposed' when the state machine is in the ROOT_PROPOSED state, the value 'rootagreed' when the state machine is in the ROOT_AGREED state, the value 'reroot' when the state machine is in the REROOT state, the value 'rootforward' when the state machine is in the ROOT_FORWARD state, the value 'rootlearn' when the state machine is in the ROOT_LEARN state, the value 'rerooted' when the state machine is in the REROOTED state, the value 'designatedpropose' when the state machine is in the DESIGNATED_PROPOSE state, the value 'designatedsynced' when the state machine is in the DESIGNATED_SYNCED state, the value 'designatedretired' when the state machine is in the DESIGNATED_RETIRED state, the value 'designatedforward' when the state machine is in the DESIGNATED_FORWARD state, the value 'designatedlearn' when the state machine is in the DESIGNATED_LEARN state and the value 'designatedlisten' when the state machine is in the DESIGNATED_LISTEN state.")
nnRstDot1wPortStateTransSmState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortStateTransSmState.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortStateTransSmState.setDescription("This indicates the current state of the Port State Transition state machine. This object will hold the value 'discarding' when the Port State Transition state machine is in the DISCARDING state, the value 'learning' when the state machine is in the LEARNING state and the value 'forwarding' when the state machine is in the FORWARDING state.")
nnRstDot1wPortTopoChSmState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortTopoChSmState.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortTopoChSmState.setDescription("This indicates the current state of the Topology Change state machine. This object will hold the value 'init' when the Topology Change state machine is in the INIT state, the value 'inactive' when the state machine is in the INACTIVE state, the value 'active' when the state machine is in the ACTIVE state, the value 'detected' when the state machine is in the DETECTED state, the value 'notifiedtcn' when the state machine is in the NOTIFIED_TCN state, the value 'notifiedtc' when the state machine is in the NOTIFIED_TC state, the value 'propagating' state when the state machine is in the PROPAGATING state and the value 'acknowledged' when the state machine is in the ACKNOWLEDGED state.")
nnRstDot1wPortTxSmState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("transmitinit", 0), ("transmitperiodic", 1), ("transmitconfig", 2), ("transmittcn", 3), ("transmitrstp", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortTxSmState.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortTxSmState.setDescription("This indicates the current state of the Port Transmit state machine. This object will hold the value 'transmitinit' when the Port Transmit state machine is in the TRANSMIT_INIT state, the value 'transmitperiodic' when the state machine is in the TRANSMIT_PERIODIC state, the value 'transmitconfig' when the state machine is in the TRANSMIT_CONFIG state, the value 'transmittcn', when the state machine is in the TRANSMIT_TCN state, the value 'transmitrstp', when the state machine is in the TRANSMIT_RSTP state and the value 'idle' when the state machine is in the IDLE state.")
nnRstDot1wPortRxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortRxRstBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortRxRstBpduCount.setDescription('The number of RST BPDUs that have been received on this Port.')
nnRstDot1wPortRxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortRxConfigBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortRxConfigBpduCount.setDescription('The number of Config BPDUs that have been received on this Port.')
nnRstDot1wPortRxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortRxTcnBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortRxTcnBpduCount.setDescription('The number of TCN BPDUs that have been received on this Port.')
nnRstDot1wPortTxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortTxRstBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortTxRstBpduCount.setDescription('The number of RST BPDUs that have been transmitted by this Port.')
nnRstDot1wPortTxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortTxConfigBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortTxConfigBpduCount.setDescription('The number of Config BPDUs that have been transmitted by this Port.')
nnRstDot1wPortTxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortTxTcnBpduCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortTxTcnBpduCount.setDescription('The number of TCN BPDUs that have been transmitted by this Port.')
nnRstDot1wPortInvalidRstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortInvalidRstBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortInvalidRstBpduRxCount.setDescription('The number of invalid RSTP BPDUs that have been received on this Port. A Trap is generated on the occurence of this event.')
nnRstDot1wPortInvalidConfigBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortInvalidConfigBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortInvalidConfigBpduRxCount.setDescription('The number of invalid Configuration BPDUs that have been received on this Port. A Trap is generated on the occurence of this event.')
nnRstDot1wPortInvalidTcnBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortInvalidTcnBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortInvalidTcnBpduRxCount.setDescription('The number of invalid TCN BPDUs that have been received on this Port. A Trap is generated on the occurence of this event.')
nnRstDot1wPortProtocolMigrationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortProtocolMigrationCount.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortProtocolMigrationCount.setDescription('The number of times this Port has migrated from one STP protocol version to another. The relevant protocols are STP-COMPATIBLE and RSTP. A Trap is generated on the occurence of this event.')
nnRstDot1wPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 2, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstDot1wPortEffectivePortState.setStatus('current')
if mibBuilder.loadTexts: nnRstDot1wPortEffectivePortState.setDescription('The effective Operational state of the port. This object will be set to TRUE only when the port is operationally up in the interface manager and the force Port State for this port and specified port state is enabled. Otherwise this object is set to FALSE.')
nnRstNotificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3))
nnRstNotificationControlScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 1))
nnRstSetNotifications = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nnRstSetNotifications.setStatus('current')
if mibBuilder.loadTexts: nnRstSetNotifications.setDescription('This object is used to enable and disable specific RSTP traps. Currently the following are defined 0 - Notifications are not enabled. 1 - General Notifications like protocol up or down 2 - Exception Notifications like memory failure or buffer failure or port protocol migration or invalid packet rcvd in port 3 - All the above Notifications ')
nnRstGenNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstGenNotificationType.setStatus('current')
if mibBuilder.loadTexts: nnRstGenNotificationType.setDescription('The general events like none - none of the below values up - protocol UP, down - protocol DOWN')
nnRstErrNotificationType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("memfail", 1), ("bufffail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstErrNotificationType.setStatus('current')
if mibBuilder.loadTexts: nnRstErrNotificationType.setDescription('The error event like none - none of the below values memfail - memory allocation failure bufffail - buffer allocation failure')
nnRstPortNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 2), )
if mibBuilder.loadTexts: nnRstPortNotificationTable.setStatus('current')
if mibBuilder.loadTexts: nnRstPortNotificationTable.setDescription(' This table is used to store the notification information occured in each of the port for protocol migration and invalid packet received ')
nnRstPortNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 2, 1), ).setIndexNames((0, "NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB", "nnRstPortNotificationIndex"))
if mibBuilder.loadTexts: nnRstPortNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: nnRstPortNotificationEntry.setDescription(' This entry is used to store the notification information')
nnRstPortNotificationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: nnRstPortNotificationIndex.setStatus('current')
if mibBuilder.loadTexts: nnRstPortNotificationIndex.setDescription('A unique value, greater than zero, indicating the Port number.')
nnRstPortNotificationMigrationType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sendstp", 0), ("sendrstp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstPortNotificationMigrationType.setStatus('current')
if mibBuilder.loadTexts: nnRstPortNotificationMigrationType.setDescription('Port Protocol migration type occured in the port')
nnRstPortNotificationPktErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("protocolIdErr", 0), ("invalidBpdu", 1), ("configLengthErr", 2), ("tcnLengthErr", 3), ("rstpLengthErr", 4), ("maxAgeErr", 5), ("fwdDelayErr", 6), ("helloTimeErr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstPortNotificationPktErrType.setStatus('current')
if mibBuilder.loadTexts: nnRstPortNotificationPktErrType.setDescription('Type of invalid packet received in each of the port ')
nnRstPortNotificationPktErrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 4, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nnRstPortNotificationPktErrVal.setStatus('current')
if mibBuilder.loadTexts: nnRstPortNotificationPktErrVal.setDescription('Packet error value corresponding to the above type ')
nnRstGeneralEvent = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 4, 0, 1)).setObjects(("BRIDGE-MIB", "dot1dBaseBridgeAddress"), ("NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB", "nnRstGenNotificationType"))
if mibBuilder.loadTexts: nnRstGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: nnRstGeneralEvent.setDescription('Generated when any of the general events like protocol up or protocol down occurs')
nnRstErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 4, 0, 2)).setObjects(("BRIDGE-MIB", "dot1dBaseBridgeAddress"), ("NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB", "nnRstErrNotificationType"))
if mibBuilder.loadTexts: nnRstErrorEvent.setStatus('current')
if mibBuilder.loadTexts: nnRstErrorEvent.setDescription('Generated when any of the error events like memory failure or buffer failure or protocol migration or new root or topology change occurs ')
nnRstNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 4, 0, 3)).setObjects(("BRIDGE-MIB", "dot1dBaseBridgeAddress"), ("NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB", "nnRstDot1wOldDesignatedRoot"), ("BRIDGE-MIB", "dot1dStpDesignatedRoot"))
if mibBuilder.loadTexts: nnRstNewRoot.setStatus('current')
if mibBuilder.loadTexts: nnRstNewRoot.setDescription('Generated whenever a new root bridge is selected in the topology ')
nnRstTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 4, 0, 4)).setObjects(("BRIDGE-MIB", "dot1dBaseBridgeAddress"))
if mibBuilder.loadTexts: nnRstTopologyChange.setStatus('current')
if mibBuilder.loadTexts: nnRstTopologyChange.setDescription('Generated when topology change is detected ')
nnRstProtocolMigration = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 4, 0, 5)).setObjects(("BRIDGE-MIB", "dot1dBaseBridgeAddress"), ("NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB", "nnRstDot1dStpVersion"), ("NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB", "nnRstPortNotificationMigrationType"))
if mibBuilder.loadTexts: nnRstProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: nnRstProtocolMigration.setDescription('Generated when port protocol migration happens in the port ')
mibBuilder.exportSymbols("NORTEL-NETWORKS-RAPID-SPANNING-TREE-MIB", nnRstDot1dStpPortTable=nnRstDot1dStpPortTable, nnRstTopologyChange=nnRstTopologyChange, nnRstDot1wPortStateTransSmState=nnRstDot1wPortStateTransSmState, nnRstDot1dStpPortOperEdgePort=nnRstDot1dStpPortOperEdgePort, nnRstDot1dStpVersion=nnRstDot1dStpVersion, nnRstDot1dStpPortAdminEdgePort=nnRstDot1dStpPortAdminEdgePort, nnRstDot1wScalars=nnRstDot1wScalars, nnRstDot1dStpTxHoldCount=nnRstDot1dStpTxHoldCount, nnRstDot1wPortEntry=nnRstDot1wPortEntry, nnRstDot1wPortTopoChSmState=nnRstDot1wPortTopoChSmState, nnRstSetNotifications=nnRstSetNotifications, nnRstDot1w=nnRstDot1w, nnRstDot1wRstpUpCount=nnRstDot1wRstpUpCount, nnRstDot1wPortTxSmState=nnRstDot1wPortTxSmState, nnRstErrNotificationType=nnRstErrNotificationType, nnRstPortNotificationMigrationType=nnRstPortNotificationMigrationType, nnRstDot1wPortTxConfigBpduCount=nnRstDot1wPortTxConfigBpduCount, nnRstDot1wPortTable=nnRstDot1wPortTable, nnRstDot1wPortRoleTransSmState=nnRstDot1wPortRoleTransSmState, nnRstDot1wPortInvalidRstBpduRxCount=nnRstDot1wPortInvalidRstBpduRxCount, nnRstDot1wPortProtocolMigrationCount=nnRstDot1wPortProtocolMigrationCount, nnRstDot1wPortInvalidTcnBpduRxCount=nnRstDot1wPortInvalidTcnBpduRxCount, nnRstDot1dStpPortEntry=nnRstDot1dStpPortEntry, nnRstNotificationControl=nnRstNotificationControl, nnRstPortNotificationEntry=nnRstPortNotificationEntry, nnRapidSpanningTreeMib=nnRapidSpanningTreeMib, nnRstDot1wPortEffectivePortState=nnRstDot1wPortEffectivePortState, nnRstDot1wPortRxTcnBpduCount=nnRstDot1wPortRxTcnBpduCount, nnRstNotifications=nnRstNotifications, nnRstDot1dScalars=nnRstDot1dScalars, nnRstDot1wPortMigSmState=nnRstDot1wPortMigSmState, nnRstDot1wPortInfoSmState=nnRstDot1wPortInfoSmState, nnRstDot1dStpPortParticipating=nnRstDot1dStpPortParticipating, nnRstDot1d=nnRstDot1d, nnRstObjects=nnRstObjects, nnRstDot1wOldDesignatedRoot=nnRstDot1wOldDesignatedRoot, nnRstDot1wPortTxRstBpduCount=nnRstDot1wPortTxRstBpduCount, nnRstDot1wPortTxTcnBpduCount=nnRstDot1wPortTxTcnBpduCount, nnRstErrorEvent=nnRstErrorEvent, nnRstDot1wPortRoleSelSmState=nnRstDot1wPortRoleSelSmState, PYSNMP_MODULE_ID=nnRapidSpanningTreeMib, nnRstPortNotificationPktErrType=nnRstPortNotificationPktErrType, nnRstGenNotificationType=nnRstGenNotificationType, nnRstPortNotificationPktErrVal=nnRstPortNotificationPktErrVal, nnRstDot1dStpPortAdminPointToPoint=nnRstDot1dStpPortAdminPointToPoint, nnRstDot1wPortOperVersion=nnRstDot1wPortOperVersion, nnRstDot1wPortRxRstBpduCount=nnRstDot1wPortRxRstBpduCount, nnRstDot1wPortRxConfigBpduCount=nnRstDot1wPortRxConfigBpduCount, nnRstDot1wPort=nnRstDot1wPort, nnRstPortNotificationIndex=nnRstPortNotificationIndex, nnRstProtocolMigration=nnRstProtocolMigration, nnRstDot1dStpPortProtocolMigration=nnRstDot1dStpPortProtocolMigration, nnRstNotificationControlScalars=nnRstNotificationControlScalars, nnRstPortNotificationTable=nnRstPortNotificationTable, nnRstNewRoot=nnRstNewRoot, nnRstDot1wNewRootIdCount=nnRstDot1wNewRootIdCount, nnRstDot1wPortInvalidConfigBpduRxCount=nnRstDot1wPortInvalidConfigBpduRxCount, nnRstGeneralEvent=nnRstGeneralEvent, nnRstDot1dStpPortOperPointToPoint=nnRstDot1dStpPortOperPointToPoint, nnRstDot1dStpPathCostDefault=nnRstDot1dStpPathCostDefault, nnRstDot1wRstpDownCount=nnRstDot1wRstpDownCount, nnRstDot1wPortRole=nnRstDot1wPortRole)
