#
# PySNMP MIB module Wellfleet-PCAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-PCAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, Counter32, ModuleIdentity, Unsigned32, Bits, NotificationType, Counter64, TimeTicks, IpAddress, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "Counter32", "ModuleIdentity", "Unsigned32", "Bits", "NotificationType", "Counter64", "TimeTicks", "IpAddress", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfPktCaptureGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfPktCaptureGroup")
wfPktCaptureTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1), )
if mibBuilder.loadTexts: wfPktCaptureTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTable.setDescription('PCAP line record')
wfPktCaptureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1), ).setIndexNames((0, "Wellfleet-PCAP-MIB", "wfPktCaptureLineNumber"))
if mibBuilder.loadTexts: wfPktCaptureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureEntry.setDescription('An entry in the pcap table')
wfPktCaptureDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureDelete.setDescription('Delete parameter, created or deleted')
wfPktCaptureDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureDisable.setDescription('Enable parameter, enabled or disabled')
wfPktCaptureState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPktCaptureState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureState.setDescription('Interface Gate State')
wfPktCaptureFname = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPktCaptureFname.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureFname.setDescription('Filename used to retrieve capture buffer')
wfPktCaptureControl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2))).clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureControl.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureControl.setDescription('Swapping the value in this field causes the capture code to do the opposite of what is set in the Capture field.')
wfPktCaptureCapture = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("started", 1), ("stopped", 2))).clone('stopped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPktCaptureCapture.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureCapture.setDescription('Capture state, STARTed or STOPed')
wfPktCaptureLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPktCaptureLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureLineNumber.setDescription('Instance ID LineNumber, filled in by capture gate')
wfPktCaptureBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureBufSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureBufSize.setDescription('Size of capture buffer in 1024 byte increments')
wfPktCapturePktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCapturePktSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCapturePktSize.setDescription('Number of bytes to save from packet in 32 byte increments')
wfPktCaptureDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3))).clone('rx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureDirection.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureDirection.setDescription('Direction of packet flow to capture, Rx, Tx or Both')
wfPktCaptureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPktCaptureCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureCount.setDescription('Number of packets in capture buffer')
wfPktCaptureRxTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 1), ("match1", 2), ("match2", 3), ("notused", 4))).clone('notused')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxTrigger.setDescription('Rx trigger, Not used, buffer full or match on filter')
wfPktCaptureTxTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 1), ("match1", 2), ("match2", 3), ("notused", 4))).clone('notused')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxTrigger.setDescription('Tx trigger, Not used, buffer full or match on filter')
wfPktCaptureRxFltr1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("capture", 1), ("trigger", 2), ("notused", 3))).clone('notused')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Type.setDescription('Rx filter 1 type, Capture, Trigger, or Not used')
wfPktCaptureRxFltr1Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Offset.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Offset.setDescription('Rx filter 1 offset in bytes')
wfPktCaptureRxFltr1Ref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("dl", 2), ("mcast", 3))).clone('mac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Ref.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Ref.setDescription('Rx filter 1 Reference point, MAC, DATA LINK, MULTICAST')
wfPktCaptureRxFltr1Size = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Size.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Size.setDescription('Rx filter 1 field size to match in bytes')
wfPktCaptureRxFltr1Match = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Match.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr1Match.setDescription('Rx filter 1 data to match with packet')
wfPktCaptureTxFltr1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("capture", 1), ("trigger", 2), ("notused", 3))).clone('notused')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Type.setDescription('Tx filter 1 type, Capture, Trigger or Not used')
wfPktCaptureTxFltr1Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Offset.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Offset.setDescription('Tx filter 1 offset in bytes')
wfPktCaptureTxFltr1Ref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("dl", 2), ("mcast", 3))).clone('mac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Ref.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Ref.setDescription('Tx filter 1 Reference point, MAC, DATA LINK, MULTICAST')
wfPktCaptureTxFltr1Size = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Size.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Size.setDescription('Tx filter 1 field size to match in bytes')
wfPktCaptureTxFltr1Match = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Match.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr1Match.setDescription('Tx filter 1 data to match with packet')
wfPktCaptureRxFltr2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("capture", 1), ("trigger", 2), ("notused", 3))).clone('notused')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Type.setDescription('Rx filter 2 type, Capture, Trigger or Not used')
wfPktCaptureRxFltr2Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Offset.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Offset.setDescription('Rx filter 2 offset in bytes')
wfPktCaptureRxFltr2Ref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("dl", 2), ("mcast", 3))).clone('mac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Ref.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Ref.setDescription('Rx filter 2 Reference point, MAC, DATA LINK, MULTICAST')
wfPktCaptureRxFltr2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Size.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Size.setDescription('Rx filter 2 field size to match in bytes')
wfPktCaptureRxFltr2Match = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Match.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Match.setDescription('Rx filter 2 data to match with packet')
wfPktCaptureRxFltr2Group = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("or", 1), ("and", 2))).clone('or')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Group.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureRxFltr2Group.setDescription('Rx filter 2 grouping attribute, AND or OR')
wfPktCaptureTxFltr2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("capture", 1), ("trigger", 2), ("notused", 3))).clone('notused')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Type.setDescription('Tx filter 2 type, Capture, Trigger or Not used')
wfPktCaptureTxFltr2Offset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Offset.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Offset.setDescription('Tx filter 2 offset in bytes')
wfPktCaptureTxFltr2Ref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("dl", 2), ("mcast", 3))).clone('mac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Ref.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Ref.setDescription('Tx filter 2 Reference point, MAC, DATA LINK, MULTICAST')
wfPktCaptureTxFltr2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Size.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Size.setDescription('Tx filter 2 field size to match in bytes')
wfPktCaptureTxFltr2Match = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Match.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Match.setDescription('Tx filter 2 data to match with packet')
wfPktCaptureTxFltr2Group = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("or", 1), ("and", 2))).clone('or')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Group.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureTxFltr2Group.setDescription('Tx filter 2 grouping attribute, AND or OR')
wfPktCaptureAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureAtmVpi.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureAtmVpi.setDescription('ATM VPI')
wfPktCaptureAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 21, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureAtmVci.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureAtmVci.setDescription('ATM VCI')
mibBuilder.exportSymbols("Wellfleet-PCAP-MIB", wfPktCaptureRxFltr1Type=wfPktCaptureRxFltr1Type, wfPktCaptureDirection=wfPktCaptureDirection, wfPktCaptureTxTrigger=wfPktCaptureTxTrigger, wfPktCaptureLineNumber=wfPktCaptureLineNumber, wfPktCaptureDisable=wfPktCaptureDisable, wfPktCaptureTxFltr2Type=wfPktCaptureTxFltr2Type, wfPktCaptureTxFltr2Ref=wfPktCaptureTxFltr2Ref, wfPktCaptureAtmVci=wfPktCaptureAtmVci, wfPktCaptureRxFltr1Match=wfPktCaptureRxFltr1Match, wfPktCaptureRxFltr1Size=wfPktCaptureRxFltr1Size, wfPktCaptureTxFltr1Ref=wfPktCaptureTxFltr1Ref, wfPktCaptureTable=wfPktCaptureTable, wfPktCapturePktSize=wfPktCapturePktSize, wfPktCaptureFname=wfPktCaptureFname, wfPktCaptureRxFltr2Ref=wfPktCaptureRxFltr2Ref, wfPktCaptureTxFltr1Offset=wfPktCaptureTxFltr1Offset, wfPktCaptureTxFltr1Size=wfPktCaptureTxFltr1Size, wfPktCaptureTxFltr1Type=wfPktCaptureTxFltr1Type, wfPktCaptureBufSize=wfPktCaptureBufSize, wfPktCaptureRxFltr2Type=wfPktCaptureRxFltr2Type, wfPktCaptureRxFltr2Size=wfPktCaptureRxFltr2Size, wfPktCaptureControl=wfPktCaptureControl, wfPktCaptureEntry=wfPktCaptureEntry, wfPktCaptureRxFltr2Group=wfPktCaptureRxFltr2Group, wfPktCaptureRxTrigger=wfPktCaptureRxTrigger, wfPktCaptureTxFltr2Match=wfPktCaptureTxFltr2Match, wfPktCaptureCapture=wfPktCaptureCapture, wfPktCaptureDelete=wfPktCaptureDelete, wfPktCaptureAtmVpi=wfPktCaptureAtmVpi, wfPktCaptureState=wfPktCaptureState, wfPktCaptureCount=wfPktCaptureCount, wfPktCaptureRxFltr1Offset=wfPktCaptureRxFltr1Offset, wfPktCaptureTxFltr2Size=wfPktCaptureTxFltr2Size, wfPktCaptureTxFltr2Group=wfPktCaptureTxFltr2Group, wfPktCaptureTxFltr1Match=wfPktCaptureTxFltr1Match, wfPktCaptureRxFltr2Match=wfPktCaptureRxFltr2Match, wfPktCaptureTxFltr2Offset=wfPktCaptureTxFltr2Offset, wfPktCaptureRxFltr2Offset=wfPktCaptureRxFltr2Offset, wfPktCaptureRxFltr1Ref=wfPktCaptureRxFltr1Ref)
