#
# PySNMP MIB module ISO3201-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISO3201-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, Unsigned32, MibIdentifier, Integer32, Counter64, ModuleIdentity, NotificationType, enterprises, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Integer32", "Counter64", "ModuleIdentity", "NotificationType", "enterprises", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCT3201PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28), )
if mibBuilder.loadTexts: cdx6500PPCT3201PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCT3201PortTable.setDescription('This table contains the 3201 Port configuration parameters.')
cdx6500PPCT3201PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201PCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PPCT3201PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCT3201PortEntry.setDescription('Entries in the 3201 Port Configuration Table.')
iso3201PCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgPortNum.setDescription('Port number of the 3201 port.')
iso3201PCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50))).clone(namedValues=NamedValues(("iso3201", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgPortType.setDescription('The Port Type of the port.')
iso3201PCfgPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 8, 13, 14, 15, 16, 99))).clone(namedValues=NamedValues(("speed300", 3), ("speed1200", 4), ("speed600", 5), ("speed1800", 8), ("speed2400", 13), ("speed4800", 14), ("speed9600", 15), ("speed19200", 16), ("speed7200", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgPortSpeed.setDescription('This specifies port speed in bits per second speed300 : 300 bits per second speed600 : 600 bits per second speed1200 : 1200 bits per second speed1800 : 1800 bits per second speed2400 : 2400 bits per second speed4800 : 4800 bits per second speed7200 : 7200 bits per second speed9600 : 9600 bits per second speed19200 : 19200 bits per second .')
iso3201PCfgNoOfControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgNoOfControllers.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgNoOfControllers.setDescription('This specifies the number of controllers on this line.')
iso3201PCfgResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgResponseTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgResponseTimeout.setDescription('This specifies the amount of time in 1/20th of a second that the PAD waits for a response from a controller. A value of 5 gives a response timeout of 250ms.')
iso3201PCfgInterChrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgInterChrTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgInterChrTimeout.setDescription('This specifies the maximum amount of time in 1/20 of a second that the PAD waits between two characters when receiving data from the attatched devices before detecting a line problem. A value of 2 gives an intercharacter timeout of 100ms.')
iso3201PCfgNoOfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgNoOfRetries.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgNoOfRetries.setDescription('This specifies the retry limit for polls/selects sent, NAKs sent/received and ENQs sent/received. In case of polls and selects, the controller is placed in slow poll mode on reaching this limit.')
iso3201PCfgNoOfConsecRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgNoOfConsecRetries.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgNoOfConsecRetries.setDescription('This specifies the number of retries that will be made immediately in case of response timeout on Poll, response timeout on Select or NAK response to select. The next controller in the list will be polled/selected only after these many retries are made for the non-responding controller. All consecutive retries will be counted as one retry attempt.')
iso3201PCfgSlowPollWaitCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgSlowPollWaitCycle.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgSlowPollWaitCycle.setDescription('This specifies the number of poll cycles to active controllers before a poll is sent to one controller in the slow poll list.')
iso3201PCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
iso3201PCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
iso3201PCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 28, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PCfgHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500SPCT3201StnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7), )
if mibBuilder.loadTexts: cdx6500SPCT3201StnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCT3201StnTable.setDescription('This table contains the 3201 Station Configuration parameters.')
cdx6500SPCT3201StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SCfgPortNum"), (0, "ISO3201-OPT-MIB", "iso3201SCfgStnNum"))
if mibBuilder.loadTexts: cdx6500SPCT3201StnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCT3201StnEntry.setDescription('Entries in the 3201 Station Configuration Table.')
iso3201SCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SCfgPortNum.setDescription('Port number of the 3201 port.')
iso3201SCfgStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgStnNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SCfgStnNum.setDescription('Station number of the 3201 station.')
iso3201SCfgControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgControllerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SCfgControllerAddress.setDescription('This specifies the address of this controller The valid addresses are : 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F.')
iso3201SCfgAutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgAutocallMnemonic.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SCfgAutocallMnemonic.setDescription('This specifies the mnemonic used by the PAD to place calls to the Host for this controller. Host initiated calls will be accepted only if this field is blank.')
iso3201SCfgAutocallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgAutocallTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SCfgAutocallTimeout.setDescription('This specifies the time interval in seconds between call attempts.')
iso3201SCfgMaxNoAutocallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgMaxNoAutocallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SCfgMaxNoAutocallAttempts.setDescription('This specifies the number of times autocall attempts will be made. A value of 0 will allow unlimited attempts.')
iso3201SCfgX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgX25Address.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SCfgX25Address.setDescription('This specifies the X.25 address inserted in the calling address field of the call packet sent by the PAD to the Host. This address identifies the controller to the Host.')
iso3201SCfgBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("billingDisabled", 1), ("billingEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SCfgBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SCfgBillingRecords.setDescription('This controls whether billing(accounting) records will be created for calls on this station billingDisabled : billing is disabled billingEnabled : billing is enabled .')
cdx6500PPST3201PStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29), )
if mibBuilder.loadTexts: cdx6500PPST3201PStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPST3201PStatsTable.setDescription('This table contains 3201 Port Statistics parameters.')
cdx6500PPST3201PStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201PStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPST3201PStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPST3201PStatsEntry.setDescription('Entries in the 3201 Port Statistics Table.')
iso3201PStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsPortNum.setDescription('Port Number of the 3201 Port.')
iso3201PStatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsPortStatus.setDescription('This indicates the operational status of the port up : port is enabled disabled : port is disabled .')
iso3201PStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50))).clone(namedValues=NamedValues(("iso3201", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsPortType.setDescription('This indicates the type of access protocol for this port.')
iso3201PStatsPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 8, 13, 14, 15, 16, 99))).clone(namedValues=NamedValues(("speed300", 3), ("speed1200", 4), ("speed600", 5), ("speed1800", 8), ("speed2400", 13), ("speed4800", 14), ("speed9600", 15), ("speed19200", 16), ("speed7200", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsPortSpeed.setDescription('This specifies port speed in bits per second speed300 : 300 bits per second speed600 : 600 bits per second speed1200 : 1200 bits per second speed1800 : 1800 bits per second speed2400 : 2400 bits per second speed4800 : 4800 bits per second speed7200 : 7200 bits per second speed9600 : 9600 bits per second speed19200 : 19200 bits per second .')
iso3201PStatsPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortUtilIn.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsPortUtilIn.setDescription('This indicates the port utilization for the line to port direction.')
iso3201PStatsPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsPortUtilOut.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsPortUtilOut.setDescription('This indicates the port utilization for the port to line direction.')
iso3201PStatsLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsLineStatus.setDescription('This indicates the line status : up : if one or more controllers are responding to polls down : if no controllers are responding or garbage is being received.')
iso3201PStatsTxChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxChrs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsTxChrs.setDescription('This specifies the number of characters transmitted.')
iso3201PStatsTxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsTxMsgs.setDescription('This specifies the number of data messages transmitted.')
iso3201PStatsTxPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxPolls.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsTxPolls.setDescription('This specifies the number of polls transmitted.')
iso3201PStatsTxSelects = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxSelects.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsTxSelects.setDescription('This specifies the number of selects transmitted.')
iso3201PStatsTxACKs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxACKs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsTxACKs.setDescription('This specifies the number of data messages for which ACKs were transmitted.')
iso3201PStatsTxNAKs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxNAKs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsTxNAKs.setDescription('This specifies the number of messages for which NAKs were transmitted.')
iso3201PStatsTxENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsTxENQs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsTxENQs.setDescription('This specifies the number of ENQs transmitted.')
iso3201PStatsRxChrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxChrs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsRxChrs.setDescription('This specifies the number of characters received.')
iso3201PStatsRxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsRxMsgs.setDescription('This specifies the number of data messages received.')
iso3201PStatsRxACKs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxACKs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsRxACKs.setDescription('This specifies the number of data messages for which ACKs were received.')
iso3201PStatsRxNAKs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxNAKs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsRxNAKs.setDescription('This specifies the number of messages for which NAKs were received.')
iso3201PStatsRxENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 29, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201PStatsRxENQs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PStatsRxENQs.setDescription('This specifies the number of ENQs received.')
cdx6500SPST3201StnTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6))
cdx6500SPST3201SStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1), )
if mibBuilder.loadTexts: cdx6500SPST3201SStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPST3201SStatsTable.setDescription('This table contains 3201 Station statistics parameters.')
cdx6500SPST3201StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SStatsPortNum"), (0, "ISO3201-OPT-MIB", "iso3201SStatsStnNum"))
if mibBuilder.loadTexts: cdx6500SPST3201StnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPST3201StnEntry.setDescription('Entries in the 3201 Station statistics table.')
iso3201SStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsPortNum.setDescription('Port number of the 3201 port.')
iso3201SStatsStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsStnNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsStnNum.setDescription('Station number of the 3201 station.')
iso3201SStatsControllerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsControllerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsControllerAddress.setDescription('This specifies the address of this controller The valid addresses are : 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F.')
iso3201SStatsStnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("up", 3), ("suspended", 4), ("blocked", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsStnState.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsStnState.setDescription('This indicates the current state of the station up : when responding to polls down : when tries have expired and controller is in slow poll suspended : when polling has been stopped by host blocked : when polling has been stopped because the X.25 channel is blocked disabled : when station is disabled.')
iso3201SStatsCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("calling", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsCurrentStatus.setDescription('This gives information regarding the calls placed by this station on its host. calling : when it is waiting call accept from the host connected : when the connection to the host has been accepted idle : when connection attempts are not in progress (no data to send to the Host), or autocall attempts have been exhausted or when it is waiting for autocall timeout (to send call request again).')
iso3201SStatsNoOfAutocallAttmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsNoOfAutocallAttmpts.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsNoOfAutocallAttmpts.setDescription('This indicates the number of attempts made to establish connection to the host. This is reset to 0 when a connection is established.')
iso3201SStatsNxtAutocallAttmpt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsNxtAutocallAttmpt.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsNxtAutocallAttmpt.setDescription('This indicates the time (in seconds ) after which the station will place autocall to the host.')
iso3201SStatsLastClearCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastClearCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastClearCauseCode.setDescription('Last autocall clear cause code.')
iso3201SStatsLastClearDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastClearDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastClearDiagCode.setDescription('Last clear diagnostic code.')
iso3201SStatsLastInCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastInCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastInCalledAddress.setDescription("This indicates the called address in the last inbound call request packet sent by this station. A value of 'Last Call Information not available' will be returned if the last incoming call packet is not present.")
iso3201SStatsLastInCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastInCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastInCallingAddress.setDescription("This indicates the calling address in the last inbound request packet sent by this station. A value of 'Last Call Information not available' will be returned if the last incoming call packet is not present.")
iso3201SStatsLastInCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastInCallFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastInCallFacilities.setDescription("This indicates the facilities in the last inbound request packet sent by this station. A value of 'Last Call Information not available' will be returned if the last incoming call packet is not present.")
iso3201SStatsLastInCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastInCallCUD.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastInCallCUD.setDescription("This indicates the data in the Call User Data field in the last inbound call request packet sent by this station. A value of 'Last Call Information not available' will be returned if the incoming call packet is not present.")
iso3201SStatsLastOutCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastOutCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastOutCalledAddress.setDescription("This indicates the called address in the last outbound call request packet sent by this station. A value of 'Last Call Information not available' will be returned if the last outgoing call packet is not present.")
iso3201SStatsLastOutCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastOutCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastOutCallingAddress.setDescription("This indicates the calling address in the last outbound call request packet sent by this station. A value of 'Last Call Information not available' will be returned if the last outgoing call packet is not present.")
iso3201SStatsLastOutCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastOutCallFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastOutCallFacilities.setDescription("This indicates the facilities in the last outbound call request packet sent by this station. A value of 'Last Call Information not available' will be returned if the last outgoing call packet is not present.")
iso3201SStatsLastOutCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsLastOutCallCUD.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsLastOutCallCUD.setDescription("This indicates the data in the Call User Data field in the last outbound call request packet sent by this station. A value of 'Last Call Information not available' will be returned if the last call outgoing packet is not present.")
cdx6500SPST3201PktSummTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2), )
if mibBuilder.loadTexts: cdx6500SPST3201PktSummTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPST3201PktSummTable.setDescription('This table contains the Packet Summary statistics parameters.')
cdx6500SPST3201PktSummEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SStatsPktSummPortNum"), (0, "ISO3201-OPT-MIB", "iso3201SStatsPktSummStnNum"))
if mibBuilder.loadTexts: cdx6500SPST3201PktSummEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPST3201PktSummEntry.setDescription('Entries in the Packet Summary statistics table.')
iso3201SStatsPktSummPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsPktSummPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsPktSummPortNum.setDescription('This specifies the physical port number .')
iso3201SStatsPktSummStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsPktSummStnNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsPktSummStnNum.setDescription('This specifies the entry number of this station.')
iso3201SStatsTxData = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxData.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxData.setDescription('This specifies the count of data packets transmitted.')
iso3201SStatsTxCallRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxCallRequest.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxCallRequest.setDescription('This specifies the count of call request packets transmitted.')
iso3201SStatsTxCallAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxCallAccept.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxCallAccept.setDescription('This specifies the count of call accept packets transmitted.')
iso3201SStatsTxClearRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxClearRequest.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxClearRequest.setDescription('This specifies the count of clear request packets transmitted.')
iso3201SStatsTxClearConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxClearConfirm.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxClearConfirm.setDescription('This specifies the count of clear confirm packets transmitted.')
iso3201SStatsTxResetRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxResetRequest.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxResetRequest.setDescription('This specifies the count of reset request packets transmitted.')
iso3201SStatsTxResetConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxResetConfirm.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxResetConfirm.setDescription('This specifies the count of reset confirm packets transmitted.')
iso3201SStatsTxWindowClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxWindowClosed.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxWindowClosed.setDescription("The 'Transmit Window Closed' counts the number of times the 3201 station could not send data to the adjacent channel because of flow control.")
iso3201SStatsRxData = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxData.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxData.setDescription('This specifies the count of data packets received.')
iso3201SStatsRxCallRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxCallRequest.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxCallRequest.setDescription('This specifies the count of call request packets received.')
iso3201SStatsRxCallAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxCallAccept.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxCallAccept.setDescription('This specifies the count of call accept packets received.')
iso3201SStatsRxClearRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxClearRequest.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxClearRequest.setDescription('This specifies the count of clear request packets received.')
iso3201SStatsRxClearConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxClearConfirm.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxClearConfirm.setDescription('This specifies the count of clear confirm packets received.')
iso3201SStatsRxResetRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxResetRequest.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxResetRequest.setDescription('This specifies the count of reset request packets received.')
iso3201SStatsRxResetConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxResetConfirm.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxResetConfirm.setDescription('This specifies the count of reset confirm packets received.')
iso3201SStatsRxWindowClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxWindowClosed.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxWindowClosed.setDescription("The 'Receive Window Closed' is incremented every time the 3201 station removes data out of its queue towards the terminal and the number of messages queued is greater than 15.")
cdx6500SPST3201SummTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3), )
if mibBuilder.loadTexts: cdx6500SPST3201SummTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPST3201SummTable.setDescription('This table contains the 3201 summary statistics parameters.')
cdx6500SPST3201SummEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SStatsSummPortNum"), (0, "ISO3201-OPT-MIB", "iso3201SStatsSummStnNum"))
if mibBuilder.loadTexts: cdx6500SPST3201SummEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPST3201SummEntry.setDescription('Entries in the 3201 Summary statistics table.')
iso3201SStatsSummPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsSummPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsSummPortNum.setDescription('This specifies the physical port number.')
iso3201SStatsSummStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsSummStnNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsSummStnNum.setDescription('This specifies the entry number of this station.')
iso3201SStatsTxPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxPolls.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxPolls.setDescription('This indicates the number of polls transmitted to this controller.')
iso3201SStatsTxSelects = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxSelects.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxSelects.setDescription('This indicates the number of selects transmitted to this controller.')
iso3201SStatsTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxDataBytes.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxDataBytes.setDescription('This indicates the number of data bytes transmitted.')
iso3201SStatsTxDataMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxDataMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxDataMsgs.setDescription('This specifies the number of data messages transmitted.')
iso3201SStatsTxDataMsgsPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxDataMsgsPerHour.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxDataMsgsPerHour.setDescription('This specifies the number of data messages transmitted per hour.')
iso3201SStatsTxAvgMsgLength = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxAvgMsgLength.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxAvgMsgLength.setDescription('This indicates the average length of data messages transmitted.')
iso3201SStatsTxMsgsNAKed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxMsgsNAKed.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxMsgsNAKed.setDescription('This specifies the number of data messages for which NAKs were transmitted.')
iso3201SStatsTxSelectRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxSelectRetryExhausted.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxSelectRetryExhausted.setDescription('This indicates the number of selects to this controller for which all attempts failed.')
iso3201SStatsTxNAKRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxNAKRetryExhausted.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxNAKRetryExhausted.setDescription('This indicates the number of times the NAK sent retry limit was crossed.')
iso3201SStatsTxENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxENQs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxENQs.setDescription('This specifies the number of ENQs transmitted.')
iso3201SStatsTxENQRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxENQRetryExhausted.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxENQRetryExhausted.setDescription('This specifies the number of times the ENQ sent retry limit was crossed.')
iso3201SStatsTxPollingSuspendedByHost = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsTxPollingSuspendedByHost.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsTxPollingSuspendedByHost.setDescription('This specifies the number of times polling was suspended on account of receiving an interrupt packet from the host.')
iso3201SStatsRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxDataBytes.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxDataBytes.setDescription('This indicates the number of data bytes received.')
iso3201SStatsRxDataMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxDataMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxDataMsgs.setDescription('This specifies the number of data messages received.')
iso3201SStatsRxDataMsgsPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxDataMsgsPerHour.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxDataMsgsPerHour.setDescription('This specifies the number of data messages received per hour.')
iso3201SStatsRxAvgMsgLength = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxAvgMsgLength.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxAvgMsgLength.setDescription('This indicates the average length of data messages received.')
iso3201SStatsRxMsgsNAKed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxMsgsNAKed.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxMsgsNAKed.setDescription('This specifies the number of data messages for which NAKs were received.')
iso3201SStatsRxMsgsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxMsgsAborted.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxMsgsAborted.setDescription('This specifies the number of data messages to the controller for which were aborted by the controller (by sending EOT).')
iso3201SStatsRxSelectsNAKed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxSelectsNAKed.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxSelectsNAKed.setDescription('This specifies the number of selects for which NAKs were received by the controller.')
iso3201SStatsRxInvRespToSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxInvRespToSelect.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxInvRespToSelect.setDescription('This indicates the number of selects for which an invalid response was received.')
iso3201SStatsRxNAKRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxNAKRetryExhausted.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxNAKRetryExhausted.setDescription('This indicates the number of times the NAK received retry limit was crossed.')
iso3201SStatsRxENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxENQs.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxENQs.setDescription('This indicates the number of ENQs received.')
iso3201SStatsRxENQRetryExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxENQRetryExhausted.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxENQRetryExhausted.setDescription('This indicates the number of times the ENQ received retry limit was crossed.')
iso3201SStatsRxInterChrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxInterChrTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxInterChrTimeout.setDescription('This indicates the number of times intercharacter timeout occurred while receiving data from the controller .')
iso3201SStatsRxPollTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxPollTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxPollTimeout.setDescription('This specifies the number of times the controller did not respond to poll before response timeout .')
iso3201SStatsRxSelectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxSelectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxSelectTimeout.setDescription('This indicates the number of times the controller did not respond to select before response timeout.')
iso3201SStatsRxReceiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxReceiveTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxReceiveTimeout.setDescription('This indicates the number of times the controller did not respond to a ACK before response timeout and the number of times the inter-character timer expired when receiving response to a NAK.')
iso3201SStatsRxParityErrorsOnCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 6, 3, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iso3201SStatsRxParityErrorsOnCntrl.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SStatsRxParityErrorsOnCntrl.setDescription('This specifies the number of times the PAD detected a parity error on the control characters ACK, DLE, NAK, ENQ, EOT, ETX, SOH, STX.')
cdx6500Cont3201Table = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11))
cdx6500Cont3201PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1), )
if mibBuilder.loadTexts: cdx6500Cont3201PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500Cont3201PortTable.setDescription('This table contains the 3201 Port Control parameters.')
cdx6500Cont3201PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201PContPortNum"))
if mibBuilder.loadTexts: cdx6500Cont3201PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500Cont3201PortEntry.setDescription('Entries in the 3201 Port control Table.')
iso3201PContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: iso3201PContPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201PContPortNum.setDescription('3201 port number .')
iso3201ContPortBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContPortBoot.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContPortBoot.setDescription('Boots the specified 3201 port. boot : Boot the port noBoot : Do not boot the port.')
iso3201ContPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContPortEnable.setDescription('Enables the specified 3201 Port. enable : Enable the Port noEnable : Do not enable the port.')
iso3201ContPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContPortDisable.setDescription('Disables the specified 3201 Port. disable : Disable Port noDisable : Do not disable Port.')
iso3201ContPortResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noreset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContPortResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContPortResetStats.setDescription('Reset statistics for the specified 3201 Port reset : Reset port statistics noReset : Do not reset port statistics.')
cdx6500Cont3201StnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2), )
if mibBuilder.loadTexts: cdx6500Cont3201StnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500Cont3201StnTable.setDescription('This table contains the 3201 Station Control parameters.')
cdx6500Cont3201StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1), ).setIndexNames((0, "ISO3201-OPT-MIB", "iso3201SContPortNum"), (0, "ISO3201-OPT-MIB", "iso3201ContStnNum"))
if mibBuilder.loadTexts: cdx6500Cont3201StnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500Cont3201StnEntry.setDescription('Entries in the 3201 Station Control Table.')
iso3201SContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: iso3201SContPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201SContPortNum.setDescription('3201 port number.')
iso3201ContStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: iso3201ContStnNum.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContStnNum.setDescription('3201 station number.')
iso3201ContStnBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContStnBoot.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContStnBoot.setDescription('Boots the secified 3201 station. boot : Boot the station noBoot : Do not boot Station.')
iso3201ContStnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContStnEnable.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContStnEnable.setDescription('Enables the specified 3201 station enable : Enable station noEnable : Do not enable station.')
iso3201ContStnDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContStnDisable.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContStnDisable.setDescription('Disables the specified 3201 Station disable : Disable Station noDisable : Do not disable Station.')
iso3201ContStnResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: iso3201ContStnResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: iso3201ContStnResetStats.setDescription('Reset statistics for the specified 3201 station reset : Reset station statistics noReset : Do not reset station statistics.')
mibBuilder.exportSymbols("ISO3201-OPT-MIB", iso3201SStatsLastOutCallCUD=iso3201SStatsLastOutCallCUD, cdx6500SPCT3201StnEntry=cdx6500SPCT3201StnEntry, iso3201PStatsPortSpeed=iso3201PStatsPortSpeed, iso3201SStatsTxDataBytes=iso3201SStatsTxDataBytes, iso3201SStatsTxDataMsgs=iso3201SStatsTxDataMsgs, iso3201SStatsRxSelectTimeout=iso3201SStatsRxSelectTimeout, iso3201PStatsTxSelects=iso3201PStatsTxSelects, iso3201SStatsRxInvRespToSelect=iso3201SStatsRxInvRespToSelect, iso3201SStatsLastClearCauseCode=iso3201SStatsLastClearCauseCode, iso3201SStatsLastClearDiagCode=iso3201SStatsLastClearDiagCode, iso3201SStatsTxENQs=iso3201SStatsTxENQs, iso3201SStatsRxData=iso3201SStatsRxData, iso3201SStatsStnState=iso3201SStatsStnState, iso3201PCfgResponseTimeout=iso3201PCfgResponseTimeout, iso3201SStatsTxSelects=iso3201SStatsTxSelects, iso3201PCfgNoOfRetries=iso3201PCfgNoOfRetries, iso3201SStatsRxMsgsAborted=iso3201SStatsRxMsgsAborted, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, iso3201SStatsTxMsgsNAKed=iso3201SStatsTxMsgsNAKed, iso3201PCfgInterChrTimeout=iso3201PCfgInterChrTimeout, iso3201SCfgStnNum=iso3201SCfgStnNum, iso3201SCfgAutocallMnemonic=iso3201SCfgAutocallMnemonic, iso3201ContPortDisable=iso3201ContPortDisable, cdx6500Controls=cdx6500Controls, iso3201ContPortResetStats=iso3201ContPortResetStats, iso3201SStatsRxDataMsgsPerHour=iso3201SStatsRxDataMsgsPerHour, cdx6500Statistics=cdx6500Statistics, iso3201SStatsTxCallAccept=iso3201SStatsTxCallAccept, cdx6500Cont3201StnTable=cdx6500Cont3201StnTable, iso3201PCfgPortType=iso3201PCfgPortType, cdx6500Configuration=cdx6500Configuration, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, iso3201ContStnDisable=iso3201ContStnDisable, iso3201SStatsRxAvgMsgLength=iso3201SStatsRxAvgMsgLength, cdx6500SPCT3201StnTable=cdx6500SPCT3201StnTable, iso3201SCfgControllerAddress=iso3201SCfgControllerAddress, iso3201SStatsRxENQs=iso3201SStatsRxENQs, iso3201ContStnNum=iso3201ContStnNum, cdx6500PPCT3201PortTable=cdx6500PPCT3201PortTable, iso3201SContPortNum=iso3201SContPortNum, cdx6500Cont3201Table=cdx6500Cont3201Table, iso3201PCfgNoOfControllers=iso3201PCfgNoOfControllers, iso3201PStatsLineStatus=iso3201PStatsLineStatus, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, iso3201SStatsRxDataMsgs=iso3201SStatsRxDataMsgs, cdx6500SPST3201StnTable=cdx6500SPST3201StnTable, iso3201SStatsTxSelectRetryExhausted=iso3201SStatsTxSelectRetryExhausted, iso3201SCfgBillingRecords=iso3201SCfgBillingRecords, cdx6500Cont3201PortEntry=cdx6500Cont3201PortEntry, iso3201SStatsLastOutCallFacilities=iso3201SStatsLastOutCallFacilities, iso3201PStatsPortStatus=iso3201PStatsPortStatus, cdxProductSpecific=cdxProductSpecific, cdx6500=cdx6500, iso3201PCfgHighSpeedElectricalInterfaceOption=iso3201PCfgHighSpeedElectricalInterfaceOption, iso3201SCfgPortNum=iso3201SCfgPortNum, iso3201SStatsTxDataMsgsPerHour=iso3201SStatsTxDataMsgsPerHour, iso3201SStatsRxSelectsNAKed=iso3201SStatsRxSelectsNAKed, iso3201SStatsTxPolls=iso3201SStatsTxPolls, iso3201SStatsTxNAKRetryExhausted=iso3201SStatsTxNAKRetryExhausted, iso3201PStatsPortNum=iso3201PStatsPortNum, iso3201SStatsLastOutCallingAddress=iso3201SStatsLastOutCallingAddress, iso3201SStatsCurrentStatus=iso3201SStatsCurrentStatus, iso3201SStatsRxMsgsNAKed=iso3201SStatsRxMsgsNAKed, iso3201PStatsRxENQs=iso3201PStatsRxENQs, iso3201SStatsSummPortNum=iso3201SStatsSummPortNum, cdx6500Cont3201StnEntry=cdx6500Cont3201StnEntry, iso3201ContPortBoot=iso3201ContPortBoot, iso3201SStatsRxENQRetryExhausted=iso3201SStatsRxENQRetryExhausted, iso3201SStatsStnNum=iso3201SStatsStnNum, iso3201SStatsRxReceiveTimeout=iso3201SStatsRxReceiveTimeout, iso3201SStatsSummStnNum=iso3201SStatsSummStnNum, iso3201SStatsPktSummStnNum=iso3201SStatsPktSummStnNum, iso3201SStatsRxParityErrorsOnCntrl=iso3201SStatsRxParityErrorsOnCntrl, iso3201SStatsNoOfAutocallAttmpts=iso3201SStatsNoOfAutocallAttmpts, iso3201ContStnBoot=iso3201ContStnBoot, iso3201SStatsRxCallRequest=iso3201SStatsRxCallRequest, iso3201SCfgMaxNoAutocallAttempts=iso3201SCfgMaxNoAutocallAttempts, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, iso3201PStatsRxChrs=iso3201PStatsRxChrs, iso3201ContStnEnable=iso3201ContStnEnable, iso3201SStatsTxClearConfirm=iso3201SStatsTxClearConfirm, iso3201PCfgElectricalInterfaceType=iso3201PCfgElectricalInterfaceType, iso3201SStatsRxWindowClosed=iso3201SStatsRxWindowClosed, iso3201SStatsRxCallAccept=iso3201SStatsRxCallAccept, iso3201SStatsTxData=iso3201SStatsTxData, cdx6500SPST3201SummEntry=cdx6500SPST3201SummEntry, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, iso3201PContPortNum=iso3201PContPortNum, iso3201SStatsRxNAKRetryExhausted=iso3201SStatsRxNAKRetryExhausted, iso3201PStatsRxACKs=iso3201PStatsRxACKs, iso3201PStatsTxChrs=iso3201PStatsTxChrs, iso3201PStatsTxACKs=iso3201PStatsTxACKs, iso3201SStatsRxClearRequest=iso3201SStatsRxClearRequest, iso3201PCfgNoOfConsecRetries=iso3201PCfgNoOfConsecRetries, iso3201ContPortEnable=iso3201ContPortEnable, codex=codex, iso3201SStatsTxAvgMsgLength=iso3201SStatsTxAvgMsgLength, iso3201SStatsLastInCallCUD=iso3201SStatsLastInCallCUD, DisplayString=DisplayString, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, iso3201PStatsTxNAKs=iso3201PStatsTxNAKs, iso3201SCfgX25Address=iso3201SCfgX25Address, iso3201SStatsLastInCalledAddress=iso3201SStatsLastInCalledAddress, iso3201SStatsRxPollTimeout=iso3201SStatsRxPollTimeout, iso3201SStatsPktSummPortNum=iso3201SStatsPktSummPortNum, iso3201SStatsRxClearConfirm=iso3201SStatsRxClearConfirm, iso3201PStatsPortType=iso3201PStatsPortType, iso3201PStatsRxNAKs=iso3201PStatsRxNAKs, iso3201SStatsTxCallRequest=iso3201SStatsTxCallRequest, iso3201SStatsRxDataBytes=iso3201SStatsRxDataBytes, cdx6500SPST3201PktSummTable=cdx6500SPST3201PktSummTable, iso3201PStatsTxPolls=iso3201PStatsTxPolls, iso3201SStatsLastInCallingAddress=iso3201SStatsLastInCallingAddress, cdx6500PPST3201PStatsTable=cdx6500PPST3201PStatsTable, iso3201SStatsTxPollingSuspendedByHost=iso3201SStatsTxPollingSuspendedByHost, iso3201PCfgSlowPollWaitCycle=iso3201PCfgSlowPollWaitCycle, iso3201PStatsTxMsgs=iso3201PStatsTxMsgs, iso3201PStatsPortUtilIn=iso3201PStatsPortUtilIn, iso3201ContStnResetStats=iso3201ContStnResetStats, cdx6500SPST3201PktSummEntry=cdx6500SPST3201PktSummEntry, cdx6500PPST3201PStatsEntry=cdx6500PPST3201PStatsEntry, iso3201SStatsRxResetConfirm=iso3201SStatsRxResetConfirm, cdx6500SPST3201StnEntry=cdx6500SPST3201StnEntry, iso3201SStatsPortNum=iso3201SStatsPortNum, iso3201SCfgAutocallTimeout=iso3201SCfgAutocallTimeout, iso3201SStatsLastInCallFacilities=iso3201SStatsLastInCallFacilities, iso3201SStatsRxResetRequest=iso3201SStatsRxResetRequest, iso3201PCfgV24ElectricalInterfaceOption=iso3201PCfgV24ElectricalInterfaceOption, iso3201SStatsNxtAutocallAttmpt=iso3201SStatsNxtAutocallAttmpt, iso3201SStatsLastOutCalledAddress=iso3201SStatsLastOutCalledAddress, iso3201SStatsTxENQRetryExhausted=iso3201SStatsTxENQRetryExhausted, iso3201PCfgPortNum=iso3201PCfgPortNum, cdx6500Cont3201PortTable=cdx6500Cont3201PortTable, cdx6500SPST3201SummTable=cdx6500SPST3201SummTable, iso3201SStatsControllerAddress=iso3201SStatsControllerAddress, iso3201SStatsTxClearRequest=iso3201SStatsTxClearRequest, iso3201SStatsTxWindowClosed=iso3201SStatsTxWindowClosed, iso3201PStatsTxENQs=iso3201PStatsTxENQs, iso3201PStatsRxMsgs=iso3201PStatsRxMsgs, cdx6500SPST3201SStatsTable=cdx6500SPST3201SStatsTable, iso3201PStatsPortUtilOut=iso3201PStatsPortUtilOut, iso3201SStatsTxResetRequest=iso3201SStatsTxResetRequest, iso3201SStatsRxInterChrTimeout=iso3201SStatsRxInterChrTimeout, iso3201SStatsTxResetConfirm=iso3201SStatsTxResetConfirm, iso3201PCfgPortSpeed=iso3201PCfgPortSpeed, cdx6500PPCT3201PortEntry=cdx6500PPCT3201PortEntry)
