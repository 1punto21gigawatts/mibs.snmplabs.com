#
# PySNMP MIB module WWP-LEOS-RADIUS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-RADIUS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Integer32, Counter64, Unsigned32, TimeTicks, Gauge32, iso, Bits, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Integer32", "Counter64", "Unsigned32", "TimeTicks", "Gauge32", "iso", "Bits", "ObjectIdentity", "Counter32")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosRadiusClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20))
wwpLeosRadiusClientMIB.setRevisions(('2012-04-26 00:00', '2012-04-05 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosRadiusClientMIB.setRevisionsDescriptions(('Corrected the maximum RADIUS authentication string length from 127 to 64 characters.', 'Add new MIB OIDs to support IP protocol version independent Inet addressing. New attributes include: wwpLeosRadiusClientServerResolvedInetAddrType, wwpLeosRadiusClientServerResolvedInetAddress.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosRadiusClientMIB.setLastUpdated('201204260000Z')
if mibBuilder.loadTexts: wwpLeosRadiusClientMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosRadiusClientMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosRadiusClientMIB.setDescription('The MIB module for the WWP Radius Server specific configuration and monitoring information.')
class RadiusString(TextualConvention, OctetString):
    description = 'Used to represent the RADIUS authentication string.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 64)

wwpLeosRadiusClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1))
wwpLeosRadiusClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1))
wwpLeosRadiusClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 2))
wwpLeosRadiusClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 2, 0))
wwpLeosRadiusClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 3))
wwpLeosRadiusClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 3, 1))
wwpLeosRadiusClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 3, 2))
wwpLeosRadiusAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusAdminState.setDescription('Setting this object will administratively enable/disable radius client on the device.')
wwpLeosRadiusOperState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusOperState.setDescription('This object returns the operational state of radius client.')
wwpLeosRadiusClientTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientTimeout.setDescription('This is the time in seconds between retransmissions to the RADIUS server.')
wwpLeosRadiusClientRetries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientRetries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientRetries.setDescription('Indicates the number of times the RADIUS server should be tried before giving up on the server.')
wwpLeosRadiusClientAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 5), RadiusString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientAuthKey.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientAuthKey.setDescription('The Auth Key to be used for Radius Servers. Retrieving the value of this object via SNMP will return an empty string for security reasons.')
wwpLeosRadiusClientServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosRadiusClientServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerTable.setDescription('Lists the possible RADIUS servers. While creating entry following mib objects must be specified wwpLeosRadiusClientServerStatus, wwpLeosRadiusClientServerAddr. SNMP multiple set operation must be used to create entry.')
wwpLeosRadiusClientAuthKeyUnset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientAuthKeyUnset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientAuthKeyUnset.setDescription('Setting this object to true will cause the value of wwpLeosRadiusClientAuthKey to be cleared. Reading this object always return a value of false.')
wwpLeosRadiusClientAuthSecretUnset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientAuthSecretUnset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientAuthSecretUnset.setDescription('Setting this object to true will cause the value of wwpLeosRadiusClientAuthSecret to be cleared. Reading this object always return a value of false.')
wwpLeosRadiusClientServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-RADIUS-CLIENT-MIB", "wwpLeosRadiusClientServerIndex"))
if mibBuilder.loadTexts: wwpLeosRadiusClientServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerEntry.setDescription('Radius server entry.')
wwpLeosRadiusClientServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: wwpLeosRadiusClientServerIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerIndex.setDescription('Specifies the index of this table.')
wwpLeosRadiusClientServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAddr.setDescription('Host name or ip address of the RADIUS server.')
wwpLeosRadiusClientServerResolvedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerResolvedAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerResolvedAddr.setDescription('When wwpLeosRadiusClientServerAddr represents: Host name : The resolved address will either be Ipv4 address or Ipv6 address. Ipv4 address : The resolved address will be the same Ipv4 address. Ipv6 address : The resolved address will be the same Ipv6 address. When the resolved address represents: Ipv4 address : wwpLeosRadiusClientServerResolvedAddr will represent the resolved Ipv4 address. wwpLeosRadiusClientServerResolvedInetAddr used in conjunction with wwpLeosRadiusClientServerResolvedInetAddrType will represent the same Ipv4 address. Ipv6 address : wwpLeosRadiusClientServerResolvedAddr will represent 0.0.0.0. wwpLeosRadiusClientServerResolvedInetAddr used in conjunction with wwpLeosRadiusClientServerResolvedInetAddrType will represent the Ipv6 address.')
wwpLeosRadiusClientServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerPriority.setDescription('Specifies the priority of radius servers configured on the device.')
wwpLeosRadiusClientServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAuthPort.setDescription('The destination UDP port number to which RADIUS messages should be sent. The RADIUS server will not be used for authentication if this port number is 0.')
wwpLeosRadiusClientServerRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerRoundTripTime.setDescription('The time interval (in hundredths of a second) between the most recent Access-Reply/Access-Challenge and the Access-Request that matched it from this RADIUS authentication server.')
wwpLeosRadiusClientServerAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessRequests.setDescription('The number of RADIUS Access-Request packets sent to this server. This does not include retransmissions.')
wwpLeosRadiusClientServerAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessRetransmissions.setDescription('The number of RADIUS Access-Request packets retransmitted to this RADIUS authentication server.')
wwpLeosRadiusClientServerAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessAccepts.setDescription('The number of RADIUS Access-Accept packets (valid or invalid) received from this server.')
wwpLeosRadiusClientServerAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessRejects.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessRejects.setDescription('The number of RADIUS Access-Reject packets (valid or invalid) received from this server.')
wwpLeosRadiusClientServerAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets (valid or invalid) received from this server.')
wwpLeosRadiusClientServerMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerMalformedAccessResponses.setDescription('The number of malformed RADIUS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or Signature attributes or unknown types are not included as malformed access responses.')
wwpLeosRadiusClientServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerBadAuthenticators.setDescription('The number of RADIUS Access-Response packets containing invalid authenticators or Signature attributes received from this server.')
wwpLeosRadiusClientServerPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerPendingRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerPendingRequests.setDescription('The number of RADIUS Access-Request packets destined for this server that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to receipt of an Access-Accept, Access-Reject or Access-Challenge, a timeout or retransmission.')
wwpLeosRadiusClientServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a Request as well as a timeout.')
wwpLeosRadiusClientServerUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the authentication port.')
wwpLeosRadiusClientServerPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerPacketsDropped.setDescription('The number of RADIUS packets of which were received from this server on the authentication port and dropped for some other reason.')
wwpLeosRadiusClientServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerStatus.setDescription("To create a row in this table, a manager must set this object to createAndGo(4). While creating entry the following mib objects must be specified wwpLeosRadiusClientServerStatus, wwpLeosRadiusClientServerAddr. SNMP multiple set operation must be used to create entry. To disable a radius server, the operator can set wwpLeosRadiusClientServerStatus object to 'notInService' state.")
wwpLeosRadiusClientServerApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLogin", 1), ("dot1x", 2), ("all", 3))).clone('userLogin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerApplication.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerApplication.setDescription('This object specifies how the radius server should be used for authentication. Whether this radius server should be used for userLogin authentication or dot1x authentication or both is decided by the value of this mib object.')
wwpLeosRadiusClientServerResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerResolvedInetAddrType.setDescription('Specifies the resolved IP address type. This OID is used in conjunction with wwpLeosRadiusClientServerInetAddrress. When set to : ipv4 : wwpLeosRadiusClientServerInetAddress should be compliant with InetAddressIPv4 ipv6 : wwpLeosRadiusClientServerInetAddress should be compliant with InetAddressIPv6 ')
wwpLeosRadiusClientServerResolvedInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 6, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRadiusClientServerResolvedInetAddress.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientServerResolvedInetAddress.setDescription('Specifies the resolved IP address if wwpLeosRadiusClientServerAddr is set to host name. If wwpLeosRadiusClientServerAddr is set to ip address then wwpLeosRadiusClientServerResolvedInetAddress will contain same information as wwpLeosRadiusClientServerAddr. This OID should be used in conjuction with wwpLeosNtpServerResolvedInetAddrType.')
wwpLeosRadiusClientSearchType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cached", 1), ("priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRadiusClientSearchType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRadiusClientSearchType.setDescription('This object sets the search type of the radius client.')
mibBuilder.exportSymbols("WWP-LEOS-RADIUS-CLIENT-MIB", wwpLeosRadiusClientMIBCompliances=wwpLeosRadiusClientMIBCompliances, wwpLeosRadiusClientServerPacketsDropped=wwpLeosRadiusClientServerPacketsDropped, wwpLeosRadiusClientServerStatus=wwpLeosRadiusClientServerStatus, wwpLeosRadiusOperState=wwpLeosRadiusOperState, wwpLeosRadiusClientServerTable=wwpLeosRadiusClientServerTable, wwpLeosRadiusClientServerAccessRequests=wwpLeosRadiusClientServerAccessRequests, wwpLeosRadiusClientServerApplication=wwpLeosRadiusClientServerApplication, wwpLeosRadiusClientMIB=wwpLeosRadiusClientMIB, wwpLeosRadiusClientAuthSecretUnset=wwpLeosRadiusClientAuthSecretUnset, wwpLeosRadiusClient=wwpLeosRadiusClient, wwpLeosRadiusClientServerPriority=wwpLeosRadiusClientServerPriority, wwpLeosRadiusClientTimeout=wwpLeosRadiusClientTimeout, wwpLeosRadiusClientRetries=wwpLeosRadiusClientRetries, PYSNMP_MODULE_ID=wwpLeosRadiusClientMIB, wwpLeosRadiusClientServerResolvedAddr=wwpLeosRadiusClientServerResolvedAddr, wwpLeosRadiusClientServerBadAuthenticators=wwpLeosRadiusClientServerBadAuthenticators, wwpLeosRadiusClientServerMalformedAccessResponses=wwpLeosRadiusClientServerMalformedAccessResponses, wwpLeosRadiusClientMIBNotifications=wwpLeosRadiusClientMIBNotifications, wwpLeosRadiusClientServerEntry=wwpLeosRadiusClientServerEntry, wwpLeosRadiusClientServerRoundTripTime=wwpLeosRadiusClientServerRoundTripTime, wwpLeosRadiusClientServerTimeouts=wwpLeosRadiusClientServerTimeouts, wwpLeosRadiusClientServerResolvedInetAddress=wwpLeosRadiusClientServerResolvedInetAddress, wwpLeosRadiusClientServerResolvedInetAddrType=wwpLeosRadiusClientServerResolvedInetAddrType, wwpLeosRadiusAdminState=wwpLeosRadiusAdminState, wwpLeosRadiusClientServerPendingRequests=wwpLeosRadiusClientServerPendingRequests, wwpLeosRadiusClientServerAddr=wwpLeosRadiusClientServerAddr, wwpLeosRadiusClientServerUnknownTypes=wwpLeosRadiusClientServerUnknownTypes, wwpLeosRadiusClientMIBConformance=wwpLeosRadiusClientMIBConformance, wwpLeosRadiusClientServerAuthPort=wwpLeosRadiusClientServerAuthPort, wwpLeosRadiusClientMIBGroups=wwpLeosRadiusClientMIBGroups, wwpLeosRadiusClientSearchType=wwpLeosRadiusClientSearchType, wwpLeosRadiusClientServerAccessAccepts=wwpLeosRadiusClientServerAccessAccepts, wwpLeosRadiusClientServerAccessRetransmissions=wwpLeosRadiusClientServerAccessRetransmissions, wwpLeosRadiusClientMIBObjects=wwpLeosRadiusClientMIBObjects, wwpLeosRadiusClientMIBNotificationPrefix=wwpLeosRadiusClientMIBNotificationPrefix, wwpLeosRadiusClientAuthKey=wwpLeosRadiusClientAuthKey, wwpLeosRadiusClientServerAccessRejects=wwpLeosRadiusClientServerAccessRejects, wwpLeosRadiusClientServerAccessChallenges=wwpLeosRadiusClientServerAccessChallenges, RadiusString=RadiusString, wwpLeosRadiusClientServerIndex=wwpLeosRadiusClientServerIndex, wwpLeosRadiusClientAuthKeyUnset=wwpLeosRadiusClientAuthKeyUnset)
