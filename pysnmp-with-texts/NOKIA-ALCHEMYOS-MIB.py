#
# PySNMP MIB module NOKIA-ALCHEMYOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOKIA-ALCHEMYOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
nokiaAlchemyOS, = mibBuilder.importSymbols("NOKIA-OID-REGISTRATION-MIB", "nokiaAlchemyOS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, ObjectIdentity, Gauge32, Integer32, Unsigned32, Counter64, iso, enterprises, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "ObjectIdentity", "Gauge32", "Integer32", "Unsigned32", "Counter64", "iso", "enterprises", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alchemyOSProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 1))
if mibBuilder.loadTexts: alchemyOSProducts.setStatus('current')
if mibBuilder.loadTexts: alchemyOSProducts.setDescription('Nokia AlchemyOS products.')
alchemyOSMgmt = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 2))
if mibBuilder.loadTexts: alchemyOSMgmt.setStatus('current')
if mibBuilder.loadTexts: alchemyOSMgmt.setDescription('AlchemyOS management.')
alchemyOSExperiment = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 3))
if mibBuilder.loadTexts: alchemyOSExperiment.setStatus('current')
if mibBuilder.loadTexts: alchemyOSExperiment.setDescription('Experiment provides a root object identifier from which experimental mibs may be temporarily based. mibs are typicially based here if they fall in one of two categories 1) are IETF work-in-process mibs which have not been assigned a permanent object identifier by the IANA. 2) are Network Alchemy work-in-process which has not been assigned a permanent object identifier by the Network Alchemy assigned number authority, typicially because the MIB is not ready for deployment. NOTE WELL: support for MIBs in the alchemyOSExperiment subtree will be deleted when a permanent object identifier assignment is made.')
alchemyOSAdmin = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 4))
if mibBuilder.loadTexts: alchemyOSAdmin.setStatus('current')
if mibBuilder.loadTexts: alchemyOSAdmin.setDescription('Reserved for administratively assigned OBJECT IDENTIFIERS, i.e. those not associated with MIB objects')
alchemyOSModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 5))
if mibBuilder.loadTexts: alchemyOSModules.setStatus('current')
if mibBuilder.loadTexts: alchemyOSModules.setDescription('Provides a root object identifier from which MODULE-IDENTITY values may be assigned.')
alchemyOSTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 6))
if mibBuilder.loadTexts: alchemyOSTraps.setStatus('current')
if mibBuilder.loadTexts: alchemyOSTraps.setDescription('All the traps common to AlchemoOS fall under here.')
cryptoCluster = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 1))
if mibBuilder.loadTexts: cryptoCluster.setStatus('current')
if mibBuilder.loadTexts: cryptoCluster.setDescription('Crypto Cluster MIB.')
hardware = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 2))
if mibBuilder.loadTexts: hardware.setStatus('current')
if mibBuilder.loadTexts: hardware.setDescription('Crypto Cluster Hardware MIB.')
firewall = ObjectIdentity((1, 3, 6, 1, 4, 1, 94, 1, 45, 2, 3))
if mibBuilder.loadTexts: firewall.setStatus('current')
if mibBuilder.loadTexts: firewall.setDescription('AlchemyOS Firewall MIB.')
mibBuilder.exportSymbols("NOKIA-ALCHEMYOS-MIB", alchemyOSExperiment=alchemyOSExperiment, alchemyOSMgmt=alchemyOSMgmt, alchemyOSTraps=alchemyOSTraps, firewall=firewall, cryptoCluster=cryptoCluster, hardware=hardware, alchemyOSAdmin=alchemyOSAdmin, alchemyOSProducts=alchemyOSProducts, alchemyOSModules=alchemyOSModules)
