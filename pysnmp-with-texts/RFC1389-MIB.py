#
# PySNMP MIB module RFC1389-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1389-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:24:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, Unsigned32, Bits, IpAddress, Counter64, Integer32, Gauge32, MibIdentifier, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "Unsigned32", "Bits", "IpAddress", "Counter64", "Integer32", "Gauge32", "MibIdentifier", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mgmt = MibIdentifier((1, 3, 6, 1, 2))
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
rip2 = MibIdentifier((1, 3, 6, 1, 2, 1, 23))
class RouteTag(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

rip2GlobalGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 23, 1))
rip2GlobalRouteChanges = MibScalar((1, 3, 6, 1, 2, 1, 23, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2GlobalRouteChanges.setStatus('mandatory')
if mibBuilder.loadTexts: rip2GlobalRouteChanges.setDescription("The number of route changes made to the IP Route Database by RIP. This does not include the refresh of a route's age.")
rip2GlobalQueries = MibScalar((1, 3, 6, 1, 2, 1, 23, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2GlobalQueries.setStatus('mandatory')
if mibBuilder.loadTexts: rip2GlobalQueries.setDescription('The number of responses sent to RIP queries from other systems.')
rip2IfStatTable = MibTable((1, 3, 6, 1, 2, 1, 23, 2), )
if mibBuilder.loadTexts: rip2IfStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfStatTable.setDescription('A list of subnets which require separate status monitoring in RIP.')
rip2IfStatEntry = MibTableRow((1, 3, 6, 1, 2, 1, 23, 2, 1), ).setIndexNames((0, "RFC1389-MIB", "rip2IfStatAddress"))
if mibBuilder.loadTexts: rip2IfStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfStatEntry.setDescription('A Single Routing Domain in a single Subnet.')
rip2IfStatAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2IfStatAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfStatAddress.setDescription('The IP Address of this system on the indicated subnet. For unnumbered interfaces, the value 0.0.0.N, where the least significant 24 bits (N) is the ifIndex for the IP Interface in network byte order.')
rip2IfStatRcvBadPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2IfStatRcvBadPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfStatRcvBadPackets.setDescription('The number of RIP response packets received by the RIP process which were subsequently discarded for any reason (e.g. a version 0 packet, or an unknown command type).')
rip2IfStatRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2IfStatRcvBadRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfStatRcvBadRoutes.setDescription('The number of routes, in valid RIP packets, which were ignored for any reason (e.g. unknown address family, or invalid metric).')
rip2IfStatSentUpdates = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2IfStatSentUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfStatSentUpdates.setDescription('The number of triggered RIP updates actually sent on this interface. This explicitly does NOT include full updates sent containing new information.')
rip2IfStatStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfStatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfStatStatus.setDescription('Writing invalid has the effect of deleting this interface.')
rip2IfConfTable = MibTable((1, 3, 6, 1, 2, 1, 23, 3), )
if mibBuilder.loadTexts: rip2IfConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfTable.setDescription('A list of subnets which require separate configuration in RIP.')
rip2IfConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 23, 3, 1), ).setIndexNames((0, "RFC1389-MIB", "rip2IfConfAddress"))
if mibBuilder.loadTexts: rip2IfConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfEntry.setDescription('A Single Routing Domain in a single Subnet.')
rip2IfConfAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2IfConfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfAddress.setDescription('The IP Address of this system on the indicated subnet. For unnumbered interfaces, the value 0.0.0.N, where the least significant 24 bits (N) is the ifIndex for the IP Interface in network byte order.')
rip2IfConfDomain = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 2), RouteTag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfConfDomain.setStatus('deprecated')
if mibBuilder.loadTexts: rip2IfConfDomain.setDescription('Value inserted into the Routing Domain field of all RIP packets sent on this interface.')
rip2IfConfAuthType = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfConfAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfAuthType.setDescription('The type of Authentication used on this interface.')
rip2IfConfAuthKey = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfConfAuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfAuthKey.setDescription('The value to be used as the Authentication Key whenever the corresponding instance of rip2IfConfAuthType has the value simplePassword word. A modification of the corresponding instance of rip2IfConfAuthType does not modify the rip2IfConfAuthKey value. If a string shorter than 16 octets is supplied, it will be left- justified and padded to 16 octets, on the right, with nulls (0x00). Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
rip2IfConfSend = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("doNotSend", 1), ("ripVersion1", 2), ("rip1Compatible", 3), ("ripVersion2", 4), ("ripV1Demand", 5), ("ripV2Demand", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfConfSend.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfSend.setDescription('What the router sends on this interface. ripVersion1 implies sending RIP updates compliant with RFC 1058. rip1Compatible implies broadcasting RIP-2 updates using RFC 1058 route subsumption rules. ripVersion2 implies multicasting RIP-2 updates. ripV1Demand indicates the use of Demand RIP on a WAN interface under RIP Version 1 rules. ripV2Demand indicates the use of Demand RIP on a WAN interface under Version 2 rules.')
rip2IfConfReceive = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1OrRip2", 3), ("doNotRecieve", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfConfReceive.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfReceive.setDescription('This indicates which version of RIP updates are to be accepted. Note that rip2 and rip1OrRip2 implies reception of multicast packets.')
rip2IfConfDefaultMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfConfDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfDefaultMetric.setDescription('This variable indicates the metric that is to be used for the default route entry in RIP updates originated on this interface. A value of zero indicates that no default route should be originated; in this case, a default route via another router may be propagated.')
rip2IfConfStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfConfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfStatus.setDescription('Writing invalid has the effect of deleting this interface.')
rip2IfConfSrcAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2IfConfSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rip2IfConfSrcAddress.setDescription('The IP Address this system will use as a source address on this interface. If it is a numbered interface, this MUST be the same value as rip2IfConfAddress. On unnumbered interfaces, it must be the value of rip2IfConfAddress for some interface on the system.')
rip2PeerTable = MibTable((1, 3, 6, 1, 2, 1, 23, 4), )
if mibBuilder.loadTexts: rip2PeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: rip2PeerTable.setDescription('A list of RIP Peers.')
rip2PeerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 23, 4, 1), ).setIndexNames((0, "RFC1389-MIB", "rip2PeerAddress"), (0, "RFC1389-MIB", "rip2PeerDomain"))
if mibBuilder.loadTexts: rip2PeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rip2PeerEntry.setDescription('Information regarding a single routing peer.')
rip2PeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2PeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rip2PeerAddress.setDescription('The IP Address that the peer is using as its source address. Note that on an unnumbered link, this may not be a member of any subnet on the system.')
rip2PeerDomain = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 2), RouteTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2PeerDomain.setStatus('mandatory')
if mibBuilder.loadTexts: rip2PeerDomain.setDescription('The value in the Routing Domain field in RIP packets received from the peer. As domain suuport is deprecated, this must be zero.')
rip2PeerLastUpdate = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2PeerLastUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: rip2PeerLastUpdate.setDescription('The value of sysUpTime when the most recent RIP update was received from this system.')
rip2PeerVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2PeerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: rip2PeerVersion.setDescription('The RIP version number in the header of the last RIP packet received.')
rip2PeerRcvBadPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2PeerRcvBadPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rip2PeerRcvBadPackets.setDescription('The number of RIP response packets from this peer discarded as invalid.')
rip2PeerRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 23, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2PeerRcvBadRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: rip2PeerRcvBadRoutes.setDescription('The number of routes from this peer that were ignored because the entry format was invalid.')
mibBuilder.exportSymbols("RFC1389-MIB", rip2=rip2, rip2PeerDomain=rip2PeerDomain, rip2IfConfAddress=rip2IfConfAddress, rip2IfConfAuthKey=rip2IfConfAuthKey, rip2PeerAddress=rip2PeerAddress, rip2GlobalGroup=rip2GlobalGroup, rip2GlobalQueries=rip2GlobalQueries, rip2PeerTable=rip2PeerTable, rip2IfConfSend=rip2IfConfSend, rip2PeerRcvBadRoutes=rip2PeerRcvBadRoutes, rip2IfStatSentUpdates=rip2IfStatSentUpdates, rip2PeerEntry=rip2PeerEntry, rip2IfConfAuthType=rip2IfConfAuthType, rip2IfStatRcvBadRoutes=rip2IfStatRcvBadRoutes, rip2PeerRcvBadPackets=rip2PeerRcvBadPackets, mgmt=mgmt, mib_2=mib_2, rip2IfStatEntry=rip2IfStatEntry, rip2IfConfReceive=rip2IfConfReceive, rip2IfConfSrcAddress=rip2IfConfSrcAddress, rip2PeerVersion=rip2PeerVersion, rip2IfStatRcvBadPackets=rip2IfStatRcvBadPackets, rip2PeerLastUpdate=rip2PeerLastUpdate, rip2IfConfDefaultMetric=rip2IfConfDefaultMetric, rip2IfStatTable=rip2IfStatTable, rip2IfConfEntry=rip2IfConfEntry, rip2IfConfTable=rip2IfConfTable, rip2IfConfStatus=rip2IfConfStatus, RouteTag=RouteTag, rip2GlobalRouteChanges=rip2GlobalRouteChanges, rip2IfConfDomain=rip2IfConfDomain, rip2IfStatAddress=rip2IfStatAddress, rip2IfStatStatus=rip2IfStatStatus)
