#
# PySNMP MIB module TPLINK-NDDETECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-NDDETECTION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:25:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, ObjectIdentity, Counter32, TimeTicks, IpAddress, MibIdentifier, iso, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "ObjectIdentity", "Counter32", "TimeTicks", "IpAddress", "MibIdentifier", "iso", "Integer32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
tplinkNdDetectionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 93))
tplinkNdDetectionMIB.setRevisions(('2012-12-17 10:14',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkNdDetectionMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkNdDetectionMIB.setLastUpdated('201212171014Z')
if mibBuilder.loadTexts: tplinkNdDetectionMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkNdDetectionMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkNdDetectionMIB.setDescription('Private MIB for ND Detection configuration.')
tplinkNdDetectionMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1))
tplinkNdDetectionNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 93, 2))
ndDetectionGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 1))
ndDetectionPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 3))
ndDetectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndDetectionEnable.setStatus('current')
if mibBuilder.loadTexts: ndDetectionEnable.setDescription('0. disable 1. enable Enable or disable the ND Detection function globally.')
ndDetectionVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 1, 2), )
if mibBuilder.loadTexts: ndDetectionVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: ndDetectionVlanConfigTable.setDescription('Here you can view and modify the ND Detection VLAN config table.')
ndDetectionVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 1, 2, 1), ).setIndexNames((0, "TPLINK-NDDETECTION-MIB", "ndDetectionVlanId"))
if mibBuilder.loadTexts: ndDetectionVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ndDetectionVlanConfigEntry.setDescription('An entry contains of the ND Detection function enable status information of a VLAN.')
ndDetectionVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndDetectionVlanId.setStatus('current')
if mibBuilder.loadTexts: ndDetectionVlanId.setDescription('Enter the ID number of VLAN,1-4094.')
ndDetectionVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ndDetectionVlanStatus.setStatus('current')
if mibBuilder.loadTexts: ndDetectionVlanStatus.setDescription('0. disable 1. enable Enable or disable ND Detection function in specified VLAN. ')
ndDetectionPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 3, 1), )
if mibBuilder.loadTexts: ndDetectionPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: ndDetectionPortConfigTable.setDescription('A list of ND Detection port config entries. Here you can configure the port parameters for the ND Detection.')
ndDetectionPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ndDetectionPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ndDetectionPortConfigEntry.setDescription('An entry contains of the information of ND Detection port config.')
ndDetectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndDetectionPort.setStatus('current')
if mibBuilder.loadTexts: ndDetectionPort.setDescription('Display port number')
ndDetectionPortConfigTrustedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndDetectionPortConfigTrustedPort.setStatus('current')
if mibBuilder.loadTexts: ndDetectionPortConfigTrustedPort.setDescription('0. disable 1. enable Select Enable/Disable the port to be a Trusted Port. Only the Trusted Port can forward the Router Advertisement Message and Router Redirect Message from Routers.')
ndDetectionPortConfigPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 93, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndDetectionPortConfigPortLag.setStatus('current')
if mibBuilder.loadTexts: ndDetectionPortConfigPortLag.setDescription('The LAG to which the port belongs to.')
mibBuilder.exportSymbols("TPLINK-NDDETECTION-MIB", tplinkNdDetectionNotifications=tplinkNdDetectionNotifications, ndDetectionVlanConfigTable=ndDetectionVlanConfigTable, ndDetectionPortConfigTable=ndDetectionPortConfigTable, ndDetectionPort=ndDetectionPort, PYSNMP_MODULE_ID=tplinkNdDetectionMIB, ndDetectionPortConfig=ndDetectionPortConfig, ndDetectionGlobalConfig=ndDetectionGlobalConfig, ndDetectionPortConfigTrustedPort=ndDetectionPortConfigTrustedPort, tplinkNdDetectionMIB=tplinkNdDetectionMIB, ndDetectionVlanConfigEntry=ndDetectionVlanConfigEntry, ndDetectionVlanStatus=ndDetectionVlanStatus, tplinkNdDetectionMIBObjects=tplinkNdDetectionMIBObjects, ndDetectionPortConfigPortLag=ndDetectionPortConfigPortLag, ndDetectionEnable=ndDetectionEnable, ndDetectionPortConfigEntry=ndDetectionPortConfigEntry, ndDetectionVlanId=ndDetectionVlanId)
