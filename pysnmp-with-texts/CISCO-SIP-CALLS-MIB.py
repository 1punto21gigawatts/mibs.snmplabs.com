#
# PySNMP MIB module CISCO-SIP-CALLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SIP-CALLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CvcCoderTypeRate, = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcCoderTypeRate")
callActiveIndex, callActiveSetupTime = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "callActiveIndex", "callActiveSetupTime")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, iso, MibIdentifier, TimeTicks, Counter64, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, ObjectIdentity, IpAddress, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "MibIdentifier", "TimeTicks", "Counter64", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "ObjectIdentity", "IpAddress", "Integer32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoSipCallsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 995))
ciscoSipCallsMIB.setRevisions(('2004-04-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSipCallsMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSipCallsMIB.setLastUpdated('200404160000Z')
if mibBuilder.loadTexts: ciscoSipCallsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSipCallsMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-sip@cisco.com')
if mibBuilder.loadTexts: ciscoSipCallsMIB.setDescription('The Cisco Session Initiation Protocol (SIP) Calls MIB module is designed to provide protocol-specific information on SIP calls which are currently active. SIP is an application-layer signalling protocol for creating, modifying and terminating multimedia sessions with one or more participants. SIP is defined in RFC 3261 (June 2002). The endpoints in a SIP communication are called user agents. A user agent is an application which contains both a User Agent Client (UAC) and a User Agent Server (UAS). A UAC is an application that initiates a SIP request. A UAS is an application that contacts the user when a SIP request is received and that returns a response on behalf of the user. This MIB module provides information on SIP calls and the user agents initiating these calls. Also, it provides a way to manage media forking of SIP calls.')
ciscoSipCallsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 995, 0))
ciscoSipCallsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 995, 1))
cSipCallActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1))
cSipCallsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 2))
class CSipCallState(TextualConvention, Integer32):
    description = "A textual convention containing the list of call states a SIP call undergoes. The list of call states and their descriptions are given below : 'none' - None of the following. 'idle' - SIP communication has not been initiated. 'setupBuffered' - A setup indication has been received from the application, but it has been buffered. The INVITE will be sent at a later time. 'sentInvite' - A SIP INVITE request has been sent and no response has been received. 'rcvdProceeding' - A non-final response (1xx) has been received in response to an INVITE request. 'outgoingResrResv' - A PRACK has been sent after receiving a 183 and QoS resource reservation has been initiated. 'outgoingResrAllocated' - QoS reservations have completed and an UPDATE has been sent. 'active' - A 2xx (Success) response has been received for an INVITE message and the call is now active. 'rcvdTransfer' - A SIP REFER request was received for an active call. 'disconnecting' - A SIP BYE or CANCEL request has been sent and no response has been received. 'dead' - The call has been cleared in normal or abnormal fashion. 'rcvdInvite' - A SIP INVITE request has been received for an incoming SIP call. 'sentQosProgress' - An INVITE with QoS precondition has been received. A 183 Session Progress response has been sent in response. 'incomingResrResv' - A 200 (OK) for a PRACK has been sent out and QoS resource reservation has been initiated. 'sentAlerting' - A SIP 180 (Ringing) response has been sent. 'sentSuccess' - A SIP 2xx response has been sent. 'midCallLocalRespPending' - A SIP mid-call INVITE was received and the response has not been sent yet. 'sendMidCallInvitePending' - A SIP call is active and a mid-call INVITE needs to be sent. 'sentMidCallInvite' - A SIP mid-call INVITE has been sent. 'rcvdSubscribe' - A SIP SUBSCRIBE request was received. 'subscribeSuccess' - A response for the SUBSCRIBE request was received. 'subscribeExpired' - The SUBSCRIBE request for a particular event has expired. 'sentPreAuthRequest' - A SIP INVITE was received and a preauthorization request has been sent. 'sendNotify' - A NOTIFY message for an event earlier subscribed was sent. 'subscribeIdle' - This state is the initialization state for SUBSCRIBE/NOTIFY messages. 'sentSubscribe' - A SIP SUBSCRIBE request has been sent. 'subscribed' - The user agent has been subscribed with the messaging system. 'initTransfer' - A SIP REFER request was received and the call was placed on hold in preparation for the transfer. 'outgoingRegister' - A SIP REGISTER message has been sent. 'incomingRegister' - A SIP REGISTER message has been received. 'rcvdUnsolicitedNotify' - A Cisco-proprietary unsolicited NOTIFY message was received."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))
    namedValues = NamedValues(("none", 1), ("idle", 2), ("setupBuffered", 3), ("sentInvite", 4), ("rcvdProceeding", 5), ("outgoingResrResv", 6), ("outgoingResrAllocated", 7), ("active", 8), ("rcvdTransfer", 9), ("disconnecting", 10), ("dead", 11), ("rcvdInvite", 12), ("sentQosProgress", 13), ("incomingResrResv", 14), ("sentAlerting", 15), ("sentSuccess", 16), ("midCallLocalRespPending", 17), ("sendMidCallInvitePending", 18), ("sentMidCallInvite", 19), ("rcvdSubscribe", 20), ("subscribeSuccess", 21), ("subscribeExpired", 22), ("sentPreAuthRequest", 23), ("sendNotify", 24), ("subscribeIdle", 25), ("sentSubscribe", 26), ("subscribed", 27), ("initTransfer", 28), ("outgoingRegister", 29), ("incomingRegister", 30), ("rcvdUnsolicitedNotify", 31))

class CSipCallSubstate(TextualConvention, Integer32):
    description = "A textual convention containing the list of call substates a SIP call undergoes. The list of substates and their descriptions are given below: 'none' - None of the following. 'sentDns' - A DNS request has been sent to the DNS server. 'proceedingProceeding' - A non-final 1xx response was received, while in rcvdProceeding state. 'rcvdInviteCallSetup' - A SIP INVITE has been received and the call is being set up. 'rcvdInviteProceeding' - A 100 (Trying) response was received for a INVITE request. 'sentEnum' - An ENUM query is in progress. 'ackPending' - An acknowledgement pending for any message sent. 'sentNotify' - A NOTIFY message for any subscribed event was sent. 'callTransferSendByeAlso' - A BYE request was sent with an 'Also' header."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("sentDns", 2), ("proceedingProceeding", 3), ("rcvdInviteCallSetup", 4), ("rcvdInviteProceeding", 5), ("sentEnum", 6), ("ackPending", 7), ("sentNotify", 8), ("callTransferSendByeAlso", 9))

cSipUACActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipUACActiveCalls.setStatus('current')
if mibBuilder.loadTexts: cSipUACActiveCalls.setDescription("This object reflects the number of UAC calls currently active. UAC calls are those calls which are initiated by this system's SIP user agent on behalf of users acting as the calling party.")
cSipUASActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipUASActiveCalls.setStatus('current')
if mibBuilder.loadTexts: cSipUASActiveCalls.setDescription("This object reflects the number of UAS calls currently active. UAS calls are those calls which are received by this system's SIP user agent on behalf of users acting as the called party.")
cSipCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3), )
if mibBuilder.loadTexts: cSipCallActiveTable.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveTable.setDescription('This table is the SIP extension to cvVoIPCallActiveTable of CISCO-VOICE-DIAL-CONTROL-MIB. It represents UAC and UAS information on active SIP calls.')
cSipCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cSipCallActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveEntry.setDescription('An entry contains information regarding a single active SIP Call. The active call entry is identified by using the same index objects that are used by callActiveTable of IETF DIAL-CONTROL-MIB to identify the call.')
cSipCallActiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveId.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveId.setDescription('This object represents the protocol specific unique identifier for this call.')
cSipCallActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uac", 1), ("uas", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveType.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveType.setDescription("This object denotes whether the call is a UAC or a UAS one. 'uac' - User Agent Client 'uas' - User Agent Server.")
cSipCallActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 3), CSipCallState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveState.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveState.setDescription('This object reflects the current state of the call.')
cSipCallActiveSubstate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 4), CSipCallSubstate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveSubstate.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveSubstate.setDescription('This object reflects the current substate of the call.')
cSipCallActiveCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveCallingNumber.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveCallingNumber.setDescription('Indicates the calling number.')
cSipCallActiveCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveCalledNumber.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveCalledNumber.setDescription('Indicates the called Number.')
cSipCallActiveSigSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveSigSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveSigSrcIpAddrType.setDescription('Internet type of the signaling source IP address.')
cSipCallActiveSigSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveSigSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveSigSrcIpAddr.setDescription('This object reflects the signaling source IP address. Its value should be interpreted within the context of the associated cSipCallActiveSigSrcIpAddrType object.')
cSipCallActiveDestReqIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveDestReqIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveDestReqIpAddrType.setDescription('Internet type of the signaling destination request IP address.')
cSipCallActiveDestReqIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveDestReqIpAddr.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveDestReqIpAddr.setDescription('This object reflects the signaling destination request IP address. Its value should be interpreted within the context of the associated cSipCallActiveDestReqIpAddrType object.')
cSipCallActiveDestReqPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 11), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveDestReqPort.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveDestReqPort.setDescription('This object reflects the signaling destination request port number.')
cSipCallActiveDestResIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveDestResIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveDestResIpAddrType.setDescription('Internet type of the signaling destination response IP address.')
cSipCallActiveDestResIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveDestResIpAddr.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveDestResIpAddr.setDescription('This object reflects the signaling destination response IP address. Its value should be interpreted within the context of the associated cSipCallActiveDestResIpAddrType object.')
cSipCallActiveDestResPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveDestResPort.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveDestResPort.setDescription('This object reflects the signaling destination response port number.')
cSipCallActiveDestIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveDestIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveDestIpAddrType.setDescription('Internet type of the signaling destination IP address.')
cSipCallActiveDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveDestIpAddr.setDescription('This object reflects the signaling destination IP address. It may be either a DNS hostname or an IP address. Its value should be interpreted within the context of the associated cSipCallActiveDestIpAddrType object.')
cSipCallActiveMediaStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveMediaStreams.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveMediaStreams.setDescription('If the call is a media-forked one, this object reflects the number of media streams.')
cSipCallActiveMediaStreamsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipCallActiveMediaStreamsActive.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveMediaStreamsActive.setDescription('If the call is a media-forked one, this object reflects the number of media streams currently active.')
cSipMediaStreamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4), )
if mibBuilder.loadTexts: cSipMediaStreamsTable.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamsTable.setDescription('This table contains objects relating to the media streams that get forked in a SIP call. It includes information about each media stream, if it is a media-forked call.')
cSipMediaStreamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"), (0, "CISCO-SIP-CALLS-MIB", "cSipMediaStreamIndex"))
if mibBuilder.loadTexts: cSipMediaStreamsEntry.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamsEntry.setDescription('Each entry in this table, represents information regarding a media stream associated with a SIP call. Conceptually it is a nested table within a call entry in the cSipCallActiveTable.')
cSipMediaStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cSipMediaStreamIndex.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamIndex.setDescription('The unique media stream identifier for a single call.')
cSipMediaStreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalidStreamState", 1), ("idle", 2), ("adding", 3), ("deleting", 4), ("changing", 5), ("active", 6), ("dead", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamState.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamState.setDescription("The current state of the media stream. 'invalidStreamState' - None of the following. 'idle' - Initialization state. The stream is yet to be forked. 'adding' - The stream is getting forked. 'deleting' - The stream is being deleted from the call. 'changing' - The stream is in the process of changing its state. 'active' - The stream is now active and communication is on. 'dead' - The stream has been cleared.")
cSipMediaStreamCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamCallId.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamCallId.setDescription('This object represents the stream call identifier indicated by the media stream header. A value of -1 indicates that the stream is in DEAD state.')
cSipMediaStreamType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("voiceOnly", 1), ("dtmfRelay", 2), ("voiceAndDtmfRelay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamType.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamType.setDescription("This object identifies the type of the Media Stream. 'voiceOnly' - Voice-only media streams send all audio from the DS0 channel. 'dtmfRelay' - Dual Tone Multi Frequency Tones. 'voiceAndDtmfRelay' - Send both encoded voice and DTMF-relay packets.")
cSipMediaStreamNegotdCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 5), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamNegotdCodec.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamNegotdCodec.setDescription('This object reflects the codec selected for the media stream.')
cSipMediaStreamCodecPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamCodecPayloadType.setReference('RFC 3551, Section 6.')
if mibBuilder.loadTexts: cSipMediaStreamCodecPayloadType.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamCodecPayloadType.setDescription('The RTP payload type of the media stream. RTP payload specifies the data transported by RTP in a packet, for example audio samples or compressed video data. A value of -1 means that no codec has been negotiated. RFC 3551 specifies the payload type number to be used with different codecs. The following are some of the standard payload types applicable to SIP calls : PT Encoding Name 0 PCMU(G711ulaw) 3 GSM 4 G723 8 PCMA(G711alaw) 9 G722 15 G728 18 G729 96--127 dynamic For other codecs, dynamic payload types in the range 96--127 are negotiated during call setup. Also note that Cisco has preassigned certain payload types in this dynamic range for certain encodings: PT Function 96 fax 97 fax-ack 100 NSE 101 NTE 121 DTMF-relay 122 Fax-relay 123 CAS 125 ClearChan')
cSipMediaStreamNegotdDtmfRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inBandVoice", 1), ("rtpNte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamNegotdDtmfRelay.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamNegotdDtmfRelay.setDescription("This object reflects the DTMF-relay selected for the media stream indicated by the media stream header. 'inBandVoice' - DTMF digits are sent as in-band audio. 'rtpNte' - RTP Named Telephony Event. RTP-NTE is described in RFC 2833.")
cSipMediaStreamDtmfPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamDtmfPayloadType.setReference('RFC 3551, Section 6.')
if mibBuilder.loadTexts: cSipMediaStreamDtmfPayloadType.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamDtmfPayloadType.setDescription('The RTP payload type of the negotiated DTMF-relay. RTP payload specifies the data transported by RTP in a packet, for example audio samples or compressed video data. A value of -1 means that no codec has been negotiated. RFC 3551 specifies the payload type number to be used with different codecs. The following are some of the standard payload types applicable to SIP calls : PT Encoding Name 0 PCMU(G711ulaw) 3 GSM 4 G723 8 PCMA(G711alaw) 9 G722 15 G728 18 G729 96--127 dynamic For other codecs, dynamic payload types in the range 96--127 are negotiated during call setup. Also note that Cisco has preassigned certain payload types in this dynamic range for certain encodings: PT Function 96 fax 97 fax-ack 100 NSE 101 NTE 121 DTMF-relay 122 Fax-relay 123 CAS 125 ClearChan')
cSipMediaStreamSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamSrcIpAddrType.setDescription('Internet type of the media stream source IP address.')
cSipMediaStreamSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamSrcIpAddr.setDescription('This object reflects the source IP address of the media stream. Its value should be interpreted within the context of the associated cSipMediaStreamSrcIpAddrType object.')
cSipMediaStreamSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 11), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamSrcPort.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamSrcPort.setDescription('This object reflects the UDP port of the media stream source.')
cSipMediaStreamDestIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamDestIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamDestIpAddrType.setDescription('Internet type of the media stream destination IP address.')
cSipMediaStreamDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamDestIpAddr.setDescription('This object reflects the destination IP address of the media stream. Its value should be interpreted within the context of the associated cSipMediaStreamDestIpAddrType object.')
cSipMediaStreamDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 1, 4, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSipMediaStreamDestPort.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamDestPort.setDescription('This object reflects the UDP port of the media stream destination.')
cSipCallsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 2, 1))
cSipCallsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 2, 2))
cSipCallsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 2, 1, 1)).setObjects(("CISCO-SIP-CALLS-MIB", "cSipCallActiveGroup"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSipCallsMIBCompliance = cSipCallsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cSipCallsMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-SIP-CALLS-MIB')
cSipCallActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 2, 2, 1)).setObjects(("CISCO-SIP-CALLS-MIB", "cSipUACActiveCalls"), ("CISCO-SIP-CALLS-MIB", "cSipUASActiveCalls"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveId"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveType"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveState"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveSubstate"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveCallingNumber"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveCalledNumber"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveSigSrcIpAddrType"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveSigSrcIpAddr"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveDestReqIpAddrType"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveDestReqIpAddr"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveDestReqPort"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveDestResIpAddrType"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveDestResIpAddr"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveDestResPort"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveDestIpAddrType"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveDestIpAddr"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveMediaStreams"), ("CISCO-SIP-CALLS-MIB", "cSipCallActiveMediaStreamsActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSipCallActiveGroup = cSipCallActiveGroup.setStatus('current')
if mibBuilder.loadTexts: cSipCallActiveGroup.setDescription('A collection of objects providing the active SIP calls capability.')
cSipMediaStreamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 995, 1, 2, 2, 2)).setObjects(("CISCO-SIP-CALLS-MIB", "cSipMediaStreamState"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamCallId"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamType"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamNegotdCodec"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamCodecPayloadType"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamNegotdDtmfRelay"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamDtmfPayloadType"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamSrcIpAddrType"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamSrcIpAddr"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamSrcPort"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamDestIpAddrType"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamDestIpAddr"), ("CISCO-SIP-CALLS-MIB", "cSipMediaStreamDestPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSipMediaStreamGroup = cSipMediaStreamGroup.setStatus('current')
if mibBuilder.loadTexts: cSipMediaStreamGroup.setDescription('A collection of objects providing the media stream information capability.')
mibBuilder.exportSymbols("CISCO-SIP-CALLS-MIB", PYSNMP_MODULE_ID=ciscoSipCallsMIB, cSipCallActiveDestIpAddrType=cSipCallActiveDestIpAddrType, cSipCallActiveDestReqIpAddr=cSipCallActiveDestReqIpAddr, cSipMediaStreamDestPort=cSipMediaStreamDestPort, cSipCallsMIBGroups=cSipCallsMIBGroups, cSipUASActiveCalls=cSipUASActiveCalls, cSipCallActiveDestIpAddr=cSipCallActiveDestIpAddr, cSipMediaStreamCallId=cSipMediaStreamCallId, cSipCallActiveType=cSipCallActiveType, ciscoSipCallsMIBNotifs=ciscoSipCallsMIBNotifs, cSipCallActiveCalledNumber=cSipCallActiveCalledNumber, cSipCallActiveTable=cSipCallActiveTable, cSipCallsMIBConformance=cSipCallsMIBConformance, cSipCallActiveId=cSipCallActiveId, cSipCallActive=cSipCallActive, cSipCallActiveDestReqPort=cSipCallActiveDestReqPort, cSipMediaStreamCodecPayloadType=cSipMediaStreamCodecPayloadType, cSipMediaStreamNegotdDtmfRelay=cSipMediaStreamNegotdDtmfRelay, cSipMediaStreamDestIpAddr=cSipMediaStreamDestIpAddr, cSipCallActiveSubstate=cSipCallActiveSubstate, cSipCallsMIBCompliance=cSipCallsMIBCompliance, cSipCallActiveDestReqIpAddrType=cSipCallActiveDestReqIpAddrType, cSipMediaStreamsTable=cSipMediaStreamsTable, cSipMediaStreamDtmfPayloadType=cSipMediaStreamDtmfPayloadType, cSipCallActiveSigSrcIpAddr=cSipCallActiveSigSrcIpAddr, cSipMediaStreamDestIpAddrType=cSipMediaStreamDestIpAddrType, cSipCallActiveDestResPort=cSipCallActiveDestResPort, cSipCallActiveDestResIpAddr=cSipCallActiveDestResIpAddr, CSipCallSubstate=CSipCallSubstate, cSipMediaStreamSrcIpAddrType=cSipMediaStreamSrcIpAddrType, cSipCallsMIBCompliances=cSipCallsMIBCompliances, cSipMediaStreamSrcPort=cSipMediaStreamSrcPort, cSipCallActiveDestResIpAddrType=cSipCallActiveDestResIpAddrType, cSipMediaStreamState=cSipMediaStreamState, cSipMediaStreamGroup=cSipMediaStreamGroup, cSipMediaStreamType=cSipMediaStreamType, cSipCallActiveEntry=cSipCallActiveEntry, cSipUACActiveCalls=cSipUACActiveCalls, cSipMediaStreamsEntry=cSipMediaStreamsEntry, cSipCallActiveGroup=cSipCallActiveGroup, cSipMediaStreamIndex=cSipMediaStreamIndex, cSipCallActiveCallingNumber=cSipCallActiveCallingNumber, ciscoSipCallsMIB=ciscoSipCallsMIB, cSipCallActiveSigSrcIpAddrType=cSipCallActiveSigSrcIpAddrType, cSipCallActiveMediaStreams=cSipCallActiveMediaStreams, cSipCallActiveMediaStreamsActive=cSipCallActiveMediaStreamsActive, cSipMediaStreamSrcIpAddr=cSipMediaStreamSrcIpAddr, cSipMediaStreamNegotdCodec=cSipMediaStreamNegotdCodec, ciscoSipCallsMIBObjects=ciscoSipCallsMIBObjects, cSipCallActiveState=cSipCallActiveState, CSipCallState=CSipCallState)
