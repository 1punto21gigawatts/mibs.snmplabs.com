#
# PySNMP MIB module RS232-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RS232-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, experimental, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, NotificationType, Gauge32, ModuleIdentity, ObjectIdentity, MibIdentifier, Bits, Integer32, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "experimental", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "NotificationType", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Bits", "Integer32", "Counter64", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rs232 = MibIdentifier((1, 3, 6, 1, 3, 20))
rs232Number = MibScalar((1, 3, 6, 1, 3, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232Number.setStatus('mandatory')
if mibBuilder.loadTexts: rs232Number.setDescription('The number of ports (regardless of their current state) in the RS-232-like general port table.')
rs232PortTable = MibTable((1, 3, 6, 1, 3, 20, 2), )
if mibBuilder.loadTexts: rs232PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortTable.setDescription('A list of port entries. The number of entries is given by the value of rs232Number.')
rs232PortEntry = MibTableRow((1, 3, 6, 1, 3, 20, 2, 1), ).setIndexNames((0, "RS232-MIB", "rs232PortIndex"))
if mibBuilder.loadTexts: rs232PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortEntry.setDescription('Status and parameter values for a port.')
rs232PortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortIndex.setDescription('A unique value for each port. Its value ranges between 1 and the value of rs232Number. By convention and if possible, hardware port numbers map directly to external connectors. The value for each port must remain constant at least from one re-initialization of the network management agent to the next.')
rs232PortType = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortType.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortType.setDescription("The port's hardware type.")
rs232PortInSigNumber = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortInSigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortInSigNumber.setDescription('The number of input signals for the port in the input signal table (rs232PortInSigTable). The table contains entries only for those signals the software can detect.')
rs232PortOutSigNumber = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortOutSigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortOutSigNumber.setDescription('The number of output signals for the port in the output signal table (rs232PortOutSigTable). The table contains entries only for those signals the software can assert.')
rs232PortInSpeed = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortInSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortInSpeed.setDescription("The port's input speed in bits per second.")
rs232PortOutSpeed = MibTableColumn((1, 3, 6, 1, 3, 20, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortOutSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortOutSpeed.setDescription("The port's output speed in bits per second.")
rs232AsyncPortTable = MibTable((1, 3, 6, 1, 3, 20, 3), )
if mibBuilder.loadTexts: rs232AsyncPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortTable.setDescription('A list of asynchronous port entries. The maximum entry number is given by the value of rs232Number. Entries need not exist for synchronous ports.')
rs232AsyncPortEntry = MibTableRow((1, 3, 6, 1, 3, 20, 3, 1), ).setIndexNames((0, "RS232-MIB", "rs232AsyncPortIndex"))
if mibBuilder.loadTexts: rs232AsyncPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortEntry.setDescription('Status and parameter values for an asynchronous port.')
rs232AsyncPortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortIndex.setDescription('A unique value for each port. Its value is the same as rs232PortIndex for the port.')
rs232AsyncPortBits = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortBits.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortBits.setDescription("The port's number of bits in a character.")
rs232AsyncPortStopBits = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("one-and-half", 3), ("dynamic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortStopBits.setDescription("The port's number of stop bits.")
rs232AsyncPortParity = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortParity.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortParity.setDescription("The port's sense of a character parity bit.")
rs232AsyncPortAutobaud = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortAutobaud.setDescription("A control for the port's ability to automatically sense input speed. When rs232PortAutoBaud is 'enabled', a port may autobaud to values different from the set values for speed, parity, and character size. As a result a network management system may temporarily observe values different from what was previously set.")
rs232AsyncPortParityErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortParityErrs.setDescription("Total number of characters with a parity error, input from the port since system re-initialization and while the port state was 'up' or 'test'.")
rs232AsyncPortFramingErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortFramingErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortFramingErrs.setDescription("Total number of characters with a framing error, input from the port since system re-initialization and while the port state was 'up' or 'test'.")
rs232AsyncPortOverrunErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortOverrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortOverrunErrs.setDescription("Total number of characters with an overrun error, input from the port since system re-initialization and while the port state was 'up' or 'test'.")
rs232SyncPortTable = MibTable((1, 3, 6, 1, 3, 20, 4), )
if mibBuilder.loadTexts: rs232SyncPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortTable.setDescription('A list of synchronous port entries. The maximum entry number is given by the value of rs232Number. Entries need not exist for asynchronous ports.')
rs232SyncPortEntry = MibTableRow((1, 3, 6, 1, 3, 20, 4, 1), ).setIndexNames((0, "RS232-MIB", "rs232SyncPortIndex"))
if mibBuilder.loadTexts: rs232SyncPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortEntry.setDescription('Status and parameter values for a synchronous port.')
rs232SyncPortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortIndex.setDescription('A unique value for each port. Its value is the same as rs232PortIndex for the port.')
rs232SyncPortClockSource = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("split", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortClockSource.setDescription("Source of the port's bit rate clock. 'split' means the tranmit clock is internal and the receive clock is external.")
rs232SyncPortFrameCheckErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortFrameCheckErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortFrameCheckErrs.setDescription("Total number of frames with an invalid frame check sequence, input from the port since system re-initialization and while the port state was 'up' or 'test'.")
rs232SyncPortTransmitUnderrunErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortTransmitUnderrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortTransmitUnderrunErrs.setDescription("Total number of frames that failed to be transmitted on the port since system re-initialization and while the port state was 'up' or 'test' because data was not available to the transmitter in time.")
rs232SyncPortReceiveOverrunErrs = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortReceiveOverrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortReceiveOverrunErrs.setDescription("Total number of frames that failed to be received on the port since system re-initialization and while the port state was 'up' or 'test' because the receiver did not accept the data in time.")
rs232SyncPortInterruptedFrames = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortInterruptedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortInterruptedFrames.setDescription("Total number of frames that failed to be received or transmitted on the port due to loss of modem signals since system re-initialization and while the port state was 'up' or 'test'.")
rs232SyncPortAbortedFrames = MibTableColumn((1, 3, 6, 1, 3, 20, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortAbortedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortAbortedFrames.setDescription("Number of frames aborted on the port due to receiving an abort sequence since system re-initialization and while the port state was 'up' or 'test'.")
rs232InSigTable = MibTable((1, 3, 6, 1, 3, 20, 5), )
if mibBuilder.loadTexts: rs232InSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigTable.setDescription('A list of port input control signal entries.')
rs232InSigEntry = MibTableRow((1, 3, 6, 1, 3, 20, 5, 1), ).setIndexNames((0, "RS232-MIB", "rs232InSigPortIndex"), (0, "RS232-MIB", "rs232InSigName"))
if mibBuilder.loadTexts: rs232InSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigEntry.setDescription('Input control signal status for a hardware port.')
rs232InSigPortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigPortIndex.setDescription('The value of rs232PortIndex for the port to which this entry belongs.')
rs232InSigName = MibTableColumn((1, 3, 6, 1, 3, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6), ("sq", 7), ("srs", 8), ("srts", 9), ("scts", 10), ("sdcd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigName.setReference('EIA Standard RS-232-C, August 1969.')
if mibBuilder.loadTexts: rs232InSigName.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigName.setDescription('Identification of a hardware signal, as follows: rts Request to Send cts Clear to Send dsr Data Set Ready dtr Data Terminal Ready ri Ring Indicator dcd Received Line Signal Detector sq Signal Quality Detector srs Data Signaling Rate Selector srts Secondary Request to Send scts Secondary Clear to Send sdcd Secondary Received Line Signal Detector ')
rs232InSigState = MibTableColumn((1, 3, 6, 1, 3, 20, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigState.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigState.setDescription('The current signal state.')
rs232InSigChanges = MibTableColumn((1, 3, 6, 1, 3, 20, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigChanges.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigChanges.setDescription("The number of times the signal has changed from 'on' to 'off' or from 'off' to 'on'.")
rs232OutSigTable = MibTable((1, 3, 6, 1, 3, 20, 6), )
if mibBuilder.loadTexts: rs232OutSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigTable.setDescription('A list of port output control signal entries.')
rs232OutSigEntry = MibTableRow((1, 3, 6, 1, 3, 20, 6, 1), ).setIndexNames((0, "RS232-MIB", "rs232OutSigPortIndex"), (0, "RS232-MIB", "rs232OutSigName"))
if mibBuilder.loadTexts: rs232OutSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigEntry.setDescription('Output control signal status for a hardware port.')
rs232OutSigPortIndex = MibTableColumn((1, 3, 6, 1, 3, 20, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigPortIndex.setDescription('The value of rs232PortIndex for the port to which this entry belongs.')
rs232OutSigName = MibTableColumn((1, 3, 6, 1, 3, 20, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6), ("sq", 7), ("srs", 8), ("srts", 9), ("scts", 10), ("sdcd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigName.setReference('EIA Standard RS-232-C, August 1969.')
if mibBuilder.loadTexts: rs232OutSigName.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigName.setDescription('Identification of a hardware signal, as follows: rts Request to Send cts Clear to Send dsr Data Set Ready dtr Data Terminal Ready ri Ring Indicator dcd Received Line Signal Detector sq Signal Quality Detector srs Data Signaling Rate Selector srts Secondary Request to Send scts Secondary Clear to Send sdcd Secondary Received Line Signal Detector ')
rs232OutSigState = MibTableColumn((1, 3, 6, 1, 3, 20, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigState.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigState.setDescription('The current signal state.')
rs232OutSigChanges = MibTableColumn((1, 3, 6, 1, 3, 20, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigChanges.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigChanges.setDescription("The number of times the signal has changed from 'on' to 'off' or from 'off' to 'on'.")
mibBuilder.exportSymbols("RS232-MIB", rs232SyncPortFrameCheckErrs=rs232SyncPortFrameCheckErrs, rs232AsyncPortParity=rs232AsyncPortParity, rs232OutSigChanges=rs232OutSigChanges, rs232PortIndex=rs232PortIndex, rs232InSigState=rs232InSigState, rs232OutSigName=rs232OutSigName, rs232AsyncPortBits=rs232AsyncPortBits, rs232SyncPortAbortedFrames=rs232SyncPortAbortedFrames, rs232OutSigPortIndex=rs232OutSigPortIndex, rs232SyncPortEntry=rs232SyncPortEntry, rs232PortTable=rs232PortTable, rs232AsyncPortOverrunErrs=rs232AsyncPortOverrunErrs, rs232OutSigEntry=rs232OutSigEntry, rs232OutSigTable=rs232OutSigTable, rs232InSigPortIndex=rs232InSigPortIndex, rs232SyncPortInterruptedFrames=rs232SyncPortInterruptedFrames, rs232InSigName=rs232InSigName, rs232Number=rs232Number, rs232AsyncPortAutobaud=rs232AsyncPortAutobaud, rs232PortInSigNumber=rs232PortInSigNumber, rs232PortOutSpeed=rs232PortOutSpeed, rs232InSigTable=rs232InSigTable, rs232PortType=rs232PortType, rs232SyncPortClockSource=rs232SyncPortClockSource, rs232AsyncPortIndex=rs232AsyncPortIndex, rs232AsyncPortTable=rs232AsyncPortTable, rs232AsyncPortEntry=rs232AsyncPortEntry, rs232=rs232, rs232SyncPortIndex=rs232SyncPortIndex, rs232SyncPortReceiveOverrunErrs=rs232SyncPortReceiveOverrunErrs, rs232AsyncPortFramingErrs=rs232AsyncPortFramingErrs, rs232OutSigState=rs232OutSigState, rs232InSigEntry=rs232InSigEntry, rs232AsyncPortStopBits=rs232AsyncPortStopBits, rs232PortEntry=rs232PortEntry, rs232PortOutSigNumber=rs232PortOutSigNumber, rs232AsyncPortParityErrs=rs232AsyncPortParityErrs, rs232SyncPortTransmitUnderrunErrs=rs232SyncPortTransmitUnderrunErrs, rs232InSigChanges=rs232InSigChanges, rs232SyncPortTable=rs232SyncPortTable, rs232PortInSpeed=rs232PortInSpeed)
