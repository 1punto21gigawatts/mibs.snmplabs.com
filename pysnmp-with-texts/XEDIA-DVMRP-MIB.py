#
# PySNMP MIB module XEDIA-DVMRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-DVMRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Unsigned32, Gauge32, IpAddress, Counter32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, NotificationType, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Unsigned32", "Gauge32", "IpAddress", "Counter32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "NotificationType", "iso", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xdvmrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 32))
if mibBuilder.loadTexts: xdvmrpMIB.setLastUpdated('9905151600Z')
if mibBuilder.loadTexts: xdvmrpMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xdvmrpMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xdvmrpMIB.setDescription('The Xedia extention MIB module for management of DVMRP routers.')
xdvmrpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 32, 1))
xdvmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 32, 1, 1))
xdvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 32, 1, 1, 1), )
if mibBuilder.loadTexts: xdvmrpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: xdvmrpInterfaceTable.setDescription("The (conceptual) table listing the router's multicast- capable interfaces.")
xdvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 32, 1, 1, 1, 1), ).setIndexNames((0, "XEDIA-DVMRP-MIB", "xdvmrpInterfaceIfIndex"))
if mibBuilder.loadTexts: xdvmrpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: xdvmrpInterfaceEntry.setDescription('An entry (conceptual row) in the dvmrpInterfaceTable. This row augments ipMRouteInterfaceEntry in the IP Multicast MIB, where the threshold object resides.')
xdvmrpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 32, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: xdvmrpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: xdvmrpInterfaceIfIndex.setDescription('The ifIndex value of the interface for which DVMRP is enabled.')
xdvmrpInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 32, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdvmrpInterfaceState.setStatus('current')
if mibBuilder.loadTexts: xdvmrpInterfaceState.setDescription('The current status of this DVMRP interface.')
xdvmrpInterfaceDefaultInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 32, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("originate", 2), ("only", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdvmrpInterfaceDefaultInformation.setStatus('current')
if mibBuilder.loadTexts: xdvmrpInterfaceDefaultInformation.setDescription('Control the advertisement of default route (0.0.0.0) to the DVMRP neighbor(s) on the interface. When the value is set to disabled(1), no default route is advertised. When set to originate(2), default route is advertised along the other routes. When the value is set to only(3), only the default route is advertised through this interface.')
xdvmrpInterfaceUnicastTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 32, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdvmrpInterfaceUnicastTunnel.setStatus('current')
if mibBuilder.loadTexts: xdvmrpInterfaceUnicastTunnel.setDescription('Control the transmission of DVMRP messages to be unicast to the remote end point of the tunnel instead of send through the tunnel. Enabled this to interoperate with mrouted or cisco with tunnel configured in dvmrp mode.')
mibBuilder.exportSymbols("XEDIA-DVMRP-MIB", xdvmrpInterfaceIfIndex=xdvmrpInterfaceIfIndex, xdvmrpMIB=xdvmrpMIB, xdvmrpInterfaceEntry=xdvmrpInterfaceEntry, PYSNMP_MODULE_ID=xdvmrpMIB, xdvmrpInterfaceTable=xdvmrpInterfaceTable, xdvmrpMIBObjects=xdvmrpMIBObjects, xdvmrpInterfaceDefaultInformation=xdvmrpInterfaceDefaultInformation, xdvmrp=xdvmrp, xdvmrpInterfaceState=xdvmrpInterfaceState, xdvmrpInterfaceUnicastTunnel=xdvmrpInterfaceUnicastTunnel)
