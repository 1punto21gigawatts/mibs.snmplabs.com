#
# PySNMP MIB module CADANT-MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-MPLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cadMpls, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadMpls")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, NotificationType, ModuleIdentity, Counter32, iso, Gauge32, TimeTicks, ObjectIdentity, Integer32, Bits, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "ModuleIdentity", "Counter32", "iso", "Gauge32", "TimeTicks", "ObjectIdentity", "Integer32", "Bits", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
MacAddress, DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
cadMplsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1))
cadMplsMIB.setRevisions(('2014-01-24 00:00', '2013-12-04 00:00', '2013-11-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadMplsMIB.setRevisionsDescriptions(('Add cadMplsLdpVcDescription', 'Changed min value for cadMplsLdpHelloHoldTimer and cadMplsLdpTargetedHelloHoldTimer from 0 to 1', 'initial version',))
if mibBuilder.loadTexts: cadMplsMIB.setLastUpdated('201401240000Z')
if mibBuilder.loadTexts: cadMplsMIB.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadMplsMIB.setContactInfo('Arris Technical Support Postal: ARRIS E-Mail: support@arrisi.com')
if mibBuilder.loadTexts: cadMplsMIB.setDescription('This is the management MIB contains Cadant proprietary MPLS MIB information. Copyright 2013 Arris International, Inc. All rights reserved.')
cadMplsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1))
cadMplsParams = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 1))
cadMplsLdpHelloHoldTimer = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(15)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMplsLdpHelloHoldTimer.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpHelloHoldTimer.setDescription('The 16-bit integer value which is the configured link Hello hold timer for the local LDP router in seconds. A value of 65535 means infinite')
cadMplsLdpTargetedHelloHoldTimer = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMplsLdpTargetedHelloHoldTimer.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpTargetedHelloHoldTimer.setDescription('The 16-bit integer value which is the configured targeted Hello hold timer for the local LDP router in seconds. A value of 65535 means infinite')
cadMplsLdpKeepAliveHoldTimer = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMplsLdpKeepAliveHoldTimer.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpKeepAliveHoldTimer.setDescription('The 16-bit integer value which is the configured Keep Alive hold timer for the local LDP router in seconds.')
cadMplsLdpVcDescription = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMplsLdpVcDescription.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpVcDescription.setDescription('This is the 64 byte string configured as an LDP Interface Parameter PW Description.')
cadMplsLdpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 2), )
if mibBuilder.loadTexts: cadMplsLdpNeighborTable.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpNeighborTable.setDescription('MPLS LDP neighbor table.')
cadMplsLdpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 2, 1), ).setIndexNames((0, "CADANT-MPLS-MIB", "cadMplsLdpNeighborAddressType"), (0, "CADANT-MPLS-MIB", "cadMplsLdpNeighborIpAddress"))
if mibBuilder.loadTexts: cadMplsLdpNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpNeighborEntry.setDescription('')
cadMplsLdpNeighborAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cadMplsLdpNeighborAddressType.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpNeighborAddressType.setDescription('This is the MPLS Peer Address Type. Only ipv4(1) or ipv6(2) will be supported.')
cadMplsLdpNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cadMplsLdpNeighborIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpNeighborIpAddress.setDescription('This is the IP address of the LDP neighbor. IPv4 and IPv6 addresses are supported.')
cadMplsLdpNeighborPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMplsLdpNeighborPassword.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpNeighborPassword.setDescription('This is the MD5 password used for TCP authentication for this LDP neighbor.')
cadMplsLdpNeighborTargetedPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMplsLdpNeighborTargetedPeer.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpNeighborTargetedPeer.setDescription('If this value is set to true, then this neighbor is a CLI configured Targeted LDP peer. The CMTS will consider this peer eligible so will accept discovery messages from it and will actively try to establish a T-LDP session with the peer. If this value is set to false then this neighbor is a regular link LDP neighbor and a row in this table will be used for storing the password only.')
cadMplsLdpNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 130, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMplsLdpNeighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadMplsLdpNeighborRowStatus.setDescription('Row Status for this table entry.')
mibBuilder.exportSymbols("CADANT-MPLS-MIB", cadMplsMIBObjects=cadMplsMIBObjects, cadMplsLdpNeighborTargetedPeer=cadMplsLdpNeighborTargetedPeer, cadMplsLdpNeighborPassword=cadMplsLdpNeighborPassword, cadMplsLdpTargetedHelloHoldTimer=cadMplsLdpTargetedHelloHoldTimer, cadMplsLdpNeighborTable=cadMplsLdpNeighborTable, cadMplsParams=cadMplsParams, cadMplsLdpNeighborAddressType=cadMplsLdpNeighborAddressType, cadMplsLdpNeighborEntry=cadMplsLdpNeighborEntry, cadMplsLdpVcDescription=cadMplsLdpVcDescription, cadMplsLdpNeighborIpAddress=cadMplsLdpNeighborIpAddress, cadMplsLdpNeighborRowStatus=cadMplsLdpNeighborRowStatus, cadMplsLdpHelloHoldTimer=cadMplsLdpHelloHoldTimer, PYSNMP_MODULE_ID=cadMplsMIB, cadMplsLdpKeepAliveHoldTimer=cadMplsLdpKeepAliveHoldTimer, cadMplsMIB=cadMplsMIB)
