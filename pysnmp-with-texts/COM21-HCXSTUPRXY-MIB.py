#
# PySNMP MIB module COM21-HCXSTUPRXY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXSTUPRXY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
com21Hcx, com21, com21Stu, com21Traps = mibBuilder.importSymbols("COM21-HCX-MIB", "com21Hcx", "com21", "com21Stu", "com21Traps")
hcxAlmSeverity, hcxEventLogTime = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxAlmSeverity", "hcxEventLogTime")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, iso, MibIdentifier, NotificationType, ModuleIdentity, IpAddress, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, Counter64, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "MibIdentifier", "NotificationType", "ModuleIdentity", "IpAddress", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "Counter64", "Bits", "ObjectIdentity")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
com21StuPrxy = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 3, 1))
if mibBuilder.loadTexts: com21StuPrxy.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21StuPrxy.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21StuPrxy.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21StuPrxy.setDescription('This is the Com21 ComController ComPort Proxy MIB. COM21 Part# 005-0025-00')
com21StuControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 2))
com21StuPhysicalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 3))
com21StuAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 4))
com21StuEtherConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 5))
com21StuEtherTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 6))
com21StuFiltIpMultiGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 7))
com21StuEtherMacGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 8))
com21StuEtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 9))
com21StuStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 10))
com21StuQStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 11))
com21StuAlarmSevGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 12))
com21StuCodeImageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 13))
com21StuVoiceChanStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 3, 14))
class FrequencyKhz(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 800000)

class UpstrmFreqKhz(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(5000, 40000)

class EpochTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class Offset(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16383)

class AlarmSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("clear", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5))

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

com21StuControlTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1), )
if mibBuilder.loadTexts: com21StuControlTable.setStatus('current')
if mibBuilder.loadTexts: com21StuControlTable.setDescription('.')
com21StuControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuCtrlMacAddress"))
if mibBuilder.loadTexts: com21StuControlEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuControlEntry.setDescription('.')
stuCtrlMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCtrlMacAddress.setStatus('current')
if mibBuilder.loadTexts: stuCtrlMacAddress.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
stuUserText = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuUserText.setStatus('current')
if mibBuilder.loadTexts: stuUserText.setDescription(" The ComPort User Text is a non-volatile string which is set by the management system with an arbitrary value. This value does not have to be unique. It's purpose is solely to assist the carrier personnel with identifying the ComPort device.")
stuSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuSerialNumber.setStatus('current')
if mibBuilder.loadTexts: stuSerialNumber.setDescription(' The Serial Number is a 10 character serial number used by COM21 to uniquely identify the device.')
stuBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuBoardRevision.setStatus('current')
if mibBuilder.loadTexts: stuBoardRevision.setDescription(' This string defines the hardware revision of the ComPort board.')
stuUnitRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuUnitRevision.setStatus('current')
if mibBuilder.loadTexts: stuUnitRevision.setDescription(' This string defines the hardware revision of the complete ComPort unit.')
stuTunerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuTunerRevision.setStatus('current')
if mibBuilder.loadTexts: stuTunerRevision.setDescription(' This string defines the hardware revision of the RF Tuner.')
stuModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuModelName.setStatus('current')
if mibBuilder.loadTexts: stuModelName.setDescription(' This string defines the ComPort Model Type.')
stuUnitManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuUnitManufacturer.setStatus('current')
if mibBuilder.loadTexts: stuUnitManufacturer.setDescription(' This string defines the manufacturer of the ComPort. Initially COM21 and 3COM.')
stuDesKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bit56key", 1), ("bit40key", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuDesKeySize.setStatus('current')
if mibBuilder.loadTexts: stuDesKeySize.setDescription(' DES encryption key size supported by the ComPort.')
stuMibRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuMibRevision.setStatus('current')
if mibBuilder.loadTexts: stuMibRevision.setDescription(' Indicates the Mib Revision as display string of max. 8 bytes. That includes string terminator.')
stuEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 11), EpochTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEpochTime.setStatus('current')
if mibBuilder.loadTexts: stuEpochTime.setDescription(' ComPort time in seconds since 1970.')
stuRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuRestartAction.setStatus('current')
if mibBuilder.loadTexts: stuRestartAction.setDescription(' The Restart Action is an active-value. The setting of this value is idempotent. The setting of this value to restart causes the STU to restart utilizing the present software load.')
stuPrevTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevTestResult.setStatus('current')
if mibBuilder.loadTexts: stuPrevTestResult.setDescription(' Result of previous test. Presently this will be warm or cold restart.')
stuPrevTestFailCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, -1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevTestFailCode.setStatus('current')
if mibBuilder.loadTexts: stuPrevTestFailCode.setDescription(' Failure result code. Only set if stuPrevTestResult is equal to failure.')
stuOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("operational", 1), ("deauthorized", 2), ("offline", 3), ("upstreamTest", 4), ("etherLoopback", 5), ("downloading", 6), ("failedRanging", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuOperationState.setStatus('current')
if mibBuilder.loadTexts: stuOperationState.setDescription(' The ComPort Operational State is controlled either by the stuAdminState or locally detected conditions. Note that downloading and failedRanging are ComController helded states.')
stuOperationStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 110)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuCtrlMacAddress"), ("COM21-HCXSTUPRXY-MIB", "stuOperationState"))
if mibBuilder.loadTexts: stuOperationStateChange.setStatus('current')
if mibBuilder.loadTexts: stuOperationStateChange.setDescription('.')
stuAimModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("debugModule", 2), ("teleReturn", 3), ("telephony1", 4), ("telephony2", 5), ("wirelessEthernet", 6), ("atm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAimModuleId.setStatus('current')
if mibBuilder.loadTexts: stuAimModuleId.setDescription(' identifies the connected AIM module type. The maceEthernet entry indicates NO AIM inserted.')
stuMaceFail = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 119)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuCtrlMacAddress"))
if mibBuilder.loadTexts: stuMaceFail.setStatus('current')
if mibBuilder.loadTexts: stuMaceFail.setDescription(' This trap would be sent after ComPort is completely booted. That is, at least download is completed. Event will be detected during POST (Power On Self Test)')
stuUpstrmTestFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 17), UpstrmFreqKhz()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuUpstrmTestFreq.setStatus('current')
if mibBuilder.loadTexts: stuUpstrmTestFreq.setDescription(' Transmit Frequency used by ComPort for Upstream RF test. The default shall be 0 (an invalid freq).')
stuInbPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbInstalled", 1), ("noInbSupport", 2), ("inbReady", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuInbPresent.setStatus('current')
if mibBuilder.loadTexts: stuInbPresent.setDescription(' Indicates if the INB is present on the ComPORT. This is a future item not supported by present ComPORT hardware.')
stuInbContToneEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuInbContToneEnable.setStatus('current')
if mibBuilder.loadTexts: stuInbContToneEnable.setDescription(' Controls the activation of a continuous pilot tone. This does not effect the standard tone sent before data (which is controlled by a hardware switch). This value is not stored in NVRAM. Default is disable.')
stuLastRestartCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("hcxDirected", 2), ("pingFail", 3), ("imageRefresh", 4), ("lof", 5), ("fault", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuLastRestartCause.setStatus('current')
if mibBuilder.loadTexts: stuLastRestartCause.setDescription(' specifies the reason for the last ComPort reset.')
stuUpstrmPingCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuUpstrmPingCntrl.setStatus('current')
if mibBuilder.loadTexts: stuUpstrmPingCntrl.setDescription(' used to control the upstream ping. Default is enable.')
stuUpstrmTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuUpstrmTestTimeout.setStatus('current')
if mibBuilder.loadTexts: stuUpstrmTestTimeout.setDescription(' timeout used by ComPort for Upstream RF test. If the ComController does not terminate the test in this period - defined in seconds - then the ComPort will automatically reset, thus terminating the test. 0 means no timeout. Default is 0.')
stuDnstrmAltFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 24), FrequencyKhz()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuDnstrmAltFreq.setStatus('current')
if mibBuilder.loadTexts: stuDnstrmAltFreq.setDescription(' Defines an alternate downstream frequency for the ComPort. This value is non-voltile. Default is 0 (an invalid freq). IMPORTANT - this is a tbd feature not available in 2.3 release.')
stuAsicRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAsicRevision.setStatus('current')
if mibBuilder.loadTexts: stuAsicRevision.setDescription(' defines the revision of the ASIC. Presently values 1-255 are supported.')
stuVoiceAimLpBk = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("stuLpBk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuVoiceAimLpBk.setStatus('current')
if mibBuilder.loadTexts: stuVoiceAimLpBk.setDescription(' If a voiceAim Module is configured on the stu, setting the Aim Module to stuLpBk will configure the Aim Module to loopback from one voice port to the other. default: nil')
stuVoiceAimPort1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onHook", 1), ("offHook", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceAimPort1Status.setStatus('current')
if mibBuilder.loadTexts: stuVoiceAimPort1Status.setDescription(' Describes whether the AimPort is onhook or offhook. default: nil')
stuVoiceAimPort2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onHook", 1), ("offHook", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceAimPort2Status.setStatus('current')
if mibBuilder.loadTexts: stuVoiceAimPort2Status.setDescription(' Describes whether the AimPort is onhook or offhook. default: nil')
com21StuPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1), )
if mibBuilder.loadTexts: com21StuPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: com21StuPhysicalTable.setDescription('.')
com21StuPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuPhyMacAddress"))
if mibBuilder.loadTexts: com21StuPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuPhysicalEntry.setDescription('.')
stuPhyMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPhyMacAddress.setStatus('current')
if mibBuilder.loadTexts: stuPhyMacAddress.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
stuXmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1, 2), UpstrmFreqKhz()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuXmitFrequency.setStatus('current')
if mibBuilder.loadTexts: stuXmitFrequency.setDescription(' Contains the transmit frequency of the ComPort RF board in KHz. A change in this value shall result in the ComPort being hopped to a differing RX card. The Common Controller shall ensure the sanity of a change to this attribute and shall perform the necessary interface to the RX cards. The actual set of this attribute on the ComPort shall be performed by a GO_SET message.')
stuXmitFeqChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 111)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuPhyMacAddress"), ("COM21-HCXSTUPRXY-MIB", "stuXmitFrequency"))
if mibBuilder.loadTexts: stuXmitFeqChange.setStatus('current')
if mibBuilder.loadTexts: stuXmitFeqChange.setDescription(' This trap is generated whenever an ComPort is hopped. It will not be generated at initial acquisition.')
stuRecvFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1, 3), FrequencyKhz()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuRecvFrequency.setStatus('current')
if mibBuilder.loadTexts: stuRecvFrequency.setDescription(' Contains the receive frequency in KHz. This attribute will match the downstream frequency of the ComController. The ONLY time when this should be change is when the NMAPS wishes hop the ComPort to a different ComController.')
stuRecvRfSrEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuRecvRfSrEstimate.setStatus('current')
if mibBuilder.loadTexts: stuRecvRfSrEstimate.setDescription(' Received Signal S/R estimate in dB on Rf Downstream. This value is an approximation in dB. Received value should be divided by 10 to get a fixed point representation. e.g., value 185 means 18.5 dB.')
stuRecvRfSigLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuRecvRfSigLevel.setStatus('current')
if mibBuilder.loadTexts: stuRecvRfSigLevel.setDescription(' Received Signal Level in dBmv on Rf Downstream.')
stuOutOfSpecRFCond = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 117)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuPhyMacAddress"), ("COM21-HCXSTUPRXY-MIB", "stuRecvRfSigLevel"))
if mibBuilder.loadTexts: stuOutOfSpecRFCond.setStatus('current')
if mibBuilder.loadTexts: stuOutOfSpecRFCond.setDescription(' This trap is generated whenever an ComPort is acquired with out of spec signal quality condition. The trap trap is issued after the GO-SET-DONE message.')
stuXmitOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1, 6), Offset()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuXmitOffset.setStatus('current')
if mibBuilder.loadTexts: stuXmitOffset.setDescription(' Specifies the transmit offset of the ComPort.')
stuXmitDacVRef = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuXmitDacVRef.setStatus('current')
if mibBuilder.loadTexts: stuXmitDacVRef.setDescription(' Specifies the upstream RF DAC Voltage Reference. This value is set only via a GO_SET message under the control of the RX card.')
stuRecvFreqDrift = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuRecvFreqDrift.setStatus('current')
if mibBuilder.loadTexts: stuRecvFreqDrift.setDescription(' Frequency shift (+/- 250Khz) from Downstream Frequency.')
com21StuAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 4, 1), )
if mibBuilder.loadTexts: com21StuAlarmTable.setStatus('current')
if mibBuilder.loadTexts: com21StuAlarmTable.setDescription('.')
com21StuAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 4, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuAlmMacAddress"), (0, "COM21-HCXSTUPRXY-MIB", "stuAlmTime"))
if mibBuilder.loadTexts: com21StuAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuAlarmEntry.setDescription('.')
stuAlmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 4, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAlmMacAddress.setStatus('current')
if mibBuilder.loadTexts: stuAlmMacAddress.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
stuAlmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 4, 1, 1, 2), EpochTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAlmTime.setStatus('current')
if mibBuilder.loadTexts: stuAlmTime.setDescription(' Specifies the time the alarm condition was detected.')
stuAlmTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAlmTrapId.setStatus('current')
if mibBuilder.loadTexts: stuAlmTrapId.setDescription(' Specifies the trap number.')
stuAlmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 4, 1, 1, 4), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAlmSeverity.setStatus('current')
if mibBuilder.loadTexts: stuAlmSeverity.setDescription(' Specifies the alarm severity.')
com21StuAlarmSevTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 12, 1), )
if mibBuilder.loadTexts: com21StuAlarmSevTable.setStatus('current')
if mibBuilder.loadTexts: com21StuAlarmSevTable.setDescription('.')
com21StuAlarmSevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 12, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuAlmSevMacAddress"))
if mibBuilder.loadTexts: com21StuAlarmSevEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuAlarmSevEntry.setDescription('.')
stuAlmSevMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 12, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAlmSevMacAddress.setStatus('current')
if mibBuilder.loadTexts: stuAlmSevMacAddress.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
stuAlmSevCrcThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 12, 1, 1, 2), AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuAlmSevCrcThres.setStatus('current')
if mibBuilder.loadTexts: stuAlmSevCrcThres.setDescription(' Specifies the CRC Error Threshold alarm severity. Default Minor.')
stuAlmSevTeiThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 12, 1, 1, 3), AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuAlmSevTeiThres.setStatus('current')
if mibBuilder.loadTexts: stuAlmSevTeiThres.setDescription(' Specifies the TEI Threshold alarm severity. Default Minor.')
stuAlmSevHecThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 12, 1, 1, 4), AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuAlmSevHecThres.setStatus('current')
if mibBuilder.loadTexts: stuAlmSevHecThres.setDescription(' Specifies the HEC Error Threshold alarm severity. Default Minor.')
stuAlmSevEsThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 12, 1, 1, 5), AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuAlmSevEsThres.setStatus('current')
if mibBuilder.loadTexts: stuAlmSevEsThres.setDescription(' Specifies the Errored Seconds Threshold alarm severity. Default Minor.')
stuAlmSevFecThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 12, 1, 1, 6), AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuAlmSevFecThres.setStatus('current')
if mibBuilder.loadTexts: stuAlmSevFecThres.setDescription(' Specifies the Corrected FEC Threshold alarm severity. Default Minor.')
com21StuEtherConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1), )
if mibBuilder.loadTexts: com21StuEtherConfigTable.setStatus('current')
if mibBuilder.loadTexts: com21StuEtherConfigTable.setDescription('.')
com21StuEtherConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuEthMacAddress"))
if mibBuilder.loadTexts: com21StuEtherConfigEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuEtherConfigEntry.setDescription('.')
stuEthMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuEthMacAddress.setStatus('current')
if mibBuilder.loadTexts: stuEthMacAddress.setDescription(' Contains IEEE 802 medium access control address of the ComPort device. Held on ComController.')
stuEtherFiltFlushAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("flushMac", 2), ("flushEtherType", 3), ("flushIp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherFiltFlushAction.setStatus('current')
if mibBuilder.loadTexts: stuEtherFiltFlushAction.setDescription(' Controls the flush operations.')
stuEtherForwArpOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherForwArpOnly.setStatus('current')
if mibBuilder.loadTexts: stuEtherForwArpOnly.setDescription(' If enable state then only ARP broadcast packets are forwarded upstream. Default is disable.')
stuEtherMacFiltAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherMacFiltAge.setStatus('current')
if mibBuilder.loadTexts: stuEtherMacFiltAge.setDescription(' Specifies the number of seconds that a learned MAC Address entry survives since last learning.')
stuEtherBCastRateEn = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherBCastRateEn.setStatus('current')
if mibBuilder.loadTexts: stuEtherBCastRateEn.setDescription(' Enable rate control. Default is disabled.')
stuEtherBCastRateCo = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherBCastRateCo.setStatus('current')
if mibBuilder.loadTexts: stuEtherBCastRateCo.setDescription(' Limit of maximum number of broadcast packets per second allowed upstream.')
stuEtherStickyBitCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherStickyBitCtrl.setStatus('current')
if mibBuilder.loadTexts: stuEtherStickyBitCtrl.setDescription(' When the Sticky Bit control is enabled, a MAC table entry will not be replaced by another MAC address for at least one aging period. Default disable.')
stuEther8021QEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEther8021QEnable.setStatus('current')
if mibBuilder.loadTexts: stuEther8021QEnable.setDescription(' Enables both 802.1Q priority queuing and the filter of 802.1Q format packets. Default disable.')
stuEtherNonSnapRej = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherNonSnapRej.setStatus('current')
if mibBuilder.loadTexts: stuEtherNonSnapRej.setDescription(' This attribute controls the filtering of 802.2 non- SNAP encoded packets. Ethernet type filtering must be enabled to activate this feature. Default disable.')
stuEtherIgmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherIgmpEnable.setStatus('current')
if mibBuilder.loadTexts: stuEtherIgmpEnable.setDescription(' This attribute controls the forwarding of IGMP multicast traffic upstream. This attribute will override any other multicast filtering in the case of IGMP packets. Default is enable.')
stuEtherNonIpMultiEn = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherNonIpMultiEn.setStatus('current')
if mibBuilder.loadTexts: stuEtherNonIpMultiEn.setDescription(' This attribute controls the forwarding of non-IP multicast traffic upstream. This attribute will override any other multicast filtering in the case of non-IP multicast packets. Default is enable.')
stuEtherBcmpOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherBcmpOnly.setStatus('current')
if mibBuilder.loadTexts: stuEtherBcmpOnly.setDescription(' When this attribute is enabled, all non-BCMP traffic will be rejected in both the upstream and downstream. This attribute is utilized in a Spannong Tree implementation. Default is disable.')
stuEtherIgmpSnoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherIgmpSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: stuEtherIgmpSnoopEnable.setDescription(' This attribute controls the snooping of IGMP multicast traffic upstream. Default is disable.')
com21StuEtherTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 6, 1), )
if mibBuilder.loadTexts: com21StuEtherTypeTable.setStatus('current')
if mibBuilder.loadTexts: com21StuEtherTypeTable.setDescription('.')
com21StuFiltEthTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 6, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuFiltEtherMacAddr"), (0, "COM21-HCXSTUPRXY-MIB", "stuFiltEtherType"))
if mibBuilder.loadTexts: com21StuFiltEthTypeEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuFiltEthTypeEntry.setDescription(' Holds Ethernet Types codes that are to be passed upstream. Maximum of 6 entries.')
stuFiltEtherMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 6, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuFiltEtherMacAddr.setStatus('current')
if mibBuilder.loadTexts: stuFiltEtherMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device. Held on ComController.')
stuFiltEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuFiltEtherType.setStatus('current')
if mibBuilder.loadTexts: stuFiltEtherType.setDescription(' Holds Ethernet Type codes that is to be passed upstream. Held on ComPort. ')
stuFiltEtherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 6, 1, 1, 3), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuFiltEtherStatus.setStatus('current')
if mibBuilder.loadTexts: stuFiltEtherStatus.setDescription(' This attribute is used to create or delete Ethernet Type entry.')
com21StuFiltIpMultiTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 7, 1), )
if mibBuilder.loadTexts: com21StuFiltIpMultiTable.setStatus('current')
if mibBuilder.loadTexts: com21StuFiltIpMultiTable.setDescription('.')
com21StuFiltIpMultiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 7, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuFiltIpMacAddr"), (0, "COM21-HCXSTUPRXY-MIB", "stuFiltIpMultiAddr"))
if mibBuilder.loadTexts: com21StuFiltIpMultiEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuFiltIpMultiEntry.setDescription(' Holds IP Multicast Addresses that are to be allowed in either upstream, or downstream, or both directions. Maximum of 16 entries.')
stuFiltIpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 7, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuFiltIpMacAddr.setStatus('current')
if mibBuilder.loadTexts: stuFiltIpMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device. Held on ComController.')
stuFiltIpMultiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuFiltIpMultiAddr.setStatus('current')
if mibBuilder.loadTexts: stuFiltIpMultiAddr.setDescription(' Holds Multicast Address. Held on ComPort. Valid values are within the range of MAC addresses of 01.00.5E.00.00.00 to 01.00.5E.7F.FF.FF')
stuFiltIpMultiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 7, 1, 1, 3), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuFiltIpMultiStatus.setStatus('current')
if mibBuilder.loadTexts: stuFiltIpMultiStatus.setDescription(' Used to delete or create an entry.')
stuFiltIpDirectCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upstreamOnly", 1), ("downstreamOnly", 2), ("bothDirections", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuFiltIpDirectCntrl.setStatus('current')
if mibBuilder.loadTexts: stuFiltIpDirectCntrl.setDescription(' Used to control the filter direction. Default is bothDirections.')
com21StuEtherMacTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 8, 1), )
if mibBuilder.loadTexts: com21StuEtherMacTable.setStatus('current')
if mibBuilder.loadTexts: com21StuEtherMacTable.setDescription('.')
com21StuEtherMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 8, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuEtherStuMac"), (0, "COM21-HCXSTUPRXY-MIB", "stuEtherMacAddr"))
if mibBuilder.loadTexts: com21StuEtherMacEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuEtherMacEntry.setDescription(' Holds Ethernet MAC address that are to be processed as specified. Maximum of 8 entries.')
stuEtherStuMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 8, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuEtherStuMac.setStatus('current')
if mibBuilder.loadTexts: stuEtherStuMac.setDescription(' Contains IEEE 802 medium access control address of the ComPort device. Held on ComController.')
stuEtherMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 8, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuEtherMacAddr.setStatus('current')
if mibBuilder.loadTexts: stuEtherMacAddr.setDescription(' Holds MAC address. Held on ComPort.')
stuEtherMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("learned", 1), ("processor", 2), ("upstream", 3), ("reject", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherMacType.setStatus('current')
if mibBuilder.loadTexts: stuEtherMacType.setDescription(' Holds action to be performed upon packets of the specified MAC address. In the case of the learned MAC address, this entry becomes read only. Held on ComPort.')
stuEtherMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 8, 1, 1, 4), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stuEtherMacStatus.setStatus('current')
if mibBuilder.loadTexts: stuEtherMacStatus.setDescription(' Used to create or delete an entry.')
com21StuEtherStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1), )
if mibBuilder.loadTexts: com21StuEtherStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21StuEtherStatsTable.setDescription('.')
com21StuEtherStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuEthStatsMacAddr"))
if mibBuilder.loadTexts: com21StuEtherStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuEtherStatsEntry.setDescription('.')
stuEthStatsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuEthStatsMacAddr.setStatus('current')
if mibBuilder.loadTexts: stuEthStatsMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device. Held on ComController.')
stuCurrEtherRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCurrEtherRunts.setStatus('current')
if mibBuilder.loadTexts: stuCurrEtherRunts.setDescription(' Contains number of runt packets received by the ComPort in the current 15minute period. This data is held on the ComPort.')
stuCurrEtherCollitns = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCurrEtherCollitns.setStatus('current')
if mibBuilder.loadTexts: stuCurrEtherCollitns.setDescription(' Contains number of collisions detected by the ComPort in the current 15minute period. This data is held on the ComPort.')
stuCurrEtherFramErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCurrEtherFramErrs.setStatus('current')
if mibBuilder.loadTexts: stuCurrEtherFramErrs.setDescription(' Contains number of Ethernet Packets with Framing Errors detected by the ComPort in the current 15minute period. This data is held on the ComPort.')
stuCurrEtherCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCurrEtherCrcErrs.setStatus('current')
if mibBuilder.loadTexts: stuCurrEtherCrcErrs.setDescription(' Contains number of Ethernet Packets with CRC Errors detected by the ComPort in the current 15minute period. This data is held on the ComPort.')
stuCurrEtherCrcThres = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuCurrEtherCrcThres.setStatus('current')
if mibBuilder.loadTexts: stuCurrEtherCrcThres.setDescription(' contains 15minute error level at which a threshold trap shall be generated. This is mapped to theComPort alarm severity entry stuThresholdLevel. Default is 0 - threshold disabled.')
stuEtherCrcThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 112)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuEthStatsMacAddr"), ("COM21-HCXSTUPRXY-MIB", "stuCurrEtherCrcErrs"), ("COM21-HCXSTUPRXY-MIB", "stuCurrEtherCrcThres"))
if mibBuilder.loadTexts: stuEtherCrcThres.setStatus('current')
if mibBuilder.loadTexts: stuEtherCrcThres.setDescription('.')
stuCurrEtherTxUnder = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCurrEtherTxUnder.setStatus('current')
if mibBuilder.loadTexts: stuCurrEtherTxUnder.setDescription(' Contains number of times Ethernet TX FIFO Underflow occurred on transmit queue in the current 15minute period.')
stuCurrEtherRxOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCurrEtherRxOver.setStatus('current')
if mibBuilder.loadTexts: stuCurrEtherRxOver.setDescription(' Contains number of times Ethernet RX FIFO Overflow occurred on a receive queue in the current 15minute period.')
stuCurrEtherDropFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCurrEtherDropFrms.setStatus('current')
if mibBuilder.loadTexts: stuCurrEtherDropFrms.setDescription(' Contains number of receive frames dropped by MACE controller in the current 15minute period.')
stuPrevEtherRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevEtherRunts.setStatus('current')
if mibBuilder.loadTexts: stuPrevEtherRunts.setDescription(' Contains number of runt packets received by the ComPort in the previous 15minute period. This data is held on the ComPort.')
stuPrevEtherCollitns = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevEtherCollitns.setStatus('current')
if mibBuilder.loadTexts: stuPrevEtherCollitns.setDescription(' Contains number of collisions detected by the ComPort in the previous 15minute period. This data is held on the ComPort.')
stuPrevEtherFramErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevEtherFramErrs.setStatus('current')
if mibBuilder.loadTexts: stuPrevEtherFramErrs.setDescription(' Contains number of Ethernet Packets with Framing Errors detected by the ComPort in the previous 15minute period. This data is held on the ComPort.')
stuPrevEtherCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevEtherCrcErrs.setStatus('current')
if mibBuilder.loadTexts: stuPrevEtherCrcErrs.setDescription(' Contains number of Ethernet Packets with CRC Errors detected by the ComPort in the previous 15minute period. This data is held on the ComPort.')
stuPrevEtherTxUnder = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevEtherTxUnder.setStatus('current')
if mibBuilder.loadTexts: stuPrevEtherTxUnder.setDescription(' Contains number of times Ethernet TX FIFO Underflow occurred on transmit queue in the previous 15minute period.')
stuPrevEtherRxOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevEtherRxOver.setStatus('current')
if mibBuilder.loadTexts: stuPrevEtherRxOver.setDescription(' Contains number of times Ethernet RX FIFO Overflow occurred on a receive queue in the previous 15minute period.')
stuPrevEtherDropFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuPrevEtherDropFrms.setStatus('current')
if mibBuilder.loadTexts: stuPrevEtherDropFrms.setDescription(' Contains number of receive frames dropped by MACE controller in the previous 15minute period.')
stuEtherConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unint", 1), ("is", 2), ("oos", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuEtherConnState.setStatus('current')
if mibBuilder.loadTexts: stuEtherConnState.setDescription(' Contains state of Ethernet connection.')
stuEtherClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuEtherClearStats.setStatus('current')
if mibBuilder.loadTexts: stuEtherClearStats.setDescription(' This attribute is used to clear all Ethernet statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21StuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1), )
if mibBuilder.loadTexts: com21StuStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21StuStatsTable.setDescription('.')
com21StuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuStatsMacAddress"))
if mibBuilder.loadTexts: com21StuStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuStatsEntry.setDescription('.')
stuStatsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsMacAddress.setStatus('current')
if mibBuilder.loadTexts: stuStatsMacAddress.setDescription(' Contains IEEE 802 medium access control address of the ComPort device. Held on ComController.')
stuStatsCurrAtmTei = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsCurrAtmTei.setStatus('current')
if mibBuilder.loadTexts: stuStatsCurrAtmTei.setDescription(' Number of cells received with transport errors - uncorrectable FEC or HEC errors - in the current 15minute period.')
stuAtmTeiThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuAtmTeiThreshold.setStatus('current')
if mibBuilder.loadTexts: stuAtmTeiThreshold.setDescription(' contains 15minute transport error level at which a threshold trap shall be generated. Default is 0 - threshold disabled.')
stuAtmTeiThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 113)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuStatsMacAddress"), ("COM21-HCXSTUPRXY-MIB", "stuStatsCurrAtmTei"), ("COM21-HCXSTUPRXY-MIB", "stuAtmTeiThreshold"))
if mibBuilder.loadTexts: stuAtmTeiThres.setStatus('current')
if mibBuilder.loadTexts: stuAtmTeiThres.setDescription('.')
stuStatsCurrAtmHec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsCurrAtmHec.setStatus('current')
if mibBuilder.loadTexts: stuStatsCurrAtmHec.setDescription(' Number of cells received with HEC or Encryption errors in the current 15minute period.')
stuAtmHecThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuAtmHecThreshold.setStatus('current')
if mibBuilder.loadTexts: stuAtmHecThreshold.setDescription(' contains 15minute HEC error level at which a threshold trap shall be generated. Default is 0 - threshold disabled.')
stuAtmHecThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 114)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuStatsMacAddress"), ("COM21-HCXSTUPRXY-MIB", "stuStatsCurrAtmHec"), ("COM21-HCXSTUPRXY-MIB", "stuAtmHecThreshold"))
if mibBuilder.loadTexts: stuAtmHecThres.setStatus('current')
if mibBuilder.loadTexts: stuAtmHecThres.setDescription('.')
stuStatsCurrESMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsCurrESMin.setStatus('current')
if mibBuilder.loadTexts: stuStatsCurrESMin.setDescription(' Represents the number of errored seconds in the current 15 minute period.')
stuESMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuESMinThreshold.setStatus('current')
if mibBuilder.loadTexts: stuESMinThreshold.setDescription(' contains 15minute errored seconds level at which a threshold trap shall be generated. Default is 0 - threshold disabled.')
stuESMinThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 115)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuStatsMacAddress"), ("COM21-HCXSTUPRXY-MIB", "stuStatsCurrESMin"), ("COM21-HCXSTUPRXY-MIB", "stuESMinThreshold"))
if mibBuilder.loadTexts: stuESMinThres.setStatus('current')
if mibBuilder.loadTexts: stuESMinThres.setDescription('.')
stuStatsCurrFecCorrect = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsCurrFecCorrect.setStatus('current')
if mibBuilder.loadTexts: stuStatsCurrFecCorrect.setDescription(' Fecs corrected by Demodulator on Downstream in the current 15 minute period.')
stuFecCorrectThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuFecCorrectThreshold.setStatus('current')
if mibBuilder.loadTexts: stuFecCorrectThreshold.setDescription(' contains 15minute Fecs corrected level at which a threshold trap shall be generated. Default is 0 - threshold disabled.')
stuFecCorrectThres = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 116)).setObjects(("COM21-HCXSTUPRXY-MIB", "stuAlmSeverity"), ("COM21-HCXSTUPRXY-MIB", "stuAlmTime"), ("COM21-HCXSTUPRXY-MIB", "stuStatsMacAddress"), ("COM21-HCXSTUPRXY-MIB", "stuStatsCurrFecCorrect"), ("COM21-HCXSTUPRXY-MIB", "stuFecCorrectThreshold"))
if mibBuilder.loadTexts: stuFecCorrectThres.setStatus('current')
if mibBuilder.loadTexts: stuFecCorrectThres.setDescription('.')
stuStatsCurrUASMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsCurrUASMin.setStatus('current')
if mibBuilder.loadTexts: stuStatsCurrUASMin.setDescription(' Represents the number of unavailable seconds in the current 15 minute period.')
stuStatsPrevAtmTei = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsPrevAtmTei.setStatus('current')
if mibBuilder.loadTexts: stuStatsPrevAtmTei.setDescription(' Number of cells received with transport errors - HEC or uncorrectable FEC errors - in the previous 15minute period.')
stuStatsPrevAtmHec = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsPrevAtmHec.setStatus('current')
if mibBuilder.loadTexts: stuStatsPrevAtmHec.setDescription(' Number of cells received with HEC or Encryption errors in the previous 15minute period.')
stuStatsPrevESMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsPrevESMin.setStatus('current')
if mibBuilder.loadTexts: stuStatsPrevESMin.setDescription(' Represents the number of errored seconds in the previous 15 minute period.')
stuStatsPrevFecCorrect = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsPrevFecCorrect.setStatus('current')
if mibBuilder.loadTexts: stuStatsPrevFecCorrect.setDescription(' Fecs corrected by Demodulator on Downstream in the previous 15 minute period.')
stuStatsPrevUASMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuStatsPrevUASMin.setStatus('current')
if mibBuilder.loadTexts: stuStatsPrevUASMin.setDescription(' Represents the number of unavailable seconds in the previous 15 minute period.')
stuStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuStatsClearStats.setStatus('current')
if mibBuilder.loadTexts: stuStatsClearStats.setDescription(' This attribute is used to clear the all ComPort statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21StuQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1), )
if mibBuilder.loadTexts: com21StuQStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21StuQStatsTable.setDescription('.')
com21StuQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuAtmStuMacAddr"), (0, "COM21-HCXSTUPRXY-MIB", "stuAtmStuQNo"))
if mibBuilder.loadTexts: com21StuQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuQStatsEntry.setDescription('.')
stuAtmStuMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAtmStuMacAddr.setStatus('current')
if mibBuilder.loadTexts: stuAtmStuMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device. Held on ComController.')
stuAtmStuQNo = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAtmStuQNo.setStatus('current')
if mibBuilder.loadTexts: stuAtmStuQNo.setDescription(' This index consists of a number representing a Mongoose queue. For initial phase this number shall equal the associated VCI number. i.e. Ethernet or Telephony VCIs. This VCI number shall be mapped to a Mongoose queue id by the ComController. For 3.0 there is only a single Ethernet queue - queue 5.')
stuAtmStatsCurrMinRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAtmStatsCurrMinRx.setStatus('current')
if mibBuilder.loadTexts: stuAtmStatsCurrMinRx.setDescription(' Represents the number of cells or frames successfully received in the current 15 minute period.')
stuAtmStatsCurrMinRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAtmStatsCurrMinRxDropped.setStatus('current')
if mibBuilder.loadTexts: stuAtmStatsCurrMinRxDropped.setDescription(' Represents the number of cells or frames dropped in the current 15 minute period.')
stuAtmStatsCurrMinCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAtmStatsCurrMinCRCErrors.setStatus('current')
if mibBuilder.loadTexts: stuAtmStatsCurrMinCRCErrors.setDescription(' Represents the number of cells or frames received with CRC errors in the current 15 minute period.')
stuAtmStatsPrevMinRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAtmStatsPrevMinRx.setStatus('current')
if mibBuilder.loadTexts: stuAtmStatsPrevMinRx.setDescription(' Represents the number of cells or frames successfully received in the previous 15 minute period.')
stuAtmStatsPrevMinRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAtmStatsPrevMinRxDropped.setStatus('current')
if mibBuilder.loadTexts: stuAtmStatsPrevMinRxDropped.setDescription(' Represents the number of cells or frames dropped in the previous 15 minute period.')
stuAtmStatsPrevMinCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuAtmStatsPrevMinCRCErrors.setStatus('current')
if mibBuilder.loadTexts: stuAtmStatsPrevMinCRCErrors.setDescription(' Represents the number of cells or frames received with CRC errors in the previous 15 minute period.')
stuAtmStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuAtmStatsClearStats.setStatus('current')
if mibBuilder.loadTexts: stuAtmStatsClearStats.setDescription(' This attribute is used to clear the ComPort queue statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21StuCodeImageTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1), )
if mibBuilder.loadTexts: com21StuCodeImageTable.setStatus('current')
if mibBuilder.loadTexts: com21StuCodeImageTable.setDescription('.')
com21StuCodeImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuCodeStuMacAddr"), (0, "COM21-HCXSTUPRXY-MIB", "stuCodeImageIndex"))
if mibBuilder.loadTexts: com21StuCodeImageEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuCodeImageEntry.setDescription('.')
stuCodeStuMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCodeStuMacAddr.setStatus('current')
if mibBuilder.loadTexts: stuCodeStuMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device. Held on ComController.')
stuCodeImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vxWorksImage", 1), ("applicationStu", 2), ("downloadImage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCodeImageIndex.setStatus('current')
if mibBuilder.loadTexts: stuCodeImageIndex.setDescription(' Index to receive information about various images; VxWorks - operating system. ApplicationStu - Image comprising Stu Application, DownloadImage - Image downloaded into DRAM.')
stuCodeImageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("stuBoot", 1), ("reserved1", 2), ("stuNewapp", 3), ("stuDnld", 4), ("updateApp", 5), ("reserved2", 6), ("reserved3", 7), ("reserved4", 8), ("updateBoth", 9), ("reserved5", 10), ("vxWorks", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCodeImageType.setStatus('current')
if mibBuilder.loadTexts: stuCodeImageType.setDescription(' Code image identifier. vxWorks - boot code and OS, boot memory resident, stuBoot - backup application image, boot memory resident, stuNewapp - primary application image, app memory resident, stuDnld - downloaded application supplement (optional), updateApp - downloaded flash update, updates app flash, updateBoth - downloaded flash update, updates boot+app flash.')
stuCodeImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCodeImageVersion.setStatus('current')
if mibBuilder.loadTexts: stuCodeImageVersion.setDescription(' Version Description for the Code Image.')
stuCodeImageBuildDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCodeImageBuildDir.setStatus('current')
if mibBuilder.loadTexts: stuCodeImageBuildDir.setDescription(' Directory name where image was built.')
stuCodeImageDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCodeImageDate.setStatus('current')
if mibBuilder.loadTexts: stuCodeImageDate.setDescription(' Date when the image is built.')
stuCodeImageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 13, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuCodeImageTime.setStatus('current')
if mibBuilder.loadTexts: stuCodeImageTime.setDescription(' Time when the image is built.')
com21StuVoiceChanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1), )
if mibBuilder.loadTexts: com21StuVoiceChanStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21StuVoiceChanStatsTable.setDescription('.')
com21StuVoiceChanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1), ).setIndexNames((0, "COM21-HCXSTUPRXY-MIB", "stuVoiceChanStatsMacAddr"), (0, "COM21-HCXSTUPRXY-MIB", "stuVoiceChanStatsNum"))
if mibBuilder.loadTexts: com21StuVoiceChanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21StuVoiceChanStatsEntry.setDescription('.')
stuVoiceChanStatsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsMacAddr.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
stuVoiceChanStatsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsNum.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsNum.setDescription(' Defines the voice port on the Comport device used for Voice. ')
stuVoiceChanStatsCurrLostCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsCurrLostCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsCurrLostCellCnt.setDescription(" Defines the number of times the Comport's voice port received Cells out of sequence in the current 15-min period.")
stuVoiceChanStatsCurrDrpdCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsCurrDrpdCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsCurrDrpdCellCnt.setDescription(" Defines the number of times the Comport's voice port dropped cells due to Queue Full in the current 15-min period.")
stuVoiceChanStatsCurrCrc3ErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsCurrCrc3ErrCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsCurrCrc3ErrCnt.setDescription(" Defines the number of cells Comport's voice port received with CRC3 Errors in the current 15-min period.")
stuVoiceChanStatsCurrSetUpFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsCurrSetUpFailCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsCurrSetUpFailCnt.setDescription(" Defines the number of times the Comport's voice port had to drop the calls due to Call Setup Failure in the current 15-min period.")
stuVoiceChanStatsCurrTxVoiceCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsCurrTxVoiceCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsCurrTxVoiceCellCnt.setDescription(" Defines the number of Voice cells Comport's voice port Queued to Transmit in the current 15-min period.")
stuVoiceChanStatsCurrRxVoiceCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsCurrRxVoiceCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsCurrRxVoiceCellCnt.setDescription(" Defines the number of Voice cells the Comport's voice port received in the current 15-min period.")
stuVoiceChanStatsCurrTxOamCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsCurrTxOamCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsCurrTxOamCellCnt.setDescription(" Defines the number of OAM cells Comport's voice port Queued to Transmit in the current 15-min period.")
stuVoiceChanStatsCurrRxOamCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsCurrRxOamCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsCurrRxOamCellCnt.setDescription(" Defines the number of OAM cells the Comport's voice port received in the current 15-min period.")
stuVoiceChanStatsPrevLostCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsPrevLostCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsPrevLostCellCnt.setDescription(" Defines the number of times the Comport's voice port received Cells out of sequence in the previous 15-min period.")
stuVoiceChanStatsPrevDrpdCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsPrevDrpdCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsPrevDrpdCellCnt.setDescription(" Defines the number of times the Comport's voice port dropped cells due to Queue Full in the previous 15-min period.")
stuVoiceChanStatsPrevCrc3ErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsPrevCrc3ErrCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsPrevCrc3ErrCnt.setDescription(" Defines the number of cells Comport's voice port received with CRC3 Errors in the previous 15-min period.")
stuVoiceChanStatsPrevSetUpFailCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsPrevSetUpFailCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsPrevSetUpFailCnt.setDescription(" Defines the number of times the Comport's voice port had to drop the calls due to Call Setup Failure in the previous 15-min period.")
stuVoiceChanStatsPrevTxVoiceCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsPrevTxVoiceCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsPrevTxVoiceCellCnt.setDescription(" Defines the number of Voice cells Comport's voice port Tranmitted in the previous 15-min period")
stuVoiceChanStatsPrevRxVoiceCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsPrevRxVoiceCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsPrevRxVoiceCellCnt.setDescription(" Defines the number of times the Comport's voice port received Cells out of sequence in the previous 15-min period.")
stuVoiceChanStatsPrevTxOamCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsPrevTxOamCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsPrevTxOamCellCnt.setDescription(" Defines the number of times the Comport's voice port received Cells out of sequence in the previous 15-min period.")
stuVoiceChanStatsPrevRxOamCellCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stuVoiceChanStatsPrevRxOamCellCnt.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsPrevRxOamCellCnt.setDescription(" Defines the number of times the Comport's voice port received Cells out of sequence in the previous 15-min period.")
stuVoiceChanStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 3, 14, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stuVoiceChanStatsClear.setStatus('current')
if mibBuilder.loadTexts: stuVoiceChanStatsClear.setDescription(' Provides the capability to clear the statistics. Clearing of statistics allowed only if hcxStatsControl attribute is set to wrapCurr.')
mibBuilder.exportSymbols("COM21-HCXSTUPRXY-MIB", stuStatsPrevESMin=stuStatsPrevESMin, stuCurrEtherDropFrms=stuCurrEtherDropFrms, com21StuQStatsTable=com21StuQStatsTable, stuStatsPrevUASMin=stuStatsPrevUASMin, stuUserText=stuUserText, stuXmitFeqChange=stuXmitFeqChange, com21StuEtherStatsTable=com21StuEtherStatsTable, stuAlmTrapId=stuAlmTrapId, stuStatsClearStats=stuStatsClearStats, stuMibRevision=stuMibRevision, com21StuVoiceChanStatsGroup=com21StuVoiceChanStatsGroup, stuPrevEtherRxOver=stuPrevEtherRxOver, com21StuEtherStatsEntry=com21StuEtherStatsEntry, stuEtherNonSnapRej=stuEtherNonSnapRej, stuStatsPrevAtmTei=stuStatsPrevAtmTei, stuPrevEtherFramErrs=stuPrevEtherFramErrs, stuTunerRevision=stuTunerRevision, stuEtherBCastRateEn=stuEtherBCastRateEn, stuEtherIgmpSnoopEnable=stuEtherIgmpSnoopEnable, com21StuStatsEntry=com21StuStatsEntry, com21StuEtherConfigEntry=com21StuEtherConfigEntry, stuRecvFrequency=stuRecvFrequency, stuCurrEtherRxOver=stuCurrEtherRxOver, stuAtmStatsPrevMinRx=stuAtmStatsPrevMinRx, com21StuCodeImageTable=com21StuCodeImageTable, stuEthMacAddress=stuEthMacAddress, stuRecvFreqDrift=stuRecvFreqDrift, stuEtherMacFiltAge=stuEtherMacFiltAge, stuEtherBcmpOnly=stuEtherBcmpOnly, stuXmitFrequency=stuXmitFrequency, stuVoiceAimPort2Status=stuVoiceAimPort2Status, stuFiltIpMacAddr=stuFiltIpMacAddr, com21StuEtherMacTable=com21StuEtherMacTable, stuRecvRfSrEstimate=stuRecvRfSrEstimate, stuEtherBCastRateCo=stuEtherBCastRateCo, stuAtmTeiThres=stuAtmTeiThres, com21StuAlarmSevTable=com21StuAlarmSevTable, stuPrevEtherDropFrms=stuPrevEtherDropFrms, stuVoiceChanStatsPrevDrpdCellCnt=stuVoiceChanStatsPrevDrpdCellCnt, stuAlmSevEsThres=stuAlmSevEsThres, stuCurrEtherFramErrs=stuCurrEtherFramErrs, stuVoiceChanStatsPrevRxOamCellCnt=stuVoiceChanStatsPrevRxOamCellCnt, com21StuFiltEthTypeEntry=com21StuFiltEthTypeEntry, stuCurrEtherCollitns=stuCurrEtherCollitns, stuAtmStatsCurrMinCRCErrors=stuAtmStatsCurrMinCRCErrors, stuEtherClearStats=stuEtherClearStats, stuFecCorrectThreshold=stuFecCorrectThreshold, stuFiltEtherMacAddr=stuFiltEtherMacAddr, stuFiltIpMultiAddr=stuFiltIpMultiAddr, stuOperationState=stuOperationState, stuCtrlMacAddress=stuCtrlMacAddress, com21StuControlGroup=com21StuControlGroup, stuDnstrmAltFreq=stuDnstrmAltFreq, com21StuEtherTypeGroup=com21StuEtherTypeGroup, stuVoiceAimLpBk=stuVoiceAimLpBk, com21StuAlarmGroup=com21StuAlarmGroup, stuCodeImageVersion=stuCodeImageVersion, stuAtmStatsCurrMinRxDropped=stuAtmStatsCurrMinRxDropped, UpstrmFreqKhz=UpstrmFreqKhz, stuCodeImageIndex=stuCodeImageIndex, com21StuControlTable=com21StuControlTable, stuAlmSevCrcThres=stuAlmSevCrcThres, stuVoiceChanStatsPrevRxVoiceCellCnt=stuVoiceChanStatsPrevRxVoiceCellCnt, stuFiltIpMultiStatus=stuFiltIpMultiStatus, stuRestartAction=stuRestartAction, stuESMinThreshold=stuESMinThreshold, stuUpstrmTestTimeout=stuUpstrmTestTimeout, stuModelName=stuModelName, stuFiltEtherStatus=stuFiltEtherStatus, com21StuQStatsGroup=com21StuQStatsGroup, stuEthStatsMacAddr=stuEthStatsMacAddr, stuAlmSevMacAddress=stuAlmSevMacAddress, FrequencyKhz=FrequencyKhz, stuPrevTestFailCode=stuPrevTestFailCode, stuStatsCurrAtmHec=stuStatsCurrAtmHec, stuCodeImageDate=stuCodeImageDate, stuAtmStatsCurrMinRx=stuAtmStatsCurrMinRx, stuAtmHecThres=stuAtmHecThres, stuEtherForwArpOnly=stuEtherForwArpOnly, com21StuVoiceChanStatsEntry=com21StuVoiceChanStatsEntry, com21StuControlEntry=com21StuControlEntry, stuEther8021QEnable=stuEther8021QEnable, stuCurrEtherCrcErrs=stuCurrEtherCrcErrs, stuVoiceChanStatsCurrTxOamCellCnt=stuVoiceChanStatsCurrTxOamCellCnt, stuPrevEtherRunts=stuPrevEtherRunts, stuCodeImageBuildDir=stuCodeImageBuildDir, stuStatsCurrESMin=stuStatsCurrESMin, stuXmitDacVRef=stuXmitDacVRef, stuAtmStatsPrevMinCRCErrors=stuAtmStatsPrevMinCRCErrors, stuESMinThres=stuESMinThres, stuVoiceAimPort1Status=stuVoiceAimPort1Status, com21StuStatsTable=com21StuStatsTable, stuPrevTestResult=stuPrevTestResult, stuAlmSeverity=stuAlmSeverity, com21StuPhysicalEntry=com21StuPhysicalEntry, Com21RowStatus=Com21RowStatus, stuMaceFail=stuMaceFail, stuAtmStuMacAddr=stuAtmStuMacAddr, com21StuEtherMacEntry=com21StuEtherMacEntry, stuAlmSevFecThres=stuAlmSevFecThres, stuXmitOffset=stuXmitOffset, stuEtherMacStatus=stuEtherMacStatus, PYSNMP_MODULE_ID=com21StuPrxy, com21StuPhysicalGroup=com21StuPhysicalGroup, com21StuPhysicalTable=com21StuPhysicalTable, stuEtherMacType=stuEtherMacType, stuFecCorrectThres=stuFecCorrectThres, stuSerialNumber=stuSerialNumber, EpochTime=EpochTime, stuDesKeySize=stuDesKeySize, stuVoiceChanStatsCurrRxVoiceCellCnt=stuVoiceChanStatsCurrRxVoiceCellCnt, stuBoardRevision=stuBoardRevision, stuUpstrmTestFreq=stuUpstrmTestFreq, stuAsicRevision=stuAsicRevision, stuAlmMacAddress=stuAlmMacAddress, com21StuFiltIpMultiTable=com21StuFiltIpMultiTable, stuVoiceChanStatsPrevLostCellCnt=stuVoiceChanStatsPrevLostCellCnt, stuAtmTeiThreshold=stuAtmTeiThreshold, stuLastRestartCause=stuLastRestartCause, stuEtherCrcThres=stuEtherCrcThres, stuEtherConnState=stuEtherConnState, stuStatsCurrAtmTei=stuStatsCurrAtmTei, com21StuVoiceChanStatsTable=com21StuVoiceChanStatsTable, stuEtherNonIpMultiEn=stuEtherNonIpMultiEn, stuAimModuleId=stuAimModuleId, stuFiltIpDirectCntrl=stuFiltIpDirectCntrl, stuCurrEtherRunts=stuCurrEtherRunts, stuVoiceChanStatsCurrDrpdCellCnt=stuVoiceChanStatsCurrDrpdCellCnt, stuVoiceChanStatsCurrLostCellCnt=stuVoiceChanStatsCurrLostCellCnt, com21StuEtherStatsGroup=com21StuEtherStatsGroup, stuInbPresent=stuInbPresent, com21StuEtherConfigGroup=com21StuEtherConfigGroup, stuAtmStuQNo=stuAtmStuQNo, stuRecvRfSigLevel=stuRecvRfSigLevel, stuEtherMacAddr=stuEtherMacAddr, com21StuQStatsEntry=com21StuQStatsEntry, stuCodeImageTime=stuCodeImageTime, com21StuEtherConfigTable=com21StuEtherConfigTable, stuPrevEtherCrcErrs=stuPrevEtherCrcErrs, stuAtmStatsPrevMinRxDropped=stuAtmStatsPrevMinRxDropped, stuStatsPrevAtmHec=stuStatsPrevAtmHec, stuPhyMacAddress=stuPhyMacAddress, stuCurrEtherCrcThres=stuCurrEtherCrcThres, com21StuAlarmTable=com21StuAlarmTable, com21StuEtherTypeTable=com21StuEtherTypeTable, com21StuPrxy=com21StuPrxy, stuUnitRevision=stuUnitRevision, Offset=Offset, com21StuAlarmSevGroup=com21StuAlarmSevGroup, stuAtmStatsClearStats=stuAtmStatsClearStats, stuVoiceChanStatsCurrRxOamCellCnt=stuVoiceChanStatsCurrRxOamCellCnt, stuVoiceChanStatsPrevTxOamCellCnt=stuVoiceChanStatsPrevTxOamCellCnt, stuVoiceChanStatsCurrSetUpFailCnt=stuVoiceChanStatsCurrSetUpFailCnt, stuOperationStateChange=stuOperationStateChange, stuVoiceChanStatsClear=stuVoiceChanStatsClear, stuVoiceChanStatsPrevSetUpFailCnt=stuVoiceChanStatsPrevSetUpFailCnt, stuStatsMacAddress=stuStatsMacAddress, stuEpochTime=stuEpochTime, stuVoiceChanStatsNum=stuVoiceChanStatsNum, stuCodeStuMacAddr=stuCodeStuMacAddr, stuVoiceChanStatsCurrCrc3ErrCnt=stuVoiceChanStatsCurrCrc3ErrCnt, stuPrevEtherCollitns=stuPrevEtherCollitns, com21StuFiltIpMultiEntry=com21StuFiltIpMultiEntry, stuUpstrmPingCntrl=stuUpstrmPingCntrl, stuEtherStickyBitCtrl=stuEtherStickyBitCtrl, stuInbContToneEnable=stuInbContToneEnable, com21StuStatsGroup=com21StuStatsGroup, stuOutOfSpecRFCond=stuOutOfSpecRFCond, stuPrevEtherTxUnder=stuPrevEtherTxUnder, com21StuCodeImageGroup=com21StuCodeImageGroup, stuAtmHecThreshold=stuAtmHecThreshold, stuStatsPrevFecCorrect=stuStatsPrevFecCorrect, stuVoiceChanStatsPrevTxVoiceCellCnt=stuVoiceChanStatsPrevTxVoiceCellCnt, stuAlmTime=stuAlmTime, stuVoiceChanStatsCurrTxVoiceCellCnt=stuVoiceChanStatsCurrTxVoiceCellCnt, com21StuFiltIpMultiGroup=com21StuFiltIpMultiGroup, AlarmSeverity=AlarmSeverity, com21StuAlarmEntry=com21StuAlarmEntry, com21StuCodeImageEntry=com21StuCodeImageEntry, stuUnitManufacturer=stuUnitManufacturer, stuEtherStuMac=stuEtherStuMac, stuCurrEtherTxUnder=stuCurrEtherTxUnder, stuVoiceChanStatsMacAddr=stuVoiceChanStatsMacAddr, stuVoiceChanStatsPrevCrc3ErrCnt=stuVoiceChanStatsPrevCrc3ErrCnt, com21StuEtherMacGroup=com21StuEtherMacGroup, stuAlmSevTeiThres=stuAlmSevTeiThres, stuAlmSevHecThres=stuAlmSevHecThres, stuStatsCurrFecCorrect=stuStatsCurrFecCorrect, stuStatsCurrUASMin=stuStatsCurrUASMin, stuEtherFiltFlushAction=stuEtherFiltFlushAction, com21StuAlarmSevEntry=com21StuAlarmSevEntry, stuEtherIgmpEnable=stuEtherIgmpEnable, stuCodeImageType=stuCodeImageType, stuFiltEtherType=stuFiltEtherType)
