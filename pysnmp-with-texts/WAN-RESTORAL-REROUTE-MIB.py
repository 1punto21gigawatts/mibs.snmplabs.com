#
# PySNMP MIB module WAN-RESTORAL-REROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WAN-RESTORAL-REROUTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, enterprises, ModuleIdentity, Integer32, ObjectIdentity, Unsigned32, iso, IpAddress, MibIdentifier, Counter64, Bits, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "enterprises", "ModuleIdentity", "Integer32", "ObjectIdentity", "Unsigned32", "iso", "IpAddress", "MibIdentifier", "Counter64", "Bits", "Gauge32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibmWanRestoralRerouteMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11))
ibmWanRestoral = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1))
ibmWanReroute = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2))
ibmWanRestoralTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1), )
if mibBuilder.loadTexts: ibmWanRestoralTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmWanRestoralTable.setDescription('A list of WAN Restoral table entries. The number of entries should equal the current number of primary link for WAN Restoral. The table has a row for primary link. Each row has information about the current status of that link.')
ibmWanRestoralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1), ).setIndexNames((0, "WAN-RESTORAL-REROUTE-MIB", "ibmwrsPriNetifIndex"))
if mibBuilder.loadTexts: ibmWanRestoralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmWanRestoralEntry.setDescription('A WAN Restoral table entry describing current status of the primary link. The table has a row for each primary link. Rows in this table can not be created or deleted via SNMP commands')
ibmwrsPriNetifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrsPriNetifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrsPriNetifIndex.setDescription('The interface index of the primary net interface. This is the same as mib-2 ifIndex for that interface.')
ibmwrsSecNetifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrsSecNetifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrsSecNetifIndex.setDescription('The interface index of the secondary net interface. This is the same as mib-2 ifIndex for that interface.')
ibmwrsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrsEnabled.setDescription('The flag indicates that restoral of this primary interface is currently enabled.')
ibmwrsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrsActive.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrsActive.setDescription('The flag indicates that restoral of this primary interface is currently active.')
ibmwrsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrsDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrsDuration.setDescription('The value in 1/100s of a second indicating the current or most recent duration that the secondary net interface was up. The value is current if ibmwrsActive has a value of yes(1), otherwise it is the most recent restoral duration. If restoral has never been active, the value is 0')
ibmwrsAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrsAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrsAttempts.setDescription('The number of times an attempt was made to restore the primary.')
ibmwrsActuals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrsActuals.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrsActuals.setDescription('The number of times the primary was actually restored by the secondary.')
ibmwrsFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrsFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrsFwdPkts.setDescription('The number of packets forwarded during the current or most recent restoral.')
ibmWanRerouteTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1), )
if mibBuilder.loadTexts: ibmWanRerouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmWanRerouteTable.setDescription('A list of WAN Reroute table entries. The number of entries should equal the current number of primary link for WAN Reroute. The table has a row for primary link. Each row has information about the current status of that link.')
ibmWanRerouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1), ).setIndexNames((0, "WAN-RESTORAL-REROUTE-MIB", "ibmwrrPriNetifIndex"))
if mibBuilder.loadTexts: ibmWanRerouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmWanRerouteEntry.setDescription('A WAN Reroute table entry describing current status of the primary link. The table has a row for each primary link. Rows in this table can not be created or deleted via SNMP commands')
ibmwrrPriNetifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrPriNetifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrPriNetifIndex.setDescription('The interface index of the primary net interface. This is the same as mib-2 ifIndex for that interface.')
ibmwrrAltNetifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrAltNetifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrAltNetifIndex.setDescription('The interface index of the alternate net interface. This is the same as mib-2 ifIndex for that interface.')
ibmwrrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrEnabled.setDescription('The flag indicates that reroute of this primary interface is currently enabled.')
ibmwrrActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrActive.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrActive.setDescription('The flag indicates that reroute of this primary interface is currently active.')
ibmwrrDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrDuration.setDescription('The value in 1/100s of a second indicating the current or most recent duration that the alternate net interface was up. The value is current if ibmwrrActive has a value of yes(1), otherwise it is the most recent reroute duration. If reroute has never been active, the value is 0')
ibmwrrAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrAttempts.setDescription('The number of times an attempt was made to reroute the primary.')
ibmwrrActuals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrActuals.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrActuals.setDescription('The number of times the primary was actually rerouted by the secondary.')
ibmwrrOverflowEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrOverflowEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrOverflowEnabled.setDescription('The flag indicates that dial on overflow of this primary interface is currently enabled.')
ibmwrrOverflowActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrOverflowActive.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrOverflowActive.setDescription('The flag indicates that dial on overflow of this primary interface is currently active.')
ibmwrrOverflowDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrOverflowDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrOverflowDuration.setDescription('The value in 1/100s of a second indicating the current or most recent dial on overflow duration that the alternate net interface was up. The value is current if ibmwrrOverflowActive has a value of yes(1), otherwise it is the most recent dial on overflow duration. If dial on overflow has never been active, the value is 0')
ibmwrrOverflowAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrOverflowAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrOverflowAttempts.setDescription('The number of times an attempt was made to use the alternate link after the primary threshhold was reached.')
ibmwrrOverflowActuals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmwrrOverflowActuals.setStatus('mandatory')
if mibBuilder.loadTexts: ibmwrrOverflowActuals.setDescription('The number of times the alternate link was actually used for overflow traffic once the primary threshhold was reached.')
mibBuilder.exportSymbols("WAN-RESTORAL-REROUTE-MIB", ibmwrrDuration=ibmwrrDuration, ibmwrsActive=ibmwrsActive, ibmwrrAltNetifIndex=ibmwrrAltNetifIndex, ibmwrrPriNetifIndex=ibmwrrPriNetifIndex, ibmWanRestoralEntry=ibmWanRestoralEntry, ibmwrsFwdPkts=ibmwrsFwdPkts, ibmwrsDuration=ibmwrsDuration, ibmwrrOverflowEnabled=ibmwrrOverflowEnabled, ibmwrrActuals=ibmwrrActuals, ibmwrsPriNetifIndex=ibmwrsPriNetifIndex, ibmwrsActuals=ibmwrsActuals, ibmWanRestoralTable=ibmWanRestoralTable, ibmWanReroute=ibmWanReroute, ibmWanRerouteEntry=ibmWanRerouteEntry, ibmWanRestoral=ibmWanRestoral, ibmWanRerouteTable=ibmWanRerouteTable, ibmwrrOverflowAttempts=ibmwrrOverflowAttempts, ibmwrrAttempts=ibmwrrAttempts, ibmwrsEnabled=ibmwrsEnabled, ibmwrrOverflowActive=ibmwrrOverflowActive, ibmWanRestoralRerouteMIB=ibmWanRestoralRerouteMIB, ibmwrrEnabled=ibmwrrEnabled, ibmwrrOverflowActuals=ibmwrrOverflowActuals, ibmwrrActive=ibmwrrActive, ibmwrsAttempts=ibmwrsAttempts, ibmwrsSecNetifIndex=ibmwrsSecNetifIndex, ibmwrrOverflowDuration=ibmwrrOverflowDuration)
