#
# PySNMP MIB module MS-SWITCH30-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MS-SWITCH30-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, enterprises, Integer32, Counter32, NotificationType, Gauge32, Counter64, MibIdentifier, ObjectIdentity, ModuleIdentity, IpAddress, Unsigned32, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "enterprises", "Integer32", "Counter32", "NotificationType", "Gauge32", "Counter64", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Unsigned32", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
mib3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3181, 10, 3))
mib3.setRevisions(('2011-04-11 00:00', '2011-03-03 00:00', '2010-12-18 00:00', '2010-08-30 00:00', '2010-06-24 00:00', '2010-05-03 00:00', '2010-01-19 00:00', '2009-12-22 00:00', '2009-11-17 00:00', '2009-06-03 00:00', '2009-04-29 00:00', '2009-01-12 00:00', '2008-09-01 00:00', '2008-06-17 00:00', '2007-07-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mib3.setRevisionsDescriptions(('PoE Extended Voltage flag added', 'monitor HubMode added SFP warnings and alarms added', 'syslog filtering added snmpv3 specific traps/informs added', 'port access control values added radius timeout added', 'rtc group added', 'configuration of user interfaces enhanced', 'vlan group modified and enhanced', 'Enhanced radius settings', 'Special purpose Vlan IDs Storage Media Card Support Inventory string', 'Radius Server Settings enhanced', 'Spanning Tree Group implemented', 'Ring Notifications implemented reduced line length (to avoid HPOV-Bug)', 'SNMP multiple version configuration', 'The Module-Identity', 'Initial Version',))
if mibBuilder.loadTexts: mib3.setLastUpdated('201104110000Z')
if mibBuilder.loadTexts: mib3.setOrganization('MICROSENS')
if mibBuilder.loadTexts: mib3.setContactInfo('MICROSENS GmbH & Co. KG Kueferstrasse 16 D-59067 Hamm / Germany Tel : +49 (0) 23 81 / 94 52 -0 Fax : +49 (0) 23 81 / 94 52 -100 E-mail: support@microsens.de')
if mibBuilder.loadTexts: mib3.setDescription('MIB module for manages Switches')
microsens = MibIdentifier((1, 3, 6, 1, 4, 1, 3181))
managedSwitches = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1))
deviceArtNo = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceArtNo.setStatus('current')
if mibBuilder.loadTexts: deviceArtNo.setDescription('This entry describes the article number of the device.')
deviceSerNo = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerNo.setStatus('current')
if mibBuilder.loadTexts: deviceSerNo.setDescription('This entry describes the serial number of the device.')
deviceHardware = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHardware.setStatus('current')
if mibBuilder.loadTexts: deviceHardware.setDescription('This entry contains the hardware version of the device.')
deviceDescription = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDescription.setStatus('current')
if mibBuilder.loadTexts: deviceDescription.setDescription('This entry contains a description of the device.')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('This entry contains a description of the device.')
deviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceLocation.setStatus('current')
if mibBuilder.loadTexts: deviceLocation.setDescription('This entry contains the location of the device.')
deviceContact = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceContact.setStatus('current')
if mibBuilder.loadTexts: deviceContact.setDescription('This entry contains a contact regarding the device.')
deviceGroup = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGroup.setStatus('current')
if mibBuilder.loadTexts: deviceGroup.setDescription('This entry defines the name of the group the device belongs to.')
deviceTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperature.setStatus('current')
if mibBuilder.loadTexts: deviceTemperature.setDescription("This is the current temperature of the device in degree celsius. A value of 255 has to be interpreted as 'unsupported'.")
deviceTemperatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 254, 255))).clone(namedValues=NamedValues(("criticalLow", 1), ("low", 2), ("normal", 3), ("high", 4), ("criticalHigh", 5), ("shutdown", 6), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperatureLevel.setStatus('current')
if mibBuilder.loadTexts: deviceTemperatureLevel.setDescription('This is the current temperature level of the device.')
deviceUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUpTime.setStatus('current')
if mibBuilder.loadTexts: deviceUpTime.setDescription('Time since the device was last re-initialized (in 0.01s).')
deviceFddActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFddActiveTime.setStatus('current')
if mibBuilder.loadTexts: deviceFddActiveTime.setDescription("Active Time interval for Fibre- Down-Detection Feature (in 0.01s). valid range: [10 .. 100000] A value of '0' means 'unsupported'")
deviceFddPassiveTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 13), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFddPassiveTime.setStatus('current')
if mibBuilder.loadTexts: deviceFddPassiveTime.setDescription("Passive Time interval for Fibre- Down-Detection Feature (in 0.01s). valid range: [10 .. 100000] A value of '0' means 'unsupported'")
deviceInventory = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceInventory.setStatus('current')
if mibBuilder.loadTexts: deviceInventory.setDescription('This entry contains an inventory string for the device.')
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2))
agentFirmware = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFirmware.setStatus('current')
if mibBuilder.loadTexts: agentFirmware.setDescription('This entry contains the firmware version of the agent.')
agentMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentMacAddress.setDescription('This entry contains the mac address of the agent.')
agentIpMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpMode.setStatus('current')
if mibBuilder.loadTexts: agentIpMode.setDescription('This entry describes the IP-mode of the agent.')
agentIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpAddress.setDescription('This entry contains the IP-address of the agent.')
agentSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentSubnetMask.setDescription('This entry contains the subnet mask of the agent.')
agentGateway = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGateway.setStatus('current')
if mibBuilder.loadTexts: agentGateway.setDescription('This entry contains the gateway ip address for the agent.')
agentConfigReset = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normalOperation", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigReset.setStatus('current')
if mibBuilder.loadTexts: agentConfigReset.setDescription("Set this entry to '1' to reset the device. This entry is self clearing.")
agentConfigFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normalOperation", 0), ("factoryResetTemp", 1), ("factoryResetPerm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: agentConfigFactoryDefault.setDescription("Set this entry to '1' before setting the entry 'agentConfigReset' to '1' sets the device to factory defaults once and the entry is self cleared. Setting this entry to '2' it will remain as set and every standard reset will be a factory reset. If 'Permanent Factory Reset' is not supported then the 'Temporary Factory Reset' will be set instead.")
agentConfigEnableFactoryButton = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigEnableFactoryButton.setStatus('current')
if mibBuilder.loadTexts: agentConfigEnableFactoryButton.setDescription("Setting this entry to a '1' enables the hardware button for a factory reset if available.")
agentSecureAddressFlag = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("useSecure", 1), ("useNormal", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSecureAddressFlag.setStatus('current')
if mibBuilder.loadTexts: agentSecureAddressFlag.setDescription('This Entry documents the Flag which is set from the system if invalid values for MAC-address, IP-address or subnet mask have been found in the stored configuration. In this case hard coded secure values are used instead of those found. This flag is cleared if valid valued are found when the system comes up.')
agentStorageMediaCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("noCardInserted", 1), ("invalidCardDetected", 2), ("validCardDetected", 3), ("bootedFromCard", 4), ("bootedFromCardwithMac", 5), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStorageMediaCardStatus.setStatus('current')
if mibBuilder.loadTexts: agentStorageMediaCardStatus.setDescription('This Entry represents the detected status of a storage memory card if supported.')
agentStorageMediaCardBoot = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("normalOperation", 0), ("bootSmcTemp", 1), ("bootSmcPerm", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStorageMediaCardBoot.setStatus('current')
if mibBuilder.loadTexts: agentStorageMediaCardBoot.setDescription("Set this entry to '1' before setting the entry 'agentConfigReset' to '1' sets the device's config to the values stored on the Storage Media Card once if available . and the entry is self cleared. Setting this entry to '2' it will remain as set and every boot event will use the configuration from the card. If not supported a value of 255 will be returned.")
agentStorageMediaCardMac = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("useMacFromSMC", 1), ("useOriginalMac", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStorageMediaCardMac.setStatus('current')
if mibBuilder.loadTexts: agentStorageMediaCardMac.setDescription("Set this entry to '1' before setting the entry 'agentConfigReset' to '1' leads to take the MAC address from the SMC. Be very careful with this service option to avoid duplicated MAC addresses.!")
agentStoreConfigToStorageMediaCard = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normalOperation", 0), ("store", 1), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStoreConfigToStorageMediaCard.setStatus('current')
if mibBuilder.loadTexts: agentStoreConfigToStorageMediaCard.setDescription("Set this entry to '1' to store the present configuration to the storage media card if available. This entry is self clearing.")
port = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3))
portCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCount.setStatus('current')
if mibBuilder.loadTexts: portCount.setDescription('The number of ports resent on this system.')
portStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10), )
if mibBuilder.loadTexts: portStatusTable.setStatus('current')
if mibBuilder.loadTexts: portStatusTable.setDescription('This table contains port status information of the device.')
portStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "portStatusId"))
if mibBuilder.loadTexts: portStatusTableEntry.setStatus('current')
if mibBuilder.loadTexts: portStatusTableEntry.setDescription('Entry in the port status table.')
portStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusId.setStatus('current')
if mibBuilder.loadTexts: portStatusId.setDescription('This entry describes the port id.')
portStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254))).clone(namedValues=NamedValues(("port-tx10-100", 1), ("port-t10-100-1000", 2), ("port-fx100", 3), ("port-fx100-1000-sfp", 4), ("port-x1000", 5), ("port-tx10-100-1000-sfp", 6), ("port-tx10-100-1000-1x9", 7), ("undefined", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusType.setStatus('current')
if mibBuilder.loadTexts: portStatusType.setDescription('This entry describes the type of the port.')
portStatusLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("undefined", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusLink.setStatus('current')
if mibBuilder.loadTexts: portStatusLink.setDescription('This entry describes the link status of the port.')
portStatusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254))).clone(namedValues=NamedValues(("speed10", 1), ("speed100", 2), ("speed1000", 3), ("undefined", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusSpeed.setStatus('current')
if mibBuilder.loadTexts: portStatusSpeed.setDescription('This entry describes the current speed status of the port if available.')
portStatusDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("halfduplex", 1), ("fullduplex", 2), ("undefined", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusDuplex.setStatus('current')
if mibBuilder.loadTexts: portStatusDuplex.setDescription('This entry describes the current duplex status of the port if available.')
portStatusFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusFlowControl.setStatus('current')
if mibBuilder.loadTexts: portStatusFlowControl.setDescription('This entry describes the current flow control status of the port if available. This state referres the current duplex mode.')
portStatusPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusPinout.setStatus('current')
if mibBuilder.loadTexts: portStatusPinout.setDescription('This entry describes the current pinout status of the port if available.')
portStatusFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("detected", 1), ("undetected", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusFarEndFault.setStatus('current')
if mibBuilder.loadTexts: portStatusFarEndFault.setDescription('This entry describes the current Far End Fault Detection status of the port if available.')
portStatusRxNetload = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusRxNetload.setStatus('current')
if mibBuilder.loadTexts: portStatusRxNetload.setDescription("This entry describes the receiver netload in percent, adapted to the selected port speed. Netload values greater than '0' but less that '1' are rounded up to a '1' to differentiate them from real zero-values. If netload measuring is not supported, then a value of '-1' is given back.")
portStatusTxNetload = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatusTxNetload.setStatus('current')
if mibBuilder.loadTexts: portStatusTxNetload.setDescription("This entry describes the transmitter netload in percent, adapted to the selected port speed. Netload values greater than '0' but less that '1' are rounded up to a '1' to differentiate them from real zero-values. If netload measuring is not supported, then a value of '-1' is given back.")
portConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20), )
if mibBuilder.loadTexts: portConfigTable.setStatus('current')
if mibBuilder.loadTexts: portConfigTable.setDescription('This table contains the port configuration of the device.')
portConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "portConfigId"))
if mibBuilder.loadTexts: portConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: portConfigTableEntry.setDescription('Entry in the port configuration table.')
portConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfigId.setStatus('current')
if mibBuilder.loadTexts: portConfigId.setDescription("This entry describes the device's port id.")
portConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigAlias.setStatus('current')
if mibBuilder.loadTexts: portConfigAlias.setDescription('This entry contains an individual name for the port.')
portConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigEnable.setStatus('current')
if mibBuilder.loadTexts: portConfigEnable.setDescription('This entry describes the type of the port.')
portConfigAutonego = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigAutonego.setStatus('current')
if mibBuilder.loadTexts: portConfigAutonego.setDescription('This entry describes the current autonegotiation configuration of the port if available.')
portConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("force10", 1), ("force100", 2), ("force1000", 3), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: portConfigSpeed.setDescription('This entry describes the current speed configuration of the port if available. This entry is only valid if Autonegotiation is disabled.')
portConfigDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("forcehalf", 1), ("forcefull", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDuplex.setStatus('current')
if mibBuilder.loadTexts: portConfigDuplex.setDescription('This entry describes the current duplex configuration of the port if available. This entry is only valid if Autonegotiation is disabled.')
portConfigFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("advertise", 1), ("avoid", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigFlowControl.setStatus('current')
if mibBuilder.loadTexts: portConfigFlowControl.setDescription('This entry describes the current flow control configuration of the port if available. The current duplex mode is is used to to select the matching settings. This entry is used for advertising if Autonegotiation is enabled and for forcing if AN is disabled.')
portConfigPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 254, 255))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigPinout.setStatus('current')
if mibBuilder.loadTexts: portConfigPinout.setDescription('This entry describes the current pinout configuration of a copper port if available.')
portConfigFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disalbed", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigFarEndFault.setStatus('current')
if mibBuilder.loadTexts: portConfigFarEndFault.setDescription('This entry describes the current far end fault behaviour of a fiber port if available.')
portConfigAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("advertiseGigabit", 1), ("avoidGigabit", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigAdvertise.setStatus('current')
if mibBuilder.loadTexts: portConfigAdvertise.setDescription('This entry describes the autonegotiation advertise information of the port.')
portConfigFibreDownDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 3, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disalbed", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigFibreDownDetection.setStatus('current')
if mibBuilder.loadTexts: portConfigFibreDownDetection.setDescription('This entry describes the current fibre down detection behaviour of a fiber port if available.')
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4))
vlanSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("notsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSupport.setStatus('current')
if mibBuilder.loadTexts: vlanSupport.setDescription('This entry contains the information if vlans are supported or not.')
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
if mibBuilder.loadTexts: vlanEnable.setDescription('This entry enables or disables vlan filtering.')
vlanForceDefaultVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("perport", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanForceDefaultVID.setStatus('current')
if mibBuilder.loadTexts: vlanForceDefaultVID.setDescription('This entry enables or disables forcing default vlan id.')
vlanFilterCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFilterCount.setStatus('current')
if mibBuilder.loadTexts: vlanFilterCount.setDescription('This entry describes the number of supported vlan filters.')
vlanVoiceVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceVID.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceVID.setDescription('This entry describes the default VID for Voice over IP operation. This VID is communicated via CDP and LLDP.')
vlanRstpVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanRstpVID.setStatus('current')
if mibBuilder.loadTexts: vlanRstpVID.setDescription('This entry describes the VID for RSTP operation.')
vlanUnauthVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanUnauthVID.setStatus('current')
if mibBuilder.loadTexts: vlanUnauthVID.setDescription('This entry describes the VID used for unauthorized ports if The corresponding mode of operation has been selected.')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
if mibBuilder.loadTexts: vlanPortTable.setDescription('This table contains the vlan port configuration.')
vlanPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "vlanPortId"))
if mibBuilder.loadTexts: vlanPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanPortTableEntry.setDescription('Entry in the vlan port configuration table.')
vlanPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortId.setStatus('current')
if mibBuilder.loadTexts: vlanPortId.setDescription("This entry describes the port id for the vlan port table. The port id '0' is used for the internal management agent port.")
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2), ("hybrid", 3), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
if mibBuilder.loadTexts: vlanPortMode.setDescription('This entry describes the vlan mode the port.')
vlanDefaultVID = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultVID.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultVID.setDescription('This entry describes default vid for the port.')
vlanDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultPriority.setDescription('This entry describes default priority tag for the port.')
vlanPortFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortFlags.setStatus('current')
if mibBuilder.loadTexts: vlanPortFlags.setDescription("This Entry contains per port some bitwise filter settings: Bit 0: Force Port Default VID (only valid if vlanForceDefaultVID is set to '3') Bit 1: per VID Priority Override")
vlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20), )
if mibBuilder.loadTexts: vlanFilterTable.setStatus('current')
if mibBuilder.loadTexts: vlanFilterTable.setDescription('This table contains the vlan filter configuration.')
vlanFilterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "vlanFilterId"))
if mibBuilder.loadTexts: vlanFilterTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanFilterTableEntry.setDescription('Entry in the vlan filter configuration table.')
vlanFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFilterId.setStatus('current')
if mibBuilder.loadTexts: vlanFilterId.setDescription('This entry contains the filter id for the vlan filter table.')
vlanFilterVID = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterVID.setStatus('current')
if mibBuilder.loadTexts: vlanFilterVID.setDescription('This entry describes the vlan id for the filter.')
vlanFilterAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterAlias.setStatus('current')
if mibBuilder.loadTexts: vlanFilterAlias.setDescription('This entry describes an individual name for the vlan filter.')
vlanFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterEnable.setStatus('current')
if mibBuilder.loadTexts: vlanFilterEnable.setDescription('This entry enables or disabled the vlan filter.')
vlanMemberManager = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberManager.setStatus('current')
if mibBuilder.loadTexts: vlanMemberManager.setDescription('This entry defines the membership of the management agent to the filter.')
vlanMemberPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort1.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort1.setDescription('This entry defines the membership of port 1 to the filter.')
vlanMemberPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort2.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort2.setDescription('This entry defines the membership of port 2 to the filter.')
vlanMemberPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort3.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort3.setDescription('This entry defines the membership of port 3 to the filter.')
vlanMemberPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort4.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort4.setDescription('This entry defines the membership of port 4 to the filter.')
vlanMemberPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort5.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort5.setDescription('This entry defines the membership of port 5 to the filter.')
vlanMemberPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort6.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort6.setDescription('This entry defines the membership of port 6 to the filter.')
vlanMemberPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort7.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort7.setDescription('This entry defines the membership of port 7 to the filter.')
vlanMemberPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort8.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort8.setDescription('This entry defines the membership of port 8 to the filter.')
vlanMemberPort9 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort9.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort9.setDescription('This entry defines the membership of port 9 to the filter.')
vlanMemberPort10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort10.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort10.setDescription('This entry defines the membership of port 10 to the filter.')
vlanMemberPort11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort11.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort11.setDescription('This entry defines the membership of port 11 to the filter.')
vlanMemberPort12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort12.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort12.setDescription('This entry defines the membership of port 12 to the filter.')
vlanMemberPort13 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort13.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort13.setDescription('This entry defines the membership of port 13 to the filter.')
vlanMemberPort14 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort14.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort14.setDescription('This entry defines the membership of port 14 to the filter.')
vlanMemberPort15 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort15.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort15.setDescription('This entry defines the membership of port 15 to the filter.')
vlanMemberPort16 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort16.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort16.setDescription('This entry defines the membership of port 16 to the filter.')
vlanMemberPort17 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort17.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort17.setDescription('This entry defines the membership of port 17 to the filter.')
vlanMemberPort18 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort18.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort18.setDescription('This entry defines the membership of port 18 to the filter.')
vlanMemberPort19 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort19.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort19.setDescription('This entry defines the membership of port 19 to the filter.')
vlanMemberPort20 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort20.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort20.setDescription('This entry defines the membership of port 20 to the filter.')
vlanMemberPort21 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort21.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort21.setDescription('This entry defines the membership of port 21 to the filter.')
vlanMemberPort22 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort22.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort22.setDescription('This entry defines the membership of port 22 to the filter.')
vlanMemberPort23 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort23.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort23.setDescription('This entry defines the membership of port 23 to the filter.')
vlanMemberPort24 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 20, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMemberPort24.setStatus('current')
if mibBuilder.loadTexts: vlanMemberPort24.setDescription('This entry defines the membership of port 24 to the filter.')
vlanFilterEnhTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30), )
if mibBuilder.loadTexts: vlanFilterEnhTable.setStatus('current')
if mibBuilder.loadTexts: vlanFilterEnhTable.setDescription('This table contains the enhanced vlan filter configuration.')
vlanFilterEnhTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "vlanFilterEnhId"))
if mibBuilder.loadTexts: vlanFilterEnhTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanFilterEnhTableEntry.setDescription('Entry in the vlan filter enhanced configuration table.')
vlanFilterEnhId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFilterEnhId.setStatus('current')
if mibBuilder.loadTexts: vlanFilterEnhId.setDescription('This entry contains the filter id for the enhanced vlan filter table.')
vlanFilterEnhFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterEnhFlags.setStatus('current')
if mibBuilder.loadTexts: vlanFilterEnhFlags.setDescription('This Entry contains some flags for VLAN filter settings. The content is defined as following: Bit 0: Filter Enabled Bit 1: per VID Priority Override Enabled')
vlanFilterEnhPriOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 4, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanFilterEnhPriOverride.setStatus('current')
if mibBuilder.loadTexts: vlanFilterEnhPriOverride.setDescription('This entry contains the priority value to override an ingress frame with if its VLAN ID fits, filtering is enabled, port selective override flag is set and filter selective override flag is set.')
prioritization = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5))
prioSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioSupport.setStatus('current')
if mibBuilder.loadTexts: prioSupport.setDescription('This entry contains the information if prioritization is supported or not.')
prioQueueCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioQueueCount.setStatus('current')
if mibBuilder.loadTexts: prioQueueCount.setDescription('This entry defines the number of queues supported by the device.')
prioQueueScheme = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("weighted", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioQueueScheme.setStatus('current')
if mibBuilder.loadTexts: prioQueueScheme.setDescription('This entry defines the queue scheme for prioritization.')
prioPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioPortEnable.setStatus('current')
if mibBuilder.loadTexts: prioPortEnable.setDescription('Hardwaret prioritization of the device is applied if all other type of prioritization are not applicable.')
prioIeeeTagEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIeeeTagEnable.setStatus('current')
if mibBuilder.loadTexts: prioIeeeTagEnable.setDescription('If enabled, a IEEE 802.1p tagged frame will be mapped to the queue that is assigned to this tag')
prioDiffservEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioDiffservEnable.setStatus('current')
if mibBuilder.loadTexts: prioDiffservEnable.setDescription('If enabled a tagged frame will be mapped to the queue that is assigned to this tag.')
prioPortTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 10), )
if mibBuilder.loadTexts: prioPortTable.setStatus('current')
if mibBuilder.loadTexts: prioPortTable.setDescription('This table contains the port prioritization of the device. This setting is always valid if no other type of prioritization has been selected.')
prioPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "prioPortId"))
if mibBuilder.loadTexts: prioPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: prioPortTableEntry.setDescription('Entry in the port prioritization table.')
prioPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioPortId.setStatus('current')
if mibBuilder.loadTexts: prioPortId.setDescription("This entry describes the device's port id.")
prioPortQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioPortQueue.setStatus('current')
if mibBuilder.loadTexts: prioPortQueue.setDescription('This entry describes the selected queue if port prioritization is available.')
prioIeeeTagTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 20), )
if mibBuilder.loadTexts: prioIeeeTagTable.setStatus('current')
if mibBuilder.loadTexts: prioIeeeTagTable.setDescription('This table contains the configuuration of IEEE 802.1p prioritization. Each of the 8 different values is assigned to one of the available queues here.')
prioIeeeTagTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 20, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "prioIeeeTagId"))
if mibBuilder.loadTexts: prioIeeeTagTableEntry.setStatus('current')
if mibBuilder.loadTexts: prioIeeeTagTableEntry.setDescription('Entry in the IEEE 802.1p tag prioritization table.')
prioIeeeTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioIeeeTagId.setStatus('current')
if mibBuilder.loadTexts: prioIeeeTagId.setDescription('This entry defines the IEEE 802.1p tag a queue is assigned to.')
prioIeeeTagQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIeeeTagQueue.setStatus('current')
if mibBuilder.loadTexts: prioIeeeTagQueue.setDescription('This entry describes the selected queue for each IEEE 802.1p tag.')
prioDiffservTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 30), )
if mibBuilder.loadTexts: prioDiffservTable.setStatus('current')
if mibBuilder.loadTexts: prioDiffservTable.setDescription('This table contains the configuuration of DiffServ prioritization. Each of the 64 different values is assigned to one of the available queues here.')
prioDiffservTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 30, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "prioDiffservId"))
if mibBuilder.loadTexts: prioDiffservTableEntry.setStatus('current')
if mibBuilder.loadTexts: prioDiffservTableEntry.setDescription('Entry in the Diffserv prioritization table.')
prioDiffservId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prioDiffservId.setStatus('current')
if mibBuilder.loadTexts: prioDiffservId.setDescription('This entry defines the Diffserv index a queue is assigned to.')
prioDiffservQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 5, 30, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioDiffservQueue.setStatus('current')
if mibBuilder.loadTexts: prioDiffservQueue.setDescription('This entry describes the selected queue for each Diffserv index.')
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6))
monitorSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorSupport.setStatus('current')
if mibBuilder.loadTexts: monitorSupport.setDescription('This entry contains the information if port monitoring is supported or not.')
monitorMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("txonly", 1), ("both", 2), ("disabled", 3), ("hubmode", 4), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorMode.setStatus('current')
if mibBuilder.loadTexts: monitorMode.setDescription('This entry enables or disables monitoring and selects the mode of operation.')
monitorSource = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorSource.setStatus('current')
if mibBuilder.loadTexts: monitorSource.setDescription('This entry contains the monitor source portnumber.')
monitorDestination = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDestination.setStatus('current')
if mibBuilder.loadTexts: monitorDestination.setDescription('This entry contains the monitor destination portnumber.')
ring = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7))
ringSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringSupport.setStatus('current')
if mibBuilder.loadTexts: ringSupport.setDescription('This entry contains the information if ethernet ring feature is supported or not.')
ringCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringCount.setStatus('current')
if mibBuilder.loadTexts: ringCount.setDescription('The number of supported rings on this system.')
ringTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10), )
if mibBuilder.loadTexts: ringTable.setStatus('current')
if mibBuilder.loadTexts: ringTable.setDescription('This table contains the ring configuration of the device.')
ringTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "ringId"))
if mibBuilder.loadTexts: ringTableEntry.setStatus('current')
if mibBuilder.loadTexts: ringTableEntry.setDescription('Entry in the ring configuration table.')
ringId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringId.setStatus('current')
if mibBuilder.loadTexts: ringId.setDescription('This entry describes the ring id.')
ringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("disabled", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringMode.setStatus('current')
if mibBuilder.loadTexts: ringMode.setDescription('This entry enables or disables ring mode and selects the mode of operation.')
ringPortA = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortA.setStatus('current')
if mibBuilder.loadTexts: ringPortA.setDescription("This entry defines port A for the ring function. If the device is a 'master' this is the main port. If ring feature is not supported a 255 will be replied.")
ringPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortB.setStatus('current')
if mibBuilder.loadTexts: ringPortB.setDescription("This entry defines port B for the ring function. If the device is a 'master' this is the backup port. If ring feature is not supported a 255 will be replied.")
ringNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringNumber.setStatus('current')
if mibBuilder.loadTexts: ringNumber.setDescription('This entry defines the ring ID number. If ring feature is not supported a 255 will be replied.')
ringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ringOk", 1), ("ringFailure", 2), ("ringDisabled", 3), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringStatus.setStatus('current')
if mibBuilder.loadTexts: ringStatus.setDescription('This entry defines the ring status.')
ringAlarmDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 7, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringAlarmDuration.setStatus('current')
if mibBuilder.loadTexts: ringAlarmDuration.setDescription("Duration of ring alarm status (in 0.01s). This entry is used as additional status information in repeated ring alarm traps if error status remains unchanged. A value of '0' means 'no ring alarm'")
couplingred = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8))
couplingredSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplingredSupport.setStatus('current')
if mibBuilder.loadTexts: couplingredSupport.setDescription('This entry contains the information if ring coupling redundancy is supported or not.')
couplingredPort = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingredPort.setStatus('current')
if mibBuilder.loadTexts: couplingredPort.setDescription('This entry defines the port for the ring coupling redundancy function. If not supported this entry is set to 0.')
couplingredMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("backup", 1), ("main", 2), ("disabled", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingredMode.setStatus('current')
if mibBuilder.loadTexts: couplingredMode.setDescription('This entry enables or disables ring coupling redundancy mode and selects the mode of operation.')
couplingredPartnerIp = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: couplingredPartnerIp.setStatus('current')
if mibBuilder.loadTexts: couplingredPartnerIp.setDescription('This entry defines the ip address of the ring coupling redundancy partner. In backup mode this is the ip address of the main device. In main mode this is the ip address of the backup device. If not supported this entry is set to 0.0.0.0 .')
couplingredStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("disabled", 0), ("blocked", 1), ("link", 2), ("forwarding", 3), ("standby", 4), ("undefined", 5), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplingredStatus.setStatus('current')
if mibBuilder.loadTexts: couplingredStatus.setDescription('This entry defines the ring coupling redundancy mode status.')
couplingredPartnerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("disabled", 0), ("blocked", 1), ("link", 2), ("forwarding", 3), ("standby", 4), ("undefined", 5), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplingredPartnerStatus.setStatus('current')
if mibBuilder.loadTexts: couplingredPartnerStatus.setDescription('This entry defines the ring coupling redundancy mode status.')
couplingredValidationFlag = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: couplingredValidationFlag.setStatus('current')
if mibBuilder.loadTexts: couplingredValidationFlag.setDescription('This entry defines the validation of ring coupling redundancy. Bit 0 indicates a valid configuration, Bit 1 indicates a valid status. If ring coupling redundancy is unsupported or disabled this entry is set to 255.')
sfp = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9))
sfpSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpSupport.setStatus('current')
if mibBuilder.loadTexts: sfpSupport.setDescription('This entry contains the information if sfp modules are supported or not.')
sfpCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpCount.setStatus('current')
if mibBuilder.loadTexts: sfpCount.setDescription('The number of supported sfp modules.')
sfpTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10), )
if mibBuilder.loadTexts: sfpTable.setStatus('current')
if mibBuilder.loadTexts: sfpTable.setDescription('This table contains the sfp module status of the device.')
sfpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "sfpId"))
if mibBuilder.loadTexts: sfpTableEntry.setStatus('current')
if mibBuilder.loadTexts: sfpTableEntry.setDescription('Entry in the sfp status table.')
sfpId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpId.setStatus('current')
if mibBuilder.loadTexts: sfpId.setDescription('This entry describes the sfp id.')
sfpPortnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPortnumber.setStatus('current')
if mibBuilder.loadTexts: sfpPortnumber.setDescription('This entry describes the number of the port where the sfp can be plugged in.')
sfpDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("plugged", 1), ("unplugged", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDetect.setStatus('current')
if mibBuilder.loadTexts: sfpDetect.setDescription('This entry enables or disables uplink redundancy')
sfpVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendor.setStatus('current')
if mibBuilder.loadTexts: sfpVendor.setDescription('This entry describes the vendor name of the sfp.')
sfpVendorPartnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorPartnumber.setStatus('current')
if mibBuilder.loadTexts: sfpVendorPartnumber.setDescription('This entry describes the vendor partnumber of the sfp.')
sfpVendorSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSerialnumber.setStatus('current')
if mibBuilder.loadTexts: sfpVendorSerialnumber.setDescription('This entry describes the vendor serialnumber of the sfp.')
sfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 7, 8, 255))).clone(namedValues=NamedValues(("connSC", 1), ("connLC", 7), ("connMTRJ", 8), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConnector.setStatus('current')
if mibBuilder.loadTexts: sfpConnector.setDescription('This entry describes the type of connector of the sfp.')
sfpNominalBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpNominalBitrate.setStatus('current')
if mibBuilder.loadTexts: sfpNominalBitrate.setDescription('This entry describes the nominal bitrate of the sfp. It is a maximum value, a lower value may be used instead.')
sfpDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("supportedWithInternalCalibration", 1), ("supportedWithExternalCalibration", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagnostic.setStatus('current')
if mibBuilder.loadTexts: sfpDiagnostic.setDescription('This entry describes tha avalability and type of diagnostics.')
sfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTemperature.setStatus('current')
if mibBuilder.loadTexts: sfpTemperature.setDescription('This entry describes the temperature of the sfp in multiple of 0.1 degree celsius.')
sfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVoltage.setStatus('current')
if mibBuilder.loadTexts: sfpVoltage.setDescription('This entry describes the supply voltage of the sfp in multiple of 0.01 V.')
sfpTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxBias.setStatus('current')
if mibBuilder.loadTexts: sfpTxBias.setDescription('This entry describes the transmit bias current of the sfp in multiple of 0.01 mA.')
sfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxPower.setStatus('current')
if mibBuilder.loadTexts: sfpTxPower.setDescription('This entry describes the optical transmit power of the sfp in multiple of 0.1 uW.')
sfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRxPower.setStatus('current')
if mibBuilder.loadTexts: sfpRxPower.setDescription('This entry describes the ooptical receive power of the sfp in multiple of 0.1 uW.')
sfpWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 15), Bits().clone(namedValues=NamedValues(("tempHighWarn", 0), ("tempLowWarn", 1), ("vccHighWarn", 2), ("vccLowWarn", 3), ("txBiasHighWarn", 4), ("txBiasLowWarn", 5), ("txPowerHighWarn", 6), ("txPowerLowWarn", 7), ("rxPowerHighWarn", 8), ("rxPowerLowWarn", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpWarnings.setStatus('current')
if mibBuilder.loadTexts: sfpWarnings.setDescription('This entry contains the flags for internal warnings. A warning occurrs if regarding warning threshold is exceeded.')
sfpAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 9, 10, 1, 16), Bits().clone(namedValues=NamedValues(("tempHighAlarm", 0), ("tempLowAlarm", 1), ("vccHighAlarm", 2), ("vccLowAlarm", 3), ("txBiasHighAlarm", 4), ("txBiasLowAlarm", 5), ("txPowerHighAlarm", 6), ("txPowerLowAlarm", 7), ("rxPowerHighAlarm", 8), ("rxPowerLowAlarm", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpAlarms.setStatus('current')
if mibBuilder.loadTexts: sfpAlarms.setDescription('This entry contains the flags for internal alarms. An alarm occurrs if regarding alarm threshold is exceeded.')
relais = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11))
relaisSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaisSupport.setStatus('current')
if mibBuilder.loadTexts: relaisSupport.setDescription('This entry contains the information if an alram relais is supported or not.')
relaisCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaisCount.setStatus('current')
if mibBuilder.loadTexts: relaisCount.setDescription('The number of supported relais on this system.')
relaisTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10), )
if mibBuilder.loadTexts: relaisTable.setStatus('current')
if mibBuilder.loadTexts: relaisTable.setDescription('This table contains the relais configuration of the device.')
relaisTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "relaisId"))
if mibBuilder.loadTexts: relaisTableEntry.setStatus('current')
if mibBuilder.loadTexts: relaisTableEntry.setDescription('Entry in the relais configuration table.')
relaisId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: relaisId.setStatus('current')
if mibBuilder.loadTexts: relaisId.setDescription('This entry describes the relais id.')
relaisAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaisAlias.setStatus('current')
if mibBuilder.loadTexts: relaisAlias.setDescription('This entry contains an individual name for the relais.')
relaisMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("openOnEvent", 1), ("closeOnEvent", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaisMode.setStatus('current')
if mibBuilder.loadTexts: relaisMode.setDescription('This entry describes the bahaviour of the alarm relais.')
relaisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 11, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("closed", 1), ("opened", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relaisStatus.setStatus('current')
if mibBuilder.loadTexts: relaisStatus.setDescription('This entry describes the present status of the alarm relais.')
portaccessctrl = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12))
pacSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacSupport.setStatus('current')
if mibBuilder.loadTexts: pacSupport.setDescription('This entry contains the information if port authentication is supported or not.')
pacEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacEnable.setStatus('current')
if mibBuilder.loadTexts: pacEnable.setDescription('This entry enables or disables port authentication.')
pacUnauthMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("block", 1), ("useDefaultVID", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacUnauthMode.setStatus('current')
if mibBuilder.loadTexts: pacUnauthMode.setDescription('The entry describes the mode of operation for unauthorized ports.')
pacUnauthVID = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacUnauthVID.setStatus('current')
if mibBuilder.loadTexts: pacUnauthVID.setDescription('This entry describes the default VID for ports which are unauthorized.')
pacMaxNumberOfAllowedHostsPerPort = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacMaxNumberOfAllowedHostsPerPort.setStatus('current')
if mibBuilder.loadTexts: pacMaxNumberOfAllowedHostsPerPort.setDescription('The value contains the maximum number of supported Hosts per port of this device.')
pacFallbackRequestEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacFallbackRequestEnable.setStatus('current')
if mibBuilder.loadTexts: pacFallbackRequestEnable.setDescription('This entry describes if authentication method fallback to MAC authentication after a request timeout is enabled(1) or not(2)')
pacFallbackRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacFallbackRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: pacFallbackRequestTimeout.setDescription('This entry contains the timeout value in seconds. If no response to a 802.1X request has been detected after this time a fallback to MAC authentication occures if bit 0 of pacFallbackMode is set.')
pacFallbackRejectsEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacFallbackRejectsEnable.setStatus('current')
if mibBuilder.loadTexts: pacFallbackRejectsEnable.setDescription('This entry describes if authentication method fallback to MAC authentication after a limited number of rejects is enabled(1) or not(2)')
pacFallbackMaxRejects = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacFallbackMaxRejects.setStatus('current')
if mibBuilder.loadTexts: pacFallbackMaxRejects.setDescription('This entry contains the maximum number of rejects by the Radius server. If this number is achieved a fallback to MAC authentication occures if bit 1 of pacFallbackMode is set.')
pacSupplicantTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacSupplicantTimeout.setStatus('current')
if mibBuilder.loadTexts: pacSupplicantTimeout.setDescription('This entry contains the Supplicant timeout value in seconds.')
pacReauthEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacReauthEnable.setStatus('current')
if mibBuilder.loadTexts: pacReauthEnable.setDescription('This entry describes if reauthentication after a configured time will be done(1) not(2).')
pacReauthTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacReauthTime.setStatus('current')
if mibBuilder.loadTexts: pacReauthTime.setDescription('This entry contains the reauthentication time period in minutes.')
pacStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100), )
if mibBuilder.loadTexts: pacStatusTable.setStatus('current')
if mibBuilder.loadTexts: pacStatusTable.setDescription('This table contains the port status of the port access control feature.')
pacStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "pacStatPortId"))
if mibBuilder.loadTexts: pacStatusTableEntry.setStatus('current')
if mibBuilder.loadTexts: pacStatusTableEntry.setDescription('Entry in the port access control port status table.')
pacStatPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatPortId.setStatus('current')
if mibBuilder.loadTexts: pacStatPortId.setDescription('This entry describes the port id.')
pacStatPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("forceAuthorized", 1), ("macLocking", 2), ("radiusMacAuthentication", 3), ("ieee8021xAuthentication", 4), ("forceUnauthorized", 5), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatPortMode.setStatus('current')
if mibBuilder.loadTexts: pacStatPortMode.setDescription('This entry describes the port access control mode.')
pacStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("authorized", 1), ("unauthorized", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatPortStatus.setStatus('current')
if mibBuilder.loadTexts: pacStatPortStatus.setDescription('This entry describes the port access control status.')
pacStatUserStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 22, 254, 255))).clone(namedValues=NamedValues(("authorized1", 10), ("unauthorized1", 11), ("tobedone1", 12), ("authorized2", 20), ("unauthorized2", 21), ("tobedone2", 22), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserStatus1.setStatus('current')
if mibBuilder.loadTexts: pacStatUserStatus1.setDescription('This entry describes the port access control mode status for the first host. Note, that different states of several authentication methods are summarized here. They are marked with different multiples of ten as an offset for each mode.')
pacStatUserStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 22, 254, 255))).clone(namedValues=NamedValues(("authorized1", 10), ("unauthorized1", 11), ("tobedone1", 12), ("authorized2", 20), ("unauthorized2", 21), ("tobedone2", 22), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserStatus2.setStatus('current')
if mibBuilder.loadTexts: pacStatUserStatus2.setDescription('This entry describes the port access control mode status for the second host. Note, that different states of several authentication methods are summarized here. They are marked with different multiples of ten as an offset for each mode.')
pacStatUserStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 22, 254, 255))).clone(namedValues=NamedValues(("authorized1", 10), ("unauthorized1", 11), ("tobedone1", 12), ("authorized2", 20), ("unauthorized2", 21), ("tobedone2", 22), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserStatus3.setStatus('current')
if mibBuilder.loadTexts: pacStatUserStatus3.setDescription('This entry describes the port access control mode status for the third host. Note, that different states of several authentication methods are summarized here. They are marked with different multiples of ten as an offset for each mode.')
pacStatUserStatus4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 20, 21, 22, 254, 255))).clone(namedValues=NamedValues(("authorized1", 10), ("unauthorized1", 11), ("tobedone1", 12), ("authorized2", 20), ("unauthorized2", 21), ("tobedone2", 22), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserStatus4.setStatus('current')
if mibBuilder.loadTexts: pacStatUserStatus4.setDescription('This entry describes the port access control mode status for the fourth host. Note, that different states of several authentication methods are summarized here. They are marked with different multiples of ten as an offset for each mode.')
pacStatUserMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 8), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserMac1.setStatus('current')
if mibBuilder.loadTexts: pacStatUserMac1.setDescription('This entry contains the 1st host mac address at the selected port if available.')
pacStatUserMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserMac2.setStatus('current')
if mibBuilder.loadTexts: pacStatUserMac2.setDescription('This entry contains the 2nd host mac address at the selected port if available.')
pacStatUserMac3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserMac3.setStatus('current')
if mibBuilder.loadTexts: pacStatUserMac3.setDescription('This entry contains the 3rd host mac address at the selected port if available.')
pacStatUserMac4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserMac4.setStatus('current')
if mibBuilder.loadTexts: pacStatUserMac4.setDescription('This entry contains the 4th host mac address at the selected port if available.')
pacStatUserName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserName1.setStatus('current')
if mibBuilder.loadTexts: pacStatUserName1.setDescription('This entry contains the 1st host user name at the selected port if available.')
pacStatUserName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserName2.setStatus('current')
if mibBuilder.loadTexts: pacStatUserName2.setDescription('This entry contains the 2nd host user name at the selected port if available.')
pacStatUserName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserName3.setStatus('current')
if mibBuilder.loadTexts: pacStatUserName3.setDescription('This entry contains the 3rd host user name at the selected port if available.')
pacStatUserName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserName4.setStatus('current')
if mibBuilder.loadTexts: pacStatUserName4.setDescription('This entry contains the 4th host user name at the selected port if available.')
pacStatUserIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserIp1.setStatus('current')
if mibBuilder.loadTexts: pacStatUserIp1.setDescription('This entry contains the 1st host ip address at the selected port if available.')
pacStatUserIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserIp2.setStatus('current')
if mibBuilder.loadTexts: pacStatUserIp2.setDescription('This entry contains the 2nd host ip address at the selected port if available.')
pacStatUserIp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserIp3.setStatus('current')
if mibBuilder.loadTexts: pacStatUserIp3.setDescription('This entry contains the 3rd host ip address at the selected port if available.')
pacStatUserIp4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 100, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacStatUserIp4.setStatus('current')
if mibBuilder.loadTexts: pacStatUserIp4.setDescription('This entry contains the 4th host ip address at the selected port if available.')
pacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110), )
if mibBuilder.loadTexts: pacConfigTable.setStatus('current')
if mibBuilder.loadTexts: pacConfigTable.setDescription('This table contains the port status of the port access control feature.')
pacConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "pacConfPortId"))
if mibBuilder.loadTexts: pacConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: pacConfigTableEntry.setDescription('Entry in the port access control port config table.')
pacConfPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacConfPortId.setStatus('current')
if mibBuilder.loadTexts: pacConfPortId.setDescription('This entry describes the port id.')
pacConfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("forceAuthorized", 1), ("macLocking", 2), ("radiusMacAuthentication", 3), ("ieee8021xAuthentication", 4), ("forceUnauthorized", 5), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacConfMode.setStatus('current')
if mibBuilder.loadTexts: pacConfMode.setDescription('This entry describes the port access control mode .')
pacConfMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 110, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacConfMaxMacCount.setStatus('current')
if mibBuilder.loadTexts: pacConfMaxMacCount.setDescription("This entry contains the maximum number of accessible hosts for the selected port if mode is set to 'Radius Authentication' or 'ieee 802.1x-Authentication.")
pacMacLockingTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120), )
if mibBuilder.loadTexts: pacMacLockingTable.setStatus('current')
if mibBuilder.loadTexts: pacMacLockingTable.setDescription('This table contains the port status of the port access control feature.')
pacMacLockTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "pacMacLockPortId"))
if mibBuilder.loadTexts: pacMacLockTableEntry.setStatus('current')
if mibBuilder.loadTexts: pacMacLockTableEntry.setDescription('Entry in the port access control port status table.')
pacMacLockPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pacMacLockPortId.setStatus('current')
if mibBuilder.loadTexts: pacMacLockPortId.setDescription('This entry describes the port id.')
pacMacLockEnable1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockEnable1.setStatus('current')
if mibBuilder.loadTexts: pacMacLockEnable1.setDescription('This entry describes if the host with the 1st locked Mac Address gets access to the selected port or not.')
pacMacLockEnable2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockEnable2.setStatus('current')
if mibBuilder.loadTexts: pacMacLockEnable2.setDescription('This entry describes if the host with the 2nd locked Mac Address gets access to the selected port or not.')
pacMacLockEnable3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockEnable3.setStatus('current')
if mibBuilder.loadTexts: pacMacLockEnable3.setDescription('This entry describes if the host with the 3rd locked Mac Address gets access to the selected port or not.')
pacMacLockEnable4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockEnable4.setStatus('current')
if mibBuilder.loadTexts: pacMacLockEnable4.setDescription('This entry describes if the host with the 4th locked Mac Address gets access to the selected port or not.')
pacMacLockLearn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("learn", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockLearn1.setStatus('current')
if mibBuilder.loadTexts: pacMacLockLearn1.setDescription('This entry describes if the 1st Mac Address to lock at the selected port has to be learned or if it is fixed.')
pacMacLockLearn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("learn", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockLearn2.setStatus('current')
if mibBuilder.loadTexts: pacMacLockLearn2.setDescription('This entry describes if the 2nd Mac Address to lock at the selected port has to be learned or if it is fixed.')
pacMacLockLearn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("learn", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockLearn3.setStatus('current')
if mibBuilder.loadTexts: pacMacLockLearn3.setDescription('This entry describes if the 3rd Mac Address to lock at the selected port has to be learned or if it is fixed.')
pacMacLockLearn4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("learn", 1), ("fixed", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacMacLockLearn4.setStatus('current')
if mibBuilder.loadTexts: pacMacLockLearn4.setDescription('This entry describes if the 4th Mac Address to lock at the selected port has to be learned or if it is fixed.')
pacLockedMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 10), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacLockedMac1.setStatus('current')
if mibBuilder.loadTexts: pacLockedMac1.setDescription('This entry contains the 1st locked mac address at the selected port.')
pacLockedMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 11), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacLockedMac2.setStatus('current')
if mibBuilder.loadTexts: pacLockedMac2.setDescription('This entry contains the 2nd locked mac address at the selected port.')
pacLockedMac3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 12), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacLockedMac3.setStatus('current')
if mibBuilder.loadTexts: pacLockedMac3.setDescription('This entry contains the 3rd locked mac address at the selected port.')
pacLockedMac4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 12, 120, 1, 13), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pacLockedMac4.setStatus('current')
if mibBuilder.loadTexts: pacLockedMac4.setDescription('This entry contains the 4th locked mac address at the selected port.')
igmps = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13))
igmpsSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsSupport.setStatus('current')
if mibBuilder.loadTexts: igmpsSupport.setDescription('This entry contains the information if IGMP Snooping is supported or not.')
igmpsEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsEnable.setStatus('current')
if mibBuilder.loadTexts: igmpsEnable.setDescription('This entry enables or disables the IGMP Snooping feature.')
igmpsFastLeave = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsFastLeave.setStatus('current')
if mibBuilder.loadTexts: igmpsFastLeave.setDescription('This entry enables or disables the Fast Leave feature.')
igmpsReportAggregation = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsReportAggregation.setStatus('current')
if mibBuilder.loadTexts: igmpsReportAggregation.setDescription('This entry enables or disables the Report Aggregation feature.')
igmpsFloodingUnregPack = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsFloodingUnregPack.setStatus('current')
if mibBuilder.loadTexts: igmpsFloodingUnregPack.setDescription('This entry enables or disables the Flooding Unregister Packet feature.')
igmpsMaxGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: igmpsMaxGroupLimit.setDescription('This entry defines the maximum value for the Group Limit.')
igmpsGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsGroupLimit.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupLimit.setDescription('This entry defines the Multicast Group Limit. The maximum valid value is defined in igmpsMaxGroupLimit.')
igmpsGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupNumber.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupNumber.setDescription('This entry defines the present number of Multicast Groups.')
igmpsRouterDetection = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("discovery", 1), ("query", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsRouterDetection.setStatus('current')
if mibBuilder.loadTexts: igmpsRouterDetection.setDescription('This entry defines the mode of Multicast Router detection.')
igmpsGroupMembershipInterval = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMembershipInterval.setDescription('This entry defines the Multicast Group Membersip Interval in multiples of a second. The default value is 260.')
igmpsMaximumResposeTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsMaximumResposeTime.setStatus('current')
if mibBuilder.loadTexts: igmpsMaximumResposeTime.setDescription('This entry defines the Multicast Group Maximum Response Time in multiples of a second. The default value is 10.')
igmpsLastMemeberQueryTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 175))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsLastMemeberQueryTime.setStatus('current')
if mibBuilder.loadTexts: igmpsLastMemeberQueryTime.setDescription('This entry defines the Multicast Group Last Member Query Time in multiples of a second. The default value is 2.')
igmpsNeighborDeadInterval = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 554))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsNeighborDeadInterval.setStatus('current')
if mibBuilder.loadTexts: igmpsNeighborDeadInterval.setDescription('This entry defines the Multicast Router Neighbor Dead Interval in multiples of a second. The default value is 62.')
igmpsRouterAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsRouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: igmpsRouterAgingTime.setDescription('This entry defines the Multicast Router Aging Time in multiples of a second. The default value is 260.')
igmpsRxMessageGeneralQuery = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageGeneralQuery.setStatus('current')
if mibBuilder.loadTexts: igmpsRxMessageGeneralQuery.setDescription('This is a counter for received General Query Messages.')
igmpsRxMessageSpecificQuery = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageSpecificQuery.setStatus('current')
if mibBuilder.loadTexts: igmpsRxMessageSpecificQuery.setDescription('This is a counter for received Group Specific Query Messages.')
igmpsRxMessageReport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageReport.setStatus('current')
if mibBuilder.loadTexts: igmpsRxMessageReport.setDescription('This is a counter for received Report Messages.')
igmpsRxMessageLeave = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageLeave.setStatus('current')
if mibBuilder.loadTexts: igmpsRxMessageLeave.setDescription('This is a counter for received Leave Messages.')
igmpsRxMessageAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageAdvertisement.setStatus('current')
if mibBuilder.loadTexts: igmpsRxMessageAdvertisement.setDescription('This is a counter for received Advertisement Messages.')
igmpsRxMessageTermination = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsRxMessageTermination.setStatus('current')
if mibBuilder.loadTexts: igmpsRxMessageTermination.setDescription('This is a counter for received Termination Messages.')
igmpsTxMessageSolicitation = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsTxMessageSolicitation.setStatus('current')
if mibBuilder.loadTexts: igmpsTxMessageSolicitation.setDescription('This is a counter for transmitted Solicitation Messages.')
igmpsCounterReset = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normalOperation", 0), ("reset", 1), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsCounterReset.setStatus('current')
if mibBuilder.loadTexts: igmpsCounterReset.setDescription("Set this entry to '1' to reset the IGMPS packet counters. This entry is self clearing.")
igmpsPortTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30), )
if mibBuilder.loadTexts: igmpsPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpsPortTable.setDescription('This table contains port status information of the device.')
igmpsPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "igmpsPortId"))
if mibBuilder.loadTexts: igmpsPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpsPortTableEntry.setDescription('Entry in the port value table.')
igmpsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsPortId.setStatus('current')
if mibBuilder.loadTexts: igmpsPortId.setDescription('This entry describes the port id.')
igmpsPortSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsPortSnooping.setStatus('current')
if mibBuilder.loadTexts: igmpsPortSnooping.setDescription('This entry determines if the port is enabled for IGMP Snooping or not (if supported).')
igmpsPortStaticRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsPortStaticRouter.setStatus('current')
if mibBuilder.loadTexts: igmpsPortStaticRouter.setDescription('This entry determins if the port is defined as static router port or not (if supported).')
igmpsPortDynamicRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("detected", 1), ("undetected", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsPortDynamicRouter.setStatus('current')
if mibBuilder.loadTexts: igmpsPortDynamicRouter.setDescription('This entry ddocuments if a router has been detected at this port or not (if supported).')
igmpsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40), )
if mibBuilder.loadTexts: igmpsGroupTable.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupTable.setDescription('This table contains port status information of the device.')
igmpsGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "igmpsGroupId"))
if mibBuilder.loadTexts: igmpsGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupTableEntry.setDescription('Entry in the port value table.')
igmpsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupId.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupId.setDescription('This entry describes the Multicast Group id.')
igmpsGroupMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMac.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMac.setDescription("This entry documents the Multicast Group's MAC-Address.")
igmpsGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupVlanId.setDescription('This entry documents the Vlan ID of the Multicast Group.')
igmpsGroupTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupTimestamp.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupTimestamp.setDescription('This entry documents the Timestamp of the Multicast Group in seconds.')
igmpsGroupLeaveFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("set", 1), ("unset", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupLeaveFlag.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupLeaveFlag.setDescription('This entry documents if the Leave Flag has been set or not.')
igmpsGroupMemberPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort1.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort1.setDescription('This entry defines the membership of port 1 to the Multicast Group.')
igmpsGroupMemberPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort2.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort2.setDescription('This entry defines the membership of port 2 to the Multicast Group.')
igmpsGroupMemberPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort3.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort3.setDescription('This entry defines the membership of port 3 to the Multicast Group.')
igmpsGroupMemberPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort4.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort4.setDescription('This entry defines the membership of port 4 to the Multicast Group.')
igmpsGroupMemberPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort5.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort5.setDescription('This entry defines the membership of port 5 to the Multicast Group.')
igmpsGroupMemberPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort6.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort6.setDescription('This entry defines the membership of port 6 to the Multicast Group.')
igmpsGroupMemberPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort7.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort7.setDescription('This entry defines the membership of port 7 to the Multicast Group.')
igmpsGroupMemberPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort8.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort8.setDescription('This entry defines the membership of port 8 to the Multicast Group.')
igmpsGroupMemberPort9 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort9.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort9.setDescription('This entry defines the membership of port 9 to the Multicast Group.')
igmpsGroupMemberPort10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort10.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort10.setDescription('This entry defines the membership of port 10 to the Multicast Group.')
igmpsGroupMemberPort11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort11.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort11.setDescription('This entry defines the membership of port 11 to the Multicast Group.')
igmpsGroupMemberPort12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort12.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort12.setDescription('This entry defines the membership of port 12 to the Multicast Group.')
igmpsGroupMemberPort13 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort13.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort13.setDescription('This entry defines the membership of port 13 to the Multicast Group.')
igmpsGroupMemberPort14 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort14.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort14.setDescription('This entry defines the membership of port 14 to the Multicast Group.')
igmpsGroupMemberPort15 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort15.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort15.setDescription('This entry defines the membership of port 15 to the Multicast Group.')
igmpsGroupMemberPort16 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort16.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort16.setDescription('This entry defines the membership of port 16 to the Multicast Group.')
igmpsGroupMemberPort17 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort17.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort17.setDescription('This entry defines the membership of port 17 to the Multicast Group.')
igmpsGroupMemberPort18 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort18.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort18.setDescription('This entry defines the membership of port 18 to the Multicast Group.')
igmpsGroupMemberPort19 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort19.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort19.setDescription('This entry defines the membership of port 19 to the Multicast Group.')
igmpsGroupMemberPort20 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort20.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort20.setDescription('This entry defines the membership of port 20 to the Multicast Group.')
igmpsGroupMemberPort21 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort21.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort21.setDescription('This entry defines the membership of port 21 to the Multicast Group.')
igmpsGroupMemberPort22 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort22.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort22.setDescription('This entry defines the membership of port 22 to the Multicast Group.')
igmpsGroupMemberPort23 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort23.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort23.setDescription('This entry defines the membership of port 23 to the Multicast Group.')
igmpsGroupMemberPort24 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 13, 40, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpsGroupMemberPort24.setStatus('current')
if mibBuilder.loadTexts: igmpsGroupMemberPort24.setDescription('This entry defines the membership of port 24 to the Multicast Group.')
rtc = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15))
rtcSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcSupport.setStatus('current')
if mibBuilder.loadTexts: rtcSupport.setDescription('This entry contains the information if software based real time clock is supported or not.')
rtcFlags = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("sntpenabled", 1), ("dstenabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcFlags.setStatus('current')
if mibBuilder.loadTexts: rtcFlags.setDescription('This Entry contains per port some bitwise rtc settings: Bit 0: if set rtc should be synchronized with configured SNTP server Bit 1: is set if DST support is enabled')
rtcLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcLocalTime.setStatus('current')
if mibBuilder.loadTexts: rtcLocalTime.setDescription('This entry contains the local date and time information. Used format conforms to RFC2068 like example below: Mon Jun 21 17:20:34 2010')
rtcManualTime = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcManualTime.setStatus('current')
if mibBuilder.loadTexts: rtcManualTime.setDescription("On readout this entry contains the local date and time information. Writing to this entry sets the the date and time information of the device manually. Used format is 'DD.MM.YYYY HH:MM:SS'")
rtcTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("unset", 1), ("manuallyset", 2), ("synchronized", 3), ("unsynchronized", 4), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcTimeStatus.setStatus('current')
if mibBuilder.loadTexts: rtcTimeStatus.setDescription('This entry contains the information about the reliability of the date and time information of the device.')
rtcTimezoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-24, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcTimezoneOffset.setStatus('current')
if mibBuilder.loadTexts: rtcTimezoneOffset.setDescription('This entry describes the time offset to UTC regarding the timezone of the device. The units of this entry are multiples of 30 minutes.')
rtcDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcDSTOffset.setStatus('current')
if mibBuilder.loadTexts: rtcDSTOffset.setDescription('This entry describes the time offset to UTC regarding the timezone of the device. This entry is measured in minutes.')
rtcDSTbegin = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcDSTbegin.setStatus('current')
if mibBuilder.loadTexts: rtcDSTbegin.setDescription('This entry contains the hexadecimal represenation of the proprietary coded time of the beginning of DST period. See corresponding feature description for detailed information.')
rtcDSTend = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcDSTend.setStatus('current')
if mibBuilder.loadTexts: rtcDSTend.setDescription('This entry contains the hexadecimal represenation of the proprietary coded time of the end of DST period. See corresponding feature description for detailed information.')
rtcDSTstatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("isdst", 1), ("isnotdst", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcDSTstatus.setStatus('current')
if mibBuilder.loadTexts: rtcDSTstatus.setDescription('If DST support is enabled this entry contains the information if DST period is active now(1) or not(2). Else a value of 255 will be read out.')
rtcSNTPsyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcSNTPsyncInterval.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPsyncInterval.setDescription('This entry describes the time interval for repeated to synchronisation of the device with a given SNTP server if this feature is enabled. This value is measured in minutes. It should not be set too small to avoid server overload in larger networks. A typical value should be 10080 which represents once a week.')
rtcSNTPsyncNow = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normalOperation", 0), ("syncNow", 1), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcSNTPsyncNow.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPsyncNow.setDescription("Set this entry to '1' to trigger a rtc sychronisation with SNTP server now. This entry is self clearing.")
rtcSNTPServerCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcSNTPServerCount.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPServerCount.setDescription('The number of supported SNTP servers on this system.')
rtcSNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20), )
if mibBuilder.loadTexts: rtcSNTPServerTable.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPServerTable.setDescription('This table contains the configuration for several SNTP servers.')
rtcSNTPServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "rtcSNTPServerId"))
if mibBuilder.loadTexts: rtcSNTPServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPServerTableEntry.setDescription('Entry in the SNTP server table.')
rtcSNTPServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcSNTPServerId.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPServerId.setDescription('This entry contains the SNTP server ID.')
rtcSNTPServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7, 255))).clone(namedValues=NamedValues(("ok", 0), ("busy", 1), ("timeout", 2), ("nomemory", 3), ("portbusy", 4), ("alarm", 5), ("unknown", 7), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtcSNTPServerStatus.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPServerStatus.setDescription('This entry describes the SNTP server status as retransmitted after sync.')
rtcSNTPServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcSNTPServerEnable.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPServerEnable.setDescription('This entry describes the SNTP server enable status.')
rtcSNTPServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 15, 20, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcSNTPServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: rtcSNTPServerIpAddress.setDescription('This entry describes the SNTP server IP address.')
consoleinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20))
consoleSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleSupport.setStatus('current')
if mibBuilder.loadTexts: consoleSupport.setDescription('This entry contains the bitwise information which console version is supported. Bit 0: Telnet supported Bit 1: SSH supported')
consoleEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleEnable.setStatus('current')
if mibBuilder.loadTexts: consoleEnable.setDescription('This entry contains the bitwise information which console version is enabled. Bit 0: Telnet enabled Bit 1: SSH enabled Changing this entry takes effect after reset.')
consoleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleTimeout.setDescription('This entry describes the timout value in multiples of a second. This is the period of inactivity after which the telnet connection shuts down automatically.')
consoleApplyMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyAndSaveImmediately", 1), ("saveManually", 2), ("applyAndSaveManually", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleApplyMode.setStatus('current')
if mibBuilder.loadTexts: consoleApplyMode.setDescription("If this entry is set to '1' changes due to 'set...' commands are immediately applied to the switch and saved in the configuration. If it is set to '2' changes are also applied immediately but the changed configuration will not be saved. If it is set to '3' changes are neither applied to the switch nor the configuration is saved. Using the 'save settings' command at the telnet console the configuration will be applied and saved. After a reset this value is always set to the default value of 2 (saveManually).")
consolePrompt = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 20, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePrompt.setStatus('current')
if mibBuilder.loadTexts: consolePrompt.setDescription('This is the string used as prompt for the telnet console.')
webinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 21))
webSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 21, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webSupport.setStatus('current')
if mibBuilder.loadTexts: webSupport.setDescription('This entry contains the bitwise information which web interface version is supported. Bit 0: HTTP supported Bit 1: HTTPS supported')
webEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webEnable.setStatus('current')
if mibBuilder.loadTexts: webEnable.setDescription('This entry contains the bitwise information which web interface version is enabled. Bit 0: HTTP enabled Bit 1: HTTPS enabled Changing this entry takes effect after reset.')
snmpinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22))
snmpSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpSupport.setStatus('current')
if mibBuilder.loadTexts: snmpSupport.setDescription('This entry contains the bitwise information which SNMP version is supported. Bit 0: SNMP v1 supported Bit 1: SNMP v2c supported Bit 2: SNMP v3 supported')
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
if mibBuilder.loadTexts: snmpEnable.setDescription('This entry contains the bitwise information which SNMP version is enabled. Bit 0: SNMP v1 enabled Bit 1: SNMP v2c enabled Bit 2: SNMP v3 enabled It is not allowed to disable an interface via itself or to support v1/v2c at the same time as v3 is enabled. So v1 or v2c can only be enabled via this entry if v3 is disabled. Further changes have to be done via another Interface.')
snmpApplyMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("applyAndSaveImmediately", 1), ("saveManually", 2), ("applyAndSaveManually", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpApplyMode.setStatus('current')
if mibBuilder.loadTexts: snmpApplyMode.setDescription("If this entry is set to '1' changes due to 'set...' commands are immediately applied to the switch and saved in the configuration. If it is set to '2' changed are also applied immedately but the changed configuration will not be saved. So changes are lost after a reset. To save the configuration an additional self clearing 'snmpApply' has to be set to '1' for an apply without save or set to '2' for an apply including save. After a reset this value is always set to the default value of 1 (applyAndSaveImmediately).")
snmpApply = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normalOperation", 0), ("applyNow", 1), ("applyAndSaveNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpApply.setStatus('current')
if mibBuilder.loadTexts: snmpApply.setDescription("This entry only has an effect if 'snmpApplyMode' is not set to '1', which is the normal operation. In this case the changed configuration will be applied to the switch (if set to '1') or applied to switch and saved to flash (if set to '2'). This entry is self-clearing.")
snmpTrapTest = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 255))).clone(namedValues=NamedValues(("inactive", 0), ("genColdstart", 1), ("genWarmstart", 2), ("genLinkdown", 3), ("genLinkup", 4), ("genAuthfailure", 5), ("genEgpneighborloss", 6), ("entLinkchange", 7), ("entFactoryreset", 8), ("entTemplevelchange", 9), ("entErrorcounter", 10), ("entOverundervoltage", 11), ("entTempshutdown", 12), ("entPoelimitexceeded", 13), ("entSupplystatuschange", 14), ("entSfpplugchange", 15), ("entLoginfailure", 16), ("entRingbroken", 17), ("entRingalarm", 18), ("entAuthpwfail", 19), ("entPrivpwfail", 20), ("entAccesspermission", 21), ("entSeclevelfail", 22), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapTest.setStatus('current')
if mibBuilder.loadTexts: snmpTrapTest.setDescription('This entry triggers a trap event without the regarding system event took place. No change to the device will be done. This entry can be used to test the trap destination configuration. This entry is self clearing.')
snmpTrapDestCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDestCount.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestCount.setDescription('The number of supported trap destinations on this system.')
snmpCommunityRead = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityRead.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityRead.setDescription('This is the string used as community name in SNMP Get and GetNext requests.')
snmpCommunityWrite = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityWrite.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityWrite.setDescription('This is the string used as community name in SNMP Set operations.')
snmpTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEnable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEnable.setDescription('This entry contains the information if snmp traps are globally enabled or not.')
snmpTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10), )
if mibBuilder.loadTexts: snmpTrapDestTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestTable.setDescription('This table contains information regarding the snmp trap configuration for several destinations.')
snmpTrapDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "snmpTrapDestId"))
if mibBuilder.loadTexts: snmpTrapDestTableEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestTableEntry.setDescription('Entry in the snmp table.')
snmpTrapDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDestId.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestId.setDescription('This entry describes the snmp trap destination id.')
snmpTrapDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestAlias.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestAlias.setDescription('This entry contains an individual name for the trap destination.')
snmpTrapDestEn = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("disabled", 0), ("v1", 1), ("v2C", 2), ("v3", 3), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestEn.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestEn.setDescription('This entry describes the snmp trap destination enable status and contains the used snmp version.')
snmpTrapDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestIP.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestIP.setDescription("This is the trap receiver's IP address.")
snmpTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestCommunity.setDescription('This is the string used as community name for traps.')
snmpTrapGenColdstart = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGenColdstart.setStatus('current')
if mibBuilder.loadTexts: snmpTrapGenColdstart.setDescription('This entry enables or disables the transmission of generic coldstart traps to the selected destination. (generic trapnumber 0)')
snmpTrapGenWarmstart = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapGenWarmstart.setStatus('current')
if mibBuilder.loadTexts: snmpTrapGenWarmstart.setDescription('This entry enables or disables the transmission of generic warmstart traps to the selected destination. (generic trapnumber 1)')
snmpTrapGenLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGenLinkDown.setStatus('current')
if mibBuilder.loadTexts: snmpTrapGenLinkDown.setDescription('This entry enables or disables the transmission of generic link down traps to the selected destination. (generic trapnumber 2)')
snmpTrapGenLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGenLinkUp.setStatus('current')
if mibBuilder.loadTexts: snmpTrapGenLinkUp.setDescription('This entry enables or disables the transmission of generic link up traps to the selected destination. (generic trapnumber 3)')
snmpTrapGenAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGenAuthFailure.setStatus('current')
if mibBuilder.loadTexts: snmpTrapGenAuthFailure.setDescription('This entry enables or disables the transmission of generic authentication failure traps to the selected destination. (generic trapnumber 4)')
snmpTrapGenEgpNeighborLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapGenEgpNeighborLoss.setStatus('current')
if mibBuilder.loadTexts: snmpTrapGenEgpNeighborLoss.setDescription('This entry enables or disables the transmission of generic Exterior Gateway Protocol Neighbor Loss traps to the selected destination. (generic trapnumber 5)')
snmpTrapEntLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntLinkChange.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntLinkChange.setDescription('This entry enables or disables the transmission of enterprise link change traps to the selected destination. (generic trap# 6, specific trap# 1)')
snmpTrapEntFactoryReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntFactoryReset.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntFactoryReset.setDescription('This entry enables or disables the transmission of enterprise factory reset traps to the selected destination. (generic trap# 6, specific trap# 2)')
snmpTrapEntTemperatureLevelChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntTemperatureLevelChange.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntTemperatureLevelChange.setDescription('This entry enables or disables the transmission of enterprise temperature level change traps to the selected destination. (generic trap# 6, specific trap# 3)')
snmpTrapEntErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntErrorCounter.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntErrorCounter.setDescription('This entry enables or disables the transmission of enterprise error counter traps to the selected destination (generic trap# 6, specific trap# 4)')
snmpTrapEntUnderOverVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntUnderOverVoltage.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntUnderOverVoltage.setDescription('This entry enables or disables the transmission of enterprise undervoltage overvoltage traps to the selected destination. (generic trap# 6, specific trap# 5)')
snmpTrapEntTempShutDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntTempShutDown.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntTempShutDown.setDescription('This entry enables or disables the transmission of enterprise temperature shut down event traps to the selected destination. (generic trap# 6, specific trap# 6)')
snmpTrapEntPoeLimitExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntPoeLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntPoeLimitExceeded.setDescription('This entry enables or disables the transmission of enterprise poe limit exceeded traps to the selected destination. (generic trap# 6, specific trap# 7)')
snmpTrapEntSupplyStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntSupplyStatusChange.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntSupplyStatusChange.setDescription('This entry enables or disables the transmission of enterprise supply status change traps to the selected destination. (generic trap# 6, specific trap# 8)')
snmpTrapEntSfpPlugChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntSfpPlugChange.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntSfpPlugChange.setDescription('This entry enables or disables the transmission of enterprise SFP plug change traps to the selected destination. (generic trap# 6, specific trap# 9)')
snmpTrapEntLoginFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntLoginFailure.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntLoginFailure.setDescription('This entry enables or disables the transmission of enterprise login failure traps to the selected destination. (generic trap# 6, specific trap# 10)')
snmpTrapEntRingBroken = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntRingBroken.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntRingBroken.setDescription('This entry enables or disables the transmission of enterprise Ring broken traps to the selected destination. (generic trap# 6, specific trap# 11)')
snmpTrapEntRingAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntRingAlarm.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntRingAlarm.setDescription('This entry enables or disables the transmission of enterprise Ring Alarm traps to the selected destination. (generic trap# 6, specific trap# 12)')
snmpTrapEntAuthPwFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntAuthPwFail.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntAuthPwFail.setDescription('This entry enables or disables the transmission of enterprise SNMPv3 Authentication Password Fail traps to the selected destination. (generic trap# 6, specific trap# 13)')
snmpTrapEntPrivPwFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntPrivPwFail.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntPrivPwFail.setDescription('This entry enables or disables the transmission of enterprise SNMPv3 Privacy Password Fail traps to the selected destination. (generic trap# 6, specific trap# 14)')
snmpTrapEntAccessPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntAccessPermission.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntAccessPermission.setDescription('This entry enables or disables the transmission of enterprise SNMPv3 Access Permission traps to the selected destination. (generic trap# 6, specific trap# 15)')
snmpTrapEntSeclevelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 22, 10, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntSeclevelFail.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntSeclevelFail.setDescription('This entry enables or disables the transmission of enterprise SNMPv3 Security Level Fail traps to the selected destination. (generic trap# 6, specific trap# 16)')
udpinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 23))
udpSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpSupport.setStatus('current')
if mibBuilder.loadTexts: udpSupport.setDescription('This entry contains the information if the proprietary udp protocol interface is supported or not.')
udpEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpEnable.setStatus('current')
if mibBuilder.loadTexts: udpEnable.setDescription('This entry enables or disables the proprietary udp protocol Support. Changing this entry takes effect after a reset.')
syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24))
syslogSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSupport.setStatus('current')
if mibBuilder.loadTexts: syslogSupport.setDescription('This entry contains the information if syslog message servers are supported or not.')
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
if mibBuilder.loadTexts: syslogEnable.setDescription('This entry contains the information if syslog message server support is enabled or not.')
syslogMessageTest = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("inactive", 0), ("sendmessage", 1), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogMessageTest.setStatus('current')
if mibBuilder.loadTexts: syslogMessageTest.setDescription('This entry triggers a syslog message using the current destination settings. This entry can be used to test the destination configuration. This entry is self clearing.')
syslogDestCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogDestCount.setStatus('current')
if mibBuilder.loadTexts: syslogDestCount.setDescription('The number of supported syslog destinations on this system.')
syslogDestTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10), )
if mibBuilder.loadTexts: syslogDestTable.setStatus('current')
if mibBuilder.loadTexts: syslogDestTable.setDescription('This table contains the configuration for several syslog destinations.')
syslogDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "syslogDestId"))
if mibBuilder.loadTexts: syslogDestTableEntry.setStatus('current')
if mibBuilder.loadTexts: syslogDestTableEntry.setDescription('Entry in the syslog destination table.')
syslogDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogDestId.setStatus('current')
if mibBuilder.loadTexts: syslogDestId.setDescription('This entry contains the syslog destination id.')
syslogDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestAlias.setStatus('current')
if mibBuilder.loadTexts: syslogDestAlias.setDescription('This entry contains an individual name for the syslog destination.')
syslogDestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestEnable.setStatus('current')
if mibBuilder.loadTexts: syslogDestEnable.setDescription('This entry describes the syslog destination enable status.')
syslogDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: syslogDestIpAddress.setDescription('This entry describes the syslog destination IP address.')
syslogDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestPort.setStatus('current')
if mibBuilder.loadTexts: syslogDestPort.setDescription("This is the syslog destination's TCP port.")
syslogDestFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("kernelMessage", 0), ("userLevelMessage", 1), ("mailSystem", 2), ("systemDaemon", 3), ("securityMessage1", 4), ("syslogdMessage", 5), ("linePrinterSubsystem", 6), ("networkNewsSubsystem", 7), ("uucpSubsystem", 8), ("clockDeamon1", 9), ("securityMessage2", 10), ("ftpDeamon", 11), ("ntpSubsystem", 12), ("logAudit", 13), ("logAlert", 14), ("clockDeamon2", 15), ("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestFacility.setStatus('current')
if mibBuilder.loadTexts: syslogDestFacility.setDescription('This entry describes the syslog destination used facility value.')
syslogDestEventFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 24, 10, 1, 7), Bits().clone(namedValues=NamedValues(("reset", 0), ("linkchange", 1), ("configchange", 2), ("login", 3), ("firmwareupdate", 4), ("powerredundancy", 5), ("portauth", 6), ("temperature", 7), ("ring", 8), ("sfp", 9), ("poe", 10), ("rtc", 11), ("vct", 12), ("debug", 29), ("statusreport", 30), ("test", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestEventFilter.setStatus('current')
if mibBuilder.loadTexts: syslogDestEventFilter.setDescription('Flags to filter syslog events: messages are only sent if regarding bits are set.')
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25))
radiusSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSupport.setStatus('current')
if mibBuilder.loadTexts: radiusSupport.setDescription('This entry contains the information if communication with radius servers is supported or not.')
radiusAccessEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccessEnable.setStatus('current')
if mibBuilder.loadTexts: radiusAccessEnable.setDescription("This entry contains the information if the radius servers' access service is enabled or not.")
radiusAccountEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountEnable.setStatus('current')
if mibBuilder.loadTexts: radiusAccountEnable.setDescription("This entry contains the information if the radius servers' account service is enabled or not.")
radiusServerCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerCount.setStatus('current')
if mibBuilder.loadTexts: radiusServerCount.setDescription('The number of supported radius servers on this system.')
radiusMacAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMacAuthPassword.setStatus('current')
if mibBuilder.loadTexts: radiusMacAuthPassword.setDescription('Password used for MAC Authentication via radius servers.')
radiusUseMacAsPassword = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusUseMacAsPassword.setStatus('current')
if mibBuilder.loadTexts: radiusUseMacAsPassword.setDescription("This entry contains the information if the user's MAC address is used as password instead of the static radius password or not.")
radiusMacSeparator = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMacSeparator.setStatus('current')
if mibBuilder.loadTexts: radiusMacSeparator.setDescription('Character to separate the bytes of the MAC Address for Radius Server communication.')
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusTimeout.setDescription('This entry contains the time in seconds after which the radius server should have answered arequest.')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('current')
if mibBuilder.loadTexts: radiusServerTable.setDescription('This table contains the configuration for several radius servers.')
radiusServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "radiusServerId"))
if mibBuilder.loadTexts: radiusServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: radiusServerTableEntry.setDescription('Entry in the radius server table.')
radiusServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerId.setStatus('current')
if mibBuilder.loadTexts: radiusServerId.setDescription('This entry contains the radius server id.')
radiusServerAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAlias.setStatus('current')
if mibBuilder.loadTexts: radiusServerAlias.setDescription('This entry contains an individual name for the radius server.')
radiusServerEnableAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerEnableAccess.setStatus('current')
if mibBuilder.loadTexts: radiusServerEnableAccess.setDescription('This entry describes the radius server enable status for the MAX-ACCESS service which means both, authentication and authorization.')
radiusServerEnableAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerEnableAccount.setStatus('current')
if mibBuilder.loadTexts: radiusServerEnableAccount.setDescription('This entry describes the radius server enable status for the account service.')
radiusServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: radiusServerIpAddress.setDescription('This entry describes the radius server IP address.')
radiusServerAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAccessPort.setStatus('current')
if mibBuilder.loadTexts: radiusServerAccessPort.setDescription("This is the radius server's UDP port for the access service. The default value is 1812.")
radiusServerAccountPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAccountPort.setStatus('current')
if mibBuilder.loadTexts: radiusServerAccountPort.setDescription("This is the radius server's UDP port for the account service. The default value is 1813.")
radiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 25, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusServerSecret.setDescription("This is the radius server's secret string.")
supply = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30))
supplyCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyCount.setStatus('current')
if mibBuilder.loadTexts: supplyCount.setDescription('The number of supported power supplies.')
supplyTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10), )
if mibBuilder.loadTexts: supplyTable.setStatus('current')
if mibBuilder.loadTexts: supplyTable.setDescription('This table contains power supply information of the device.')
supplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "supplyId"))
if mibBuilder.loadTexts: supplyTableEntry.setStatus('current')
if mibBuilder.loadTexts: supplyTableEntry.setDescription('Entry in the supply table.')
supplyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyId.setStatus('current')
if mibBuilder.loadTexts: supplyId.setDescription('This entry describes the power supply id.')
supplyUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("used", 1), ("unused", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: supplyUsed.setStatus('current')
if mibBuilder.loadTexts: supplyUsed.setDescription("If several supplies are possible but not required, this entry decides if an invalid detection leads to an error. An error event can be suppressed if a supply is marked as 'unused'. Hint: If an 'unused' supply is detected as 'valid', it is also automatically marked as 'used'.")
supplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 30, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: supplyStatus.setStatus('current')
if mibBuilder.loadTexts: supplyStatus.setDescription("This entry contains the information if the power supply is valid at the moment. An invalid supply will lead to an error event unless it is marked as 'unused'. Hint: If an 'unused' supply is detected as 'valid', it is also automatically marked as 'used'.")
poepse = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31))
poepseSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepseSupport.setStatus('current')
if mibBuilder.loadTexts: poepseSupport.setDescription('This entry contains the information if this is a POE power source equipment (PSE) or not.')
poepseEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepseEnable.setStatus('current')
if mibBuilder.loadTexts: poepseEnable.setDescription('This entry contains the information if the POE/PSE feature is enabled or not.')
poepseTotalInputPower = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepseTotalInputPower.setStatus('current')
if mibBuilder.loadTexts: poepseTotalInputPower.setDescription('This entry contains the input power (in W) due to the used power supply.')
poepseMaxInputPower = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepseMaxInputPower.setStatus('current')
if mibBuilder.loadTexts: poepseMaxInputPower.setDescription('This entry contains maximum available input power (in W) due to hardware restrictions in the switch device.')
poepseDeviceSupplyPower = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepseDeviceSupplyPower.setStatus('current')
if mibBuilder.loadTexts: poepseDeviceSupplyPower.setDescription('This entry contains the power (in W) the switch device spends itself. This value is needed to calculate the available power for external devices.')
pseAvailablePower = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pseAvailablePower.setStatus('current')
if mibBuilder.loadTexts: pseAvailablePower.setDescription('This entry contains the available poe power (in W) for attached external devices.')
poepseExtendedVoltage = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepseExtendedVoltage.setStatus('current')
if mibBuilder.loadTexts: poepseExtendedVoltage.setDescription('This entry contains the information if the POE/PSE Extended Voltage is enabled or not. If enabled PoE will be disabled if applied PoE output voltage exceeds an enhanced range of 40..59V instead of 43..55V (default).')
poepsePortTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10), )
if mibBuilder.loadTexts: poepsePortTable.setStatus('current')
if mibBuilder.loadTexts: poepsePortTable.setDescription('This table contains the pse port configuration of the device.')
poepsePortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1), ).setIndexNames((0, "MS-SWITCH30-MIB", "poepsePortId"))
if mibBuilder.loadTexts: poepsePortTableEntry.setStatus('current')
if mibBuilder.loadTexts: poepsePortTableEntry.setDescription('Entry in the supply table.')
poepsePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortId.setStatus('current')
if mibBuilder.loadTexts: poepsePortId.setDescription("This entry describes the device's pse port id.")
poepsePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))).clone(namedValues=NamedValues(("poe8023af", 1), ("poeForced", 2), ("poeDisabled", 3), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepsePortMode.setStatus('current')
if mibBuilder.loadTexts: poepsePortMode.setDescription("This entry describes the device's pse port mode.")
poepsePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 254, 255))).clone(namedValues=NamedValues(("off", 0), ("discovering", 1), ("powered", 2), ("fault", 3), ("disabled", 4), ("overcurrent", 5), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortStatus.setStatus('current')
if mibBuilder.loadTexts: poepsePortStatus.setDescription("This entry describes the device's pse port mode.")
poepsePortMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepsePortMaxPower.setStatus('current')
if mibBuilder.loadTexts: poepsePortMaxPower.setDescription('This entry describes the permitted power for this port in mW.')
poepsePortMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortMeasuredPower.setStatus('current')
if mibBuilder.loadTexts: poepsePortMeasuredPower.setDescription('This entry describes the measured power for this port in mW.')
poepsePortMaxClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poepsePortMaxClass.setStatus('current')
if mibBuilder.loadTexts: poepsePortMaxClass.setDescription('This entry describes the maximnum allowed poe class for this port.')
poepsePortDetectedClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("undefined", 254), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortDetectedClass.setStatus('current')
if mibBuilder.loadTexts: poepsePortDetectedClass.setDescription('This entry describes the detected poe class for this port.')
poepsePortMeasuredVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 3, 31, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepsePortMeasuredVoltage.setStatus('current')
if mibBuilder.loadTexts: poepsePortMeasuredVoltage.setDescription('This entry describes the measured Voltage for this port in multiples of 0.1V.')
poepd = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 32))
poepdSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poepdSupport.setStatus('current')
if mibBuilder.loadTexts: poepdSupport.setDescription('This entry contains the information if this is a POE powered device (PD) or not.')
hardwarecode = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 33))
hardwarecodeSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarecodeSupport.setStatus('current')
if mibBuilder.loadTexts: hardwarecodeSupport.setDescription('This entry contains the information if a hardware coding (hard wired or selectable) is supported or not.')
hardwarecodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 33, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarecodeNumber.setStatus('current')
if mibBuilder.loadTexts: hardwarecodeNumber.setDescription('This entry describes the value of the detected hardware code with a range of [0..15]. If this feature isa not supported a 255 will be given back.')
spanningtree = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 34))
stpSupport = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpSupport.setStatus('current')
if mibBuilder.loadTexts: stpSupport.setDescription('This entry contains the information if the spanning tree feature is supported or not.')
stpEnable = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 3, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpEnable.setStatus('current')
if mibBuilder.loadTexts: stpEnable.setDescription('This entry contains the information if the spanning feature is enabled or not. If supported the settings and status information are accessible via standard BRIDGE-MIB')
msSwitchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100))
linkChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 1)).setObjects(("MS-SWITCH30-MIB", "portStatusId"), ("MS-SWITCH30-MIB", "portStatusLink"))
if mibBuilder.loadTexts: linkChangeNotification.setStatus('current')
if mibBuilder.loadTexts: linkChangeNotification.setDescription("Trap indicating that a port's link status has changed. The port is identified by the portId variable.")
factoryResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 2))
if mibBuilder.loadTexts: factoryResetNotification.setStatus('current')
if mibBuilder.loadTexts: factoryResetNotification.setDescription('Trap indicating a factory reset initiated by the user.')
temperatureLevelChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 3)).setObjects(("MS-SWITCH30-MIB", "deviceTemperatureLevel"))
if mibBuilder.loadTexts: temperatureLevelChangeNotification.setStatus('current')
if mibBuilder.loadTexts: temperatureLevelChangeNotification.setDescription('Trap indicating the device temperature level has changed.')
errorcountNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 4)).setObjects(("MS-SWITCH30-MIB", "portStatusId"))
if mibBuilder.loadTexts: errorcountNotification.setStatus('current')
if mibBuilder.loadTexts: errorcountNotification.setDescription('Trap indicating errors received at a port.')
underOverVoltageNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 5)).setObjects(("MS-SWITCH30-MIB", "portStatusId"))
if mibBuilder.loadTexts: underOverVoltageNotification.setStatus('current')
if mibBuilder.loadTexts: underOverVoltageNotification.setDescription('Trap indicating the PoLAN port voltage is out of operating range and port power has been turned off.')
temperatureShutdownNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 6))
if mibBuilder.loadTexts: temperatureShutdownNotification.setStatus('current')
if mibBuilder.loadTexts: temperatureShutdownNotification.setDescription('Trap indicating that the device temperature is above maximum operating temperature and the device will be shut down.')
portPoELimitExceededNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 7)).setObjects(("MS-SWITCH30-MIB", "portStatusId"))
if mibBuilder.loadTexts: portPoELimitExceededNotification.setStatus('current')
if mibBuilder.loadTexts: portPoELimitExceededNotification.setDescription('Trap indicating that port power has been turned off by power management. The power limit for one port or for the whole device is exceeded.')
powerSupplyStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 8)).setObjects(("MS-SWITCH30-MIB", "supplyId"))
if mibBuilder.loadTexts: powerSupplyStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatusChangeNotification.setDescription('Trap indicating that main or redundant power input status has changed.')
sfpPlugChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 9)).setObjects(("MS-SWITCH30-MIB", "sfpPortnumber"), ("MS-SWITCH30-MIB", "sfpDetect"))
if mibBuilder.loadTexts: sfpPlugChangeNotification.setStatus('current')
if mibBuilder.loadTexts: sfpPlugChangeNotification.setDescription('Trap indicating that a sfp module has been plugged in or plugged out.')
loginFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 10))
if mibBuilder.loadTexts: loginFailureNotification.setStatus('current')
if mibBuilder.loadTexts: loginFailureNotification.setDescription('Trap indicating a login attempt with an invalid password.')
ringBrokenNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 11)).setObjects(("MS-SWITCH30-MIB", "ringNumber"), ("MS-SWITCH30-MIB", "portStatusId"), ("MS-SWITCH30-MIB", "portStatusLink"))
if mibBuilder.loadTexts: ringBrokenNotification.setStatus('current')
if mibBuilder.loadTexts: ringBrokenNotification.setDescription('Trap indicating a link down detect at activated ring port.')
ringAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 12)).setObjects(("MS-SWITCH30-MIB", "ringNumber"), ("MS-SWITCH30-MIB", "ringStatus"), ("MS-SWITCH30-MIB", "ringAlarmDuration"))
if mibBuilder.loadTexts: ringAlarmNotification.setStatus('current')
if mibBuilder.loadTexts: ringAlarmNotification.setDescription('Trap indicating a Ring alert reception.')
snmpv3AuthenticationPwFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 13))
if mibBuilder.loadTexts: snmpv3AuthenticationPwFailNotification.setStatus('current')
if mibBuilder.loadTexts: snmpv3AuthenticationPwFailNotification.setDescription('Notification indicating an Authentication Password failure.')
snmpv3PrivacyPwFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 14))
if mibBuilder.loadTexts: snmpv3PrivacyPwFailNotification.setStatus('current')
if mibBuilder.loadTexts: snmpv3PrivacyPwFailNotification.setDescription('Notification indicating a Privacy Password failure.')
snmpv3AccessPermissionNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 15))
if mibBuilder.loadTexts: snmpv3AccessPermissionNotification.setStatus('current')
if mibBuilder.loadTexts: snmpv3AccessPermissionNotification.setDescription('Notification indicating a write attempt without matching WriteView defined.')
snmpv3SeclevelFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 3181, 10, 3, 100, 16))
if mibBuilder.loadTexts: snmpv3SeclevelFailNotification.setStatus('current')
if mibBuilder.loadTexts: snmpv3SeclevelFailNotification.setDescription('Notification indicating a user Security Level mismatch')
mibBuilder.exportSymbols("MS-SWITCH30-MIB", igmpsGroupMemberPort16=igmpsGroupMemberPort16, pacUnauthMode=pacUnauthMode, pacSupplicantTimeout=pacSupplicantTimeout, deviceUpTime=deviceUpTime, radiusSupport=radiusSupport, vlanPortTable=vlanPortTable, igmpsGroupMac=igmpsGroupMac, snmpApply=snmpApply, portStatusTableEntry=portStatusTableEntry, pacMaxNumberOfAllowedHostsPerPort=pacMaxNumberOfAllowedHostsPerPort, pacMacLockLearn1=pacMacLockLearn1, pacConfPortId=pacConfPortId, syslogDestId=syslogDestId, snmpv3SeclevelFailNotification=snmpv3SeclevelFailNotification, vlanFilterTableEntry=vlanFilterTableEntry, agentConfigReset=agentConfigReset, pacMacLockTableEntry=pacMacLockTableEntry, vlanFilterAlias=vlanFilterAlias, device=device, igmpsGroupMemberPort23=igmpsGroupMemberPort23, vlanMemberPort2=vlanMemberPort2, pacConfigTable=pacConfigTable, rtc=rtc, ringTable=ringTable, pacConfigTableEntry=pacConfigTableEntry, sfpTxPower=sfpTxPower, poepsePortStatus=poepsePortStatus, portConfigSpeed=portConfigSpeed, prioQueueCount=prioQueueCount, ringCount=ringCount, igmpsMaximumResposeTime=igmpsMaximumResposeTime, ringPortA=ringPortA, syslogDestCount=syslogDestCount, radiusUseMacAsPassword=radiusUseMacAsPassword, portaccessctrl=portaccessctrl, vlanMemberPort20=vlanMemberPort20, igmpsPortTable=igmpsPortTable, hardwarecodeSupport=hardwarecodeSupport, sfpNominalBitrate=sfpNominalBitrate, pacMacLockLearn2=pacMacLockLearn2, udpinterface=udpinterface, mib3=mib3, radiusServerAccessPort=radiusServerAccessPort, prioPortId=prioPortId, pacStatPortId=pacStatPortId, udpEnable=udpEnable, radiusMacAuthPassword=radiusMacAuthPassword, powerSupplyStatusChangeNotification=powerSupplyStatusChangeNotification, ringAlarmDuration=ringAlarmDuration, poepsePortTable=poepsePortTable, sfpVendorSerialnumber=sfpVendorSerialnumber, snmpTrapEntFactoryReset=snmpTrapEntFactoryReset, pacSupport=pacSupport, igmpsPortSnooping=igmpsPortSnooping, portStatusRxNetload=portStatusRxNetload, snmpv3AuthenticationPwFailNotification=snmpv3AuthenticationPwFailNotification, rtcDSTbegin=rtcDSTbegin, pacConfMaxMacCount=pacConfMaxMacCount, vlanMemberPort6=vlanMemberPort6, pacStatUserStatus3=pacStatUserStatus3, vlanMemberPort3=vlanMemberPort3, radiusTimeout=radiusTimeout, agentIpAddress=agentIpAddress, pacStatUserMac4=pacStatUserMac4, snmpEnable=snmpEnable, vlanMemberPort5=vlanMemberPort5, poepsePortId=poepsePortId, sfpCount=sfpCount, poepsePortDetectedClass=poepsePortDetectedClass, relaisId=relaisId, igmpsGroupMemberPort22=igmpsGroupMemberPort22, vlanFilterVID=vlanFilterVID, prioDiffservTable=prioDiffservTable, vlanMemberPort24=vlanMemberPort24, igmpsPortStaticRouter=igmpsPortStaticRouter, vlanMemberPort18=vlanMemberPort18, portPoELimitExceededNotification=portPoELimitExceededNotification, igmpsRxMessageLeave=igmpsRxMessageLeave, sfpAlarms=sfpAlarms, syslogEnable=syslogEnable, pacStatUserMac2=pacStatUserMac2, radius=radius, consoleinterface=consoleinterface, syslogMessageTest=syslogMessageTest, igmpsRouterDetection=igmpsRouterDetection, igmpsGroupMemberPort11=igmpsGroupMemberPort11, pacStatUserStatus4=pacStatUserStatus4, deviceSerNo=deviceSerNo, deviceFddActiveTime=deviceFddActiveTime, snmpTrapEntLoginFailure=snmpTrapEntLoginFailure, agentStoreConfigToStorageMediaCard=agentStoreConfigToStorageMediaCard, pacFallbackRejectsEnable=pacFallbackRejectsEnable, radiusServerSecret=radiusServerSecret, igmpsGroupMemberPort10=igmpsGroupMemberPort10, vlanPortFlags=vlanPortFlags, sfpTxBias=sfpTxBias, pacStatUserName4=pacStatUserName4, igmpsGroupLeaveFlag=igmpsGroupLeaveFlag, snmpTrapGenWarmstart=snmpTrapGenWarmstart, deviceTemperature=deviceTemperature, deviceLocation=deviceLocation, portConfigFarEndFault=portConfigFarEndFault, rtcTimeStatus=rtcTimeStatus, igmpsMaxGroupLimit=igmpsMaxGroupLimit, radiusMacSeparator=radiusMacSeparator, pacStatUserStatus1=pacStatUserStatus1, deviceArtNo=deviceArtNo, prioIeeeTagId=prioIeeeTagId, vlanMemberPort23=vlanMemberPort23, poepseEnable=poepseEnable, sfpConnector=sfpConnector, rtcSupport=rtcSupport, supply=supply, snmpTrapEntSupplyStatusChange=snmpTrapEntSupplyStatusChange, couplingredPort=couplingredPort, stpSupport=stpSupport, portStatusType=portStatusType, radiusAccessEnable=radiusAccessEnable, radiusServerAlias=radiusServerAlias, vlanUnauthVID=vlanUnauthVID, poepsePortMeasuredVoltage=poepsePortMeasuredVoltage, sfpDiagnostic=sfpDiagnostic, radiusServerId=radiusServerId, stpEnable=stpEnable, vlanPortId=vlanPortId, igmpsGroupMemberPort14=igmpsGroupMemberPort14, snmpTrapEntAuthPwFail=snmpTrapEntAuthPwFail, pacStatUserIp1=pacStatUserIp1, rtcManualTime=rtcManualTime, sfp=sfp, vlanDefaultPriority=vlanDefaultPriority, prioIeeeTagQueue=prioIeeeTagQueue, vlanMemberPort15=vlanMemberPort15, ringAlarmNotification=ringAlarmNotification, vlanMemberPort13=vlanMemberPort13, igmpsPortId=igmpsPortId, couplingredValidationFlag=couplingredValidationFlag, ringSupport=ringSupport, deviceInventory=deviceInventory, igmpsGroupMemberPort2=igmpsGroupMemberPort2, pacStatUserName3=pacStatUserName3, snmpTrapEntErrorCounter=snmpTrapEntErrorCounter, igmpsEnable=igmpsEnable, vlanMemberPort16=vlanMemberPort16, snmpTrapDestId=snmpTrapDestId, prioritization=prioritization, igmpsReportAggregation=igmpsReportAggregation, portStatusLink=portStatusLink, sfpPlugChangeNotification=sfpPlugChangeNotification, monitorDestination=monitorDestination, vlanPortTableEntry=vlanPortTableEntry, igmpsFastLeave=igmpsFastLeave, prioIeeeTagTableEntry=prioIeeeTagTableEntry, igmpsGroupMemberPort24=igmpsGroupMemberPort24, snmpTrapGenColdstart=snmpTrapGenColdstart, sfpTable=sfpTable, pacLockedMac1=pacLockedMac1, udpSupport=udpSupport, syslogDestTableEntry=syslogDestTableEntry, pacLockedMac4=pacLockedMac4, poepsePortMeasuredPower=poepsePortMeasuredPower, portConfigFlowControl=portConfigFlowControl, snmpTrapGenLinkDown=snmpTrapGenLinkDown, poepsePortMaxPower=poepsePortMaxPower, snmpTrapGenLinkUp=snmpTrapGenLinkUp, snmpTrapDestEn=snmpTrapDestEn, snmpTrapDestAlias=snmpTrapDestAlias, pacMacLockEnable4=pacMacLockEnable4, radiusServerEnableAccess=radiusServerEnableAccess, sfpVendorPartnumber=sfpVendorPartnumber, rtcSNTPServerStatus=rtcSNTPServerStatus, PYSNMP_MODULE_ID=mib3, portStatusTable=portStatusTable, pacStatPortStatus=pacStatPortStatus, radiusServerTableEntry=radiusServerTableEntry, pacMacLockEnable3=pacMacLockEnable3, radiusServerTable=radiusServerTable, relaisTableEntry=relaisTableEntry, prioPortTableEntry=prioPortTableEntry, relais=relais, rtcSNTPServerEnable=rtcSNTPServerEnable, igmpsRxMessageAdvertisement=igmpsRxMessageAdvertisement, agentFirmware=agentFirmware, pacStatusTable=pacStatusTable, snmpTrapEntTemperatureLevelChange=snmpTrapEntTemperatureLevelChange, vlanMemberPort21=vlanMemberPort21, vlanMemberPort12=vlanMemberPort12, snmpTrapEnable=snmpTrapEnable, syslog=syslog, loginFailureNotification=loginFailureNotification, monitorMode=monitorMode, ringBrokenNotification=ringBrokenNotification, couplingredSupport=couplingredSupport, igmpsNeighborDeadInterval=igmpsNeighborDeadInterval, agentSubnetMask=agentSubnetMask, deviceDescription=deviceDescription, igmpsGroupMemberPort20=igmpsGroupMemberPort20, pacReauthEnable=pacReauthEnable, msSwitchNotifications=msSwitchNotifications, pacFallbackRequestEnable=pacFallbackRequestEnable, consoleApplyMode=consoleApplyMode, vlanRstpVID=vlanRstpVID, vlanFilterId=vlanFilterId, hardwarecodeNumber=hardwarecodeNumber, monitorSource=monitorSource, monitor=monitor, consoleTimeout=consoleTimeout, pacStatUserIp2=pacStatUserIp2, spanningtree=spanningtree, managedSwitches=managedSwitches, vlanForceDefaultVID=vlanForceDefaultVID, pacStatUserIp4=pacStatUserIp4, rtcFlags=rtcFlags, pacConfMode=pacConfMode, vlanMemberPort9=vlanMemberPort9, supplyCount=supplyCount, underOverVoltageNotification=underOverVoltageNotification, igmpsGroupMemberPort13=igmpsGroupMemberPort13, pacMacLockPortId=pacMacLockPortId, portConfigPinout=portConfigPinout, linkChangeNotification=linkChangeNotification, igmpsRouterAgingTime=igmpsRouterAgingTime, igmpsGroupMemberPort17=igmpsGroupMemberPort17, igmpsRxMessageReport=igmpsRxMessageReport, portConfigEnable=portConfigEnable, prioDiffservId=prioDiffservId, radiusServerEnableAccount=radiusServerEnableAccount, igmpsGroupMemberPort18=igmpsGroupMemberPort18, poepseTotalInputPower=poepseTotalInputPower, sfpDetect=sfpDetect, pacEnable=pacEnable, vlanDefaultVID=vlanDefaultVID, agentMacAddress=agentMacAddress, igmpsRxMessageSpecificQuery=igmpsRxMessageSpecificQuery, radiusServerIpAddress=radiusServerIpAddress, couplingredStatus=couplingredStatus, ringNumber=ringNumber, relaisStatus=relaisStatus, portConfigTableEntry=portConfigTableEntry, vlanPortMode=vlanPortMode, igmpsGroupTimestamp=igmpsGroupTimestamp, vlanFilterEnhId=vlanFilterEnhId, portConfigAutonego=portConfigAutonego, ringMode=ringMode, supplyStatus=supplyStatus, agentStorageMediaCardStatus=agentStorageMediaCardStatus, portStatusDuplex=portStatusDuplex, rtcSNTPServerTableEntry=rtcSNTPServerTableEntry, rtcDSTend=rtcDSTend, supplyUsed=supplyUsed, sfpTableEntry=sfpTableEntry, supplyTableEntry=supplyTableEntry, pacStatUserIp3=pacStatUserIp3, vlanEnable=vlanEnable)
mibBuilder.exportSymbols("MS-SWITCH30-MIB", syslogDestFacility=syslogDestFacility, igmpsGroupTable=igmpsGroupTable, poepseDeviceSupplyPower=poepseDeviceSupplyPower, snmpTrapDestCount=snmpTrapDestCount, prioIeeeTagTable=prioIeeeTagTable, snmpTrapGenAuthFailure=snmpTrapGenAuthFailure, couplingredMode=couplingredMode, relaisCount=relaisCount, snmpTrapGenEgpNeighborLoss=snmpTrapGenEgpNeighborLoss, sfpVendor=sfpVendor, microsens=microsens, factoryResetNotification=factoryResetNotification, snmpTrapDestTableEntry=snmpTrapDestTableEntry, igmps=igmps, sfpTemperature=sfpTemperature, hardwarecode=hardwarecode, syslogDestIpAddress=syslogDestIpAddress, webSupport=webSupport, portStatusTxNetload=portStatusTxNetload, prioPortTable=prioPortTable, igmpsGroupTableEntry=igmpsGroupTableEntry, rtcSNTPServerCount=rtcSNTPServerCount, igmpsGroupMemberPort3=igmpsGroupMemberPort3, poepsePortMode=poepsePortMode, webEnable=webEnable, syslogDestEnable=syslogDestEnable, agentGateway=agentGateway, agentStorageMediaCardMac=agentStorageMediaCardMac, snmpTrapDestCommunity=snmpTrapDestCommunity, ringStatus=ringStatus, igmpsRxMessageTermination=igmpsRxMessageTermination, snmpTrapEntLinkChange=snmpTrapEntLinkChange, couplingredPartnerStatus=couplingredPartnerStatus, igmpsPortTableEntry=igmpsPortTableEntry, rtcLocalTime=rtcLocalTime, snmpTrapEntSeclevelFail=snmpTrapEntSeclevelFail, deviceName=deviceName, snmpTrapEntUnderOverVoltage=snmpTrapEntUnderOverVoltage, vlanMemberPort19=vlanMemberPort19, rtcSNTPsyncInterval=rtcSNTPsyncInterval, vlanMemberPort7=vlanMemberPort7, igmpsPortDynamicRouter=igmpsPortDynamicRouter, igmpsGroupVlanId=igmpsGroupVlanId, snmpApplyMode=snmpApplyMode, temperatureShutdownNotification=temperatureShutdownNotification, couplingredPartnerIp=couplingredPartnerIp, pacMacLockLearn3=pacMacLockLearn3, syslogDestEventFilter=syslogDestEventFilter, relaisAlias=relaisAlias, prioPortEnable=prioPortEnable, vlan=vlan, pacStatUserStatus2=pacStatUserStatus2, igmpsGroupMembershipInterval=igmpsGroupMembershipInterval, deviceFddPassiveTime=deviceFddPassiveTime, syslogSupport=syslogSupport, prioSupport=prioSupport, portConfigDuplex=portConfigDuplex, radiusServerCount=radiusServerCount, poepsePortMaxClass=poepsePortMaxClass, pacStatUserName2=pacStatUserName2, consoleSupport=consoleSupport, igmpsGroupMemberPort8=igmpsGroupMemberPort8, relaisMode=relaisMode, igmpsGroupMemberPort15=igmpsGroupMemberPort15, errorcountNotification=errorcountNotification, rtcSNTPServerId=rtcSNTPServerId, poepse=poepse, portStatusFlowControl=portStatusFlowControl, rtcSNTPsyncNow=rtcSNTPsyncNow, vlanMemberPort4=vlanMemberPort4, vlanFilterEnhTableEntry=vlanFilterEnhTableEntry, pacMacLockEnable1=pacMacLockEnable1, igmpsGroupMemberPort5=igmpsGroupMemberPort5, poepsePortTableEntry=poepsePortTableEntry, igmpsGroupLimit=igmpsGroupLimit, igmpsGroupMemberPort12=igmpsGroupMemberPort12, pacStatPortMode=pacStatPortMode, pacStatUserMac3=pacStatUserMac3, relaisSupport=relaisSupport, supplyTable=supplyTable, vlanFilterEnhTable=vlanFilterEnhTable, pacLockedMac3=pacLockedMac3, poepseMaxInputPower=poepseMaxInputPower, prioPortQueue=prioPortQueue, igmpsGroupMemberPort19=igmpsGroupMemberPort19, agentConfigEnableFactoryButton=agentConfigEnableFactoryButton, port=port, snmpTrapEntSfpPlugChange=snmpTrapEntSfpPlugChange, pacFallbackRequestTimeout=pacFallbackRequestTimeout, igmpsGroupMemberPort1=igmpsGroupMemberPort1, poepseExtendedVoltage=poepseExtendedVoltage, igmpsFloodingUnregPack=igmpsFloodingUnregPack, vlanMemberPort14=vlanMemberPort14, temperatureLevelChangeNotification=temperatureLevelChangeNotification, pacStatusTableEntry=pacStatusTableEntry, ringPortB=ringPortB, poepdSupport=poepdSupport, deviceHardware=deviceHardware, pacMacLockEnable2=pacMacLockEnable2, snmpSupport=snmpSupport, relaisTable=relaisTable, prioDiffservEnable=prioDiffservEnable, monitorSupport=monitorSupport, snmpTrapEntPrivPwFail=snmpTrapEntPrivPwFail, vlanMemberPort22=vlanMemberPort22, syslogDestAlias=syslogDestAlias, rtcDSTOffset=rtcDSTOffset, radiusAccountEnable=radiusAccountEnable, rtcSNTPServerTable=rtcSNTPServerTable, snmpv3PrivacyPwFailNotification=snmpv3PrivacyPwFailNotification, snmpTrapDestTable=snmpTrapDestTable, igmpsSupport=igmpsSupport, igmpsTxMessageSolicitation=igmpsTxMessageSolicitation, igmpsRxMessageGeneralQuery=igmpsRxMessageGeneralQuery, igmpsGroupNumber=igmpsGroupNumber, radiusServerAccountPort=radiusServerAccountPort, deviceGroup=deviceGroup, portConfigId=portConfigId, igmpsGroupMemberPort9=igmpsGroupMemberPort9, portConfigFibreDownDetection=portConfigFibreDownDetection, vlanMemberPort8=vlanMemberPort8, prioIeeeTagEnable=prioIeeeTagEnable, igmpsGroupMemberPort4=igmpsGroupMemberPort4, poepd=poepd, pacFallbackMaxRejects=pacFallbackMaxRejects, snmpv3AccessPermissionNotification=snmpv3AccessPermissionNotification, portConfigAdvertise=portConfigAdvertise, vlanMemberPort17=vlanMemberPort17, snmpCommunityWrite=snmpCommunityWrite, pacUnauthVID=pacUnauthVID, snmpinterface=snmpinterface, rtcTimezoneOffset=rtcTimezoneOffset, consolePrompt=consolePrompt, portStatusId=portStatusId, pacMacLockLearn4=pacMacLockLearn4, snmpCommunityRead=snmpCommunityRead, sfpId=sfpId, vlanSupport=vlanSupport, snmpTrapTest=snmpTrapTest, ring=ring, deviceTemperatureLevel=deviceTemperatureLevel, igmpsGroupId=igmpsGroupId, portStatusFarEndFault=portStatusFarEndFault, vlanMemberPort11=vlanMemberPort11, portStatusSpeed=portStatusSpeed, agentIpMode=agentIpMode, prioQueueScheme=prioQueueScheme, supplyId=supplyId, syslogDestPort=syslogDestPort, snmpTrapDestIP=snmpTrapDestIP, vlanFilterTable=vlanFilterTable, couplingred=couplingred, webinterface=webinterface, vlanMemberPort1=vlanMemberPort1, agentConfigFactoryDefault=agentConfigFactoryDefault, agentSecureAddressFlag=agentSecureAddressFlag, igmpsLastMemeberQueryTime=igmpsLastMemeberQueryTime, prioDiffservTableEntry=prioDiffservTableEntry, sfpVoltage=sfpVoltage, snmpTrapEntPoeLimitExceeded=snmpTrapEntPoeLimitExceeded, pacLockedMac2=pacLockedMac2, prioDiffservQueue=prioDiffservQueue, igmpsCounterReset=igmpsCounterReset, portConfigTable=portConfigTable, rtcDSTstatus=rtcDSTstatus, pacStatUserName1=pacStatUserName1, deviceContact=deviceContact, vlanFilterEnable=vlanFilterEnable, portConfigAlias=portConfigAlias, pacReauthTime=pacReauthTime, snmpTrapEntTempShutDown=snmpTrapEntTempShutDown, sfpRxPower=sfpRxPower, snmpTrapEntRingAlarm=snmpTrapEntRingAlarm, ringId=ringId, igmpsGroupMemberPort21=igmpsGroupMemberPort21, vlanFilterEnhPriOverride=vlanFilterEnhPriOverride, vlanMemberPort10=vlanMemberPort10, ringTableEntry=ringTableEntry, sfpPortnumber=sfpPortnumber, vlanVoiceVID=vlanVoiceVID, pacStatUserMac1=pacStatUserMac1, consoleEnable=consoleEnable, agent=agent, pacMacLockingTable=pacMacLockingTable, vlanMemberManager=vlanMemberManager, portCount=portCount, syslogDestTable=syslogDestTable, poepseSupport=poepseSupport, pseAvailablePower=pseAvailablePower, agentStorageMediaCardBoot=agentStorageMediaCardBoot, igmpsGroupMemberPort6=igmpsGroupMemberPort6, snmpTrapEntRingBroken=snmpTrapEntRingBroken, sfpSupport=sfpSupport, vlanFilterEnhFlags=vlanFilterEnhFlags, vlanFilterCount=vlanFilterCount, igmpsGroupMemberPort7=igmpsGroupMemberPort7, snmpTrapEntAccessPermission=snmpTrapEntAccessPermission, portStatusPinout=portStatusPinout, rtcSNTPServerIpAddress=rtcSNTPServerIpAddress, sfpWarnings=sfpWarnings)
