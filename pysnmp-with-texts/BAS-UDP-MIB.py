#
# PySNMP MIB module BAS-UDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-UDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
BasInterfaceId, BasLogicalPortId, BasChassisId, BasSlotId, basAliasUdp = mibBuilder.importSymbols("BAS-MIB", "BasInterfaceId", "BasLogicalPortId", "BasChassisId", "BasSlotId", "basAliasUdp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, NotificationType, ObjectIdentity, Unsigned32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Counter64, ModuleIdentity, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "NotificationType", "ObjectIdentity", "Unsigned32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Counter64", "ModuleIdentity", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
basAliasUdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1))
if mibBuilder.loadTexts: basAliasUdpMIB.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basAliasUdpMIB.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basAliasUdpMIB.setContactInfo(' Tech Support Broadband Access Systems 201 Forest Street Marlboro, MA 01752 U.S.A. 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basAliasUdpMIB.setDescription('This module defines the MIB objects for a Broadband Access System IP Forwarding component.')
basUdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1))
basUdpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1), )
if mibBuilder.loadTexts: basUdpGroupTable.setStatus('current')
if mibBuilder.loadTexts: basUdpGroupTable.setDescription('Aliased UDP group objects.')
basUdpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1), ).setIndexNames((0, "BAS-UDP-MIB", "basUdpGroupChassis"), (0, "BAS-UDP-MIB", "basUdpGroupSlot"), (0, "BAS-UDP-MIB", "basUdpGroupIf"), (0, "BAS-UDP-MIB", "basUdpGroupLPort"))
if mibBuilder.loadTexts: basUdpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: basUdpGroupEntry.setDescription('')
basUdpInDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpInDatagrams.setStatus('current')
if mibBuilder.loadTexts: basUdpInDatagrams.setDescription('The total number of UDP datagrams delivered to UDP users.')
basUdpNoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpNoPorts.setStatus('current')
if mibBuilder.loadTexts: basUdpNoPorts.setDescription('The total number of received UDP datagrams for which there was no application at the destination port.')
basUdpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpInErrors.setStatus('current')
if mibBuilder.loadTexts: basUdpInErrors.setDescription('The number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.')
basUdpOutDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpOutDatagrams.setStatus('current')
if mibBuilder.loadTexts: basUdpOutDatagrams.setDescription('The total number of UDP datagrams sent from this entity.')
basUdpGroupChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basUdpGroupChassis.setStatus('current')
if mibBuilder.loadTexts: basUdpGroupChassis.setDescription('The BAS Chassis ID of the Route Server.')
basUdpGroupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 6), BasSlotId())
if mibBuilder.loadTexts: basUdpGroupSlot.setStatus('current')
if mibBuilder.loadTexts: basUdpGroupSlot.setDescription('The BAS Slot ID of the Route Server.')
basUdpGroupIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 7), BasInterfaceId())
if mibBuilder.loadTexts: basUdpGroupIf.setStatus('current')
if mibBuilder.loadTexts: basUdpGroupIf.setDescription('The BAS interface ID of the Route Server.')
basUdpGroupLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 1, 1, 8), BasLogicalPortId())
if mibBuilder.loadTexts: basUdpGroupLPort.setStatus('current')
if mibBuilder.loadTexts: basUdpGroupLPort.setDescription('The BAS logical port ID of the Route Server.')
basUdpTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2), )
if mibBuilder.loadTexts: basUdpTable.setStatus('current')
if mibBuilder.loadTexts: basUdpTable.setDescription('A table containing UDP listener information.')
basUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1), ).setIndexNames((0, "BAS-UDP-MIB", "basUdpLisChassis"), (0, "BAS-UDP-MIB", "basUdpLisSlot"), (0, "BAS-UDP-MIB", "basUdpLisIf"), (0, "BAS-UDP-MIB", "basUdpLisLPort"), (0, "BAS-UDP-MIB", "basUdpLocalAddress"), (0, "BAS-UDP-MIB", "basUdpLocalPort"))
if mibBuilder.loadTexts: basUdpEntry.setStatus('current')
if mibBuilder.loadTexts: basUdpEntry.setDescription('Information about a particular current UDP listener.')
basUdpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpLocalAddress.setStatus('current')
if mibBuilder.loadTexts: basUdpLocalAddress.setDescription('The local IP address for this UDP listener. In the case of a UDP listener which is willing to accept datagrams for any IP interface associated with the node, the value 0.0.0.0 is used.')
basUdpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basUdpLocalPort.setStatus('current')
if mibBuilder.loadTexts: basUdpLocalPort.setDescription('The local port number for this UDP listener.')
basUdpLisChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 3), BasChassisId())
if mibBuilder.loadTexts: basUdpLisChassis.setStatus('current')
if mibBuilder.loadTexts: basUdpLisChassis.setDescription('The BAS Chassis ID of the Route Server.')
basUdpLisSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 4), BasSlotId())
if mibBuilder.loadTexts: basUdpLisSlot.setStatus('current')
if mibBuilder.loadTexts: basUdpLisSlot.setDescription('The BAS Slot ID of the Route Server.')
basUdpLisIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 5), BasInterfaceId())
if mibBuilder.loadTexts: basUdpLisIf.setStatus('current')
if mibBuilder.loadTexts: basUdpLisIf.setDescription('The BAS interface ID of the Route Server.')
basUdpLisLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 4, 1, 1, 2, 1, 6), BasLogicalPortId())
if mibBuilder.loadTexts: basUdpLisLPort.setStatus('current')
if mibBuilder.loadTexts: basUdpLisLPort.setDescription('The BAS logical port ID of the Route Server.')
mibBuilder.exportSymbols("BAS-UDP-MIB", basUdpGroupEntry=basUdpGroupEntry, basUdpGroupTable=basUdpGroupTable, PYSNMP_MODULE_ID=basAliasUdpMIB, basUdpEntry=basUdpEntry, basUdpObjects=basUdpObjects, basUdpTable=basUdpTable, basUdpGroupLPort=basUdpGroupLPort, basAliasUdpMIB=basAliasUdpMIB, basUdpInDatagrams=basUdpInDatagrams, basUdpLisIf=basUdpLisIf, basUdpGroupIf=basUdpGroupIf, basUdpLocalPort=basUdpLocalPort, basUdpLisLPort=basUdpLisLPort, basUdpGroupSlot=basUdpGroupSlot, basUdpLocalAddress=basUdpLocalAddress, basUdpInErrors=basUdpInErrors, basUdpLisChassis=basUdpLisChassis, basUdpOutDatagrams=basUdpOutDatagrams, basUdpGroupChassis=basUdpGroupChassis, basUdpNoPorts=basUdpNoPorts, basUdpLisSlot=basUdpLisSlot)
