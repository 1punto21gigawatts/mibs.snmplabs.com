#
# PySNMP MIB module SW-SNIFF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-SNIFF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, enterprises, Unsigned32, ObjectIdentity, Counter32, IpAddress, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, TimeTicks, Bits, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "enterprises", "Unsigned32", "ObjectIdentity", "Counter32", "IpAddress", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "TimeTicks", "Bits", "iso", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
dlinkcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
es2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 3))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
marconi_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("marconi-mgmt")
es2000Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28))
swL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2))
swPortSniff = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 5))
swSniffCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 5, 1), )
if mibBuilder.loadTexts: swSniffCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffCtrlTable.setDescription('A list of port sniffing entries.Port Sniffing function provides an easy way to monitor traffic on any port. In this way any good packets appears on the source mirror port also shows up on the target mirror port without need to reconstruct the LAN.')
swSniffCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 5, 1, 1), ).setIndexNames((0, "SW-SNIFF-MIB", "swSniffIndex"))
if mibBuilder.loadTexts: swSniffCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffCtrlEntry.setDescription('Each entry contains a pair of sniff source port and target port.')
swSniffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSniffIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffIndex.setDescription('A unique number to identify the sniff entry.')
swSniffSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffSourcePort.setDescription('Indicates the source port whose traffic will be sniffed.')
swSniffTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffTargetPort.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffTargetPort.setDescription('Indicates the target port which the traffic appears on the source sniffed port will be copied to. A trunk port member cannot be configured as a target Sniffing port')
swSniffState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffState.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - Sniff funtion disable. enable(3) - Sniff funtion enable and Sniff received or transmit packet by Sniff source port.')
mibBuilder.exportSymbols("SW-SNIFF-MIB", swSniffTargetPort=swSniffTargetPort, marconi=marconi, systems=systems, marconi_mgmt=marconi_mgmt, swSniffSourcePort=swSniffSourcePort, swSniffCtrlEntry=swSniffCtrlEntry, swSniffIndex=swSniffIndex, golfproducts=golfproducts, external=external, dlink=dlink, dlinkcommon=dlinkcommon, es2000Mgmt=es2000Mgmt, swL2Mgmt=swL2Mgmt, golfcommon=golfcommon, swSniffCtrlTable=swSniffCtrlTable, es2000=es2000, swSniffState=swSniffState, golf=golf, swPortSniff=swPortSniff)
