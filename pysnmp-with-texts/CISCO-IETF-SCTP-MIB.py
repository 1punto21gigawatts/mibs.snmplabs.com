#
# PySNMP MIB module CISCO-IETF-SCTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-SCTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, TimeTicks, Unsigned32, Counter64, ObjectIdentity, NotificationType, iso, Counter32, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "TimeTicks", "Unsigned32", "Counter64", "ObjectIdentity", "NotificationType", "iso", "Counter32", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp")
cSctpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 75))
cSctpMIB.setRevisions(('2001-08-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cSctpMIB.setRevisionsDescriptions(('MIB module developed for the SIGTRAN IETF group. Based on SCTP, RFC2960 - Added textual convention for InetPortNumber Imported TEXTUAL-CONVENTION from FROM SNMPv2-TC and locally defined InetPortNumber. -- Commented out some compliance statements that did not compile. This MIB is based on the following IETF document. draft-ietf-sigtran-sctp-mib-04.txt ',))
if mibBuilder.loadTexts: cSctpMIB.setLastUpdated('200108080000Z')
if mibBuilder.loadTexts: cSctpMIB.setOrganization('IETF SIGTRAN Working Group')
if mibBuilder.loadTexts: cSctpMIB.setContactInfo(' Maria-Carmen Belinchon-Vergara Jose-Javier Pastor-Balbas Postal: Ericsson Espana S. A. Ombu street 1, 4th floor 28045 Madrid Spain Phones: +34 91 339 3535 +34 91 339 3819 Emails: Maria.C.Belinchon@ericsson.com J.Javier.Pastor@ericsson.com cs-sctp@cisco.com')
if mibBuilder.loadTexts: cSctpMIB.setDescription('The MIB module for managing SCTP protocol (RFC 2960).')
cSctpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 75, 1))
cSctpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 75, 2))
cSctpScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1))
cSctpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2))
class InetPortNumber(TextualConvention, Unsigned32):
    description = ' '
    status = 'current'

cSctpRtoAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("vanj", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpRtoAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cSctpRtoAlgorithm.setDescription('The algorithm used to determine the timeout value (T3-rtx) used for re-transmitting unacknowledged chunks.')
cSctpRtoMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 2), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpRtoMin.setStatus('current')
if mibBuilder.loadTexts: cSctpRtoMin.setDescription('The minimum value permitted by a SCTP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. Minimum recommended value is 1000 milliseconds. Some telephony applications could require less than 1 second, see [SIGAS] for further information.')
cSctpRtoMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 3), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpRtoMax.setStatus('current')
if mibBuilder.loadTexts: cSctpRtoMax.setDescription('The maximum value permitted by a SCTP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. Recommended value is 60000 milliseconds.')
cSctpRtoInitial = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 4), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpRtoInitial.setStatus('current')
if mibBuilder.loadTexts: cSctpRtoInitial.setDescription('Initial value for the Retransmission timer. Recommended value is 3000 milliseconds.')
cSctpMaxAssoc = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpMaxAssoc.setStatus('current')
if mibBuilder.loadTexts: cSctpMaxAssoc.setDescription('The limit on the total number of SCTP associations the entitycan support. In entities where the maximum number of associations is dynamic, this object should contain the value -1.')
cSctpValCookieLife = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpValCookieLife.setStatus('current')
if mibBuilder.loadTexts: cSctpValCookieLife.setDescription('Valid cookie life in the 4-way start-up handshake procedure. Recommended value: 60000 milliseconds.')
cSctpMaxInitRetr = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpMaxInitRetr.setStatus('current')
if mibBuilder.loadTexts: cSctpMaxInitRetr.setDescription('The maximum number of retransmissions at the start-up phase (INIT and COOKIE ECHO chunks). Recommended value: 8 attempts.')
cSctpCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpCurrEstab.setStatus('current')
if mibBuilder.loadTexts: cSctpCurrEstab.setDescription('The number of SCTP associations for which the current state is either ESTABLISHED, SHUTDOWN-RECEIVED or SHUTDOWN-PENDING.')
cSctpActiveEstabs = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpActiveEstabs.setStatus('current')
if mibBuilder.loadTexts: cSctpActiveEstabs.setDescription('The number of times that SCTP associations have made a direct transition to the ESTABLISHED state from the COOKIE-ECHOED state: COOKIE-ECHOED -> ESTABLISHED. The upper layer has initiated the association attempt.')
cSctpPassiveEstabs = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpPassiveEstabs.setStatus('current')
if mibBuilder.loadTexts: cSctpPassiveEstabs.setDescription('The number of times that SCTP associations have made a direct transition to the ESTABLISHED state from the CLOSED state: CLOSED -> ESTABLISHED. The remote endpoint has initiated the association attempt.')
cSctpAborteds = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAborteds.setStatus('current')
if mibBuilder.loadTexts: cSctpAborteds.setDescription("The number of times that SCTP associations have made a direct transition to the CLOSED state from any state using the primitive 'ABORT': AnyState --Abort--> CLOSED. Ungraceful termination of the association.")
cSctpShutdowns = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpShutdowns.setStatus('current')
if mibBuilder.loadTexts: cSctpShutdowns.setDescription('The number of times that SCTP associations have made a direct transition to the CLOSED state from either the SHUTDOWN-SENT state or the SHUTDOWN-ACK-SENT state. Graceful termination of the association.')
cSctpStatOutOfBlues = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatOutOfBlues.setStatus('current')
if mibBuilder.loadTexts: cSctpStatOutOfBlues.setDescription('Number of out of the blue packets (SCTP packet correctly formed -right checksum- but the receiver is not able to identify the association to which this packet belongs) received by the host.')
cSctpStatChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: cSctpStatChecksumErrors.setDescription('Number of SCTP packets received from the peers with an invalid checksum.')
cSctpStatSentCtrlChunks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatSentCtrlChunks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatSentCtrlChunks.setDescription('Number of SCTP control chunks sent to the peers (no retransmissions included).')
cSctpStatSentOrderChunks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatSentOrderChunks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatSentOrderChunks.setDescription('Number of SCTP ordered data chunks sent to the peers (no retransmissions included).')
cSctpStatSentUnorderChunks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatSentUnorderChunks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatSentUnorderChunks.setDescription('Number of SCTP unordered chunks (data chunks in which the U bit is set to 1) sent to the peers (no retransmissions included).')
cSctpStatRecCtrlChunks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatRecCtrlChunks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatRecCtrlChunks.setDescription('Number of SCTP control chunks received from the peers (no duplicated included).')
cSctpStatRecOrderChunks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatRecOrderChunks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatRecOrderChunks.setDescription('Number of SCTP ordered data chunks received from the peers (no duplicated included).')
cSctpStatRecUnorderChunks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatRecUnorderChunks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatRecUnorderChunks.setDescription('Number of SCTP unordered chunks (data chunks in which the U bit is set to 1) received from the peers (no duplicated included).')
cSctpStatFragmentedUsrMessages = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatFragmentedUsrMessages.setStatus('current')
if mibBuilder.loadTexts: cSctpStatFragmentedUsrMessages.setDescription('Number of user messages that have to be fragmented because of the MTU.')
cSctpStatReassembledUsrMessages = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatReassembledUsrMessages.setStatus('current')
if mibBuilder.loadTexts: cSctpStatReassembledUsrMessages.setDescription('Number of user messages reassembled.')
cSctpStatSentSCTPPacks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatSentSCTPPacks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatSentSCTPPacks.setDescription('Number of SCTP packets received from the peers.')
cSctpStatRecSCTPPacks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpStatRecSCTPPacks.setStatus('current')
if mibBuilder.loadTexts: cSctpStatRecSCTPPacks.setDescription('Number of SCTP packets received from the peers.')
cSctpAssocTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2), )
if mibBuilder.loadTexts: cSctpAssocTable.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocTable.setDescription('A table containing SCTP association-specific information.')
cSctpAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-IETF-SCTP-MIB", "cSctpAssocId"))
if mibBuilder.loadTexts: cSctpAssocEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocEntry.setDescription('General common variables and statistics for the whole association.')
cSctpAssocId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cSctpAssocId.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocId.setDescription('Association Identification. Value identifying the association (typically the Initiate Verification Tag). If the selected AssocID is the Initiate Verification Tag, this value must not be zero.')
cSctpAssocRemHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemHostName.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemHostName.setDescription("Peer's DNS name. If no DNS domain name was received at init time (embedded in the INIT or INIT-ACK chunk) from the peer, this entry will be meaningless, therefore it will contain a NULL value. Otherwise, the remote host name received at init time will be stored.")
cSctpAssocLocalSCTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocLocalSCTPPort.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocLocalSCTPPort.setDescription('Local SCTP port number used for this association.')
cSctpAssocRemSCTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemSCTPPort.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemSCTPPort.setDescription('Remote SCTP port number used for this association.')
cSctpAssocRemPrimaryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemPrimaryAddressType.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemPrimaryAddressType.setDescription('Internet type of primary destination IP address. - unknown (0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address different from IPv4 or IPv6. This value is used in this MIB for error conditions. - ipv4 (1): An IPv4 address as defined by the InetAddressIPv4 textual convention [RFC2851]. - ipv6 (2): An IPv6 address as defined by the InetAddressIPv6 textual convention [RFC2851] This value will be filled in after INIT or INIT ACK messages have been received (when the primary path is selected by SCTP).')
cSctpAssocRemPrimaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemPrimaryAddress.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemPrimaryAddress.setDescription('Primary destination IP address. An InetAddress value is always interpreted within the context of an InetAddressType value. This value will be filled in after INIT or INIT ACK messages have been received (when the primary path is selected by SCTP).')
cSctpAssocHeartBeatTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocHeartBeatTimer.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocHeartBeatTimer.setDescription('The current heartbeat time-out. The recommended default value is 30000 milliseconds.')
cSctpAssocState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("closed", 1), ("cookieWait", 2), ("cookieEchoed", 3), ("established", 4), ("shutdownPending", 5), ("shutdownSent", 6), ("shutdownReceived", 7), ("shutdownAckSent", 8), ("deleteTCB", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cSctpAssocState.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocState.setDescription("The state of this SCTP association. As in TCP, the only value which may be set by a management station is deleteTCB. Accordingly, it is appropriate for an agent to return a 'badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(9), then this has the effect of deleting the TCB (as defined in SCTP) of the corresponding association on the managed node, resulting in immediate termination of the association. As an implementation-specific option, an ABORT chunk may be sent from the managed node to the other SCTP endpoint.")
cSctpAssocInStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocInStreams.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocInStreams.setDescription('Inbound Streams according to the negotiation at association start up. This parameter has to be read-only by the manager.')
cSctpAssocOutStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocOutStreams.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocOutStreams.setDescription('Outbound Streams according to the negotiation at association start up. This parameter has to be read-only by the manager.')
cSctpAssocMaxRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocMaxRetr.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocMaxRetr.setDescription('The maximum number of data retransmissions in the association context. This value is specific for each association and the upper layer can change it calling the appropriate primitives. This value has to be smaller than the addition of all the maximum number for all the paths (cSctpAssocRemAddressMaxPathRetrans). Recommended value: 10 attempts.')
cSctpAssocT1expireds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocT1expireds.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocT1expireds.setDescription('Number of times that T1 timer expired (timer for sending either INIT or COOKIE-ECHO chunks and receiving an acknowledgment).')
cSctpAssocT2expireds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocT2expireds.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocT2expireds.setDescription('Number of times that T2-shutdown timer expired (shutdown timer).')
cSctpAssocRtxChunks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRtxChunks.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRtxChunks.setDescription('Number of data chunks retransmitted to the peer in the current association.')
cSctpAssocStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 2, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocStartTime.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocStartTime.setDescription('The value of SysUpTime at the time that this row was created.')
cSctpAssocLocalAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 3), )
if mibBuilder.loadTexts: cSctpAssocLocalAddressTable.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocLocalAddressTable.setDescription('Expanded table of cSctpAssocTable based on the AssocId index. It shows several interesting data for each local address which takes part in this association.')
cSctpAssocLocalAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-IETF-SCTP-MIB", "cSctpAssocId"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocLocalAddressIPType"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocLocalAddressIP"))
if mibBuilder.loadTexts: cSctpAssocLocalAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocLocalAddressEntry.setDescription('Local information about the available addresses.')
cSctpAssocLocalAddressIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cSctpAssocLocalAddressIPType.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocLocalAddressIPType.setDescription('Internet type of local IP address used for this association. - unknown (0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address different from IPv4 or IPv6. This value is used in this MIB for error conditions. - ipv4 (1): An IPv4 address as defined by the InetAddressIPv4 textual convention [RFC2851]. - ipv6 (2): An IPv6 address as defined by the InetAddressIPv6 textual convention [RFC2851].')
cSctpAssocLocalAddressIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: cSctpAssocLocalAddressIP.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocLocalAddressIP.setDescription('The value of a local IP address available for this association. An InetAddress value is always interpreted within the context of an InetAddressType value. If SCTP are using DNS names, the mapping to IP address-es will be done at reception of INIT or INIT_ACK messages.')
cSctpAssocLocalAddressStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocLocalAddressStartTime.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocLocalAddressStartTime.setDescription('The value of SysUpTime at the time that this row was created.')
cSctpAssocRemAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4), )
if mibBuilder.loadTexts: cSctpAssocRemAddressTable.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressTable.setDescription('Expanded table of cSctpAssocTable based on the AssocId index. It shows several interesting data for each remote peer IP address which is used in this association.')
cSctpAssocRemAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-IETF-SCTP-MIB", "cSctpAssocId"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressIPType"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressIP"))
if mibBuilder.loadTexts: cSctpAssocRemAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressEntry.setDescription('Information about THE most important variables for every remote IP address ')
cSctpAssocRemAddressIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cSctpAssocRemAddressIPType.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressIPType.setDescription('Internet type of a remote IP address available for this association. - unknown (0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address different from IPv4 or IPv6. This value is used in this MIB for error conditions. - ipv4 (1): An IPv4 address as defined by the InetAddressIPv4 textual convention [RFC2851]. - ipv6 (2): An IPv6 address as defined by the InetAddressIPv6 textual convention [RFC2851].')
cSctpAssocRemAddressIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: cSctpAssocRemAddressIP.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressIP.setDescription('The value of a remote IP address available for this association. An InetAddress value is always interpreted within the context of an InetAddressType value.')
cSctpAssocRemAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemAddressStatus.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressStatus.setDescription('The current status of the remote transport address, according to [SCTP]. Active means that the threshold of no answer received from this IP address has not been reached. Inactive means that either no heartbeat was received from this address, or any other message, reaching the threshold defined by the protocol.')
cSctpAssocRemAddressHBFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemAddressHBFlag.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressHBFlag.setDescription('The optional Heartbeat associated to one destination transport address could be active or not (value equal to 0 or 1, respectively). An active destination transport address is the one considered available by a peer endpoint for receiving SCTP packets, as it is described in [cSctp].')
cSctpAssocRemAddressRTO = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1, 5), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemAddressRTO.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressRTO.setDescription('The current Retransmission Timeout. T3-rtx timer as defined in the protocol SCTP.')
cSctpAssocRemAddressMaxPathRtx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemAddressMaxPathRtx.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressMaxPathRtx.setDescription('Maximum number of DATA retransmissions allowed to a remote IP address before it is considered inactive, as defined in [cSctp]. Recommended value 5 attempts.')
cSctpAssocRemAddressRtx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemAddressRtx.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressRtx.setDescription('Number of DATA retransmissions as defined in [cSctp].')
cSctpAssocRemAddressStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpAssocRemAddressStartTime.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocRemAddressStartTime.setDescription('The value of SysUpTime at the time that this row was created.')
cSctpLookupLocalPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 5), )
if mibBuilder.loadTexts: cSctpLookupLocalPortTable.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupLocalPortTable.setDescription('With the use of this table, a list of associations which use that local port can be got')
cSctpLookupLocalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-IETF-SCTP-MIB", "cSctpAssocLocalSCTPPort"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocId"))
if mibBuilder.loadTexts: cSctpLookupLocalPortEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupLocalPortEntry.setDescription('This table is indexed by local port and association ID. Specifying a local port, we would get a list of the associations whose local port is the one specified')
cSctpLookupLocalPortStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 5, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpLookupLocalPortStartTime.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupLocalPortStartTime.setDescription('The value of SysUpTime at the time that this row was created.')
cSctpLookupRemPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 6), )
if mibBuilder.loadTexts: cSctpLookupRemPortTable.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemPortTable.setDescription('With the use of this table, a list of associations which use that remote port can be got')
cSctpLookupRemPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-IETF-SCTP-MIB", "cSctpAssocRemSCTPPort"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocId"))
if mibBuilder.loadTexts: cSctpLookupRemPortEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemPortEntry.setDescription('This table is indexed by remote port and association ID. Specifying a remote port we would get a list of the associations whose local port is the one specified ')
cSctpLookupRemPortStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 6, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpLookupRemPortStartTime.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemPortStartTime.setDescription('The value of SysUpTime at the time that this row was created.')
cSctpLookupRemHostNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 7), )
if mibBuilder.loadTexts: cSctpLookupRemHostNameTable.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemHostNameTable.setDescription('With the use of this table, a list of associations with that particular host can be got')
cSctpLookupRemHostNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-IETF-SCTP-MIB", "cSctpAssocRemHostName"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocId"))
if mibBuilder.loadTexts: cSctpLookupRemHostNameEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemHostNameEntry.setDescription('This table is indexed by remote host name and association ID. Specifying a host name we would get a list of the associations specifying that host name as the remote one')
cSctpLookupRemHostNameStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 7, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpLookupRemHostNameStartTime.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemHostNameStartTime.setDescription('The value of SysUpTime at the time that this row was created.')
cSctpLookupRemPrimIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 8), )
if mibBuilder.loadTexts: cSctpLookupRemPrimIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemPrimIPAddrTable.setDescription('With the use of this table, it can be got a list of associations that have that the specified IP address as primary within the remote set of active addresses ')
cSctpLookupRemPrimIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 8, 1), ).setIndexNames((0, "CISCO-IETF-SCTP-MIB", "cSctpAssocRemPrimaryAddressType"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocRemPrimaryAddress"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocId"))
if mibBuilder.loadTexts: cSctpLookupRemPrimIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemPrimIPAddrEntry.setDescription('This table is indexed by primary address and association ID. Specifying a primary address, we would get a list of the associations that have the specified remote IP address marked as primary. ')
cSctpLookupRemPrimIPAddrStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 8, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpLookupRemPrimIPAddrStartTime.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemPrimIPAddrStartTime.setDescription('The value of SysUpTime at the time that this row was created.')
cSctpLookupRemIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 9), )
if mibBuilder.loadTexts: cSctpLookupRemIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemIPAddrTable.setDescription('With the use of this table, a list of associations that have the specified IP address as one of the remote ones can be got.')
cSctpLookupRemIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 9, 1), ).setIndexNames((0, "CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressIPType"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressIP"), (0, "CISCO-IETF-SCTP-MIB", "cSctpAssocId"))
if mibBuilder.loadTexts: cSctpLookupRemIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemIPAddrEntry.setDescription('This table is indexed by a remote IP address and association ID. Specifying an IP address we would get a list of the associations that have the specified IP address included within the set of remote IP addresses')
cSctpLookupRemIPAddrStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 75, 1, 2, 9, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cSctpLookupRemIPAddrStartTime.setStatus('current')
if mibBuilder.loadTexts: cSctpLookupRemIPAddrStartTime.setDescription('The value of SysUpTime at the time that this row was created.')
cSctpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 1))
cSctpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 2))
cSctpGeneralVariablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 1, 1)).setObjects(("CISCO-IETF-SCTP-MIB", "cSctpRtoAlgorithm"), ("CISCO-IETF-SCTP-MIB", "cSctpRtoMin"), ("CISCO-IETF-SCTP-MIB", "cSctpRtoMax"), ("CISCO-IETF-SCTP-MIB", "cSctpRtoInitial"), ("CISCO-IETF-SCTP-MIB", "cSctpMaxAssoc"), ("CISCO-IETF-SCTP-MIB", "cSctpValCookieLife"), ("CISCO-IETF-SCTP-MIB", "cSctpMaxInitRetr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpGeneralVariablesGroup = cSctpGeneralVariablesGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpGeneralVariablesGroup.setDescription('Common parameters for all the associations. They can usually be referred as configuration parameters')
cSctpStateStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 1, 2)).setObjects(("CISCO-IETF-SCTP-MIB", "cSctpCurrEstab"), ("CISCO-IETF-SCTP-MIB", "cSctpActiveEstabs"), ("CISCO-IETF-SCTP-MIB", "cSctpPassiveEstabs"), ("CISCO-IETF-SCTP-MIB", "cSctpAborteds"), ("CISCO-IETF-SCTP-MIB", "cSctpShutdowns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpStateStatGroup = cSctpStateStatGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpStateStatGroup.setDescription('The cSctp group of objects to control state changes in the SCTP protocol local layer. They include the data for all the associations.')
cSctpOtherStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 1, 3)).setObjects(("CISCO-IETF-SCTP-MIB", "cSctpStatOutOfBlues"), ("CISCO-IETF-SCTP-MIB", "cSctpStatChecksumErrors"), ("CISCO-IETF-SCTP-MIB", "cSctpStatSentCtrlChunks"), ("CISCO-IETF-SCTP-MIB", "cSctpStatSentOrderChunks"), ("CISCO-IETF-SCTP-MIB", "cSctpStatSentUnorderChunks"), ("CISCO-IETF-SCTP-MIB", "cSctpStatRecCtrlChunks"), ("CISCO-IETF-SCTP-MIB", "cSctpStatRecOrderChunks"), ("CISCO-IETF-SCTP-MIB", "cSctpStatRecUnorderChunks"), ("CISCO-IETF-SCTP-MIB", "cSctpStatFragmentedUsrMessages"), ("CISCO-IETF-SCTP-MIB", "cSctpStatReassembledUsrMessages"), ("CISCO-IETF-SCTP-MIB", "cSctpStatSentSCTPPacks"), ("CISCO-IETF-SCTP-MIB", "cSctpStatRecSCTPPacks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpOtherStatGroup = cSctpOtherStatGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpOtherStatGroup.setDescription('The cSctp group of objects providing for management of SCTP most common statistics for the local SCTP layer.')
cSctpAssocTablesVariablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 1, 4)).setObjects(("CISCO-IETF-SCTP-MIB", "cSctpAssocRemHostName"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocLocalSCTPPort"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRemSCTPPort"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRemPrimaryAddressType"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRemPrimaryAddress"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocHeartBeatTimer"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocState"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocInStreams"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocOutStreams"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocMaxRetr"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocT1expireds"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocT2expireds"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRtxChunks"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocStartTime"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocLocalAddressStartTime"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressStatus"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressHBFlag"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressRTO"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressMaxPathRtx"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpAssocTablesVariablesGroup = cSctpAssocTablesVariablesGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocTablesVariablesGroup.setDescription('The sctp group of objects to manage specific local and remote SCTP variables (local and remote tables). These variables include all the SCTP basic features.')
cSctpAssocStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 1, 5)).setObjects(("CISCO-IETF-SCTP-MIB", "cSctpAssocRemAddressRtx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpAssocStatGroup = cSctpAssocStatGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpAssocStatGroup.setDescription('The cSctp group of objects to manage SCTP statistics related to the remote endpoint.')
cSctpInverseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 1, 6)).setObjects(("CISCO-IETF-SCTP-MIB", "cSctpLookupLocalPortStartTime"), ("CISCO-IETF-SCTP-MIB", "cSctpLookupRemPortStartTime"), ("CISCO-IETF-SCTP-MIB", "cSctpLookupRemHostNameStartTime"), ("CISCO-IETF-SCTP-MIB", "cSctpLookupRemPrimIPAddrStartTime"), ("CISCO-IETF-SCTP-MIB", "cSctpLookupRemIPAddrStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpInverseGroup = cSctpInverseGroup.setStatus('current')
if mibBuilder.loadTexts: cSctpInverseGroup.setDescription('Objects used in the inverse lookup table.')
cSctpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 75, 2, 2, 1)).setObjects(("CISCO-IETF-SCTP-MIB", "cSctpGeneralVariablesGroup"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocTablesVariablesGroup"), ("CISCO-IETF-SCTP-MIB", "cSctpStateStatGroup"), ("CISCO-IETF-SCTP-MIB", "cSctpOtherStatGroup"), ("CISCO-IETF-SCTP-MIB", "cSctpAssocStatGroup"), ("CISCO-IETF-SCTP-MIB", "cSctpInverseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cSctpCompliance = cSctpCompliance.setStatus('current')
if mibBuilder.loadTexts: cSctpCompliance.setDescription('The compliance statement for SNMPv3 entities which implement SCTP. As a remark, the not-accessible objects: cSctpAssocLocalAddressIPType and cSctpAssocRemAddressIPType do not support the dns(4)type since the use of the host names is limited to first stage, when the association is being established. cSctpAssocLocalAddressIP and cSctpAssocRemAddressIP will only accept the size of 4 or 16 because it is only required to support IPv4 and unique IPv6 addresses.')
mibBuilder.exportSymbols("CISCO-IETF-SCTP-MIB", cSctpRtoMin=cSctpRtoMin, cSctpAssocLocalAddressTable=cSctpAssocLocalAddressTable, cSctpAssocStartTime=cSctpAssocStartTime, cSctpAssocRemAddressRtx=cSctpAssocRemAddressRtx, cSctpLookupLocalPortStartTime=cSctpLookupLocalPortStartTime, cSctpLookupRemIPAddrEntry=cSctpLookupRemIPAddrEntry, cSctpAssocRemAddressEntry=cSctpAssocRemAddressEntry, PYSNMP_MODULE_ID=cSctpMIB, InetPortNumber=InetPortNumber, cSctpRtoInitial=cSctpRtoInitial, cSctpCurrEstab=cSctpCurrEstab, cSctpStatOutOfBlues=cSctpStatOutOfBlues, cSctpLookupRemHostNameEntry=cSctpLookupRemHostNameEntry, cSctpAssocTable=cSctpAssocTable, cSctpStatChecksumErrors=cSctpStatChecksumErrors, cSctpGroups=cSctpGroups, cSctpObjects=cSctpObjects, cSctpLookupRemPortStartTime=cSctpLookupRemPortStartTime, cSctpLookupRemPrimIPAddrEntry=cSctpLookupRemPrimIPAddrEntry, cSctpStatSentCtrlChunks=cSctpStatSentCtrlChunks, cSctpAssocRemAddressHBFlag=cSctpAssocRemAddressHBFlag, cSctpAssocState=cSctpAssocState, cSctpAssocRemSCTPPort=cSctpAssocRemSCTPPort, cSctpAssocRemPrimaryAddressType=cSctpAssocRemPrimaryAddressType, cSctpAssocTablesVariablesGroup=cSctpAssocTablesVariablesGroup, cSctpStatRecOrderChunks=cSctpStatRecOrderChunks, cSctpAssocLocalAddressStartTime=cSctpAssocLocalAddressStartTime, cSctpLookupRemPrimIPAddrTable=cSctpLookupRemPrimIPAddrTable, cSctpOtherStatGroup=cSctpOtherStatGroup, cSctpCompliance=cSctpCompliance, cSctpAssocStatGroup=cSctpAssocStatGroup, cSctpAssocRtxChunks=cSctpAssocRtxChunks, cSctpAssocRemAddressStatus=cSctpAssocRemAddressStatus, cSctpLookupRemHostNameTable=cSctpLookupRemHostNameTable, cSctpAssocMaxRetr=cSctpAssocMaxRetr, cSctpLookupRemPortEntry=cSctpLookupRemPortEntry, cSctpRtoMax=cSctpRtoMax, cSctpAssocRemAddressStartTime=cSctpAssocRemAddressStartTime, cSctpAssocRemAddressTable=cSctpAssocRemAddressTable, cSctpPassiveEstabs=cSctpPassiveEstabs, cSctpAssocRemHostName=cSctpAssocRemHostName, cSctpAssocLocalAddressEntry=cSctpAssocLocalAddressEntry, cSctpLookupRemIPAddrStartTime=cSctpLookupRemIPAddrStartTime, cSctpLookupRemPrimIPAddrStartTime=cSctpLookupRemPrimIPAddrStartTime, cSctpLookupRemPortTable=cSctpLookupRemPortTable, cSctpLookupLocalPortEntry=cSctpLookupLocalPortEntry, cSctpAssocLocalSCTPPort=cSctpAssocLocalSCTPPort, cSctpMaxAssoc=cSctpMaxAssoc, cSctpShutdowns=cSctpShutdowns, cSctpAssocRemAddressIPType=cSctpAssocRemAddressIPType, cSctpConformance=cSctpConformance, cSctpLookupRemHostNameStartTime=cSctpLookupRemHostNameStartTime, cSctpMIB=cSctpMIB, cSctpStatFragmentedUsrMessages=cSctpStatFragmentedUsrMessages, cSctpActiveEstabs=cSctpActiveEstabs, cSctpStatSentUnorderChunks=cSctpStatSentUnorderChunks, cSctpMaxInitRetr=cSctpMaxInitRetr, cSctpValCookieLife=cSctpValCookieLife, cSctpStatReassembledUsrMessages=cSctpStatReassembledUsrMessages, cSctpAssocRemAddressRTO=cSctpAssocRemAddressRTO, cSctpAssocEntry=cSctpAssocEntry, cSctpAssocHeartBeatTimer=cSctpAssocHeartBeatTimer, cSctpAborteds=cSctpAborteds, cSctpAssocRemPrimaryAddress=cSctpAssocRemPrimaryAddress, cSctpScalars=cSctpScalars, cSctpLookupRemIPAddrTable=cSctpLookupRemIPAddrTable, cSctpAssocRemAddressMaxPathRtx=cSctpAssocRemAddressMaxPathRtx, cSctpInverseGroup=cSctpInverseGroup, cSctpStatSentSCTPPacks=cSctpStatSentSCTPPacks, cSctpAssocLocalAddressIP=cSctpAssocLocalAddressIP, cSctpStatSentOrderChunks=cSctpStatSentOrderChunks, cSctpLookupLocalPortTable=cSctpLookupLocalPortTable, cSctpAssocT1expireds=cSctpAssocT1expireds, cSctpGeneralVariablesGroup=cSctpGeneralVariablesGroup, cSctpAssocRemAddressIP=cSctpAssocRemAddressIP, cSctpCompliances=cSctpCompliances, cSctpAssocT2expireds=cSctpAssocT2expireds, cSctpAssocInStreams=cSctpAssocInStreams, cSctpAssocOutStreams=cSctpAssocOutStreams, cSctpAssocLocalAddressIPType=cSctpAssocLocalAddressIPType, cSctpRtoAlgorithm=cSctpRtoAlgorithm, cSctpAssocId=cSctpAssocId, cSctpStateStatGroup=cSctpStateStatGroup, cSctpStatRecSCTPPacks=cSctpStatRecSCTPPacks, cSctpStatRecUnorderChunks=cSctpStatRecUnorderChunks, cSctpStatRecCtrlChunks=cSctpStatRecCtrlChunks, cSctpTables=cSctpTables)
