#
# PySNMP MIB module CXFLT-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXFLT-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
cxFltIp, = mibBuilder.importSymbols("CXProduct-SMI", "cxFltIp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Unsigned32, Counter64, Gauge32, Integer32, ObjectIdentity, NotificationType, Bits, IpAddress, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Unsigned32", "Counter64", "Gauge32", "Integer32", "ObjectIdentity", "NotificationType", "Bits", "IpAddress", "ModuleIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxFltIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1), )
if mibBuilder.loadTexts: cxFltIpAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpAddrTable.setDescription("The Ip Frame Filtering and Forwarding (FF) Address Table (shortcut: fltiptbl) allows you to enable/disable routing and to select forwarding priorities for specific IP addresses. The table has a maximum of 32 entries. Table entries take effect only after a warm start (sysmgt restart=1). A packet's addressing information is analyzed and compared with the entry in the FF table and the routing module filters it or forwards it with the specified priority. If there is no FF information for the given address, it will be forwarded with normal priority. Using the FF functionality, you can restrict the amount of IP traffic being routed or you can prioritize the traffic according to urgency.")
cxFltIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1), ).setIndexNames((0, "CXFLT-IP-MIB", "cxFltIpIndex"))
if mibBuilder.loadTexts: cxFltIpAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpAddrEntry.setDescription('Provides filtering/forwarding information for a specific IP address.')
cxFltIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpIndex.setDescription('Indexes the table entries. This number provides access to all the filtering/forwarding information for a given source address and its associated destination address. Range of Values: 1 - 65535 Default Value: None Configuration Changed: Administrative')
cxFltIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpSrcAddr.setDescription("Identifies the source IP address used for filtering/forwarding. This address corresponds to a destination address in 'cxFltIpDstAddr'. CxFltIpParameter determines whether data is filtered or forwarded from the source address to the destination address. Range of Values: 4 integers, each from 0 to 225 Default Value: None Configuration Changed: Administrative")
cxFltIpSrcNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpSrcNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpSrcNetMask.setDescription('Identifies the subnet mask associated with the source IP address. The mask determines which part of the IP address identifies to the network and which part identifies the host. Range of Values: 4 integers, with the parts identifying the network set to 255 and the parts identifying the host set to 0. Default Value: None Configuration Changed: Administrative')
cxFltIpDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpDstAddr.setDescription('Identifies the destination IP address. This address corresponds to a source address in cxFltIpSrcAddr. CxFltIpParameter determines whether data is filtered or forwarded from the source address to this destination address. Range of Values: 4 integers, each from 0 to 255 Default Value: None Configuration Changed: Administrative')
cxFltIpDstNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpDstNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpDstNetMask.setDescription('Identifies the subnet mask associated with the source IP address. The mask determines which part of the IP address identifies to the network and which part identifies the host. Range of Values: 4 integers, with the parts identifying the network set to 255 and the parts identifying the host set to 0. Default Value: None Configuration Changed: Administrative')
cxFltIpParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2), ("priority-low", 3), ("priority-high", 4))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpParameter.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpParameter.setDescription('Identifies the parameter which provides filtering/forwarding action and priority processing for each address in the FF table. Options: discard(1): Do not forward the data. forward(2): Forward the data. priority-low(3): Forward with a low priority (Frame Relay only.) priority-high(4): Forward with a high priority (Frame Relay only.) Default Value: discard (1) Configuration Changed: Administrative')
cxFltIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpRowStatus.setDescription("Allows you to control the status of the table entries. If you change this value to 1 (invalid), the corresponding table entry will be deleted when you restart and save the configuration by issuing the command 'sysmgt restart=1'. Options: invalid (1): Row is flagged. After next reset the values will be disabled and the row will be deleted from the table. valid (2): Values are enabled. Default Value: (2) Configuration changed: Administrative")
cxFltIpProtType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpProtType.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpProtType.setDescription('Determines the Protocol ID type that will be filtered or prioritized. Range of Values: 0 to 255 Default Value: 0 Configuration Changed: Administrative ')
cxFltIpProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFltIpProtPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cxFltIpProtPortNum.setDescription('Determines the Application Protocol to be prioritized/filtered. If the value of cxFltIpProtType is 6 (for TCP) or 17 (for UDP) then this value becomes effective. Range of Values: 0 to 65,535 Default Value: 0 Configuration Changed: Administrative')
mibBuilder.exportSymbols("CXFLT-IP-MIB", cxFltIpAddrTable=cxFltIpAddrTable, cxFltIpSrcAddr=cxFltIpSrcAddr, cxFltIpProtType=cxFltIpProtType, cxFltIpProtPortNum=cxFltIpProtPortNum, cxFltIpRowStatus=cxFltIpRowStatus, cxFltIpDstAddr=cxFltIpDstAddr, cxFltIpAddrEntry=cxFltIpAddrEntry, cxFltIpDstNetMask=cxFltIpDstNetMask, cxFltIpParameter=cxFltIpParameter, cxFltIpSrcNetMask=cxFltIpSrcNetMask, cxFltIpIndex=cxFltIpIndex)
