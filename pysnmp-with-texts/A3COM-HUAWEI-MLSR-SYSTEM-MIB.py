#
# PySNMP MIB module A3COM-HUAWEI-MLSR-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-MLSR-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
mlsr, router = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "mlsr", "router")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, IpAddress, Bits, NotificationType, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ObjectIdentity, ModuleIdentity, Unsigned32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Bits", "NotificationType", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class HwFlashStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("busy", 1), ("available", 2))

class HwFlashEreaseStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("hwFlhInOperating", 1), ("hwFlhOpSuccess", 2), ("hwFlhOpFailure", 3), ("hwFlhReadOnly", 4), ("hwFlhOpenFailure", 5), ("hwBufferAllocationFailure", 6), ("hwNoOpAfterLastPowered", 7))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

routerGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1))
attr = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1))
basis = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 1))
version = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('mandatory')
if mibBuilder.loadTexts: version.setDescription('The version of the software of system .')
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 2))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3))
logcontroller = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logcontroller.setStatus('mandatory')
if mibBuilder.loadTexts: logcontroller.setDescription('The label of log status that is open or close. enable(1) indicates to open;disable(2) indicates to close.')
loghostTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2), )
if mibBuilder.loadTexts: loghostTable.setStatus('mandatory')
if mibBuilder.loadTexts: loghostTable.setDescription('A list of entries of host recieving log.')
loghostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-MLSR-SYSTEM-MIB", "loghostaddress"))
if mibBuilder.loadTexts: loghostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: loghostEntry.setDescription('Address and level of host receiving log ')
loghostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loghostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: loghostIndex.setDescription('The index of host that receives logs.')
loghostaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loghostaddress.setStatus('mandatory')
if mibBuilder.loadTexts: loghostaddress.setDescription('The address of host that receives logs.')
loghostport = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loghostport.setStatus('mandatory')
if mibBuilder.loadTexts: loghostport.setDescription('The port of host that receives logs.')
loghostseverity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg", 1), ("alert", 2), ("crit", 3), ("err", 4), ("warning", 5), ("notice", 6), ("info", 7), ("debug", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghostseverity.setStatus('mandatory')
if mibBuilder.loadTexts: loghostseverity.setDescription('The severity indicates the level of log that is sended to host .')
loghostlanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chinese", 1), ("english", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghostlanguage.setStatus('mandatory')
if mibBuilder.loadTexts: loghostlanguage.setDescription('The log in which language is incidated by loglanguage .')
loghostfacility = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("kern", 1), ("user", 2), ("mail", 3), ("daemon", 4), ("auth", 5), ("syslog", 6), ("lpr", 7), ("news", 8), ("uucp", 9), ("cron", 10), ("authpriv", 11), ("ftp", 12), ("local0", 17), ("local1", 18), ("local2", 19), ("local3", 20), ("local4", 21), ("local5", 22), ("local6", 23), ("local7", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghostfacility.setStatus('mandatory')
if mibBuilder.loadTexts: loghostfacility.setDescription('The log that send to host is stored in the facility indicated logfacility .')
loghostaccess = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghostaccess.setStatus('mandatory')
if mibBuilder.loadTexts: loghostaccess.setDescription('The variable is the command who perform that netmanager get the saving log information at router.')
loghoststatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loghoststatus.setStatus('mandatory')
if mibBuilder.loadTexts: loghoststatus.setDescription('The status of the entry.')
logfilterTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 3), )
if mibBuilder.loadTexts: logfilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: logfilterTable.setDescription('A list of entries of filter filter log.')
logfilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-MLSR-SYSTEM-MIB", "logfilterIndex"), (0, "A3COM-HUAWEI-MLSR-SYSTEM-MIB", "logdevfacility"))
if mibBuilder.loadTexts: logfilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logfilterEntry.setDescription('Address and level of filter filter log ')
logfilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logfilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: logfilterIndex.setDescription('The index of host that receives logs.')
logdevfacility = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logdevfacility.setStatus('mandatory')
if mibBuilder.loadTexts: logdevfacility.setDescription('Filter name.')
logfilterstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logfilterstatus.setStatus('mandatory')
if mibBuilder.loadTexts: logfilterstatus.setDescription('The status of the entry.')
vrp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 1, 1, 4))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2))
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: moduleTable.setDescription('Possible values of indices are 1..moduleMaxmodules')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-MLSR-SYSTEM-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: moduleEntry.setDescription('Possible values of indices are 1..stackMaxChassis, 1..chassisMaxModules and 1..moduleMaxmodules')
moduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: moduleIndex.setDescription('Module number in the module.')
moduleSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSlotNum.setDescription('Slot number in the module.')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 277, 278, 281))).clone(namedValues=NamedValues(("unavailable", 1), ("as", 2), ("ss", 3), ("bi", 4), ("e12", 5), ("e14", 6), ("fe1", 7), ("e1", 8), ("fe2", 9), ("vi2", 11), ("vi4", 12), ("vi30", 13), ("s1b", 14), ("sa2", 15), ("as16", 16), ("new8as", 17), ("lsa", 18), ("fxs2", 19), ("fxo2", 20), ("em2", 21), ("fxs4", 22), ("fxo4", 23), ("em4", 24), ("sab", 25), ("e1vi", 26), ("am12", 27), ("am6", 28), ("ndec", 29), ("newsa2", 30), ("aux", 31), ("console", 32), ("sic-wan", 33), ("sic-1fe", 34), ("sic-1sa", 35), ("sic-3as", 36), ("sic-1e1", 37), ("sic-1t1", 38), ("sic-1bu", 39), ("sic-2bu", 40), ("sic-1bs", 41), ("sic-2bs", 42), ("sic-1am", 43), ("sic-2am", 44), ("sic-1em", 45), ("sic-2em", 46), ("sic-1fxs", 47), ("sic-2fxs", 48), ("sic-1fxo", 49), ("sic-2fxo", 50), ("fcm6", 51), ("sa8", 52), ("t11", 53), ("t12", 54), ("t14", 55), ("t1vi", 56), ("fcm4", 57), ("fcm2", 58), ("rtb21ce3", 59), ("ame6", 60), ("ame12", 61), ("e11-f", 65), ("e12-f", 66), ("e14-f", 67), ("t11-f", 68), ("t12-f", 69), ("t14-f", 70), ("e11-f-17", 71), ("t11-f-17", 72), ("rtb21ct3", 73), ("atmadsl1", 74), ("atmadsl2", 75), ("atm155m", 76), ("ase8", 77), ("ase16", 78), ("sae4", 79), ("sae2", 80), ("atmshdsl1", 90), ("atmshdsl2", 91), ("atmshdsl4", 92), ("atm25m", 93), ("atme3", 94), ("atmt3", 95), ("xdsl-fec", 96), ("xdsl-adsl", 97), ("xdsl-gshdsl", 98), ("xdsl-bri", 99), ("xdsl-scc", 100), ("ge1", 101), ("pos155m", 102), ("cpos", 103), ("fe1op", 104), ("sae8", 105), ("atm155m-mm", 106), ("atm155m-sm", 107), ("atm155m-sml", 108), ("fe1op-sfx", 109), ("fe1op-mfx", 110), ("cpos-t1", 111), ("ge1-op", 112), ("ge2-op", 113), ("ge2", 114), ("fix-1wan", 115), ("fix-1sae", 116), ("cavium", 117), ("sic-1Eth", 118), ("atm1ADSLI", 119), ("atm2ADSLI", 120), ("fix-e11", 121), ("fix-t11", 122), ("e18-75", 123), ("e18-120", 124), ("t18", 125), ("sic-1vifxs", 126), ("sic-1vifxo", 127), ("sic-2vifxs", 128), ("sic-2vifxo", 129), ("xdsl-fec-new", 130), ("xdsl-sa", 131), ("bs4", 132), ("ima-8e175", 133), ("ima-8e1120", 134), ("ima-4e175", 135), ("ima-4e1120", 136), ("ima-8t1", 137), ("ima-4t1", 138), ("sic-1t1f", 139), ("sic-1e1f", 140), ("fe4", 149), ("atm1shdsl4wire", 151), ("atmIma4shdsl", 152), ("ls4", 153), ("ls8", 154), ("ls16", 155), ("sic-adls2plus-isdn", 156), ("sic-adls2plus-pots", 157), ("ft3", 158), ("ce32", 159), ("bsv2", 160), ("bsv4", 161), ("rpu", 162), ("erpu", 163), ("ssl", 164), ("nsa", 165), ("fe18-75", 220), ("fe18-120", 221), ("ft18", 222), ("cf-card", 223), ("bsv2-v2", 224), ("e1vi1-v2", 225), ("e1vi2", 226), ("t1vi1-v2", 227), ("t1vi2", 228), ("osm", 229), ("sd707", 230), ("dm-epri", 231), ("dm-tpri", 232), ("erpu-h", 233), ("sic-2e1-f", 277), ("sic-1e1-f-v2", 278), ("oneatm-oc3", 281)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleType.setStatus('mandatory')
if mibBuilder.loadTexts: moduleType.setDescription('The product identification of the module.')
moduleFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFirstPort.setStatus('mandatory')
if mibBuilder.loadTexts: moduleFirstPort.setDescription('The portIndex of the first port on the module.')
moduleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: moduleNumberOfPorts.setDescription('The number of ports on the module.')
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVersion.setStatus('obsolete')
if mibBuilder.loadTexts: moduleVersion.setDescription('Hardware version number for this module. First version is 0, second is 1, and so on.')
moduleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSwVersion.setDescription('Software version number for this module.')
moduleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: moduleHwVersion.setDescription('Hardware version number for this module.')
hwFlashMan = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 3))
hwFlhTotalSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhTotalSize.setStatus('mandatory')
if mibBuilder.loadTexts: hwFlhTotalSize.setDescription('Total size of the Flash device.')
hwFlhUnusedSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhUnusedSize.setStatus('mandatory')
if mibBuilder.loadTexts: hwFlhUnusedSize.setDescription('Free space within a Flash.')
hwFlhEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhEraseTime.setStatus('mandatory')
if mibBuilder.loadTexts: hwFlhEraseTime.setDescription(' The last time of the flash device ereased. The value of the object is the time of sysUpTime. ')
hwFlhEraseStat = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 3, 4), HwFlashEreaseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhEraseStat.setStatus('mandatory')
if mibBuilder.loadTexts: hwFlhEraseStat.setDescription('The flash ereasing status.')
hwFlhCurStat = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 3, 5), HwFlashStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlhCurStat.setStatus('mandatory')
if mibBuilder.loadTexts: hwFlhCurStat.setDescription("The flash's current status.")
huaweiMixinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4))
hwModuleId = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: hwModuleId.setDescription('Unique ID string. Defaults to module ID number if available, otherwise empty.')
hwROMID = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwROMID.setStatus('mandatory')
if mibBuilder.loadTexts: hwROMID.setDescription('System description and version information.')
hwROMVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwROMVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hwROMVersion.setDescription('The version of systen ROM.')
hwROMSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwROMSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hwROMSysVersion.setDescription('The software version of system ROM')
hwRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: hwRAMSize.setDescription('The total size of system RAM.The unit is Byte.')
hwNVRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNVRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: hwNVRAMSize.setDescription(' The total size of system non-volatile memory. The unit is Byte. ')
hwNVRAMUsed = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNVRAMUsed.setStatus('mandatory')
if mibBuilder.loadTexts: hwNVRAMUsed.setDescription('The usage of system non-volatile memory. The unit is Byte.')
hwConfigReg = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("nvram", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConfigReg.setStatus('mandatory')
if mibBuilder.loadTexts: hwConfigReg.setDescription("This variable indicates the system register's value.")
hwConfigRegNextReboot = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConfigRegNextReboot.setStatus('mandatory')
if mibBuilder.loadTexts: hwConfigRegNextReboot.setDescription("This variable indicates the system register's value when next reboot.")
hwTFTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTFTPEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: hwTFTPEnabled.setDescription(' If yes, indicates that the device can be configed through tftp. If no indicates that the device cannt be configed through tftp. ')
hwMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryFree.setStatus('obsolete')
if mibBuilder.loadTexts: hwMemoryFree.setDescription(' The hwMemoryFree mib object is obsolete as of the variable hwMemoryFree in hwMemoryTable ')
hwCpuCostRatePer5Sec = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCpuCostRatePer5Sec.setStatus('mandatory')
if mibBuilder.loadTexts: hwCpuCostRatePer5Sec.setDescription('The system CPU average busy percentage in the last 5 seconds period.')
hwCpuCostRatePer5Minute = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCpuCostRatePer5Minute.setStatus('mandatory')
if mibBuilder.loadTexts: hwCpuCostRatePer5Minute.setDescription('The system CPU average busy percentage in the last 5 minutes period.')
hwCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCurrentTime.setStatus('mandatory')
if mibBuilder.loadTexts: hwCurrentTime.setDescription('The current time (in timetick: hundredths of a second)')
hwSysAirFlowTempIn = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("overcold", 1), ("overhot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysAirFlowTempIn.setStatus('mandatory')
if mibBuilder.loadTexts: hwSysAirFlowTempIn.setDescription('The current temperature of system.If the temperature is normal,ok(0) will return; If too cold,overcold(1) will return;If too hot,overhot(2) will return.')
hwBuzzerStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("silence", 1), ("tweet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuzzerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuzzerStatus.setDescription('The current status of buzzer. silence(1) indicates the status is silence;tweet(2) indicates the status is tweet.')
hwFansStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("running", 0), ("stopping", 1), ("nofan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFansStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwFansStatus.setDescription('The current status of system fan: running(0) indicates the fan is running;stopping(1) indicates the fan is stopping; nofan(2) indicates no fan in the device. ')
hwPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("nopower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwPowerStatus.setDescription('The current status of system power: 0:ok;1:fail;2:nopower. ')
hwSecondPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("nopower", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecondPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwSecondPowerStatus.setDescription('The current status of second system power: 0:ok;1:fail;2:nopower. ')
huaweiMemoryMan = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5))
hwUsedMemory = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUsedMemory.setStatus('mandatory')
if mibBuilder.loadTexts: hwUsedMemory.setDescription('The use size of the memory. The unit is Byte.')
hwFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFreeMemory.setStatus('mandatory')
if mibBuilder.loadTexts: hwFreeMemory.setDescription('The free size of the memory. The unit is Byte')
hwMemoryLargestFree = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryLargestFree.setStatus('mandatory')
if mibBuilder.loadTexts: hwMemoryLargestFree.setDescription(' The largest free size of the contiguous area in memory. The unit is byte. ')
hwBuffer32Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer32Size.setDescription('Contains the size of 32 byte buffers.')
hwBuffer32Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer32Total.setDescription('Contains the total number of 32 byte buffers.')
hwBuffer32Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer32Free.setDescription('Contains the number of free 32 byte buffers.')
hwBuffer32Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer32Used.setDescription('Contains the number of used 32 byte buffers.')
hwBuffer32DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer32DropCounts.setDescription('Contains the number of Drop 32 byte buffers.')
hwBuffer32FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer32FreeError2.setDescription('Contains the number of Free Error2 32 byte buffers.')
hwBuffer32FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer32FreeError3.setDescription('Contains the number of Free Error3 32 byte buffers.')
hwBuffer32CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer32CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer32CollectCounts.setDescription('Contains the number of Collect 32 byte buffers.')
hwBuffer64Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer64Size.setDescription('Contains the size of 64 byte buffers.')
hwBuffer64Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer64Total.setDescription('Contains the total number of 64 byte buffers.')
hwBuffer64Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer64Free.setDescription('Contains the number of free 64 byte buffers.')
hwBuffer64Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer64Used.setDescription('Contains the number of used 64 byte buffers.')
hwBuffer64DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer64DropCounts.setDescription('Contains the number of Drop 64 byte buffers.')
hwBuffer64FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer64FreeError2.setDescription('Contains the number of Free Error2 64 byte buffers.')
hwBuffer64FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer64FreeError3.setDescription('Contains the number of Free Error3 64 byte buffers.')
hwBuffer64CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer64CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer64CollectCounts.setDescription('Contains the number of Collect 64 byte buffers.')
hwBuffer128Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer128Size.setDescription('Contains the size of 128 byte buffers.')
hwBuffer128Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer128Total.setDescription('Contains the total number of 128 byte buffers.')
hwBuffer128Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer128Free.setDescription('Contains the number of free 128 byte buffers.')
hwBuffer128Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer128Used.setDescription('Contains the number of used 128 byte buffers.')
hwBuffer128DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer128DropCounts.setDescription('Contains the number of Drop 128 byte buffers.')
hwBuffer128FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer128FreeError2.setDescription('Contains the number of Free Error2 128 byte buffers.')
hwBuffer128FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer128FreeError3.setDescription('Contains the number of Free Error3 128 byte buffers.')
hwBuffer128CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer128CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer128CollectCounts.setDescription('Contains the number of Collect 128 byte buffers.')
hwBuffer256Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256Size.setDescription('Contains the size of 256 byte buffers.')
hwBuffer256Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256Total.setDescription('Contains the total number of 256 byte buffers.')
hwBuffer256Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256Free.setDescription('Contains the number of free 256 byte buffers.')
hwBuffer256Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256Used.setDescription('Contains the number of used 256 byte buffers.')
hwBuffer256DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256DropCounts.setDescription('Contains the number of Drop 256 byte buffers.')
hwBuffer256FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256FreeError2.setDescription('Contains the number of Free Error2 256 byte buffers.')
hwBuffer256FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256FreeError3.setDescription('Contains the number of Free Error3 256 byte buffers.')
hwBuffer256CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256CollectCounts.setDescription('Contains the number of Collect 256 byte buffers.')
hwBuffer512Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer512Size.setDescription('Contains the size of 512 byte buffers.')
hwBuffer512Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer512Total.setDescription('Contains the total number of 512 byte buffers.')
hwBuffer512Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer512Free.setDescription('Contains the number of free 512 byte buffers.')
hwBuffer512Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer512Used.setDescription('Contains the number of used 512 byte buffers.')
hwBuffer512DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer512DropCounts.setDescription('Contains the number of Drop 512 byte buffers.')
hwBuffer512FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer512FreeError2.setDescription('Contains the number of Free Error2 512 byte buffers.')
hwBuffer512FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer512FreeError3.setDescription('Contains the number of Free Error3 512 byte buffers.')
hwBuffer512CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer512CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer512CollectCounts.setDescription('Contains the number of Collect 512 byte buffers.')
hwBuffer1024Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer1024Size.setDescription('Contains the size of 1024 byte buffers.')
hwBuffer1024Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer1024Total.setDescription('Contains the total number of 1024 byte buffers.')
hwBuffer1024Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer1024Free.setDescription('Contains the number of free 1024 byte buffers.')
hwBuffer1024Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer1024Used.setDescription('Contains the number of used 1024 byte buffers.')
hwBuffer1024DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer1024DropCounts.setDescription('Contains the number of Drop 1024 byte buffers.')
hwBuffer1024FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer1024FreeError2.setDescription('Contains the number of Free Error2 1024 byte buffers.')
hwBuffer1024FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer1024FreeError3.setDescription('Contains the number of Free Error3 1024 byte buffers.')
hwBuffer1024CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer1024CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer1024CollectCounts.setDescription('Contains the number of Collect 1024 byte buffers.')
hwBuffer2048Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer2048Size.setDescription('Contains the size of 2048 byte buffers.')
hwBuffer2048Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer2048Total.setDescription('Contains the total number of 2048 byte buffers.')
hwBuffer2048Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer2048Free.setDescription('Contains the number of free 2048 byte buffers.')
hwBuffer2048Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer2048Used.setDescription('Contains the number of used 2048 byte buffers.')
hwBuffer2048DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer2048DropCounts.setDescription('Contains the number of Drop 2048 byte buffers.')
hwBuffer2048FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer2048FreeError2.setDescription('Contains the number of Free Error2 2048 byte buffers.')
hwBuffer2048FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer2048FreeError3.setDescription('Contains the number of Free Error3 2048 byte buffers.')
hwBuffer2048CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer2048CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer2048CollectCounts.setDescription('Contains the number of Collect 2048 byte buffers.')
hwBuffer4096Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer4096Size.setDescription('Contains the size of 4096 byte buffers.')
hwBuffer4096Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer4096Total.setDescription('Contains the total number of 4096 byte buffers.')
hwBuffer4096Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer4096Free.setDescription('Contains the number of free 4096 byte buffers.')
hwBuffer4096Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer4096Used.setDescription('Contains the number of used 4096 byte buffers.')
hwBuffer4096DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer4096DropCounts.setDescription('Contains the number of Drop 4096 byte buffers.')
hwBuffer4096FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer4096FreeError2.setDescription('Contains the number of Free Error2 4096 byte buffers.')
hwBuffer4096FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer4096FreeError3.setDescription('Contains the number of Free Error3 4096 byte buffers.')
hwBuffer4096CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer4096CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer4096CollectCounts.setDescription('Contains the number of Collect 4096 byte buffers.')
hwBuffer8192Size = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192Size.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer8192Size.setDescription('Contains the size of 8192 byte buffers.')
hwBuffer8192Total = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192Total.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer8192Total.setDescription('Contains the total number of 8192 byte buffers.')
hwBuffer8192Free = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192Free.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer8192Free.setDescription('Contains the number of free 8192 byte buffers.')
hwBuffer8192Used = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192Used.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer8192Used.setDescription('Contains the number of used 8192 byte buffers.')
hwBuffer8192DropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192DropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer8192DropCounts.setDescription('Contains the number of Drop 8192 byte buffers.')
hwBuffer8192FreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192FreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer8192FreeError2.setDescription('Contains the number of Free Error2 8192 byte buffers.')
hwBuffer8192FreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192FreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer8192FreeError3.setDescription('Contains the number of Free Error3 8192 byte buffers.')
hwBuffer8192CollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer8192CollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer8192CollectCounts.setDescription('Contains the number of Collect 8192 byte buffers.')
hwBuffer45KSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KSize.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer45KSize.setDescription('Contains the size of 45K byte buffers.')
hwBuffer45KTotal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KTotal.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer45KTotal.setDescription('Contains the total number of 45K byte buffers.')
hwBuffer45KFree = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KFree.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer45KFree.setDescription('Contains the number of free 45K byte buffers.')
hwBuffer45KUsed = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KUsed.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer45KUsed.setDescription('Contains the number of used 45K byte buffers.')
hwBuffer45KDropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KDropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer45KDropCounts.setDescription('Contains the number of Drop 45K byte buffers.')
hwBuffer45KFreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KFreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer45KFreeError2.setDescription('Contains the number of Free Error2 45K byte buffers.')
hwBuffer45KFreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KFreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer45KFreeError3.setDescription('Contains the number of Free Error3 45K byte buffers.')
hwBuffer45KCollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer45KCollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer45KCollectCounts.setDescription('Contains the number of Collect 45K byte buffers.')
hwBuffer256KSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KSize.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256KSize.setDescription('Contains the size of 256K byte buffers.')
hwBuffer256KTotal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KTotal.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256KTotal.setDescription('Contains the total number of 256K byte buffers.')
hwBuffer256KFree = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KFree.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256KFree.setDescription('Contains the number of free 256K byte buffers.')
hwBuffer256KUsed = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KUsed.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256KUsed.setDescription('Contains the number of used 256K byte buffers.')
hwBuffer256KDropCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KDropCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256KDropCounts.setDescription('Contains the number of Drop 256K byte buffers.')
hwBuffer256KFreeError2 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KFreeError2.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256KFreeError2.setDescription('Contains the number of Free Error2 256K byte buffers.')
hwBuffer256KFreeError3 = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KFreeError3.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256KFreeError3.setDescription('Contains the number of Free Error3 256K byte buffers.')
hwBuffer256KCollectCounts = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBuffer256KCollectCounts.setStatus('mandatory')
if mibBuilder.loadTexts: hwBuffer256KCollectCounts.setDescription('Contains the number of Collect 256K byte buffers.')
hwMemoryMallocFail = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryMallocFail.setStatus('mandatory')
if mibBuilder.loadTexts: hwMemoryMallocFail.setDescription('The times of memory allocation failures.')
hwMemoryMallocNoMem = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 5, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryMallocNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: hwMemoryMallocNoMem.setDescription('The times of memory allocation failures due to no free memory.')
hwConfigFile = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 6))
hwRunCfgChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRunCfgChangedTime.setStatus('mandatory')
if mibBuilder.loadTexts: hwRunCfgChangedTime.setDescription(' This object indicates the SysUpTime at which the running cofiguration was last changed. When the running configuration is changed but not saved, the value of hwRunCfgChangedTime is greater than hwRunCfgSavedTime. ')
hwRunCfgSavedTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRunCfgSavedTime.setStatus('mandatory')
if mibBuilder.loadTexts: hwRunCfgSavedTime.setDescription(' This object indicates the SysUpTime at which the running cofiguration was last saved. When the running configuration is changed but not saved, the value of hwRunCfgChangedTime is greater than hwRunCfgSavedTime. ')
hwStartCfgChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 6, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStartCfgChangedTime.setStatus('mandatory')
if mibBuilder.loadTexts: hwStartCfgChangedTime.setDescription(' The time of SysUpTime at which the startup configuration was last written. ')
hwNetConfigName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNetConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: hwNetConfigName.setDescription('Network configuration file name.')
hwHostConfigName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 2, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwHostConfigName.setStatus('obsolete')
if mibBuilder.loadTexts: hwHostConfigName.setDescription('Host configuration file name.')
hwmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 33, 6))
hwmRouterSerialNO = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 33, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmRouterSerialNO.setStatus('mandatory')
if mibBuilder.loadTexts: hwmRouterSerialNO.setDescription("The router's unique identification.")
hwmWhyReboot = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 33, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmWhyReboot.setStatus('mandatory')
if mibBuilder.loadTexts: hwmWhyReboot.setDescription(" Give the reason of the system's reboot. If the system has been reboot, the value of which is null. ")
hwmHostName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 33, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmHostName.setStatus('mandatory')
if mibBuilder.loadTexts: hwmHostName.setDescription(" An name for this system. By convention, this is the node's fully-qualified domain name. ")
hwmHostHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 33, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmHostHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hwmHostHwVersion.setDescription('The haredware version of the router.')
mibBuilder.exportSymbols("A3COM-HUAWEI-MLSR-SYSTEM-MIB", hwBuffer45KFreeError2=hwBuffer45KFreeError2, hwBuffer45KDropCounts=hwBuffer45KDropCounts, moduleSwVersion=moduleSwVersion, hwCpuCostRatePer5Minute=hwCpuCostRatePer5Minute, hwROMID=hwROMID, hwBuffer4096Total=hwBuffer4096Total, basis=basis, log=log, hwBuffer4096DropCounts=hwBuffer4096DropCounts, hwBuffer1024Free=hwBuffer1024Free, hwBuffer2048Free=hwBuffer2048Free, hwBuffer64Size=hwBuffer64Size, hwBuffer1024FreeError3=hwBuffer1024FreeError3, hwBuffer2048Total=hwBuffer2048Total, logdevfacility=logdevfacility, hwBuzzerStatus=hwBuzzerStatus, hwSysAirFlowTempIn=hwSysAirFlowTempIn, loghostTable=loghostTable, hwBuffer512FreeError3=hwBuffer512FreeError3, hwBuffer64FreeError3=hwBuffer64FreeError3, loghostEntry=loghostEntry, hwBuffer64Used=hwBuffer64Used, hwBuffer256FreeError3=hwBuffer256FreeError3, hwBuffer512DropCounts=hwBuffer512DropCounts, hwFreeMemory=hwFreeMemory, hwCpuCostRatePer5Sec=hwCpuCostRatePer5Sec, HwFlashEreaseStatus=HwFlashEreaseStatus, hwBuffer2048Size=hwBuffer2048Size, hwBuffer512Total=hwBuffer512Total, version=version, hwFlhUnusedSize=hwFlhUnusedSize, hwMemoryFree=hwMemoryFree, huaweiMemoryMan=huaweiMemoryMan, hwBuffer8192Total=hwBuffer8192Total, hwTFTPEnabled=hwTFTPEnabled, logfilterIndex=logfilterIndex, hwBuffer4096Size=hwBuffer4096Size, hwBuffer8192CollectCounts=hwBuffer8192CollectCounts, hwBuffer1024Used=hwBuffer1024Used, moduleFirstPort=moduleFirstPort, hwBuffer4096Free=hwBuffer4096Free, logcontroller=logcontroller, hwBuffer512CollectCounts=hwBuffer512CollectCounts, hwBuffer256KTotal=hwBuffer256KTotal, hwBuffer8192Size=hwBuffer8192Size, hwRunCfgChangedTime=hwRunCfgChangedTime, loghostaddress=loghostaddress, hwSecondPowerStatus=hwSecondPowerStatus, hwPowerStatus=hwPowerStatus, hwBuffer256KCollectCounts=hwBuffer256KCollectCounts, hwROMSysVersion=hwROMSysVersion, hwBuffer256KSize=hwBuffer256KSize, hwFlhTotalSize=hwFlhTotalSize, hwRAMSize=hwRAMSize, hwBuffer256KFreeError3=hwBuffer256KFreeError3, hwBuffer32Total=hwBuffer32Total, hwStartCfgChangedTime=hwStartCfgChangedTime, hwBuffer2048CollectCounts=hwBuffer2048CollectCounts, hwNetConfigName=hwNetConfigName, RowStatus=RowStatus, hwBuffer64Total=hwBuffer64Total, hwBuffer32FreeError2=hwBuffer32FreeError2, hwBuffer2048Used=hwBuffer2048Used, hwBuffer8192FreeError2=hwBuffer8192FreeError2, hwMemoryMallocFail=hwMemoryMallocFail, hwMemoryMallocNoMem=hwMemoryMallocNoMem, hwBuffer128FreeError3=hwBuffer128FreeError3, hwBuffer128FreeError2=hwBuffer128FreeError2, hwBuffer8192DropCounts=hwBuffer8192DropCounts, hwBuffer1024Size=hwBuffer1024Size, hwNVRAMSize=hwNVRAMSize, hwBuffer8192Free=hwBuffer8192Free, hwFlhEraseStat=hwFlhEraseStat, hwBuffer2048DropCounts=hwBuffer2048DropCounts, hwBuffer8192FreeError3=hwBuffer8192FreeError3, hwBuffer256KUsed=hwBuffer256KUsed, hwBuffer64DropCounts=hwBuffer64DropCounts, moduleSlotNum=moduleSlotNum, hwConfigReg=hwConfigReg, hwBuffer45KFreeError3=hwBuffer45KFreeError3, hwFlashMan=hwFlashMan, hwBuffer256KFreeError2=hwBuffer256KFreeError2, hwmHostName=hwmHostName, vrp=vrp, huaweiMixinfo=huaweiMixinfo, hwBuffer64FreeError2=hwBuffer64FreeError2, hwModuleId=hwModuleId, hwBuffer32DropCounts=hwBuffer32DropCounts, hwBuffer4096CollectCounts=hwBuffer4096CollectCounts, hwConfigFile=hwConfigFile, routerGeneral=routerGeneral, hwBuffer512Used=hwBuffer512Used, hwBuffer128DropCounts=hwBuffer128DropCounts, hwFlhEraseTime=hwFlhEraseTime, hwConfigRegNextReboot=hwConfigRegNextReboot, hwmWhyReboot=hwmWhyReboot, hwBuffer128Used=hwBuffer128Used, hwBuffer32Free=hwBuffer32Free, hwUsedMemory=hwUsedMemory, hwBuffer1024FreeError2=hwBuffer1024FreeError2, hwBuffer1024Total=hwBuffer1024Total, logfilterstatus=logfilterstatus, hwBuffer64Free=hwBuffer64Free, hwBuffer45KCollectCounts=hwBuffer45KCollectCounts, hwBuffer8192Used=hwBuffer8192Used, moduleVersion=moduleVersion, hwBuffer64CollectCounts=hwBuffer64CollectCounts, loghostlanguage=loghostlanguage, moduleHwVersion=moduleHwVersion, hwBuffer45KSize=hwBuffer45KSize, hwBuffer32Used=hwBuffer32Used, moduleNumberOfPorts=moduleNumberOfPorts, hwBuffer4096FreeError2=hwBuffer4096FreeError2, hwBuffer32CollectCounts=hwBuffer32CollectCounts, trap=trap, hwBuffer1024DropCounts=hwBuffer1024DropCounts, moduleTable=moduleTable, attr=attr, loghostseverity=loghostseverity, logfilterEntry=logfilterEntry, hwBuffer256FreeError2=hwBuffer256FreeError2, hwBuffer256CollectCounts=hwBuffer256CollectCounts, hwBuffer45KFree=hwBuffer45KFree, hwCurrentTime=hwCurrentTime, hwBuffer256DropCounts=hwBuffer256DropCounts, hwBuffer128Size=hwBuffer128Size, hwBuffer1024CollectCounts=hwBuffer1024CollectCounts, HwFlashStatus=HwFlashStatus, hwBuffer32Size=hwBuffer32Size, hwBuffer2048FreeError3=hwBuffer2048FreeError3, hwBuffer256Size=hwBuffer256Size, moduleIndex=moduleIndex, loghostport=loghostport, hwNVRAMUsed=hwNVRAMUsed, logfilterTable=logfilterTable, hwmSystem=hwmSystem, hwBuffer256Used=hwBuffer256Used, module=module, hwBuffer32FreeError3=hwBuffer32FreeError3, hwBuffer4096Used=hwBuffer4096Used, hwBuffer128Free=hwBuffer128Free, hwHostConfigName=hwHostConfigName, hwBuffer128CollectCounts=hwBuffer128CollectCounts, hwBuffer45KTotal=hwBuffer45KTotal, loghoststatus=loghoststatus, moduleType=moduleType, hwBuffer512FreeError2=hwBuffer512FreeError2, hwBuffer512Size=hwBuffer512Size, hwBuffer128Total=hwBuffer128Total, moduleEntry=moduleEntry, hwBuffer512Free=hwBuffer512Free, hwMemoryLargestFree=hwMemoryLargestFree, hwRunCfgSavedTime=hwRunCfgSavedTime, hwmHostHwVersion=hwmHostHwVersion, hwROMVersion=hwROMVersion, hwBuffer256Free=hwBuffer256Free, hwBuffer4096FreeError3=hwBuffer4096FreeError3, loghostIndex=loghostIndex, hwBuffer45KUsed=hwBuffer45KUsed, hwBuffer256Total=hwBuffer256Total, hwBuffer256KFree=hwBuffer256KFree, hwFansStatus=hwFansStatus, hwBuffer2048FreeError2=hwBuffer2048FreeError2, hwmRouterSerialNO=hwmRouterSerialNO, hwBuffer256KDropCounts=hwBuffer256KDropCounts, hwFlhCurStat=hwFlhCurStat, loghostfacility=loghostfacility, loghostaccess=loghostaccess)
