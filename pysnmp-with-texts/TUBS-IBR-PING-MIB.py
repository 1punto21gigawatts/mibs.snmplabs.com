#
# PySNMP MIB module TUBS-IBR-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TUBS-IBR-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, ObjectIdentity, IpAddress, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, TimeTicks, Bits, iso, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "TimeTicks", "Bits", "iso", "MibIdentifier", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibr, = mibBuilder.importSymbols("TUBS-SMI", "ibr")
pingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1575, 1, 8))
pingMIB.setRevisions(('2000-07-07 00:00', '2000-03-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pingMIB.setRevisionsDescriptions(('Added scalar group and notification.', 'The initial revision of this module.',))
if mibBuilder.loadTexts: pingMIB.setLastUpdated('200007070000Z')
if mibBuilder.loadTexts: pingMIB.setOrganization('TU Braunschweig')
if mibBuilder.loadTexts: pingMIB.setContactInfo('Frank Strauss TU Braunschweig Bueltenweg 74/75 38106 Braunschweig Germany Tel: +49 531 391 3266 Fax: +49 531 391 5936 E-mail: strauss@ibr.cs.tu-bs.de')
if mibBuilder.loadTexts: pingMIB.setDescription('Experimental MIB module for JAX code generator tests.')
pingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 8, 0))
pingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1))
pingTable = MibTable((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1, 1), )
if mibBuilder.loadTexts: pingTable.setStatus('current')
if mibBuilder.loadTexts: pingTable.setDescription('A list of ping destinations and their round trip times.')
pingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1, 1, 1), ).setIndexNames((0, "TUBS-IBR-PING-MIB", "pingIndex"))
if mibBuilder.loadTexts: pingEntry.setStatus('current')
if mibBuilder.loadTexts: pingEntry.setDescription('An entry containing a ping destinations and its round trip time.')
pingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pingIndex.setStatus('current')
if mibBuilder.loadTexts: pingIndex.setDescription('A unique value identifying the ping entry.')
pingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pingAddress.setStatus('current')
if mibBuilder.loadTexts: pingAddress.setDescription('The destination IP address for the ping entry. Writing to an instance of this object with an unused pingIndex creates a new pingTable entry.')
pingRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1, 1, 1, 3), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pingRtt.setStatus('current')
if mibBuilder.loadTexts: pingRtt.setDescription('The measured round trip time for the ping entry. The value zero denotes a ping target that did not respond (yet).')
pingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1, 2))
pingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1, 2, 1), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTimeout.setStatus('current')
if mibBuilder.loadTexts: pingTimeout.setDescription('Maximum time to wait for a response.')
pingAvgRtt = MibScalar((1, 3, 6, 1, 4, 1, 1575, 1, 8, 1, 2, 2), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pingAvgRtt.setStatus('current')
if mibBuilder.loadTexts: pingAvgRtt.setDescription('The average round trip time for all ping entries.')
pingNoResponse = NotificationType((1, 3, 6, 1, 4, 1, 1575, 1, 8, 0, 1)).setObjects(("TUBS-IBR-PING-MIB", "pingRtt"), ("TUBS-IBR-PING-MIB", "pingTimeout"))
if mibBuilder.loadTexts: pingNoResponse.setStatus('current')
if mibBuilder.loadTexts: pingNoResponse.setDescription('This notification is generated whenever a ping target did not reply within the current timeout. The pingAddress objects contains the target address and the pingTimeout objects contains the timeout value in milli seconds.')
mibBuilder.exportSymbols("TUBS-IBR-PING-MIB", pingIndex=pingIndex, pingAvgRtt=pingAvgRtt, pingTable=pingTable, pingEntry=pingEntry, pingStatistics=pingStatistics, pingAddress=pingAddress, pingNoResponse=pingNoResponse, pingTimeout=pingTimeout, pingNotifications=pingNotifications, pingRtt=pingRtt, PYSNMP_MODULE_ID=pingMIB, pingMIB=pingMIB, pingObjects=pingObjects)
