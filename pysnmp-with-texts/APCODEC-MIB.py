#
# PySNMP MIB module APCODEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APCODEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
ApPercentage, = mibBuilder.importSymbols("ACMEPACKET-TC", "ApPercentage")
apSigRealmStatsEntry, = mibBuilder.importSymbols("APSYSMGMT-MIB", "apSigRealmStatsEntry")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Counter64, MibIdentifier, Counter32, TimeTicks, Integer32, ModuleIdentity, Bits, Unsigned32, NotificationType, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Counter64", "MibIdentifier", "Counter32", "TimeTicks", "Integer32", "ModuleIdentity", "Bits", "Unsigned32", "NotificationType", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
apCodecModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 7))
apCodecModule.setRevisions(('2012-07-16 00:00', '2012-06-22 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apCodecModule.setRevisionsDescriptions(('Updated contact information.', ' adding global transcoding stats',))
if mibBuilder.loadTexts: apCodecModule.setLastUpdated('201207160000Z')
if mibBuilder.loadTexts: apCodecModule.setOrganization('Acme Packet, Inc')
if mibBuilder.loadTexts: apCodecModule.setContactInfo(' Customer Service Postal: Acme Packet, Inc 100 Crosby Drive Bedford, MA 01730 US Tel: 1-781-328-4400 E-mail: support@acmepacket.com')
if mibBuilder.loadTexts: apCodecModule.setDescription('The codec and transcoding MIB for Acme Packet')
apCodecMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1))
apCodecRealmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1), )
if mibBuilder.loadTexts: apCodecRealmStatsTable.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsTable.setDescription('The table of codec statistics per-realm. The table provides additional statistics augmenting the apSigRealmStatsTable.')
apCodecRealmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1), )
apSigRealmStatsEntry.registerAugmentions(("APCODEC-MIB", "apCodecRealmStatsEntry"))
apCodecRealmStatsEntry.setIndexNames(*apSigRealmStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apCodecRealmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsEntry.setDescription('Additional per-realm statistics for codecs')
apCodecRealmCountOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountOther.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountOther.setDescription('The count of SDP media streams received in the realm which negotiated to a codec not defined in this table.')
apCodecRealmCountPCMU = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountPCMU.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountPCMU.setDescription('The count of SDP media streams received in the realm which negotiated to the PCMU codec.')
apCodecRealmCountPCMA = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountPCMA.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountPCMA.setDescription('The count of SDP media streams received in the realm which negotiated to the PCMA codec.')
apCodecRealmCountG722 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG722.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG722.setDescription('The count of SDP media streams received in the realm which negotiated to the G722 codec.')
apCodecRealmCountG723 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG723.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG723.setDescription('The count of SDP media streams received in the realm which negotiated to the G723 codec.')
apCodecRealmCountG726_16 = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 6), Counter32()).setLabel("apCodecRealmCountG726-16").setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG726_16.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG726_16.setDescription('The count of SDP media streams received in the realm which negotiated to the G726-16 codec.')
apCodecRealmCountG726_24 = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 7), Counter32()).setLabel("apCodecRealmCountG726-24").setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG726_24.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG726_24.setDescription('The count of SDP media streams received in the realm which negotiated to the G726-24 codec.')
apCodecRealmCountG726_32 = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 8), Counter32()).setLabel("apCodecRealmCountG726-32").setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG726_32.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG726_32.setDescription('The count of SDP media streams received in the realm which negotiated to the G726-32 codec.')
apCodecRealmCountG726_40 = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 9), Counter32()).setLabel("apCodecRealmCountG726-40").setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG726_40.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG726_40.setDescription('The count of SDP media streams received in the realm which negotiated to the G726-40 codec.')
apCodecRealmCountG728 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG728.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG728.setDescription('The count of SDP media streams received in the realm which negotiated to the G728 codec.')
apCodecRealmCountG729 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountG729.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountG729.setDescription('The count of SDP media streams received in the realm which negotiated to the G729 codec.')
apCodecRealmCountGSM = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountGSM.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountGSM.setDescription('The count of SDP media streams received in the realm which negotiated to the GSM codec.')
apCodecRealmCountILBC = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountILBC.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountILBC.setDescription('The count of SDP media streams received in the realm which negotiated to the iLBC codec.')
apCodecRealmCountAMR = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountAMR.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountAMR.setDescription('The count of SDP media streams received in the realm which negotiated to the AMR codec.')
apCodecRealmCountEVRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountEVRC.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountEVRC.setDescription('The count of SDP media streams received in the realm which negotiated to the EVRC codec.')
apCodecRealmCountH261 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountH261.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountH261.setDescription('The count of SDP media streams received in the realm which negotiated to the H261 codec.')
apCodecRealmCountH263 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountH263.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountH263.setDescription('The count of SDP media streams received in the realm which negotiated to the H263 codec.')
apCodecRealmCountT38 = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmCountT38.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmCountT38.setDescription('The count of SDP media streams received in the realm which negotiated to the T.38 codec.')
apCodecTranscodingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2))
apCodecTranscodingRealmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1), )
if mibBuilder.loadTexts: apCodecTranscodingRealmStatsTable.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingRealmStatsTable.setDescription('The table of transcoding statistics per-realm. The table provides additional statistics augmenting the apSigRealmStatsTable.')
apCodecTranscodingRealmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1, 1), )
apSigRealmStatsEntry.registerAugmentions(("APCODEC-MIB", "apCodecTranscodingRealmStatsEntry"))
apCodecTranscodingRealmStatsEntry.setIndexNames(*apSigRealmStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apCodecTranscodingRealmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingRealmStatsEntry.setDescription('Additional per-realm statistics for transcoding')
apCodecRealmSessionsTransparent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmSessionsTransparent.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmSessionsTransparent.setDescription('Number of sessions in the realm that did not use any DSP resources for transcoding or transrating.')
apCodecRealmSessionsTransrated = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmSessionsTransrated.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmSessionsTransrated.setDescription('Number of sessions in the realm that had a common codec but used DSP resources to modify packetizaton rate.')
apCodecRealmSessionsTranscoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecRealmSessionsTranscoded.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmSessionsTranscoded.setDescription('Number of sessions in the realm that had used DSP resources to transcode between codecs.')
class ApCodecDigitTypes(TextualConvention, Integer32):
    description = 'Digit types in codec transcoding'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("none", 1), ("inband", 2), ("rfc2833", 3), ("noneDual", 4), ("inbandTrans", 5), ("inbandDual", 6), ("rfc2833Trans", 7), ("rfc2833Dual", 8))

apCodecTranscodingResourceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2))
apCodecTranscodingResourcesTotal = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingResourcesTotal.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingResourcesTotal.setDescription('Total number of transcoding resources.')
apCodecTranscodingResourcesCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingResourcesCurrent.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingResourcesCurrent.setDescription('Number of transcoding resources currently in-use.')
apCodecTranscodingResourcesHigh = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingResourcesHigh.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingResourcesHigh.setDescription('The highest number of transcoding resources in-use in the past.')
apCodecTranscodingInUsePercentCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 4), ApPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingInUsePercentCurrent.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingInUsePercentCurrent.setDescription('The percentage of transcoding resources currently in-use. The algorithm considers actual resources the current codec transcoding consumed.')
apCodecTranscodingInUsePercentHigh = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 2, 5), ApPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecTranscodingInUsePercentHigh.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingInUsePercentHigh.setDescription('The highest percentage number of transcoding resources in-use in the past.')
apCodecTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 3), )
if mibBuilder.loadTexts: apCodecTable.setStatus('current')
if mibBuilder.loadTexts: apCodecTable.setDescription('The table of supported codecs.')
apCodecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 3, 1), ).setIndexNames((0, "APCODEC-MIB", "apCodecIndex"))
if mibBuilder.loadTexts: apCodecEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecEntry.setDescription('supported codec.')
apCodecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecIndex.setDescription('An integer for the sole purpose of indexing the codec entry.')
apCodecName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecName.setStatus('current')
if mibBuilder.loadTexts: apCodecName.setDescription('The codec name.')
apCodecPairStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4), )
if mibBuilder.loadTexts: apCodecPairStatsTable.setStatus('current')
if mibBuilder.loadTexts: apCodecPairStatsTable.setDescription('The table of codec-pairs being supported.')
apCodecPairStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1), ).setIndexNames((0, "APCODEC-MIB", "apCodecPairAIndex"), (0, "APCODEC-MIB", "apCodecPairBIndex"), (0, "APCODEC-MIB", "apCodecPairAPValue"), (0, "APCODEC-MIB", "apCodecPairBPValue"), (0, "APCODEC-MIB", "apCodecPairADigitType"), (0, "APCODEC-MIB", "apCodecPairBDigitType"))
if mibBuilder.loadTexts: apCodecPairStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apCodecPairStatsEntry.setDescription('statistics per transcoding codec pair. In a codec pair, the transcoding is two directional. To avoid duplication, the rule is that the end point A is the one with smaller or equal apCodecIndex.')
apCodecPairAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: apCodecPairAIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecPairAIndex.setDescription('The index of the first codec in the pair.')
apCodecPairBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: apCodecPairBIndex.setStatus('current')
if mibBuilder.loadTexts: apCodecPairBIndex.setDescription('The index of the second codec in the pair.')
apCodecPairAPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecPairAPValue.setStatus('current')
if mibBuilder.loadTexts: apCodecPairAPValue.setDescription('The p value in the end point A. A value of zero indicates the value is not provided.')
apCodecPairBPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: apCodecPairBPValue.setStatus('current')
if mibBuilder.loadTexts: apCodecPairBPValue.setDescription('The p value in the end point B. A value of zero indicates the value is not provided.')
apCodecPairADigitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 5), ApCodecDigitTypes())
if mibBuilder.loadTexts: apCodecPairADigitType.setStatus('current')
if mibBuilder.loadTexts: apCodecPairADigitType.setDescription('The digit type index in the end point A.')
apCodecPairBDigitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 6), ApCodecDigitTypes())
if mibBuilder.loadTexts: apCodecPairBDigitType.setStatus('current')
if mibBuilder.loadTexts: apCodecPairBDigitType.setDescription('The digit type index in the end point B.')
apCodecPairTranscodingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecPairTranscodingCurrent.setStatus('current')
if mibBuilder.loadTexts: apCodecPairTranscodingCurrent.setDescription('The number of transcodings for this codec-pair current in process.')
apCodecPairTranscodingHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 7, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCodecPairTranscodingHigh.setStatus('current')
if mibBuilder.loadTexts: apCodecPairTranscodingHigh.setDescription('The highest number of transcodings for this codec-pair in the past.')
apCodecNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 3))
apCodecNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 4))
apCodecNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 4, 0))
apCodecConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5))
apCodecCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 1))
apCodecGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2))
apCodecNotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 3))
apCodecRealmStatsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 1)).setObjects(("APCODEC-MIB", "apCodecRealmCountOther"), ("APCODEC-MIB", "apCodecRealmCountPCMU"), ("APCODEC-MIB", "apCodecRealmCountPCMA"), ("APCODEC-MIB", "apCodecRealmCountG722"), ("APCODEC-MIB", "apCodecRealmCountG723"), ("APCODEC-MIB", "apCodecRealmCountG726_16"), ("APCODEC-MIB", "apCodecRealmCountG726_24"), ("APCODEC-MIB", "apCodecRealmCountG726_32"), ("APCODEC-MIB", "apCodecRealmCountG726_40"), ("APCODEC-MIB", "apCodecRealmCountG728"), ("APCODEC-MIB", "apCodecRealmCountG729"), ("APCODEC-MIB", "apCodecRealmCountGSM"), ("APCODEC-MIB", "apCodecRealmCountILBC"), ("APCODEC-MIB", "apCodecRealmCountH261"), ("APCODEC-MIB", "apCodecRealmCountH263"), ("APCODEC-MIB", "apCodecRealmCountT38"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup = apCodecRealmStatsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup.setDescription('A collection of objects providing realm codec statistics')
apCodecMediaProcessingObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 2)).setObjects(("APCODEC-MIB", "apCodecRealmSessionsTransparent"), ("APCODEC-MIB", "apCodecRealmSessionsTransrated"), ("APCODEC-MIB", "apCodecRealmSessionsTranscoded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecMediaProcessingObjectsGroup = apCodecMediaProcessingObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apCodecMediaProcessingObjectsGroup.setDescription('A collection of objects providing realm transcoding statistics')
apCodecRealmStatsObjectsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 3)).setObjects(("APCODEC-MIB", "apCodecRealmCountAMR"), ("APCODEC-MIB", "apCodecRealmCountEVRC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecRealmStatsObjectsGroup2 = apCodecRealmStatsObjectsGroup2.setStatus('current')
if mibBuilder.loadTexts: apCodecRealmStatsObjectsGroup2.setDescription('A collection of objects providing additional realm codec statistics')
apCodecTranscodingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 7, 5, 2, 4)).setObjects(("APCODEC-MIB", "apCodecTranscodingResourcesTotal"), ("APCODEC-MIB", "apCodecTranscodingResourcesCurrent"), ("APCODEC-MIB", "apCodecTranscodingResourcesHigh"), ("APCODEC-MIB", "apCodecTranscodingInUsePercentCurrent"), ("APCODEC-MIB", "apCodecTranscodingInUsePercentHigh"), ("APCODEC-MIB", "apCodecName"), ("APCODEC-MIB", "apCodecPairTranscodingCurrent"), ("APCODEC-MIB", "apCodecPairTranscodingHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apCodecTranscodingStatsGroup = apCodecTranscodingStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apCodecTranscodingStatsGroup.setDescription('A collection of objects providing additional codec statistics')
mibBuilder.exportSymbols("APCODEC-MIB", apCodecPairStatsEntry=apCodecPairStatsEntry, apCodecRealmStatsObjectsGroup=apCodecRealmStatsObjectsGroup, apCodecRealmCountG726_40=apCodecRealmCountG726_40, ApCodecDigitTypes=ApCodecDigitTypes, apCodecPairBPValue=apCodecPairBPValue, apCodecTranscodingStatsGroup=apCodecTranscodingStatsGroup, apCodecRealmCountAMR=apCodecRealmCountAMR, apCodecEntry=apCodecEntry, apCodecConformance=apCodecConformance, apCodecRealmStatsTable=apCodecRealmStatsTable, PYSNMP_MODULE_ID=apCodecModule, apCodecMIBObjects=apCodecMIBObjects, apCodecRealmSessionsTransrated=apCodecRealmSessionsTransrated, apCodecPairADigitType=apCodecPairADigitType, apCodecRealmCountG729=apCodecRealmCountG729, apCodecRealmCountG726_24=apCodecRealmCountG726_24, apCodecTranscodingInUsePercentHigh=apCodecTranscodingInUsePercentHigh, apCodecTranscodingResourcesTotal=apCodecTranscodingResourcesTotal, apCodecTable=apCodecTable, apCodecRealmCountPCMA=apCodecRealmCountPCMA, apCodecRealmCountG726_32=apCodecRealmCountG726_32, apCodecRealmCountILBC=apCodecRealmCountILBC, apCodecPairAPValue=apCodecPairAPValue, apCodecPairBDigitType=apCodecPairBDigitType, apCodecGroups=apCodecGroups, apCodecNotificationObjects=apCodecNotificationObjects, apCodecTranscodingInUsePercentCurrent=apCodecTranscodingInUsePercentCurrent, apCodecNotificationPrefix=apCodecNotificationPrefix, apCodecCompliances=apCodecCompliances, apCodecTranscodingRealmStatsTable=apCodecTranscodingRealmStatsTable, apCodecPairAIndex=apCodecPairAIndex, apCodecRealmCountGSM=apCodecRealmCountGSM, apCodecRealmSessionsTranscoded=apCodecRealmSessionsTranscoded, apCodecRealmCountOther=apCodecRealmCountOther, apCodecRealmCountH263=apCodecRealmCountH263, apCodecRealmCountG728=apCodecRealmCountG728, apCodecRealmCountG726_16=apCodecRealmCountG726_16, apCodecTranscodingMIBObjects=apCodecTranscodingMIBObjects, apCodecRealmCountH261=apCodecRealmCountH261, apCodecPairBIndex=apCodecPairBIndex, apCodecIndex=apCodecIndex, apCodecName=apCodecName, apCodecRealmCountEVRC=apCodecRealmCountEVRC, apCodecRealmCountG723=apCodecRealmCountG723, apCodecMediaProcessingObjectsGroup=apCodecMediaProcessingObjectsGroup, apCodecNotifications=apCodecNotifications, apCodecRealmSessionsTransparent=apCodecRealmSessionsTransparent, apCodecNotificationsGroups=apCodecNotificationsGroups, apCodecTranscodingResourcesHigh=apCodecTranscodingResourcesHigh, apCodecTranscodingResourcesCurrent=apCodecTranscodingResourcesCurrent, apCodecRealmStatsEntry=apCodecRealmStatsEntry, apCodecPairTranscodingHigh=apCodecPairTranscodingHigh, apCodecPairStatsTable=apCodecPairStatsTable, apCodecPairTranscodingCurrent=apCodecPairTranscodingCurrent, apCodecRealmStatsObjectsGroup2=apCodecRealmStatsObjectsGroup2, apCodecModule=apCodecModule, apCodecRealmCountPCMU=apCodecRealmCountPCMU, apCodecTranscodingResourceMIBObjects=apCodecTranscodingResourceMIBObjects, apCodecRealmCountT38=apCodecRealmCountT38, apCodecRealmCountG722=apCodecRealmCountG722, apCodecTranscodingRealmStatsEntry=apCodecTranscodingRealmStatsEntry)
