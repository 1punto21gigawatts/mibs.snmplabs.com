#
# PySNMP MIB module AdaptecArrayController-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AdaptecArrayController-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, NotificationType, Gauge32, Unsigned32, iso, Counter64, ObjectIdentity, NotificationType, TimeTicks, enterprises, MibIdentifier, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "NotificationType", "Gauge32", "Unsigned32", "iso", "Counter64", "ObjectIdentity", "NotificationType", "TimeTicks", "enterprises", "MibIdentifier", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3))
adaptecArrayController = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3, 5))
adaptecArrayControllerSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerSoftwareVersion.setDescription('Version information for the Adaptec Array Controller Software Suite.')
adaptecArrayControllerAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterNumber.setDescription('The Number of Adaptec Array Controllers present in the system.')
adaptecArrayControllerAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 3), )
if mibBuilder.loadTexts: adaptecArrayControllerAdapterTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterTable.setDescription('A list of Adaptec Array Controller entries. The number of entries is given by AdaptecArrayControllerAdapterNumber.')
adaptecArrayControllerContainerTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 4), )
if mibBuilder.loadTexts: adaptecArrayControllerContainerTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContainerTable.setDescription('A list of Adaptec Array Controller Container Entries. There will one entry in this table for each container on the host.')
adaptecArrayControllerDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 5), )
if mibBuilder.loadTexts: adaptecArrayControllerDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDeviceTable.setDescription('A list of devices that are attached to Adaptec Array Controllers that are connected to this host.')
adaptecArrayControllerContainerToDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 6), )
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceTable.setDescription('A table used to correlate physical devices to containers.')
adaptecArrayControllerEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 20), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTable.setDescription('A list of enclosures that are attached to Adaptec Array Controllers on this host.')
adaptecArrayControllerEnclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 21), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanTable.setDescription('A list of enclosure fans and their status.')
adaptecArrayControllerEnclosurePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 22), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyTable.setDescription('A list of enclosure power supplies and their status.')
adaptecArrayControllerEnclosureDoorLockTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 23), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockTable.setDescription('A list of enclosure door locks and their status.')
adaptecArrayControllerEnclosureTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 24), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorTable.setDescription('A list of enclosure temperature sensors and their status.')
adaptecArrayControllerEnclosureScsiIdTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 25), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdTable.setDescription('A list of enclosure SCSI Ids by slot.')
adaptecArrayControllerEnclosureDeviceInsertionTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 26), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionTable.setDescription('A list of enclosure device insertion counts by slot.')
adaptecArrayControllerEnclosureSlotStatusTable = MibTable((1, 3, 6, 1, 4, 1, 795, 3, 5, 27), )
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusTable.setDescription('A list of enclosure statuses by slot.')
adaptecArrayControllerAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerAdapterIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerAdapterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterEntry.setDescription('Descriptive and Status Information for an Adaptec Array Controller.')
adaptecArrayControllerAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterIndex.setDescription('A unique index into the AdaptecArrayControllerAdapterTable. This ranges between 1 and the value of AdaptecArrayControllerAdapterNumber.')
adaptecArrayControllerAdapterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterDescription.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterDescription.setDescription('The Adaptec Array Controller description for this adapter.')
adaptecArrayControllerAdapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterType.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterType.setDescription('The model name of this Adaptec Array Controller.')
adaptecArrayControllerAdapterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterVersion.setDescription('The hardware and software version string for this Adaptec Array Controller.')
adaptecArrayControllerAdapterChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterChannelCount.setDescription('The number of channels supported by this Adaptec Array Controller.')
adaptecArrayControllerAdapterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterStatus.setDescription('The status of the controller. This status reflects the status of all containers and devices connected to the controller.')
adaptecArrayControllerAdapterBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterBiosVersion.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterBiosVersion.setDescription('The BIOS software version.')
adaptecArrayControllerAdapterKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterKernelVersion.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterKernelVersion.setDescription('The kernel software version.')
adaptecArrayControllerAdapterMonitorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterMonitorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterMonitorVersion.setDescription('The monitor software version.')
adaptecArrayControllerAdapterHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterHardwareVersion.setDescription('The hardware version of the controller.')
adaptecArrayControllerAdapterTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterTotalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterTotalMemory.setDescription('The total amount of memory present in the controller expressed in bytes.')
adaptecArrayControllerAdapterProgramMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterProgramMemory.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterProgramMemory.setDescription('The total amount of program memory present in the controller expressed in bytes.')
adaptecArrayControllerAdapterBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerAdapterBufferMemory.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerAdapterBufferMemory.setDescription('The total amount of buffer memory present in the controller expressed in bytes.')
adaptecArrayControllerContainerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerContIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerContainerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContainerEntry.setDescription('Descriptive and status information for containers hosted by Adaptec Array Controller.')
adaptecArrayControllerContIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContIndex.setDescription('An internal index used to identify this container.')
adaptecArrayControllerContAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContAdapterIndex.setDescription('An index into the AdaptecArrayControllerAdapterTable that specified the AAC Controller to which this container belongs.')
adaptecArrayControllerContNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContNumber.setDescription('An AAC container ID.')
adaptecArrayControllerContSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContSize.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContSize.setDescription('The size of the container in megabytes.')
adaptecArrayControllerContMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContMountPoint.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContMountPoint.setDescription('A string representing drive letters and mount points for the container.')
adaptecArrayControllerContType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContType.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContType.setDescription('A string representing the container type.')
adaptecArrayControllerContUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContUsage.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContUsage.setDescription("A string representing the container's usage.")
adaptecArrayControllerContStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContStatus.setDescription('The current status of the container. If a container with a redundant container type is no longer redundant, its status will be marked as nonCritical. If the container is no longer on-line, its status will be marked as critical.')
adaptecArrayControllerContStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContStripeSize.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContStripeSize.setDescription('The stripe or chunk size of the container in bytes.')
adaptecArrayControllerDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerDevIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDeviceEntry.setDescription('Descriptive and status information for devices connected to Adaptec Array Controllers.')
adaptecArrayControllerDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevIndex.setDescription('An internally used identifier.')
adaptecArrayControllerDevAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevAdapterIndex.setDescription('An index into the AdaptecArrayControllerAdapterTable that specified the AAC Controller to which this container belongs.')
adaptecArrayControllerDevChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevChannelId.setDescription('The channel that the device is connected to.')
adaptecArrayControllerDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevId.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevId.setDescription('The Device ID.')
adaptecArrayControllerDevLogicalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevLogicalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevLogicalNumber.setDescription('The Logical Device ID.')
adaptecArrayControllerDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevType.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevType.setDescription('The Device Type.')
adaptecArrayControllerDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevVendor.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevVendor.setDescription('The Device Vendor.')
adaptecArrayControllerDevProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevProduct.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevProduct.setDescription('The Product Identifier.')
adaptecArrayControllerDevRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevRevision.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevRevision.setDescription('The Product Revision.')
adaptecArrayControllerDevBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevBlocks.setDescription('The Number of Blocks on the Device.')
adaptecArrayControllerDevBytesPerBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevBytesPerBlock.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevBytesPerBlock.setDescription('The Number of Bytes Per Block on the Device.')
adaptecArrayControllerDevUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevUsage.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevUsage.setDescription('The manner of usage by the Adaptec Array Controller.')
adaptecArrayControllerDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDevStatus.setDescription('The status of the device.')
adaptecArrayControllerContainerToDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerContainerToDeviceIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceEntry.setDescription('Each record of this type represents a row in a table that is used to list the physical devices that are used to make up a container. Each row includes an index into the container table to indicate the container that is being described, an index into the device table to show the device that is used by the container, and information about the size of the physical partition on the device.')
adaptecArrayControllerContainerToDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContainerToDeviceIndex.setDescription('A unique index into the adaptecArrayControllerContainerToDeviceTable that can be used to identify each row in the table.')
adaptecArrayControllerCDAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerCDAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerCDAdapterIndex.setDescription('An index into the adapterArrayControllerTable indicating the controller hosting the container being described.')
adaptecArrayControllerContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerContainerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerContainerIndex.setDescription('An index into the adaptecArrayControllerContainerEntry table indicating the container being described.')
adaptecArrayControllerDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerDeviceIndex.setDescription('An index into the AdaptecArrayControllerDeviceEntry table indicating the device on which a piece of the container resides.')
adaptecArrayControllerPartitionOffsetLSW = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerPartitionOffsetLSW.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerPartitionOffsetLSW.setDescription('The least significant 32 bits of the offset into the physical disk to the start of the partition that is used by the referenced container.')
adaptecArrayControllerPartitionOffsetMSW = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerPartitionOffsetMSW.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerPartitionOffsetMSW.setDescription('The most significant 32 bits of the offset into the physical disk to the start of the partition that is used by the referenced container.')
adaptecArrayControllerPartitionSizeLSW = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerPartitionSizeLSW.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerPartitionSizeLSW.setDescription('The least significant 32 bits of the size of partition on the device used by the referenced container.')
adaptecArrayControllerPartitionSizeMSW = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerPartitionSizeMSW.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerPartitionSizeMSW.setDescription('The most significant 32 bits of the size of partition on the device used by the referenced container.')
adaptecArrayControllerEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureEntry.setDescription('Descriptive and status information for enclosures connected to Adaptec Array Controllers.')
adaptecArrayControllerEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIndex.setDescription('Index into the Enclosure table.')
adaptecArrayControllerEnclosureAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureAdapterIndex.setDescription('An index into the AdaptecArrayControllerAdapterTable that specifies the AAC Controller to which this enclosure belongs.')
adaptecArrayControllerEnclosureProcessorId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureProcessorId.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureProcessorId.setDescription('The enclosure processor ID assigned on a per adapter basis.')
adaptecArrayControllerEnclosureType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("decFault", 3), ("saf-te", 4), ("ses", 5), ("aemi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureType.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureType.setDescription('Standard adhered to for this enclosure.')
adaptecArrayControllerEnclosureNumberFans = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberFans.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberFans.setDescription('Number of fans for this enclosure.')
adaptecArrayControllerEnclosureNumberPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberPowerSupplies.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberPowerSupplies.setDescription('Number of power supplies for this enclosure.')
adaptecArrayControllerEnclosureNumberSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberSlots.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberSlots.setDescription('Number of slots for this enclosure.')
adaptecArrayControllerEnclosureDoorLock = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLock.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLock.setDescription('Whether or not this enclosure has a host controllable door lock.')
adaptecArrayControllerEnclosureNumberTemperatureSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberTemperatureSensors.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureNumberTemperatureSensors.setDescription('Number of temperature sensors for this enclosure.')
adaptecArrayControllerEnclosureSpeaker = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSpeaker.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSpeaker.setDescription('Whether or not this enclosure has a speaker installed.')
adaptecArrayControllerEnclosureBootTimeDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureBootTimeDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureBootTimeDiagnostic.setDescription('Boot time diagnostic value for this enclosure.')
adaptecArrayControllerEnclosureVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureVendor.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureVendor.setDescription('Vendor (from SCSI Inquiry) for this enclosure.')
adaptecArrayControllerEnclosureProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureProduct.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureProduct.setDescription('Product (from SCSI Inquiry) for this enclosure.')
adaptecArrayControllerEnclosureRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureRevision.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureRevision.setDescription('Revision (from SCSI Inquiry) for this enclosure.')
adaptecArrayControllerEnclosureIdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIdLow.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIdLow.setDescription('Unique ID number for this enclosure (least significant bits) (from SCSI Inquiry).')
adaptecArrayControllerEnclosureIdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIdHigh.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureIdHigh.setDescription('Unique Id number for this enclosure (most significant bits) (from SCSI Inquiry).')
adaptecArrayControllerEnclosureStandardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureStandardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureStandardRevision.setDescription('Revision of standard adhered to for this enclosure (from SCSI Inquiry).')
adaptecArrayControllerEnclosurePowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerOnTime.setDescription('Total number of power on minutes for this enclosure.')
adaptecArrayControllerEnclosurePowerCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerCycles.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerCycles.setDescription('Total number of power cycles for this enclosure.')
adaptecArrayControllerEnclosureSpeakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSpeakerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSpeakerStatus.setDescription('Speaker status (on/off only) for this enclosure.')
adaptecArrayControllerEnclosureOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 20, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureOverTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureOverTemperature.setDescription('Indicates whether internal temperature for this enclosure exceeds normal.')
adaptecArrayControllerEnclosureFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 21, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureFanIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanEntry.setDescription('Status information for enclosure fans.')
adaptecArrayControllerEnclosureFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanIndex.setDescription('Index into the enclosure fan table.')
adaptecArrayControllerEnclosureFanEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanEnclosureIndex.setDescription('Index into the enclosure table specifying which enclosure contains this fan.')
adaptecArrayControllerEnclosureFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6), ("notInstalled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureFanStatus.setDescription('Status of this fan.')
adaptecArrayControllerEnclosurePowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 22, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosurePowerSupplyIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyEntry.setDescription('Status information for enclosure power supplies.')
adaptecArrayControllerEnclosurePowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyIndex.setDescription('Index into the enclosure power supply table.')
adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex.setDescription('Index into the enclosure table specifying which enclosure contains this power supply.')
adaptecArrayControllerEnclosurePowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("operationalAndOn", 2), ("operationalAndOff", 3), ("onAndMalfunctioning", 4), ("offAndMalfunctioning", 5), ("installed", 6), ("notInstalled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosurePowerSupplyStatus.setDescription('Status of this power supply.')
adaptecArrayControllerEnclosureDoorLockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureDoorLockIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockEntry.setDescription('Status information for enclosure door locks.')
adaptecArrayControllerEnclosureDoorLockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockIndex.setDescription('Index into the enclosure door lock table.')
adaptecArrayControllerEnclosureDoorLockEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockEnclosureIndex.setDescription('Index into the enclosure table specifying which enclosure contains this door lock.')
adaptecArrayControllerEnclosureDoorLockSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockSlot.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockSlot.setDescription('Specifies the slot number for this door lock.')
adaptecArrayControllerEnclosureDoorLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("locked", 2), ("unlocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDoorLockStatus.setDescription('Status of this door lock.')
adaptecArrayControllerEnclosureTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureTemperatureSensorIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorEntry.setDescription('Status information for enclosure temperature sensors.')
adaptecArrayControllerEnclosureTemperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorIndex.setDescription('Index into the enclosure temperature sensor table.')
adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex.setDescription('Index into the enclosure table specifying which enclosure contains this temperature sensor.')
adaptecArrayControllerEnclosureTemperatureSensorOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorOverTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorOverTemperature.setDescription('Specifies whether this temperature sensor has detected an over temperature condition.')
adaptecArrayControllerEnclosureTemperatureSensorDegrees = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorDegrees.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureTemperatureSensorDegrees.setDescription('Temperature registered by this sensor in degrees Fahrenheit.')
adaptecArrayControllerEnclosureScsiIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureScsiIdIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdEntry.setDescription('Scsi Id information for enclosure slots.')
adaptecArrayControllerEnclosureScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdIndex.setDescription('Index into the enclosure Scsi Id table.')
adaptecArrayControllerEnclosureScsiIdEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdEnclosureIndex.setDescription('Index into the enclosure table specifying which enclosure contains this slot.')
adaptecArrayControllerEnclosureScsiIdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdSlot.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiIdSlot.setDescription('Specifies the slot number for this Scsi Id.')
adaptecArrayControllerEnclosureChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureChannelId.setDescription('Channel Id of device in this slot.')
adaptecArrayControllerEnclosureScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureScsiId.setDescription('SCSI Id of device in this slot.')
adaptecArrayControllerEnclosureLunId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureLunId.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureLunId.setDescription('Logical Unit Id of device in this slot.')
adaptecArrayControllerEnclosureDeviceInsertionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureDeviceInsertionIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionEntry.setDescription('Count information for enclosure device insertions.')
adaptecArrayControllerEnclosureDeviceInsertionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionIndex.setDescription('Index into the enclosure device insertion lock table.')
adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex.setDescription('Index into the enclosure table specifying which enclosure contains this slot.')
adaptecArrayControllerEnclosureDeviceInsertionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionSlot.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertionSlot.setDescription('Specifies the slot number for this device insertion count.')
adaptecArrayControllerEnclosureDeviceInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertions.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureDeviceInsertions.setDescription('Number of device insertions for this slot.')
adaptecArrayControllerEnclosureSlotStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1), ).setIndexNames((0, "AdaptecArrayController-MIB", "adaptecArrayControllerEnclosureSlotStatusIndex"))
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusEntry.setDescription('Status information for enclosure slots.')
adaptecArrayControllerEnclosureSlotStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusIndex.setDescription('Index into the enclosure slot status table.')
adaptecArrayControllerEnclosureSlotStatusEnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusEnclosureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusEnclosureIndex.setDescription('Index into the enclosure table specifying which enclosure contains this slot.')
adaptecArrayControllerEnclosureSlotStatusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusSlot.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatusSlot.setDescription('Specifies the slot number for this slot.')
adaptecArrayControllerEnclosureSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 3, 5, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adaptecArrayControllerEnclosureSlotStatus.setDescription('Status of this slot.')
adaptecArrayControllerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000))
aacControllerId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 1), DisplayString())
if mibBuilder.loadTexts: aacControllerId.setStatus('mandatory')
if mibBuilder.loadTexts: aacControllerId.setDescription('Controller ID for this trap.')
aacContainerId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 2), Integer32())
if mibBuilder.loadTexts: aacContainerId.setStatus('mandatory')
if mibBuilder.loadTexts: aacContainerId.setDescription('Container ID for this trap.')
aacBusId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 3), Integer32())
if mibBuilder.loadTexts: aacBusId.setStatus('mandatory')
if mibBuilder.loadTexts: aacBusId.setDescription('Bus ID for device referred to by this trap.')
aacScsiId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 4), Integer32())
if mibBuilder.loadTexts: aacScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: aacScsiId.setDescription('SCSI ID for device referred to by this trap.')
aacLunId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 5), Integer32())
if mibBuilder.loadTexts: aacLunId.setStatus('mandatory')
if mibBuilder.loadTexts: aacLunId.setDescription('SCSI LUN ID for device referred to by this trap.')
aacEnclosureProcessorId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 6), Integer32())
if mibBuilder.loadTexts: aacEnclosureProcessorId.setStatus('mandatory')
if mibBuilder.loadTexts: aacEnclosureProcessorId.setDescription('Enclosure processor ID for enclosure referred to by this trap.')
aacComponentUnitId = MibScalar((1, 3, 6, 1, 4, 1, 795, 3, 5, 9000, 7), Integer32())
if mibBuilder.loadTexts: aacComponentUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: aacComponentUnitId.setDescription('Component unit ID for enclosure referred to by this trap.')
aacDriveLetterChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,1)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacDriveLetterChange.setDescription('A Drive Letter Changed on controller $1 for container $2.')
aacFailoverChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,2)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
if mibBuilder.loadTexts: aacFailoverChange.setDescription('A change in failover assignments occured on controller $1.')
aacContainerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,3)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacContainerStateChange.setDescription('A container changed its state on controller $1. Container : $2.')
aacFileSystemChange = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,4)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacFileSystemChange.setDescription('A file system change has occured on container $2 on controller $1.')
aacGeneralContainerFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,6)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacGeneralContainerFailure.setDescription('An unknown error occured on container $2 on adapter $1.')
aacMirrorNotMirroring = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,7)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacMirrorNotMirroring.setDescription('The container $2 on controller $1 is no longer in the mirroring state.')
aacMirrorFailureNoSpace = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,8)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacMirrorFailureNoSpace.setDescription('A failover operation for controller $1 container $2 failed because there was not enough space available on the failover device.')
aacMirrorFailureNoUnmirror = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,9)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacMirrorFailureNoUnmirror.setDescription('The container $2 on controller $1 could not be unmirrored.')
aacMirrorFailoverStarted = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,10)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacMirrorFailoverStarted.setDescription('A mirror failover operation started on controller $1 for container $2.')
aacMirrorFailoverFailed = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,11)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacMirrorFailoverFailed.setDescription('A failover operation on controller $1 failed for container $2.')
aacMirrorNoFailoverAssigned = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,12)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacMirrorNoFailoverAssigned.setDescription('There is no failover device assigned to container $2 on controller $1.')
aacMirrorDriveFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,13)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacMirrorDriveFailure.setDescription('A drive that was part of the mirror set (container) $2 failed. This occurred on controller $1.')
aacRaidRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,14)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacRaidRebuildStart.setDescription('A rebuild operation started on controller $1 for container $2.')
aacRaidRebuildRestart = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,15)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacRaidRebuildRestart.setDescription('A rebuild operation was restarted on controller $1 for container $2.')
aacRaidDriveFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,16)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacRaidDriveFailure.setDescription('A drive that was part of the RAID set (container) $2 failed. This occurred on controller $1.')
aacRaidNoFailover = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,17)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacRaidNoFailover.setDescription('There is no failover device assigned to container $2 on controller $1.')
aacRaidNoSpace = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,18)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacRaidNoSpace.setDescription('A failover operation for controller $1 container $2 failed because there is not enough space available on the failover device.')
aacSnapshotContainerAlmostFull = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,19)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacSnapshotContainerAlmostFull.setDescription('The snapshot container $2 on controller $1 is almost full.')
aacSnapshotContainerFull = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,20)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacSnapshotContainerFull.setDescription('The snapshot container $2 on controller $1 is full.')
aacRaidRebuildComplete = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,21)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacRaidRebuildComplete.setDescription('The rebuild operation on controller $1 for container $2 has completed.')
aacDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,22)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
if mibBuilder.loadTexts: aacDeviceFailure.setDescription('A device has failed. Controller $1. Bus $2. Id $3 Lun $4.')
aacControllerResume = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,23)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
if mibBuilder.loadTexts: aacControllerResume.setDescription('The controller $1 resumed normal I/O operations.')
aacInterfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,24))
if mibBuilder.loadTexts: aacInterfaceUp.setDescription('The AAC management interface is up.')
aacBatteryReconditionRequired = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,25)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
if mibBuilder.loadTexts: aacBatteryReconditionRequired.setDescription('The controller $1 requires battery reconditioning.')
aacEnclosureGeneralError = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,26)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
if mibBuilder.loadTexts: aacEnclosureGeneralError.setDescription('An enclosure connected to controller $1 has reported an error.')
aacEnclosureFanError = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,27)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
if mibBuilder.loadTexts: aacEnclosureFanError.setDescription('An enclosure connected to controller $1 has reported a fan failure.')
aacEnclosurePowerSupplyError = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,28)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
if mibBuilder.loadTexts: aacEnclosurePowerSupplyError.setDescription('An enclosure connected to controller $1 has reported a power supply failure.')
aacEnclosureTempAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,29)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
if mibBuilder.loadTexts: aacEnclosureTempAbnormal.setDescription('An enclosure connected to controller $1 has reported an abnormal temperature reading.')
aacEnclosureTempOver = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,30)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacEnclosureProcessorId"), ("AdaptecArrayController-MIB", "aacComponentUnitId"))
if mibBuilder.loadTexts: aacEnclosureTempOver.setDescription('An enclosure connected to controller $1 has reported a temperature reading above the user threshold.')
aacBatteryDead = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,31)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
if mibBuilder.loadTexts: aacBatteryDead.setDescription('The battery connected to controller $1 is dead.')
aacBatteryImproving = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,32)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
if mibBuilder.loadTexts: aacBatteryImproving.setDescription('The battery connected to controller $1 is improving.')
aacBatteryDegrading = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,33)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
if mibBuilder.loadTexts: aacBatteryDegrading.setDescription('The battery connected to controller $1 has lost charge.')
aacBatteryGood = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,34)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
if mibBuilder.loadTexts: aacBatteryGood.setDescription('The controller $1 reports that its battery is good.')
aacControllerPaused = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,35)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"))
if mibBuilder.loadTexts: aacControllerPaused.setDescription('The controller $1 has been paused.')
aacContainerCreated = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,36)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacContainerCreated.setDescription('Container $2 has been created on controller $1.')
aacContainerDeleted = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,37)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacContainerId"))
if mibBuilder.loadTexts: aacContainerDeleted.setDescription('Container $2 has been deleted on controller $1.')
aacDeviceFailurePredictionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,38)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
if mibBuilder.loadTexts: aacDeviceFailurePredictionThresholdExceeded.setDescription('A device reported that its Failure Prediction Threshold had been exceeded. Controller $1. Bus $2. Id $3 Lun $4.')
aacDeviceFailurePredictionTest = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,39)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
if mibBuilder.loadTexts: aacDeviceFailurePredictionTest.setDescription('A Failure Prediction Threshold test occured. Controller $1. Bus $2. Id $3. Lun $4.')
aacDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,40)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
if mibBuilder.loadTexts: aacDeviceWarning.setDescription('A Device issued a warning. Controller $1. Bus $2. Id $3 Lun $4.')
aacDeviceTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,41)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
if mibBuilder.loadTexts: aacDeviceTemperatureWarning.setDescription('A Device issued a abnormal temperature warning. Controller $1. Bus $2. Id $3 Lun $4.')
aacDeviceDegradedWarning = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,42)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
if mibBuilder.loadTexts: aacDeviceDegradedWarning.setDescription('A device reported that its status is degraded. Controller $1. Bus $2. Id $3 Lun $4.')
aacDeviceFailurePredictionConfigurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 795, 3, 5) + (0,43)).setObjects(("AdaptecArrayController-MIB", "aacControllerId"), ("AdaptecArrayController-MIB", "aacBusId"), ("AdaptecArrayController-MIB", "aacScsiId"), ("AdaptecArrayController-MIB", "aacLunId"))
if mibBuilder.loadTexts: aacDeviceFailurePredictionConfigurationChanged.setDescription('The failure prediction configuration changed for a device. Controller $1. Bus $2. Id $3 Lun $4.')
mibBuilder.exportSymbols("AdaptecArrayController-MIB", adaptecArrayControllerCDAdapterIndex=adaptecArrayControllerCDAdapterIndex, aacMirrorFailureNoSpace=aacMirrorFailureNoSpace, adaptecArrayControllerContainerIndex=adaptecArrayControllerContainerIndex, adaptecArrayControllerEnclosureProcessorId=adaptecArrayControllerEnclosureProcessorId, aacMirrorFailureNoUnmirror=aacMirrorFailureNoUnmirror, adaptecArrayControllerEnclosureSlotStatusIndex=adaptecArrayControllerEnclosureSlotStatusIndex, adaptecArrayControllerEnclosureFanIndex=adaptecArrayControllerEnclosureFanIndex, adaptecArrayControllerEnclosurePowerSupplyStatus=adaptecArrayControllerEnclosurePowerSupplyStatus, adaptecArrayControllerContAdapterIndex=adaptecArrayControllerContAdapterIndex, adaptecArrayControllerEnclosureTable=adaptecArrayControllerEnclosureTable, adaptecArrayControllerEnclosureChannelId=adaptecArrayControllerEnclosureChannelId, adaptecArrayControllerAdapterChannelCount=adaptecArrayControllerAdapterChannelCount, adaptecArrayControllerEnclosurePowerSupplyTable=adaptecArrayControllerEnclosurePowerSupplyTable, adaptecArrayControllerAdapterDescription=adaptecArrayControllerAdapterDescription, adaptecArrayControllerContainerTable=adaptecArrayControllerContainerTable, adaptecArrayControllerDevId=adaptecArrayControllerDevId, adaptecArrayControllerPartitionOffsetMSW=adaptecArrayControllerPartitionOffsetMSW, aacEnclosureTempAbnormal=aacEnclosureTempAbnormal, adaptecArrayControllerEnclosureSlotStatusSlot=adaptecArrayControllerEnclosureSlotStatusSlot, adaptecArrayControllerContStatus=adaptecArrayControllerContStatus, adaptecArrayControllerEnclosureDoorLockTable=adaptecArrayControllerEnclosureDoorLockTable, adaptecArrayControllerDeviceEntry=adaptecArrayControllerDeviceEntry, aacSnapshotContainerAlmostFull=aacSnapshotContainerAlmostFull, aacMirrorNotMirroring=aacMirrorNotMirroring, adaptecArrayControllerDevIndex=adaptecArrayControllerDevIndex, adaptecArrayControllerEnclosureScsiIdTable=adaptecArrayControllerEnclosureScsiIdTable, adaptecArrayControllerEnclosurePowerOnTime=adaptecArrayControllerEnclosurePowerOnTime, aacEnclosureGeneralError=aacEnclosureGeneralError, adaptecArrayControllerEnclosurePowerSupplyIndex=adaptecArrayControllerEnclosurePowerSupplyIndex, adaptecArrayControllerEnclosureSlotStatusTable=adaptecArrayControllerEnclosureSlotStatusTable, adaptecArrayControllerEnclosureLunId=adaptecArrayControllerEnclosureLunId, aacMirrorNoFailoverAssigned=aacMirrorNoFailoverAssigned, adaptecArrayControllerEnclosureIndex=adaptecArrayControllerEnclosureIndex, adaptecArrayControllerContainerToDeviceTable=adaptecArrayControllerContainerToDeviceTable, aacLunId=aacLunId, adaptecArrayControllerPartitionSizeLSW=adaptecArrayControllerPartitionSizeLSW, aacRaidRebuildComplete=aacRaidRebuildComplete, adaptecArrayControllerContainerToDeviceEntry=adaptecArrayControllerContainerToDeviceEntry, adaptecArrayControllerContStripeSize=adaptecArrayControllerContStripeSize, adaptecArrayControllerEnclosureScsiIdSlot=adaptecArrayControllerEnclosureScsiIdSlot, adaptecArrayControllerEnclosureTemperatureSensorIndex=adaptecArrayControllerEnclosureTemperatureSensorIndex, adaptecArrayControllerEnclosureEntry=adaptecArrayControllerEnclosureEntry, adaptecArrayControllerEnclosureIdLow=adaptecArrayControllerEnclosureIdLow, aacBatteryReconditionRequired=aacBatteryReconditionRequired, aacFailoverChange=aacFailoverChange, aacEnclosureFanError=aacEnclosureFanError, adaptecArrayControllerEnclosureDoorLock=adaptecArrayControllerEnclosureDoorLock, adaptecArrayControllerEnclosureTemperatureSensorDegrees=adaptecArrayControllerEnclosureTemperatureSensorDegrees, aacEnclosureProcessorId=aacEnclosureProcessorId, aacMirrorFailoverStarted=aacMirrorFailoverStarted, adaptecArrayControllerDevStatus=adaptecArrayControllerDevStatus, adaptecArrayControllerEnclosureSpeaker=adaptecArrayControllerEnclosureSpeaker, adaptecArrayController=adaptecArrayController, adaptecArrayControllerTraps=adaptecArrayControllerTraps, adaptecArrayControllerDevUsage=adaptecArrayControllerDevUsage, adaptecArrayControllerEnclosureDeviceInsertions=adaptecArrayControllerEnclosureDeviceInsertions, aacContainerDeleted=aacContainerDeleted, adaptecArrayControllerContIndex=adaptecArrayControllerContIndex, aacContainerCreated=aacContainerCreated, adaptecArrayControllerAdapterEntry=adaptecArrayControllerAdapterEntry, adaptecArrayControllerEnclosureIdHigh=adaptecArrayControllerEnclosureIdHigh, adaptecArrayControllerEnclosureStandardRevision=adaptecArrayControllerEnclosureStandardRevision, aacDeviceFailurePredictionThresholdExceeded=aacDeviceFailurePredictionThresholdExceeded, adaptecArrayControllerAdapterIndex=adaptecArrayControllerAdapterIndex, adaptecArrayControllerEnclosurePowerCycles=adaptecArrayControllerEnclosurePowerCycles, adaptecArrayControllerEnclosureDoorLockStatus=adaptecArrayControllerEnclosureDoorLockStatus, adaptecArrayControllerEnclosureSlotStatus=adaptecArrayControllerEnclosureSlotStatus, aacControllerId=aacControllerId, adaptecArrayControllerEnclosureScsiIdEntry=adaptecArrayControllerEnclosureScsiIdEntry, adaptecArrayControllerDevLogicalNumber=adaptecArrayControllerDevLogicalNumber, adaptecArrayControllerEnclosureDeviceInsertionIndex=adaptecArrayControllerEnclosureDeviceInsertionIndex, aacMirrorDriveFailure=aacMirrorDriveFailure, aacControllerPaused=aacControllerPaused, adaptecArrayControllerDevProduct=adaptecArrayControllerDevProduct, adaptecArrayControllerAdapterType=adaptecArrayControllerAdapterType, adaptecArrayControllerPartitionOffsetLSW=adaptecArrayControllerPartitionOffsetLSW, adaptecArrayControllerAdapterHardwareVersion=adaptecArrayControllerAdapterHardwareVersion, adaptecArrayControllerContNumber=adaptecArrayControllerContNumber, aacGeneralContainerFailure=aacGeneralContainerFailure, aacInterfaceUp=aacInterfaceUp, aacBatteryDead=aacBatteryDead, adaptecArrayControllerDevRevision=adaptecArrayControllerDevRevision, adaptecArrayControllerEnclosureAdapterIndex=adaptecArrayControllerEnclosureAdapterIndex, adaptecArrayControllerEnclosureScsiIdIndex=adaptecArrayControllerEnclosureScsiIdIndex, aacBatteryDegrading=aacBatteryDegrading, adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex=adaptecArrayControllerEnclosurePowerSupplyEnclosureIndex, adaptecArrayControllerAdapterBiosVersion=adaptecArrayControllerAdapterBiosVersion, adaptecArrayControllerContType=adaptecArrayControllerContType, adaptecArrayControllerEnclosureFanEntry=adaptecArrayControllerEnclosureFanEntry, adaptecArrayControllerEnclosureDoorLockEntry=adaptecArrayControllerEnclosureDoorLockEntry, adaptecArrayControllerAdapterProgramMemory=adaptecArrayControllerAdapterProgramMemory, aacDriveLetterChange=aacDriveLetterChange, aacMirrorFailoverFailed=aacMirrorFailoverFailed, aacDeviceFailurePredictionConfigurationChanged=aacDeviceFailurePredictionConfigurationChanged, adaptecArrayControllerEnclosureScsiId=adaptecArrayControllerEnclosureScsiId, aacDeviceDegradedWarning=aacDeviceDegradedWarning, adaptecArrayControllerDevAdapterIndex=adaptecArrayControllerDevAdapterIndex, adaptecArrayControllerDevType=adaptecArrayControllerDevType, aacSnapshotContainerFull=aacSnapshotContainerFull, adaptecArrayControllerAdapterKernelVersion=adaptecArrayControllerAdapterKernelVersion, adaptecArrayControllerPartitionSizeMSW=adaptecArrayControllerPartitionSizeMSW, adaptecArrayControllerDevBytesPerBlock=adaptecArrayControllerDevBytesPerBlock, adaptecArrayControllerEnclosureSlotStatusEntry=adaptecArrayControllerEnclosureSlotStatusEntry, adaptecArrayControllerEnclosureSlotStatusEnclosureIndex=adaptecArrayControllerEnclosureSlotStatusEnclosureIndex, aacDeviceFailurePredictionTest=aacDeviceFailurePredictionTest, adaptecArrayControllerEnclosureScsiIdEnclosureIndex=adaptecArrayControllerEnclosureScsiIdEnclosureIndex, adaptecArrayControllerEnclosureDoorLockEnclosureIndex=adaptecArrayControllerEnclosureDoorLockEnclosureIndex, adaptecArrayControllerEnclosureFanEnclosureIndex=adaptecArrayControllerEnclosureFanEnclosureIndex, adaptecArrayControllerAdapterVersion=adaptecArrayControllerAdapterVersion, aacBatteryImproving=aacBatteryImproving, aacDeviceTemperatureWarning=aacDeviceTemperatureWarning, adaptecArrayControllerEnclosureDeviceInsertionTable=adaptecArrayControllerEnclosureDeviceInsertionTable, products=products, adaptecArrayControllerContMountPoint=adaptecArrayControllerContMountPoint, adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex=adaptecArrayControllerEnclosureTemperatureSensorEnclosureIndex, adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex=adaptecArrayControllerEnclosureDeviceInsertionEnclosureIndex, adaptecArrayControllerAdapterTotalMemory=adaptecArrayControllerAdapterTotalMemory, adaptecArrayControllerDevVendor=adaptecArrayControllerDevVendor, aacRaidNoFailover=aacRaidNoFailover, adaptecArrayControllerEnclosureTemperatureSensorOverTemperature=adaptecArrayControllerEnclosureTemperatureSensorOverTemperature, adaptecArrayControllerEnclosureVendor=adaptecArrayControllerEnclosureVendor, adaptecArrayControllerDeviceTable=adaptecArrayControllerDeviceTable, adaptecArrayControllerContainerEntry=adaptecArrayControllerContainerEntry, aacBusId=aacBusId, adaptecArrayControllerSoftwareVersion=adaptecArrayControllerSoftwareVersion, adaptecArrayControllerEnclosureNumberTemperatureSensors=adaptecArrayControllerEnclosureNumberTemperatureSensors, adaptecArrayControllerEnclosureProduct=adaptecArrayControllerEnclosureProduct, adaptecArrayControllerEnclosureDeviceInsertionEntry=adaptecArrayControllerEnclosureDeviceInsertionEntry, adaptecArrayControllerEnclosureTemperatureSensorTable=adaptecArrayControllerEnclosureTemperatureSensorTable, adaptecArrayControllerDevChannelId=adaptecArrayControllerDevChannelId, aacRaidRebuildStart=aacRaidRebuildStart, adaptecArrayControllerEnclosureDoorLockSlot=adaptecArrayControllerEnclosureDoorLockSlot, adaptecArrayControllerEnclosureOverTemperature=adaptecArrayControllerEnclosureOverTemperature, adaptecArrayControllerEnclosureType=adaptecArrayControllerEnclosureType, aacControllerResume=aacControllerResume, aacComponentUnitId=aacComponentUnitId, adaptecArrayControllerEnclosureDoorLockIndex=adaptecArrayControllerEnclosureDoorLockIndex, aacEnclosurePowerSupplyError=aacEnclosurePowerSupplyError, adaptecArrayControllerAdapterStatus=adaptecArrayControllerAdapterStatus, adaptecArrayControllerEnclosureFanTable=adaptecArrayControllerEnclosureFanTable, adaptec=adaptec, aacScsiId=aacScsiId, adaptecArrayControllerDevBlocks=adaptecArrayControllerDevBlocks, aacRaidNoSpace=aacRaidNoSpace, aacRaidRebuildRestart=aacRaidRebuildRestart, aacRaidDriveFailure=aacRaidDriveFailure, adaptecArrayControllerEnclosureFanStatus=adaptecArrayControllerEnclosureFanStatus, aacDeviceFailure=aacDeviceFailure, adaptecArrayControllerEnclosureNumberSlots=adaptecArrayControllerEnclosureNumberSlots, adaptecArrayControllerAdapterNumber=adaptecArrayControllerAdapterNumber, adaptecArrayControllerEnclosureNumberFans=adaptecArrayControllerEnclosureNumberFans, adaptecArrayControllerEnclosureSpeakerStatus=adaptecArrayControllerEnclosureSpeakerStatus, adaptecArrayControllerContSize=adaptecArrayControllerContSize, adaptecArrayControllerAdapterBufferMemory=adaptecArrayControllerAdapterBufferMemory, adaptecArrayControllerEnclosureDeviceInsertionSlot=adaptecArrayControllerEnclosureDeviceInsertionSlot, aacEnclosureTempOver=aacEnclosureTempOver, adaptecArrayControllerEnclosureTemperatureSensorEntry=adaptecArrayControllerEnclosureTemperatureSensorEntry, adaptecArrayControllerEnclosurePowerSupplyEntry=adaptecArrayControllerEnclosurePowerSupplyEntry, aacFileSystemChange=aacFileSystemChange, adaptecArrayControllerContainerToDeviceIndex=adaptecArrayControllerContainerToDeviceIndex, adaptecArrayControllerContUsage=adaptecArrayControllerContUsage, adaptecArrayControllerEnclosureNumberPowerSupplies=adaptecArrayControllerEnclosureNumberPowerSupplies, aacBatteryGood=aacBatteryGood, aacContainerId=aacContainerId, adaptecArrayControllerAdapterMonitorVersion=adaptecArrayControllerAdapterMonitorVersion, aacContainerStateChange=aacContainerStateChange, adaptecArrayControllerEnclosureBootTimeDiagnostic=adaptecArrayControllerEnclosureBootTimeDiagnostic, adaptecArrayControllerDeviceIndex=adaptecArrayControllerDeviceIndex, adaptecArrayControllerEnclosureRevision=adaptecArrayControllerEnclosureRevision, adaptecArrayControllerAdapterTable=adaptecArrayControllerAdapterTable, aacDeviceWarning=aacDeviceWarning)
