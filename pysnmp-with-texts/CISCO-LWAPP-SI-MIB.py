#
# PySNMP MIB module CISCO-LWAPP-SI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-SI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:06:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
cLApDot11IfSlotId, ciscoLwappSpectrum, cLApSysMacAddress, cLApName = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId", "ciscoLwappSpectrum", "cLApSysMacAddress", "cLApName")
CLDot11Band, = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLDot11Band")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, MibIdentifier, Counter32, IpAddress, Counter64, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Integer32, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "MibIdentifier", "Counter32", "IpAddress", "Counter64", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Integer32", "Unsigned32", "ObjectIdentity")
TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
ciscoLwappSiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1))
ciscoLwappSiMIB.setRevisions(('2015-05-18 00:00', '2011-10-01 00:00', '2011-05-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappSiMIB.setRevisionsDescriptions(('Added following NOTIFICATION-GROUP - ciscoLwappSiMIBNotifGroupRev1. Added new compliance - ciscoLwappApSiMIBComplianceRev2. Updated the description of following obejcts - cLSiD11AqiTrapThreshold - cLSiD11IdrUnclassifiedTrapEnable - cLSiD11IdrUnclassifiedTrapThreshold - cLSiApIfSensordErrorCode Updated following notifications - ciscoLwappSiAqLow - ciscoLwappSiIdrDevice Deprecated following NOTIFICATION-GROUP - ciscoLwappSiMIBNotifGroup.', "Added following objects to existing table, cLSiDot11BandEntry: cLSiD11IdrPersistentDevicePropagation cLSiD11IdrUnclassifiedTrapEnable cLSiD11IdrUnclassifiedTrapThreshold. Added following object to existing table, cLSiDot11BandEventDrivenRrmEntry: cLSiD11EventDrivenRrmCustomThresVal. Added one more enumeration('custom') for custom configuration for the existing variable, cLSiD11EventDrivenRrmThresLvl. Added the notification variable, cLSiD11IdrUnclassifiedCurrentSevIndex. Added one more notification, ciscoLwappSiAqLowSeverityHigh.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappSiMIB.setLastUpdated('201505180000Z')
if mibBuilder.loadTexts: ciscoLwappSiMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappSiMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappSiMIB.setDescription("This MIB module defines objects that describes the configuration and status of the spectrum intelligence capabilities of the 802.11 Access points. This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends it to the controller to which it is logically connected. Basic Service Set Identifier (BSSID) The identifier for the service set comprising of all the 802.11 stations under the control of one coordinating Access Point. This identifier happens to be the MAC address of the dot11 radio interface of the Access Point. The wireless clients that associate with the Access Point get the wired uplink through this particular dot11 interface. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Station Management (SMT) This term refers to the internal management of the 802.11 protocol operations by the AP to work cooperatively with the other APs and 802.11 devices in the network. Spectrum Intelligence (SI) Radio frequency (RF) interference from devices operating in the unlicensed 2.4-GHz and 5-GHz bands used by wireless LANs (WLANs) is a growing concern for organizations deploying indoor and outdoor wireless networks. A variety of RF devices are now available that can cause interference, including cordless phones, Bluetooth devices, cameras, paging systems, unauthorized access points, and clients in ad-hoc mode. Left unaddressed, RF interference can result in low data rates and throughput, lack of sufficient WLAN coverage, WLAN performance degradation, poor voice quality, and low end-user satisfaction. This, in turn, can lead to decreased network capacity, an increase in support calls, network downtime, rising operational costs, and potential security vulnerabilities from malicious interference. Spectrum Intelligence, industry-leading solution from Cisco detects, classifies, and locates devices causing RF interference in the unlicensed 2.4-GHz and 5-GHz bands. When the source of the interference is determined, customers can remove, move, shield, adjust, or replace the interference source. This helps organizations troubleshoot the wireless network to determine the root causes of interference problems and optimize network performance. Sensord The Sensord software looks at the timing and frequency of interference bursts, and the discovered attributes of the bursts such as the modulation type and identified sync words. This high-level information is then used to perform the final identification and separation of one device from another. This final classification step provides the powerful features of SI: Identifying the specific source of the interference, where it is located, and how it can be mitigated. Persistent Device Propagation Interference devices usually affect multiple wireless access points. Using persistent device propagation information regarding persistent interference devices can be passed from one access point to another access point effectively improving radio resource management. Radio Resource Management ( RRM ) RRM is the system level control of co-channel interference and other radio transmission characteristics in wireless communication systems. REFERENCE [1] Part 11 Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol.")
ciscoLwappSiMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0))
ciscoLwappSiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1))
ciscoLwappSiMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2))
ciscoLwappSiMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 3))
ciscoLwappAirQuality = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1))
ciscoLwappInterference = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2))
ciscoLwappSiDot11Band = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3))
ciscoLwappSiApIf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4))
cLSiApIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cLSiApIfTable.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfTable.setDescription('This table represents the information about the air quality parameters corresponding to the dot11 interfaces of the APs that have joined the controller.')
cLSiApIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLSiApIfEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfEntry.setDescription('An entry in this table represents the 802.11 AQ parameters of a channel on a dot11 interface of an AP that has joined the controller.')
cLSiApIfSpectrumIntelligenceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiApIfSpectrumIntelligenceEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfSpectrumIntelligenceEnable.setDescription("This object indicates whether Spectrum Intelligence (SI) is enabled on this radio. A value of 'true' indicates SI is enabled. A value of 'false' indicates SI is disabled.")
cLSiApIfSpectrumCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiApIfSpectrumCapable.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfSpectrumCapable.setDescription("This object indicates whether Spectrum Intelligence (SI) can be enabled on this radio. A value of 'true' indicates SI can be enabled. A value of 'false' indicates SI cannot be enabled.")
cLSiApIfRapidUpdateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiApIfRapidUpdateEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfRapidUpdateEnable.setDescription("This object indicates whether rapid update is enabled on this radio. A value of 'true' indicates Rapid update is enabled. A value of 'false' indicates Rapid Update is disabled.")
cLSiApIfDetailSpectrumModeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiApIfDetailSpectrumModeEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfDetailSpectrumModeEnable.setDescription("This object indicates whether detailed spectrum mode is enabled on this radio. A value of 'true' indicates detailed spectrum mode is enabled. A value of 'false' indicates detailed spectrum mode is disabled.")
cLSiApIfSensordOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notApplicable", 3))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiApIfSensordOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfSensordOperationalStatus.setDescription('This object indicates the current operational status of the Sensord')
cLSiApIfNumOfSeActiveConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiApIfNumOfSeActiveConnection.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfNumOfSeActiveConnection.setDescription('This object indicates the current number of active spectrum expert(SE) connections per slot of AP.')
cLSiApIfSensordErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 129, 130))).clone(namedValues=NamedValues(("configured", 1), ("invalidSIConfig", 2), ("apNonCleanAirMode", 3), ("failedChannelConfig", 4), ("failedResourceAllocation", 5), ("failedConnectionWithSensor", 6), ("radioNotCleanAirCapable", 7), ("failedSIStream", 8), ("radioDisabled", 9), ("recoverableError", 129), ("unrecoverableCrash", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiApIfSensordErrorCode.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfSensordErrorCode.setDescription('This object indicates the error code of the Sensord: configured(1) Configured. invalidSIConfig(2) Invalid SI configuration. apNonCleanAirMode(3) AP not in CleanAir mode. failedChannelConfig(4) Could not get channel configuration. failedResourceAllocation(5) Resource allocation failure. failedConnectionWithSensor(6) Could not establish connection with sensor. radioNotCleanAirCapable(7) Radio is not CleanAir capable. failedSIStream(8) Could not create SI streams. radioDisabled(9) Radio disabled. recoverableError(129) Recoverable error and AP will reset itself. unrecoverableCrash(130) Sensord crashed.')
cLSiDot11BandTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1), )
if mibBuilder.loadTexts: cLSiDot11BandTable.setStatus('current')
if mibBuilder.loadTexts: cLSiDot11BandTable.setDescription('This table represents the information about the air quality parameters corresponding to the dot11 band of the APs that have joined the controller.')
cLSiDot11BandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-SI-MIB", "cLSiD11Band"))
if mibBuilder.loadTexts: cLSiDot11BandEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiDot11BandEntry.setDescription('An entry in this table represents the AQ parameters on a dot11 band of an AP that has joined the controller.')
cLSiD11Band = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 1), CLDot11Band())
if mibBuilder.loadTexts: cLSiD11Band.setStatus('current')
if mibBuilder.loadTexts: cLSiD11Band.setDescription('This object represents the band for this entry.')
cLSiD11SpectrumIntelligenceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11SpectrumIntelligenceEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiD11SpectrumIntelligenceEnable.setDescription("This object indicates whether Spectrum Intelligence (SI) is enabled on this band. A value of 'true' indicates SI is enabled. A value of 'false' indicates SI is disabled.")
cLSiD11InterferenceDeviceList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 3), Bits().clone(namedValues=NamedValues(("wiMaxFixed", 0), ("wiMaxMobile", 1), ("xbox", 2), ("canopy", 3), ("radar", 4), ("superAg", 5), ("wifiInvalidChannel", 6), ("wifiInverted", 7), ("eightZeroTwoDot15dot4", 8), ("videoCamera", 9), ("dectLikePhone", 10), ("continuousTransmitter", 11), ("jammer", 12), ("tddTransmitter", 13), ("bluetoothDiscovery", 14), ("eightZeroTwoDot11Fh", 15), ("microwaveOven", 16), ("bluetoothLink", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11InterferenceDeviceList.setStatus('current')
if mibBuilder.loadTexts: cLSiD11InterferenceDeviceList.setDescription('This object represents the interference device list which would be considered for detection by controller on the corresponding radio interface. If bit corresponding to particular interference device category is set, if existing in radio interface, the same would be detected and reported. If bit corresponding to particular interference device category is cleared, the same would not be considered for detection and reporting, even though existing in particular radio interface.')
cLSiD11PollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 60))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11PollingInterval.setStatus('current')
if mibBuilder.loadTexts: cLSiD11PollingInterval.setDescription('This object represents the Air Quality polling interval.')
cLSiD11IdrReportingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11IdrReportingEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiD11IdrReportingEnable.setDescription("This object indicates whether IDR is enabled on this band. A value of 'true' indicates IDR is enabled. A value of 'false' indicates IDR is disabled.")
cLSiD11AqiTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11AqiTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiD11AqiTrapEnable.setDescription("This object indicates whether AQ notification is enabled on this band. A value of 'true' indicates AQ notification is enabled. A value of 'false' indicates AQ notification is disabled.")
cLSiD11AqiTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11AqiTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: cLSiD11AqiTrapThreshold.setDescription('This object represents the threshold value for the trap, ciscoLwappSiAqLowRev1.')
cLSiD11IdrTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11IdrTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiD11IdrTrapEnable.setDescription("This object indicates whether IDR notification is enabled on this band. A value of 'true' indicates IDR notification is enabled. A value of 'false' indicates IDR notification is disabled.")
cLSiD11IdrTrapDeviceList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 10), Bits().clone(namedValues=NamedValues(("wiMaxFixed", 0), ("wiMaxMobile", 1), ("xbox", 2), ("canopy", 3), ("radar", 4), ("superAg", 5), ("wifiInvalidChannel", 6), ("wifiInverted", 7), ("eightZeroTwoDot15dot4", 8), ("videoCamera", 9), ("dectLikePhone", 10), ("continuousTransmitter", 11), ("jammer", 12), ("tddTransmitter", 13), ("bluetoothDiscovery", 14), ("eightZeroTwoDot11Fh", 15), ("microwaveOven", 16), ("bluetoothLink", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11IdrTrapDeviceList.setStatus('current')
if mibBuilder.loadTexts: cLSiD11IdrTrapDeviceList.setDescription('This object represents the interference device list, that are enabled to generate traps. When bit corresponding to particular interference category is set, when detected by controller, trap indicating the detection of this interference device would be sent. And if bit corresponding to particular interference category is cleared, when detected by controller, trap indicating the detection of this interference device would not be sent.')
cLSiD11IdrPersistentDevicePropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11IdrPersistentDevicePropagation.setStatus('current')
if mibBuilder.loadTexts: cLSiD11IdrPersistentDevicePropagation.setDescription("This object specifies whether Persistent Device Propagation to neighboring access points is enabled on this band or not. A value of 'true' indicates that Persistent Device Propagation is enabled. A value of 'false' indicates Persistent Device Propagation is disabled.")
cLSiD11IdrUnclassifiedTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11IdrUnclassifiedTrapEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiD11IdrUnclassifiedTrapEnable.setDescription("This object specifies whether trap, ciscoLwappSiAqLowSeverityHighRev1, would be sent for unclassified interference category on this band. A value of 'true' indicates trap enabled. A value of 'false' indicates trap is disabled.")
cLSiD11IdrUnclassifiedTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11IdrUnclassifiedTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: cLSiD11IdrUnclassifiedTrapThreshold.setDescription('This object specifies the threshold which would be considered while sending trap, ciscoLwappSiAqLowSeverityHighRev1, for unclassified interference category. When the interference severity index reaches this threshold, trap would be sent out.')
cLSiAqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cLSiAqTable.setStatus('current')
if mibBuilder.loadTexts: cLSiAqTable.setDescription('This table represents the information about the air quality parameters corresponding to the dot11 interfaces of the APs that have joined the controller for a given channel.')
cLSiAqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-SI-MIB", "cLSiAqChannelNumber"))
if mibBuilder.loadTexts: cLSiAqEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiAqEntry.setDescription('An entry describes the AQ parameters of a channel on a 802.11 radio interface of an AP. A row in this table will be created when a report is received on controller from an AP for a channel. The reports will be updated in every 15 minutes. When new reports come in, old entries would be deleted and updated with new entries.')
cLSiAqChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)))
if mibBuilder.loadTexts: cLSiAqChannelNumber.setStatus('current')
if mibBuilder.loadTexts: cLSiAqChannelNumber.setDescription('This object indicates the channel number for which the report was received by the controller.')
cLSiAqMinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqMinIndex.setStatus('current')
if mibBuilder.loadTexts: cLSiAqMinIndex.setDescription("This object indicates the minimum air quality Index. This value lies between 1 and 100 where value '1' indicates worst air quality and value '100' indicates best air quality.")
cLSiAqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqIndex.setStatus('current')
if mibBuilder.loadTexts: cLSiAqIndex.setDescription("This object indicates the air quality index. This value lies between 1 and 100 where value '1' indicates worst air quality and value '100' indicates best air quality.")
cLSiAqTotalChannelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60))).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqTotalChannelPower.setStatus('current')
if mibBuilder.loadTexts: cLSiAqTotalChannelPower.setDescription('This object indicates the RSSI value for total channel power.')
cLSiAqTotalChannelDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqTotalChannelDutyCycle.setStatus('current')
if mibBuilder.loadTexts: cLSiAqTotalChannelDutyCycle.setDescription('This object indicates the total channel duty cycle.')
cLSiAqInterferencePower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60))).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterferencePower.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferencePower.setDescription('This object indicates the power or RSSI value of the interfering device. Received signal strength indicator (RSSI) is a measurement of the power present in a received radio signal.')
cLSiAqInterferenceDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterferenceDutyCycle.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceDutyCycle.setDescription('This object indicates the duty cycle of interfering device.')
cLSiAqInterferenceDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterferenceDeviceCount.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceDeviceCount.setDescription('This object indicates the total number of interference devices identified by AP.')
cLSiAqInterfererClassReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterfererClassReportCount.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterfererClassReportCount.setDescription('This object indicates the maximum number of worst air quality interference report that will be generated per channel of a dot11 interface of an AP.')
cLSiAqTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cLSiAqTimeStamp.setDescription("This object indicates the time when the Air Quality(AQ) report was received by the controller. This represents number of seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC). So a value of '1131362704' means 'Mon Nov 7 16:55:04 2005'.")
cLSiAqInterferenceClassReportTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportTable.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportTable.setDescription('This table represents the information about the worst air quality interference report on a channel of the dot11 interfaces of the APs that have joined the controller. The total number of entries are represented by cLSiAqInterfererClassReportCount object.')
cLSiAqInterferenceClassReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-SI-MIB", "cLSiAqChannelNumber"), (0, "CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportIndex"))
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportEntry.setDescription('An entry describes the worst interference report generated for a channel on a 802.11 radio interface of an AP. There will be a maximum of cLSiAqInterfererClassReportCount worst air quality reports per channel on a dot11 interface of an AP.')
cLSiAqInterferenceClassReportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportIndex.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportIndex.setDescription('This object indicates the category index for this report.')
cLSiAqInterferenceClassReportDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10, 17, 18, 19, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("bluetoothLink", 1), ("microwaveOven", 8), ("eightZeroTwoDot11Fh", 10), ("bluetoothDiscovery", 17), ("tddTransmitter", 18), ("jammer", 19), ("continuousTransmitter", 25), ("dectLikePhone", 26), ("videoCamera", 27), ("eightZeroTwoDot15dot4", 28), ("wifiInverted", 30), ("wifiInvalidChannel", 31), ("superAg", 32), ("radar", 33), ("canopy", 34), ("microsoftDevice", 35), ("wiMaxMobile", 36), ("wiMaxFixed", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportDeviceClass.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportDeviceClass.setDescription('This object indicates the device type of the identified interference devices mentioned in the report.')
cLSiAqInterferenceClassReportSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportSeverityIndex.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportSeverityIndex.setDescription("This object indicates the severity index for this report. This value lies between 1 and 100 where value '1' indicates low interference and value '100' indicated high interference.")
cLSiAqInterferenceClassReportPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60))).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportPower.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportPower.setDescription('This object indicates the power of interfering device reported in worst air quality report.')
cLSiAqInterferenceClassReportDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportDutyCycle.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportDutyCycle.setDescription('This object indicates the duty cycle of interfering device reported in worst air quality report')
cLSiAqInterferenceClassReportDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportDeviceCount.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportDeviceCount.setDescription('This object indicates the count of total interference devices in the worst air quality report.')
cLSiIdrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cLSiIdrTable.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrTable.setDescription('This table represents the information about the IDR parameters for a given interfering device. These devices are detected and reported per the dot11 interfaces of the APs that have joined the controller.')
cLSiIdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-SI-MIB", "cLSiIdrDeviceId"))
if mibBuilder.loadTexts: cLSiIdrEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrEntry.setDescription('An entry describes the IDR(Interference Device Report) parameters of the 802.11 radio interface of an AP that has joined the controller. IDR will be generated for each interfering device which has been detected by the access points. A row in this table will be created when a report is received on controller from an AP for the dot11. The rows will be updated when controller has received new IDR report from an AP.')
cLSiIdrDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLSiIdrDeviceId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrDeviceId.setDescription('This object represents the unique identification number of the interfering device.')
cLSiIdrClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterId.setDescription('This object indicates the cluster id. The interference causing device can be detected by several CleanAir APs listening on the same channel. The WLC on receiving the records, merges the records to avoid multiple listing for the same interfering device. The WLC clusters records to create one record, with the AP most affected by the interferer as the cluster center.')
cLSiIdrTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrTimeStamp.setDescription("This object indicates the time when the interferer was reported to the controller by access point. This represents number of seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC). So a value of '1131362704' means 'Mon Nov 7 16:55:04 2005'.")
cLSiIdrDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10, 17, 18, 19, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("bluetoothLink", 1), ("microwaveOven", 8), ("eightZeroTwoDot11Fh", 10), ("bluetoothDiscovery", 17), ("tddTransmitter", 18), ("jammer", 19), ("continuousTransmitter", 25), ("dectLikePhone", 26), ("videoCamera", 27), ("eightZeroTwoDot15dot4", 28), ("wifiInverted", 30), ("wifiInvalidChannel", 31), ("superAg", 32), ("radar", 33), ("canopy", 34), ("microsoftDevice", 35), ("wiMaxMobile", 36), ("wiMaxFixed", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrDeviceType.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrDeviceType.setDescription('This object indicates the device type and category of interfering device.')
cLSiIdrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrSeverity.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrSeverity.setDescription('This object indicates the severity of the interference created by interfering device.')
cLSiIdrDetectingApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrDetectingApMac.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrDetectingApMac.setDescription('This object indicates the mac address of the AP which detected the interfering device.')
cLSiIdrDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrDutyCycle.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrDutyCycle.setDescription('This object indicates the duty cycle of the interfering device.')
cLSiIdrAntennaId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrAntennaId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrAntennaId.setDescription('This object indicates the antenna information which has detected the interfering device.')
cLSiIdrRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60))).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrRssi.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrRssi.setDescription('This object indicates the RSSI value for transmit channel power.')
cLSiIdrRadioBandId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 10), CLDot11Band()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrRadioBandId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrRadioBandId.setDescription('This object indicates the 802.11 band this entry corresponds to.')
cLSiIdrAffectedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrAffectedChannels.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrAffectedChannels.setDescription('This object indicates the channels affected by the interfering devices.')
cLSiIdrDeviceSignatureLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrDeviceSignatureLen.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrDeviceSignatureLen.setDescription('This object indicates the length of the Device Signature Id of the interfering device.')
cLSiIdrDeviceSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrDeviceSignature.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrDeviceSignature.setDescription('This object indicates the Device Signature Id of the interfering device.')
cLSiIdrClusterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cLSiIdrClusterTable.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterTable.setDescription('This table represents the information about the IDR parameters corresponding to clusters within dot11 radio interfaces. Interferers can be detected by several CleanAir APs listening on the same channel. So WLC attempts to merge together interferer records to avoid multiple listings for the same interferer. The WLC tries to cluster records it thinks are for the same interferer into one object, with the AP most affected by the interferer as the cluster center.')
cLSiIdrClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-SI-MIB", "cLSiIdrClusterRadioBandId"), (0, "CISCO-LWAPP-SI-MIB", "cLSiIdrClusterClusterId"), (0, "CISCO-LWAPP-SI-MIB", "cLSiIdrClusterDeviceIndex"))
if mibBuilder.loadTexts: cLSiIdrClusterEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterEntry.setDescription('An entry in this table represents the 802.11 IDR parameters corresponding to a cluster within dot11 radio interface.')
cLSiIdrClusterRadioBandId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 1), CLDot11Band()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterRadioBandId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterRadioBandId.setDescription('This object indicates the 802.11 band this entry corresponds to.')
cLSiIdrClusterClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterClusterId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterClusterId.setDescription('This object indicates the MAC address of the interfering device for which the cluster is created.')
cLSiIdrClusterDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: cLSiIdrClusterDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterDeviceIndex.setDescription('This object represents the device index inside the Cluster.')
cLSiIdrClusterDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterDeviceId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterDeviceId.setDescription('This object indicates the device which uniquely identifies an entry in this table.')
cLSiIdrClusterTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterTimeStamp.setDescription("This object indicates the time when the interferer registered with the controller. This represents number of seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC). So a value of '1131362704' means 'Mon Nov 7 16:55:04 2005'.")
cLSiIdrClusterDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10, 17, 18, 19, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))).clone(namedValues=NamedValues(("bluetoothLink", 1), ("microwaveOven", 8), ("eightZeroTwoDot11Fh", 10), ("bluetoothDiscovery", 17), ("tddTransmitter", 18), ("jammer", 19), ("continuousTransmitter", 25), ("dectLikePhone", 26), ("videoCamera", 27), ("eightZeroTwoDot15dot4", 28), ("wifiInverted", 30), ("wifiInvalidChannel", 31), ("superAg", 32), ("radar", 33), ("canopy", 34), ("microsoftDevice", 35), ("wiMaxMobile", 36), ("wiMaxFixed", 37), ("wifiAci", 38), ("unclassified", 39), ("unknown", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterDeviceType.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterDeviceType.setDescription('This object indicates the device type and category.')
cLSiIdrClusterSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterSeverity.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterSeverity.setDescription('This object indicates the severity.')
cLSiIdrClusterDetectingApMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterDetectingApMac.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterDetectingApMac.setDescription('This object indicates the mac address of the AP which detected the interfering device.')
cLSiIdrClusterDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterDutyCycle.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterDutyCycle.setDescription('This object indicates the duty cycle.')
cLSiIdrClusterAntennaId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterAntennaId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterAntennaId.setDescription('This object indicates the antenna information for the cluster.')
cLSiIdrClusterRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -60))).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterRssi.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterRssi.setDescription('This object indicates the RSSI value for transmit channel power.')
cLSiIdrClusterAffectedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterAffectedChannels.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterAffectedChannels.setDescription('This object indicates the affected channels.')
cLSiIdrClusterDeviceSignatureLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterDeviceSignatureLen.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterDeviceSignatureLen.setDescription('This object indicates the length of Device Signature.')
cLSiIdrClusterDeviceSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterDeviceSignature.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterDeviceSignature.setDescription('This object indicates the Device Signature Id.')
cLSiIdrClusterCenterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterCenterIndex.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterCenterIndex.setDescription('This object indicates the cluster center index. With respect to clustering in CleanAir, the cluster center is the access point which is most affected by the interferer.')
cLSiIdrClusterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10, 17, 18, 19, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))).clone(namedValues=NamedValues(("bluetoothLink", 1), ("microwaveOven", 8), ("eightZeroTwoDot11Fh", 10), ("bluetoothDiscovery", 17), ("tddTransmitter", 18), ("jammer", 19), ("continuousTransmitter", 25), ("dectLikePhone", 26), ("videoCamera", 27), ("eightZeroTwoDot15dot4", 28), ("wifiInverted", 30), ("wifiInvalidChannel", 31), ("superAg", 32), ("radar", 33), ("canopy", 34), ("microsoftDevice", 35), ("wiMaxMobile", 36), ("wiMaxFixed", 37), ("wifiAci", 38), ("unclassified", 39), ("unknown", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiIdrClusterType.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterType.setDescription('This object indicates the cluster type.')
cLSiDot11BandEventDrivenRrmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 2), )
if mibBuilder.loadTexts: cLSiDot11BandEventDrivenRrmTable.setStatus('current')
if mibBuilder.loadTexts: cLSiDot11BandEventDrivenRrmTable.setDescription('This table represents the information about the event driven RRM corresponding to the dot11 band of the APs that have joined the controller.')
cLSiDot11BandEventDrivenRrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-SI-MIB", "cLSiD11Band"))
if mibBuilder.loadTexts: cLSiDot11BandEventDrivenRrmEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiDot11BandEventDrivenRrmEntry.setDescription('An entry in this table represents the event driven RRM on a dot 11 band of an AP that has joined the controller.')
cLSiD11EventDrivenRrmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11EventDrivenRrmEnable.setStatus('current')
if mibBuilder.loadTexts: cLSiD11EventDrivenRrmEnable.setDescription("This object indicates whether event driven RRM is enabled on this band. A value of 'true' indicates event driven RRM is enabled. A value of 'false' indicates event driven RRM is disabled.")
cLSiD11EventDrivenRrmThresLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("custom", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11EventDrivenRrmThresLvl.setStatus('current')
if mibBuilder.loadTexts: cLSiD11EventDrivenRrmThresLvl.setDescription("This object represents the event driven RRM threshold level. 'low' - low level event driven RRM threshold value 'medium' - medium level event driven RRM threshold value 'high' - high level event driven RRM threshold value 'custom' - user specified value of even driven RRM threshold")
cLSiD11EventDrivenRrmCustomThresVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLSiD11EventDrivenRrmCustomThresVal.setStatus('current')
if mibBuilder.loadTexts: cLSiD11EventDrivenRrmCustomThresVal.setDescription("This object represents the event driven RRM Custom threshold value. This object only takes effect when the value of cLSiD11EventDrivenRrmThresLvl is 'custom'.")
cLSiPersistentDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 3), )
if mibBuilder.loadTexts: cLSiPersistentDeviceTable.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceTable.setDescription('This table represents the information about the Persistent interference devices corresponding to the dot11 interface of the APs that have joined the controller for a given device. Persistent devices are category of interference devices that are present right now and will interfere with controller operation, even if they are not detectable all the time.')
cLSiPersistentDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceId"))
if mibBuilder.loadTexts: cLSiPersistentDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceEntry.setDescription('An entry in this table represents the 802.11 persistent interference devices of a radio of an AP that has joined the controller.')
cLSiPersistentDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLSiPersistentDeviceId.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceId.setDescription('This object represents the device ID .')
cLSiPersistentDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiPersistentDeviceType.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceType.setDescription('This object indicates the device type and category')
cLSiPersistentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiPersistentTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentTimeStamp.setDescription('This object indicates the Time Stamp when this persistent device was last updated in controller.')
cLSiPersistentDeviceChanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 4), )
if mibBuilder.loadTexts: cLSiPersistentDeviceChanTable.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceChanTable.setDescription('This table represents the detail like Channel number, Duty Cycle(DC), RSSI of channels affected due to interference caused by persistence device.')
cLSiPersistentDeviceChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), (0, "CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceId"), (0, "CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceChanIndex"))
if mibBuilder.loadTexts: cLSiPersistentDeviceChanEntry.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceChanEntry.setDescription('An entry in this table represents the 802.11 persistent device affecting which channel(s) and with how much DC level and RSSI.')
cLSiPersistentDeviceChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLSiPersistentDeviceChanIndex.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceChanIndex.setDescription('This object represents the index to the channel affected by the persistent device.')
cLSiChannelAffected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiChannelAffected.setStatus('current')
if mibBuilder.loadTexts: cLSiChannelAffected.setDescription('This object indicates the channel affected by the persistent device')
cLSiChannelUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiChannelUtil.setStatus('current')
if mibBuilder.loadTexts: cLSiChannelUtil.setDescription('This object indicates the DC level in a channel.')
cLSiChannelRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLSiChannelRSSI.setStatus('current')
if mibBuilder.loadTexts: cLSiChannelRSSI.setDescription('This object indicates the RSSI in a channel.')
cLSiAlarmClear = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 3, 1), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLSiAlarmClear.setStatus('current')
if mibBuilder.loadTexts: cLSiAlarmClear.setDescription("This object specifies whether this event is raise or clear. A value of 'true' indicates this event is cleared A value of 'false' indicates this even is raised.")
cLSiIdrPreviousClusterId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 3, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLSiIdrPreviousClusterId.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrPreviousClusterId.setDescription('This object represents the previous cluster id.')
cLSiApAqLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 3, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLSiApAqLimit.setStatus('current')
if mibBuilder.loadTexts: cLSiApAqLimit.setDescription('This object represents limit on number of Monitor Mode APs supported for Air Quality monitoring.')
cLSiD11IdrUnclassifiedCurrentSevIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLSiD11IdrUnclassifiedCurrentSevIndex.setStatus('current')
if mibBuilder.loadTexts: cLSiD11IdrUnclassifiedCurrentSevIndex.setDescription('This object indicates the current severity index for unclassified category of interference devices. If the severity value goes above threshold indicated by cLSiD11IdrUnclassifiedTrapThreshold, a notification would be generated.')
ciscoLwappSiAqLow = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 1)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-SI-MIB", "cLSiAqChannelNumber"), ("CISCO-LWAPP-SI-MIB", "cLSiAqIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiD11AqiTrapThreshold"), ("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"))
if mibBuilder.loadTexts: ciscoLwappSiAqLow.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappSiAqLow.setDescription('This notification is generated when the air quality index of an AP falls below a specified threshold value indicated by cLSiD11AqiTrapThreshold. ciscoLwappSiAqLow object is superseded by ciscoLwappSiAqLowRev1.')
ciscoLwappSiIdrDevice = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 2)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrDeviceId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrDeviceType"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrAffectedChannels"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrSeverity"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterId"), ("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrPreviousClusterId"))
if mibBuilder.loadTexts: ciscoLwappSiIdrDevice.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappSiIdrDevice.setDescription('This notification is generated when a device has been identified as a interferer. This notification can be configured per interference device category. ciscoLwappSiIdrDevice object is superseded by ciscoLwappSiIdrDeviceRev1.')
ciscoLwappSiSensorCrash = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 3)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfSensordOperationalStatus"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfSensordErrorCode"))
if mibBuilder.loadTexts: ciscoLwappSiSensorCrash.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappSiSensorCrash.setDescription('This notification is generated when a crash is observed in the SensorD functionality of a radio on an AP. ciscoLwappSiSensorCrash object is superseded by ciscoLwappSiSensorCrashRev1.')
ciscoLwappSiAqBufferUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 4)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-SI-MIB", "cLSiApAqLimit"), ("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"))
if mibBuilder.loadTexts: ciscoLwappSiAqBufferUnavailable.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappSiAqBufferUnavailable.setDescription('This notification is generated when the controller detects that the Air Quality Buffer is unavailable. ciscoLwappSiAqBufferUnavailable object is superseded by ciscoLwappSiAqBufferUnavailableRev1.')
ciscoLwappSiAqLowSeverityHigh = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 5)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-SI-MIB", "cLSiAqChannelNumber"), ("CISCO-LWAPP-SI-MIB", "cLSiAqIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiD11AqiTrapThreshold"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrUnclassifiedTrapThreshold"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrUnclassifiedCurrentSevIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"))
if mibBuilder.loadTexts: ciscoLwappSiAqLowSeverityHigh.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappSiAqLowSeverityHigh.setDescription('This notification is generated when the air quality index of an APfalls below a specified threshold value indicated by cLSiD11AqiTrapThreshold or severity value goes above the threshold indicated by cLSiD11IdrUnclassifiedCurrentSevIndex. cLApSysMacAddress - MAC address of the access point. cLApDot11IfSlotId - radio interface slot. cLSiAqChannelNumber - channel number. cLSiAqIndex - air quality index. cLSiD11AqiTrapThreshold - threshol value of air quality considered for generation of trap. cLSiD11IdrUnclassifiedTrapThreshold - severity threshold for unclassified interference category. cLSiAlarmClear - a truth value showing if event was raised or cleared. ciscoLwappSiAqLowSeverityHigh object is superseded by ciscoLwappSiAqLowSeverityHighRev1.')
ciscoLwappSiAqLowRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 6)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiAqIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiD11AqiTrapThreshold"), ("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"))
if mibBuilder.loadTexts: ciscoLwappSiAqLowRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappSiAqLowRev1.setDescription('This notification is generated when the air quality index of an AP falls below a specified threshold value indicated by cLSiD11AqiTrapThreshold.')
ciscoLwappSiIdrDeviceRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 7)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiIdrDeviceType"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrAffectedChannels"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrSeverity"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterId"), ("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrPreviousClusterId"))
if mibBuilder.loadTexts: ciscoLwappSiIdrDeviceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappSiIdrDeviceRev1.setDescription('This notification is generated when a device has been identified as a interferer. This notification can be configured per interference device category.')
ciscoLwappSiSensorCrashRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfSensordOperationalStatus"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfSensordErrorCode"))
if mibBuilder.loadTexts: ciscoLwappSiSensorCrashRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappSiSensorCrashRev1.setDescription('This notification is generated when a crash is observed in the SensorD functionality of a radio on an AP.')
ciscoLwappSiAqBufferUnavailableRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 9)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiApAqLimit"), ("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"))
if mibBuilder.loadTexts: ciscoLwappSiAqBufferUnavailableRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappSiAqBufferUnavailableRev1.setDescription('This notification is generated when the controller detects that the Air Quality Buffer is unavailable.')
ciscoLwappSiAqLowSeverityHighRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 0, 10)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiAqIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiD11AqiTrapThreshold"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrUnclassifiedTrapThreshold"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrUnclassifiedCurrentSevIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"))
if mibBuilder.loadTexts: ciscoLwappSiAqLowSeverityHighRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappSiAqLowSeverityHighRev1.setDescription('This notification is generated when the air quality index of an AP falls below a specified threshold value indicated by cLSiD11AqiTrapThreshold or severity value goes above the threshold indicated by cLSiD11IdrUnclassifiedCurrentSevIndex. cLApSysMacAddress - MAC address of the access point. cLApDot11IfSlotId - radio interface slot. cLSiAqChannelNumber - channel number. cLSiAqIndex - air quality index. cLSiD11AqiTrapThreshold - threshold value of air quality considered for generation of trap. cLSiD11IdrUnclassifiedTrapThreshold - severity threshold for unclassified interference category. cLSiAlarmClear - a truth value showing if event was raised or cleared.')
ciscoLwappSiMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 1))
ciscoLwappSiMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2))
ciscoLwappApSiMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 1, 1)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiApIfConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11ConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiAqChannelStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11EventDrivenRrmConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceChanStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApSiMIBCompliance = ciscoLwappApSiMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApSiMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappSiMIB module.')
ciscoLwappApSiMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 1, 2)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiApIfConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11ConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11ConfigSup1Group"), ("CISCO-LWAPP-SI-MIB", "cLSiAqChannelStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11EventDrivenRrmConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11EventDrivenRrmConfigSup1Group"), ("CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceChanStatusGroup"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiMIBNotifGroup"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiMIBNotifVariableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApSiMIBComplianceRev1 = ciscoLwappApSiMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappApSiMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappSiMIB module.')
ciscoLwappApSiMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 1, 3)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiApIfConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11ConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11ConfigSup1Group"), ("CISCO-LWAPP-SI-MIB", "cLSiAqChannelStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11EventDrivenRrmConfigGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiD11EventDrivenRrmConfigSup1Group"), ("CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceStatusGroup"), ("CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceChanStatusGroup"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiMIBNotifVariableGroup"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiMIBNotifGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappApSiMIBComplianceRev2 = ciscoLwappApSiMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappApSiMIBComplianceRev2.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappSiMIB module.')
cLSiApIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 1)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiApIfSpectrumIntelligenceEnable"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfRapidUpdateEnable"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfDetailSpectrumModeEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiApIfConfigGroup = cLSiApIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfConfigGroup.setDescription('This collection of objects represents the general configuration related information about the Spectrum Intelligence(SI) functionality of the dot11 interface of an AP that has joined the controller.')
cLSiApIfStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 2)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiApIfSpectrumCapable"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfSensordOperationalStatus"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfNumOfSeActiveConnection"), ("CISCO-LWAPP-SI-MIB", "cLSiApIfSensordErrorCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiApIfStatusGroup = cLSiApIfStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiApIfStatusGroup.setDescription('This collection of objects represents the general status related information about the Spectrum Intelligence(SI) functionality of the dot11 interface of an AP that has joined the controller.')
cLSiD11ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 3)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiD11SpectrumIntelligenceEnable"), ("CISCO-LWAPP-SI-MIB", "cLSiD11InterferenceDeviceList"), ("CISCO-LWAPP-SI-MIB", "cLSiD11PollingInterval"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrReportingEnable"), ("CISCO-LWAPP-SI-MIB", "cLSiD11AqiTrapEnable"), ("CISCO-LWAPP-SI-MIB", "cLSiD11AqiTrapThreshold"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrTrapEnable"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrTrapDeviceList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiD11ConfigGroup = cLSiD11ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiD11ConfigGroup.setDescription('This collection of objects represents the general configuration related information about the Air Quality (AQ) of the dot11 interface of a controller.')
cLSiAqChannelStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 4)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiAqMinIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiAqIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiAqTotalChannelPower"), ("CISCO-LWAPP-SI-MIB", "cLSiAqTotalChannelDutyCycle"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferencePower"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceDutyCycle"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceDeviceCount"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterfererClassReportCount"), ("CISCO-LWAPP-SI-MIB", "cLSiAqTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiAqChannelStatusGroup = cLSiAqChannelStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiAqChannelStatusGroup.setDescription('This collection of objects represents the general status related information about the Air Quality (AQ) of a channel on a dot11 interface of an AP that has joined the controller.')
cLSiAqInterferenceClassReportStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 5)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportDeviceClass"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportSeverityIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportPower"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportDutyCycle"), ("CISCO-LWAPP-SI-MIB", "cLSiAqInterferenceClassReportDeviceCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiAqInterferenceClassReportStatusGroup = cLSiAqInterferenceClassReportStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiAqInterferenceClassReportStatusGroup.setDescription('This collection of objects represents the general status related information about the Air Quality (AQ) interference category on a channel for a dot11 interface of an AP that has joined the controller.')
cLSiIdrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 6)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrTimeStamp"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrDeviceType"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrSeverity"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrDetectingApMac"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrDutyCycle"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrAntennaId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrRssi"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrRadioBandId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrAffectedChannels"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrDeviceSignatureLen"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrDeviceSignature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiIdrStatusGroup = cLSiIdrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrStatusGroup.setDescription('This collection of objects represents the general status related information about Interference Device Reports(IDR) corresponding to the dot11 interfaces of the APs that have joined the controller for a given device.')
cLSiIdrClusterStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 7)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterRadioBandId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterClusterId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterDeviceId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterTimeStamp"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterDeviceType"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterSeverity"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterDetectingApMac"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterDutyCycle"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterAntennaId"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterRssi"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterAffectedChannels"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterDeviceSignatureLen"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterDeviceSignature"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterCenterIndex"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrClusterType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiIdrClusterStatusGroup = cLSiIdrClusterStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiIdrClusterStatusGroup.setDescription('This collection of objects represents the general status related information about Interference Device Reports(IDR) per cluster on the dot11 interfaces for the controller for a given device.')
cLSiD11EventDrivenRrmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 8)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiD11EventDrivenRrmEnable"), ("CISCO-LWAPP-SI-MIB", "cLSiD11EventDrivenRrmThresLvl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiD11EventDrivenRrmConfigGroup = cLSiD11EventDrivenRrmConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiD11EventDrivenRrmConfigGroup.setDescription('This collection of objects represents the general configuration related information about event driven RRM (Radio Resource Management) corresponding to the dot11 band of a controller.')
cLSiPersistentDeviceStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 9)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiPersistentDeviceType"), ("CISCO-LWAPP-SI-MIB", "cLSiPersistentTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiPersistentDeviceStatusGroup = cLSiPersistentDeviceStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceStatusGroup.setDescription('This collection of objects represents the general status related information about persistent interference devices of a radio of an AP that has joined the controller.')
cLSiPersistentDeviceChanStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 10)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiChannelAffected"), ("CISCO-LWAPP-SI-MIB", "cLSiChannelUtil"), ("CISCO-LWAPP-SI-MIB", "cLSiChannelRSSI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiPersistentDeviceChanStatusGroup = cLSiPersistentDeviceChanStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cLSiPersistentDeviceChanStatusGroup.setDescription('This collection of objects represents the general status related information about persistent interference devices per channel on a radio of an AP that has joined the controller.')
cLSiD11ConfigSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 11)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiD11IdrPersistentDevicePropagation"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrUnclassifiedTrapEnable"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrUnclassifiedTrapThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiD11ConfigSup1Group = cLSiD11ConfigSup1Group.setStatus('current')
if mibBuilder.loadTexts: cLSiD11ConfigSup1Group.setDescription('This collection of objects represents the additional general configuration related information about the Air Quality (AQ) of the dot11 interface of a controller.')
cLSiD11EventDrivenRrmConfigSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 12)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiD11EventDrivenRrmCustomThresVal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cLSiD11EventDrivenRrmConfigSup1Group = cLSiD11EventDrivenRrmConfigSup1Group.setStatus('current')
if mibBuilder.loadTexts: cLSiD11EventDrivenRrmConfigSup1Group.setDescription('This collection of objects specifies the general configuration related additional information about event driven RRM (Radio Resource Management) corresponding to the dot11 band of a controller.')
ciscoLwappSiMIBNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 13)).setObjects(("CISCO-LWAPP-SI-MIB", "ciscoLwappSiAqLow"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiIdrDevice"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiSensorCrash"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiAqBufferUnavailable"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiAqLowSeverityHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSiMIBNotifGroup = ciscoLwappSiMIBNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappSiMIBNotifGroup.setDescription('This collection of objects represents the notifications defined within this MIB file. ciscoLwappSiMIBNotifGroup object is superseded by ciscoLwappSiMIBNotifGroupRev1.')
ciscoLwappSiMIBNotifVariableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 14)).setObjects(("CISCO-LWAPP-SI-MIB", "cLSiAlarmClear"), ("CISCO-LWAPP-SI-MIB", "cLSiIdrPreviousClusterId"), ("CISCO-LWAPP-SI-MIB", "cLSiApAqLimit"), ("CISCO-LWAPP-SI-MIB", "cLSiD11IdrUnclassifiedCurrentSevIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSiMIBNotifVariableGroup = ciscoLwappSiMIBNotifVariableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappSiMIBNotifVariableGroup.setDescription('This collection of objects represents the notification related parameter within this MIB file.')
ciscoLwappSiMIBNotifGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 1, 6, 1, 2, 2, 15)).setObjects(("CISCO-LWAPP-SI-MIB", "ciscoLwappSiAqLowRev1"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiIdrDeviceRev1"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiSensorCrashRev1"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiAqBufferUnavailableRev1"), ("CISCO-LWAPP-SI-MIB", "ciscoLwappSiAqLowSeverityHighRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappSiMIBNotifGroupRev1 = ciscoLwappSiMIBNotifGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappSiMIBNotifGroupRev1.setDescription('This collection of objects represents the notifications defined within this MIB file.')
mibBuilder.exportSymbols("CISCO-LWAPP-SI-MIB", cLSiApIfSpectrumIntelligenceEnable=cLSiApIfSpectrumIntelligenceEnable, cLSiD11EventDrivenRrmCustomThresVal=cLSiD11EventDrivenRrmCustomThresVal, ciscoLwappAirQuality=ciscoLwappAirQuality, ciscoLwappApSiMIBComplianceRev2=ciscoLwappApSiMIBComplianceRev2, cLSiIdrClusterDeviceSignature=cLSiIdrClusterDeviceSignature, cLSiIdrEntry=cLSiIdrEntry, cLSiDot11BandEventDrivenRrmEntry=cLSiDot11BandEventDrivenRrmEntry, PYSNMP_MODULE_ID=ciscoLwappSiMIB, cLSiPersistentDeviceTable=cLSiPersistentDeviceTable, cLSiAqTimeStamp=cLSiAqTimeStamp, cLSiIdrClusterStatusGroup=cLSiIdrClusterStatusGroup, cLSiApIfSpectrumCapable=cLSiApIfSpectrumCapable, cLSiIdrClusterDeviceIndex=cLSiIdrClusterDeviceIndex, cLSiChannelAffected=cLSiChannelAffected, ciscoLwappSiMIBNotifs=ciscoLwappSiMIBNotifs, ciscoLwappSiApIf=ciscoLwappSiApIf, cLSiD11IdrTrapEnable=cLSiD11IdrTrapEnable, ciscoLwappSiAqLowSeverityHigh=ciscoLwappSiAqLowSeverityHigh, cLSiIdrRssi=cLSiIdrRssi, cLSiAqTotalChannelPower=cLSiAqTotalChannelPower, cLSiPersistentDeviceId=cLSiPersistentDeviceId, cLSiPersistentTimeStamp=cLSiPersistentTimeStamp, cLSiIdrPreviousClusterId=cLSiIdrPreviousClusterId, cLSiIdrDeviceType=cLSiIdrDeviceType, ciscoLwappSiSensorCrashRev1=ciscoLwappSiSensorCrashRev1, cLSiApIfEntry=cLSiApIfEntry, cLSiApIfNumOfSeActiveConnection=cLSiApIfNumOfSeActiveConnection, ciscoLwappSiMIBNotifGroupRev1=ciscoLwappSiMIBNotifGroupRev1, ciscoLwappApSiMIBComplianceRev1=ciscoLwappApSiMIBComplianceRev1, cLSiIdrClusterDetectingApMac=cLSiIdrClusterDetectingApMac, ciscoLwappSiMIBNotifObjects=ciscoLwappSiMIBNotifObjects, cLSiD11IdrReportingEnable=cLSiD11IdrReportingEnable, cLSiApIfRapidUpdateEnable=cLSiApIfRapidUpdateEnable, cLSiApIfDetailSpectrumModeEnable=cLSiApIfDetailSpectrumModeEnable, cLSiIdrClusterDeviceSignatureLen=cLSiIdrClusterDeviceSignatureLen, cLSiAqChannelNumber=cLSiAqChannelNumber, cLSiAqMinIndex=cLSiAqMinIndex, cLSiD11IdrTrapDeviceList=cLSiD11IdrTrapDeviceList, cLSiAqInterferenceClassReportIndex=cLSiAqInterferenceClassReportIndex, cLSiD11Band=cLSiD11Band, cLSiIdrDeviceId=cLSiIdrDeviceId, cLSiPersistentDeviceChanIndex=cLSiPersistentDeviceChanIndex, cLSiD11EventDrivenRrmEnable=cLSiD11EventDrivenRrmEnable, cLSiIdrClusterAntennaId=cLSiIdrClusterAntennaId, cLSiChannelRSSI=cLSiChannelRSSI, ciscoLwappSiAqLowRev1=ciscoLwappSiAqLowRev1, cLSiAqEntry=cLSiAqEntry, cLSiIdrClusterDeviceId=cLSiIdrClusterDeviceId, cLSiD11EventDrivenRrmConfigSup1Group=cLSiD11EventDrivenRrmConfigSup1Group, cLSiD11EventDrivenRrmConfigGroup=cLSiD11EventDrivenRrmConfigGroup, ciscoLwappSiAqLow=ciscoLwappSiAqLow, cLSiAqIndex=cLSiAqIndex, cLSiApIfSensordErrorCode=cLSiApIfSensordErrorCode, cLSiIdrClusterRssi=cLSiIdrClusterRssi, ciscoLwappSiDot11Band=ciscoLwappSiDot11Band, cLSiD11IdrPersistentDevicePropagation=cLSiD11IdrPersistentDevicePropagation, cLSiPersistentDeviceEntry=cLSiPersistentDeviceEntry, cLSiIdrClusterRadioBandId=cLSiIdrClusterRadioBandId, cLSiD11IdrUnclassifiedCurrentSevIndex=cLSiD11IdrUnclassifiedCurrentSevIndex, cLSiIdrRadioBandId=cLSiIdrRadioBandId, cLSiAqInterferenceDutyCycle=cLSiAqInterferenceDutyCycle, cLSiApIfStatusGroup=cLSiApIfStatusGroup, cLSiIdrClusterClusterId=cLSiIdrClusterClusterId, cLSiAqInterferenceClassReportTable=cLSiAqInterferenceClassReportTable, cLSiD11InterferenceDeviceList=cLSiD11InterferenceDeviceList, ciscoLwappSiSensorCrash=ciscoLwappSiSensorCrash, cLSiAqInterferenceClassReportDeviceCount=cLSiAqInterferenceClassReportDeviceCount, cLSiD11AqiTrapEnable=cLSiD11AqiTrapEnable, cLSiAqTable=cLSiAqTable, cLSiAqInterferenceClassReportSeverityIndex=cLSiAqInterferenceClassReportSeverityIndex, cLSiDot11BandTable=cLSiDot11BandTable, cLSiIdrClusterAffectedChannels=cLSiIdrClusterAffectedChannels, cLSiD11IdrUnclassifiedTrapEnable=cLSiD11IdrUnclassifiedTrapEnable, cLSiAqInterferenceClassReportStatusGroup=cLSiAqInterferenceClassReportStatusGroup, cLSiD11SpectrumIntelligenceEnable=cLSiD11SpectrumIntelligenceEnable, cLSiD11ConfigGroup=cLSiD11ConfigGroup, ciscoLwappInterference=ciscoLwappInterference, cLSiIdrDeviceSignatureLen=cLSiIdrDeviceSignatureLen, cLSiAqInterferenceClassReportPower=cLSiAqInterferenceClassReportPower, cLSiPersistentDeviceChanTable=cLSiPersistentDeviceChanTable, cLSiD11PollingInterval=cLSiD11PollingInterval, ciscoLwappSiAqBufferUnavailable=ciscoLwappSiAqBufferUnavailable, cLSiApIfTable=cLSiApIfTable, cLSiAqInterferenceDeviceCount=cLSiAqInterferenceDeviceCount, ciscoLwappSiAqBufferUnavailableRev1=ciscoLwappSiAqBufferUnavailableRev1, ciscoLwappSiMIBCompliances=ciscoLwappSiMIBCompliances, cLSiIdrTable=cLSiIdrTable, cLSiIdrAffectedChannels=cLSiIdrAffectedChannels, cLSiIdrStatusGroup=cLSiIdrStatusGroup, ciscoLwappSiMIB=ciscoLwappSiMIB, cLSiD11EventDrivenRrmThresLvl=cLSiD11EventDrivenRrmThresLvl, cLSiD11ConfigSup1Group=cLSiD11ConfigSup1Group, cLSiIdrClusterDeviceType=cLSiIdrClusterDeviceType, cLSiD11AqiTrapThreshold=cLSiD11AqiTrapThreshold, cLSiIdrDetectingApMac=cLSiIdrDetectingApMac, ciscoLwappSiMIBNotifVariableGroup=ciscoLwappSiMIBNotifVariableGroup, cLSiPersistentDeviceStatusGroup=cLSiPersistentDeviceStatusGroup, cLSiPersistentDeviceChanEntry=cLSiPersistentDeviceChanEntry, ciscoLwappApSiMIBCompliance=ciscoLwappApSiMIBCompliance, ciscoLwappSiMIBConform=ciscoLwappSiMIBConform, cLSiAqTotalChannelDutyCycle=cLSiAqTotalChannelDutyCycle, cLSiIdrClusterId=cLSiIdrClusterId, ciscoLwappSiMIBGroups=ciscoLwappSiMIBGroups, cLSiPersistentDeviceType=cLSiPersistentDeviceType, cLSiIdrDutyCycle=cLSiIdrDutyCycle, cLSiDot11BandEventDrivenRrmTable=cLSiDot11BandEventDrivenRrmTable, cLSiIdrTimeStamp=cLSiIdrTimeStamp, cLSiIdrClusterTable=cLSiIdrClusterTable, cLSiChannelUtil=cLSiChannelUtil, cLSiAqInterferencePower=cLSiAqInterferencePower, cLSiAqInterfererClassReportCount=cLSiAqInterfererClassReportCount, cLSiD11IdrUnclassifiedTrapThreshold=cLSiD11IdrUnclassifiedTrapThreshold, ciscoLwappSiAqLowSeverityHighRev1=ciscoLwappSiAqLowSeverityHighRev1, cLSiAqInterferenceClassReportDutyCycle=cLSiAqInterferenceClassReportDutyCycle, cLSiApAqLimit=cLSiApAqLimit, cLSiIdrClusterCenterIndex=cLSiIdrClusterCenterIndex, ciscoLwappSiMIBObjects=ciscoLwappSiMIBObjects, cLSiIdrAntennaId=cLSiIdrAntennaId, cLSiApIfConfigGroup=cLSiApIfConfigGroup, cLSiAqInterferenceClassReportDeviceClass=cLSiAqInterferenceClassReportDeviceClass, cLSiIdrClusterEntry=cLSiIdrClusterEntry, cLSiAqChannelStatusGroup=cLSiAqChannelStatusGroup, cLSiIdrSeverity=cLSiIdrSeverity, cLSiIdrClusterTimeStamp=cLSiIdrClusterTimeStamp, cLSiIdrClusterDutyCycle=cLSiIdrClusterDutyCycle, cLSiAqInterferenceClassReportEntry=cLSiAqInterferenceClassReportEntry, ciscoLwappSiMIBNotifGroup=ciscoLwappSiMIBNotifGroup, cLSiIdrClusterType=cLSiIdrClusterType, ciscoLwappSiIdrDeviceRev1=ciscoLwappSiIdrDeviceRev1, cLSiIdrClusterSeverity=cLSiIdrClusterSeverity, cLSiDot11BandEntry=cLSiDot11BandEntry, cLSiApIfSensordOperationalStatus=cLSiApIfSensordOperationalStatus, cLSiAlarmClear=cLSiAlarmClear, ciscoLwappSiIdrDevice=ciscoLwappSiIdrDevice, cLSiPersistentDeviceChanStatusGroup=cLSiPersistentDeviceChanStatusGroup, cLSiIdrDeviceSignature=cLSiIdrDeviceSignature)
