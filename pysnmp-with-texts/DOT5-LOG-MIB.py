#
# PySNMP MIB module DOT5-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOT5-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
dot5, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "dot5")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter32, Integer32, Counter64, NotificationType, ObjectIdentity, iso, MibIdentifier, ModuleIdentity, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter32", "Integer32", "Counter64", "NotificationType", "ObjectIdentity", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dot5Rev1 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1))
tRing = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1))
tRingMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1))
tRingMgmtRing = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1))
tRingMgmtStn = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2))
tRingMgmtHost = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 3))
tRingMgmtSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4))
tRingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2))
tRingStatsRing = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1))
tRingStatsRingErrs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1))
tRingStatsRingProtos = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2))
tRingStatsRingSizes = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3))
tRingStatsStn = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2))
tRingStatsReset = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 3))
tRingAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3))
tRingAlarmsRing = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1))
tRingAlarmsRingEnbl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1))
tRingAlarmsRingThrsh = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 2))
tRingAlarmsStn = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2))
tRingAlarmsStnEnbl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1))
tRingAlarmsStnThrsh = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2))
tRingPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2))
tRingPort = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3))
tRingPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1))
tRingPortStn = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2))
tRingPortRing = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3))
tRingIf = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 4))
tRingMgmtRingName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtRingName.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtRingName.setDescription("The ASCII name assigned to this ring. This name defaults to 'Network n', where n is a unique integer value from 1 to n.")
tRingMgmtStnPortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtStnPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnPortCount.setDescription('Returns the total number of physical ports on this ring which may be controlled by this device.')
tRingMgmtRingPortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtRingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtRingPortCount.setDescription('Returns the total number of ring in/out ports on this ring which may be controlled by this device.')
tRingMgmtStnPortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtStnPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnPortsEnable.setDescription('Setting this object to enable will cause all the station ports on the ring which may be controlled by this device to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
tRingMgmtRingPortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtRingPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtRingPortsEnable.setDescription('Setting this object to enable will cause all the ring in/out ports on the ring which may be controlled by this device to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
tRingMgmtStnPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtStnPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnPortsOn.setDescription('Returns the total number of enabled station ports on this ring which may be controlled by this device.')
tRingMgmtRingPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtRingPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtRingPortsOn.setDescription('Returns the total number of enabled ring in/out ports on this ring which may be controlled by this device.')
tRingMgmtStations = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtStations.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStations.setDescription('Returns the number of stations currently inserted on the ring, if known (includes this device). If not known, returns zero.')
tRingMgmtRingState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("closed", 2), ("normalTokenProtocols", 3), ("purge", 4), ("contention", 5), ("beaconing", 6), ("lobeFail", 7), ("ringPollFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtRingState.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtRingState.setDescription('Returns the operational state of the ring, if known.')
tRingMgmtRingSpeed = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtRingSpeed.setDescription('Returns the ring speed of the ring, if known. The speed is designated by the value returned: unknown..............0 fourMegaBits.........4 sixteenMegaBits.....16 ')
tRingMgmtActiveMonitor = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtActiveMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtActiveMonitor.setDescription('Returns the address of the active monitor on this ring, if known. If unknown, the NULL address (00-00-00-00-00-00) is returned.')
tRingMgmtRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtRingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtRingNumber.setDescription('A read of this object returns the ring number of the attached ring. If the ring number is indeterminate, a zero is returned.')
tRingMgmtBeaconRecovery = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBeaconRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBeaconRecovery.setDescription("This object controls the operation of beacon recovery. A write of disable to this object will cause the beacon recovery process to become inactive on this host. A write of enable will cause the beacon recovery process to become active. If beacon recovery is inoperable on the managing device this object will return 'BADSETINFO'. A read of this object will return the current value of this object, reflecting either the last request made or, in the case of a device which is unable to manage beacon recovery, invalid. This object either defaults to enabled or invalid, depending on whether the device can or cannot manage beacon recovery.")
tRingMgmtBcnRecRingPortRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBcnRecRingPortRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBcnRecRingPortRetryCount.setDescription('This object defines the number of times a token ring ring port will be re-enabled after it has been determined that the port is causing the ring to beacon. Values other than 0-100 and 999 will result in MIB bad value. Default of object is product dependent. Refer to individual product documentation. Valid integer values are defined as: 0 ...disable ring port retries 1 - 100 ...retry ring port n times 999 ... retry ring port infinite times')
tRingMgmtBcnRecRingPortRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBcnRecRingPortRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBcnRecRingPortRetryDelay.setDescription('This object defines the time delay between disabling a token ring ring port due to beaconing and re-enabling the port to check the state of the ring port. Setting this object to zero disables retry queue. Non-zero value is delay in seconds. Some products have resolutions that will round this value (in seconds) to the nearest multiple of 7 seconds. Default of object is product dependent. Refer to individual product documentation.')
tRingMgmtBcnRecStnPortRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBcnRecStnPortRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBcnRecStnPortRetryCount.setDescription('This object defines the number of times a token ring station port will be re-enabled after it has been determined that the port is causing the ring to beacon. Values other than 0-100 and 999 will result in MIB bad value. Default of object is product dependent. Refer to individual product documentation. Valid integer values are defined as: 0 ...disable station port retries 1 - 100 ...retry station port n times 999 ... retry station port infinite times')
tRingMgmtBcnRecStnPortRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBcnRecStnPortRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBcnRecStnPortRetryDelay.setDescription('This object defines the time delay between disabling a token ring station port due to beaconing and re-enabling the port to check the state of the station port. Setting this object to zero disables retry queue. Non-zero value is delay in seconds. Some products have resolutions that will round this value (in seconds) to the nearest multiple of 7 seconds. Default of object is product dependent. Refer to individual product documentation.')
tRingMgmtBcnRecBrdBypassRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBcnRecBrdBypassRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBcnRecBrdBypassRetryCount.setDescription('This object defines the number of times a token ring MIM board, having been bypassed by beacon recovery, will be un-bypassed to determine if the MIM board is causing the ring to beacon. Values other than 0-100 and 999 will result in MIB bad value. Valid integer values are defined as: 0 ...disable MIM bypass retries 1 - 100 ...retry MIM board un-bypass n times 999 ...retry MIM board un-bypass infinite times Default value is 1.')
tRingMgmtBcnRecBrdBypassRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBcnRecBrdBypassRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBcnRecBrdBypassRetryDelay.setDescription('This object defines the time delay between bypassing a token ring MIM board due to beaconing and re-enabling the MIM board to check the state of the board. Setting this object to zero disables retry queue. Non-zero value is delay in seconds with a delay resolution of 1 second.')
tRingMgmtBcnRecBrdWrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBcnRecBrdWrapRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBcnRecBrdWrapRetryCount.setDescription('This object defines the number of times a token ring MIM board, having been wrapped left or right by beacon recovery, will be un-wrapped to determine if the MIM board is causing the ring to beacon. Values other than 0-100 and 999 will result in MIB bad value. Valid integer values are defined as: 0 ...disable MIM bypass retries 1 - 100 ...retry MIM board un-bypass n times 999 ...retry MIM board un-bypass infinite times Default value is 1.')
tRingMgmtBcnRecBrdWrapRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtBcnRecBrdWrapRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtBcnRecBrdWrapRetryDelay.setDescription('This object defines the time delay between wrapping a token ring MIM board left or right due to beaconing and un-wrapping the MIM board to check the state of the board. Setting this object to zero disables retry queue. Non-zero value is delay in seconds with a delay resolution of 1 second.')
tRingMgmtRingPollRecovery = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtRingPollRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtRingPollRecovery.setDescription("This object controls the operation of ring poll failure recovery. A write of disable to this object will cause the ring poll failure recovery process to become inactive on this host. A write of enable will cause the ring poll failure recovery process to become active. If ring poll failure recovery is inoperable on the managing device this object will return `BADSETINFO'. A read of this object will return the current value of this object, reflecting either the last request made or, in the case of a device which is unable to manage ring poll failure recovery, invalid. This object defaults to enabled.")
tRingMgmtStnTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: tRingMgmtStnTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnTable.setDescription('A list of the stations, by MAC address, participating in the ring poll process of this ring.')
tRingMgmtStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingMgmtStnAddress"))
if mibBuilder.loadTexts: tRingMgmtStnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnEntry.setDescription('A list of the objects pertaining to a station participating in the ring poll process of this ring.')
tRingMgmtStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtStnAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnAddress.setDescription('Returns the MAC address of the station for which the information in this table pertains.')
tRingMgmtStnName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtStnName.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnName.setDescription('An ASCII name assigned to this station.')
tRingMgmtStnBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtStnBoard.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnBoard.setDescription('Returns the slot number of the Token Ring board this station is connected to. Board numbers are given as 1 thru n. If unknown, a zero is returned.')
tRingMgmtStnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtStnPort.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnPort.setDescription('Returns the port number of the port on the Token Ring board this station is connected to. Port numbers are given as 1 thru n. If unknown, a zero is returned.')
tRingMgmtStnUNA = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtStnUNA.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnUNA.setDescription("Returns the address of the station's nearest upstream neighbor. If unknown, the NULL address (00-00-00-00-00-00) is returned.")
tRingMgmtStnDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtStnDNA.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnDNA.setDescription("Returns the address of the station's nearest downstream neighbor. If unknown, the NULL address (00-00-00-00-00-00) is returned.")
tRingMgmtStnPhysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtStnPhysLocation.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnPhysLocation.setDescription('A read of this object returns the physical location of the station. A write of this object assigns a user-defined value indicative of the physical location, or drop, of the station. If the location is unknown or cannot be determined, a zero is returned.')
tRingMgmtStnFuncClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtStnFuncClasses.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnFuncClasses.setDescription("A read of this object returns the station's enabled function class mask.")
tRingMgmtStnPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtStnPriority.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnPriority.setDescription("A read of this object returns the station's maximum access priority.")
tRingMgmtStnRemoveStn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRemove", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtStnRemoveStn.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtStnRemoveStn.setDescription('A write of remove to this object will cause the station to remove itself from the ring. A write of noRemove will do nothing. A read of this object will return the last request made.')
tRingMgmtHostCommands = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nop", 1), ("hwReset", 2), ("swReset", 3), ("open", 4), ("close", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtHostCommands.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtHostCommands.setDescription('A write to this object performs the indicated command. Either of the reset commands will reset the adapter using default parameters and both imply re-insertion onto the ring. A read of this object will return the last command issued to the adapter.')
tRingMgmtHostOpenStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOpen", 1), ("badParam", 2), ("lobeTestFailed", 3), ("signalLoss", 4), ("insertionTimeout", 5), ("ringFailed", 6), ("beaconing", 7), ("duplicateMACAddress", 8), ("requestFailed", 9), ("removeReceived", 10), ("open", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtHostOpenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtHostOpenStatus.setDescription('A read of this object will return the result of the last open command issued to the adapter.')
tRingMgmtHostErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtHostErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtHostErrorStatus.setDescription('A read of this object will return the last error status returned by the adapter. The status is the sum of the applicable error codes listed below: No Problem Detected..................0 Ring Recovery.......................32 Single Station......................64 Counter Overflow...................128 Remove Received....................256 Auto-removal Error................1024 Lobe Wire Fault...................2048 Transmit Beacon...................4096 Soft Error........................8192 Hard Error.......................16384 Signal Loss......................32768 No Status, Open Not Completed...131072 ')
tRingMgmtHostAMContention = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noContentionAllowed", 1), ("contentionAllowed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtHostAMContention.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtHostAMContention.setDescription('A write to this object will either allow the adapter to participate in the active monitor contention process or not. A read of this object will return the setting of this object.')
tRingMgmtHostTErrorReport = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtHostTErrorReport.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtHostTErrorReport.setDescription("A read of this object returns the host's error report timer value. The default timer value is defined as two seconds by the adapter's manufacturer.")
tRingMgmtHostLocalAdminMac = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtHostLocalAdminMac.setStatus('deprecated')
if mibBuilder.loadTexts: tRingMgmtHostLocalAdminMac.setDescription('A read of this object returns the MAC address assigned to the interface attached to this network. A write of this object provides for a locally administered MAC address.')
tRingMgmtSecurityAdminState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enableWithAlarm", 2), ("enableWithRemoveAndAlarm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtSecurityAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtSecurityAdminState.setDescription('A write to this object will either disable the security feature, enable Station Added trap being sent, or enable security withecurity feature with the remove station MAC frame being sent in addition to sending the Station Removed trap. A read of this object will return the setting of this object.')
tRingMgmtSecurityAddressAdd = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtSecurityAddressAdd.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtSecurityAddressAdd.setDescription("A write to this object will add a station's MAC address to the current secure station list within the device. The source routing bit within the MAC address is ignored. If the security list has reached its maximum number of entries, a BAD_VALUE error is returned. A read of this object will return a MAC address of 00-00-00-00-00-00.")
tRingMgmtSecurityAddressRemove = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingMgmtSecurityAddressRemove.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtSecurityAddressRemove.setDescription("A write to this object will remove a station's MAC address from the current secure station list within the device. The source routing bit within the MAC address is ignored. If a station is not found on the list, a BAD_VALUE error is returned. A read of this object will return a MAC address of 00-00-00-00-00-00.")
tRingMgmtSecurityStnCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtSecurityStnCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtSecurityStnCount.setDescription('Returns the number of stations on the secure station list.')
tRingMgmtSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4, 5), )
if mibBuilder.loadTexts: tRingMgmtSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtSecurityTable.setDescription('The list of secure stations allowed on the ring.')
tRingMgmtSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4, 5, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingMgmtSecurityIfIndex"), (0, "DOT5-LOG-MIB", "tRingMgmtSecurityStnAddress"))
if mibBuilder.loadTexts: tRingMgmtSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtSecurityEntry.setDescription('A list of objects pertaining to a station allowed on this ring.')
tRingMgmtSecurityIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtSecurityIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtSecurityIfIndex.setDescription('A read of this object will return the MIB-II ifIndex to the ring interface the station referenced by this MAC Address was seen on.')
tRingMgmtSecurityStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 1, 4, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingMgmtSecurityStnAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tRingMgmtSecurityStnAddress.setDescription('Returns the MAC address of the station on the secure station list')
tRingStatsRingFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFrames.setDescription('Returns the total number of all LLC frames that have passed around this ring. If this value cannot be determined, a zero is returned.')
tRingStatsRingKBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingKBytes.setDescription('Returns the total number of kilobytes from LLC frames that have passed around this ring. If this value cannot be determined, a zero is returned.')
tRingStatsRingLineErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingLineErrors.setDescription('Returns the total number of line errors that have occurred on this ring.')
tRingStatsRingBurstErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingBurstErrors.setDescription('Returns the total number of burst errors that have occurred on this ring.')
tRingStatsRingACErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingACErrors.setDescription('Returns the total number of address/copied errors that have occurred on this ring.')
tRingStatsRingAbortSequences = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingAbortSequences.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingAbortSequences.setDescription('Returns the total number of abort sequences that have been transmitted on this ring.')
tRingStatsRingInternalErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingInternalErrors.setDescription('Returns the number of internal errors that stations on this ring have detected.')
tRingStatsRingLostFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingLostFrames.setDescription('Returns the number of lost frames that have been detected on this ring.')
tRingStatsRingCongestErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingCongestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingCongestErrors.setDescription('Returns the number of times stations on this ring have reported receiver congestion errors.')
tRingStatsRingFCErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFCErrors.setDescription('Returns the number of frame copied errors that have occurred on this ring.')
tRingStatsRingTokenErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingTokenErrors.setDescription('Returns the number of token errors that have occurred on this ring.')
tRingStatsRingFreqErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFreqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFreqErrors.setDescription('Returns the total number of frequency errors on this ring.')
tRingStatsRingTotalErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingTotalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingTotalErrors.setDescription('This object returns the total number of errors reported by the objects in this table (tRingStatsRingErrs 3 thru tRingStatsRingErrs 12) that have occurred on this ring.')
tRingStatsRingAMChanges = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingAMChanges.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingAMChanges.setDescription('Returns the number of times the active monitor has changed on this ring.')
tRingStatsRingRingPurges = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingRingPurges.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingRingPurges.setDescription('Returns the number of times the active monitor has purged the ring.')
tRingStatsRingBeaconEvents = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingBeaconEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingBeaconEvents.setDescription('Returns the number of times this ring has entered the beaconing state.')
tRingStatsRingLongestBeacon = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingLongestBeacon.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingLongestBeacon.setDescription('Returns the length of time in TimeTicks of the longest beaconing state on this ring.')
tRingStatsRingLastBeacon = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingLastBeacon.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingLastBeacon.setDescription('Returns the length of time in TimeTicks of the last beaconing state on this ring.')
tRingStatsRingLastBeaconType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("recoveryModeSet", 1), ("signalLossError", 2), ("streamingSignalNotClaimToken", 3), ("streamingSignalClaimToken", 4), ("noBeaconFramesDetected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingLastBeaconType.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingLastBeaconType.setDescription('Returns the type of beaconing frames last seen on the ring.')
tRingStatsRingPollFailureNoRecovery = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingPollFailureNoRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingPollFailureNoRecovery.setDescription('Returns the number of times this ring could not recover from a ring poll failure since the last time this object was reset.')
tRingStatsRingPollFailureNNIFrameCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingPollFailureNNIFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingPollFailureNNIFrameCount.setDescription('Returns the number of times this device has detected Neighbor Notification Incomplete MAC frames on the ring since the last time this object was reset')
tRingStatsRingPollFailureNNIFrameAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingPollFailureNNIFrameAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingPollFailureNNIFrameAddress.setDescription('Returns the MAC address of the ring station that last successfully participated in the ring poll process during and after the ring poll failure process has executed. A value of 00-00-00-00-00-00 indicates that a ring poll has been detected.')
tRingStatsRingPollFailureLastNNIFrameTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingPollFailureLastNNIFrameTime.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingPollFailureLastNNIFrameTime.setDescription('Returns the timestamp of the last time a Neighbor Notification Complete MAC frame was received since the last time this object was reset. A value of zero indicates that no NNI frame was received.')
tRingStatsRingPollFailureLastDNAAddress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingPollFailureLastDNAAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingPollFailureLastDNAAddress.setDescription('Returns the last known downstream neighbor MAC address of the ring station that was reported in the Neighbor Notification Incomplete MAC frame. A value of 00-00-00-00-00-00 indicates that no NNI frame was yet received.')
tRingStatsRingProtocolSnaFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingProtocolSnaFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingProtocolSnaFrames.setDescription('Returns the count of SNA frames seen on this ring.')
tRingStatsRingProtocolXnsFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingProtocolXnsFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingProtocolXnsFrames.setDescription('Returns the count of XNS frames seen on this ring.')
tRingStatsRingProtocolTcpIpFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingProtocolTcpIpFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingProtocolTcpIpFrames.setDescription('Returns the count of TCP/IP frames seen on this ring.')
tRingStatsRingProtocolBanyanFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingProtocolBanyanFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingProtocolBanyanFrames.setDescription('Returns the count of Banyan frames seen on this ring.')
tRingStatsRingProtocolIpxFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingProtocolIpxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingProtocolIpxFrames.setDescription('Returns the count of Novell IPX frames seen on this ring.')
tRingStatsRingProtocolNetbiosFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingProtocolNetbiosFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingProtocolNetbiosFrames.setDescription('Returns the count of NetBIOS frames seen on this ring.')
tRingStatsRingProtocolLanNetMgrFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingProtocolLanNetMgrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingProtocolLanNetMgrFrames.setDescription('Returns the count of LAN Network Manager frames seen on this ring.')
tRingStatsRingProtocolOtherFrames = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingProtocolOtherFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingProtocolOtherFrames.setDescription('Returns the count of all other frame types seen on this ring.')
tRingStatsRingFramesizeUpTo63Bytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFramesizeUpTo63Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFramesizeUpTo63Bytes.setDescription('Returns the count of frames less than 64 bytes in size seen on this ring.')
tRingStatsRingFramesize64To127Bytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFramesize64To127Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFramesize64To127Bytes.setDescription('Returns the count of frames between 64 bytes and 127 bytes in size seen on this ring.')
tRingStatsRingFramesize128To255Bytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFramesize128To255Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFramesize128To255Bytes.setDescription('Returns the count of frames between 128 bytes and 255 bytes in size seen on this ring.')
tRingStatsRingFramesize256To511Bytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFramesize256To511Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFramesize256To511Bytes.setDescription('Returns the count of frames between 256 bytes and 511 bytes in size seen on this ring.')
tRingStatsRingFramesize512To1023Bytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFramesize512To1023Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFramesize512To1023Bytes.setDescription('Returns the count of frames between 512 bytes and 1023 bytes in size seen on this ring.')
tRingStatsRingFramesize1024To2047Bytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFramesize1024To2047Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFramesize1024To2047Bytes.setDescription('Returns the count of frames between 1024 bytes and 2047 bytes in size seen on this ring.')
tRingStatsRingFramesize2048To4095Bytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFramesize2048To4095Bytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFramesize2048To4095Bytes.setDescription('Returns the count of frames between 2048 bytes and 4095 bytes in size seen on this ring.')
tRingStatsRingFramesize4096AndUpBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsRingFramesize4096AndUpBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsRingFramesize4096AndUpBytes.setDescription('Returns the count of frames greater than 4096 bytes in size seen on this ring.')
tRingStatsStnTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: tRingStatsStnTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnTable.setDescription('A list of statistical objects reported by the stations participating in the ring poll process of this ring.')
tRingStatsStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingStatsStnAddress"))
if mibBuilder.loadTexts: tRingStatsStnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnEntry.setDescription('A list of statistical objects reported by a station which is participating in the ring poll process of this ring.')
tRingStatsStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnAddress.setDescription('Returns the MAC address to the station port for which the information in this table pertains.')
tRingStatsStnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnFrames.setDescription('This object returns the total number of LLC frames that have originated from this station.')
tRingStatsStnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnBytes.setDescription('Returns the total number of bytes from all LLC frames that have originated from this station.')
tRingStatsStnLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnLineErrors.setDescription('This object gives the number of line errors that have been detected by the station.')
tRingStatsStnBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnBurstErrors.setDescription('This object gives the number of burst errors that have been detected by the station.')
tRingStatsStnACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnACErrors.setDescription('Returns the total number of address/copied errors that that have been detected by the station.')
tRingStatsStnAbortSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnAbortSequences.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnAbortSequences.setDescription('This object gives the number of abort sequences that have been sent by the station.')
tRingStatsStnInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnInternalErrors.setDescription('This object gives the number of internal errors that have been detected by the station.')
tRingStatsStnLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnLostFrames.setDescription('This object gives the number of lost frames that have been detected by the station.')
tRingStatsStnCongestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnCongestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnCongestErrors.setDescription('This object gives the number of congestion errors that have been occurred at the station.')
tRingStatsStnFCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnFCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnFCErrors.setDescription('This object gives the number of frame copied errors that have been detected by the station.')
tRingStatsStnTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnTokenErrors.setDescription('This object gives the number of token errors that have been detected by the station while it was acting as the active monitor.')
tRingStatsStnFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnFreqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnFreqErrors.setDescription('This object gives the number of frequency errors that have been detected by the station.')
tRingStatsStnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsStnErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsStnErrors.setDescription('This object returns the sum of all errors reported by this table (tRingStatsStnEntry 4 thru tRingStatsStnEntry 13) that have been detected by this station.')
tRingStatsResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noResetCounters", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingStatsResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsResetCounters.setDescription("This object, when written with the value resetCounters, would reset all of this MIB's counter objects associated with the stations on this ring. This in turn resets all of this MIB's counter objects associated with this ring. Writing this object with the value noResetCounters has no effect. When read, this object returns noResetCounters.")
tRingStatsResetTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 2, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingStatsResetTime.setStatus('mandatory')
if mibBuilder.loadTexts: tRingStatsResetTime.setDescription("This object reports the time in TimeTicks that this ring's statistical counters were last reset via the tRingStatsResetCounters command. If the counters have not been reset, this value is zero.")
tRingAlarmsRingTimebase = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingTimebase.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingTimebase.setDescription('Get/Set alarm timebase. This timebase is used for all alarms pertaining to this ring (including station alarms). Measured in seconds. Minimum interval (default)...10 secs.')
tRingAlarmsRingRingPurgesEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingRingPurgesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingRingPurgesEnable.setDescription('A write of value 2 will enable the Ring Purges threshold alarm. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsRingAMPErrsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingAMPErrsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingAMPErrsEnable.setDescription('A write of value 2 will enable the Active Monitor Error threshold alarm. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsRingTokenErrsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingTokenErrsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingTokenErrsEnable.setDescription('A write of value 2 will enable the Token Errors threshold alarm. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsRingClaimTknErrsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingClaimTknErrsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingClaimTknErrsEnable.setDescription('A write of value 2 will enable the Claim Token Errors threshold alarm. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsRingLostFramesEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingLostFramesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingLostFramesEnable.setDescription('A write of value 2 will enable the Lost Frames threshold alarm. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsRingBeaconStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingBeaconStateEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingBeaconStateEnable.setDescription('A write of value 2 will enable the Beacon State threshold alarm. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsRingFrameCountEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingFrameCountEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingFrameCountEnable.setDescription('A write of value 2 will enable the total Frame Count threshold alarm. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsRingRingPurgesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingRingPurgesThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingRingPurgesThreshold.setDescription('The threshold alarm value for Ring Purges. Valid ranges are 1 to 36000 with a default value of 70.')
tRingAlarmsRingAMPErrsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingAMPErrsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingAMPErrsThreshold.setDescription('The threshold alarm value for Active Monitor Errors. Valid ranges are 1 to 1800 with a default value of 1.')
tRingAlarmsRingTokenErrsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingTokenErrsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingTokenErrsThreshold.setDescription('The threshold alarm value for Token Errors. Valid ranges are 5 to 7200 with a default value of 10.')
tRingAlarmsRingClaimTknThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingClaimTknThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingClaimTknThreshold.setDescription('The threshold alarm value for Claim Tokens. Valid ranges are 1 to 7200 with a default value of 5.')
tRingAlarmsRingLostFramesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingLostFramesThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingLostFramesThreshold.setDescription('The threshold alarm value for Lost Frames. Valid ranges are 5 to 7200 with a default value of 10.')
tRingAlarmsRingBeaconStateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingBeaconStateThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingBeaconStateThreshold.setDescription('The threshold alarm value for Beacon States. Valid ranges are 1 to 7200 with a default value of 1.')
tRingAlarmsRingFrameCountThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsRingFrameCountThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsRingFrameCountThreshold.setDescription('The threshold alarm value for the total Frame Count. Valid ranges are 2430 to 250000 with a default values of 8920 for 4 Mbps and 33890 for 16 Mbps ring speeds.')
tRingAlarmsStnEnblTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1, 1), )
if mibBuilder.loadTexts: tRingAlarmsStnEnblTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnEnblTable.setDescription('A list of alarm enabling objects pertaining to the stations participating in the ring poll process on this ring.')
tRingAlarmsStnEnblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingAlarmsStnEnblAddress"))
if mibBuilder.loadTexts: tRingAlarmsStnEnblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnEnblEntry.setDescription('A list of alarm enabling objects pertaining to a station participating in the ring poll process on this ring.')
tRingAlarmsStnEnblAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingAlarmsStnEnblAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnEnblAddress.setDescription('Returns the address of the station to which the information in this table pertains.')
tRingAlarmsStnEnblLineErrsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnEnblLineErrsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnEnblLineErrsEnable.setDescription('A write of value 2 will enable the Line Errors threshold alarm for this station. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsStnEnblInternalErrsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnEnblInternalErrsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnEnblInternalErrsEnable.setDescription('A write of value 2 will enable the Internal Errors threshold alarm for this station. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsStnEnblBurstErrsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnEnblBurstErrsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnEnblBurstErrsEnable.setDescription('A write of value 2 will enable the Burst Errors threshold alarm for this station. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsStnEnblACErrsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnEnblACErrsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnEnblACErrsEnable.setDescription('A write of value 2 will enable the Address Recognized/Frame Copied Errors threshold alarm for this station. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsStnEnblRcvrCongestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnEnblRcvrCongestEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnEnblRcvrCongestEnable.setDescription('A write of value 2 will enable the Receiver Congestion threshold alarm for this station. A write of value 1 will disable this threshold alarm (default).')
tRingAlarmsStnThrshTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: tRingAlarmsStnThrshTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnThrshTable.setDescription('A list of threshold alarm objects pertaining to the stations participating in the ring poll process on this ring.')
tRingAlarmsStnThrshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: tRingAlarmsStnThrshEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnThrshEntry.setDescription('A list of threshold alarm objects pertaining to a station participating in the ring poll process on this ring.')
tRingAlarmsStnThrshAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingAlarmsStnThrshAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnThrshAddress.setDescription('Returns the address of the station to which the information in this table pertains.')
tRingAlarmsStnThrshLineErrsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnThrshLineErrsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnThrshLineErrsThreshold.setDescription('The threshold alarm value for Line Errors. Valid ranges are 1 to 3600 with a default value of 2.')
tRingAlarmsStnThrshInternalErrsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnThrshInternalErrsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnThrshInternalErrsThreshold.setDescription('The threshold alarm value for Internal Errors. Valid ranges are 1 to 3600 with a default value of 1.')
tRingAlarmsStnThrshBurstErrsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnThrshBurstErrsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnThrshBurstErrsThreshold.setDescription('The threshold alarm value for Burst Errors. Valid ranges are 5 to 18000 with a default value of 10.')
tRingAlarmsStnThrshACErrsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnThrshACErrsThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnThrshACErrsThreshold.setDescription('The threshold alarm value for Address Recognized/Frame Copied Errors. Valid ranges are 1 to 1800 with a default value of 2.')
tRingAlarmsStnThrshRcvrCongestThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 1, 3, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingAlarmsStnThrshRcvrCongestThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tRingAlarmsStnThrshRcvrCongestThreshold.setDescription('The threshold alarm value for Receiver Congestion Errors. Valid ranges are 1 to 90000 with a default value of 124.')
tRingPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: tRingPortGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpTable.setDescription('A list of port group management objects which pertains to a collection of port groups making up this ring.')
tRingPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingPortGrpId"))
if mibBuilder.loadTexts: tRingPortGrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpEntry.setDescription('A list of port group management objects which pertains to a single instance of a port group residing on this ring.')
tRingPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
tRingPortGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpName.setDescription("An ASCII name assigned to this port group. The default name is Board n', where n is a number 1 through n.")
tRingPortGrpStnPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortGrpStnPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpStnPortCount.setDescription('This object defines the total number of station ports on the addressed board.')
tRingPortGrpRingPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortGrpRingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpRingPortCount.setDescription('This object defines the total number of ring ports (ring-in or ring-out) on the addressed board.')
tRingPortGrpStnPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortGrpStnPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpStnPortsEnable.setDescription('Setting this object to enable will cause all the station ports in this port group to be enabled. Setting this object to noEnable will have no effect on the station ports in this port group. When read this object will always return noEnable.')
tRingPortGrpRingPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortGrpRingPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpRingPortsEnable.setDescription('Setting this object to enable will cause all the ring ports in this port group to be enabled. Setting this object to noEnable will have no effect on the ring ports in this port group. When read this object will always return noEnable.')
tRingPortGrpStnPortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortGrpStnPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpStnPortsOn.setDescription('Returns the total number of enabled station ports in this port group.')
tRingPortGrpRingPortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortGrpRingPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpRingPortsOn.setDescription('Returns the total number of enabled ring in/out ports in this port group.')
tRingPortGrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("managementMode", 1), ("autoMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortGrpMode.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpMode.setDescription('This object defines the mode of the board. In Auto Mode, the board is using its hardware defaults. The default values of the board are all ports enabled, speed selected by the HW jumper on the board, the FNB attempts to attach left and right and not bypassed, ring port phantom current (if applicable) is controlled via a HW switch, and selectable media (if applicable) is managed also via a HW switch. In Management Mode, the hardware defaults may be overridden by network or local management.')
tRingPortGrpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16))).clone(namedValues=NamedValues(("fourMegaBits", 4), ("sixteenMegaBits", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortGrpSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpSpeed.setDescription('This object sets the speed of the board. On devices with a MAC interface this object is read-only, and will return NO SUCH NAME on write requests.')
tRingPortGrpSpeedFault = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFaultDetected", 1), ("faultDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortGrpSpeedFault.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpSpeedFault.setDescription('This object reports a ring speed fault.')
tRingPortGrpSpeedFaultLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("fnb", 2), ("ringIn", 3), ("ringOut", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortGrpSpeedFaultLocation.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpSpeedFaultLocation.setDescription('This object indicates the last ring speed fault detection circuit(s) to detect the fault, if there was one.')
tRingPortGrpBypassRingPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3), ("illegal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortGrpBypassRingPortState.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortGrpBypassRingPortState.setDescription('This object sets and reports the state of the ring bypass relay on those token ring boards which support the relay.')
tRingPortMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: tRingPortMgmtTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtTable.setDescription('A list of port management objects which pertains to a collection of ports in a port group residing on this ring.')
tRingPortMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingPortMgmtPortId"), (0, "DOT5-LOG-MIB", "tRingPortMgmtPortGrpId"))
if mibBuilder.loadTexts: tRingPortMgmtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtEntry.setDescription('A list of port management objects which pertains to a single instance of a port in a port group residing on this ring.')
tRingPortMgmtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortMgmtPortId.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
tRingPortMgmtPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortMgmtPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtPortGrpId.setDescription('Returns an index to a port group to which the port belongs for which the information in this table pertains.')
tRingPortMgmtPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortMgmtPortName.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtPortName.setDescription("Gets/Sets an ASCII name for this port. The default name for this object is 'Board b, Port p', where b and p are integers 1 through n.")
tRingPortMgmtPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortMgmtPortAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtPortAdminState.setDescription('Setting this object to enable will cause the port to be enabled. Setting this object to disable will cause the ports to be disabled. When read this object will always return the state of the last request.')
tRingPortMgmtPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOperational", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortMgmtPortOperState.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtPortOperState.setDescription('Returns the operational state of this port.')
tRingPortMgmtPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortMgmtPortType.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtPortType.setDescription('Uniquely defines the station or ring port type. An authoritative identification for a token ring station or ring port type. By convention, this value is allocated within the SMI enterprises subtree (1.3.6.1.4.1), and provides an easy and unambiguous means to determine the type of a token ring station or ring port.')
tRingPortMgmtSpeedFaultDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDetectable", 1), ("noFaultDetected", 2), ("faultDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortMgmtSpeedFaultDetect.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtSpeedFaultDetect.setDescription('This object indicates whether a speed fault has been detected at this port. If the HW is incapable of detecting a speed fault at the port, the value notDetectable is returned.')
tRingPortMgmtRingOutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortMgmtRingOutEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortMgmtRingOutEnable.setDescription('This object, when written, permits the port to function as either a ring out port or a station port, if available. If this selection is not supported by this port, then any write to this object will return a BADSETINFO error. When read, this object will return the state of the port with respect to this mode of operation. The default state of this object, if available, is disabled; otherwise it is notAvailable.')
tRingPortStnTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: tRingPortStnTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnTable.setDescription('A list of station port management objects which pertains to a collection of station ports in a port group residing on this ring.')
tRingPortStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingPortStnPortId"), (0, "DOT5-LOG-MIB", "tRingPortStnPortGrpId"))
if mibBuilder.loadTexts: tRingPortStnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnEntry.setDescription('A list of station port management objects which pertains to a single instance of a station port in a port group residing on this ring.')
tRingPortStnPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortStnPortId.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
tRingPortStnPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortStnPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnPortGrpId.setDescription('Returns an index to a port group to which the port belongs for which the information in this table pertains.')
tRingPortStnPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLink", 1), ("link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortStnPortLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnPortLinkState.setDescription('This object reports the link status of a port. The link status indicates the port is detecting a good phantom current.')
tRingPortStnPortLinkStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortStnPortLinkStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnPortLinkStateTime.setDescription("This object reports the amount of time in TimeTicks since the port's link state last changed.")
tRingPortStnPortMapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mappingEnabled", 1), ("mappingDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortStnPortMapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnPortMapEnable.setDescription("A write of mappingEnabled to this object permits a station port to be associated, or mapped, to a station participating in the ring poll process on this ring. A write of mappingDisabled prevents this association from taking place. This object is intended to be used when a network monitoring device, such as Network General's Sniffer (tm), is inserted on a ring but is not actively participating in the ring poll. The default value of this object is mappingEnabled.")
tRingPortStnPortMappedMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortStnPortMappedMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnPortMappedMacAddr.setDescription('This object reports the MAC address of the station mapped to this port, if known. If unknown, the NULL address is returned.')
tRingPortStnInsertionTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortStnInsertionTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortStnInsertionTrapEnable.setDescription('A write of enabled to this object permits the port inserted and port deinserted traps to be sent when phantom current has been asserted or removed, respectively, on this station port. A write of disabled prevents the traps from being sent. The default state of this object is disabled.')
tRingPortRingTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: tRingPortRingTable.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingTable.setDescription('A list of ring port management objects which pertains to a collection of ring ports in a port group residing on this ring.')
tRingPortRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "DOT5-LOG-MIB", "tRingPortRingPortId"), (0, "DOT5-LOG-MIB", "tRingPortRingPortGrpId"))
if mibBuilder.loadTexts: tRingPortRingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingEntry.setDescription('A list of ring port management objects which pertains to a single instance of a ring port in a port group residing on this ring.')
tRingPortRingPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortRingPortId.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
tRingPortRingPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortRingPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingPortGrpId.setDescription('Returns an index to a port group to which the port belongs for which the information in this table pertains.')
tRingPortRingPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAutowrap", 1), ("autowrap", 2), ("selectable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortRingPortClass.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingPortClass.setDescription('This object returns a code indicating whether the queried ring port is capable of either autowrapping or not, or whether the media type is selectable (implies autowrappability).')
tRingPortRingPortMediaSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noSelection", 1), ("stp", 2), ("fiber", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortRingPortMediaSelect.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingPortMediaSelect.setDescription('When written, this object allows for the selection of the media type for this ring port. If the ring port is not selectable and an attempt is made to change the media type, a BADSETINFO error will be returned. When read, this object will return the last selection made unless it is unselectable, in which case noSelection is returned.')
tRingPortRingFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("noFaultDetected", 2), ("faultDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortRingFaultStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingFaultStatus.setDescription('This object reports the media fault status of a ring port capable of auto-wrapping.')
tRingPortRingFaultStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortRingFaultStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingFaultStateTime.setDescription('This object reports the amount of time in TimeTicks since the ring port fault state last changed.')
tRingPortRingPhantomCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPhantomAvailable", 1), ("activatePhantom", 2), ("deactivatePhantom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tRingPortRingPhantomCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingPhantomCurrent.setDescription("When written with the value activatePhantom, this object activates the board's phantom current for the ring port, if applicable. This may be different from the HW switch setting. When written with the value deactivatePhantom, the board removes phantom current for this port, if applicable. This may be different from the HW switch setting. If the port does not support phantom drive, any write to this object will return a BADSETINFO error. When read, this object reports the state of the ring port's phantom drive status, whether enabled, disabled, or not supported.")
tRingPortRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ringIn", 1), ("ringOut", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingPortRingPortType.setStatus('mandatory')
if mibBuilder.loadTexts: tRingPortRingPortType.setDescription('This object reports the ring port type.')
tRingIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tRingIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tRingIfIndex.setDescription('A read of this object will return the MIB-II ifIndex to the interface this ring is attached to.')
mibBuilder.exportSymbols("DOT5-LOG-MIB", tRingMgmtBeaconRecovery=tRingMgmtBeaconRecovery, tRingStatsRingBurstErrors=tRingStatsRingBurstErrors, tRingAlarmsRingLostFramesEnable=tRingAlarmsRingLostFramesEnable, tRingStatsRingACErrors=tRingStatsRingACErrors, tRingStatsRingProtocolOtherFrames=tRingStatsRingProtocolOtherFrames, tRingAlarmsRing=tRingAlarmsRing, tRingStatsStnAddress=tRingStatsStnAddress, tRingStatsRingProtocolTcpIpFrames=tRingStatsRingProtocolTcpIpFrames, tRingMgmtHostLocalAdminMac=tRingMgmtHostLocalAdminMac, tRingStatsStnErrors=tRingStatsStnErrors, tRingIfIndex=tRingIfIndex, tRingMgmtStnDNA=tRingMgmtStnDNA, tRingMgmtSecurityStnAddress=tRingMgmtSecurityStnAddress, tRingMgmtStnTable=tRingMgmtStnTable, tRingAlarmsRingClaimTknThreshold=tRingAlarmsRingClaimTknThreshold, tRingStatsRingAbortSequences=tRingStatsRingAbortSequences, tRingPortRing=tRingPortRing, tRingMgmtStnFuncClasses=tRingMgmtStnFuncClasses, tRingStatsRingTotalErrors=tRingStatsRingTotalErrors, tRingPortGrpName=tRingPortGrpName, tRingPortMgmtPortType=tRingPortMgmtPortType, tRingAlarmsRingFrameCountThreshold=tRingAlarmsRingFrameCountThreshold, tRingStatsStnTable=tRingStatsStnTable, tRingStatsStnLostFrames=tRingStatsStnLostFrames, tRingPort=tRingPort, tRingStatsRingFramesize4096AndUpBytes=tRingStatsRingFramesize4096AndUpBytes, tRingPortMgmt=tRingPortMgmt, tRingStatsRingFramesizeUpTo63Bytes=tRingStatsRingFramesizeUpTo63Bytes, tRingPortGrp=tRingPortGrp, tRingStatsRingLostFrames=tRingStatsRingLostFrames, tRingPortGrpStnPortsOn=tRingPortGrpStnPortsOn, tRingPortRingPortClass=tRingPortRingPortClass, tRingStatsRingLastBeacon=tRingStatsRingLastBeacon, tRingPortMgmtPortAdminState=tRingPortMgmtPortAdminState, tRingStatsStnBytes=tRingStatsStnBytes, tRingStatsRingFrames=tRingStatsRingFrames, tRingMgmtStnPortsEnable=tRingMgmtStnPortsEnable, tRingStatsRingFramesize256To511Bytes=tRingStatsRingFramesize256To511Bytes, tRingStatsResetTime=tRingStatsResetTime, tRingMgmt=tRingMgmt, tRingStatsStnFrames=tRingStatsStnFrames, tRingAlarmsStnEnblACErrsEnable=tRingAlarmsStnEnblACErrsEnable, tRingPortGrpRingPortsOn=tRingPortGrpRingPortsOn, tRingStatsRingPollFailureNoRecovery=tRingStatsRingPollFailureNoRecovery, tRingAlarmsRingAMPErrsThreshold=tRingAlarmsRingAMPErrsThreshold, tRingPortRingPortId=tRingPortRingPortId, tRingStatsRingPollFailureNNIFrameCount=tRingStatsRingPollFailureNNIFrameCount, tRingMgmtStnPortsOn=tRingMgmtStnPortsOn, tRingStatsStnTokenErrors=tRingStatsStnTokenErrors, tRingStatsRingLastBeaconType=tRingStatsRingLastBeaconType, tRingMgmtHostTErrorReport=tRingMgmtHostTErrorReport, tRingPortMgmtRingOutEnable=tRingPortMgmtRingOutEnable, tRingMgmtBcnRecStnPortRetryDelay=tRingMgmtBcnRecStnPortRetryDelay, tRingMgmtStnPhysLocation=tRingMgmtStnPhysLocation, tRingAlarmsStnThrshAddress=tRingAlarmsStnThrshAddress, tRingPortRingPortMediaSelect=tRingPortRingPortMediaSelect, tRingAlarmsRingEnbl=tRingAlarmsRingEnbl, tRingStatsRingProtocolNetbiosFrames=tRingStatsRingProtocolNetbiosFrames, tRingStatsRingPollFailureLastNNIFrameTime=tRingStatsRingPollFailureLastNNIFrameTime, tRingPortGrpSpeedFault=tRingPortGrpSpeedFault, tRingStatsStnEntry=tRingStatsStnEntry, tRingMgmtStnUNA=tRingMgmtStnUNA, tRingPortRingEntry=tRingPortRingEntry, tRingStatsRingKBytes=tRingStatsRingKBytes, tRingMgmtHost=tRingMgmtHost, tRingStatsResetCounters=tRingStatsResetCounters, tRingStatsRingProtocolSnaFrames=tRingStatsRingProtocolSnaFrames, tRingAlarmsStnThrshTable=tRingAlarmsStnThrshTable, tRingMgmtHostErrorStatus=tRingMgmtHostErrorStatus, tRingPortMgmtPortOperState=tRingPortMgmtPortOperState, tRingStatsRingFramesize128To255Bytes=tRingStatsRingFramesize128To255Bytes, tRingAlarmsStnThrshBurstErrsThreshold=tRingAlarmsStnThrshBurstErrsThreshold, tRingStatsRingBeaconEvents=tRingStatsRingBeaconEvents, tRingMgmtHostOpenStatus=tRingMgmtHostOpenStatus, tRingMgmtRingName=tRingMgmtRingName, tRingStatsRingFCErrors=tRingStatsRingFCErrors, tRingPortRingFaultStatus=tRingPortRingFaultStatus, tRingStatsRingFramesize64To127Bytes=tRingStatsRingFramesize64To127Bytes, tRingStatsRingProtos=tRingStatsRingProtos, tRingPortGrpId=tRingPortGrpId, tRingMgmtHostAMContention=tRingMgmtHostAMContention, tRingStatsStnInternalErrors=tRingStatsStnInternalErrors, tRingPortGrpBypassRingPortState=tRingPortGrpBypassRingPortState, tRingPortStnEntry=tRingPortStnEntry, tRingPortStnPortId=tRingPortStnPortId, tRingStatsStnBurstErrors=tRingStatsStnBurstErrors, tRingAlarmsRingRingPurgesEnable=tRingAlarmsRingRingPurgesEnable, tRingStatsStnAbortSequences=tRingStatsStnAbortSequences, tRingStatsRingCongestErrors=tRingStatsRingCongestErrors, tRingAlarmsStnEnblBurstErrsEnable=tRingAlarmsStnEnblBurstErrsEnable, tRingMgmtRingPortsOn=tRingMgmtRingPortsOn, tRingPortGrpStnPortCount=tRingPortGrpStnPortCount, tRingStatsRingErrs=tRingStatsRingErrs, tRingMgmtStations=tRingMgmtStations, tRingMgmtStnBoard=tRingMgmtStnBoard, tRingPortRingPhantomCurrent=tRingPortRingPhantomCurrent, tRingAlarmsStnEnblLineErrsEnable=tRingAlarmsStnEnblLineErrsEnable, tRingStatsRing=tRingStatsRing, tRingPortGrpSpeed=tRingPortGrpSpeed, tRingAlarmsStnThrshRcvrCongestThreshold=tRingAlarmsStnThrshRcvrCongestThreshold, tRingStatsRingInternalErrors=tRingStatsRingInternalErrors, tRingMgmtRingNumber=tRingMgmtRingNumber, tRingPortGrpRingPortsEnable=tRingPortGrpRingPortsEnable, tRingStatsStnCongestErrors=tRingStatsStnCongestErrors, tRingStatsRingSizes=tRingStatsRingSizes, tRingMgmtStn=tRingMgmtStn, tRingMgmtActiveMonitor=tRingMgmtActiveMonitor, tRingMgmtSecurityAddressRemove=tRingMgmtSecurityAddressRemove, tRingStatsRingRingPurges=tRingStatsRingRingPurges, tRingAlarmsStnEnblEntry=tRingAlarmsStnEnblEntry, tRingPortStnPortGrpId=tRingPortStnPortGrpId, tRingAlarmsRingThrsh=tRingAlarmsRingThrsh, tRingStats=tRingStats, tRingMgmtStnPortCount=tRingMgmtStnPortCount, tRingStatsRingProtocolLanNetMgrFrames=tRingStatsRingProtocolLanNetMgrFrames, tRingPortStnPortMapEnable=tRingPortStnPortMapEnable, tRingMgmtStnEntry=tRingMgmtStnEntry, tRingAlarmsStnThrshLineErrsThreshold=tRingAlarmsStnThrshLineErrsThreshold, tRingAlarmsStnEnblAddress=tRingAlarmsStnEnblAddress, tRingPortGrpRingPortCount=tRingPortGrpRingPortCount, tRingMgmtRingPortCount=tRingMgmtRingPortCount, tRingMgmtStnRemoveStn=tRingMgmtStnRemoveStn, tRingAlarmsStnEnblTable=tRingAlarmsStnEnblTable, tRingStatsStnLineErrors=tRingStatsStnLineErrors, tRingPortRingTable=tRingPortRingTable, tRingPortMgmtPortGrpId=tRingPortMgmtPortGrpId, tRingAlarmsRingRingPurgesThreshold=tRingAlarmsRingRingPurgesThreshold, tRingPortStnTable=tRingPortStnTable, tRingMgmtBcnRecBrdWrapRetryDelay=tRingMgmtBcnRecBrdWrapRetryDelay, tRingMgmtStnPort=tRingMgmtStnPort, tRingStatsRingFramesize1024To2047Bytes=tRingStatsRingFramesize1024To2047Bytes, tRingPortGrpEntry=tRingPortGrpEntry, tRingStatsRingFramesize512To1023Bytes=tRingStatsRingFramesize512To1023Bytes, tRingMgmtRingSpeed=tRingMgmtRingSpeed, tRingMgmtRingPortsEnable=tRingMgmtRingPortsEnable, tRingAlarmsStnThrshInternalErrsThreshold=tRingAlarmsStnThrshInternalErrsThreshold, tRingStatsStnFreqErrors=tRingStatsStnFreqErrors, tRingPortRingPortType=tRingPortRingPortType, tRingStatsStn=tRingStatsStn, tRingPortStnPortMappedMacAddr=tRingPortStnPortMappedMacAddr, tRingMgmtStnPriority=tRingMgmtStnPriority, tRingPortGrpMode=tRingPortGrpMode, tRingPortStnPortLinkState=tRingPortStnPortLinkState, tRingAlarmsStnEnbl=tRingAlarmsStnEnbl, tRingPortGrpTable=tRingPortGrpTable, tRingMgmtBcnRecRingPortRetryDelay=tRingMgmtBcnRecRingPortRetryDelay, tRingStatsRingAMChanges=tRingStatsRingAMChanges, tRingMgmtBcnRecStnPortRetryCount=tRingMgmtBcnRecStnPortRetryCount, tRingMgmtRing=tRingMgmtRing, tRingStatsRingFreqErrors=tRingStatsRingFreqErrors, tRingMgmtBcnRecBrdWrapRetryCount=tRingMgmtBcnRecBrdWrapRetryCount, tRingPortStn=tRingPortStn, tRingAlarms=tRingAlarms, tRingMgmtSecurity=tRingMgmtSecurity, tRingAlarmsStn=tRingAlarmsStn, tRingMgmtBcnRecBrdBypassRetryDelay=tRingMgmtBcnRecBrdBypassRetryDelay, dot5Rev1=dot5Rev1, tRingMgmtHostCommands=tRingMgmtHostCommands, tRingStatsRingLineErrors=tRingStatsRingLineErrors, tRingStatsStnACErrors=tRingStatsStnACErrors, tRingAlarmsRingLostFramesThreshold=tRingAlarmsRingLostFramesThreshold, tRingAlarmsRingTokenErrsEnable=tRingAlarmsRingTokenErrsEnable, tRingAlarmsRingBeaconStateEnable=tRingAlarmsRingBeaconStateEnable, tRingAlarmsStnEnblRcvrCongestEnable=tRingAlarmsStnEnblRcvrCongestEnable, tRingStatsRingPollFailureNNIFrameAddress=tRingStatsRingPollFailureNNIFrameAddress, tRingAlarmsRingAMPErrsEnable=tRingAlarmsRingAMPErrsEnable, tRingMgmtSecurityAddressAdd=tRingMgmtSecurityAddressAdd, tRingAlarmsStnThrshEntry=tRingAlarmsStnThrshEntry, tRingStatsRingProtocolIpxFrames=tRingStatsRingProtocolIpxFrames, tRingPortGrpSpeedFaultLocation=tRingPortGrpSpeedFaultLocation, tRingStatsRingPollFailureLastDNAAddress=tRingStatsRingPollFailureLastDNAAddress, tRingMgmtSecurityEntry=tRingMgmtSecurityEntry, tRingStatsRingLongestBeacon=tRingStatsRingLongestBeacon, tRingPortMgmtTable=tRingPortMgmtTable, tRingMgmtStnAddress=tRingMgmtStnAddress, tRingStatsReset=tRingStatsReset, tRingStatsRingTokenErrors=tRingStatsRingTokenErrors, tRingAlarmsStnEnblInternalErrsEnable=tRingAlarmsStnEnblInternalErrsEnable, tRingAlarmsStnThrshACErrsThreshold=tRingAlarmsStnThrshACErrsThreshold, tRingMgmtSecurityTable=tRingMgmtSecurityTable, tRingPortMgmtPortName=tRingPortMgmtPortName, tRingAlarmsRingClaimTknErrsEnable=tRingAlarmsRingClaimTknErrsEnable, tRingStatsRingProtocolBanyanFrames=tRingStatsRingProtocolBanyanFrames, tRingAlarmsRingTokenErrsThreshold=tRingAlarmsRingTokenErrsThreshold, tRingAlarmsStnThrsh=tRingAlarmsStnThrsh, tRingAlarmsRingTimebase=tRingAlarmsRingTimebase, tRingAlarmsRingFrameCountEnable=tRingAlarmsRingFrameCountEnable, tRingPortStnInsertionTrapEnable=tRingPortStnInsertionTrapEnable, tRingMgmtBcnRecBrdBypassRetryCount=tRingMgmtBcnRecBrdBypassRetryCount, tRingStatsRingProtocolXnsFrames=tRingStatsRingProtocolXnsFrames, tRingMgmtSecurityStnCount=tRingMgmtSecurityStnCount, tRing=tRing, tRingMgmtRingState=tRingMgmtRingState, tRingMgmtSecurityAdminState=tRingMgmtSecurityAdminState, tRingMgmtStnName=tRingMgmtStnName, tRingMgmtSecurityIfIndex=tRingMgmtSecurityIfIndex, tRingPortMgmtEntry=tRingPortMgmtEntry, tRingMgmtBcnRecRingPortRetryCount=tRingMgmtBcnRecRingPortRetryCount, tRingAlarmsRingBeaconStateThreshold=tRingAlarmsRingBeaconStateThreshold, tRingPortRingPortGrpId=tRingPortRingPortGrpId, tRingPortGrpStnPortsEnable=tRingPortGrpStnPortsEnable, tRingPortRingFaultStateTime=tRingPortRingFaultStateTime, tRingMgmtRingPollRecovery=tRingMgmtRingPollRecovery, tRingStatsRingFramesize2048To4095Bytes=tRingStatsRingFramesize2048To4095Bytes, tRingPortMgmtPortId=tRingPortMgmtPortId, tRingStatsStnFCErrors=tRingStatsStnFCErrors, tRingPortStnPortLinkStateTime=tRingPortStnPortLinkStateTime, tRingIf=tRingIf, tRingPortMgmtSpeedFaultDetect=tRingPortMgmtSpeedFaultDetect)
