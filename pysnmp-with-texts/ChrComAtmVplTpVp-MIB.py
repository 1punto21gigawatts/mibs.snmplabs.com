#
# PySNMP MIB module ChrComAtmVplTpVp-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ChrComAtmVplTpVp-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:34:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
OperStatus, = mibBuilder.importSymbols("CISCO-RHINO-MIB", "OperStatus")
TruthValue, = mibBuilder.importSymbols("ChrTyp-MIB", "TruthValue")
chrComAtmVpl, = mibBuilder.importSymbols("Chromatis-MIB", "chrComAtmVpl")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, ModuleIdentity, Unsigned32, Bits, Gauge32, iso, ObjectIdentity, Counter64, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32", "iso", "ObjectIdentity", "Counter64", "IpAddress", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
chrComAtmVplTpVpTable = MibTable((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2), )
if mibBuilder.loadTexts: chrComAtmVplTpVpTable.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplTpVpTable.setDescription('Private table. This table does not augment the VPL table, since it contains entries only for VPC TPs.')
chrComAtmVplTpVpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2, 1), ).setIndexNames((0, "ChrComAtmVplTpVp-MIB", "chrComAtmVplifIndex"), (0, "ChrComAtmVplTpVp-MIB", "chrComAtmVplAtmVplVpi"))
if mibBuilder.loadTexts: chrComAtmVplTpVpEntry.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplTpVpEntry.setDescription('')
chrComAtmVplifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComAtmVplifIndex.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplifIndex.setDescription('Index of entry in the interface table')
chrComAtmVplAtmVplVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComAtmVplAtmVplVpi.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplAtmVplVpi.setDescription('The VPI value of the VPL')
chrComAtmVplCCSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComAtmVplCCSource.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplCCSource.setDescription('A boolean indication whether this TP implements CC source finctionality.')
chrComAtmVplCCSink = MibTableColumn((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComAtmVplCCSink.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplCCSink.setDescription('A boolean indication whether this TP implements CC sink finctionality')
chrComAtmVplTPOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComAtmVplTPOperStatus.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplTPOperStatus.setDescription('This object indicates the current operational status of the TP. The up and down states indicate that the TP is currently operational, or not operational, respectively. The unknown state indicates that the status of this TP cannot be determined. ')
chrComAtmVplAlarmVector = MibTableColumn((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chrComAtmVplAlarmVector.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplAlarmVector.setDescription('16 bit field. The following are bits relative positions (0=LSB), and the trap ID associated to each alarm state. 0. VPC-AIS atmfM4VpcTpAisAlarm 8. VPC-RDI atmfM4VpcTpRdiAlarm ')
chrComAtmVplAlarmSeverityProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3695, 1, 9, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chrComAtmVplAlarmSeverityProfileIndex.setStatus('current')
if mibBuilder.loadTexts: chrComAtmVplAlarmSeverityProfileIndex.setDescription('')
mibBuilder.exportSymbols("ChrComAtmVplTpVp-MIB", chrComAtmVplCCSource=chrComAtmVplCCSource, chrComAtmVplTpVpTable=chrComAtmVplTpVpTable, chrComAtmVplCCSink=chrComAtmVplCCSink, chrComAtmVplifIndex=chrComAtmVplifIndex, chrComAtmVplAlarmVector=chrComAtmVplAlarmVector, chrComAtmVplAtmVplVpi=chrComAtmVplAtmVplVpi, chrComAtmVplAlarmSeverityProfileIndex=chrComAtmVplAlarmSeverityProfileIndex, chrComAtmVplTPOperStatus=chrComAtmVplTPOperStatus, chrComAtmVplTpVpEntry=chrComAtmVplTpVpEntry)
