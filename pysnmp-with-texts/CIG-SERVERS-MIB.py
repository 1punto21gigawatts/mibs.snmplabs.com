#
# PySNMP MIB module CIG-SERVERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIG-SERVERS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Unsigned32, enterprises, Counter64, ModuleIdentity, MibIdentifier, Counter32, Gauge32, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Unsigned32", "enterprises", "Counter64", "ModuleIdentity", "MibIdentifier", "Counter32", "Gauge32", "NotificationType", "IpAddress")
TruthValue, RowStatus, DisplayString, TimeInterval, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TimeInterval", "TextualConvention", "DateAndTime")
cigServers = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16))
if mibBuilder.loadTexts: cigServers.setLastUpdated('200405180701Z')
if mibBuilder.loadTexts: cigServers.setOrganization('Avaya')
if mibBuilder.loadTexts: cigServers.setContactInfo(' Avaya Customer Services Postal: Avaya, Inc. 211 Mt Airy Rd. Basking Ridge, NJ 07920 USA Tel: +1 908 953 6000 WWW: http://www.avaya.com ')
if mibBuilder.loadTexts: cigServers.setDescription(" This module defines an interface configure Servers as Tftp and Dhcp servers. Copyright notice: This AVAYA SNMP Management Information Base Specification (Specification) embodies AVAYA confidential and Proprietary intellectual property. AVAYA retains all Title and ownership in the Specification, including any revisionsIt is AVAYA's intent to encourage the widespread use of this Specification in connection with the management of AVAYA products. AVAYA grants vendors, end-users, and other interested parties a non-exclusive license to use this Specification in connection with the management of AVAYA products.This Specification is supplied 'as is', and AVAYA makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification. ")
avaya = MibIdentifier((1, 3, 6, 1, 4, 1, 6889))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2))
lsg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1))
cigTftpServers = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1))
cigDhcpServers = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2))
cigTftpServersNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 0))
cigTftpServersDownloadFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 0, 1)).setObjects(("CIG-SERVERS-MIB", "cigTftpServersNotificationClientIpAddr"), ("CIG-SERVERS-MIB", "cigTftpServersNotificationFilename"), ("CIG-SERVERS-MIB", "cigTftpServersNotificationErrorString"))
if mibBuilder.loadTexts: cigTftpServersDownloadFailureTrap.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersDownloadFailureTrap.setDescription('Trap based on TFTP client failure to download file from gateway TFTP server. The Error code message strings are according RFC 1350: 0 Not defined 1 File not found. 2 Access violation. 3 Disk full or allocation exceeded. 4 Illegal TFTP operation. 5 Unknown transfer ID. 6 File already exists. 7 No such user.')
cigTftpServersUploadFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 0, 2)).setObjects(("CIG-SERVERS-MIB", "cigTftpServersNotificationClientIpAddr"), ("CIG-SERVERS-MIB", "cigTftpServersNotificationFilename"), ("CIG-SERVERS-MIB", "cigTftpServersNotificationErrorString"))
if mibBuilder.loadTexts: cigTftpServersUploadFailureTrap.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersUploadFailureTrap.setDescription('Trap based on TFTP client failure to upload file to gateway TFTP server. The Error code message strings are according RFC 1350: 0 Not defined 1 File not found. 2 Access violation. 3 Disk full or allocation exceeded. 4 Illegal TFTP operation. 5 Unknown transfer ID. 6 File already exists. 7 No such user. please note that the gateway TFTP server prevents uploading files to the device using TFTP client, pnly downloading files from the device. The upload files to the gateway TFTP server is by using LOAD-MIB.')
cigTftpServersGenConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 1))
cigTftpServersMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigTftpServersMode.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersMode.setDescription('Enable Tftp Server in the device. Default = False (Disable).')
cigTftpServersResetStatCounters = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigTftpServersResetStatCounters.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersResetStatCounters.setDescription('reset (1) - Reset the TFTP Server Statistics. This object should be treated as write-only.')
cigTftpServersMemoryAllocation = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 2))
cigTftpServersTotalBytesUsedInNvram = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersTotalBytesUsedInNvram.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersTotalBytesUsedInNvram.setDescription('Number of bytes used in nvram. Default = 0.')
cigTftpServersTotalBytesCapacityInNvram = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 2, 2), Unsigned32().clone(131072)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersTotalBytesCapacityInNvram.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersTotalBytesCapacityInNvram.setDescription('Number of bytes capacity in nvram. Default = 131072.')
cigTftpServersTotalBytesUsedInRam = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersTotalBytesUsedInRam.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersTotalBytesUsedInRam.setDescription('Number of bytes used in ram. Default = 0.')
cigTftpServersTotalBytesCapacityInRam = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 2, 4), Unsigned32().clone(20971520)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersTotalBytesCapacityInRam.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersTotalBytesCapacityInRam.setDescription('Number of bytes capacity in ram. Default = 20971520.')
cigTftpServersGenStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3))
cigTftpServersSuccessfulDownloads = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersSuccessfulDownloads.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersSuccessfulDownloads.setDescription('Number of tftp successful downloads. Default = 0.')
cigTftpServersNotDefinedErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersNotDefinedErrors.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersNotDefinedErrors.setDescription('Number of tftp errors not defined - Error code==0. Default = 0.')
cigTftpServersFileNotFoundErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersFileNotFoundErrors.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersFileNotFoundErrors.setDescription('Number of tftp errors of file not found - Error code == 1. Default = 0.')
cigTftpServersAccessViolationErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersAccessViolationErrors.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersAccessViolationErrors.setDescription('Number of tftp errors of Access violation - Error code == 2. Default = 0.')
cigTftpServersDiskFullErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersDiskFullErrors.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersDiskFullErrors.setDescription('Number of tftp errors of disk full - Error code == 3. Default = 0.')
cigTftpServersIllegalTFTPOperationErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersIllegalTFTPOperationErrors.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersIllegalTFTPOperationErrors.setDescription('Number of tftp errors of illegal TFTP operation - Error code == 4. Default = 0.')
cigTftpServersUnknownTransferIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersUnknownTransferIdErrors.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersUnknownTransferIdErrors.setDescription('Number of tftp errors of unknown transfer Id - Error code == 5. Default = 0.')
cigTftpServersFileAlreadyExistsErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersFileAlreadyExistsErrors.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersFileAlreadyExistsErrors.setDescription('Number of tftp errors of file already exists - Error code == 6. Default = 0.')
cigTftpServersNoSuchUserErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersNoSuchUserErrors.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersNoSuchUserErrors.setDescription('Number of tftp errors of no such user - Error code == 7. Default = 0.')
cigTftpServersDownloadTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigTftpServersDownloadTimeouts.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersDownloadTimeouts.setDescription('Number of tftp downloads timeouts. Timeouts occurs when ACK packets from client to Server did not reach the server.')
cigTftpServersNotificationPacket = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 4))
cigTftpServersNotificationClientIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 4, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cigTftpServersNotificationClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersNotificationClientIpAddr.setDescription('The TFTP client IP address. Default = 0.0.0.0')
cigTftpServersNotificationFilename = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cigTftpServersNotificationFilename.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersNotificationFilename.setDescription("The filename that the TFTP client tried to upload/download. Default = ''")
cigTftpServersNotificationErrorString = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 1, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cigTftpServersNotificationErrorString.setStatus('current')
if mibBuilder.loadTexts: cigTftpServersNotificationErrorString.setDescription("The error string relevant to the Error occured during the last upload/download operation. Default = ''")
cigDhcpServersNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 0))
cigDhcpServersClientConflictDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 0, 1)).setObjects(("CIG-SERVERS-MIB", "cigDhcpServersNotificationIpAddr"), ("CIG-SERVERS-MIB", "cigDhcpServersNotificationClientHostName"), ("CIG-SERVERS-MIB", "cigDhcpServersNotificationClientIdentifier"), ("CIG-SERVERS-MIB", "cigDhcpServersNotificationConflictDetectionMethod"))
if mibBuilder.loadTexts: cigDhcpServersClientConflictDetectionTrap.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersClientConflictDetectionTrap.setDescription('DHCP IP address conflict detection. This trap is based on: 1. DHCP server send Ping packets before allocating new IP address. 2. The Client Decline Packets after the client sent gratuitous Arp and get response.')
cigDhcpServersServerNacksTrap = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 0, 2)).setObjects(("CIG-SERVERS-MIB", "cigDhcpServersNotificationIpAddr"), ("CIG-SERVERS-MIB", "cigDhcpServersNotificationClientIdentifier"))
if mibBuilder.loadTexts: cigDhcpServersServerNacksTrap.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersServerNacksTrap.setDescription('Server refusal to extend lease or for other clients requests.')
cigDhcpServersNoIpAddressLeft = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 0, 3)).setObjects(("CIG-SERVERS-MIB", "cigDhcpServersNotificationClientIdentifier"), ("CIG-SERVERS-MIB", "cigDhcpServersNotificationPoolNetwork"))
if mibBuilder.loadTexts: cigDhcpServersNoIpAddressLeft.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersNoIpAddressLeft.setDescription('Notification for no IP address left for specific network.')
cigDhcpServersGenConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 1))
cigDhcpServersMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersMode.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersMode.setDescription('Enable Dhcp Server in the device. Default = False (Disable).')
cigDhcpServersResetStatCounters = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersResetStatCounters.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersResetStatCounters.setDescription('reset (1) - Reset the DHCP Server Statistics. This object should be treated as write-only.')
cigDhcpServersPingDetectionMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPingDetectionMode.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPingDetectionMode.setDescription('Enable Dhcp Server sending one ping packet in order to detect IP address conflict. Default = False (Disable).')
cigDhcpServersPingDetectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 1, 4), Unsigned32().clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPingDetectionTimeout.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPingDetectionTimeout.setDescription('The timeout in milliseconds of the ping packet send by the DHCP server to detect IP address conflict before allocating new IP address. The user can lower this timeout in case the hosts that recieved IP addresses are on the LAN. Otherwise if the hosts are on the WAN side then the timeout shall be higher the LAN. default 500 milliseconds')
cigDhcpServersPool = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2))
cigDhcpServersPoolTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1), )
if mibBuilder.loadTexts: cigDhcpServersPoolTable.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolTable.setDescription('Dhcp Pool General configuration table')
cigDhcpServersPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1), ).setIndexNames((0, "CIG-SERVERS-MIB", "cigDhcpServersPoolIndex"))
if mibBuilder.loadTexts: cigDhcpServersPoolEntry.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolEntry.setDescription('The pool general configuration table entry. ')
cigDhcpServersPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersPoolIndex.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolIndex.setDescription('The Pool Index. G250/G350 - Up to 20 Pools are allowed.')
cigDhcpServersPoolStartIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolStartIPAddr.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolStartIPAddr.setDescription('The Start IP Address of the pool. Default = 0.0.0.0. Stop IP address shall be large or equal to start IP address. The user shall be aware that for G350/G250 the number of IP addresses to be allocated in up to 256 IPs total in all the pools. Also if the user wants to completely change the start IP address/end IP address then the pool shall be Disabled and then by setting both these addresses (start/end) to default the user can set the new values. No need to erase the configuration of the pool for this case (I.e. in order not to loose all the DHCP options configuration). The user is not able to ocnfigure pools with overlapped IP addresses. StartIPaddress can be configured different than EndIPAddress only when Client identifier is not set. ')
cigDhcpServersPoolEndIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolEndIPAddr.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolEndIPAddr.setDescription('The End IP Address of the pool. Default = 0.0.0.0. End IP address shall be large or equal to start IP address. The user shall be aware that for G350/G250 the number of IP addresses to be allocated in up to 256 IPs total in all the pools. Also if the user wants to complete change the start IP address/end IP address then the pool shall be Disabled and then by setting both these addresses (start/end) to default the user can set the new values. No need to erase the configuration of the pool for this case (I.e. in order not to loose all the DHCP options configuration). The user is not able to ocnfigure pools with overlapped IP addresses. EndIPaddress can be configured different than StartIPAddress only when Client identifier is not set. ')
cigDhcpServersPoolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolMode.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolMode.setDescription('Enable Dhcp Pool in the device. Default = False (Disable,Inactive). It is recommended to enable/activate the pool only after the user configures all the DHCP pool parameters. The user can changes the parameters when the pool is Enable/active. However part of the clients will have different configuration. After enabling the user will Disable the pool only before deleting it or keeping its ocnfiguration for later use. In Disable mode the binding information is lost. The user can not activate pool with start-ip-addr or end-ip-addr == 0.0.0.0. ')
cigDhcpServersPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone('Dhcp Pool #')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolName.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolName.setDescription("Name of this Pool. Pool Default Name: 'Dhcp Pool #Pool Number' ")
cigDhcpServersPoolClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolClientID.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolClientID.setDescription("Client identifier used for manual leased. The strcuture of the client identifier is as follows: combination of TYPE and Data. Where Type = 01 if for Ethernet MACs and Data for this case if Ethernet MAC address. Default: '' - Null String. In this case no client identifier is defined. ClientIdentifier can only configured when cigDhcpServersPoolStartIPAddr is equal to cigDhcpServersPoolEndIPAddr. ")
cigDhcpServersPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 7), Unsigned32().clone(691200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolLeaseTime.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolLeaseTime.setDescription('The Pool leased time in seconds. Infinite is defined as 0xffffffff. default 691200 seconds = 8 days.')
cigDhcpServersPoolBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolBootFile.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolBootFile.setDescription('BootFile Field in the Dhcp packet. Default Null String.')
cigDhcpServersPoolNextServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolNextServer.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolNextServer.setDescription('Next Server Field in the Dhcp Packet. Default = 0.0.0.0')
cigDhcpServersPoolSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 10), IpAddress().clone(hexValue="ffffff00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolSubnetMask.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolSubnetMask.setDescription('Subnet Mask is Dhcp option 1. Default = 255.255.255.0 There is no ability to configure this option in the general option table.')
cigDhcpServersPoolDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 145))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolDefaultGateway.setDescription("Default Gateway is Dhcp option 3. Default = '' = Null String. The format of the string can be up to 8 IP addresses, for exapmle: '121.23.1.12 135.64.13.190 192.123.242.230' There is no ability to configure this option in the general option table.")
cigDhcpServersPoolDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 145))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolDnsServer.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolDnsServer.setDescription("DNS Server is Dhcp option 6. Default = '' = Null String. The format of the string can be up to 8 IP addresses, for exapmle: '121.23.1.12 135.64.13.190 192.123.242.230' There is no ability to configure this option in the general option table.")
cigDhcpServersPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolDomainName.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolDomainName.setDescription("DNS Server is Dhcp option 15. Default = Null String The format of the string can be: 'avaya' There is no ability to configure this option in the general option table. ")
cigDhcpServersPoolServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolServerName.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolServerName.setDescription('Optional Server Name. Default Null String.')
cigDhcpServersPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 1, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolRowStatus.setDescription("Used to create/delete a DHCP pool entry. The following values will be supported: - `active', which indicates that the conceptual row is available for use by the managed device; - `createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - `destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. ")
cigDhcpServersPoolGenOptionTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 2), )
if mibBuilder.loadTexts: cigDhcpServersPoolGenOptionTable.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolGenOptionTable.setDescription('Dhcp Pool General Option configuration table')
cigDhcpServersPoolGenOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 2, 1), ).setIndexNames((0, "CIG-SERVERS-MIB", "cigDhcpServersOptionPoolIndex"), (0, "CIG-SERVERS-MIB", "cigDhcpServersOptionIndex"))
if mibBuilder.loadTexts: cigDhcpServersPoolGenOptionEntry.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolGenOptionEntry.setDescription('The pool general option configuration table entry. The following option numbers are not configurable: Specific Options defined in the pool table: Option 1 - Subnet Mask Option 3 - Default Gateway Option 6 - Dns Servers Option 15 - Dns Name General Options that are not configurable according RFC2131, 2132: Option 0 - Pad Option Option 50 - Requested IP Address Option 51 - IP address Lease Time Option 52 - Option Overload Option 53 - Message Type Option 54 - Server Identifier Option 55 - Parameter Request List Option 56 - Message Option 57 - Maximum DHCP Message Size Option 58 - Renewal (T1) Time Value Option 59 - Rebinding (T2) Time Value Option 60 - Vendor Class Identifier Option 61 - Client Identifier Option 255 - End Option ')
cigDhcpServersOptionPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersOptionPoolIndex.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersOptionPoolIndex.setDescription('The DHCP Pool Index')
cigDhcpServersOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersOptionIndex.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersOptionIndex.setDescription('The DHCP Option Index.')
cigDhcpServersOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('Option #')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersOptionName.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersOptionName.setDescription("Name of this DHCP option. Option Default Name: 'Option #Option Number' ")
cigDhcpServersOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ipAddresses", 3), ("integer", 4), ("word", 5))).clone('hex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersOptionType.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersOptionType.setDescription("The type of the DHCP option: ascii(1) is ASCII String as 'Avaya' hex(2) is HEX String as 'aa:bb:cc:dd:12:34:56' ipAddresses(3) can be array of up to 8 IP addresses with the structure as: '121.23.1.12 135.64.13.190 192.123.242.230' integer(4) - unsigned 32 bits integer word(5) - unsigned 16 bits integer The defaults of cigDhcpServersOptionValue shall be changed according setting the type. If setting Type == ascii(1) then the default is '' If setting Type == hex(2) then the default is '' If setting Type == ipAddresses(3) then the default is '0.0.0.0' If setting Type == integer(4) then the default is '00000000' If setting Type == word(5) then the default is '0000' ")
cigDhcpServersOptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersOptionValue.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersOptionValue.setDescription('The Value of the DHCP option according the TYPE field. Maximum length is 255B in case of ascii or hex, 145B for ipaddresses, 4B for integer and 2B for word. ')
cigDhcpServersOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersOptionRowStatus.setDescription("Used to create/delete a DHCP option entry. The following values will be supported: - `active', which indicates that the conceptual row is available for use by the managed device; - `createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - `destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. ")
cigDhcpServersPoolVendorSpecificOptionTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3), )
if mibBuilder.loadTexts: cigDhcpServersPoolVendorSpecificOptionTable.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolVendorSpecificOptionTable.setDescription('Dhcp Pool Vendor Specific Option configuration table')
cigDhcpServersPoolVendorSpecificOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3, 1), ).setIndexNames((0, "CIG-SERVERS-MIB", "cigDhcpServersVendorSpecificOptionPoolIndex"), (0, "CIG-SERVERS-MIB", "cigDhcpServersVendorSpecificOptionIndex"))
if mibBuilder.loadTexts: cigDhcpServersPoolVendorSpecificOptionEntry.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersPoolVendorSpecificOptionEntry.setDescription('The pool Vendor Specific option configuration table entry. ')
cigDhcpServersVendorSpecificOptionPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionPoolIndex.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionPoolIndex.setDescription('The DHCP Pool Index')
cigDhcpServersVendorSpecificOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionIndex.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionIndex.setDescription('The DHCP Vendor Specific Option Index. G250/G350 - Up to 10 Vendor Specific options are allowed.')
cigDhcpServersVendorSpecificOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('Vendor Specific Option #')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionName.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionName.setDescription("Name of this DHCP Vednor specififc option. Vendor Specific Option Default Name: 'Vendor Specififc Option #Index Number' ")
cigDhcpServersVendorSpecificClassIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificClassIdentifier.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificClassIdentifier.setDescription('The vendor specific class identifier which transmit in option 60 by the client. Default is null string')
cigDhcpServersVendorSpecificOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2))).clone('hex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionType.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionType.setDescription("The type of the DHCP vendor specififc option: ascii(1) is ASCII String as 'Avaya' hex(2) is HEX String as 'aa:bb:cc:dd:12:34:56' The defaults of cigDhcpServersVendorSpecificOptionValue shall be changed according setting the type. If setting Type == ascii(1) then the default is '' If setting Type == hex(2) then the default is '' ")
cigDhcpServersVendorSpecificOptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionValue.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionValue.setDescription('The Value of the DHCP vendor specififc option according the Type field. Maximum length is 255B in case of ascii or hex.')
cigDhcpServersVendorSpecificOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 2, 3, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersVendorSpecificOptionRowStatus.setDescription("Used to create/delete a DHCP Vendor Specific option entry. The following values will be supported: - `active', which indicates that the conceptual row is available for use by the managed device; - `createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - `destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. ")
cigDhcpServersGenStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3))
cigDhcpServersBootRequests = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersBootRequests.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersBootRequests.setDescription('Number of Boot Requests packets. Default = 0.')
cigDhcpServersDhcpDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersDhcpDiscovers.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersDhcpDiscovers.setDescription('Number of Dhcp Discovers packets. Default = 0.')
cigDhcpServersDhcpRequests = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersDhcpRequests.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersDhcpRequests.setDescription('Number of Dhcp Requests packets. Default = 0.')
cigDhcpServersDhcpDeclines = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersDhcpDeclines.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersDhcpDeclines.setDescription('Number of Dhcp Declines packets. Default = 0.')
cigDhcpServersDhcpReleases = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersDhcpReleases.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersDhcpReleases.setDescription('Number of Dhcp Releases packets. Default = 0.')
cigDhcpServersDhcpInforms = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersDhcpInforms.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersDhcpInforms.setDescription('Number of Dhcp Informs packets. Default = 0.')
cigDhcpServersBootReplies = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersBootReplies.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersBootReplies.setDescription('Number of Boot Replies packets. Default = 0.')
cigDhcpServersDhcpOffers = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersDhcpOffers.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersDhcpOffers.setDescription('Number of Dhcp Offers packets. Default = 0.')
cigDhcpServersDhcpAcks = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersDhcpAcks.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersDhcpAcks.setDescription('Number of Dhcp Acknowledges packets. Default = 0.')
cigDhcpServersDhcpNacks = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpServersDhcpNacks.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersDhcpNacks.setDescription('Number of Dhcp Nacks packets. Default = 0.')
cigDhcpServersNotificationPacket = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 4))
cigDhcpServersNotificationIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 4, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cigDhcpServersNotificationIpAddr.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersNotificationIpAddr.setDescription('The relevant allocated IP address in DHCP/Bootp packet. Default = 0.0.0.0')
cigDhcpServersNotificationClientIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="01000000000000")).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cigDhcpServersNotificationClientIdentifier.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersNotificationClientIdentifier.setDescription('The Client identifier used in the DHCP packet. The strcuture of the client identifier is as follows: combination of TYPE and Data. Where Type = 01 if for Ethernet MACs and Data for this case if Ethernet MAC address. Default: 01000000000000')
cigDhcpServersNotificationClientHostName = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cigDhcpServersNotificationClientHostName.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersNotificationClientHostName.setDescription('This mib item presents the Client Host name as send by client packet in option 12.')
cigDhcpServersNotificationConflictDetectionMethod = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ping", 1), ("gratuitousArp", 2), ("notSupported", 255))).clone('notSupported')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cigDhcpServersNotificationConflictDetectionMethod.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersNotificationConflictDetectionMethod.setDescription('The method which the DHCP server detect conflict. Using ping message by DHCP server or recieving Decline packet from the client as response to client gratuitous ARP.')
cigDhcpServersNotificationPoolNetwork = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 16, 2, 4, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cigDhcpServersNotificationPoolNetwork.setStatus('current')
if mibBuilder.loadTexts: cigDhcpServersNotificationPoolNetwork.setDescription('This mib item presents cases where no IP address left for specific network. The network exhausted is the pool start/stop IP address AND subnet mask')
mibBuilder.exportSymbols("CIG-SERVERS-MIB", cigDhcpServersOptionName=cigDhcpServersOptionName, cigDhcpServersDhcpDeclines=cigDhcpServersDhcpDeclines, cigDhcpServersPoolEndIPAddr=cigDhcpServersPoolEndIPAddr, cigDhcpServersDhcpReleases=cigDhcpServersDhcpReleases, lsg=lsg, cigDhcpServersPoolClientID=cigDhcpServersPoolClientID, cigDhcpServersPoolBootFile=cigDhcpServersPoolBootFile, cigTftpServersNotificationFilename=cigTftpServersNotificationFilename, cigDhcpServersVendorSpecificOptionType=cigDhcpServersVendorSpecificOptionType, cigDhcpServersDhcpOffers=cigDhcpServersDhcpOffers, cigDhcpServersGenConfig=cigDhcpServersGenConfig, cigDhcpServersPoolVendorSpecificOptionEntry=cigDhcpServersPoolVendorSpecificOptionEntry, cigDhcpServersDhcpNacks=cigDhcpServersDhcpNacks, cigDhcpServersVendorSpecificOptionIndex=cigDhcpServersVendorSpecificOptionIndex, cigTftpServersNotification=cigTftpServersNotification, cigTftpServersNoSuchUserErrors=cigTftpServersNoSuchUserErrors, cigDhcpServersVendorSpecificOptionPoolIndex=cigDhcpServersVendorSpecificOptionPoolIndex, cigDhcpServersPoolDefaultGateway=cigDhcpServersPoolDefaultGateway, cigTftpServersAccessViolationErrors=cigTftpServersAccessViolationErrors, cigDhcpServersDhcpRequests=cigDhcpServersDhcpRequests, cigDhcpServersDhcpDiscovers=cigDhcpServersDhcpDiscovers, cigTftpServersMemoryAllocation=cigTftpServersMemoryAllocation, cigDhcpServersPoolServerName=cigDhcpServersPoolServerName, cigDhcpServersResetStatCounters=cigDhcpServersResetStatCounters, cigTftpServersTotalBytesUsedInRam=cigTftpServersTotalBytesUsedInRam, cigTftpServersFileNotFoundErrors=cigTftpServersFileNotFoundErrors, cigTftpServersSuccessfulDownloads=cigTftpServersSuccessfulDownloads, cigDhcpServersPingDetectionTimeout=cigDhcpServersPingDetectionTimeout, cigDhcpServersBootReplies=cigDhcpServersBootReplies, cigDhcpServersPoolStartIPAddr=cigDhcpServersPoolStartIPAddr, cigDhcpServersMode=cigDhcpServersMode, cigDhcpServersOptionValue=cigDhcpServersOptionValue, cigDhcpServersOptionType=cigDhcpServersOptionType, cigDhcpServersVendorSpecificOptionRowStatus=cigDhcpServersVendorSpecificOptionRowStatus, cigTftpServersTotalBytesCapacityInRam=cigTftpServersTotalBytesCapacityInRam, cigTftpServersNotificationErrorString=cigTftpServersNotificationErrorString, cigDhcpServersPoolLeaseTime=cigDhcpServersPoolLeaseTime, cigTftpServersGenStats=cigTftpServersGenStats, cigTftpServersNotificationClientIpAddr=cigTftpServersNotificationClientIpAddr, cigDhcpServersDhcpInforms=cigDhcpServersDhcpInforms, cigDhcpServersPoolTable=cigDhcpServersPoolTable, cigDhcpServersPool=cigDhcpServersPool, cigTftpServersDownloadTimeouts=cigTftpServersDownloadTimeouts, cigDhcpServersOptionPoolIndex=cigDhcpServersOptionPoolIndex, cigDhcpServersNotification=cigDhcpServersNotification, cigDhcpServersPoolName=cigDhcpServersPoolName, cigDhcpServersPoolVendorSpecificOptionTable=cigDhcpServersPoolVendorSpecificOptionTable, cigDhcpServersPoolEntry=cigDhcpServersPoolEntry, cigDhcpServersNotificationPacket=cigDhcpServersNotificationPacket, cigDhcpServersNotificationConflictDetectionMethod=cigDhcpServersNotificationConflictDetectionMethod, cigTftpServersIllegalTFTPOperationErrors=cigTftpServersIllegalTFTPOperationErrors, cigDhcpServers=cigDhcpServers, cigTftpServersMode=cigTftpServersMode, cigTftpServersTotalBytesUsedInNvram=cigTftpServersTotalBytesUsedInNvram, avaya=avaya, cigDhcpServersNotificationIpAddr=cigDhcpServersNotificationIpAddr, cigDhcpServersPoolGenOptionEntry=cigDhcpServersPoolGenOptionEntry, cigTftpServersNotificationPacket=cigTftpServersNotificationPacket, cigTftpServersDiskFullErrors=cigTftpServersDiskFullErrors, cigDhcpServersDhcpAcks=cigDhcpServersDhcpAcks, cigDhcpServersPoolRowStatus=cigDhcpServersPoolRowStatus, cigDhcpServersNoIpAddressLeft=cigDhcpServersNoIpAddressLeft, cigTftpServersTotalBytesCapacityInNvram=cigTftpServersTotalBytesCapacityInNvram, cigDhcpServersPoolDnsServer=cigDhcpServersPoolDnsServer, cigDhcpServersNotificationClientIdentifier=cigDhcpServersNotificationClientIdentifier, cigTftpServersUploadFailureTrap=cigTftpServersUploadFailureTrap, cigDhcpServersOptionIndex=cigDhcpServersOptionIndex, cigTftpServersUnknownTransferIdErrors=cigTftpServersUnknownTransferIdErrors, cigTftpServersDownloadFailureTrap=cigTftpServersDownloadFailureTrap, cigServers=cigServers, cigTftpServersResetStatCounters=cigTftpServersResetStatCounters, cigDhcpServersPoolDomainName=cigDhcpServersPoolDomainName, cigDhcpServersBootRequests=cigDhcpServersBootRequests, cigDhcpServersPoolIndex=cigDhcpServersPoolIndex, cigDhcpServersVendorSpecificOptionValue=cigDhcpServersVendorSpecificOptionValue, cigDhcpServersServerNacksTrap=cigDhcpServersServerNacksTrap, mibs=mibs, cigDhcpServersVendorSpecificClassIdentifier=cigDhcpServersVendorSpecificClassIdentifier, cigDhcpServersNotificationPoolNetwork=cigDhcpServersNotificationPoolNetwork, cigDhcpServersPoolSubnetMask=cigDhcpServersPoolSubnetMask, cigDhcpServersGenStats=cigDhcpServersGenStats, cigTftpServersNotDefinedErrors=cigTftpServersNotDefinedErrors, cigDhcpServersVendorSpecificOptionName=cigDhcpServersVendorSpecificOptionName, cigDhcpServersPoolMode=cigDhcpServersPoolMode, cigDhcpServersPoolGenOptionTable=cigDhcpServersPoolGenOptionTable, cigTftpServersGenConfig=cigTftpServersGenConfig, cigDhcpServersNotificationClientHostName=cigDhcpServersNotificationClientHostName, cigTftpServersFileAlreadyExistsErrors=cigTftpServersFileAlreadyExistsErrors, cigDhcpServersClientConflictDetectionTrap=cigDhcpServersClientConflictDetectionTrap, cigDhcpServersPingDetectionMode=cigDhcpServersPingDetectionMode, cigDhcpServersPoolNextServer=cigDhcpServersPoolNextServer, cigTftpServers=cigTftpServers, cigDhcpServersOptionRowStatus=cigDhcpServersOptionRowStatus, PYSNMP_MODULE_ID=cigServers)
