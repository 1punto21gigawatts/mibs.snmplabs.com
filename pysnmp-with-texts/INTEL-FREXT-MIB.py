#
# PySNMP MIB module INTEL-FREXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-FREXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
DLCI, = mibBuilder.importSymbols("FRAME-RELAY-DTE-MIB", "DLCI")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, Integer32, Unsigned32, Counter32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, TimeTicks, ModuleIdentity, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Integer32", "Unsigned32", "Counter32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "TimeTicks", "ModuleIdentity", "Counter64", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
frEx = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 28))
frCircuitExt = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 28, 1))
class InterfaceIndex(Integer32):
    pass

frCirExtEncTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1), )
if mibBuilder.loadTexts: frCirExtEncTable.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncTable.setDescription('Encryption information table.')
frCirExtEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1), ).setIndexNames((0, "INTEL-FREXT-MIB", "frCirExtEncIfIndex"), (0, "INTEL-FREXT-MIB", "frCirExtEncDlci"))
if mibBuilder.loadTexts: frCirExtEncEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncEntry.setDescription('')
frCirExtEncIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncIfIndex.setDescription('The ifIndex Value of the ifEntry this virtual circuit is layered onto.')
frCirExtEncDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncDlci.setReference('Draft American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: frCirExtEncDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncDlci.setDescription('The Data Link Connection Identifier for this virtual circuit.')
frCirExtEncLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncLogicalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncLogicalIfIndex.setDescription('Normally the same value as frDlcmiIfIndex, but different when an implementation associates a virtual ifEntry with a DLC or set of DLCs in order to associate higher layer objects such as the ipAddrEntry with a subset of the virtual circuits on a Frame Relay interface. The type of such ifEntries is defined by the higher layer object; for example, if PPP/Frame Relay is implemented, the ifType of this ifEntry would be PPP. If it is not so defined, as would be the case with an ipAddrEntry, it should be of type Other.')
frCirExtEncEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncEnabled.setDescription('Encryption enabled on link.')
frCirExtEncNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncNegotiated.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncNegotiated.setDescription('Encryption negotiated on link.')
frCirExtEncResetRequestsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncResetRequestsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncResetRequestsRx.setDescription('Number of encryption history reset requests received.')
frCirExtEncResetRequestsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncResetRequestsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncResetRequestsTx.setDescription('Number of encryption history reset requests sent.')
frCirExtEncResetAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncResetAcksRx.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncResetAcksRx.setDescription('Number of encryption history reset acknowledgments received.')
frCirExtEncResetAcksTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncResetAcksTx.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncResetAcksTx.setDescription('Number of encryption history reset acknowledgments sent.')
frCirExtEncRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncRxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncRxDiscarded.setDescription('Number of packets discarded due to lack of synchronisation, buffer lacks or packet errors.')
frCirExtEncTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncTxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncTxDiscarded.setDescription('Number of packets discarded due to buffer lacks or transmit queue overflows')
frCirExtEncReceiverState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtEncReceiverState.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtEncReceiverState.setDescription('State of receiver. Error state means waiting for reset acknowledgment')
frCirExtCompTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2), )
if mibBuilder.loadTexts: frCirExtCompTable.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompTable.setDescription('Compression information table.')
frCirExtCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1), ).setIndexNames((0, "INTEL-FREXT-MIB", "frCirExtCompIfIndex"), (0, "INTEL-FREXT-MIB", "frCirExtCompDlci"))
if mibBuilder.loadTexts: frCirExtCompEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEntry.setDescription('')
frCirExtCompIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompIfIndex.setDescription('The ifIndex Value of the ifEntry this virtual circuit is layered onto.')
frCirExtCompDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDlci.setReference('Draft American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: frCirExtCompDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDlci.setDescription('The Data Link Connection Identifier for this virtual circuit.')
frCirExtCompLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompLogicalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompLogicalIfIndex.setDescription('Normally the same value as frDlcmiIfIndex, but different when an implementation associates a virtual ifEntry with a DLC or set of DLCs in order to associate higher layer objects such as the ipAddrEntry with a subset of the virtual circuits on a Frame Relay interface. The type of such ifEntries is defined by the higher layer object; for example, if PPP/Frame Relay is implemented, the ifType of this ifEntry would be PPP. If it is not so defined, as would be the case with an ipAddrEntry, it should be of type Other.')
frCirExtCompEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEnabled.setDescription('Encryption enabled on link.')
frCirExtCompNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompNegotiated.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompNegotiated.setDescription('Encryption negotiated on link.')
frCirExtCompDecoderBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderBytesIn.setDescription('Total number of bytes received by the decoder.')
frCirExtCompDecoderDecompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderDecompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderDecompBytesOut.setDescription('Decompressed bytes from the decoder.')
frCirExtCompDecoderUncompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderUncompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderUncompBytesOut.setDescription('Uncompressed bytes received by the decoder.')
frCirExtCompDecoderCompPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderCompPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderCompPacketsIn.setDescription('Compressed packets received by the decoder.')
frCirExtCompDecoderUncompPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderUncompPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderUncompPacketsIn.setDescription('Uncompressed packets received by the decoder.')
frCirExtCompDecoderDecompQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderDecompQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderDecompQueueLength.setDescription('Number of packets waiting to be decompressed.')
frCirExtCompDecoderCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderCompressionRatio.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderCompressionRatio.setDescription('Receive compression ratio (multiplied by 100).')
frCirExtCompDecoderResetRequestTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderResetRequestTx.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderResetRequestTx.setDescription('The number of times the decoder requested re-initialization of the compression history.')
frCirExtCompDecoderResetAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderResetAcksRx.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderResetAcksRx.setDescription('The number of acknowledgments to reset requests received by the router.')
frCirExtCompDecoderRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderRxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderRxDiscarded.setDescription('Number of packets discarded by the decoder due to buffer lacks or synchronisation problems.')
frCirExtCompDecoderState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompDecoderState.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompDecoderState.setDescription('State of decoder. Error state means waiting for reset acknowledgment')
frCirExtCompEncoderBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderBytesIn.setDescription('Total number of bytes received by the encoder.')
frCirExtCompEncoderCompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderCompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderCompBytesOut.setDescription('Number of compressed bytes leaving the encoder.')
frCirExtCompEncoderUncompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderUncompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderUncompBytesOut.setDescription('Number of uncompressed bytes leaving the encoder.')
frCirExtCompEncoderCompPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderCompPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderCompPacketsOut.setDescription('Number of compressed packets leaving the encoder.')
frCirExtCompEncoderUncompPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderUncompPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderUncompPacketsOut.setDescription('Number of uncompressed packets leaving the encoder.')
frCirExtCompEncoderCompQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderCompQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderCompQueueLength.setDescription('Number of packets waiting to be compressed.')
frCirExtCompEncoderCompressionRation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderCompressionRation.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderCompressionRation.setDescription('Transmit compression ratio (multiplied by 100).')
frCirExtCompEncoderResetRequestRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderResetRequestRx.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderResetRequestRx.setDescription('The number of times the remote end requested re-initialization of the compression history.')
frCirExtCompEncoderResetAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderResetAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderResetAckTx.setDescription('The number of acknowledgments to reset requests transmitted by the router.')
frCirExtCompEncoderTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 28, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCirExtCompEncoderTxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: frCirExtCompEncoderTxDiscarded.setDescription('Number of packets discarded by the encoder due to buffer lacks or transmit queue overflows.')
mibBuilder.exportSymbols("INTEL-FREXT-MIB", frCirExtEncTxDiscarded=frCirExtEncTxDiscarded, frCirExtCompDecoderUncompBytesOut=frCirExtCompDecoderUncompBytesOut, frCircuitExt=frCircuitExt, frCirExtCompIfIndex=frCirExtCompIfIndex, frCirExtEncResetRequestsRx=frCirExtEncResetRequestsRx, frCirExtCompDecoderState=frCirExtCompDecoderState, frCirExtCompEncoderUncompPacketsOut=frCirExtCompEncoderUncompPacketsOut, frCirExtCompLogicalIfIndex=frCirExtCompLogicalIfIndex, frCirExtEncResetAcksTx=frCirExtEncResetAcksTx, frCirExtCompEncoderUncompBytesOut=frCirExtCompEncoderUncompBytesOut, frCirExtCompEncoderBytesIn=frCirExtCompEncoderBytesIn, frCirExtEncNegotiated=frCirExtEncNegotiated, frCirExtCompEncoderCompBytesOut=frCirExtCompEncoderCompBytesOut, frCirExtEncRxDiscarded=frCirExtEncRxDiscarded, frCirExtEncEnabled=frCirExtEncEnabled, frCirExtCompDecoderDecompQueueLength=frCirExtCompDecoderDecompQueueLength, frCirExtEncTable=frCirExtEncTable, frCirExtCompDecoderRxDiscarded=frCirExtCompDecoderRxDiscarded, frCirExtCompDecoderDecompBytesOut=frCirExtCompDecoderDecompBytesOut, frCirExtEncReceiverState=frCirExtEncReceiverState, frCirExtEncEntry=frCirExtEncEntry, frCirExtCompEncoderCompPacketsOut=frCirExtCompEncoderCompPacketsOut, frCirExtCompEntry=frCirExtCompEntry, frCirExtCompDlci=frCirExtCompDlci, frCirExtEncDlci=frCirExtEncDlci, frCirExtCompEncoderCompressionRation=frCirExtCompEncoderCompressionRation, frCirExtCompEncoderResetAckTx=frCirExtCompEncoderResetAckTx, frCirExtCompEncoderResetRequestRx=frCirExtCompEncoderResetRequestRx, frCirExtCompTable=frCirExtCompTable, frCirExtCompEnabled=frCirExtCompEnabled, frCirExtCompEncoderCompQueueLength=frCirExtCompEncoderCompQueueLength, frCirExtCompDecoderCompressionRatio=frCirExtCompDecoderCompressionRatio, frCirExtEncLogicalIfIndex=frCirExtEncLogicalIfIndex, frCirExtCompDecoderBytesIn=frCirExtCompDecoderBytesIn, frCirExtCompDecoderResetAcksRx=frCirExtCompDecoderResetAcksRx, InterfaceIndex=InterfaceIndex, frCirExtCompEncoderTxDiscarded=frCirExtCompEncoderTxDiscarded, frCirExtEncIfIndex=frCirExtEncIfIndex, frCirExtCompDecoderUncompPacketsIn=frCirExtCompDecoderUncompPacketsIn, frCirExtEncResetRequestsTx=frCirExtEncResetRequestsTx, frCirExtCompDecoderResetRequestTx=frCirExtCompDecoderResetRequestTx, frCirExtEncResetAcksRx=frCirExtEncResetAcksRx, frEx=frEx, frCirExtCompDecoderCompPacketsIn=frCirExtCompDecoderCompPacketsIn, frCirExtCompNegotiated=frCirExtCompNegotiated)
