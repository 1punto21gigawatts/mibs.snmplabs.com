#
# PySNMP MIB module H3C-CFCARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-CFCARD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
h3cCfCard, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCfCard")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, ModuleIdentity, iso, TimeTicks, Bits, Unsigned32, NotificationType, Counter32, MibIdentifier, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "ModuleIdentity", "iso", "TimeTicks", "Bits", "Unsigned32", "NotificationType", "Counter32", "MibIdentifier", "Counter64", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h3cCfCardMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1))
if mibBuilder.loadTexts: h3cCfCardMIB.setLastUpdated('200412240000Z')
if mibBuilder.loadTexts: h3cCfCardMIB.setOrganization('Huawei-3com Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cCfCardMIB.setContactInfo('Platform Team Beijing Institute Huawei-3com Tech, Inc. Http://www.huawei-3com.com E-mail:support@huawei-3com.com')
if mibBuilder.loadTexts: h3cCfCardMIB.setDescription('This MIB provides the information about CF Card.')
h3cCfCardMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1))
if mibBuilder.loadTexts: h3cCfCardMIBObjects.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardMIBObjects.setDescription('Objects used for CF Card management.')
h3cCfCardScalarObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 1))
if mibBuilder.loadTexts: h3cCfCardScalarObjects.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardScalarObjects.setDescription('The scalar objects for the CF Card(s).')
h3cCfCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardNumber.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardNumber.setDescription('The total number of the CF Card(s) at present.')
h3cCfCardInfoObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2))
if mibBuilder.loadTexts: h3cCfCardInfoObjects.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardInfoObjects.setDescription('The basic information about CF Card(s).')
h3cCfCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2), )
if mibBuilder.loadTexts: h3cCfCardInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardInfoTable.setDescription('This table contains the basic information about CF Card(s).')
h3CfCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1), ).setIndexNames((0, "H3C-CFCARD-MIB", "h3cCfCardIndex"))
if mibBuilder.loadTexts: h3CfCardInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3CfCardInfoEntry.setDescription('This list contains the basic information about CF Card.')
h3cCfCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardIndex.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardIndex.setDescription('The index of the table.')
h3cCfCardIsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardIsPresent.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardIsPresent.setDescription('The value indicates whether the CF Card is present or not.')
h3cCfCardContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardContainedIn.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardContainedIn.setDescription('The number of the slot which containes this CF Card ')
h3cCfCardParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardParentRelPos.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardParentRelPos.setDescription('An indication of the relative position of this CF Card among all the CF Card contained in the same slot.')
h3cCfCardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardDescription.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardDescription.setDescription('The Description of CF Card.')
h3cCfCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardSerialNumber.setDescription('The serial number of CF Card.')
h3cCfCardFirewareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardFirewareVersion.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardFirewareVersion.setDescription('The firmware revision of CF Card.')
h3cCfCardModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardModelNumber.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardModelNumber.setDescription('The model number containing infomation of manufacturer.')
h3cCfCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 128, 240, 255))).clone(namedValues=NamedValues(("sNoError", 1), ("sFormatError", 2), ("sSectorBufferError", 3), ("sECCError", 4), ("sCMPError", 5), ("sSlaveError", 128), ("sIOError", 240), ("sOther", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardState.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardState.setDescription('The state of CF Card.')
h3cCfCardSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 10), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardSize.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardSize.setDescription('The size of CF Card.')
h3cCfCardUsedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 11), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardUsedSize.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardUsedSize.setDescription('The used size of CF Card.')
h3cCfCardFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 1, 2, 2, 1, 12), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCfCardFreeSize.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardFreeSize.setDescription('The free size of CF Card.')
h3cCfCardNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 2))
if mibBuilder.loadTexts: h3cCfCardNotifications.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardNotifications.setDescription('Notification about the CF Card.')
h3cCfCardNotificationsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 2, 0))
if mibBuilder.loadTexts: h3cCfCardNotificationsV2.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardNotificationsV2.setDescription('Root node for the Notification.')
h3cCfCardHotSwapOn = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 2, 0, 1)).setObjects(("H3C-CFCARD-MIB", "h3cCfCardContainedIn"), ("H3C-CFCARD-MIB", "h3cCfCardParentRelPos"), ("H3C-CFCARD-MIB", "h3cCfCardDescription"))
if mibBuilder.loadTexts: h3cCfCardHotSwapOn.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardHotSwapOn.setDescription('This notification is sent when a CF Card is hot swapped in.')
h3cCfCardHotSwapOff = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 2, 0, 2)).setObjects(("H3C-CFCARD-MIB", "h3cCfCardContainedIn"), ("H3C-CFCARD-MIB", "h3cCfCardParentRelPos"), ("H3C-CFCARD-MIB", "h3cCfCardDescription"))
if mibBuilder.loadTexts: h3cCfCardHotSwapOff.setStatus('current')
if mibBuilder.loadTexts: h3cCfCardHotSwapOff.setDescription('This notification is sent when a CF Card is hot swapped out.')
h3cCfCardMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 4))
h3cCfCardMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 4, 1))
currentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 4, 1, 1)).setObjects(("H3C-CFCARD-MIB", "h3cCfCardNumber"), ("H3C-CFCARD-MIB", "h3cCfCardIndex"), ("H3C-CFCARD-MIB", "h3cCfCardIsPresent"), ("H3C-CFCARD-MIB", "h3cCfCardContainedIn"), ("H3C-CFCARD-MIB", "h3cCfCardParentRelPos"), ("H3C-CFCARD-MIB", "h3cCfCardDescription"), ("H3C-CFCARD-MIB", "h3cCfCardSerialNumber"), ("H3C-CFCARD-MIB", "h3cCfCardFirewareVersion"), ("H3C-CFCARD-MIB", "h3cCfCardModelNumber"), ("H3C-CFCARD-MIB", "h3cCfCardState"), ("H3C-CFCARD-MIB", "h3cCfCardSize"), ("H3C-CFCARD-MIB", "h3cCfCardUsedSize"), ("H3C-CFCARD-MIB", "h3cCfCardFreeSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentObjectGroup = currentObjectGroup.setStatus('current')
if mibBuilder.loadTexts: currentObjectGroup.setDescription('A collection of objects.')
currentNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 4, 1, 2)).setObjects(("H3C-CFCARD-MIB", "h3cCfCardHotSwapOn"), ("H3C-CFCARD-MIB", "h3cCfCardHotSwapOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentNotificationGroup = currentNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: currentNotificationGroup.setDescription('Notification group.')
h3cCfCardMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 4, 2))
basicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 10, 2, 41, 1, 4, 2, 1)).setObjects(("H3C-CFCARD-MIB", "currentObjectGroup"), ("H3C-CFCARD-MIB", "currentNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
if mibBuilder.loadTexts: basicCompliance.setDescription('The compliance statement.')
mibBuilder.exportSymbols("H3C-CFCARD-MIB", h3cCfCardSerialNumber=h3cCfCardSerialNumber, h3cCfCardFreeSize=h3cCfCardFreeSize, h3cCfCardNumber=h3cCfCardNumber, h3cCfCardInfoTable=h3cCfCardInfoTable, h3cCfCardNotificationsV2=h3cCfCardNotificationsV2, h3CfCardInfoEntry=h3CfCardInfoEntry, PYSNMP_MODULE_ID=h3cCfCardMIB, h3cCfCardModelNumber=h3cCfCardModelNumber, h3cCfCardHotSwapOff=h3cCfCardHotSwapOff, h3cCfCardMIBObjects=h3cCfCardMIBObjects, h3cCfCardMIB=h3cCfCardMIB, h3cCfCardParentRelPos=h3cCfCardParentRelPos, h3cCfCardFirewareVersion=h3cCfCardFirewareVersion, h3cCfCardNotifications=h3cCfCardNotifications, h3cCfCardState=h3cCfCardState, h3cCfCardScalarObjects=h3cCfCardScalarObjects, h3cCfCardIsPresent=h3cCfCardIsPresent, h3cCfCardContainedIn=h3cCfCardContainedIn, h3cCfCardMIBCompliances=h3cCfCardMIBCompliances, h3cCfCardMIBGroups=h3cCfCardMIBGroups, h3cCfCardInfoObjects=h3cCfCardInfoObjects, h3cCfCardHotSwapOn=h3cCfCardHotSwapOn, h3cCfCardMIBConformance=h3cCfCardMIBConformance, h3cCfCardUsedSize=h3cCfCardUsedSize, currentNotificationGroup=currentNotificationGroup, h3cCfCardDescription=h3cCfCardDescription, h3cCfCardIndex=h3cCfCardIndex, currentObjectGroup=currentObjectGroup, basicCompliance=basicCompliance, h3cCfCardSize=h3cCfCardSize)
