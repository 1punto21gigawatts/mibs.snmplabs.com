#
# PySNMP MIB module ERI-DNX-OCTAL-HIGH-SPEED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-OCTAL-HIGH-SPEED-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
LinkPortAddress, FunctionSwitch, ConnectionSpeed, trapSequence, DecisionType, devices, PortStatus, LinkCmdStatus = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "LinkPortAddress", "FunctionSwitch", "ConnectionSpeed", "trapSequence", "DecisionType", "devices", "PortStatus", "LinkCmdStatus")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter64, NotificationType, MibIdentifier, Bits, ObjectIdentity, Counter32, Integer32, Gauge32, Unsigned32, IpAddress, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "NotificationType", "MibIdentifier", "Bits", "ObjectIdentity", "Counter32", "Integer32", "Gauge32", "Unsigned32", "IpAddress", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eriDNXOctalHSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 6))
eriDNXOctalHSMIB.setRevisions(('2003-02-05 00:00', '2002-05-13 00:00', '2002-03-11 00:00', '2001-08-01 00:00', '2001-06-25 00:00', '2001-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eriDNXOctalHSMIB.setRevisionsDescriptions(('Nevio Poljak - Software Release 15.1 Added new configurable field for Clock Edge Error control. Converted history comments to MODULE-IDENTITY REVISION format.', 'Nevio Poljak - Software Release 15.0 Moved IMPORT for eriMibs to ERI-ROOT-SMI and corrected description for oHSCfgDsr object.', 'Nevio Poljak - Software Release 15.0 Converted to SMIv2 format.', 'Nevio Poljak - Software Release 12.4 Added new InService-OOS commands for all links.', 'Nevio Poljak - Software Release 12.0 OHS Speed Configuration Object was obsoleted.', 'Initial Release of this MIB. - Nevio Poljak',))
if mibBuilder.loadTexts: eriDNXOctalHSMIB.setLastUpdated('200302050000Z')
if mibBuilder.loadTexts: eriDNXOctalHSMIB.setOrganization('Eastern Research, Inc.')
if mibBuilder.loadTexts: eriDNXOctalHSMIB.setContactInfo('Customer Service Postal: Eastern Research, Inc. 225 Executive Drive Moorestown, NJ 08057 Phone: +1-800-337-4374 Email: support@erinc.com')
if mibBuilder.loadTexts: eriDNXOctalHSMIB.setDescription('The ERI Enterprise MIB Module for the DNX High Speed ports.')
dnxOHS = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5))
ohsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1))
ohsDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 2))
oHSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1), )
if mibBuilder.loadTexts: oHSConfigTable.setStatus('current')
if mibBuilder.loadTexts: oHSConfigTable.setDescription("This is the Octal High Speed Configuration table which consists of an entry for each of the Octal High Speed card's 8 links(ports). The total number of entries depends on the number of Octal High Speed cards in the nest. Changes to the Port Configuration must be made on a record or row by row basis. This means that any use of the Set command on writable fields must include the oHSCfgCmdStatus field with a value of 'update' as the last variable in the SET PDU.")
oHSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1), ).setIndexNames((0, "ERI-DNX-OCTAL-HIGH-SPEED-MIB", "oHSCfgPortAddr"))
if mibBuilder.loadTexts: oHSConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oHSConfigEntry.setDescription("The conceptual row of the Octal High Speed Configuration table. A row in this table cannot be added or deleted, only modified using the oHSCfgCmdStatus field with a value of 'update' as the last variable in the SET PDU. The oHSCfgCmdStatus field must be included as the last variable in a SET PDU for the action to take effect. If the oHSCfgCmdStatus is missing from the SET PDU, the GET RESPONSE will contain the SNMP error status of 'genErr' for and an error index equal to the last variable.")
oHSCfgPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oHSCfgPortAddr.setStatus('current')
if mibBuilder.loadTexts: oHSCfgPortAddr.setDescription('This number uniquely identifies an Octal High Speed Port resource. This number will be used throughout the system to identify a unique port. The format is represented using an IP address syntax (4 byte string). Note that the maximum valid port number will vary depending on the specified device. The 1st byte represents the Nest Number (0-7) The 2nd byte represents the Slot Number (1-11) The 3rd byte represents the Port Number (1-32) The 4th byte is reserved for future use ')
oHSCfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oHSCfgResource.setStatus('current')
if mibBuilder.loadTexts: oHSCfgResource.setDescription('Uniquely identifies an Octal High Speed port in the system. This number is provided as key to allow the manager to map this entry to a corresponding Resource Table entry.')
oHSCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgPortName.setStatus('current')
if mibBuilder.loadTexts: oHSCfgPortName.setDescription('This is the user friendly text name to identify the port.')
oHSCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 4), PortStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgStatus.setStatus('current')
if mibBuilder.loadTexts: oHSCfgStatus.setDescription('Dictates the current status of the port, in-service or out-of-service.')
oHSCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("nxDs0", 0), ("ds0-A", 1), ("nxDs0-Special", 2), ("ds0-A-Special", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgMode.setStatus('current')
if mibBuilder.loadTexts: oHSCfgMode.setDescription("The port's configured transfer mode. nxDs0 (0) Transfer rate is Kbps per channel multiplied by Ds0s in configured Connection ds0-A (1) 9.6 K mode nxDs0-Special (2) Special Control signals mode not valid with X.21 ds0-A-Special (3) 9.6 K mode plus Special Control signals mode")
oHSCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 6), ConnectionSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oHSCfgSpeed.setStatus('obsolete')
if mibBuilder.loadTexts: oHSCfgSpeed.setDescription('Displays the configured Speed based on configured Connection.')
oHSCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 13, 14, 15, 16))).clone(namedValues=NamedValues(("eia232", 2), ("eia422", 4), ("eia530", 13), ("ituV-35", 14), ("eia530A", 15), ("ituX-21", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgType.setStatus('current')
if mibBuilder.loadTexts: oHSCfgType.setDescription('Determines the type of Interface for the High Speed port. eia232 (2) - EIA/TIA-232 Common physical layer interface standard, developed by EIA and TIA, that supports unbalanced circuits at signal speeds of up to 64 kbps. Formerly called as RS-232. eia422 (4) - EIA/TIA-422 (RS-422) Common physical layer interface standard that supports balanced electrical implementation of EIA/TIA-449 for high-speed data transmission. eia530 (13) - EIA-530 Refers to two electrical implementations of EIA/TIA-449: RS-422 (for balanced transmission) and RS-423 (for unbalanced transmission). Now referred to collectively as EIA-530. ituV-35 (14) - ITU V.35 ITU-T standard describing a synchronous, physical layer protocol used for communications between a network access device and a packet network. V.35 is most commonly used in the United States and in Europe, and is recommended for speeds up to 48 Kbps. eia530A (15) - EIA-530A Common physical layer interface standard, developed by EIA and TIA, that supports unbalanced circuits at signal speeds of up to 64 kbps. Formerly called as RS-232. ituX-21 (16) - ITU X.21 ITU-T standard for serial communications over synchronous digital lines. The X.21 protocol is used primarily in Europe and Japan. ')
oHSCfgData = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("invert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgData.setStatus('current')
if mibBuilder.loadTexts: oHSCfgData.setDescription('Determines the data polarity of the port.')
oHSCfgClock = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("invert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgClock.setStatus('current')
if mibBuilder.loadTexts: oHSCfgClock.setDescription("Determines the polarity of the port's clock.")
oHSCfgNetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 10), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgNetLoop.setStatus('current')
if mibBuilder.loadTexts: oHSCfgNetLoop.setDescription("Determines whether or not the port should respond to V.54 loop diagnostic codes received from the network supplier. Select 'enable' unless the commands are to be passed to another High Speed device.")
oHSCfgTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("int-ext", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgTiming.setStatus('current')
if mibBuilder.loadTexts: oHSCfgTiming.setDescription("Source of the port's bit rate clock. internal (0) Both the transmit and receive clocks are internal. int-ext (1) The transmit clock is internal and the receive clock is external. external (2) Both the transmit and receive clocks are provided external.")
oHSCfgDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("forced-off", 0), ("forced-on", 1), ("track-RTS", 2), ("drop-carrier", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgDcd.setStatus('current')
if mibBuilder.loadTexts: oHSCfgDcd.setDescription('The Data Carrier Detect configuration method used on this port. DCD does not apply to X.21 Port Types. forced-off (0) DCD is off forced-on (1) DCD is on track-RTS (2) asserts Request to Send (RTS) each time data needs to be transmitted and drops RTS at some point after data transmission begins. drop-carrier (4) drops DCD in response to a Carrier link fault.')
oHSCfgDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forced-off", 0), ("forced-on", 1), ("track-DTR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgDsr.setStatus('current')
if mibBuilder.loadTexts: oHSCfgDsr.setDescription('The Data Set Ready configuration method used on this port. DSR does not apply to X.21 Port Types. forced-off (0) DSR signaling is off forced-on (1) DSR signaling is on track-DTR (2) tracks Data Terminal Ready (DTR) signal before transmitting data to the DTE.')
oHSCfgCtsIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forced-off", 0), ("forced-on", 1), ("track-RTS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgCtsIndication.setStatus('current')
if mibBuilder.loadTexts: oHSCfgCtsIndication.setDescription('A Control Signal configuration used on this port. When the Port type is X.21, this field represents the X.21 Control Signals. In all other cases, this is the Clear to Send method. forced-off (0) method is off forced-on (1) method is on track-RTS (2) asserts Request to Send (RTS) each time data needs to be transmitted and drops RTS at some point after data transmission begins.')
oHSCfgDTELoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 15), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgDTELoop.setStatus('current')
if mibBuilder.loadTexts: oHSCfgDTELoop.setDescription('Enables or disables bi-directional DTE Local Loop & Remote Loop. This option only applies when port is configured for nxDs0-Special(3) or ds0-A-Special(4) modes.')
oHSCfgCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 16), LinkCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgCmdStatus.setStatus('current')
if mibBuilder.loadTexts: oHSCfgCmdStatus.setDescription('The command status for this port configuration row/record. The value used in a SET will be replaced by a response value in the GET RESPONSE indicating success or failure. Default Response State used in GET RESPONSE Command ready-for-command (0) initial default status for a row High Speed Port Commands used in SET Command (1..99) update-link-config(1) Change existing Port Configuration inServiceAll (7) Change Link Status to in-service for all 8 ports. copyToAll (9) Copy HS Port configuration to all other ports within the same device outOfServiceAll (12) Change Link Status to out-of-service for all 8 ports. Response States used in GET RESPONSE Command (100..199) update-successful (101) Port data has been successfully changed insvc-successful (107) All Ports have been successfully placed In Service copy-successful (109) HS Port data has been successfully copied to other ports oos-successful (112) All Ports have been successfully placed Out of Service High Speed Port Config Error Codes used in GET RESPONSE Command (200..699) err-general-link-config-error (400) Unknown HS port configuration error occurred err-invalid-link-status (401) Unrecognized HS port status setting err-invalid-link-command (403) Unrecognized HS port command-action err-invalid-link-op-mode (407) Unrecognized HS port Mode err-invalid-link-rem-loop (408) Unrecognized or not applicable DTE Loop err-invalid-network-loop (410) Unrecognized network loop setting err-invalid-interface (419) Unrecognized or not applicable HS Type err-invalid-polarity (420) Unrecognized polarity setting err-invalid-clock-timing (421) Unrecognized clock setting err-invalid-control-signal (422) Unrecognized Control setting err-dcd-dsr-not-applicable (423) DCD/DSR not configurable with X.21 err-requires-special-mode (424) Field not configurable in non-Special Mode err-cts-not-applicable (425) CTS not configurable in Special Mode err-data-locked-by-another-user (450) Another administrative user is making changes to this part of the system via a terminal session. Check Event Log for user name err-snmp-parse-failed (500) Agent could not parse variable err-invalid-snmp-type (501) Variable ASN type does not match Agent defined type err-invalid-snmp-var-size (502) Variable size is too big')
oHSCfgClockEdgeErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 17), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgClockEdgeErrs.setStatus('current')
if mibBuilder.loadTexts: oHSCfgClockEdgeErrs.setDescription('Determines whether or not the port should monitor Clock Edge errors.')
dnxOHSEnterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 0))
if mibBuilder.loadTexts: dnxOHSEnterprise.setStatus('current')
if mibBuilder.loadTexts: dnxOHSEnterprise.setDescription('ERI DNX High Speed Enterprise for Alarms/Events')
oHSConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 0, 1)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-OCTAL-HIGH-SPEED-MIB", "oHSCfgPortAddr"), ("ERI-DNX-OCTAL-HIGH-SPEED-MIB", "oHSCfgCmdStatus"))
if mibBuilder.loadTexts: oHSConfigTrap.setStatus('current')
if mibBuilder.loadTexts: oHSConfigTrap.setDescription('This trap is used to notify a NMS that a user has updated the Port configuration for a given High Speed Port entry.')
mibBuilder.exportSymbols("ERI-DNX-OCTAL-HIGH-SPEED-MIB", oHSCfgClockEdgeErrs=oHSCfgClockEdgeErrs, oHSCfgDTELoop=oHSCfgDTELoop, oHSCfgResource=oHSCfgResource, oHSConfigEntry=oHSConfigEntry, oHSCfgCtsIndication=oHSCfgCtsIndication, oHSCfgStatus=oHSCfgStatus, oHSCfgPortAddr=oHSCfgPortAddr, oHSCfgClock=oHSCfgClock, dnxOHSEnterprise=dnxOHSEnterprise, PYSNMP_MODULE_ID=eriDNXOctalHSMIB, ohsDiag=ohsDiag, oHSCfgType=oHSCfgType, oHSCfgDcd=oHSCfgDcd, oHSConfigTable=oHSConfigTable, oHSCfgPortName=oHSCfgPortName, oHSCfgData=oHSCfgData, ohsConfig=ohsConfig, oHSCfgTiming=oHSCfgTiming, oHSCfgMode=oHSCfgMode, oHSCfgDsr=oHSCfgDsr, oHSConfigTrap=oHSConfigTrap, oHSCfgSpeed=oHSCfgSpeed, oHSCfgCmdStatus=oHSCfgCmdStatus, oHSCfgNetLoop=oHSCfgNetLoop, dnxOHS=dnxOHS, eriDNXOctalHSMIB=eriDNXOctalHSMIB)
