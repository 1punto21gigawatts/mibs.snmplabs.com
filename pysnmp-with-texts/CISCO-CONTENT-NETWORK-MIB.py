#
# PySNMP MIB module CISCO-CONTENT-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CONTENT-NETWORK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, ModuleIdentity, Bits, ObjectIdentity, NotificationType, iso, Unsigned32, Integer32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "ModuleIdentity", "Bits", "ObjectIdentity", "NotificationType", "iso", "Unsigned32", "Integer32", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoContentNetworkMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 216))
ciscoContentNetworkMIB.setRevisions(('2001-10-11 18:25', '2001-05-23 21:34',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoContentNetworkMIB.setRevisionsDescriptions(('Deprecated: ccnNotifServerStart ccnNotifServerStop Added: ccnNotifOffline ccnNotifNeedsAttention ccnNotifWaitingForCdm ccnNotifOnline', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoContentNetworkMIB.setLastUpdated('200110111825Z')
if mibBuilder.loadTexts: ciscoContentNetworkMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoContentNetworkMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: content-network-mib@cisco.com')
if mibBuilder.loadTexts: ciscoContentNetworkMIB.setDescription('This MIB module defines objects for Content Network devices. A Content Network is a collection of devices that optimizes the delivery of Internet content (such as HTML documents and MPEG files) by caching content near clients, by proactively pushing content into those caches, and by routing each client request to the best device available at that moment to serve the particular content requested. Content Network devices include Content Engines (CEs) for serving content, Content Routers (CRs) for routing client requests, and Content Distribution Managers (CDMs) for administering the network.')
ciscoContentNetworkMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 1))
ccnReport = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1))
ccnReportDns = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 1))
ccnReportAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 2))
ccnReportDnsRequestRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 1, 1), Gauge32()).setUnits('requests-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccnReportDnsRequestRate.setStatus('current')
if mibBuilder.loadTexts: ccnReportDnsRequestRate.setDescription('Number of DNS requests per second.')
ccnReportDnsClientCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 1, 2), ZeroBasedCounter32()).setUnits('clients').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccnReportDnsClientCount.setStatus('current')
if mibBuilder.loadTexts: ccnReportDnsClientCount.setDescription('Total number of DNS clients that have contacted this device since the DNS server last started.')
ccnReportDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 1, 3), ZeroBasedCounter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccnReportDnsRequests.setStatus('current')
if mibBuilder.loadTexts: ccnReportDnsRequests.setDescription('Total number of DNS requests since the DNS server last started.')
ccnReportAcctBytesServed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 2, 1), ZeroBasedCounter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccnReportAcctBytesServed.setStatus('current')
if mibBuilder.loadTexts: ccnReportAcctBytesServed.setDescription('Total number of bytes of content served to clients from this device since the servers on this device last started.')
ccnReportAcctObjectsCached = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 2, 2), Gauge32()).setUnits('objects').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccnReportAcctObjectsCached.setStatus('current')
if mibBuilder.loadTexts: ccnReportAcctObjectsCached.setDescription('Total number of objects in the content cache.')
ccnReportAcctCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 2, 3), Gauge32()).setUnits('objects-per-minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccnReportAcctCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: ccnReportAcctCacheHitRate.setDescription('Number of cache hits per minute.')
ccnReportAcctCacheMissRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 216, 1, 1, 2, 4), Gauge32()).setUnits('objects-per-minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccnReportAcctCacheMissRate.setStatus('current')
if mibBuilder.loadTexts: ccnReportAcctCacheMissRate.setDescription('Number of cache misses per minute.')
ciscoContentNetworkMIBNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 2))
ccnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 2, 0))
ccnNotifServerStart = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 216, 2, 0, 1))
if mibBuilder.loadTexts: ccnNotifServerStart.setStatus('deprecated')
if mibBuilder.loadTexts: ccnNotifServerStart.setDescription('The servers on this device are being started. This object is deprecated by ccnNotifOnline.')
ccnNotifServerStop = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 216, 2, 0, 2))
if mibBuilder.loadTexts: ccnNotifServerStop.setStatus('deprecated')
if mibBuilder.loadTexts: ccnNotifServerStop.setDescription('The servers on this device are being stopped. This object is deprecated by ccnNotifOnline, ccnNotifNeedsAttention and ccnNotifWaitingForCdm.')
ccnNotifOffline = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 216, 2, 0, 3))
if mibBuilder.loadTexts: ccnNotifOffline.setStatus('current')
if mibBuilder.loadTexts: ccnNotifOffline.setDescription('The device is about to disconnect from the network.')
ccnNotifNeedsAttention = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 216, 2, 0, 4))
if mibBuilder.loadTexts: ccnNotifNeedsAttention.setStatus('current')
if mibBuilder.loadTexts: ccnNotifNeedsAttention.setDescription('The device is on the network, but is unregistered (not associated with any CDN) or needs some other adjustment which cannot be done via the CDM administrator interface (such as repairing a disk, completing a software upgrade, or configuring the CDM database).')
ccnNotifWaitingForCdm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 216, 2, 0, 5))
if mibBuilder.loadTexts: ccnNotifWaitingForCdm.setStatus('current')
if mibBuilder.loadTexts: ccnNotifWaitingForCdm.setDescription('The device (CE or CR) is waiting for configuration information from the CDM. The device is on the network and is either failing to communicate with the CDM or is being told explictly by the CDM to continue waiting pending activation by the CDN administrator.')
ccnNotifOnline = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 216, 2, 0, 6))
if mibBuilder.loadTexts: ccnNotifOnline.setStatus('current')
if mibBuilder.loadTexts: ccnNotifOnline.setDescription('The device is operational and ready to participate in the CDN.')
ccnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 3))
ccnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 3, 1))
ccnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 216, 3, 2))
ccnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 216, 3, 1, 1)).setObjects(("CISCO-CONTENT-NETWORK-MIB", "ccnReportingGroup"), ("CISCO-CONTENT-NETWORK-MIB", "ccnNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccnMIBCompliance = ccnMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ccnMIBCompliance.setDescription('The compliance statement for Cisco Systems entities which implement the Content Network applications. This object is deprecated by ccnMIBComplianceRev1.')
ccnMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 216, 3, 1, 2)).setObjects(("CISCO-CONTENT-NETWORK-MIB", "ccnReportingGroup"), ("CISCO-CONTENT-NETWORK-MIB", "ccnNotifGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccnMIBComplianceRev1 = ccnMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ccnMIBComplianceRev1.setDescription('The compliance statement for Cisco Systems entities which implement the Content Network applications.')
ccnReportingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 216, 3, 2, 1)).setObjects(("CISCO-CONTENT-NETWORK-MIB", "ccnReportDnsRequestRate"), ("CISCO-CONTENT-NETWORK-MIB", "ccnReportDnsClientCount"), ("CISCO-CONTENT-NETWORK-MIB", "ccnReportDnsRequests"), ("CISCO-CONTENT-NETWORK-MIB", "ccnReportAcctBytesServed"), ("CISCO-CONTENT-NETWORK-MIB", "ccnReportAcctObjectsCached"), ("CISCO-CONTENT-NETWORK-MIB", "ccnReportAcctCacheHitRate"), ("CISCO-CONTENT-NETWORK-MIB", "ccnReportAcctCacheMissRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccnReportingGroup = ccnReportingGroup.setStatus('current')
if mibBuilder.loadTexts: ccnReportingGroup.setDescription('DNS and Accounting with low capacity Counter32 and Gauge32 objects.')
ccnNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 216, 3, 2, 2)).setObjects(("CISCO-CONTENT-NETWORK-MIB", "ccnNotifServerStart"), ("CISCO-CONTENT-NETWORK-MIB", "ccnNotifServerStop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccnNotifGroup = ccnNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ccnNotifGroup.setDescription('Notifications for the Cisco Content Network.This object is deprecated by ccnNotifGroupRev1.')
ccnNotifGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 216, 3, 2, 3)).setObjects(("CISCO-CONTENT-NETWORK-MIB", "ccnNotifOffline"), ("CISCO-CONTENT-NETWORK-MIB", "ccnNotifNeedsAttention"), ("CISCO-CONTENT-NETWORK-MIB", "ccnNotifWaitingForCdm"), ("CISCO-CONTENT-NETWORK-MIB", "ccnNotifOnline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccnNotifGroupRev1 = ccnNotifGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ccnNotifGroupRev1.setDescription('Notifications for the Cisco Content Network.')
mibBuilder.exportSymbols("CISCO-CONTENT-NETWORK-MIB", ccnMIBGroups=ccnMIBGroups, ccnReportDnsRequestRate=ccnReportDnsRequestRate, ccnNotifServerStop=ccnNotifServerStop, ccnReportDns=ccnReportDns, ccnReport=ccnReport, ccnMIBComplianceRev1=ccnMIBComplianceRev1, ccnMIBCompliances=ccnMIBCompliances, ccnReportAcct=ccnReportAcct, ciscoContentNetworkMIB=ciscoContentNetworkMIB, ccnReportDnsClientCount=ccnReportDnsClientCount, ccnNotifNeedsAttention=ccnNotifNeedsAttention, ccnNotifOffline=ccnNotifOffline, ccnNotifWaitingForCdm=ccnNotifWaitingForCdm, ccnReportDnsRequests=ccnReportDnsRequests, ciscoContentNetworkMIBNotif=ciscoContentNetworkMIBNotif, ccnNotifOnline=ccnNotifOnline, ccnNotifGroup=ccnNotifGroup, PYSNMP_MODULE_ID=ciscoContentNetworkMIB, ccnNotifServerStart=ccnNotifServerStart, ccnMIBCompliance=ccnMIBCompliance, ccnNotifications=ccnNotifications, ccnNotifGroupRev1=ccnNotifGroupRev1, ccnMIBConformance=ccnMIBConformance, ccnReportAcctObjectsCached=ccnReportAcctObjectsCached, ccnReportAcctCacheMissRate=ccnReportAcctCacheMissRate, ccnReportAcctBytesServed=ccnReportAcctBytesServed, ccnReportingGroup=ccnReportingGroup, ciscoContentNetworkMIBObjects=ciscoContentNetworkMIBObjects, ccnReportAcctCacheHitRate=ccnReportAcctCacheHitRate)
