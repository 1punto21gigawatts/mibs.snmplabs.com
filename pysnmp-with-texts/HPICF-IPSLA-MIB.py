#
# PySNMP MIB module HPICF-IPSLA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPICF-IPSLA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, ObjectIdentity, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Counter32, Gauge32, MibIdentifier, Integer32, IpAddress, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Counter32", "Gauge32", "MibIdentifier", "Integer32", "IpAddress", "TimeTicks", "iso")
RowStatus, TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DateAndTime", "DisplayString")
hpicfIpSla = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127))
hpicfIpSla.setRevisions(('2016-11-10 00:00', '2016-10-20 00:00', '2016-10-05 00:00', '2016-09-29 00:00', '2016-09-15 00:00', '2016-07-25 00:00', '2016-07-07 00:00', '2016-06-20 00:00', '2016-03-14 00:00', '2016-02-16 00:00', '2015-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfIpSla.setRevisionsDescriptions(('Changed the MIB description of PayloadSize', 'Changed the MIB description', 'Added MIB objects for UDP, TCP and ICMP show functions', 'Added Threshold count object.', 'Added MIB objects for DNS and DHCP error counts.', 'Added Jitter and VoIP objects.', 'Added MIB object for status and next schedule value.', 'Added DNS and DHCP.', 'Removed Added codec type and advantage factor.', 'Added codec type and advantage factor.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfIpSla.setLastUpdated('201611100000Z')
if mibBuilder.loadTexts: hpicfIpSla.setOrganization('HP Networking.')
if mibBuilder.loadTexts: hpicfIpSla.setContactInfo('Hewlett Packard Enterprise Development LP. 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfIpSla.setDescription('This MIB module contains HP proprietary objects for managing IP Service Level Agreement (SLA).')
hpicfIpSlaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 0))
hpicfIpSlaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1))
hpicfIpSlaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2))
hpicfIpSlaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1), )
if mibBuilder.loadTexts: hpicfIpSlaTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaTable.setDescription('This table specifies IP SLA test parameters as SLA entries.')
hpicfIpSlaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaID"))
if mibBuilder.loadTexts: hpicfIpSlaEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaEntry.setDescription('An entry on this table specifies the destination IP address/ Hostname, Source address, Source Interface ID & Row status corresponding to each SLA test.')
hpicfIpSlaID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hpicfIpSlaID.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaID.setDescription('This is an identifier for the IP SLA.')
hpicfIpSlaType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("icmpEcho", 1), ("udpEcho", 2), ("udpJitter", 3), ("udpJitterVoIP", 4), ("tcpConnect", 5), ("dhcp", 6), ("dns", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaType.setDescription('SLA Probe Type. IcmpEcho is similar to ping protocol and the destination should be enabled with responder functionality for udpEcho, udpJitter, udpJitterVoIP and tcpConnect. For DHCP and DNS, destination device should be enabled with DHCP and DNS servers, respectively.')
hpicfIpSlaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAdminState.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAdminState.setDescription('Enable or disable the IP Service Level Agreement (SLA) probe.')
hpicfIpSlaSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaSourceAddressType.setDescription('SLA source address type.')
hpicfIpSlaSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaSourceAddress.setDescription('SLA source address.')
hpicfIpSlaL4SourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaL4SourcePort.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaL4SourcePort.setDescription('SLA source port to be used for SLA probes that use a transport layer such as udpEcho, udpJitter, udpJitterVoIP and tcpConnect. The allowed range is from 1024 to 65535.')
hpicfIpSlaSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaSourceInterface.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaSourceInterface.setDescription('SLA source interface.')
hpicfIpSlaDestAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaDestAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaDestAddressType.setDescription('SLA destination address type.')
hpicfIpSlaDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaDestAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaDestAddress.setDescription('SLA destination address.')
hpicfIpSlaL4DestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 10), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaL4DestPort.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaL4DestPort.setDescription('Port on target device which responds back to the probe. This is used for SLA probes that use a transport layer such as udpEcho, udpJitter, udpJitterVoIP and tcpConnect SLA types. The allowed range is from 1024 to 65535.')
hpicfIpSlaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRowStatus.setDescription('SLA row status.')
hpicfIpSlaAttrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2), )
if mibBuilder.loadTexts: hpicfIpSlaAttrTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrTable.setDescription('This table specifies IP SLA test parameters as SLA entries.')
hpicfIpSlaAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaID"))
if mibBuilder.loadTexts: hpicfIpSlaAttrEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrEntry.setDescription('An entry on this table specifies the attributes of SLA test such as scheduling parameters, TOS, payload size, history bucket size and inter packet interval, corresponding to each SLA test.')
hpicfIpSlaSchedStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 1), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaSchedStartTime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaSchedStartTime.setDescription('Timestamp to denote when to start this SLA probe.')
hpicfIpSlaSchedEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 2), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaSchedEndTime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaSchedEndTime.setDescription('Timestamp to denote when to end this SLA probe.')
hpicfIpSlaSchedFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 3), Unsigned32().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaSchedFreq.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaSchedFreq.setDescription('Frequency in seconds. This value is used to send probes.')
hpicfIpSlaSchedRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaSchedRepeat.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaSchedRepeat.setDescription('Number of times this test will be repeated.')
hpicfIpSlaAttrTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAttrTOS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrTOS.setDescription('Type of service value to be set for the probe packet.')
hpicfIpSlaAttrHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 6), Unsigned32().clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAttrHistorySize.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrHistorySize.setDescription('Number of history records to be maintained for SLA test. Size can vary from 1 to 50.')
hpicfIpSlaAttrPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAttrPayloadSize.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrPayloadSize.setDescription('Size of the packet payload to be sent out for each probe. It can be set from 0 to 1440 for udpEcho, icmpEcho and from 68 to 8100 for udpJitter.')
hpicfIpSlaAttrNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 8), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAttrNumPkts.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrNumPkts.setDescription('Number of packets to be sent out for a single probe for jitter SLA type.')
hpicfIpSlaAttrPktInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAttrPktInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrPktInterval.setDescription('Inter packet interval in milli seconds. Which is to be used for packets that are sent out for a single probe for jitter SLA type.')
hpicfIpSlaAttrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAttrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrRowStatus.setDescription('SLA attribute row status.')
hpicfIpSlaAttrCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("g711a", 1), ("g711u", 2), ("g729a", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAttrCodecType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrCodecType.setDescription('Codec-type for the VoIP SLA test.')
hpicfIpSlaAttrAdvntgFactr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaAttrAdvntgFactr.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrAdvntgFactr.setDescription('Advantage factor to calculate the MOS and ICPIF values for VoIP SLA type.')
hpicfIpSlaThrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3), )
if mibBuilder.loadTexts: hpicfIpSlaThrTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrTable.setDescription('This table specifies IP SLA threshold-action parameters as entries. When one of the monitored parameters of an SLA test goes beyond the configured thresholds, notifications are generated either as traps or syslog messages.')
hpicfIpSlaThrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaID"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaThrMetricType"))
if mibBuilder.loadTexts: hpicfIpSlaThrEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrEntry.setDescription('An entry on this table specifies the Metric type, upper and lower limit of thresholds, threshold type and action to be taken.')
hpicfIpSlaThrMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("rtt", 1), ("jitter", 2), ("srcTodstTime", 3), ("dstTosrcTime", 4), ("mos", 5), ("icpif", 6), ("packetLoss", 7), ("testCompletion", 8), ("sdJitterPos", 9), ("dsJitterPos", 10))))
if mibBuilder.loadTexts: hpicfIpSlaThrMetricType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrMetricType.setDescription('SLA metric type to be monitored. The rtt type is the round trip time of the probe packet. The jitter type is the inter-packet delay variance. The srcTodstTime type is the one-way trip time from source to destination. The dstTosrcTtime type is the one-way trip time from destination to source. The Mean Opinion Scores (MOS) type is derived only for udpJitterVoIP SLA. The Calculated Planning Impairment Factor (ICPIF) type is derived only for udpJitterVoIP SLA. ThepacketLoss type is to monitor loss of communication. The testCompletion type is for notifying about the completion of probe test. The sdJitterPos type is the source-to-destination positive jitter and the dsJitterPos type is the destination-to-source positivejitter.')
hpicfIpSlaThrUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaThrUpper.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrUpper.setDescription('Acceptable upper-limit of threshold value for SLA. This value is not applicable when hpicfIpSlaThrMetricType is set to packetLoss and testCompletion.')
hpicfIpSlaThrLower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaThrLower.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrLower.setDescription('Acceptable lower-limit of threshold value for SLA. This value is not applicable when hpicfIpSlaThrMetricType is set to packetLoss and testCompletion.')
hpicfIpSlaThrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("immediate", 1), ("consecutive", 2), ("aggregated", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaThrType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrType.setDescription('Configure threshold type to trigger action. When a trap/log has to be generated each time the threshold is breached, immediate threshold type can be used. The Consecutive threshold type generates traps/logs when the threshold is violated a certain number of times This value is not applicable when hpicfIpSlaThrMetricType is set to testCompletion. The aggregated threshold type is used to generate traps/logs for aggregated probes.')
hpicfIpSlaThrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaThrCount.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrCount.setDescription('The value for the number of consecutive times the upper or lower limit of the threshold is violated. For example, this can be configured to trigger a trap/log when the RTT is more than the upper limit, x number of times consecutively. This value is applicable only if hpicfIpSlaThrType is set to consecutive.')
hpicfIpSlaThrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("trap", 1), ("log", 2), ("trapAndLog", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaThrAction.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrAction.setDescription('The number of probe packets used to calculate Round Trip Time for jitter test.')
hpicfIpSlaThrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaThrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrRowStatus.setDescription('Threshold table row status.')
hpicfIpSlaRespTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 4), )
if mibBuilder.loadTexts: hpicfIpSlaRespTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespTable.setDescription('This table specifies IP SLA responder parameters as entries.')
hpicfIpSlaRespEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 4, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaRespType"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaRespAddress"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaRespL4Port"))
if mibBuilder.loadTexts: hpicfIpSlaRespEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespEntry.setDescription('An entry on this table specifies the local IP address, port number and row status corresponding to each SLA responder config.')
hpicfIpSlaRespType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("udpEcho", 1), ("udpJitter", 2), ("udpJitterVoIP", 3), ("tcpConnect", 4))))
if mibBuilder.loadTexts: hpicfIpSlaRespType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespType.setDescription('The SLA responder type. The udpEcho and tcpConnect objects are for UDP and TCP packets, respectively. The udpJitter and udpJitterVoIP values calculate one-way delay, therefore a timestamp has to be embedded while replying back. This is one of the indexes for the hpicfIpSlaRespTable.')
hpicfIpSlaRespAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 4, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaRespAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespAddressType.setDescription('SLA responder IP address type.')
hpicfIpSlaRespAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 4, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfIpSlaRespAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespAddress.setDescription('The local IP address to which the responder is bound. This is one of the indexes for the hpicfIpSlaRespTable.')
hpicfIpSlaRespL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 4, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: hpicfIpSlaRespL4Port.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespL4Port.setDescription('L4 port number on hpicfIpSlaRespAddress where the responder listens for probe packets from SLA source. This is one of the indexes for the hpicfIpSlaRespTable. The allowed range is from 1024 to 65535.')
hpicfIpSlaRespRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaRespRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespRowStatus.setDescription('SLA responder row status.')
hpicfIpSlaMsgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5), )
if mibBuilder.loadTexts: hpicfIpSlaMsgTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgTable.setDescription('This table specifies the IP SLA result parameters as entries.')
hpicfIpSlaMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaID"))
if mibBuilder.loadTexts: hpicfIpSlaMsgEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgEntry.setDescription('An entry on this table specifies the probe received time, probe error counters and threshold hit counter.')
hpicfIpSlaMsgLastProbeRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgLastProbeRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgLastProbeRcvd.setDescription('Last probe received time.')
hpicfIpSlaMsgLastClrRec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgLastClrRec.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgLastClrRec.setDescription('Last clear record done time.')
hpicfIpSlaMsgSuccProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgSuccProbe.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgSuccProbe.setDescription('Number of successful probes.')
hpicfIpSlaMsgIntErr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgIntErr.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgIntErr.setDescription('Internal error count.')
hpicfIpSlaMsgLocIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgLocIntfDown.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgLocIntfDown.setDescription('Number of probes failed due to local interface failure.')
hpicfIpSlaMsgResTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgResTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgResTimeout.setDescription('Resolution timed out.')
hpicfIpSlaMsgDNSFormatErr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgDNSFormatErr.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgDNSFormatErr.setDescription('Number of DNS format errors.')
hpicfIpSlaMsgServerFaild = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgServerFaild.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgServerFaild.setDescription('Number of server failed errors.')
hpicfIpSlaMsgDomainNotExist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgDomainNotExist.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgDomainNotExist.setDescription('Number of domain does not exist errors.')
hpicfIpSlaMsgFunctnNotImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgFunctnNotImpl.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgFunctnNotImpl.setDescription('Number of function not implemented errors.')
hpicfIpSlaMsgServerRefusd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgServerRefusd.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgServerRefusd.setDescription('Number of server refused errors.')
hpicfIpSlaMsgNameNotExist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgNameNotExist.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgNameNotExist.setDescription('Number of name does not exist errors.')
hpicfIpSlaMsgRRsetNotExist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgRRsetNotExist.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgRRsetNotExist.setDescription('Number of RRset that should not exist errors.')
hpicfIpSlaMsgServerNotInZone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgServerNotInZone.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgServerNotInZone.setDescription('Number of server not in the zone errors.')
hpicfIpSlaMsgNameNotInZone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgNameNotInZone.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgNameNotInZone.setDescription('Number of name not in the zone errors.')
hpicfIpSlaMsgDHCPFaildResln = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgDHCPFaildResln.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgDHCPFaildResln.setDescription('Number of DHCP failed resolutions.')
hpicfIpSlaMsgOffrNotRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgOffrNotRecvd.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgOffrNotRecvd.setDescription('Number of DHCP offer not received errors.')
hpicfIpSlaMsgNACKRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgNACKRecvd.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgNACKRecvd.setDescription('Number of NACKs received.')
hpicfIpSlaMsgThrHitRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitRTT.setDescription('Number of round-trip time hits to threshold.')
hpicfIpSlaMsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgStatus.setDescription('IP SLA current running status.')
hpicfIpSlaMsgNxtSched = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgNxtSched.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgNxtSched.setDescription('Next scheduled time of IP SLA probe.')
hpicfIpSlaMsgThrHitPostvSDAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitPostvSDAvg.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitPostvSDAvg.setDescription('The average positive jitter value of packets moving from source to destination that cross the threshold.')
hpicfIpSlaMsgThrHitPostvDSAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitPostvDSAvg.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitPostvDSAvg.setDescription('The average positive jitter value of packets moving from destination to source that cross the threshold.')
hpicfIpSlaMsgThrHitOneWayDSAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitOneWayDSAvg.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitOneWayDSAvg.setDescription('The average time taken by packets moving from destination to source that cross the threshold.')
hpicfIpSlaMsgThrHitOneWaySDAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitOneWaySDAvg.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitOneWaySDAvg.setDescription('The average time taken by packets moving from source to destination that cross the threshold.')
hpicfIpSlaMsgThrHitAvgICPIF = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitAvgICPIF.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitAvgICPIF.setDescription('Average value of the ICPIF of packets that cross the threshold.')
hpicfIpSlaMsgThrHitAvgMOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitAvgMOS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitAvgMOS.setDescription('Average value of the MOS of packets that cross the threshold. The Value of this object is 100 times of the actual value.')
hpicfIpSlaMsgNameServUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgNameServUnreach.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgNameServUnreach.setDescription('Number of errors due to name server being unreachable.')
hpicfIpSlaMsgDHCPReleaseErr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgDHCPReleaseErr.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgDHCPReleaseErr.setDescription('Number of DHCP release errors.')
hpicfIpSlaMsgThrHitPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitPktLoss.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgThrHitPktLoss.setDescription('Number of packet loss for each probe.')
hpicfIpSlaMsgDstUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgDstUnreach.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgDstUnreach.setDescription('Number of probes failed due to destination not being reachable.')
hpicfIpSlaMsgProbeSkpd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgProbeSkpd.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgProbeSkpd.setDescription('Number of probes skipped due to DNS resolution delay.')
hpicfIpSlaMsgDNSResolnFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgDNSResolnFailed.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgDNSResolnFailed.setDescription('Number of times DNS resolution failed.')
hpicfIpSlaMsgNoRoutetoTgt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgNoRoutetoTgt.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgNoRoutetoTgt.setDescription('Number of errors due to no route to target.')
hpicfIpSlaMsgUnbleToConctHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgUnbleToConctHost.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgUnbleToConctHost.setDescription('Number of errors due to no host connectivity.')
hpicfIpSlaMsgSuccConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgSuccConnection.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgSuccConnection.setDescription('Number of successful connections.')
hpicfIpSlaMsgPossTrailDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgPossTrailDropped.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgPossTrailDropped.setDescription('Number of probes dropped due to resource unavailability.')
hpicfIpSlaMsgNoRespFrmTgt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgNoRespFrmTgt.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgNoRespFrmTgt.setDescription('Number of errors due to no response from target.')
hpicfIpSlaMsgProbeRespRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 5, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaMsgProbeRespRecvd.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgProbeRespRecvd.setDescription('Number of probes received.')
hpicfIpSlaHistTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6), )
if mibBuilder.loadTexts: hpicfIpSlaHistTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistTable.setDescription('This table specifies the history of IP SLA result.')
hpicfIpSlaHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaID"))
if mibBuilder.loadTexts: hpicfIpSlaHistEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistEntry.setDescription('An entry on this table specifies the minimum, maximum and the average time taken from source to destination and vice versa.')
hpicfIpSlaHistMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMinRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMinRTT.setDescription('The minimum probe round-trip time.')
hpicfIpSlaHistMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMaxRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMaxRTT.setDescription('The maximum probe round-trip time.')
hpicfIpSlaHistAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAvgRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAvgRTT.setDescription('The average probe round-trip time.')
hpicfIpSlaHistTotalRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistTotalRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistTotalRTT.setDescription('The total probe round-trip time.')
hpicfIpSlaHistRTT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistRTT2.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistRTT2.setDescription('The sum of the squares of round-trip time.')
hpicfIpSlaHistNumOfRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfRTT.setDescription('The number of RTTs that are successfully measured.')
hpicfIpSlaHistProbID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistProbID.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistProbID.setDescription('Probe ID number.')
hpicfIpSlaHistLastSuccProbTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistLastSuccProbTime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistLastSuccProbTime.setDescription('Last success probe time.')
hpicfIpSlaHistPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistPacketLoss.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistPacketLoss.setDescription('The packet loss value during the jitter test.')
hpicfIpSlaHistSentPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSentPktNum.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSentPktNum.setDescription('Number of packets sent to responder.')
hpicfIpSlaHistRecvdPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistRecvdPktNum.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistRecvdPktNum.setDescription('Number of packets received from responder.')
hpicfIpSlaHistMinStoDPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMinStoDPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMinStoDPostv.setDescription('The minimal positive jitter value recorded from source to destination.')
hpicfIpSlaHistMaxStoDPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMaxStoDPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMaxStoDPostv.setDescription('The maximum positive jitter value recorded from source to destination.')
hpicfIpSlaHistNumOfPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfPosSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfPosSD.setDescription('Number of times the source to destination jitter has a positive value.')
hpicfIpSlaHistSumOfPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSumOfPosSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSumOfPosSD.setDescription('The sum of positive jitter values recorded from source to destination.')
hpicfIpSlaHistAvgStoDPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAvgStoDPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAvgStoDPostv.setDescription('The average positive jitter value recorded from source to destination.')
hpicfIpSlaHistSum2PositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSum2PositivesSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSum2PositivesSD.setDescription('The sum of square of positive jitter values recorded from source to destination.')
hpicfIpSlaHistMinDtoSPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMinDtoSPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMinDtoSPostv.setDescription('The minimal positive jitter value recorded from destination to source.')
hpicfIpSlaHistMaxDtoSPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMaxDtoSPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMaxDtoSPostv.setDescription('The maximum positive jitter value recorded from destination to source.')
hpicfIpSlaHistNumOfPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfPosDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfPosDS.setDescription('The positive jitter value recorded from destination to source.')
hpicfIpSlaHistSumOfPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSumOfPosDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSumOfPosDS.setDescription('The sum of positive jitter values recorded from destination to source.')
hpicfIpSlaHistAvgDtoSPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAvgDtoSPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAvgDtoSPostv.setDescription('The average positive jitter value recorded from destination to source.')
hpicfIpSlaHistSum2PositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSum2PositivesDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSum2PositivesDS.setDescription('The sum of square of positive jitter values recorded from destination-to-source.')
hpicfIpSlaHistMinStoDNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMinStoDNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMinStoDNegtv.setDescription('The minimal negative jitter value recorded from source to destination.')
hpicfIpSlaHistMaxStoDNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMaxStoDNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMaxStoDNegtv.setDescription('The maximum negative jitter value recorded from source to destination.')
hpicfIpSlaHistNumOfNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfNegSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfNegSD.setDescription('The number of negative jitter values recorded from source to destination.')
hpicfIpSlaHistSumOfNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSumOfNegSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSumOfNegSD.setDescription('The sum of negative jitter values recorded from source to destination.')
hpicfIpSlaHistAvgStoDNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAvgStoDNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAvgStoDNegtv.setDescription('The average negative jitter value recorded from source to destination.')
hpicfIpSlaHistSum2NegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSum2NegativesSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSum2NegativesSD.setDescription('The sum of square of negative jitter values recorded from source to destination.')
hpicfIpSlaHistMinDtoSNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMinDtoSNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMinDtoSNegtv.setDescription('The minimal negative jitter value recorded from destination to source.')
hpicfIpSlaHistMaxDtoSNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMaxDtoSNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMaxDtoSNegtv.setDescription('The maximum negative jitter value recorded from destination to source.')
hpicfIpSlaHistNumOfNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfNegDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfNegDS.setDescription('The number of negative jitter values recorded from destination to source.')
hpicfIpSlaHistSumOfNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSumOfNegDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSumOfNegDS.setDescription('The negative jitter value recorded from destination to source.')
hpicfIpSlaHistAvgDtoSNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAvgDtoSNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAvgDtoSNegtv.setDescription('The average negative jitter value recorded from destination to source.')
hpicfIpSlaHistSum2NegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSum2NegativesDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSum2NegativesDS.setDescription('The negative jitter value recorded from source to destination.')
hpicfIpSlaHistMinStoDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMinStoDDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMinStoDDelay.setDescription('The minimum delay recorded from source to destination.')
hpicfIpSlaHistMaxStoDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMaxStoDDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMaxStoDDelay.setDescription('The maximum delay recorded from source to destination.')
hpicfIpSlaHistSumStoDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSumStoDDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSumStoDDelay.setDescription('The sum of all delays recorded from source to destination.')
hpicfIpSlaHistNumOfDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfDelaySD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfDelaySD.setDescription('The number of delays from source to destination that are successfully measured.')
hpicfIpSlaHistSum2DelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSum2DelaySD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSum2DelaySD.setDescription('The sum of squares of all delays recorded from source to destination.')
hpicfIpSlaHistMinDtoSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMinDtoSDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMinDtoSDelay.setDescription('The minimum delay recorded from destination to source.')
hpicfIpSlaHistMaxDtoSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMaxDtoSDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMaxDtoSDelay.setDescription('The maximum delay recorded from destination to source.')
hpicfIpSlaHistNumOfDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfDelayDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistNumOfDelayDS.setDescription('The number of delays from destination to source that are successfully measured.')
hpicfIpSlaHistSumDtoSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSumDtoSDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSumDtoSDelay.setDescription('The sum of all delays recorded from destination to source.')
hpicfIpSlaHistSum2DelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSum2DelayDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSum2DelayDS.setDescription('The sum of squares of all delays recorded from destination to source.')
hpicfIpSlaHistICPIF = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistICPIF.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistICPIF.setDescription('The Calculated Planning Impairment Factor (ICPIF) value for the type-specified test.')
hpicfIpSlaHistMOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistMOS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistMOS.setDescription('The Mean Opinion Score (MOS) value for the type-specified test. The Value of this object is 100 times of the actual value.')
hpicfIpSlaHistAvgStoDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAvgStoDDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAvgStoDDelay.setDescription('The average one-way time from source to destination.')
hpicfIpSlaHistAvgDtoSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 6, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAvgDtoSDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAvgDtoSDelay.setDescription('The average one-way time from destination to source.')
hpicfIpSlaHistSummTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7), )
if mibBuilder.loadTexts: hpicfIpSlaHistSummTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummTable.setDescription('This table specifies the history summary of IP SLA result.')
hpicfIpSlaHistSummEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaID"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaHistSummIndx"))
if mibBuilder.loadTexts: hpicfIpSlaHistSummEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummEntry.setDescription('An entry on this table specifies the minimum, maximum and the average time taken from source to destination and vice versa.')
hpicfIpSlaHistSummIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: hpicfIpSlaHistSummIndx.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummIndx.setDescription('This is an index for history summary. Its value can vary from 1 to 50.')
hpicfIpSlaHistSummStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSummStartTime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummStartTime.setDescription('Time at which the type-specified test was executed.')
hpicfIpSlaHistSummStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSummStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummStatus.setDescription('The status of the IP SLA test.')
hpicfIpSlaHistSummRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSummRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummRTT.setDescription('The round-trip time for a successfully measured test.')
hpicfIpSlaHistSummResolvdIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSummResolvdIP.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummResolvdIP.setDescription('Resolved IP address.')
hpicfIpSlaHistSummDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSummDescription.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummDescription.setDescription('Error description.')
hpicfIpSlaHistSummStoDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSummStoDDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummStoDDelay.setDescription('Source to destination delay.')
hpicfIpSlaHistSummDtoSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistSummDtoSDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummDtoSDelay.setDescription('Destination to source delay.')
hpicfIpSlaHistAggrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8), )
if mibBuilder.loadTexts: hpicfIpSlaHistAggrTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrTable.setDescription('This table specifies the aggregate value of IP SLA result. The average value is calculating on last 25 probes. Or the calculation will do on the number of probes if the probe count is less than 25')
hpicfIpSlaHistAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaID"))
if mibBuilder.loadTexts: hpicfIpSlaHistAggrEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrEntry.setDescription('An entry on this table specifies aggregate value of minimum, maximum and the average time taken from source to destination and vice versa.')
hpicfIpSlaHistAggrMinRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinRTT.setDescription('The minimum round-trip time for the last 25 probes.')
hpicfIpSlaHistAggrMaxRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxRTT.setDescription('The maximum round-trip time for the last 25 probes.')
hpicfIpSlaHistAggrNumOfRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfRTT.setDescription('The number of RTTs that are successfully measured for last 25 probes.')
hpicfIpSlaHistAggrAvgRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgRTT.setDescription('The average round-trip time of last 25 probes.')
hpicfIpSlaHistAggrTotalRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrTotalRTT.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrTotalRTT.setDescription('The total round-trip time of last 25 probes.')
hpicfIpSlaHistAggrRTT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrRTT2.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrRTT2.setDescription('The average of the sum of squares of RTTs for the last 25 probes.')
hpicfIpSlaHistAggrFrstProbStTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrFrstProbStTime.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrFrstProbStTime.setDescription('First probe start time.')
hpicfIpSlaHistAggrProbFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrProbFailReason.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrProbFailReason.setDescription('Probe failure reason.')
hpicfIpSlaHistAggrPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrPacketLoss.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrPacketLoss.setDescription('The percentage of packet loss in last 25 probes.')
hpicfIpSlaHistAggrSentPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSentPktNum.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSentPktNum.setDescription('The total number of packets sent.')
hpicfIpSlaHistAggrRecvdPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrRecvdPktNum.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrRecvdPktNum.setDescription('The total number of packets received.')
hpicfIpSlaHistAggrMinStoDPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinStoDPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinStoDPostv.setDescription('The minimum positive jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrMaxStoDPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxStoDPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxStoDPostv.setDescription('The maximum positive jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrNumOfPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfPosSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfPosSD.setDescription('The number of times source to destination jitter value became positive.')
hpicfIpSlaHistAggrSumOfPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumOfPosSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumOfPosSD.setDescription('The average of the sum of positive jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrAvgStoDPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgStoDPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgStoDPostv.setDescription('The average of the positive jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrSum2PostvSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2PostvSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2PostvSD.setDescription('The aggregate of square sum of positive jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrMinDtoSPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinDtoSPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinDtoSPostv.setDescription('The minimum positive jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrMaxDtoSPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxDtoSPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxDtoSPostv.setDescription('The maximum positive jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrNumOfPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfPosDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfPosDS.setDescription('The number of times destination to source jitter was positive.')
hpicfIpSlaHistAggrSumOfPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumOfPosDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumOfPosDS.setDescription('The sum of positive jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrAvgDtoSPostv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgDtoSPostv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgDtoSPostv.setDescription('The sum of average positive jitter values from destination to source for last 25 probes.')
hpicfIpSlaHistAggrSum2PostvDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2PostvDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2PostvDS.setDescription('The aggregate of square sum of positive jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrMinStoDNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinStoDNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinStoDNegtv.setDescription('The minimum negative jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrMaxStoDNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxStoDNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxStoDNegtv.setDescription('The maximum negative jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrNumOfNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfNegSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfNegSD.setDescription('The number of times jitter value from source to destination became negative.')
hpicfIpSlaHistAggrSumOfNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumOfNegSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumOfNegSD.setDescription('The sum of negative jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrAvgStoDNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgStoDNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgStoDNegtv.setDescription('The average of the negative jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrSum2NegtvSD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2NegtvSD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2NegtvSD.setDescription('The aggregate of square sum of negative jitter value from source to destination for last 25 probes.')
hpicfIpSlaHistAggrMinDtoSNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinDtoSNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinDtoSNegtv.setDescription('The minimum negative jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrMaxDtoSNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxDtoSNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxDtoSNegtv.setDescription('The maximum negative jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrNumOfNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfNegDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfNegDS.setDescription('The number of times jitter value from destination to source became negative.')
hpicfIpSlaHistAggrSumOfNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumOfNegDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumOfNegDS.setDescription('The sum of negative jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrAvgDtoSNegtv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgDtoSNegtv.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrAvgDtoSNegtv.setDescription('The average of the negative jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrSum2NegtvDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2NegtvDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2NegtvDS.setDescription('The aggregate of square sum of negative jitter value from destination to source for last 25 probes.')
hpicfIpSlaHistAggrMinStoDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinStoDDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinStoDDelay.setDescription('The minimum one-way time from source to destination for last 25 probes.')
hpicfIpSlaHistAggrMaxStoDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxStoDDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxStoDDelay.setDescription('The maximum one-way time from source to destination for last 25 probes.')
hpicfIpSlaHistAggrSumStoDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumStoDDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumStoDDelay.setDescription('The sum of one-way time from source to destination for last 25 probes.')
hpicfIpSlaHistAggrNumOfDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfDelaySD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfDelaySD.setDescription('The number of times source to destination delay occurred for the last 25 probes.')
hpicfIpSlaHistAggrSum2DelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2DelaySD.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2DelaySD.setDescription('The sum of squares of one-way delay from source to destination for last 25 probes.')
hpicfIpSlaHistAggrMinDtoSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinDtoSDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinDtoSDelay.setDescription('The minimum one-way delay from destination to source for last 25 probes.')
hpicfIpSlaHistAggrMaxDtoSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxDtoSDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxDtoSDelay.setDescription('The maximum one-way delay from destination to source for last 25 probes.')
hpicfIpSlaHistAggrNumOfDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfDelayDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrNumOfDelayDS.setDescription('The number of times destination to source delay occurred for the last 25 probes.')
hpicfIpSlaHistAggrSumDtoSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumDtoSDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSumDtoSDelay.setDescription('The sum of one-way delay from destination to source for last 25 probes.')
hpicfIpSlaHistAggrSum2DelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2DelayDS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrSum2DelayDS.setDescription('The sum of squares of one-way delay from destination to source for last 25 probes.')
hpicfIpSlaHistAggrMinICPIF = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinICPIF.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinICPIF.setDescription('The minimum ICPIF value for last 25 probes.')
hpicfIpSlaHistAggrMaxICPIF = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxICPIF.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxICPIF.setDescription('The maximum ICPIF value for last 25 probes.')
hpicfIpSlaHistAggrMinMOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinMOS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMinMOS.setDescription('The minimum MOS value for last 25 probes. The Value of this object is 100 times of the actual value.')
hpicfIpSlaHistAggrMaxMOS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 8, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxMOS.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrMaxMOS.setDescription('The maximum MOS value for last 25 probes. The Value of this object is 100 times of the actual value.')
hpicfIpSlaRespResultTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 9), )
if mibBuilder.loadTexts: hpicfIpSlaRespResultTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespResultTable.setDescription('This table specifies the IP SLA responder result parameters as entries.')
hpicfIpSlaRespResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 9, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespType"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespAddress"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespL4Port"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespSrcAddress"))
if mibBuilder.loadTexts: hpicfIpSlaRespResultEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespResultEntry.setDescription('An entry on this table specifies responder status and number of packets received and responded.')
hpicfIpSlaRespStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaRespStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespStatus.setDescription('The status of the responder.')
hpicfIpSlaRespnumPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaRespnumPktRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespnumPktRcvd.setDescription('The number of packets received by the responder.')
hpicfIpSlaRespNumPktRespnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpSlaRespNumPktRespnd.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespNumPktRespnd.setDescription('The number of packets sent by the responder.')
hpicfIpSlaJitterRespTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10), )
if mibBuilder.loadTexts: hpicfIpSlaJitterRespTable.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespTable.setDescription('This table specifies IP SLA jitter responder parameters as entries.')
hpicfIpSlaJitterRespEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10, 1), ).setIndexNames((0, "HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespType"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespAddress"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespL4Port"), (0, "HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespSrcAddress"))
if mibBuilder.loadTexts: hpicfIpSlaJitterRespEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespEntry.setDescription('An entry on this table specifies the local IP address, port number and row status corresponding to each SLA responder config.')
hpicfIpSlaJitterRespType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("udpJitter", 2), ("udpJitterVoIP", 3))))
if mibBuilder.loadTexts: hpicfIpSlaJitterRespType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespType.setDescription('The SLA jitter responder type. The udpJitter and udpJitterVoIP values calculate one-way delay, therefore a timestamp has to be embedded while replying back. This is one of the indexes for hpicfIpSlaJitterRespTable.')
hpicfIpSlaJitterRespAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaJitterRespAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespAddressType.setDescription('SLA jitter responder IP address type.')
hpicfIpSlaJitterRespAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfIpSlaJitterRespAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespAddress.setDescription('The local IP address to which the responder is bound. This is one of the indexes for hpicfIpSlaJitterRespTable.')
hpicfIpSlaJitterRespL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10, 1, 4), InetPortNumber())
if mibBuilder.loadTexts: hpicfIpSlaJitterRespL4Port.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespL4Port.setDescription('L4 port number on hpicfIpSlaJitterRespAddress where the responder listens for probe packets from SLA source. This is one of the indexes for hpicfIpSlaJitterRespTable. The allowed range is 1024 to 65535.')
hpicfIpSlaJitterRespSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaJitterRespSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespSrcAddrType.setDescription('SLA jitter responder source IP address type.')
hpicfIpSlaJitterRespSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10, 1, 6), InetAddress())
if mibBuilder.loadTexts: hpicfIpSlaJitterRespSrcAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespSrcAddress.setDescription('The source IP address to which the responder is responding.')
hpicfIpSlaJitterRespRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 1, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpSlaJitterRespRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespRowStatus.setDescription('SLA jitter responder row status.')
hpicfIpSlaThresholdexceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 0, 1)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaThrUpper"))
if mibBuilder.loadTexts: hpicfIpSlaThresholdexceeded.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThresholdexceeded.setDescription('This notification is generated when the metric calculated from the SLA result exceeds the configured threshold value. The hpicfIpSlaThrUpper is not applicable when hpicfIpSlaThrMetricType is set to packetLoss or testCompletion.')
hpicfIpSlaTestCompletion = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 0, 2)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaThrType"))
if mibBuilder.loadTexts: hpicfIpSlaTestCompletion.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaTestCompletion.setDescription('This notification is generated when the SLA test is completed either by reaching stopTime or hpicfIpSlaAttrNumPkts. This notification is sent only when the action type is set to trap or trap-log.')
hpicfIpSlaThresholdPktLoss = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 0, 3)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaThrCount"))
if mibBuilder.loadTexts: hpicfIpSlaThresholdPktLoss.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThresholdPktLoss.setDescription('This notification is generated when SLA test probe reply packets are lost consecutively for the configured number of hpicfIpSlaThrCount. This notification is sent only when the action type is set to trap or trap-log.')
hpicfIpSlaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1))
hpicfIpSlaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 2))
hpicfIpSlaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 2, 1)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaThrGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaRespGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaCompliance = hpicfIpSlaCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpSlaCompliance.setDescription('The compliance statement for HP switches that support IP SLA.')
hpicfIpSlaCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 2, 2)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrGroup1"), ("HPICF-IPSLA-MIB", "hpicfIpSlaThrGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaRespGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaNotificationsGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSummGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaRespResultGroup"), ("HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaCompliance1 = hpicfIpSlaCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaCompliance1.setDescription('The compliance statement for HP switches that support IP SLA.')
hpicfIpSlaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 1)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaType"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAdminState"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSourceAddressType"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSourceAddress"), ("HPICF-IPSLA-MIB", "hpicfIpSlaL4SourcePort"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSourceInterface"), ("HPICF-IPSLA-MIB", "hpicfIpSlaDestAddressType"), ("HPICF-IPSLA-MIB", "hpicfIpSlaDestAddress"), ("HPICF-IPSLA-MIB", "hpicfIpSlaL4DestPort"), ("HPICF-IPSLA-MIB", "hpicfIpSlaRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaGroup = hpicfIpSlaGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaGroup.setDescription('A mandatory group with a set of IP SLA objects.')
hpicfIpSlaAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 2)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaSchedStartTime"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSchedEndTime"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSchedFreq"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSchedRepeat"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrTOS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrHistorySize"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrPayloadSize"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrNumPkts"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrPktInterval"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaAttrGroup = hpicfIpSlaAttrGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfIpSlaAttrGroup.setDescription('A group with a set of IP SLA attribute objects.')
hpicfIpSlaThrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 3)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaThrUpper"), ("HPICF-IPSLA-MIB", "hpicfIpSlaThrLower"), ("HPICF-IPSLA-MIB", "hpicfIpSlaThrType"), ("HPICF-IPSLA-MIB", "hpicfIpSlaThrCount"), ("HPICF-IPSLA-MIB", "hpicfIpSlaThrAction"), ("HPICF-IPSLA-MIB", "hpicfIpSlaThrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaThrGroup = hpicfIpSlaThrGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaThrGroup.setDescription('A group with a set of IP SLA threshold objects.')
hpicfIpSlaRespGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 4)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaRespAddressType"), ("HPICF-IPSLA-MIB", "hpicfIpSlaRespRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaRespGroup = hpicfIpSlaRespGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespGroup.setDescription('A group with a set of IP SLA responder objects.')
hpicfIpSlaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 5)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaThresholdexceeded"), ("HPICF-IPSLA-MIB", "hpicfIpSlaTestCompletion"), ("HPICF-IPSLA-MIB", "hpicfIpSlaThresholdPktLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaNotificationsGroup = hpicfIpSlaNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaNotificationsGroup.setDescription('A collection of IP SLA source and responder notifications objects.')
hpicfIpSlaMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 6)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaMsgLastProbeRcvd"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgLastClrRec"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgSuccProbe"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgIntErr"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgLocIntfDown"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgResTimeout"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgDNSFormatErr"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgServerFaild"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgDomainNotExist"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgFunctnNotImpl"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgServerRefusd"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgNameNotExist"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgRRsetNotExist"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgServerNotInZone"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgNameNotInZone"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgDHCPFaildResln"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgOffrNotRecvd"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgNACKRecvd"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgThrHitRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgStatus"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgNxtSched"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgThrHitPostvSDAvg"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgThrHitPostvDSAvg"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgThrHitOneWayDSAvg"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgThrHitOneWaySDAvg"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgThrHitAvgICPIF"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgThrHitAvgMOS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgNameServUnreach"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgDHCPReleaseErr"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgThrHitPktLoss"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgDstUnreach"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgProbeSkpd"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgDNSResolnFailed"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgNoRoutetoTgt"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgUnbleToConctHost"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgSuccConnection"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgPossTrailDropped"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgNoRespFrmTgt"), ("HPICF-IPSLA-MIB", "hpicfIpSlaMsgProbeRespRecvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaMsgGroup = hpicfIpSlaMsgGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaMsgGroup.setDescription('A mandatory group with a set of IP SLA result objects.')
hpicfIpSlaHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 7)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaHistMinRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMaxRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAvgRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistTotalRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistRTT2"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistNumOfRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistProbID"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistLastSuccProbTime"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistPacketLoss"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSentPktNum"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistRecvdPktNum"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMinStoDPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMaxStoDPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistNumOfPosSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSumOfPosSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAvgStoDPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSum2PositivesSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMinDtoSPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMaxDtoSPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistNumOfPosDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSumOfPosDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAvgDtoSPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSum2PositivesDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMinStoDNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMaxStoDNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistNumOfNegSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSumOfNegSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAvgStoDNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSum2NegativesSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMinDtoSNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMaxDtoSNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistNumOfNegDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSumOfNegDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAvgDtoSNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSum2NegativesDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMinStoDDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMaxStoDDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSumStoDDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistNumOfDelaySD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSum2DelaySD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMinDtoSDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMaxDtoSDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistNumOfDelayDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSumDtoSDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSum2DelayDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistICPIF"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistMOS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAvgStoDDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAvgDtoSDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaHistGroup = hpicfIpSlaHistGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistGroup.setDescription('A mandatory group with a set of IP SLA history objects.')
hpicfIpSlaHistSummGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 8)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaHistSummStartTime"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSummStatus"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSummRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSummResolvdIP"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSummDescription"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSummStoDDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistSummDtoSDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaHistSummGroup = hpicfIpSlaHistSummGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistSummGroup.setDescription('A mandatory group with a set of IP SLA history summary objects.')
hpicfIpSlaAttrGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 9)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaSchedStartTime"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSchedEndTime"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSchedFreq"), ("HPICF-IPSLA-MIB", "hpicfIpSlaSchedRepeat"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrTOS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrHistorySize"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrPayloadSize"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrNumPkts"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrPktInterval"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrRowStatus"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrCodecType"), ("HPICF-IPSLA-MIB", "hpicfIpSlaAttrAdvntgFactr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaAttrGroup1 = hpicfIpSlaAttrGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaAttrGroup1.setDescription('A group with a set of IP SLA attribute objects.')
hpicfIpSlaHistAggrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 10)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrNumOfRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrAvgRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrTotalRTT"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrRTT2"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrFrstProbStTime"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrProbFailReason"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrPacketLoss"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSentPktNum"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrRecvdPktNum"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinStoDPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxStoDPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrNumOfPosSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSumOfPosSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrAvgStoDPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSum2PostvSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinDtoSPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxDtoSPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrNumOfPosDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSumOfPosDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrAvgDtoSPostv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSum2PostvDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinStoDNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxStoDNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrNumOfNegSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSumOfNegSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrAvgStoDNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSum2NegtvSD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinDtoSNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxDtoSNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrNumOfNegDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSumOfNegDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrAvgDtoSNegtv"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSum2NegtvDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinStoDDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxStoDDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSumStoDDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrNumOfDelaySD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSum2DelaySD"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinDtoSDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxDtoSDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrNumOfDelayDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSumDtoSDelay"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrSum2DelayDS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinICPIF"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxICPIF"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMinMOS"), ("HPICF-IPSLA-MIB", "hpicfIpSlaHistAggrMaxMOS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaHistAggrGroup = hpicfIpSlaHistAggrGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaHistAggrGroup.setDescription('A mandatory group with a set of IP SLA aggregate result summary objects.')
hpicfIpSlaRespResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 11)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaRespStatus"), ("HPICF-IPSLA-MIB", "hpicfIpSlaRespnumPktRcvd"), ("HPICF-IPSLA-MIB", "hpicfIpSlaRespNumPktRespnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaRespResultGroup = hpicfIpSlaRespResultGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaRespResultGroup.setDescription('A mandatory group with a set of IP SLA responder objects.')
hpicfIpSlaJitterRespGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 127, 2, 1, 12)).setObjects(("HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespAddressType"), ("HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespSrcAddrType"), ("HPICF-IPSLA-MIB", "hpicfIpSlaJitterRespRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpSlaJitterRespGroup = hpicfIpSlaJitterRespGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfIpSlaJitterRespGroup.setDescription('A group with a set of IP SLA jitter responder objects.')
mibBuilder.exportSymbols("HPICF-IPSLA-MIB", hpicfIpSlaHistRTT2=hpicfIpSlaHistRTT2, hpicfIpSlaHistSum2NegativesDS=hpicfIpSlaHistSum2NegativesDS, hpicfIpSlaRespNumPktRespnd=hpicfIpSlaRespNumPktRespnd, hpicfIpSlaEntry=hpicfIpSlaEntry, hpicfIpSlaHistSumOfPosDS=hpicfIpSlaHistSumOfPosDS, hpicfIpSlaHistAggrMinDtoSDelay=hpicfIpSlaHistAggrMinDtoSDelay, hpicfIpSlaAttrPayloadSize=hpicfIpSlaAttrPayloadSize, hpicfIpSlaMsgLastProbeRcvd=hpicfIpSlaMsgLastProbeRcvd, hpicfIpSlaHistAggrAvgStoDNegtv=hpicfIpSlaHistAggrAvgStoDNegtv, hpicfIpSlaHistAggrNumOfNegDS=hpicfIpSlaHistAggrNumOfNegDS, hpicfIpSlaDestAddress=hpicfIpSlaDestAddress, hpicfIpSlaHistTotalRTT=hpicfIpSlaHistTotalRTT, hpicfIpSlaHistAggrTable=hpicfIpSlaHistAggrTable, hpicfIpSlaHistAggrMinStoDNegtv=hpicfIpSlaHistAggrMinStoDNegtv, hpicfIpSlaMsgNameNotInZone=hpicfIpSlaMsgNameNotInZone, hpicfIpSlaNotificationsGroup=hpicfIpSlaNotificationsGroup, hpicfIpSlaHistAggrSumOfNegSD=hpicfIpSlaHistAggrSumOfNegSD, hpicfIpSlaMsgDHCPFaildResln=hpicfIpSlaMsgDHCPFaildResln, hpicfIpSlaMsgTable=hpicfIpSlaMsgTable, hpicfIpSlaHistAggrSumOfNegDS=hpicfIpSlaHistAggrSumOfNegDS, hpicfIpSlaConformance=hpicfIpSlaConformance, hpicfIpSlaHistSum2PositivesSD=hpicfIpSlaHistSum2PositivesSD, hpicfIpSlaMsgFunctnNotImpl=hpicfIpSlaMsgFunctnNotImpl, hpicfIpSlaMsgDNSResolnFailed=hpicfIpSlaMsgDNSResolnFailed, hpicfIpSlaHistSum2PositivesDS=hpicfIpSlaHistSum2PositivesDS, hpicfIpSlaHistMinStoDDelay=hpicfIpSlaHistMinStoDDelay, hpicfIpSlaHistICPIF=hpicfIpSlaHistICPIF, hpicfIpSlaJitterRespAddress=hpicfIpSlaJitterRespAddress, hpicfIpSlaJitterRespEntry=hpicfIpSlaJitterRespEntry, hpicfIpSlaHistAggrMaxDtoSNegtv=hpicfIpSlaHistAggrMaxDtoSNegtv, hpicfIpSlaCompliance1=hpicfIpSlaCompliance1, hpicfIpSlaRespResultGroup=hpicfIpSlaRespResultGroup, hpicfIpSlaHistAggrNumOfDelaySD=hpicfIpSlaHistAggrNumOfDelaySD, hpicfIpSlaHistSummGroup=hpicfIpSlaHistSummGroup, hpicfIpSlaRespTable=hpicfIpSlaRespTable, hpicfIpSlaHistAggrAvgRTT=hpicfIpSlaHistAggrAvgRTT, hpicfIpSlaRespL4Port=hpicfIpSlaRespL4Port, hpicfIpSlaHistNumOfRTT=hpicfIpSlaHistNumOfRTT, hpicfIpSlaRespGroup=hpicfIpSlaRespGroup, hpicfIpSlaAttrGroup1=hpicfIpSlaAttrGroup1, hpicfIpSlaJitterRespTable=hpicfIpSlaJitterRespTable, hpicfIpSlaHistMaxDtoSDelay=hpicfIpSlaHistMaxDtoSDelay, hpicfIpSlaAttrAdvntgFactr=hpicfIpSlaAttrAdvntgFactr, hpicfIpSlaRespRowStatus=hpicfIpSlaRespRowStatus, hpicfIpSlaHistAggrSum2PostvSD=hpicfIpSlaHistAggrSum2PostvSD, hpicfIpSlaHistSumOfNegDS=hpicfIpSlaHistSumOfNegDS, hpicfIpSlaMsgLastClrRec=hpicfIpSlaMsgLastClrRec, hpicfIpSla=hpicfIpSla, hpicfIpSlaHistSumOfPosSD=hpicfIpSlaHistSumOfPosSD, hpicfIpSlaHistRecvdPktNum=hpicfIpSlaHistRecvdPktNum, hpicfIpSlaHistAvgDtoSDelay=hpicfIpSlaHistAvgDtoSDelay, hpicfIpSlaHistMinStoDPostv=hpicfIpSlaHistMinStoDPostv, hpicfIpSlaHistAvgRTT=hpicfIpSlaHistAvgRTT, hpicfIpSlaMsgThrHitPostvDSAvg=hpicfIpSlaMsgThrHitPostvDSAvg, hpicfIpSlaAttrEntry=hpicfIpSlaAttrEntry, hpicfIpSlaRespEntry=hpicfIpSlaRespEntry, hpicfIpSlaMsgServerNotInZone=hpicfIpSlaMsgServerNotInZone, hpicfIpSlaHistAggrMaxDtoSDelay=hpicfIpSlaHistAggrMaxDtoSDelay, hpicfIpSlaHistGroup=hpicfIpSlaHistGroup, hpicfIpSlaHistAvgStoDPostv=hpicfIpSlaHistAvgStoDPostv, hpicfIpSlaSourceInterface=hpicfIpSlaSourceInterface, hpicfIpSlaAttrGroup=hpicfIpSlaAttrGroup, hpicfIpSlaThresholdexceeded=hpicfIpSlaThresholdexceeded, hpicfIpSlaHistAggrRecvdPktNum=hpicfIpSlaHistAggrRecvdPktNum, hpicfIpSlaRespStatus=hpicfIpSlaRespStatus, hpicfIpSlaHistMinRTT=hpicfIpSlaHistMinRTT, hpicfIpSlaHistSummStatus=hpicfIpSlaHistSummStatus, hpicfIpSlaID=hpicfIpSlaID, hpicfIpSlaHistLastSuccProbTime=hpicfIpSlaHistLastSuccProbTime, hpicfIpSlaSourceAddress=hpicfIpSlaSourceAddress, hpicfIpSlaMsgThrHitAvgMOS=hpicfIpSlaMsgThrHitAvgMOS, hpicfIpSlaHistMaxStoDPostv=hpicfIpSlaHistMaxStoDPostv, hpicfIpSlaHistAggrSumStoDDelay=hpicfIpSlaHistAggrSumStoDDelay, hpicfIpSlaThrUpper=hpicfIpSlaThrUpper, hpicfIpSlaHistMaxStoDDelay=hpicfIpSlaHistMaxStoDDelay, hpicfIpSlaHistAvgStoDNegtv=hpicfIpSlaHistAvgStoDNegtv, hpicfIpSlaObjects=hpicfIpSlaObjects, hpicfIpSlaMsgNACKRecvd=hpicfIpSlaMsgNACKRecvd, hpicfIpSlaRespResultEntry=hpicfIpSlaRespResultEntry, hpicfIpSlaRespType=hpicfIpSlaRespType, hpicfIpSlaAdminState=hpicfIpSlaAdminState, hpicfIpSlaMsgDNSFormatErr=hpicfIpSlaMsgDNSFormatErr, PYSNMP_MODULE_ID=hpicfIpSla, hpicfIpSlaL4SourcePort=hpicfIpSlaL4SourcePort, hpicfIpSlaAttrTOS=hpicfIpSlaAttrTOS, hpicfIpSlaHistAggrSumDtoSDelay=hpicfIpSlaHistAggrSumDtoSDelay, hpicfIpSlaRespResultTable=hpicfIpSlaRespResultTable, hpicfIpSlaSchedFreq=hpicfIpSlaSchedFreq, hpicfIpSlaHistAggrEntry=hpicfIpSlaHistAggrEntry, hpicfIpSlaSchedStartTime=hpicfIpSlaSchedStartTime, hpicfIpSlaHistSummIndx=hpicfIpSlaHistSummIndx, hpicfIpSlaMsgThrHitPktLoss=hpicfIpSlaMsgThrHitPktLoss, hpicfIpSlaHistSummTable=hpicfIpSlaHistSummTable, hpicfIpSlaMsgStatus=hpicfIpSlaMsgStatus, hpicfIpSlaMsgSuccConnection=hpicfIpSlaMsgSuccConnection, hpicfIpSlaHistAggrSum2NegtvDS=hpicfIpSlaHistAggrSum2NegtvDS, hpicfIpSlaHistProbID=hpicfIpSlaHistProbID, hpicfIpSlaHistAggrMaxRTT=hpicfIpSlaHistAggrMaxRTT, hpicfIpSlaCompliance=hpicfIpSlaCompliance, hpicfIpSlaThrCount=hpicfIpSlaThrCount, hpicfIpSlaMsgIntErr=hpicfIpSlaMsgIntErr, hpicfIpSlaHistSumDtoSDelay=hpicfIpSlaHistSumDtoSDelay, hpicfIpSlaNotifications=hpicfIpSlaNotifications, hpicfIpSlaThrRowStatus=hpicfIpSlaThrRowStatus, hpicfIpSlaHistSum2NegativesSD=hpicfIpSlaHistSum2NegativesSD, hpicfIpSlaHistSummStartTime=hpicfIpSlaHistSummStartTime, hpicfIpSlaMsgGroup=hpicfIpSlaMsgGroup, hpicfIpSlaHistAggrGroup=hpicfIpSlaHistAggrGroup, hpicfIpSlaMsgLocIntfDown=hpicfIpSlaMsgLocIntfDown, hpicfIpSlaHistAggrSum2DelaySD=hpicfIpSlaHistAggrSum2DelaySD, hpicfIpSlaHistAggrPacketLoss=hpicfIpSlaHistAggrPacketLoss, hpicfIpSlaHistSummEntry=hpicfIpSlaHistSummEntry, hpicfIpSlaHistAggrMinICPIF=hpicfIpSlaHistAggrMinICPIF, hpicfIpSlaHistSumOfNegSD=hpicfIpSlaHistSumOfNegSD, hpicfIpSlaHistAggrSum2PostvDS=hpicfIpSlaHistAggrSum2PostvDS, hpicfIpSlaMsgNameNotExist=hpicfIpSlaMsgNameNotExist, hpicfIpSlaL4DestPort=hpicfIpSlaL4DestPort, hpicfIpSlaHistAggrSum2DelayDS=hpicfIpSlaHistAggrSum2DelayDS, hpicfIpSlaHistAggrSumOfPosDS=hpicfIpSlaHistAggrSumOfPosDS, hpicfIpSlaHistPacketLoss=hpicfIpSlaHistPacketLoss, hpicfIpSlaHistAggrMinStoDDelay=hpicfIpSlaHistAggrMinStoDDelay, hpicfIpSlaAttrTable=hpicfIpSlaAttrTable, hpicfIpSlaRespAddress=hpicfIpSlaRespAddress, hpicfIpSlaMsgOffrNotRecvd=hpicfIpSlaMsgOffrNotRecvd, hpicfIpSlaMsgNxtSched=hpicfIpSlaMsgNxtSched, hpicfIpSlaHistNumOfPosSD=hpicfIpSlaHistNumOfPosSD, hpicfIpSlaHistAggrSum2NegtvSD=hpicfIpSlaHistAggrSum2NegtvSD, hpicfIpSlaHistEntry=hpicfIpSlaHistEntry, hpicfIpSlaHistAggrMinMOS=hpicfIpSlaHistAggrMinMOS, hpicfIpSlaSchedRepeat=hpicfIpSlaSchedRepeat, hpicfIpSlaHistAggrRTT2=hpicfIpSlaHistAggrRTT2, hpicfIpSlaHistAggrMaxDtoSPostv=hpicfIpSlaHistAggrMaxDtoSPostv, hpicfIpSlaType=hpicfIpSlaType, hpicfIpSlaHistAggrMinDtoSPostv=hpicfIpSlaHistAggrMinDtoSPostv, hpicfIpSlaHistAggrMinDtoSNegtv=hpicfIpSlaHistAggrMinDtoSNegtv, hpicfIpSlaJitterRespL4Port=hpicfIpSlaJitterRespL4Port, hpicfIpSlaHistMaxRTT=hpicfIpSlaHistMaxRTT, hpicfIpSlaMsgThrHitPostvSDAvg=hpicfIpSlaMsgThrHitPostvSDAvg, hpicfIpSlaMsgProbeRespRecvd=hpicfIpSlaMsgProbeRespRecvd, hpicfIpSlaDestAddressType=hpicfIpSlaDestAddressType, hpicfIpSlaJitterRespRowStatus=hpicfIpSlaJitterRespRowStatus, hpicfIpSlaMsgThrHitOneWayDSAvg=hpicfIpSlaMsgThrHitOneWayDSAvg, hpicfIpSlaHistAggrMaxStoDNegtv=hpicfIpSlaHistAggrMaxStoDNegtv, hpicfIpSlaJitterRespAddressType=hpicfIpSlaJitterRespAddressType, hpicfIpSlaSourceAddressType=hpicfIpSlaSourceAddressType, hpicfIpSlaMsgThrHitAvgICPIF=hpicfIpSlaMsgThrHitAvgICPIF, hpicfIpSlaHistNumOfNegDS=hpicfIpSlaHistNumOfNegDS, hpicfIpSlaHistMinDtoSNegtv=hpicfIpSlaHistMinDtoSNegtv, hpicfIpSlaHistNumOfDelayDS=hpicfIpSlaHistNumOfDelayDS, hpicfIpSlaTestCompletion=hpicfIpSlaTestCompletion, hpicfIpSlaMsgEntry=hpicfIpSlaMsgEntry, hpicfIpSlaHistAggrProbFailReason=hpicfIpSlaHistAggrProbFailReason, hpicfIpSlaHistAvgDtoSPostv=hpicfIpSlaHistAvgDtoSPostv, hpicfIpSlaSchedEndTime=hpicfIpSlaSchedEndTime, hpicfIpSlaAttrRowStatus=hpicfIpSlaAttrRowStatus, hpicfIpSlaHistAggrSentPktNum=hpicfIpSlaHistAggrSentPktNum, hpicfIpSlaHistAggrAvgDtoSPostv=hpicfIpSlaHistAggrAvgDtoSPostv, hpicfIpSlaRespAddressType=hpicfIpSlaRespAddressType, hpicfIpSlaMsgNameServUnreach=hpicfIpSlaMsgNameServUnreach, hpicfIpSlaMsgPossTrailDropped=hpicfIpSlaMsgPossTrailDropped, hpicfIpSlaHistAggrNumOfDelayDS=hpicfIpSlaHistAggrNumOfDelayDS, hpicfIpSlaMsgUnbleToConctHost=hpicfIpSlaMsgUnbleToConctHost, hpicfIpSlaJitterRespType=hpicfIpSlaJitterRespType, hpicfIpSlaHistAggrMaxStoDDelay=hpicfIpSlaHistAggrMaxStoDDelay, hpicfIpSlaHistMaxDtoSPostv=hpicfIpSlaHistMaxDtoSPostv, hpicfIpSlaHistAvgStoDDelay=hpicfIpSlaHistAvgStoDDelay, hpicfIpSlaMsgResTimeout=hpicfIpSlaMsgResTimeout, hpicfIpSlaHistAggrMaxICPIF=hpicfIpSlaHistAggrMaxICPIF, hpicfIpSlaHistAggrMinRTT=hpicfIpSlaHistAggrMinRTT, hpicfIpSlaJitterRespSrcAddress=hpicfIpSlaJitterRespSrcAddress, hpicfIpSlaMsgDHCPReleaseErr=hpicfIpSlaMsgDHCPReleaseErr, hpicfIpSlaAttrPktInterval=hpicfIpSlaAttrPktInterval, hpicfIpSlaHistNumOfPosDS=hpicfIpSlaHistNumOfPosDS, hpicfIpSlaHistAggrSumOfPosSD=hpicfIpSlaHistAggrSumOfPosSD, hpicfIpSlaThresholdPktLoss=hpicfIpSlaThresholdPktLoss, hpicfIpSlaHistSummRTT=hpicfIpSlaHistSummRTT, hpicfIpSlaHistAggrAvgStoDPostv=hpicfIpSlaHistAggrAvgStoDPostv, hpicfIpSlaHistAggrMaxMOS=hpicfIpSlaHistAggrMaxMOS, hpicfIpSlaJitterRespSrcAddrType=hpicfIpSlaJitterRespSrcAddrType, hpicfIpSlaThrLower=hpicfIpSlaThrLower, hpicfIpSlaHistAggrAvgDtoSNegtv=hpicfIpSlaHistAggrAvgDtoSNegtv, hpicfIpSlaHistSumStoDDelay=hpicfIpSlaHistSumStoDDelay, hpicfIpSlaHistAggrMinStoDPostv=hpicfIpSlaHistAggrMinStoDPostv, hpicfIpSlaHistAggrNumOfPosDS=hpicfIpSlaHistAggrNumOfPosDS, hpicfIpSlaRespnumPktRcvd=hpicfIpSlaRespnumPktRcvd, hpicfIpSlaGroups=hpicfIpSlaGroups, hpicfIpSlaThrMetricType=hpicfIpSlaThrMetricType, hpicfIpSlaHistSummDtoSDelay=hpicfIpSlaHistSummDtoSDelay, hpicfIpSlaHistMaxDtoSNegtv=hpicfIpSlaHistMaxDtoSNegtv, hpicfIpSlaTable=hpicfIpSlaTable, hpicfIpSlaHistAggrNumOfNegSD=hpicfIpSlaHistAggrNumOfNegSD, hpicfIpSlaAttrNumPkts=hpicfIpSlaAttrNumPkts, hpicfIpSlaMsgThrHitOneWaySDAvg=hpicfIpSlaMsgThrHitOneWaySDAvg, hpicfIpSlaHistMinDtoSDelay=hpicfIpSlaHistMinDtoSDelay, hpicfIpSlaHistAggrTotalRTT=hpicfIpSlaHistAggrTotalRTT, hpicfIpSlaMsgServerFaild=hpicfIpSlaMsgServerFaild, hpicfIpSlaMsgThrHitRTT=hpicfIpSlaMsgThrHitRTT, hpicfIpSlaMsgProbeSkpd=hpicfIpSlaMsgProbeSkpd, hpicfIpSlaMsgRRsetNotExist=hpicfIpSlaMsgRRsetNotExist, hpicfIpSlaHistNumOfNegSD=hpicfIpSlaHistNumOfNegSD, hpicfIpSlaHistNumOfDelaySD=hpicfIpSlaHistNumOfDelaySD, hpicfIpSlaMsgNoRoutetoTgt=hpicfIpSlaMsgNoRoutetoTgt, hpicfIpSlaHistTable=hpicfIpSlaHistTable, hpicfIpSlaHistSummResolvdIP=hpicfIpSlaHistSummResolvdIP, hpicfIpSlaMsgDomainNotExist=hpicfIpSlaMsgDomainNotExist, hpicfIpSlaHistAggrNumOfPosSD=hpicfIpSlaHistAggrNumOfPosSD, hpicfIpSlaHistSentPktNum=hpicfIpSlaHistSentPktNum, hpicfIpSlaHistMaxStoDNegtv=hpicfIpSlaHistMaxStoDNegtv, hpicfIpSlaHistSum2DelaySD=hpicfIpSlaHistSum2DelaySD, hpicfIpSlaCompliances=hpicfIpSlaCompliances, hpicfIpSlaJitterRespGroup=hpicfIpSlaJitterRespGroup, hpicfIpSlaAttrCodecType=hpicfIpSlaAttrCodecType, hpicfIpSlaThrTable=hpicfIpSlaThrTable, hpicfIpSlaThrEntry=hpicfIpSlaThrEntry, hpicfIpSlaHistAggrNumOfRTT=hpicfIpSlaHistAggrNumOfRTT, hpicfIpSlaHistSummDescription=hpicfIpSlaHistSummDescription, hpicfIpSlaThrAction=hpicfIpSlaThrAction, hpicfIpSlaAttrHistorySize=hpicfIpSlaAttrHistorySize, hpicfIpSlaMsgDstUnreach=hpicfIpSlaMsgDstUnreach, hpicfIpSlaThrType=hpicfIpSlaThrType, hpicfIpSlaHistSummStoDDelay=hpicfIpSlaHistSummStoDDelay, hpicfIpSlaThrGroup=hpicfIpSlaThrGroup, hpicfIpSlaHistSum2DelayDS=hpicfIpSlaHistSum2DelayDS, hpicfIpSlaMsgNoRespFrmTgt=hpicfIpSlaMsgNoRespFrmTgt, hpicfIpSlaHistMinStoDNegtv=hpicfIpSlaHistMinStoDNegtv, hpicfIpSlaGroup=hpicfIpSlaGroup, hpicfIpSlaHistMinDtoSPostv=hpicfIpSlaHistMinDtoSPostv, hpicfIpSlaMsgServerRefusd=hpicfIpSlaMsgServerRefusd, hpicfIpSlaRowStatus=hpicfIpSlaRowStatus, hpicfIpSlaHistAvgDtoSNegtv=hpicfIpSlaHistAvgDtoSNegtv, hpicfIpSlaHistMOS=hpicfIpSlaHistMOS, hpicfIpSlaMsgSuccProbe=hpicfIpSlaMsgSuccProbe, hpicfIpSlaHistAggrFrstProbStTime=hpicfIpSlaHistAggrFrstProbStTime, hpicfIpSlaHistAggrMaxStoDPostv=hpicfIpSlaHistAggrMaxStoDPostv)
