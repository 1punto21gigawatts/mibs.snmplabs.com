#
# PySNMP MIB module NTNTECH-INTERFACE-MODULE-STATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTNTECH-INTERFACE-MODULE-STATUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NtnGauge32, NtnMacAddress, NtnCounter32, NtnDisplayString, ntntechInterfaceModule, NtnTimeTicks = mibBuilder.importSymbols("NTNTECH-ROOT-MIB", "NtnGauge32", "NtnMacAddress", "NtnCounter32", "NtnDisplayString", "ntntechInterfaceModule", "NtnTimeTicks")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Unsigned32, NotificationType, Counter32, TimeTicks, ObjectIdentity, IpAddress, Bits, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Unsigned32", "NotificationType", "Counter32", "TimeTicks", "ObjectIdentity", "IpAddress", "Bits", "ModuleIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ntntechInterfaceModuleStatusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2))
ntntechInterfaceModuleStatusMIB.setRevisions(('1902-06-17 03:05', '1902-08-13 11:03', '1902-08-28 10:48', '1902-09-27 08:11', '1902-10-22 02:00', '1903-09-30 10:43', '1904-03-15 10:00', '1904-04-27 10:48', '1904-10-11 09:39', '1904-11-17 10:04',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ntntechInterfaceModuleStatusMIB.setRevisionsDescriptions(('Add Loop Bonded OIDs,(ifStaLoopBondedGroupPortList and ifStaLoopBondedGroupID)to table ifStaPortTable.', 'Added to the ifStaTable OID ifStaType the value smd2000p24(130). Added to the ifStaPortTable the following entries- ifStaNetworkLoopCount INTEGER, ifStaLastMacCausingLoop PhysAddress, ifStaLastMacSrcPort INTEGER ', 'New Release - v1.01.00', 'Added to the ifStaTable OID ifStaType the value auD8000p12(131).', 'New Release - v1.01.01', 'Added to the ifStaTable OID ifStaType the values tim1500p12(31), eim2000p12(32), tim1500p24(33), eim2000p24(34)', 'Added to the ifStaTable OID ifStaType the values aim24000p48(35) and sne2040p4(136)', 'Added the values ane8420(135) and sne2040(14) to the ifStaTable.', 'Updated copyright and appropriate nomenclature to indicate Paradyne Corporation.', 'New release version 1.02.01',))
if mibBuilder.loadTexts: ntntechInterfaceModuleStatusMIB.setLastUpdated('0411171043Z')
if mibBuilder.loadTexts: ntntechInterfaceModuleStatusMIB.setOrganization('Paradyne Corporation')
if mibBuilder.loadTexts: ntntechInterfaceModuleStatusMIB.setContactInfo('Paradyne Corporation 8545 126th Avenue North Largo, FL 33773 phone: +1 (727) 530 2000 email: support@paradyne.com www: http://www.nettonet.com/support/')
if mibBuilder.loadTexts: ntntechInterfaceModuleStatusMIB.setDescription("This mib module defines an SNMP API to manage the Paradyne Corporation's IPD12000, IPD4000, and Mini/Micro DSLAM interface statistics. The interface types are described below, AMD8000-12 12-Port ADSL Mini DSLAMs With Full Rate and G.lite Operational Modes AAM8000-12 12-Port ADSL Access Multiplexer with Full Rate and G.lite Operational Modes AAM8000-24 24-Port ADSL Access Multiplexer with Full Rate and G.lite Operational Modes EAM2000-12 12-Port E1 Access Multiplexer TAM1500-12 12-Port T1 Access Multiplexer IAM144-12 12-Port IDSL Access Multiplexer SAM1000-12 12-Port SDSL Access Multiplexer SAM2000-12, SAM2000Q-12, and SAM2000G-12 12-Port SDSL Access Multiplexers with CAP, 2B1Q or TC/PAM (G.SHDSL) encoding SAM2000D-12 12-Port SDSL Access Multiplexer W/O voice daughter card, running CAP encoding SAM2000DQ-12 12-Port SDSL Access Multiplexer W/O voice daughter card, running 2B1Q encoding SAM2000V-12, SAM2000QV-12, SAM2000GV-12 12-Port SDSL Access Multiplexers with Voice Capability running CAP, 2B1Q or TC/PAM (G.SHDSL) encoding SIM2000-12 12-Port SDSL Access Multiplexer with CAP, 2B1Q and TC/PAM (G.SHDSL) encoding SIM2000-24 24-Port SDSL Access Multiplexer with CAP, 2B1Q and TC/PAM (G.SHDSL) encoding SMD2000-12, SMD2000Q-12, SMD2000G-12 12-Port SDSL Mini DSLAMs: AC and DC Versions with Cap, 2B1Q and G.SHDSL Line encoding SuD2011_12T, SuD2011_12E, SuD2003_12T, SuD2003_12E 12-Port SDSL Micro DSLAMs: Cap, 2B1Q and G.SHDSL Line encoding SuD2011_6T, SuD2011_6E, SuD2002_6T, SuD2002_6E 6-Port SDSL Micro DSLAMs: Cap, 2B1Q and G.SHDSL Line encoding ")
ifModStaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1))
ifModStaValues = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1))
valInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1))
ifStaCount = MibScalar((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaCount.setStatus('current')
if mibBuilder.loadTexts: ifStaCount.setDescription('The number of interfaces physically within the chassis; type - IPD12000 (max 12), IPD4000 (max 4), Mini/Micro DSLAM (1).')
ifStaTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: ifStaTable.setStatus('current')
if mibBuilder.loadTexts: ifStaTable.setDescription('A list of interface statistic entries.')
ifStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-STATUS-MIB", "ifStaSlotIndex"))
if mibBuilder.loadTexts: ifStaEntry.setStatus('current')
if mibBuilder.loadTexts: ifStaEntry.setDescription('An entry containing management information applicable to the interface types available in the system.')
ifStaSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaSlotIndex.setStatus('current')
if mibBuilder.loadTexts: ifStaSlotIndex.setDescription('The physical slot number of the IPD chassis to which the interface module resides. The Mini/Micro DSLAM will have a slot index value of 1.')
ifStaType = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 130, 131, 31, 32, 33, 34, 35, 135, 14))).clone(namedValues=NamedValues(("iam144p12", 1), ("sam1000p12", 2), ("tam1500p12", 3), ("sam2000p12", 4), ("eam2000p12", 5), ("sim2000p24", 6), ("smD2000p12", 7), ("smD2000Qp12", 8), ("sam2000Qp12", 9), ("aam8000p12", 10), ("amD8000p12", 11), ("sam2000Dp12", 12), ("sam2000DQp12", 13), ("sam2000Gp12", 14), ("sam2000Vp12", 15), ("sam2000QVp12", 16), ("sam2000GVp12", 17), ("sim2000p12", 18), ("smD2000Gp12", 19), ("sim2000Vp24", 20), ("sim2000Vp12", 21), ("suD2011p12T", 22), ("suD2011p12E", 23), ("suD2003p12T", 24), ("suD2003p12E", 25), ("suD2011p6T", 26), ("suD2011p6E", 27), ("suD2002p6T", 28), ("suD2002p6E", 29), ("aam8000p24", 30), ("smD2000p24", 130), ("auD8000p12", 131), ("tim1500p12", 31), ("eim2000p12", 32), ("tim1500p24", 33), ("eim2000p24", 34), ("aim24000p48", 35), ("ane8420", 135), ("sne2040", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaType.setStatus('current')
if mibBuilder.loadTexts: ifStaType.setDescription('The physical interface type.')
ifStaFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 2, 1, 3), NtnDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: ifStaFirmwareRev.setDescription('The interface firmware revision.')
ifStaPortTable = MibTable((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3), )
if mibBuilder.loadTexts: ifStaPortTable.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTable.setDescription('A list of interface port entries.')
ifStaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1), ).setIndexNames((0, "NTNTECH-INTERFACE-MODULE-STATUS-MIB", "ifStaPortSlotIndex"), (0, "NTNTECH-INTERFACE-MODULE-STATUS-MIB", "ifStaPortPortIndex"))
if mibBuilder.loadTexts: ifStaPortEntry.setStatus('current')
if mibBuilder.loadTexts: ifStaPortEntry.setDescription('An entry containing management information applicable to an interface.')
ifStaPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortSlotIndex.setStatus('current')
if mibBuilder.loadTexts: ifStaPortSlotIndex.setDescription('The physical slot number of the IPD chassis to which the interface module resides. The Mini/Micro DSLAM will have a slot index value of 1.')
ifStaPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortPortIndex.setStatus('current')
if mibBuilder.loadTexts: ifStaPortPortIndex.setDescription('The physical port number of the interface.')
ifStaPortFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 3), NtnDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: ifStaPortFirmwareRev.setDescription('A textual string containing information about the port firmware revision.')
ifStaPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("linkup", 1), ("linkdown", 2), ("linkloopback", 3), ("linkdefect", 4), ("linkdisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortLinkState.setStatus('current')
if mibBuilder.loadTexts: ifStaPortLinkState.setDescription('The value assigned to a port which designates the link status.')
ifStaPortRxWanNUCastUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 5), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortRxWanNUCastUtil.setStatus('current')
if mibBuilder.loadTexts: ifStaPortRxWanNUCastUtil.setDescription('The percent utilization for this port based on the received (Rx) WAN non unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaPortRxWanNUCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 6), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortRxWanNUCastRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortRxWanNUCastRate.setDescription("An estimate of the interface's current Rx WAN non unicast bandwidth in Kilo bits per second.")
ifStaPortRxWanNUCastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 7), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortRxWanNUCastMaxRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortRxWanNUCastMaxRate.setDescription("An estimate of the interface's maximum reported Rx WAN non unicast bandwidth in Kilo bits per second.")
ifStaPortRxWanNUCastAveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 8), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortRxWanNUCastAveRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortRxWanNUCastAveRate.setDescription("An estimate of the interface's average reported Rx WAN non unicast bandwidth in Kilo bits per second.")
ifStaPortTxWanNUCastUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 9), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTxWanNUCastUtil.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTxWanNUCastUtil.setDescription('The percent utilization for this port based on the transmitted (Tx) WAN non unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaPortTxWanNUCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 10), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTxWanNUCastRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTxWanNUCastRate.setDescription("An estimate of the interface's current Tx WAN non unicast bandwidth in Kilo bits per second.")
ifStaPortTxWanNUCastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 11), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTxWanNUCastMaxRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTxWanNUCastMaxRate.setDescription("An estimate of the interface's maximum reported Tx WAN non unicast bandwidth in Kilo bits per second.")
ifStaPortTxWanNUCastAveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 12), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTxWanNUCastAveRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTxWanNUCastAveRate.setDescription("An estimate of the interface's average reported Tx WAN non unicast bandwidth in Kilo bits per second.")
ifStaPortRxWanUCastUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 13), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortRxWanUCastUtil.setStatus('current')
if mibBuilder.loadTexts: ifStaPortRxWanUCastUtil.setDescription('The percent utilization for this port based on the received (Rx) WAN unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaPortRxWanUCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 14), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortRxWanUCastRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortRxWanUCastRate.setDescription("An estimate of the interface's current Rx WAN unicast bandwidth in Kilo bits per second.")
ifStaPortRxWanUCastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 15), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortRxWanUCastMaxRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortRxWanUCastMaxRate.setDescription("An estimate of the interface's maximum reported Rx WAN unicast bandwidth in Kilo bits per second.")
ifStaPortRxWanUCastAveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 16), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortRxWanUCastAveRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortRxWanUCastAveRate.setDescription("An estimate of the interface's average reported Rx WAN unicast bandwidth in Kilo bits per second.")
ifStaPortTxWanUCastUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 17), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTxWanUCastUtil.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTxWanUCastUtil.setDescription('The percent utilization for this port based on the transmitted (Tx) WAN unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaPortTxWanUCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 18), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTxWanUCastRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTxWanUCastRate.setDescription("An estimate of the interface's current Tx WAN unicast bandwidth in Kilo bits per second.")
ifStaPortTxWanUCastMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 19), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTxWanUCastMaxRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTxWanUCastMaxRate.setDescription("An estimate of the interface's maximum reported Tx WAN unicast bandwidth in Kilo bits per second.")
ifStaPortTxWanUCastAveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 20), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTxWanUCastAveRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTxWanUCastAveRate.setDescription("An estimate of the interface's average reported Tx WAN unicast bandwidth in Kilo bits per second.")
ifStaPortTotRxWanPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 21), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTotRxWanPercentUtil.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTotRxWanPercentUtil.setDescription('The total percent utilization for this port based on the transmitted (Rx) WAN unicast and non unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaPortTotRxWanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 22), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTotRxWanRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTotRxWanRate.setDescription("An estimate of the interface's current total Rx WAN unicast and non unicast bandwidth in Kilo bits per second.")
ifStaPortTotTxWanPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 23), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTotTxWanPercentUtil.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTotTxWanPercentUtil.setDescription('The total percent utilization for this port based on the transmitted (Tx) WAN unicast and non unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaPortTotTxWanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 24), NtnGauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTotTxWanRate.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTotTxWanRate.setDescription("An estimate of the interface's current total Tx WAN unicast and non unicast bandwidth in Kilo bits per second.")
ifStaPortTotUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 25), NtnTimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTotUpTime.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTotUpTime.setDescription('The value of sysUpTime at the time of the last creation or reset of an entry in the ifStaModStaPortTable.')
ifStaPortTotDwnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 26), NtnTimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaPortTotDwnTime.setStatus('current')
if mibBuilder.loadTexts: ifStaPortTotDwnTime.setDescription('The value of sysDwnTime at the time of the last deletion or reset of an entry in the ifStaModStaPortTable.')
ifStaUCastTxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 27), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaUCastTxPkt.setStatus('current')
if mibBuilder.loadTexts: ifStaUCastTxPkt.setDescription('The identifier which describes the transmitted (Tx) WAN unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaUCastRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 28), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaUCastRxPkt.setStatus('current')
if mibBuilder.loadTexts: ifStaUCastRxPkt.setDescription('The identifier which describes the received (Rx) WAN unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaNUCastTxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 29), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaNUCastTxPkt.setStatus('current')
if mibBuilder.loadTexts: ifStaNUCastTxPkt.setDescription('The identifier which describes the transmitted (Tx) WAN non unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaNUCastRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 30), NtnCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaNUCastRxPkt.setStatus('current')
if mibBuilder.loadTexts: ifStaNUCastRxPkt.setDescription('The identifier which describes the received (Rx) WAN non unicast packet count. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifStaModStaPortReset.')
ifStaNetworkLoopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaNetworkLoopCount.setStatus('current')
if mibBuilder.loadTexts: ifStaNetworkLoopCount.setDescription('The identifier which describes the network loop count.')
ifStaLastMacCausingLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 32), NtnMacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaLastMacCausingLoop.setStatus('current')
if mibBuilder.loadTexts: ifStaLastMacCausingLoop.setDescription('The identifier which describes the last MAC address that caused a network loop condition.')
ifStaLastMacSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaLastMacSrcPort.setStatus('current')
if mibBuilder.loadTexts: ifStaLastMacSrcPort.setDescription('The identifier which describes the source port of the last MAC address.')
ifStaLoopBondedGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaLoopBondedGroupPortList.setStatus('current')
if mibBuilder.loadTexts: ifStaLoopBondedGroupPortList.setDescription('The bitmask of ports assigned to a loop bonded group.')
ifStaLoopBondedGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 8059, 1, 2, 2, 1, 1, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStaLoopBondedGroupID.setStatus('current')
if mibBuilder.loadTexts: ifStaLoopBondedGroupID.setDescription('The identifier of the loop bonded group.')
mibBuilder.exportSymbols("NTNTECH-INTERFACE-MODULE-STATUS-MIB", ifStaPortTxWanUCastUtil=ifStaPortTxWanUCastUtil, ifStaPortTxWanNUCastAveRate=ifStaPortTxWanNUCastAveRate, ifStaPortFirmwareRev=ifStaPortFirmwareRev, ifStaUCastRxPkt=ifStaUCastRxPkt, ifStaNUCastRxPkt=ifStaNUCastRxPkt, ifStaPortTotTxWanPercentUtil=ifStaPortTotTxWanPercentUtil, ifStaPortRxWanUCastAveRate=ifStaPortRxWanUCastAveRate, ifStaFirmwareRev=ifStaFirmwareRev, ifStaPortTxWanNUCastRate=ifStaPortTxWanNUCastRate, ifStaPortTable=ifStaPortTable, ifStaNUCastTxPkt=ifStaNUCastTxPkt, PYSNMP_MODULE_ID=ntntechInterfaceModuleStatusMIB, ifStaLoopBondedGroupID=ifStaLoopBondedGroupID, ifStaPortSlotIndex=ifStaPortSlotIndex, ifStaPortTxWanUCastMaxRate=ifStaPortTxWanUCastMaxRate, ifModStaMIBObjects=ifModStaMIBObjects, ifStaType=ifStaType, ifStaPortTxWanNUCastMaxRate=ifStaPortTxWanNUCastMaxRate, ifStaPortTxWanUCastAveRate=ifStaPortTxWanUCastAveRate, ifStaPortRxWanUCastUtil=ifStaPortRxWanUCastUtil, ifStaPortTotDwnTime=ifStaPortTotDwnTime, ifStaLastMacCausingLoop=ifStaLastMacCausingLoop, ifStaLoopBondedGroupPortList=ifStaLoopBondedGroupPortList, ifStaPortRxWanNUCastMaxRate=ifStaPortRxWanNUCastMaxRate, ifStaSlotIndex=ifStaSlotIndex, ifStaPortTotUpTime=ifStaPortTotUpTime, ifStaPortRxWanNUCastRate=ifStaPortRxWanNUCastRate, ifStaPortTotRxWanPercentUtil=ifStaPortTotRxWanPercentUtil, ntntechInterfaceModuleStatusMIB=ntntechInterfaceModuleStatusMIB, ifStaPortTotTxWanRate=ifStaPortTotTxWanRate, ifStaPortLinkState=ifStaPortLinkState, ifStaPortTotRxWanRate=ifStaPortTotRxWanRate, ifStaUCastTxPkt=ifStaUCastTxPkt, ifStaPortEntry=ifStaPortEntry, ifStaPortTxWanNUCastUtil=ifStaPortTxWanNUCastUtil, ifStaPortRxWanUCastMaxRate=ifStaPortRxWanUCastMaxRate, valInterface=valInterface, ifStaPortRxWanNUCastAveRate=ifStaPortRxWanNUCastAveRate, ifModStaValues=ifModStaValues, ifStaEntry=ifStaEntry, ifStaTable=ifStaTable, ifStaPortPortIndex=ifStaPortPortIndex, ifStaCount=ifStaCount, ifStaLastMacSrcPort=ifStaLastMacSrcPort, ifStaPortRxWanUCastRate=ifStaPortRxWanUCastRate, ifStaPortRxWanNUCastUtil=ifStaPortRxWanNUCastUtil, ifStaPortTxWanUCastRate=ifStaPortTxWanUCastRate, ifStaNetworkLoopCount=ifStaNetworkLoopCount)
