#
# PySNMP MIB module JUNIPER-JS-UTM-AV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JS-UTM-AV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
jnxJsUTMRoot, = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsUTMRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Gauge32, MibIdentifier, NotificationType, ModuleIdentity, Bits, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Gauge32", "MibIdentifier", "NotificationType", "ModuleIdentity", "Bits", "Integer32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxJsAntiVirus = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1))
jnxJsAntiVirus.setRevisions(('2011-02-08 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxJsAntiVirus.setRevisionsDescriptions(('Creation Date',))
if mibBuilder.loadTexts: jnxJsAntiVirus.setLastUpdated('201102080800Z')
if mibBuilder.loadTexts: jnxJsAntiVirus.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxJsAntiVirus.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: jnxJsAntiVirus.setDescription('This module defines the MIB for Juniper Enterprise specific antivirus functionality. Juniper documentation is recommended as the reference.')
jnxJsAntiVirusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1))
jnxJsAntiVirusTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 2))
jnxJsAntiVirusTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 0))
jnxJsAntiVirusTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 3))
jnxJsAntiVirusEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 1))
jnxJsAVEngineType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown-engine", 1), ("kaspersky-lab-engine", 2), ("juniper-express-engine", 3), ("sophos-engine", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVEngineType.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVEngineType.setDescription('The scan engine type in use. User can use CLI to set the engine type to either full AV (kaspersky-lab-engine), express AV (juniper-express-engine) or Sophos AV (sophos-engine). If AV is not configured then engine type is not known.')
jnxJsAVCurrentPatternVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVCurrentPatternVersionString.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVCurrentPatternVersionString.setDescription('Anti-Virus pattern database version currently in use.')
jnxJsAVDatabaseType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 1), ("express", 2), ("unknown", 3), ("sophos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVDatabaseType.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVDatabaseType.setDescription('The Database type in use. User can use CLI to set the engine type to full AV, express AV or Sophos AV. Corresponding database types are Full for KL Engine, Express for Juniper Express Engine and Sophos for Sophos AV Engine.')
jnxJsAntiVirusStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2))
jnxJsAVScanCodeClean = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeClean.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeClean.setDescription('Number of requests passed Anti-Virus scan.')
jnxJsAVScanCodeInfected = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeInfected.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeInfected.setDescription('Number of requests found infected by Anti-Virus scan engine.')
jnxJsAVScanCodeProtected = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeProtected.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeProtected.setDescription('Number of requests cannot be scanned due to protected by password.')
jnxJsAVScanCodeDecompress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeDecompress.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeDecompress.setDescription('Number of requests cannot be scanned due to exceeding max decmopress layer.')
jnxJsAVScanCodeCorrupted = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeCorrupted.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeCorrupted.setDescription('Number of requests cannot be scanned due to file corrupted.')
jnxJsAVScanCodeNoResource = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeNoResource.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeNoResource.setDescription('Number of requests cannot be scanned due to out-of-resource.')
jnxJsAVScanCodeInternalError = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeInternalError.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeInternalError.setDescription('Number of requests cannot be scanned due to internal error.')
jnxJsAVScanCodeMaxContentSize = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeMaxContentSize.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeMaxContentSize.setDescription('Number of requests cannot be scanned due to exceeding max content size limit.')
jnxJsAVScanCodeTooManyReq = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeTooManyReq.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeTooManyReq.setDescription('Number of requests cannot be scanned due to exceeding maximum requests limit.')
jnxJsAVScanCodeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeTimeout.setDescription('Number of requests cannot be scanned due to scan timeout.')
jnxJsAVScanCodeEngineNotReady = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsAVScanCodeEngineNotReady.setStatus('deprecated')
if mibBuilder.loadTexts: jnxJsAVScanCodeEngineNotReady.setDescription('Number of requests cannot be scanned due to scan engine not ready.')
jnxJsUTMAntiVirusEngine = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3), )
if mibBuilder.loadTexts: jnxJsUTMAntiVirusEngine.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAntiVirusEngine.setDescription('Table of anti-virus engine objects.')
jnxJsUTMAntiVirusEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-JS-UTM-AV-MIB", "jnxJsUTMAVEngineIndex"))
if mibBuilder.loadTexts: jnxJsUTMAntiVirusEngineEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAntiVirusEngineEntry.setDescription('Entry for anti-virus engine table.')
jnxJsUTMAVEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: jnxJsUTMAVEngineIndex.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVEngineIndex.setDescription('Index is the cluster node number. If the device is not in a cluster mode then it will be the local node number.')
jnxJsUTMAVEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown-engine", 1), ("kaspersky-lab-engine", 2), ("juniper-express-engine", 3), ("sophos-engine", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVEngineType.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVEngineType.setDescription('The scan engine type in use. User can use CLI to set the engine type to either full AV (kaspersky-lab-engine), express AV (juniper-express-engine) or Sophos AV (sophos-engine). If AV is not configured then engine type is not known.')
jnxJsUTMAVPatternVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVPatternVersionString.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVPatternVersionString.setDescription('Anti-Virus pattern database version currently in use.')
jnxJsUTMAVDatabaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 1), ("express", 2), ("unknown", 3), ("sophos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVDatabaseType.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVDatabaseType.setDescription('The Database type in use. User can use CLI to set the engine type to full AV, express AV or Sophos AV. Corresponding database types are Full for KL Engine, Express for Juniper Express Engine and Sophos for Sophos AV Engine.')
jnxJsUTMAntiVirusStats = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4), )
if mibBuilder.loadTexts: jnxJsUTMAntiVirusStats.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAntiVirusStats.setDescription('Table of anti-virus stats objects.')
jnxJsUTMAntiVirusStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-JS-UTM-AV-MIB", "jnxJsUTMAVStatsIndex"))
if mibBuilder.loadTexts: jnxJsUTMAntiVirusStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAntiVirusStatsEntry.setDescription('Entry of anti-virus stats object.')
jnxJsUTMAVStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: jnxJsUTMAVStatsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVStatsIndex.setDescription('Index is the cluster node number. If the device is not in a cluster mode then it will be the local node number.')
jnxJsUTMAVScanCodeClean = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeClean.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeClean.setDescription('Number of requests passed Anti-Virus scan.')
jnxJsUTMAVScanCodeInfected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeInfected.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeInfected.setDescription('Number of requests found infected by Anti-Virus scan engine.')
jnxJsUTMAVScanCodeProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeProtected.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeProtected.setDescription('Number of requests cannot be scanned due to protected by password.')
jnxJsUTMAVScanCodeDecompress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeDecompress.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeDecompress.setDescription('Number of requests cannot be scanned due to exceeding max decmopress layer.')
jnxJsUTMAVScanCodeCorrupted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeCorrupted.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeCorrupted.setDescription('Number of requests cannot be scanned due to file corrupted.')
jnxJsUTMAVScanCodeNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeNoResource.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeNoResource.setDescription('Number of requests cannot be scanned due to out-of-resource.')
jnxJsUTMAVScanCodeInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeInternalError.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeInternalError.setDescription('Number of requests cannot be scanned due to internal error.')
jnxJsUTMAVScanCodeMaxContentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeMaxContentSize.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeMaxContentSize.setDescription('Number of requests cannot be scanned due to exceeding max content size limit.')
jnxJsUTMAVScanCodeTooManyReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeTooManyReq.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeTooManyReq.setDescription('Number of requests cannot be scanned due to exceeding maximum requests limit.')
jnxJsUTMAVScanCodeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeTimeout.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeTimeout.setDescription('Number of requests cannot be scanned due to scan timeout.')
jnxJsUTMAVScanCodeEngineNotReady = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeEngineNotReady.setStatus('current')
if mibBuilder.loadTexts: jnxJsUTMAVScanCodeEngineNotReady.setDescription('Number of requests cannot be scanned due to scan engine not ready.')
jnxJsAvPatternUpdateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 0, 1)).setObjects(("JUNIPER-JS-UTM-AV-MIB", "jnxAVPatternVersionString"), ("JUNIPER-JS-UTM-AV-MIB", "jnxAVPatternTimestamp"))
if mibBuilder.loadTexts: jnxJsAvPatternUpdateTrap.setStatus('current')
if mibBuilder.loadTexts: jnxJsAvPatternUpdateTrap.setDescription('This traps is raised when the Anti-Virus pattern database is updated successfully.')
jnxAVPatternVersionString = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxAVPatternVersionString.setStatus('current')
if mibBuilder.loadTexts: jnxAVPatternVersionString.setDescription('Anti-Virus last successfully updated pattern database version.')
jnxAVPatternTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 13, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxAVPatternTimestamp.setStatus('current')
if mibBuilder.loadTexts: jnxAVPatternTimestamp.setDescription('Anti-Virus last successfully updated pattern database timestamp.')
mibBuilder.exportSymbols("JUNIPER-JS-UTM-AV-MIB", jnxJsUTMAntiVirusEngineEntry=jnxJsUTMAntiVirusEngineEntry, jnxJsUTMAVScanCodeCorrupted=jnxJsUTMAVScanCodeCorrupted, jnxJsAVScanCodeCorrupted=jnxJsAVScanCodeCorrupted, jnxJsAntiVirusStats=jnxJsAntiVirusStats, jnxJsAVEngineType=jnxJsAVEngineType, jnxJsUTMAVEngineIndex=jnxJsUTMAVEngineIndex, jnxJsUTMAVDatabaseType=jnxJsUTMAVDatabaseType, jnxJsAVScanCodeProtected=jnxJsAVScanCodeProtected, jnxJsAntiVirus=jnxJsAntiVirus, jnxJsUTMAVPatternVersionString=jnxJsUTMAVPatternVersionString, jnxJsAVScanCodeInfected=jnxJsAVScanCodeInfected, jnxAVPatternVersionString=jnxAVPatternVersionString, jnxJsAVDatabaseType=jnxJsAVDatabaseType, jnxJsAntiVirusTraps=jnxJsAntiVirusTraps, jnxJsUTMAntiVirusStats=jnxJsUTMAntiVirusStats, jnxJsUTMAVStatsIndex=jnxJsUTMAVStatsIndex, jnxJsUTMAVScanCodeClean=jnxJsUTMAVScanCodeClean, jnxJsUTMAntiVirusEngine=jnxJsUTMAntiVirusEngine, jnxJsAntiVirusTrapsPrefix=jnxJsAntiVirusTrapsPrefix, jnxJsAVCurrentPatternVersionString=jnxJsAVCurrentPatternVersionString, jnxJsUTMAVScanCodeMaxContentSize=jnxJsUTMAVScanCodeMaxContentSize, jnxJsAVScanCodeNoResource=jnxJsAVScanCodeNoResource, jnxJsAntiVirusObjects=jnxJsAntiVirusObjects, PYSNMP_MODULE_ID=jnxJsAntiVirus, jnxJsUTMAVScanCodeEngineNotReady=jnxJsUTMAVScanCodeEngineNotReady, jnxJsUTMAVScanCodeNoResource=jnxJsUTMAVScanCodeNoResource, jnxJsAVScanCodeTimeout=jnxJsAVScanCodeTimeout, jnxJsAVScanCodeMaxContentSize=jnxJsAVScanCodeMaxContentSize, jnxJsAntiVirusTrapVars=jnxJsAntiVirusTrapVars, jnxJsAvPatternUpdateTrap=jnxJsAvPatternUpdateTrap, jnxJsAVScanCodeTooManyReq=jnxJsAVScanCodeTooManyReq, jnxJsUTMAVScanCodeInternalError=jnxJsUTMAVScanCodeInternalError, jnxJsAVScanCodeClean=jnxJsAVScanCodeClean, jnxJsAVScanCodeEngineNotReady=jnxJsAVScanCodeEngineNotReady, jnxJsAntiVirusEngine=jnxJsAntiVirusEngine, jnxJsUTMAVEngineType=jnxJsUTMAVEngineType, jnxJsUTMAVScanCodeInfected=jnxJsUTMAVScanCodeInfected, jnxJsUTMAVScanCodeTooManyReq=jnxJsUTMAVScanCodeTooManyReq, jnxJsAVScanCodeDecompress=jnxJsAVScanCodeDecompress, jnxAVPatternTimestamp=jnxAVPatternTimestamp, jnxJsUTMAVScanCodeDecompress=jnxJsUTMAVScanCodeDecompress, jnxJsUTMAntiVirusStatsEntry=jnxJsUTMAntiVirusStatsEntry, jnxJsUTMAVScanCodeTimeout=jnxJsUTMAVScanCodeTimeout, jnxJsUTMAVScanCodeProtected=jnxJsUTMAVScanCodeProtected, jnxJsAVScanCodeInternalError=jnxJsAVScanCodeInternalError)
