#
# PySNMP MIB module CISCO-OPTICAL-IF-EXTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OPTICAL-IF-EXTN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, TimeTicks, Counter32, NotificationType, Gauge32, ObjectIdentity, IpAddress, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "TimeTicks", "Counter32", "NotificationType", "Gauge32", "ObjectIdentity", "IpAddress", "MibIdentifier", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoOpticalIfExtnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 66))
ciscoOpticalIfExtnMIB.setRevisions(('2004-11-19 00:00', '2003-12-29 00:00', '2002-05-23 00:00', '2001-04-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoOpticalIfExtnMIB.setRevisionsDescriptions(("This revision adds 'sonetPhy' and 'multiRate' enumeration to coIfTypeExtn object. ", "This revision adds 'twoGigabitPhy' enumeration to coIfTypeExtn object. ", 'This revision adds a new table coIfXcvrTable to control transceivers (lasers and optical receivers) at optoelectronic interfaces. It also defines three new code points, ethernetPhy, esconPhy and gigabitPhy for the coIfTypeExtn object. ', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoOpticalIfExtnMIB.setLastUpdated('200411190000Z')
if mibBuilder.loadTexts: ciscoOpticalIfExtnMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoOpticalIfExtnMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dwdm@cisco.com')
if mibBuilder.loadTexts: ciscoOpticalIfExtnMIB.setDescription('A MIB module containing extensions to the IF-MIB for optical interfaces.')
coIfExtnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 66, 1))
coIfTypeExtnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 1))
coIfWavelengthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 2))
coIfDwdmChannelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 3))
coIfXcvrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4))
class CoDwdmFrequency(TextualConvention, Unsigned32):
    description = 'The nominal central frequency of one channel in a DWDM system, in GHz.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 1000000)

class CoDwdmFrequencyOrZero(TextualConvention, Unsigned32):
    description = 'The nominal central frequency of one channel in a DWDM system, in GHz, or zero. The value zero either indicates that the frequency is unknown, or indicates that this channel is uncolored.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 1000000)

coIfTypeExtnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 1, 1), )
if mibBuilder.loadTexts: coIfTypeExtnTable.setStatus('current')
if mibBuilder.loadTexts: coIfTypeExtnTable.setDescription('This table contains extensions to the ifType object defined in the IF-MIB for optical interfaces.')
coIfTypeExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coIfTypeExtnEntry.setStatus('current')
if mibBuilder.loadTexts: coIfTypeExtnEntry.setDescription('An entry contains extensions to the ifType object defined in the IF-MIB for one optical interface.')
coIfTypeExtn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("opticalTransponder", 1), ("wdmTransport", 2), ("wdmChannel", 3), ("wdmChannelGroup", 4), ("wavelengthTransport", 5), ("ethernetPhy", 6), ("esconPhy", 7), ("gigabitPhy", 8), ("twoGigabitPhy", 9), ("sonetPhy", 10), ("multiRate", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coIfTypeExtn.setStatus('current')
if mibBuilder.loadTexts: coIfTypeExtn.setDescription("This object indicates the type of an optical interface, when the type is not specified in the ifType object in the IF-MIB, i.e., when the ifType object is set to 'other'. The value 'opticalTransponder' represents an optoelectronic interface that relays signals of various physical layer protocols. The interface may be capable of pulse shaping and retiming. The interface may be capable of monitoring various physical layer protocols. The interface may emit signals that are colored (e.g. one channel in a DWDM system) or uncolored (i.e., for single channel interfaces). The value 'wdmTransport' indicates an optical interface that carries multiple wavelengths. The value 'wdmChannel' indicates an interface sub-layer above 'wdmTransport' representing a single wavelength. The value 'wdmChannelGroup' indicates an interface sub-layer above 'wdmTransport' representing a wavelength division multiplexed group of wavelengths. The value 'wavelengthTransport' indicates an optical interface that carries a single wavelength. The value 'ethernetPhy' indicates an interface that implements the physical layer of the Ethernet protocol. The value 'esconPhy' indicates an interface that implements the physical layer of ESCON. The value 'gigabitPhy' indicates an interface that supports the physical layers of both Gigabit Ethernet and Fibre Channel. The value 'twoGigabitPhy' indicates an interface that supports the physical layer of 1x and 2x Fibre Channel. The value 'sonetPhy' indicates an interface that carries the trunk side traffic of eight port multirate muxponder The value 'multiRate' indicates an interface that supports client protocols of eight port multirate muxponder .")
coIfWavelengthTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 2, 1), )
if mibBuilder.loadTexts: coIfWavelengthTable.setStatus('current')
if mibBuilder.loadTexts: coIfWavelengthTable.setDescription('This table contains wavelength information for optical interfaces.')
coIfWavelengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coIfWavelengthEntry.setStatus('current')
if mibBuilder.loadTexts: coIfWavelengthEntry.setDescription('An entry contains wavelength information for one optical interface.')
coIfDwdmFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 2, 1, 1, 1), CoDwdmFrequency()).setUnits('GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfDwdmFrequency.setStatus('current')
if mibBuilder.loadTexts: coIfDwdmFrequency.setDescription("The nominal central frequency associated with this interface, in GHz. This object is instantiated for interfaces with coIfTypeExtn value of 'wdmChannel' and 'wavelengthTransport'. This object may also be instantiated for optoelectronic interfaces that originate or terminate DWDM wavelengths, including some of the interfaces with coIfTypeExtn value of 'opticalTransponder'.")
coIfDwdmChannelGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 3, 3), )
if mibBuilder.loadTexts: coIfDwdmChannelGroupTable.setStatus('current')
if mibBuilder.loadTexts: coIfDwdmChannelGroupTable.setDescription("This table contains information about interfaces representing groups of DWDM channels. This includes interfaces with coIfTypeExtn value of 'wdmChannelGroup'.")
coIfDwdmChannelGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coIfDwdmChannelGroupEntry.setStatus('current')
if mibBuilder.loadTexts: coIfDwdmChannelGroupEntry.setDescription('An entry contains information about one interface that represents a group of DWDM channels. The group can be described as a specified set of DWDM frequencies, or as the group of all DWDM frequencies except for those in a specified set. If a frequency is included in a DWDM channel group, this does not necessarily indicate that there is a signal present at that frequency. It indicates that if a signal is present at that frequency, then that signal is included in this DWDM channel group.')
coIfDwdmChannelGroupMinFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 3, 3, 1, 1), CoDwdmFrequency()).setUnits('GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfDwdmChannelGroupMinFrequency.setStatus('current')
if mibBuilder.loadTexts: coIfDwdmChannelGroupMinFrequency.setDescription('The lowest frequency represented in the bitmap specified in coIfDwdmChannelGroupBitmap, i.e., the frequency represented by bit 0 of octet 1 of coIfDwdmChannelGroupBitmap.')
coIfDwdmChannelGroupSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 3, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfDwdmChannelGroupSpacing.setStatus('current')
if mibBuilder.loadTexts: coIfDwdmChannelGroupSpacing.setDescription('The difference in frequency between successive bits in coIfDwdmChannelGroupBitmap. This is typically the frequency difference between adjacent channels in the DWDM system.')
coIfDwdmChannelGroupBitmapLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("carried", 1), ("blocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfDwdmChannelGroupBitmapLogic.setStatus('current')
if mibBuilder.loadTexts: coIfDwdmChannelGroupBitmapLogic.setDescription("This object indicates whether coIfDwdmChannelGroupBitmap identifies channels included in the channel group, or whether it identifies channels excluded from the channel group. When the value of this object is 'carried', then the channel group is composed only of those channels for which the value of the corresponding bit in coIfDwdmChannelBitmap is one. When the value of this object is 'blocked', then the channel group is composed of all channels except those for which the value of the corresponding bit in coIfDwdmChannelBitmap is one. Channels that are not identified in coIfDwdmChannelBitmap are included in the channel group.")
coIfDwdmChannelGroupBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfDwdmChannelGroupBitmap.setStatus('current')
if mibBuilder.loadTexts: coIfDwdmChannelGroupBitmap.setDescription("The DWDM channel bitmap that indicates those channels that are included or excluded (depending on the value of coIfDwdmChannelBitmapLogic) from the DWDM channel group. If a frequency is included in a DWDM channel group, this does not necessarily indicate that there is a signal present at that frequency. It indicates that if a signal is present at that frequency, then that signal is included in this DWDM channel group. Bit zero of octet one corresponds to the lowest channel (representing the frequency identified by coIfDwdmChannelGroupMinFrequency), bit one of octet one corresponds to the lowest plus one channel (representing the frequency obtained by adding the values of coIfDwdmChannelGroupMinFrequency and coIfDwdmChannelGroupSpacing), and so on. When the value of coIfDwdmChannelBitmapLogic is 'carried', then channels included in the channel group will have the corresponding bit set to one in the bitmap. Bits that are set to zero represent channels that are excluded from the channel group. Channels that are not represented in the bitmap are also excluded from the channel group. When the value of coIfDwdmChannelBitmapLogic is 'blocked', then channels excluded from the channel group will have the corresponding bit set to one in the bitmap. Bits that are set to zero represent channels that are included in the channel group. Channels that are not represented in the bitmap are also included in the channel group.")
coIfXcvrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1), )
if mibBuilder.loadTexts: coIfXcvrTable.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrTable.setDescription('This table contains objects to control transceivers (lasers and optical receivers) at optoelectronic interfaces.')
coIfXcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coIfXcvrEntry.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrEntry.setDescription('An entry contains objects for control of a transceiver at an optoelectronic interface.')
coIfXcvrLaserAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLaserAdminStatus.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLaserAdminStatus.setDescription("The desired state of the laser on this interface. This object differs from ifAdminStatus in the IF-MIB, since in some cases setting ifAdminStatus to 'down' causes an alarm indication to be transmitted, rather than shutting down the laser. When this object is set to 'down', ifOperStatus in the IF-MIB goes to the 'down' state, and the laser is shut down. In order to administratively enable an interface, both ifAdminStatus in the IF-MIB and this object must be set to 'up'.")
coIfXcvrLaserOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmitting", 1), ("degraded", 2), ("down", 3), ("lscDown", 4), ("flcDown", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coIfXcvrLaserOperStatus.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLaserOperStatus.setDescription("This object indicates the current operational status of the laser on this interface. 'transmitting': The laser is on. 'degraded': The laser is on, but there is a fault that causes it to transmit in a degraded manner. 'down': The laser is shut down, either because of error conditions or because it has been administratively disabled. This state indicates that the laser is shut down due to conditions other than Laser Safety Control or Forward Laser Control. 'lscDown': The laser is shut down due to Laser Safety Control (LSC) mechanisms such as Automatic Laser Shutdown (ALS), i.e., due to a fault in the receive direction at this interface. 'flcDown': The laser is shut down due to Forward Laser Control, i.e., due to a fault on the cross-connected interface. 'unknown': The operational status of the laser cannot be determined. If the value of coIfXcvrLaserAdminStatus is 'down', then this object also indicates 'down'. If coIfXcvrLaserAdminStatus is set to 'up', then the value of this object should change to 'transmitting' if the laser is functioning properly.")
coIfXcvrMinLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 3), CoDwdmFrequencyOrZero()).setUnits('GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrMinLaserFrequency.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrMinLaserFrequency.setDescription('The lowest frequency represented in the bitmap specified in coIfXcvrLaserFrequencyBitmap, i.e., the frequency represented by bit 0 of octet 1 of coIfXcvrLaserFrequencyBitmap. A value of zero signifies that the laser on this interface is uncolored and that coIfXcvrLaserFrequencyBitmap does not apply.')
coIfXcvrLaserFrequencySpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('GHz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLaserFrequencySpacing.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLaserFrequencySpacing.setDescription('The difference in frequency between successive bits in coIfXcvrLaserFrequencyBitmap. This is typically the frequency difference between adjacent channels in the DWDM system.')
coIfXcvrLaserFrequencyBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coIfXcvrLaserFrequencyBitmap.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLaserFrequencyBitmap.setDescription('This bitmap indicates the DWDM channel frequencies supported by the tunable laser on this interface. Bit zero of octet one corresponds to the lowest channel (representing the frequency identified by coIfXcvrMinLaserFrequency), bit one of octet one corresponds to the lowest plus one channel (representing the frequency obtained by adding the values of coIfXcvrMinLaserFrequency and coIfXcvrMinLaserFrequencySpacing), and so on. The frequencies supported by the tunable laser have the corresponding bit set to one in the bitmap. Bits that are set to zero represent frequencies that are not supported by the tunable laser. The frequencies that are not represented in the bitmap are also not supported by the tunable laser.')
coIfXcvrForwardLaserControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrForwardLaserControl.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrForwardLaserControl.setDescription('This object is used to enable or disable Forward Laser Control (FLC) on this interface. If Forward Laser Control is enabled, the laser is automatically shut down when the receive direction of the cross-connected interface is in an alarm condition.')
coIfXcvrLaserSafetyControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLaserSafetyControl.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLaserSafetyControl.setDescription('This object is used to enable or disable Laser Safety Control (LSC) mechanisms such as Automatic Laser Shutdown (ALS) on this interface. Laser Safety Control mechanisms are used to automatically shutdown the output power of laser transmitters when potentially hazardous conditions such as fiber breaks or unplugged optical connectors are detected.')
coIfXcvrLSCProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proprietary", 1), ("g664", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLSCProtocol.setReference('ITU-T Recommendation G.664, Optical safety procedures and requirements for optical transport systems, June 1999')
if mibBuilder.loadTexts: coIfXcvrLSCProtocol.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLSCProtocol.setDescription("This object identifies the Laser Safety Control protocol that is applied when coIfXcvrLaserSafetyControl is set to 'enable'. 'proprietary': Indicates that the Laser Safety Control protocol is proprietary. 'g664': Indicates the Automatic Laser Shutdown (ALS) protocol specified in ITU-T Recommendation G.664.")
coIfXcvrLSCRestartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automaticRestart", 1), ("manualRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLSCRestartMode.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLSCRestartMode.setDescription("This object selects the mechanism used to restore transmission after the fiber has been repaired or reconnected. 'automaticRestart': This mode selects automatic restart of the laser by periodically transmitting restart pulses. The period between restart pulse transmissions is specified by coIfXcvrLSCPulseReptitionTime. 'manualRestart': This mode selects manual restart of the laser. After the fiber has been repaired or reconnected, the coIfXcvrLSCManualRestart object should be used to trigger transmission of a restart pulse.")
coIfXcvrLSCManualRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("restart", 2), ("restartForTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLSCManualRestart.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLSCManualRestart.setDescription("This object initiates laser activation when the laser is shut down due to Laser Safety Control. When the value is set to 'restart', transmission of a restart pulse of length coIfXcvrLSCPulseLength is triggered. When this object is set to 'restartForTest', transmission of a restart pulse of length coIfXcvrLSCTestPulseLength is triggered. Before setting this object to 'restartForTest', specific care must be taken to assure connectivity to avoid exposure to hazardous optical levels. When the value is set to 'noop', no operation is performed. When read, the value 'noop' is returned. Manual restart can only be activated when the value of coIfXcvrLaserOperStatus is 'lscDown'.")
coIfXcvrLSCPulseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 20000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLSCPulseLength.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLSCPulseLength.setDescription('This object specifies the length of restart pulses used to restore transmission when a Laser Safety Control protocol is activated.')
coIfXcvrLSCTestPulseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLSCTestPulseLength.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLSCTestPulseLength.setDescription("This object specifies the length of test restart pulses that are transmitted when coIfXcvrLSCManualRestart is set to 'restartForTest'.")
coIfXcvrLSCPulseRepetitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 66, 1, 4, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: coIfXcvrLSCPulseRepetitionTime.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLSCPulseRepetitionTime.setDescription("This object specifies the delay interval between transmissions of restart pulses, when coIfXcvrLSCRestartMode is set to 'automaticRestart' and coIfXcvrLaserOperStatus indicates 'lscDown'.")
coIfExtnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 66, 3))
coIfExtnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 1))
coIfExtnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 2))
coIfExtnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 1, 1)).setObjects(("CISCO-OPTICAL-IF-EXTN-MIB", "coIfWavelengthMIBGroup"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfTypeExtnMIBGroup"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfDwdmChannelGroupMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coIfExtnMIBCompliance = coIfExtnMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: coIfExtnMIBCompliance.setDescription('The compliance statement for the Cisco Optical Interface Extensions MIB.')
coIfExtnMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 1, 2)).setObjects(("CISCO-OPTICAL-IF-EXTN-MIB", "coIfWavelengthMIBGroup"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfTypeExtnMIBGroup"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfDwdmChannelGroupMIBGroup"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrBaseMIBGroup"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrTunableLaserMIBGroup"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLSCMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coIfExtnMIBCompliance2 = coIfExtnMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: coIfExtnMIBCompliance2.setDescription('The compliance statement for the Cisco Optical Interface Extensions MIB.')
coIfTypeExtnMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 2, 1)).setObjects(("CISCO-OPTICAL-IF-EXTN-MIB", "coIfTypeExtn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coIfTypeExtnMIBGroup = coIfTypeExtnMIBGroup.setStatus('current')
if mibBuilder.loadTexts: coIfTypeExtnMIBGroup.setDescription('A collection of managed objects providing extensions to the interface type information found in the IF-MIB.')
coIfWavelengthMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 2, 2)).setObjects(("CISCO-OPTICAL-IF-EXTN-MIB", "coIfDwdmFrequency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coIfWavelengthMIBGroup = coIfWavelengthMIBGroup.setStatus('current')
if mibBuilder.loadTexts: coIfWavelengthMIBGroup.setDescription('A collection of managed objects providing information about the wavelength or frequency of optical interfaces.')
coIfDwdmChannelGroupMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 2, 3)).setObjects(("CISCO-OPTICAL-IF-EXTN-MIB", "coIfDwdmChannelGroupMinFrequency"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfDwdmChannelGroupSpacing"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfDwdmChannelGroupBitmapLogic"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfDwdmChannelGroupBitmap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coIfDwdmChannelGroupMIBGroup = coIfDwdmChannelGroupMIBGroup.setStatus('current')
if mibBuilder.loadTexts: coIfDwdmChannelGroupMIBGroup.setDescription('A collection of managed objects providing information about DWDM channel groups.')
coIfXcvrBaseMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 2, 4)).setObjects(("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLaserAdminStatus"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLaserOperStatus"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrForwardLaserControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coIfXcvrBaseMIBGroup = coIfXcvrBaseMIBGroup.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrBaseMIBGroup.setDescription('A collection of managed objects for control of transceivers (lasers and optical receivers) at optoelectronic interfaces.')
coIfXcvrTunableLaserMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 2, 5)).setObjects(("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrMinLaserFrequency"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLaserFrequencySpacing"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLaserFrequencyBitmap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coIfXcvrTunableLaserMIBGroup = coIfXcvrTunableLaserMIBGroup.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrTunableLaserMIBGroup.setDescription('A collection of managed objects providing information about tunable lasers.')
coIfXcvrLSCMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 66, 3, 2, 6)).setObjects(("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLaserSafetyControl"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLSCProtocol"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLSCRestartMode"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLSCManualRestart"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLSCPulseLength"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLSCTestPulseLength"), ("CISCO-OPTICAL-IF-EXTN-MIB", "coIfXcvrLSCPulseRepetitionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coIfXcvrLSCMIBGroup = coIfXcvrLSCMIBGroup.setStatus('current')
if mibBuilder.loadTexts: coIfXcvrLSCMIBGroup.setDescription('A collection of managed objects for Laser Safety Control (LSC) mechanisms such as Automatic Laser Shutdown (ALS).')
mibBuilder.exportSymbols("CISCO-OPTICAL-IF-EXTN-MIB", coIfDwdmChannelGroupBitmapLogic=coIfDwdmChannelGroupBitmapLogic, coIfXcvrTunableLaserMIBGroup=coIfXcvrTunableLaserMIBGroup, coIfXcvrGroup=coIfXcvrGroup, coIfDwdmChannelGroupMIBGroup=coIfDwdmChannelGroupMIBGroup, coIfDwdmChannelGroupTable=coIfDwdmChannelGroupTable, coIfTypeExtnMIBGroup=coIfTypeExtnMIBGroup, coIfExtnMIBGroups=coIfExtnMIBGroups, coIfXcvrLSCPulseRepetitionTime=coIfXcvrLSCPulseRepetitionTime, coIfDwdmChannelGroupSpacing=coIfDwdmChannelGroupSpacing, coIfTypeExtnGroup=coIfTypeExtnGroup, coIfXcvrTable=coIfXcvrTable, coIfExtnMIBCompliance=coIfExtnMIBCompliance, coIfXcvrBaseMIBGroup=coIfXcvrBaseMIBGroup, CoDwdmFrequencyOrZero=CoDwdmFrequencyOrZero, coIfXcvrLSCMIBGroup=coIfXcvrLSCMIBGroup, coIfXcvrLaserOperStatus=coIfXcvrLaserOperStatus, coIfExtnMIBCompliances=coIfExtnMIBCompliances, coIfXcvrLSCPulseLength=coIfXcvrLSCPulseLength, coIfXcvrForwardLaserControl=coIfXcvrForwardLaserControl, coIfDwdmChannelGroupBitmap=coIfDwdmChannelGroupBitmap, coIfXcvrLSCTestPulseLength=coIfXcvrLSCTestPulseLength, coIfExtnMIBCompliance2=coIfExtnMIBCompliance2, coIfXcvrLSCManualRestart=coIfXcvrLSCManualRestart, coIfXcvrLSCProtocol=coIfXcvrLSCProtocol, coIfDwdmChannelGroupEntry=coIfDwdmChannelGroupEntry, CoDwdmFrequency=CoDwdmFrequency, coIfTypeExtnTable=coIfTypeExtnTable, coIfExtnMIBObjects=coIfExtnMIBObjects, coIfTypeExtn=coIfTypeExtn, ciscoOpticalIfExtnMIB=ciscoOpticalIfExtnMIB, coIfExtnMIBConformance=coIfExtnMIBConformance, coIfWavelengthTable=coIfWavelengthTable, coIfXcvrLaserFrequencyBitmap=coIfXcvrLaserFrequencyBitmap, coIfXcvrLSCRestartMode=coIfXcvrLSCRestartMode, PYSNMP_MODULE_ID=ciscoOpticalIfExtnMIB, coIfDwdmChannelGroup=coIfDwdmChannelGroup, coIfDwdmChannelGroupMinFrequency=coIfDwdmChannelGroupMinFrequency, coIfXcvrLaserSafetyControl=coIfXcvrLaserSafetyControl, coIfWavelengthMIBGroup=coIfWavelengthMIBGroup, coIfXcvrEntry=coIfXcvrEntry, coIfXcvrLaserFrequencySpacing=coIfXcvrLaserFrequencySpacing, coIfWavelengthEntry=coIfWavelengthEntry, coIfTypeExtnEntry=coIfTypeExtnEntry, coIfDwdmFrequency=coIfDwdmFrequency, coIfXcvrMinLaserFrequency=coIfXcvrMinLaserFrequency, coIfWavelengthGroup=coIfWavelengthGroup, coIfXcvrLaserAdminStatus=coIfXcvrLaserAdminStatus)
