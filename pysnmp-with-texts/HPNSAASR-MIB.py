#
# PySNMP MIB module HPNSAASR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAASR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, ObjectIdentity, MibIdentifier, ModuleIdentity, Integer32, NotificationType, Unsigned32, TimeTicks, iso, enterprises, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Integer32", "NotificationType", "Unsigned32", "TimeTicks", "iso", "enterprises", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaASR = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 25))
hpnsaASRMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 1))
hpnsaASRParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2))
hpnsaASRMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaASRMibRevMajor.setDescription('The major revision level of the MIB.')
hpnsaASRMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaASRMibRevMinor.setDescription('The minor revision level of the MIB.')
hpnsaASRMaxConsecutiveASR = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaASRMaxConsecutiveASR.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaASRMaxConsecutiveASR.setDescription('This specifies the maximum number of consecutive ASR reboot allowed in this system, if exceeding this value, no ASR will be performed. 0 means no limit on maximum number of reboots, 1-10 for setting a limit')
hpnsaASRCurrentConsecutiveASR = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRCurrentConsecutiveASR.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaASRCurrentConsecutiveASR.setDescription('The current value of the number of consecutive ASR reboot happened so far.')
hpnsaASRTimeOutInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaASRTimeOutInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaASRTimeOutInterval.setDescription(' Time out interval used for ASR reboot, if the timer is not reset/kicked during this interval, system will reboot')
hpnsaASRKickInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRKickInterval.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaASRKickInterval.setDescription(' This is the fixed interval used to reset/kick the ASR watchdog timer to avoid the expiration of the timer which will trigger ASR')
hpnsaASRTimeoutAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 25, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaASRTimeoutAction.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaASRTimeoutAction.setDescription('This specifies the action that will be executed when the ASR timeout occurs, it can be no action - only logging, hard reset, or power cycle')
mibBuilder.exportSymbols("HPNSAASR-MIB", hpnsaASRMibRevMinor=hpnsaASRMibRevMinor, nm=nm, hpnsaASRTimeOutInterval=hpnsaASRTimeOutInterval, hpnsaASRParms=hpnsaASRParms, hpnsaASRMibRevMajor=hpnsaASRMibRevMajor, hpnsaASRKickInterval=hpnsaASRKickInterval, hpnsaASRTimeoutAction=hpnsaASRTimeoutAction, hpnsaASRMaxConsecutiveASR=hpnsaASRMaxConsecutiveASR, hpnsa=hpnsa, hpnsaASRMibRev=hpnsaASRMibRev, hpnsaASR=hpnsaASR, hpnsaASRCurrentConsecutiveASR=hpnsaASRCurrentConsecutiveASR, hp=hp)
