#
# PySNMP MIB module CXAsync-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXAsync-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ThruputClass, Alias, cxAsync, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "ThruputClass", "Alias", "cxAsync", "SapIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, NotificationType, ObjectIdentity, iso, Counter32, Counter64, TimeTicks, NotificationType, ModuleIdentity, Unsigned32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "ObjectIdentity", "iso", "Counter32", "Counter64", "TimeTicks", "NotificationType", "ModuleIdentity", "Unsigned32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PacketSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("bytes16", 4), ("bytes32", 5), ("bytes64", 6), ("bytes128", 7), ("bytes256", 8), ("bytes512", 9), ("bytes1024", 10), ("bytes2048", 11), ("bytes4096", 12))

class YesNo(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("no", 1), ("yes", 2))

class ProfIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

class DteIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

asyX25TxQThreshold = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyX25TxQThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: asyX25TxQThreshold.setDescription('Defines the global X.25 queue threshold, in number of frames. When the threshold is exceeded and the SAP (service access point) object asySapNetworkFlowControlState is in the Flow Control On state, a Disconnect Request, for SVC (switch virtual circuits), or a Reset Request, for PVC (permanent virtual circuits), takes place at the X.25 layer. Range of Values: 1 - 255 Default Value: 10 Configuration Changed: Administrative ')
asyPadIdBanner = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)).clone('Async PAD')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyPadIdBanner.setStatus('mandatory')
if mibBuilder.loadTexts: asyPadIdBanner.setDescription('Defines the Async PAD Identification Banner. This banner is transmitted to the attached device whenever it raises interface signals. Range of Values: 1 - 255 Default Value: Async PAD Configuration Changed: Operative ')
asyAlarms = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enable", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: asyAlarms.setDescription('Indicates whether this layer produces the object asySapAlarm trap. Options: disabled (1) enable (2) Default Value: disable Configuration Changed: Administrative ')
asySapStatusEvent = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("noEvent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapStatusEvent.setStatus('mandatory')
if mibBuilder.loadTexts: asySapStatusEvent.setDescription('Identifies the status generated in the object asyAlarmTrap. This object is used for identification by the trap when it occurs and will always return the value noEvent when read.')
asySoftwareVersions = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySoftwareVersions.setStatus('mandatory')
if mibBuilder.loadTexts: asySoftwareVersions.setDescription('Identifies the revision numbers of the Async layer software. This is a read-only parameter that displays the revision number as a string of five numbers. Each number is separated by a period and is identified as follows: 1. main version number 2. main revision number 3. branch version number 4. branch revision number 5. part number')
asyMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: asyMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
asySapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20), )
if mibBuilder.loadTexts: asySapTable.setStatus('mandatory')
if mibBuilder.loadTexts: asySapTable.setDescription('Contains configuration information about each Async layer SAP (service access point).')
asySapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1), ).setIndexNames((0, "CXAsync-MIB", "asySapNumber"))
if mibBuilder.loadTexts: asySapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: asySapEntry.setDescription('Contains the parameters for a specific Async layer SAP (service access point).')
asySapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: asySapNumber.setDescription('Indicates the table row containing configuration or monitoring objects for a SAP (service access point) associated with the slot of a card, a port of this card, and a logical channel on this port. Range of Values: 11x to 71x Note: First number is the slot, second number is the port, and x is the logical channel. Default Value: None')
asySapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: asySapRowStatus.setDescription('Indicates whether or not this specific entry is configured within the MIB. Options: invalid (1): Row is flagged and deleted from the table after the next reset. valid (2): Parameter is added or modified if it already exists in the table. Default Value: valid Configuration Changed: Operative for valid entry and administrative for invalid entry ')
asySapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: asySapAlias.setDescription('Determines the name which uniquely identifies the SAP (service access point). Range of Values: 1 to 16 alphanumeric characters beginning with an alpha character Default Value: none Configuration Changed: Administrative ')
asySapMCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapMCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: asySapMCompanionAlias.setDescription('Determines the name which uniquely identifies the companion MAC SAP (service access point) which will communicate with this SAP. Range of Values: 1 to 16 alphanumeric characters beginning with an alpha character Default Value: none Changed: Administrative ')
asySapNCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapNCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: asySapNCompanionAlias.setDescription('Determines the name which uniquely identifies the X.25 SAP (service access point) which will communicate with this SAP. Range of Values: 1 to 16 alphanumeric characters beginning with an alpha character Default Value: none Configuration Changed: Administrative ')
asySapX3Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(92)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapX3Profile.setStatus('mandatory')
if mibBuilder.loadTexts: asySapX3Profile.setDescription('Tells the SAP (service access point) which set of X.3 parameters to use. Range of Values: 1 - 255 Default Value: 92 Configuration Changed: Operative ')
asySapNUI = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapNUI.setStatus('mandatory')
if mibBuilder.loadTexts: asySapNUI.setDescription('Defines the Network User ID for this SAP (service access point). Options: 1 to 14 alphanumeric characters Default Value: 0 Configuration Changed: Operative ')
asySapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapAddress.setStatus('mandatory')
if mibBuilder.loadTexts: asySapAddress.setDescription('Defines the calling address for this SAP (service access point). Range of Values: 1 to 15 digits Default Value: 0 Configuration Changed: Operative ')
asySapDisconnectRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 9), YesNo().clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapDisconnectRequest.setStatus('mandatory')
if mibBuilder.loadTexts: asySapDisconnectRequest.setDescription('Sends a Disconnect Request to the MAC layer when the YT timer expires. Options: Yes = Enable the disconnect request No = Disable the disconnect request Default Value: No Configuration Changed: Operative ')
asySapRxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 10), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapRxThruputClass.setReference('CCITT(1988) Section 7.2.2.2 and Table 30/X.25')
if mibBuilder.loadTexts: asySapRxThruputClass.setStatus('mandatory')
if mibBuilder.loadTexts: asySapRxThruputClass.setDescription('Defines the default receive throughput class that is used at this SAP (service access point). Range of Values: 75 - 64000 bps Default Value: 9600 bps Configuration Changed: Operative ')
asySapTxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 11), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapTxThruputClass.setReference('CCITT(1988) Section 7.2.2.2 and Table 30/X.25')
if mibBuilder.loadTexts: asySapTxThruputClass.setStatus('mandatory')
if mibBuilder.loadTexts: asySapTxThruputClass.setDescription('Defines the default transmit throughput class that is used at this SAP (service access point). Range of Values: 75 to 64000 bps Default Value: 9600 bps Configuration Changed: Operative ')
asySapTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 12), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapTxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: asySapTxPacketSize.setDescription('Defines the size of the transmit packet for the Async layer. Range of Values: 16 to 4096 bytes Default Value: 128 bytes Configuration Changed: Operative ')
asySapRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 13), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapRxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: asySapRxPacketSize.setDescription('Defines the size of the receive packet for the Async layer. Range of Values: 16 to 4096 bytes Default Value: 128 bytes Configuration Changed: Operative ')
asySapTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapTxWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: asySapTxWindowSize.setDescription('Defines the size of the transmit window for the Async layer. Range of Values: 1 to 127 Default Value: 2 Configuration Changed: Operative ')
asySapRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapRxWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: asySapRxWindowSize.setDescription('Defines the size of the receive window for the Async layer. Range of Values: 1 to 127 Default Value: 2 Configuration Changed: Operative ')
asySapYTTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapYTTimer.setReference('CCITT X.28 Annex B Table B-1/X.28.')
if mibBuilder.loadTexts: asySapYTTimer.setStatus('mandatory')
if mibBuilder.loadTexts: asySapYTTimer.setDescription('Defines the time of inactivity, in seconds, after which the SAP (service access point) will send a disconnect request to the MAC layer. The timer starts when the line is enabled or the virtual circuit is cleared and stops when the first character of a command is entered. Range of Values: 0 to 255 Note: A value of 0 means that the timer is disabled. Default Value: 60 Configuration Changed: Operative ')
asySapSRTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapSRTimer.setReference('CCITT X.28 Annex B Table B-1/X.28.')
if mibBuilder.loadTexts: asySapSRTimer.setStatus('mandatory')
if mibBuilder.loadTexts: asySapSRTimer.setDescription('Defines the time of inactivity, in seconds, between command characters. The timer starts when the command mode is entered or when a character of a command is entered and stops when a command is entered or when data mode is entered. A time-out will generate an error message. Range of Values: 0 to 255 Note: A value of 0 means that the timer is disabled. Default Value: 60 Configuration Changed: Operative ')
asySapNUILength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapNUILength.setStatus('obsolete')
if mibBuilder.loadTexts: asySapNUILength.setDescription('Defines the length, in nibbles, allowed for the Network User ID. Range of Values: 1 to 14 Default Value: 0 Configuration Changed: Operative ')
asySapReverseChargingAcceptance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 19), YesNo().clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapReverseChargingAcceptance.setReference('CCITT X.25 6.19')
if mibBuilder.loadTexts: asySapReverseChargingAcceptance.setStatus('mandatory')
if mibBuilder.loadTexts: asySapReverseChargingAcceptance.setDescription('Authorizes the DCE (Async application) to transmit incoming calls to the DTE (Async user) that requested the reverse charging, if reverse charging acceptance is allowed. If acceptance is not allowed, the DCE (Async application) will not transmit the incoming calls to the DTE which requested the reverse charging. Options: Yes No Default Value: No Configuration Changed: Operative ')
asySapChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 20), YesNo().clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapChargingInformation.setReference('CCITT X.25 6.22')
if mibBuilder.loadTexts: asySapChargingInformation.setStatus('mandatory')
if mibBuilder.loadTexts: asySapChargingInformation.setDescription('Authorizes the DCE (Async application) to send charging information to the DTE (user) with the Clear Indication or Clear Confirmation packet. Options: Yes No Default Value: No Configuration Changed: Operative ')
asySapSubscriptionCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 21), YesNo().clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapSubscriptionCUG.setReference('CCITT X.25 6.14.1')
if mibBuilder.loadTexts: asySapSubscriptionCUG.setStatus('mandatory')
if mibBuilder.loadTexts: asySapSubscriptionCUG.setDescription('Enables the DTE (User) to subscribe to one or more CUGs (Closed User Groups). A CUG permits the DTEs belonging to the group to communicate with each other in the group but prevents communication with all other DTEs. Options: Yes No Default Value: No Configuration Changed: Operative ')
asySapSubscriptionCUGOA = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 22), YesNo().clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapSubscriptionCUGOA.setReference('CCITT X.25 6.14.2')
if mibBuilder.loadTexts: asySapSubscriptionCUGOA.setStatus('mandatory')
if mibBuilder.loadTexts: asySapSubscriptionCUGOA.setDescription('Enables the DTE (user) to subscribe to one or more CUGs (Closed User Groups), as in object asySapSubscriptionCUG, with outgoing access. The DTE can originate virtual calls to DTEs in the open part of the network (DTEs not belonging to a CUG), and to DTEs belonging to other CUGs with incoming access capability. Options: Yes No Default Value: No Configuration Changed: Operative ')
asySapSubscriptionCUGIA = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 23), YesNo().clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapSubscriptionCUGIA.setReference('CCITT X.25 6.14.3')
if mibBuilder.loadTexts: asySapSubscriptionCUGIA.setStatus('mandatory')
if mibBuilder.loadTexts: asySapSubscriptionCUGIA.setDescription('Enables the DTE (user) to subscribe to one or more CUGs (Closed User Groups), as in object asySapSubscriptionCUG, with incoming access. The DTE can receive incoming calls from DTEs in the open part of the network (DTEs not belonging to a CUG), and from DTEs belonging to other CUGs with outgoing access capability. Options: Yes No Default Value: No Configuration Changed: Operative ')
asySapPreferentialCUGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapPreferentialCUGIndex.setReference('CCITT X.25 6.14.1')
if mibBuilder.loadTexts: asySapPreferentialCUGIndex.setStatus('mandatory')
if mibBuilder.loadTexts: asySapPreferentialCUGIndex.setDescription('Defines the preferential CUG (Closed User Group) for a DTE (user) with a CUG, CUGOA or CUGIA subscription. Range of Values: 0 to 99 Note: 0 = No preferential CUG, 1 to 99 = Basic format values allowed Default Value: 0 Configuration Changed: Operative ')
asySapReceiptConfirmation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAck", 1), ("dBit", 2), ("localAck", 3), ("xmitAck", 4))).clone('noAck')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapReceiptConfirmation.setStatus('mandatory')
if mibBuilder.loadTexts: asySapReceiptConfirmation.setDescription('Tells the X.25 layer which receipt confirmation value is required by this SAP (service access point). Options: noAck dBit localAck xmitAck Default Value: noAck Configuration Changed: Operative ')
asySapEnableProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 26), YesNo().clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapEnableProtocolId.setReference('CCITT X.29 1.3, 4.2')
if mibBuilder.loadTexts: asySapEnableProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: asySapEnableProtocolId.setDescription('Controls whether or not the Protocol ID field of the user data is inserted by the Async layer. Options: enable = Allows up to 12 bytes, or 124 bytes for fast select, of user data for the X.28 value command where the Protocol ID field of the user data is inserted by the Async layer disable = Allows up to 16 bytes, or 128 bytes for fast select, of user data for the X.28 value command where the Protocol ID field of the user data is not inserted by the Async layer) Default Value: enable Configuration Changed: Operative ')
asySapProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 11)).clone('01,00,00,00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProtocolId.setReference('CCITT X.28 3.1.3, X.29 4.2')
if mibBuilder.loadTexts: asySapProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProtocolId.setDescription('Defines the protocol format that is used for incoming call or call request packets to the X.25 call data field. The field consists of 4 hexadecimal octets where the first octet is coded as follows: bits 8 & 7 - 00 for CCITT use - 01 for national use - 10 reserved for international user bodies - 11 for DTE-DTE use When bits 8 & 7 are equal to 00, bits 6 to 1 will be equal to 000001. The first octet is shown as 01, 00, 00, 00. The first 0 in each number is optional and may be shown as 1, 0, 0, 0. All bits of octets 2, 3 and 4 are set to 0. They are reserved as a future mechanism for providing the called PAD or packet mode DTE (user) with additional information pertaining to the calling party. Default Value: 01,00,00,00 Configuration Changed: Operative ')
asySapPromptSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('*')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapPromptSignal.setReference('CCITT X.28 3.1.3, 3.5.23')
if mibBuilder.loadTexts: asySapPromptSignal.setStatus('mandatory')
if mibBuilder.loadTexts: asySapPromptSignal.setDescription('Defines the prompt PAD service signal (banner) that is sent to the MAC layer whenever the Async PAD enters a PAD waiting state or waiting for command state. Options: 1 to 16 alphanumeric characters Default Value: Character 2/10 (*) Configuration Changed: Operative ')
asySapAutoConnectDteId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapAutoConnectDteId.setStatus('mandatory')
if mibBuilder.loadTexts: asySapAutoConnectDteId.setDescription('Identifies the remote DTE (by name) to be connected to whenever the async sap receives a Connect Indication or Connect Confirm from the MAC layer. If no name is identified the Auto Connect is disabled for this sap')
asySapAutoConnectRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapAutoConnectRetry.setStatus('mandatory')
if mibBuilder.loadTexts: asySapAutoConnectRetry.setDescription("Defines the number of times this async sap will try to connect (if Connect Accept is not received from the X.25 layer) to the remote DTE defined by the object asySapAutoConnectDteId whenever the async sap receives a Connect Indication or Connect Confirm from the MAC layer. The async sap will wait the asySapAutoConnectDelayTimer before trying to connect. a value of '0' means continuous retries.")
asySapAutoConnectDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapAutoConnectDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: asySapAutoConnectDelayTimer.setDescription('Defines the time in seconds this async sap will wait before trying to connect to the remote DTE defined by the object asySapAutoConnectDteId whenever the async sap receives a Connect Indication or Connect Confirm from the MAC layer. ')
asySapHardwareFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 32), YesNo().clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapHardwareFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: asySapHardwareFlowControl.setDescription('Enables the MAC to flow control the device via the EIA RTS/CTS signal. Options: Yes No Default Value: No Configuration Changed: Operative ')
asySapProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("iocProtocol", 2), ("modifiedudf", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProtocolType.setDescription('Defines the Async Protocol type for this sap. Options: normal (1) for Normal Async (X.3, X.28, X.29) protocol. iocProtocol (2) for IOC Protocol. ModifiedUDF (3) for the Modified IOC Protocol. Default Value: 1 Configuration Changed: Operative ')
asySapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clearStats", 1), ("enableSap", 2), ("disableSapImmediately", 3), ("disableSapGracefully", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: asySapControl.setStatus('mandatory')
if mibBuilder.loadTexts: asySapControl.setDescription('Defines the control that is used with the specified Async layer SAP (service access point). Options: clearStats (1): Zeros all the statistic counters for this SAP. enableSAP (2): Enables the transmission and reception of data to and from the SAP. disableSAPImmediately (3): Disables the transmission and reception of data to and from the SAP and any open virtual calls are cleared immediately. disableSAPGracefully (4): Disables the transmission and reception of data to and from SAP after the virtual call has been cleared by the X.28 or network layer interface. Configuration Changed: Operative ')
asySapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disconnected", 1), ("enabled", 2), ("connecting", 3), ("dataTransfer", 4), ("resetting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapState.setStatus('mandatory')
if mibBuilder.loadTexts: asySapState.setDescription('Indicates the current state of the Async layer SAP(service access point). Options: disconnected (1) enabled (2) connecting (3) data Transfer (4) resetting (5) Default Value None')
asySapAsyncFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flowControlOff", 1), ("flowControlOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapAsyncFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: asySapAsyncFlowControlState.setDescription('Indicates whether this SAP (service access point) was forced to initiate flow control procedures by the MAC (media access control) layer. Options: flowControlOff (1) flowControlOn (2) Note: When flow control is forced at this SAP, this object takes on the value, flowControlOn. Default Value: flowControlOff')
asySapNetworkFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flowControlOff", 1), ("flowControlOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapNetworkFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: asySapNetworkFlowControlState.setDescription('Indicates whether or not this SAP (service access point) was forced to initiate flow control procedures by the network layer. Options: flowControlOff (1) flowControlON (2) Note: When flow control is forced at this SAP, this object takes on the value, flowControlOn.')
asySapAsyncTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapAsyncTxQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: asySapAsyncTxQueueSize.setDescription('Indicates the current number of frames to be transmitted to the MAC (media access control) layer.')
asySapX25TxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapX25TxQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: asySapX25TxQueueSize.setDescription('Indicates the current number of frames to be send to the network layer.')
asySapNumberConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapNumberConnects.setStatus('mandatory')
if mibBuilder.loadTexts: asySapNumberConnects.setDescription('Indicates the number of call attempts by this SAP (service access point).')
asySapNumberDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapNumberDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: asySapNumberDisconnects.setDescription('Indicates the number of disconnects for this SAP (service access point).')
asySapTxDataCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapTxDataCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asySapTxDataCharacters.setDescription('Indicates the number of data characters that were transmitted from this SAP (service access point) to the MAC layer.')
asySapRxDataCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapRxDataCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asySapRxDataCharacters.setDescription('Indicates the number of data characters that were received at this SAP (service access point) from the MAC layer.')
asySapParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: asySapParityErrors.setDescription('Indicates the number of characters with parity errors that were received at this SAP (service access point).')
asySapOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: asySapOverruns.setDescription('Indicates the number of characters with overrun errors that were received at this SAP (service access point).')
asySapFlowControlByUser = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapFlowControlByUser.setStatus('mandatory')
if mibBuilder.loadTexts: asySapFlowControlByUser.setDescription('Indicates the number of flow control characters that were received by this SAP (service access point) from the Async port.')
asySapFlowControlByX25 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapFlowControlByX25.setStatus('mandatory')
if mibBuilder.loadTexts: asySapFlowControlByX25.setDescription('Indicates the number of flow control messages that were received by this SAP (service access point) from the network layer.')
asySapFlowControlToUser = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapFlowControlToUser.setStatus('mandatory')
if mibBuilder.loadTexts: asySapFlowControlToUser.setDescription('Indicates the number of flow control characters that were transmitted by this SAP (service access point) to the Async port.')
asySapFlowControlToX25 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapFlowControlToX25.setStatus('mandatory')
if mibBuilder.loadTexts: asySapFlowControlToX25.setDescription('Indicates the number of flow control messages that were sent by this SAP (service access point) to the network layer.')
asySapRxReset = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapRxReset.setStatus('mandatory')
if mibBuilder.loadTexts: asySapRxReset.setDescription('Indicates the number of resets that were received at this SAP (service access point) from the network layer.')
asySapRxBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapRxBreak.setStatus('mandatory')
if mibBuilder.loadTexts: asySapRxBreak.setDescription('Indicates the number of breaks that were received at this SAP (service access point).')
asySapTxBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapTxBreak.setStatus('mandatory')
if mibBuilder.loadTexts: asySapTxBreak.setDescription('Indicates the number of breaks that were transmitted from this SAP (service access point).')
asySapRxDiscardCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 20, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapRxDiscardCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: asySapRxDiscardCharacters.setDescription('Indicates the number of discard characters that were received at this SAP (service access point).')
asyProfTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21), )
if mibBuilder.loadTexts: asyProfTable.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfTable.setDescription('Contains the X.3 parameters for each defined X.3 profile.')
asyProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1), ).setIndexNames((0, "CXAsync-MIB", "asyProfNumber"))
if mibBuilder.loadTexts: asyProfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfEntry.setDescription('Provides the parameters for a specific X.3 profile SAP (service access point).')
asyProfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 1), ProfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyProfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfNumber.setDescription('Identifies the profile SAP (service access point) using a unique numerical value.')
asyProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfRowStatus.setDescription('Indicates whether or not this specific entry is configured within the MIB. Options: invalid (1): Row is flagged and deleted from the table after the next reset valid (1): Parameter is added or modified if it already exists in the table Default Value: valid ')
asyProfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfAlias.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfAlias.setDescription('Identifies the SAP (service access point) using a unique textual name. Range of Values: 1 to 16 alphanumeric characters beginning with an alpha character Default Value: 0 Configuration Changed: Administrative ')
asyProfParameter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter1.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter1.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter1.setDescription('Defines the X.3 parameter 1, PAD recall using a character. This parameter allows the start-stop mode DTE (user) to initiate an escape from the data transfer or the connection in progress state in order to send PAD command signals. Range of Values: 0 = Not possible 1 = Character DLE 32 to 126 = Graphic character defined by user Default Value: 0 Configuration Changed: Operative ')
asyProfParameter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter2.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter2.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter2.setDescription('Defines the X.3 parameter 2, Echo. This parameter provides for characters received from the start-stop mode DTE (user) to be transmitted back to the start-stop mode DTE as well as being interpreted by the PAD. Options: 0 = No echo 1 = Echo Default Value: No echo Configuration Changed: Operative ')
asyProfParameter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter3.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter3.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter3.setDescription('Defines the X.3 parameter 3, Selection of data forwarding character(s). This parameter allows the selection of defined sets of characters received from the start-stop mode DTE (user) to be recognized by the PAD as an indication to complete the assembly and forward a complete packet Range of Values: 0: No data forwarding character(s) 1: Alphanumeric characters (A-Z, a-z and 0-9) 2: Character CR 4: Characters ESC, BEL, ENQ and ACK 6: Characters CR, ESC, BEL, ENQ and ACK 8: Characters DEL, CAN and DC2 16: Characters ETX and EOT 18: Characters CR, ETX and EOT 32: Characters HT, LF, VT and FF 64: All characters in columns 0 and 1 of IA5 except those shown for values 2, 4, 8 and 32 126: All characters in columns 0 and 1 and character DEL Note: Some values are combinations of other values (i.e., value 18 is a combination of values 2 and 16). Default Value: 0 Configuration Changed: Operative ')
asyProfParameter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter4.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter4.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter4.setDescription('Defines the X.3 parameter 4, Selection of idle timer delay, in tenths of a second. This parameter allows the selection of the duration of an interval between successive characters received from the start-stop mode DTE (user). When the interval is exceeded, the PAD terminates the assembly of the packet and forwards it. Range of Values: 0 to 255 Default Value: 0 Configuration Changed: Operative ')
asyProfParameter5 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter5.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter5.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter5.setDescription('Defines the X.3 parameter 5, Ancillary device control. This parameter allows for flow control between the PAD and the start-stop mode DTE (user). Options: 0: No use of X-ON (DC1) and X-OFF (DC3) 1: Use of X-ON and X-OFF (data transfer) 2: Use of X-ON and X-OFF (data transfer and command). Default Value: No use of X-ON (DC1) and X-OFF (DC3) Configuration Changed: Operative')
asyProfParameter6 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter6.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter6.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter6.setDescription('Defines the X.3 parameter 6, Control of PAD service signals and PAD command signals. This parameter provides the start-stop mode DTE (user) with the ability to decide whether or not and in what format PAD service signals are transmitted Range of Values: 0: No PAD service signals are transmitted to the start-stop mode DTE 1: PAD service signals are transmitted in the standard format 5: PAD service signals and prompt PAD service signal are transmitted in the standard format Default Value: 0 Configuration Changed: Operative ')
asyProfParameter7 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter7.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter7.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter7.setDescription('Defines the X.3 parameter 7, Selection of operation of the PAD on receipt of a break signal from the start-stop mode DTE. This parameter allows the selection of the operation of the PAD after the receipt of a break signal from the start-stop mode DTE (user). Range of Values: 0: Nothing 1: Interrupt 2: Reset 4: Send to DTE an indication of break PAD message 5: Interrupt and indication of break 8: Escape from data transfer state 16: Discard output, to start-stop mode DTE 21: Discard output, interrupt and indication of break Default Value: 0 Configuration Changed: Operative ')
asyProfParameter8 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter8.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter8.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter8.setDescription('Defines the X.3 parameter 8, Discard output. This parameter provides for a PAD to discard the content of user sequences in packets upon request rather than disassembling and transmitting these to the start-stop mode DTE (user). Options: 0: Normal data delivery 1: Discard output Default Value: Normal data delivery Configuration Changed: Operative ')
asyProfParameter9 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter9.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter9.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter9.setDescription('Defines the X.3 parameter 9, Padding after carriage return (CR). This parameter provides for the automatic insertion of padding characters by the PAD after a carriage return by the DTE (user). This allows the printer of the DTE to perform the carriage return function correctly. Range of Values: 0 to 255 Note: 0: No padding after CR 1 to 255: Number of padding characters inserted after CR Default Value: 0 Configuration Changed: Operative ')
asyProfParameter10 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter10.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter10.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter10.setDescription('Defines the X.3 parameter 10, Line folding. This parameter provides for the automatic insertion of graphic characters by the PAD in the character stream transmitted to the start-stop mode DTE (user). The predetermined maximum number of graphic characters per line may be set. Range of Values: 0 to 255 0: No line folding 1 to 255: Number of graphic characters per line Default Value: 0 Configuration Changed: Operative ')
asyProfParameter11 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyProfParameter11.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter11.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter11.setDescription('Defines the X.3 parameter 11, Binary speed of start-stop mode DTE. Options: 0: 110 bit/s 1: 134.5 bit/s 2: 300 bit/s 3: 1200 bit/s 4: 600 bit/s 5: 75 bit/s 6: 150 bit/s 7: 1800 bit/s 8: 200 bit/s 9: 100 bit/s 10: 50 bit/s 11: 75/1200 bit/s (not supported) 12: 2400 bit/s 13: 4800 bit/s 14: 9600 bit/s 15: 19200 bit/s 16: 48000 bit/s 17: 56000 bit/s 18: 64000 bit/s 19: 14400 bit/s 20: 38400 bit/s 21: 57600 bit/s 22: 115200 bit/s 255: non standard bit rate Default Value: 110 bit/s')
asyProfParameter12 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter12.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter12.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter12.setDescription('Defines the X.3 parameter 12, Flow control of the PAD. This parameter allows for flow control between the start-stop mode DTE (user) and the PAD. Options: 0: No use of X-ON (DC1) and X-OFF (DC3) for flow control 1: Use of X-ON (DC1) and X-OFF (DC3) for flow control Default Value: No use of X-ON (DC1) and X-OFF (DC3) for flow control Configuration Changed: Operative')
asyProfParameter13 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter13.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter13.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter13.setDescription('Defines the X.3 parameter 13, Linefeed insertion after carriage return. This parameter allows for the automatic insertion of a linefeed character in the character stream to and from the start-stop DTE (user) or after each carriage return. This parameter applies only in the data transfer state. Range of Values: 0: No linefeed insertion 1: Insert linefeed after transmission of CR to the start-stop mode DTE 2: Insert linefeed after each CR in the data stream from the start-stop mode DTE 4: Insert linefeed after echo of CR to start-stop mode DTE 5: Insert linefeed after transmission to the start-stop mode DTE and after echo of CR 6:Insert linefeed in data stream after CR from start-stop mode DTE and after an echo of a CR to the start-stop mode DTE 7: Insert linefeed in the data stream to and from the start-stop mode DTE and after an echo of a CR to the start-stop mode DTE Default Value: 0 Configuration Changed: Operative ')
asyProfParameter14 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter14.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter14.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter14.setDescription('Defines the X.3 parameter 14, Padding after linefeed. This parameter provides for the automatic insertion of padding characters in the character stream transmitted to the start-stop mode DTE (user) after the occurrence of a linefeed character. This allows the printer of the DTE to perform the linefeed operation correctly. This parameter applies only in the data transfer state. Range of Values:0 to 7 Note: 0: No padding after linefeed 1 to 7: Number of padding characters inserted after linefeed Default Value: 0 Configuration Changed: Operative ')
asyProfParameter15 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter15.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter15.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter15.setDescription('Defines the X.3 parameter 15, Editing. This parameter provides for character size delete, line delete and line display editing capabilities in the PAD command state and the data transfer state for the start-stop mode DTE (user). Options: 0: No use of editing in the data transfer state 1: Use of editing in the data transfer state Default Value: No editing Configuration Changed: Operative ')
asyProfParameter16 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter16.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter16.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter16.setDescription('Defines the X.3 parameter 16, Character delete. Range of Values: 0 to 127 0 to126: One character from IA5 127: Character 7/15 (DEL) Default Value: 0 Configuration Changed: Operative ')
asyProfParameter17 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter17.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter17.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter17.setDescription('Defines the X.3 parameter 17, Line delete. Range of Values: 0 to 127 0 to 23: One character from the range of IA5 24: Character 1/8 (CAN) 25 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative ')
asyProfParameter18 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter18.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter18.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter18.setDescription('Defines the X.3 parameter 18, Line display. Range of Values: 0 to 127 0 to 17: One character from the range of IA5 18: Character 1/8 (DC2) 19 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative ')
asyProfParameter19 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter19.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter19.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter19.setDescription('Defines the X.3 parameter 19, Editing PAD service signals. This parameter provides the start-stop mode DTE (user) with the ability to decide whether or not editing PAD service signals are transmitted and which format should be used. Range of Values: 0: No editing PAD service signals 1: Editing PAD service signals for printing terminals 2: Editing PAD service signals for display terminals 8, 32 to 126: Editing PAD service signals using one character from the range of IA5 Default Value: 0 Configuration Changed: Operative ')
asyProfParameter20 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter20.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter20.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter20.setDescription('Defines the X.3 parameter 20, Echo mask. This parameter allows selected defined sets of characters received from the start-stop mode DTE (user) not to be transmitted back to the DTE. Range of Values: 0: No echo mask (all characters echoed). 1: No echo of CR. 2: No echo of LF. 4: No echo of VT, HT and FF. 8: No echo of BEL and BS. 16: No echo of ESC and ENQ. 32: No echo of ACK, NAK, STX, SOH, EOT, ETB and ETX. 64: No echo of editing characters as designated by parameters 16, 17 and 18. 128: No echo of all other characters in columns 0 and 1 not mentioned above and DEL. Default Value: 0 Configuration Changed: Operative ')
asyProfParameter21 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter21.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter21.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter21.setDescription('Defines the X.3 parameter 21, Parity treatment. This parameter allows the PAD to check parity in the data stream from the start-stop mode DTE (user) or generate parity in the data stream to the DTE. Options: 0: No parity checking or generation 1: Parity checking 2: Parity generation 3: Parity checking and parity generation Default Value: No parity checking or generation Configuration Changed: Operative ')
asyProfParameter22 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter22.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter22.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter22.setDescription('Defines the X.3 parameter 22, Page wait. This parameter allows the PAD to suspend transmission of additional characters to the start-stop mode DTE (user) after a specified number of linefeed characters have been transmitted by the PAD. Range of Values: 0 to 255 0: Page wait disable. 1 to 255: Number of line feed characters considered by the PAD for the page wait function. Default Value: 0 Configuration Changed: Operative ')
asyProfParameter23 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter23.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter23.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter23.setDescription('Defines parameter 23 (extension to X.3), Receive parity type. Options: 0: Parity disable 1: Even parity 2: Odd parity 3: Space parity 4: Mark parity Default Value: Parity disable Configuration Changed: Operative ')
asyProfParameter24 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter24.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter24.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter24.setDescription('Defines parameter 24 (extension to X.3), Transmit parity type. Options: 0: Parity disable 1: Even parity 2: Odd parity 3: Space parity 4: Mark parity Default Value: Parity disable Configuration Changed: Operative ')
asyProfParameter25 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter25.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter25.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter25.setDescription('Defines parameter 25 (extension to X.3), Flow control on character to PAD. Range of Values: 0 to 127 Note: 0 to 18: One character from the range of IA5 19: DC3 20 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative')
asyProfParameter26 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter26.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter26.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter26.setDescription('Defines parameter 26 (extension to X.3), Flow control off character to PAD. Range of Values: 0 to 127 0 to 16: One character from the range of IA5 17: DC1 18 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative')
asyProfParameter27 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter27.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter27.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter27.setDescription('Defines parameter 27 (extension to X.3), Flow control on character to ancillary device. Range of Values: 0 to 127 Note: 0 to 18: One character from the range of IA5 19: DC3 20 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative')
asyProfParameter28 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 21, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyProfParameter28.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asyProfParameter28.setStatus('mandatory')
if mibBuilder.loadTexts: asyProfParameter28.setDescription('Defines parameter 28 (extension to X.3), Flow control off character to ancillary device. Range of Values: 0 to 127 0 to 16: One character from the range of IA5 17: DC1 18 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative')
asySapProfTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22), )
if mibBuilder.loadTexts: asySapProfTable.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfTable.setDescription('Contains the operational X.3 parameters for each async SAP (service access point).')
asySapProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1), ).setIndexNames((0, "CXAsync-MIB", "asySapProfSapNumber"))
if mibBuilder.loadTexts: asySapProfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfEntry.setDescription('Provides the operational X.3 parameters for a specific async sap.')
asySapProfSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapProfSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfSapNumber.setDescription('Identifies the SAP (service access point) using a unique numerical value.')
asySapProfParameter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter1.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter1.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter1.setDescription('Defines the X.3 parameter 1, PAD recall using a character. This parameter allows the start-stop mode DTE (user) to initiate an escape from the data transfer or the connection in progress state in order to send PAD command signals. Range of Values: 0: Not possible 1: Character DLE 32 to 126: Graphic character defined by user Default Value: 0 Configuration Changed: Operative')
asySapProfParameter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter2.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter2.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter2.setDescription('Defines the X.3 parameter 2, Echo. This parameter provides for characters received from the start-stop mode DTE (user) to be transmitted back to the start-stop mode DTE as well as being interpreted by the PAD. Options: 0: No echo 1: Echo Default Value: No echo Configuration Changed: Operative')
asySapProfParameter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter3.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter3.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter3.setDescription('Defines the X.3 parameter 3, Selection of data forwarding character(s). This parameter allows the selection of defined sets of characters received from the start-stop mode DTE (user) to be recognized by the PAD as an indication to complete the assembly and forward a complete packet Range of Values: 0: No data forwarding character(s) 1: Alphanumeric characters (A-Z, a-z and 0-9) 2: Character CR 4: Characters ESC, BEL, ENQ and ACK 6: Characters CR, ESC, BEL, ENQ and ACK 8: Characters DEL, CAN and DC2 16: Characters ETX and EOT 18: Characters CR, ETX and EOT 32: Characters HT, LF, VT and FF 64: All characters in columns 0 and 1 of IA5 except those shown for values 2, 4, 8 and 32 126: All characters in columns 0 and 1 and character DEL Note: Some values are combinations of other values (i.e., value 18 is a combination of values 2 and 16). Default Value: 0 Configuration Changed: Operative')
asySapProfParameter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter4.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter4.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter4.setDescription('Defines the X.3 parameter 4, Selection of idle timer delay, in tenths of a second. This parameter allows the selection of the duration of an interval between successive characters received from the start-stop mode DTE (user). When the interval is exceeded, the PAD terminates the assembly of the packet and forwards it. Range of Values: 0 to 255 Default Value: 0 Configuration Changed: Operative')
asySapProfParameter5 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter5.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter5.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter5.setDescription('Defines the X.3 parameter 5, Ancillary device control. This parameter allows for flow control between the PAD and the start-stop mode DTE (user). Options: 0: No use of X-ON (DC1) and X-OFF (DC3) 1: Use of X-ON and X-OFF (data transfer) 2: Use of X-ON and X-OFF (data transfer and command). Default Value: No use of X-ON (DC1) and X-OFF (DC3) Configuration Changed: Operative Note: Object asySapProfParameter27, Flow control on character to ancillary device, and object asySapProfParameter28, Flow control off character to ancillary device, are allowed only if this object is set to No use of X-ON (DC1) and X-OFF (DC3).')
asySapProfParameter6 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter6.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter6.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter6.setDescription('Defines the X.3 parameter 6, Control of PAD service signals and PAD command signals. This parameter provides the start-stop mode DTE (user) with the ability to decide whether or not and in what format PAD service signals are transmitted Range of Values: 0: No PAD service signals are transmitted to the start-stop mode DTE 1: PAD service signals are transmitted in the standard format 5: PAD service signals and prompt PAD service signal are transmitted in the standard format Default Value: 0 Configuration Changed: Operative The following values are currently not supported: 8 to 15 - PAD service signals are transmitted in a network dependent format 16 - Extended dialog mode, PAD service signals are in English 32 - Extended dialog mode, PAD service signals are in French 48 - Extended dialog mode, PAD service signals are in Spanish')
asySapProfParameter7 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter7.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter7.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter7.setDescription('Defines the X.3 parameter 7, Selection of operation of the PAD on receipt of a break signal from the start-stop mode DTE. This parameter allows the selection of the operation of the PAD after the receipt of a break signal from the start-stop mode DTE (user). Range of Values: 0: Nothing 1: Interrupt 2: Reset 4: Send to DTE an indication of break PAD message 5: Interrupt and indication of break 8: Escape from data transfer state 16: Discard output, to start-stop mode DTE 21: Discard output, interrupt and indication of break Default Value: 0 Configuration Changed: Operative')
asySapProfParameter8 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter8.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter8.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter8.setDescription('Defines the X.3 parameter 8, Discard output. This parameter provides for a PAD to discard the content of user sequences in packets upon request rather than disassembling and transmitting these to the start-stop mode DTE (user). Options: 0: Normal data delivery 1: Discard output Default Value: Normal data delivery Configuration Changed: Operative')
asySapProfParameter9 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter9.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter9.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter9.setDescription('Defines the X.3 parameter 9, Padding after carriage return (CR). This parameter provides for the automatic insertion of padding characters by the PAD after a carriage return by the DTE (user). This allows the printer of the DTE to perform the carriage return function correctly. Range of Values: 0 to 255 0: No padding after CR 1 to 255: Number of padding characters inserted after CR Default Value: 0 Configuration Changed: Operative')
asySapProfParameter10 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter10.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter10.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter10.setDescription('Defines the X.3 parameter 10, Line folding. This parameter provides for the automatic insertion of graphic characters by the PAD in the character stream transmitted to the start-stop mode DTE (user). The predetermined maximum number of graphic characters per line may be set. Range of Values: 0 to 255 0: No line folding 1 to 255: Number of graphic characters per line Default Value: 0 Configuration Changed: Operative')
asySapProfParameter11 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asySapProfParameter11.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter11.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter11.setDescription('Defines the X.3 parameter 11, Binary speed of start-stop mode DTE. Options: 0: 110 bit/s 1: 134.5 bit/s 2: 300 bit/s 3: 1200 bit/s 4: 600 bit/s 5: 75 bit/s 6: 150 bit/s 7: 1800 bit/s 8: 200 bit/s 9: 100 bit/s 10: 50 bit/s 11: 75/1200 bit/s (not supported) 12: 2400 bit/s 13: 4800 bit/s 14: 9600 bit/s 15: 19200 bit/s 16: 48000 bit/s 17: 56000 bit/s 18: 64000 bit/s 19: 14400 bit/s 20: 38400 bit/s 21: 57600 bit/s 22: 115200 bit/s 255: non standard bit rate Default Value: 110 bit/s')
asySapProfParameter12 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter12.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter12.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter12.setDescription('Defines the X.3 parameter 12, Flow control of the PAD. This parameter allows for flow control between the start-stop mode DTE (user) and the PAD. Options: 0: No use of X-ON (DC1) and X-OFF (DC3) for flow control 1: Use of X-ON (DC1) and X-OFF (DC3) for flow control Default Value: No use of X-ON (DC1) and X-OFF (DC3) for flow control Configuration Changed: Operative Note: Object asyProfParameter25, Flow control on character to PAD, and object asyProfParameter26, Flow control off character to PAD, are allowed only if this object is set to No use of X-ON (DC1) and X-OFF (DC3).')
asySapProfParameter13 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter13.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter13.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter13.setDescription('Defines the X.3 parameter 13, Linefeed insertion after carriage return. This parameter allows for the automatic insertion of a linefeed character in the character stream to and from the start-stop DTE (user) or after each carriage return. This parameter applies only in the data transfer state. Range of Values: 0: No linefeed insertion 1: Insert linefeed after transmission of CR to the start-stop mode DTE 2: Insert linefeed after each CR in the data stream from the start-stop mode DTE 4: Insert linefeed after echo of CR to start-stop mode DTE 5: Insert linefeed after transmission to the start-stop mode DTE and after echo of CR 6: Insert linefeed in data stream after CR from start-stop mode DTE and after an echo of a CR to the start-stop mode DTE 7: Insert linefeed in the data stream to and from the start-stop mode DTE and after an echo of a CR to the start-stop mode DTE Default Value: 0 Configuration Changed: Operative')
asySapProfParameter14 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter14.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter14.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter14.setDescription('Defines the X.3 parameter 14, Padding after linefeed. This parameter provides for the automatic insertion of padding characters in the character stream transmitted to the start-stop mode DTE (user) after the occurrence of a linefeed character. This allows the printer of the DTE to perform the linefeed operation correctly. This parameter applies only in the data transfer state. Range of Values:0 to 7 0: No padding after linefeed 1 to 7: Number of padding characters inserted after linefeed Default Value: 0 Configuration Changed: Operative')
asySapProfParameter15 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter15.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter15.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter15.setDescription('Defines the X.3 parameter 15, Editing. This parameter provides for character size delete, line delete and line display editing capabilities in the PAD command state and the data transfer state for the start-stop mode DTE (user). Options: 0: No use of editing in the data transfer state 1: Use of editing in the data transfer state Default Value: No editing Configuration Changed: Operative')
asySapProfParameter16 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter16.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter16.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter16.setDescription('Defines the X.3 parameter 16, Character delete. Range of Values: 0 to 127 0 to126: One character from IA5 127: Character 7/15 (DEL) Default Value: 0 Configuration Changed: Operative')
asySapProfParameter17 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter17.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter17.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter17.setDescription('Defines the X.3 parameter 17, Line delete. Range of Values: 0 to 127 0 to 23: One character from the range of IA5 24: Character 1/8 (CAN) 25 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative')
asySapProfParameter18 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter18.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter18.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter18.setDescription('Defines the X.3 parameter 18, Line display. Range of Values: 0 to 127 0 to 17: One character from the range of IA5 18: Character 1/8 (DC2) 19 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative')
asySapProfParameter19 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter19.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter19.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter19.setDescription('Defines the X.3 parameter 19, Editing PAD service signals. This parameter provides the start-stop mode DTE (user) with the ability to decide whether or not editing PAD service signals are transmitted and which format should be used. Range of Values: 0 = No editing PAD service signals 1: Editing PAD service signals for printing terminals 2: Editing PAD service signals for display terminals 8, 32 to 126: Editing PAD service signals using one character from the range of IA5 Default Value: 0 Configuration Changed: Operative')
asySapProfParameter20 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter20.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter20.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter20.setDescription('Defines the X.3 parameter 20, Echo mask. This parameter allows selected defined sets of characters received from the start-stop mode DTE (user) not to be transmitted back to the DTE. Range of Values: 0: No echo mask (all characters echoed) 1: No echo of CR 2: No echo of LF 4: No echo of VT, HT and FF 8: No echo of BEL and BS 16: No echo of ESC and ENQ 32: No echo of ACK, NAK, STX, SOH, EOT, ETB and ETX 64: No echo of editing characters as designated by parameters 16, 17 and 18 128: No echo of all other characters in columns 0 and 1 not mentioned above and DEL Default Value: 0 Configuration Changed: Operative')
asySapProfParameter21 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter21.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter21.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter21.setDescription('Defines the X.3 parameter 21, Parity treatment. This parameter allows the PAD to check parity in the data stream from the start-stop mode DTE (user) or generate parity in the data stream to the DTE. Options: 0: No parity checking or generation 1: Parity checking 2: Parity generation 3: Parity checking and parity generation Default Value: No parity checking or generation Configuration Changed: Operative')
asySapProfParameter22 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter22.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter22.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter22.setDescription('Defines the X.3 parameter 22, Page wait. This parameter allows the PAD to suspend transmission of additional characters to the start-stop mode DTE (user) after a specified number of linefeed characters have been transmitted by the PAD. Range of Values: 0 to 255 0: Page wait disable 1 to 255: Number of line feed characters considered by the PAD for the page wait function Default Value: 0 Configuration Changed: Operative')
asySapProfParameter23 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter23.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter23.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter23.setDescription('Defines parameter 23 (extension to X.3), Receive parity type. Options: 0: Parity disable 1: Even parity 2: Odd parity 3: Space parity 4: Mark parity Default Value: Parity disable Configuration Changed: Operative')
asySapProfParameter24 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter24.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter24.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter24.setDescription('Defines parameter 24 (extension to X.3), Transmit parity type. Options: 0: Parity disable 1: Even parity 2: Odd parity 3: Space parity 4: Mark parity Default Value: Parity disable Configuration Changed: Operative')
asySapProfParameter25 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter25.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter25.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter25.setDescription('Defines parameter 25 (extension to X.3), Flow control on character to PAD. Range of Values: 0 to 127 0 to 18: One character from the range of IA5 19: DC3 20 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative Note: This object is allowed only if object asySapProfParameter12, Flow control of the PAD, is set to No use of X-ON (DC1) and X-OFF (DC3).')
asySapProfParameter26 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter26.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter26.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter26.setDescription('Defines parameter 26 (extension to X.3), Flow control off character to PAD. Range of Values: 0 to 127 0 to 16: One character from the range of IA5 17 = DC1 18 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative Note: This object is allowed only if object asySapProfParameter12, Flow control of the PAD, is set to No use of X-ON (DC1) and X-OFF (DC3).')
asySapProfParameter27 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter27.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter27.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter27.setDescription('Defines parameter 27 (extension to X.3), Flow control on character to ancillary device. Range of Values: 0 to 127 Note: 0 to 18: One character from the range of IA5 19: DC3 20 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative Note: This object is allowed only if object asySapProfParameter5, Ancillary device control, is set to No use of X-ON (DC1) and X-OFF (DC3).')
asySapProfParameter28 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 22, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asySapProfParameter28.setReference('CCITT X.3 Table 1')
if mibBuilder.loadTexts: asySapProfParameter28.setStatus('mandatory')
if mibBuilder.loadTexts: asySapProfParameter28.setDescription('Defines parameter 28 (extension to X.3), Flow control off character to ancillary device. Range of Values: 0 to 127 0 to 16: One character from the range of IA5 17: DC1 18 to 127: One character from the range of IA5 Default Value: 0 Configuration Changed: Operative Note: This object is allowed only if object asySapProfParameter5, Ancillary device control, is set to No use of X-ON (DC1) and X-OFF (DC3).')
asyDteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23), )
if mibBuilder.loadTexts: asyDteTable.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteTable.setDescription("A table containing the DTE X.28 Selection command objects for each defined 'abbreviated address'.")
asyDteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23, 1), ).setIndexNames((0, "CXAsync-MIB", "asyDteNumber"))
if mibBuilder.loadTexts: asyDteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteEntry.setDescription('The objects for a specific DTE X.28 Selection entry.')
asyDteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23, 1, 1), DteIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asyDteNumber.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteNumber.setDescription('Identifies the DTE X.28 Selection entry by a unique numerical value.')
asyDteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyDteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteRowStatus.setDescription("Indicates whether this specific entry is configured within the MIB. Entries (rows) may be created by setting this object value to 'valid', or deleted by changing this object value to 'invalid'.")
asyDteAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyDteAlias.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteAlias.setDescription("Identifies the DTE entry by a textual name. Names are unique per service access point. Note: Dte alias (name) must be preceded by a '.' (period) when used in an X.28 Selection with abbreviated address.")
asyDteCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyDteCalledAddress.setReference('CCITT X.28 3.5.15.2.1, CCiTT X.25, CCITT X.121')
if mibBuilder.loadTexts: asyDteCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteCalledAddress.setDescription('Defines the network address of a remote device for this DTE entry. Allowable values: 1 to 15 numerical digits. ')
asyDteFacilityField = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyDteFacilityField.setReference('CCITT X.28 3.5.15.1')
if mibBuilder.loadTexts: asyDteFacilityField.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteFacilityField.setDescription('Defines the facility codes and parameters requires for the X.28 Selection command for this DTE entry. The facility codes and parameters must be entered as defined in the CCITT X.28 Recommendation. The following facilities are supported: - CUG facility - CUG with OA facility - Called address extension facility - Call reselection prevention - Fast select with restriction on response - Fast select - Reverse charge - Charge request - Network User ID A value of null string (blank) means no facilities. ')
asyDteUserDataField = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyDteUserDataField.setReference('CCITT X.28 3.5.15.3')
if mibBuilder.loadTexts: asyDteUserDataField.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteUserDataField.setDescription('Defines the user data field of the X.28 Selection command for this DTE entry. A value of nul string (blank) means no user data. ')
asyDteX3Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30, 23, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asyDteX3Profile.setStatus('mandatory')
if mibBuilder.loadTexts: asyDteX3Profile.setDescription("Defines the X.3 Profile number for a specific set of X.3 parameters. The Async layer will initialize its SAP to this X.3 Profile before establishing a logical connection for this DTE entry. a value of '0' means no X.3 Profile. ")
asySapAlarm = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 30) + (0,1)).setObjects(("CXAsync-MIB", "asySapNumber"), ("CXAsync-MIB", "asySapStatusEvent"))
if mibBuilder.loadTexts: asySapAlarm.setDescription('Indicates that the global object asyStatusEvent has occurred at the identified SAP (service access point) if the global object asyAlarms is enabled.')
mibBuilder.exportSymbols("CXAsync-MIB", asySapProfParameter16=asySapProfParameter16, asyProfParameter21=asyProfParameter21, YesNo=YesNo, asyProfEntry=asyProfEntry, asySapRxPacketSize=asySapRxPacketSize, asySapRxDiscardCharacters=asySapRxDiscardCharacters, asySapOverruns=asySapOverruns, asySapAsyncTxQueueSize=asySapAsyncTxQueueSize, asyProfParameter11=asyProfParameter11, asySapProfParameter5=asySapProfParameter5, asySapTxThruputClass=asySapTxThruputClass, asySapProfParameter15=asySapProfParameter15, asyProfParameter3=asyProfParameter3, asySapProfParameter4=asySapProfParameter4, asySapPreferentialCUGIndex=asySapPreferentialCUGIndex, asySapNUILength=asySapNUILength, asyProfParameter10=asyProfParameter10, asyProfParameter28=asyProfParameter28, asySapProfParameter28=asySapProfParameter28, asyProfParameter14=asyProfParameter14, asySapFlowControlByUser=asySapFlowControlByUser, asySapAutoConnectDelayTimer=asySapAutoConnectDelayTimer, asySapYTTimer=asySapYTTimer, asyProfParameter23=asyProfParameter23, asySapProfParameter12=asySapProfParameter12, asySapX25TxQueueSize=asySapX25TxQueueSize, asyProfParameter5=asyProfParameter5, asySapNumber=asySapNumber, asyProfParameter18=asyProfParameter18, asyProfParameter12=asyProfParameter12, asySapTxPacketSize=asySapTxPacketSize, asySapProfParameter25=asySapProfParameter25, asySapProfParameter20=asySapProfParameter20, asyProfTable=asyProfTable, asySapPromptSignal=asySapPromptSignal, asyDteAlias=asyDteAlias, asyProfParameter25=asyProfParameter25, asySapRxBreak=asySapRxBreak, asyX25TxQThreshold=asyX25TxQThreshold, asySapNumberConnects=asySapNumberConnects, asySapFlowControlToX25=asySapFlowControlToX25, asySapProfParameter18=asySapProfParameter18, asyDteEntry=asyDteEntry, asySapAutoConnectDteId=asySapAutoConnectDteId, asySapSubscriptionCUG=asySapSubscriptionCUG, asyDteNumber=asyDteNumber, asySapProfParameter3=asySapProfParameter3, asyProfParameter13=asyProfParameter13, asySapProfParameter2=asySapProfParameter2, asySapTxDataCharacters=asySapTxDataCharacters, asySapProfParameter10=asySapProfParameter10, asySapProfParameter17=asySapProfParameter17, asySapProfParameter7=asySapProfParameter7, asyDteFacilityField=asyDteFacilityField, asyDteX3Profile=asyDteX3Profile, asyProfAlias=asyProfAlias, asySapProtocolId=asySapProtocolId, asyProfNumber=asyProfNumber, asySapProfSapNumber=asySapProfSapNumber, asySapProfParameter9=asySapProfParameter9, asyDteTable=asyDteTable, asySapTxWindowSize=asySapTxWindowSize, asySapProfParameter13=asySapProfParameter13, asySapNUI=asySapNUI, asySapProfTable=asySapProfTable, asySapX3Profile=asySapX3Profile, asySapRowStatus=asySapRowStatus, asySapProfParameter24=asySapProfParameter24, asySapProfParameter19=asySapProfParameter19, asySapSubscriptionCUGIA=asySapSubscriptionCUGIA, asyMibLevel=asyMibLevel, asyDteCalledAddress=asyDteCalledAddress, asyAlarms=asyAlarms, asySapReverseChargingAcceptance=asySapReverseChargingAcceptance, asySapProfParameter1=asySapProfParameter1, asySapDisconnectRequest=asySapDisconnectRequest, asyProfParameter16=asyProfParameter16, asySapState=asySapState, asyPadIdBanner=asyPadIdBanner, asySapAlias=asySapAlias, asySapReceiptConfirmation=asySapReceiptConfirmation, asySapProfParameter14=asySapProfParameter14, asySapProfParameter6=asySapProfParameter6, asyProfParameter15=asyProfParameter15, asyProfParameter7=asyProfParameter7, asySapFlowControlByX25=asySapFlowControlByX25, asySapRxReset=asySapRxReset, asyProfParameter8=asyProfParameter8, asySapTxBreak=asySapTxBreak, asySapNetworkFlowControlState=asySapNetworkFlowControlState, asyProfParameter26=asyProfParameter26, asySapHardwareFlowControl=asySapHardwareFlowControl, asySapProfParameter21=asySapProfParameter21, asySapProfParameter26=asySapProfParameter26, asySapProfParameter8=asySapProfParameter8, PacketSize=PacketSize, asyProfParameter22=asyProfParameter22, asyDteUserDataField=asyDteUserDataField, asySapEnableProtocolId=asySapEnableProtocolId, asySapStatusEvent=asySapStatusEvent, DteIndex=DteIndex, asySapAddress=asySapAddress, asySapProfEntry=asySapProfEntry, asySapAsyncFlowControlState=asySapAsyncFlowControlState, asyDteRowStatus=asyDteRowStatus, asySapNCompanionAlias=asySapNCompanionAlias, asyProfParameter19=asyProfParameter19, asyProfParameter27=asyProfParameter27, asySapAutoConnectRetry=asySapAutoConnectRetry, asySapParityErrors=asySapParityErrors, asySapProfParameter22=asySapProfParameter22, asySapRxWindowSize=asySapRxWindowSize, asyProfParameter4=asyProfParameter4, asyProfParameter20=asyProfParameter20, asyProfParameter2=asyProfParameter2, asySoftwareVersions=asySoftwareVersions, asySapFlowControlToUser=asySapFlowControlToUser, asyProfParameter17=asyProfParameter17, asySapRxDataCharacters=asySapRxDataCharacters, asySapChargingInformation=asySapChargingInformation, asyProfParameter24=asyProfParameter24, asySapProfParameter27=asySapProfParameter27, asySapMCompanionAlias=asySapMCompanionAlias, asySapSRTimer=asySapSRTimer, ProfIndex=ProfIndex, asyProfParameter6=asyProfParameter6, asySapAlarm=asySapAlarm, asyProfParameter1=asyProfParameter1, asySapProfParameter23=asySapProfParameter23, asySapSubscriptionCUGOA=asySapSubscriptionCUGOA, asySapRxThruputClass=asySapRxThruputClass, asySapControl=asySapControl, asySapProfParameter11=asySapProfParameter11, asyProfRowStatus=asyProfRowStatus, asySapNumberDisconnects=asySapNumberDisconnects, asySapTable=asySapTable, asyProfParameter9=asyProfParameter9, asySapEntry=asySapEntry, asySapProtocolType=asySapProtocolType)
