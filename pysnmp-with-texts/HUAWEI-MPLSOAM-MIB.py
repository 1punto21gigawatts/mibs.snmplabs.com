#
# PySNMP MIB module HUAWEI-MPLSOAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MPLSOAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hwMpls, = mibBuilder.importSymbols("HUAWEI-MIB", "hwMpls")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, Counter32, ObjectIdentity, Bits, IpAddress, MibIdentifier, Unsigned32, TimeTicks, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Counter32", "ObjectIdentity", "Bits", "IpAddress", "MibIdentifier", "Unsigned32", "TimeTicks", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType")
TextualConvention, DisplayString, TimeStamp, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "TruthValue", "RowStatus")
hwMplsOam = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7))
if mibBuilder.loadTexts: hwMplsOam.setLastUpdated('200504271724Z')
if mibBuilder.loadTexts: hwMplsOam.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwMplsOam.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: hwMplsOam.setDescription('The HUAWEI-MPLSOAM-MIB contains objects to configure OAM module. The Operation, Administration and Maintenance (OAM) is an effective means for decreasing the cost of network maintenance. The MPLS OAM is used to administrate and maintain MPLS. ')
hwMplsOamPs = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1))
hwMplsOamObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1))
hwMplsOamCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsOamCapability.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamCapability.setDescription('Whether OAM is globally capable. 0: incapable; 1: capable; 2: capable(based-itu); The default value is incapable.')
hwMplsOamIgrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2), )
if mibBuilder.loadTexts: hwMplsOamIgrTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrTable.setDescription('This table specifies per-LSP MPLS OAM capability and associated information, such as IgrTunnName and IgrDetType.')
hwMplsOamIgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"))
if mibBuilder.loadTexts: hwMplsOamIgrEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrEntry.setDescription('An entry in this table is created by an LSR for every LSP capable of supporting MPLS OAM at ingress.')
hwMplsOamIgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMplsOamIgrIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrIndex.setDescription('The interface index of the detected tunnel.')
hwMplsOamIgrTunnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrTunnName.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrTunnName.setDescription('The name of a tunnel. For ingress, it means the tunnel name of the detected LSP. For egress, it means the tunnel name of the reverse LSP.')
hwMplsOamIgrDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrDetType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrDetType.setDescription('There are two types of OAM packets, CV and FFD. The CV flow is generated at the source LSR of the LSP with a nominal frequency of 1/s and terminated at the sink LSR of the LSP. FFD provides failure detection option for an LSP independent of the CV based availability model and is not tied to the CV insertion rate. Insertion rates at 1/s or faster may also be used. The CV/FFD packet contains a network-unique identifier (TTSI) so that all types of defects can be detected. 1: CV; 2: FFD.')
hwMplsOamIgrDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("ffd3ms8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrDetFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrDetFreq.setDescription('For CV: the frequency is static, per second. For FFD: the frequency is set by user. The value can be 10ms, 20ms, 50ms,100ms,200ms,500ms,3ms. Any other frequency is wrong. 0: 1000ms(only for cv); 1: 10ms; 2: 20ms; 3: 50ms; 4: 100ms; 5: 200ms; 6: 500ms; 7: 3ms.')
hwMplsOamIgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRevType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrRevType.setDescription('When an LSP is found to be in defect, the sink LSR if the LSP should send BDI to inform the source LSR of the LSP, the BDI is transferred through the reverse LSP. The type of reverse LSP can be private or shared. If private, then the reverse LSP can be used only when the only LSP is in defect; If shared, the reverse LSP which is shared between many forward LSPs, whose source LSRs are the same and sink LSRs are the same. 1: private; 2: share.')
hwMplsOamIgrRevLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRevLspName.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrRevLspName.setDescription('The object indicates name of the reverse LSP.')
hwMplsOamIgrRevLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRevLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrRevLsrId.setDescription('Only for ingress, the object indicates the ingress LSR ID of the reverse LSP,, expressed in IP address.')
hwMplsOamIgrRevSessTunnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRevSessTunnId.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrRevSessTunnId.setDescription('Only for ingress, the object indicates the session tunnel ID of the reverse LSP.')
hwMplsOamIgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrEnable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrEnable.setDescription('Whether one LSP is OAM enable. If disable, LSP is not monitored; If enable, CV/FFD is generated at the source LSR of the LSP and checked at the sink LSR of the LSP,and user can set other configuration. 0: The OAM function is disabled on the ingress; 1: The OAM function is enabled on the ingress.')
hwMplsOamIgrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("start", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamIgrValid.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrValid.setDescription('0: stop detect; 1: start detect.')
hwMplsOamIgrAvaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamIgrAvaState.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrAvaState.setDescription('If the LSP Timer (T1) expires, then the LSP enters the Unavailable state. The start point of the Unavailable state is deemed to be at the entry into the LSP defect state. An LSP re-enters the Available state after the LSP Defect state exists first. T1 defines the length of time the LSP is in the Defect state before declaring an LSP Unavailable or returning to defect free state. 0: available state; 1: unavailable state.')
hwMplsOamIgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8), ("dIngressDown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamIgrDefectType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrDefectType.setDescription('Defect is defined as interruption of the capability of a transport entity (e.g., network connection) to transfer user or OAM information. There are six types of defect: 0: no defect; 1: dServer; 2: dPeerMe; 3: dLOCV, Loss of Connectivity Verification defect; 4: dTTSI-Mismatch, Trail Termination Source Identifier Mismatch defect; 5: dTTSI-Mismerge, Trail Termination Source Identifier Mismerge defect; 6: dExcess, Receiving excess rate of CV/FFD; 7: dUnknown, Unknown defect in the MPLS network.. 8: dOamFail, AutoProtocal timer expires. 9: dIngressDown.')
hwMplsOamIgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrRowStatus.setDescription('This variable is used to create, modify, and delete a row in this table.')
hwMplsOamIgrCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptnMode", 1), ("routerMode", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrCompatibilityMode.setDescription(' 1: Ptn-Mode; 2: Router-Mode; Valid only for the ingress configuration.')
hwMplsOamIgrBDIFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perSecond", 1), ("detectFrequency", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamIgrBDIFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrBDIFreq.setDescription('BDI is generated at the trail termination source point of a return path in response to a defect detected at the trail termination sink point of an LSP in the forwarding direction. The frequency of BDI can be set by user. 1: per-second; 2: same as detect frequency.')
hwMplsOamEgrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3), )
if mibBuilder.loadTexts: hwMplsOamEgrTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrTable.setDescription('This table specifies per-LSP MPLS OAM capability and associated information, such as DetectType, DetectFrequency.')
hwMplsOamEgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"))
if mibBuilder.loadTexts: hwMplsOamEgrEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrEntry.setDescription('An entry in this table is created by an LSR for every LSP capable of supporting MPLS OAM at egress.')
hwMplsOamEgrLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 1), OctetString())
if mibBuilder.loadTexts: hwMplsOamEgrLspName.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrLspName.setDescription('The object indicates the name of static LSP at egress.')
hwMplsOamEgrLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwMplsOamEgrLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrLsrId.setDescription('The object indicates the Ingress LSR ID of the LSP.')
hwMplsOamEgrSessTunnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwMplsOamEgrSessTunnId.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrSessTunnId.setDescription('The object indicates the the Ingress session tunnel ID of the LSP..')
hwMplsOamEgrDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrDetType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrDetType.setDescription('0: invalid, if auto-protocol, this detect type is invalid; 1: CV; 2: FFD.')
hwMplsOamEgrDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("invalid8", 7), ("ffd3ms9", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrDetFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrDetFreq.setDescription('0: 1000ms(only for cv); 1: 10ms; 2: 20ms; 3: 50ms; 4: 100ms; 5: 200ms; 6: 500ms; 7: invalid; 8: 3ms.')
hwMplsOamEgrRevType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("private", 1), ("share", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrRevType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrRevType.setDescription('When an LSP is found to be in defect, the sink LSR of the LSP should send BDI to inform the source LSR of the LSP,the BDI is transferred through the reverse LSP. The type of reverse LSP can be private or shared. If private, then the reverse LSP can be used only when the only LSP in defect; If shared, the reverse LSP, which is shared between many forward LSPs that have the same source LSRs and sink LSRs. 0: invalid, when the reverse LSR does not exist; 1: private; 2: share.')
hwMplsOamEgrRevTunnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrRevTunnName.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrRevTunnName.setDescription('The object indicates the name of a reverse tunnel.')
hwMplsOamEgrAutoEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrAutoEn.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrAutoEn.setDescription('If autoprotocol, then the egress can process extended FDI sent by ingress. 0: disable; 1: enable; Valid only for the egress configuration.')
hwMplsOamEgrAutoOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrAutoOvertime.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrAutoOvertime.setDescription('This time is set at the egress. If the egress receives CV/FFD, it records the parameters included in the packet, such as OAM type and frequency. If the egress does not receive any OAM packet before the timer expires, the sink LSR will send BDI with dLOCV defect. Valid only for the egress configuration.')
hwMplsOamEgrBDIFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("perSecond", 0), ("detectFrequency", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrBDIFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrBDIFreq.setDescription('BDI is generated at the trail termination source point of a return path in response to a defect detected at the trail termination sink point of an LSP in the forwarding direction. The frequency of BDI can be set by user. Only valid for egress configuration. The default value is detect frequency and it is valid only when a backward-LSP exists. 0: per-second; 1: same as detect frequency.')
hwMplsOamEgrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrEnable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrEnable.setDescription('Whether one LSP is enabled with OAM. If disable, LSP is not monitored; If enable, CV/FFD is generated at the source LSR of the LSP and checked at the sink LSR of the LSP, and user can set other configuration. 0: The OAM function is disabled on the egress; 1: The OAM function is enabled on the egress.')
hwMplsOamEgrValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamEgrValid.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrValid.setDescription('1: stop detect; 2: start detect.')
hwMplsOamEgrAvaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamEgrAvaState.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrAvaState.setDescription('If the LSP Timer (T1) expires, then the LSP enters the Unavailable state. The start point of the Unavailable state is deemed to be at the entry into the LSP defect state. An LSP re-enters the Available state after the LSP Defect State. first exists. T1 defines the length of time the LSP is in the Defect state before declaring an LSP Unavailable or returning to defect free state 0: available state; 1: unavailable state.')
hwMplsOamEgrDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8), ("dEgressDown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamEgrDefectType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrDefectType.setDescription('0: no defect; 1: dServer, 2: dPeerMe, 3: dLOCV, Loss of Connectivity Verification defect; 4: dTTSI-Mismatch, Trail Termination Source Identifier Mismatch defect; 5: dTTSI-Mismerge, Trail Termination Source Identifier Mismerge defect.; 6: dExcess, Receiving excess rate of CV/FFD; 7: dUnknown, Unknown defect in the MPLS network. 8: dOamFail, AutoProtocal timer expires. 9: dEgressDown.')
hwMplsOamEgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamEgrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrRowStatus.setDescription('This variable is used to create, modify, and delete a row in this table.')
hwMplsOamRlsnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4), )
if mibBuilder.loadTexts: hwMplsOamRlsnTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnTable.setDescription('This table specifies RLSN capability and associated information, such as RlsnLsrId and RlsnLsrId.')
hwMplsOamRlsnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnLspName"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnLsrId"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnSessTunnId"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnIfIndex"))
if mibBuilder.loadTexts: hwMplsOamRlsnEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnEntry.setDescription('An entry in this table is created by an LSR to binding the name, lsr-id and tunnel-id of the LSP at egress.')
hwMplsOamRlsnLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnLspName.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnLspName.setDescription('For egress, the object indicates name of the LSP.')
hwMplsOamRlsnLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnLsrId.setDescription('For egress, the object indicates the Ingress LSR ID of the LSP')
hwMplsOamRlsnSessTunnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnSessTunnId.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnSessTunnId.setDescription('For egress, the object indicates the Ingress session tunnel ID of the LSP')
hwMplsOamRlsnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamRlsnIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnIfIndex.setDescription('The object indicates the index of outbound interface.')
hwMplsOamRlsnIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnIfName.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnIfName.setDescription('The object indicates the name of outbound interface.')
hwMplsOamRlsnIsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamRlsnIsDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnIsDown.setDescription('1: up 2: down')
hwMplsOamRlsnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamRlsnRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRlsnRowStatus.setDescription('This variable is used to create, modify, and delete a row in this table. ')
hwMplsOamView = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("mpls-oam", 1), ("null", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamView.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamView.setDescription('Create or delete the MPLS OAM view. 1: create mpls-oam; 0: delete mpls-oam;')
hwMplsOamL2vcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6), )
if mibBuilder.loadTexts: hwMplsOamL2vcTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcTable.setDescription('This table specifies PW MPLS OAM capability and associated information, such as DetType and DetFrequence.')
hwMplsOamL2vcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), (0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"))
if mibBuilder.loadTexts: hwMplsOamL2vcEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcEntry.setDescription('An entry in this table is created by binding the peer-ip, vc-type and vc-id.')
hwMplsOamL2vcPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwMplsOamL2vcPeerIp.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcPeerIp.setDescription('This object indicates the peer ip address.')
hwMplsOamL2vcVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 21, 64, 0))).clone(namedValues=NamedValues(("fr", 1), ("atm-aal5-sdu", 2), ("atm-trans-cell", 3), ("vlan", 4), ("ethernet", 5), ("hdlc", 6), ("ppp", 7), ("atm-nto1-vcc", 9), ("atm-nto1-vpc", 10), ("ip-layer2", 11), ("atm-1to1-vcc", 12), ("atm-1to1-vpc", 13), ("atm-aal5-pdu", 14), ("satop-e1", 17), ("satop-t1", 18), ("cesopsn-basic", 21), ("ip-interworking", 64), ("unknown", 0))))
if mibBuilder.loadTexts: hwMplsOamL2vcVcType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcVcType.setDescription('There are seventeen types of vc. 1: fr; 2: atm-aal5-sdu; 3: atm-trans-cell; 4: vlan; 5: ethernet; 6: hdlc; 7: ppp; 9: atm-nto1-vcc; 10:atm-nto1-vpc; 11:ip-layer2; 12:atm-1to1-vcc; 13:atm-1to1-vpc; 14:atm-aal5-pdu; 17:satop-e1; 18:satop-t1; 21:cesopsn-basic; 64:ip-interworking; 0:unknown.')
hwMplsOamL2vcVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwMplsOamL2vcVcId.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcVcId.setDescription('This object indicates the vc id of pw type.')
hwMplsOamL2vcDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcDetType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcDetType.setDescription('There are two types of OAM packets, CV and FFD. 1: CV; 2: FFD.')
hwMplsOamL2vcDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("ffd3ms8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcDetFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcDetFreq.setDescription('For CV: the frequency is static, per second. For FFD: the frequency is set by user. The value can be 10ms, 20ms, 50ms,100ms,200ms,500ms,3ms. Any other frequency is wrong. 0: 1000ms(only for cv); 1: 10ms; 2: 20ms; 3: 50ms; 4: 100ms; 5: 200ms; 6: 500ms; 7: 3ms.')
hwMplsOamL2vcRevDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("cv", 1), ("ffd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcRevDetType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcRevDetType.setDescription('0: invalid; 1: CV; 2: FFD.')
hwMplsOamL2vcRevDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("invalid8", 7), ("ffd3ms9", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcRevDetFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcRevDetFreq.setDescription('For CV: the frequency is static, per second. For FFD: the frequency is set by user. The value can be 10ms, 20ms, 50ms,100ms,200ms,500ms,3ms. Any other frequency is wrong. 0: 1000ms(only for cv); 1: 10ms; 2: 20ms; 3: 50ms; 4: 100ms; 5: 200ms; 6: 500ms; 7: invalid; 8: 3ms.')
hwMplsOamL2vcSendEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcSendEnable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcSendEnable.setDescription('0: The OAM Send function is Disabled; 1: The OAM Send function is Eabled;')
hwMplsOamL2vcReceiveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcReceiveEnable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcReceiveEnable.setDescription('0: The OAM Receive function is Disabled; 1: The OAM Receive function is Eabled;')
hwMplsOamL2vcAutoProlEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcAutoProlEn.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcAutoProlEn.setDescription('0: disable; 1: enable;')
hwMplsOamL2vcAutoOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcAutoOvertime.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcAutoOvertime.setDescription('If the oam receives CV/FFD, it records the parameters included in the packet, such as OAM type and frequency. If the oam does not receive any CV/FFD packet before the timer expires, It will send BDI with dLOCV defect.')
hwMplsOamL2vcValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("start", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcValid.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcValid.setDescription('1: stop detect; 2: start detect; 3: ready.')
hwMplsOamL2vcAvaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcAvaState.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcAvaState.setDescription('0: available state; 1: unavailable state.')
hwMplsOamL2vcDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8), ("pw-down", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcDefectType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcDefectType.setDescription('0: no defect; 1: dServer, 2: dPeerMe, 3: dLOCV, Loss of Connectivity Verification defect; 4: dTTSI-Mismatch, Trail Termination Source Identifier Mismatch defect; 5: dTTSI-Mismerge, Trail Termination Source Identifier Mismerge defect.; 6: dExcess, Receiving excess rate of CV/FFD; 7: dUnknown, Unknown defect in the MPLS network. 8: dOamFail, AutoProtocal timer expires. 9: PW-down, PW down.')
hwMplsOamL2vcBdiDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamL2vcBdiDefectType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcBdiDefectType.setDescription('0: no defect; 1: dServer, 2: dPeerMe, 3: dLOCV, Loss of Connectivity Verification defect; 4: dTTSI-Mismatch, Trail Termination Source Identifier Mismatch defect; 5: dTTSI-Mismerge, Trail Termination Source Identifier Mismerge defect.; 6: dExcess, Receiving excess rate of CV/FFD; 7: dUnknown, Unknown defect in the MPLS network. 8: dOamFail, AutoProtocal timer expires.')
hwMplsOamL2vcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcRowStatus.setDescription('This variable is used to create, modify, and delete a row in this table. ')
hwMplsOamL2vcCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptnMode", 1), ("routerMode", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcCompatibilityMode.setDescription(' 1: Ptn-Mode; 2: RouterMode; Valid only for the l2vc configuration.')
hwMplsOamL2vcBDIFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perSecond", 1), ("detectFrequency", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamL2vcBDIFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcBDIFreq.setDescription('BDI is generated at the trail termination source point of a return path in response to a defect detected at the trail termination sink point of an LSP in the forwarding direction. The frequency of BDI can be set by user. 1: per-second; 2: same as detect frequency.')
hwMplsOamBidirectionalTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7), )
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelTable.setDescription('This table specifies Static Co-Route MPLS OAM capability and associated information, such as DetType and DetFrequence.')
hwMplsOamBidirectionalTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1), ).setIndexNames((0, "HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelEntry.setDescription('An entry in this table is created by binding the tunnel ifindex.')
hwMplsOamBidirectionalTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelIndex.setDescription('This is a unique index for an OAM entry in the OAM table.')
hwMplsOamBidirectionalTunnelTunnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelTunnName.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelTunnName.setDescription('The name of a tunnel.')
hwMplsOamBidirectionalTunnelDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cv", 1), ("ffd", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDetType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDetType.setDescription('There are two types of OAM packets, CV and FFD. 1: CV; 2: FFD.')
hwMplsOamBidirectionalTunnelDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("ffd3ms8", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDetFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDetFreq.setDescription('For CV: the frequency is static, per second. For FFD: the frequency is set by user. The value can be 10ms, 20ms, 50ms,100ms,200ms,500ms,3ms. Any other frequency is wrong. 0: 1000ms(only for cv); 1: 10ms; 2: 20ms; 3: 50ms; 4: 100ms; 5: 200ms; 6: 500ms; 7: 3ms.')
hwMplsOamBidirectionalTunnelRevDetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("cv", 1), ("ffd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRevDetType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRevDetType.setDescription('0: invalid; 1: CV; 2: FFD.')
hwMplsOamBidirectionalTunnelRevDetFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cv1000ms", 0), ("ffd10ms2", 1), ("ffd20ms3", 2), ("ffd50ms4", 3), ("ffd100ms5", 4), ("ffd200ms6", 5), ("ffd500ms7", 6), ("invalid8", 7), ("ffd3ms9", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRevDetFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRevDetFreq.setDescription('For CV: the frequency is static, per second. For FFD: the frequency is set by user. The value can be 10ms, 20ms, 50ms,100ms,200ms,500ms,3ms. Any other frequency is wrong. 0: 1000ms(only for cv); 1: 10ms; 2: 20ms; 3: 50ms; 4: 100ms; 5: 200ms; 6: 500ms; 7: invalid; 8: 3ms.')
hwMplsOamBidirectionalTunnelSendEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelSendEnable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelSendEnable.setDescription('0: The OAM Send function is Disabled; 1: The OAM Send function is Eabled;')
hwMplsOamBidirectionalTunnelReceiveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelReceiveEnable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelReceiveEnable.setDescription('0: The OAM Receive function is Disabled; 1: The OAM Receive function is Eabled;')
hwMplsOamBidirectionalTunnelAutoProtocolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAutoProtocolEnable.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAutoProtocolEnable.setDescription('0: disable; 1: enable;')
hwMplsOamBidirectionalTunnelAutoOvertime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAutoOvertime.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAutoOvertime.setDescription('If the oam receives CV/FFD, it records the parameters included in the packet, such as OAM type and frequency. If the oam does not receive any CV/FFD packet before the timer expires, It will send BDI with dLOCV defect.')
hwMplsOamBidirectionalTunnelValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("start", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelValid.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelValid.setDescription('1: stop detect; 2: start detect; 3: ready.')
hwMplsOamBidirectionalTunnelAvaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAvaState.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAvaState.setDescription('0: available state; 1: unavailable state.')
hwMplsOamBidirectionalTunnelDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8), ("corouteDown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDefectType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelDefectType.setDescription('0: no defect; 1: dServer, 2: dPeerMe, 3: dLOCV, Loss of Connectivity Verification defect; 4: dTTSI-Mismatch, Trail Termination Source Identifier Mismatch defect; 5: dTTSI-Mismerge, Trail Termination Source Identifier Mismerge defect.; 6: dExcess, Receiving excess rate of CV/FFD; 7: dUnknown, Unknown defect in the MPLS network. 8: dOamFail, AutoProtocal timer expires. 9: corouteDown, coroute down.')
hwMplsOamBidirectionalTunnelBdiDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nondefect", 0), ("dServer", 1), ("dPeerMe", 2), ("dLOCV", 3), ("dTTSI-Mismatch", 4), ("dTTSI-Mismerge", 5), ("dExcess", 6), ("dUnknown", 7), ("dOamFail", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelBdiDefectType.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelBdiDefectType.setDescription('0: no defect; 1: dServer, 2: dPeerMe, 3: dLOCV, Loss of Connectivity Verification defect; 4: dTTSI-Mismatch, Trail Termination Source Identifier Mismatch defect; 5: dTTSI-Mismerge, Trail Termination Source Identifier Mismerge defect.; 6: dExcess, Receiving excess rate of CV/FFD; 7: dUnknown, Unknown defect in the MPLS network. 8: dOamFail, AutoProtocal timer expires.')
hwMplsOamBidirectionalTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelRowStatus.setDescription('This variable is used to create, modify, and delete a row in this table. ')
hwMplsOamBidirectionalTunnelCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptnMode", 1), ("routerMode", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelCompatibilityMode.setDescription(' 1: Ptn-Mode; 2: RouterMode; Valid only for the bidirectional tunnel configuration.')
hwMplsOamBidirectionalTunnelBDIFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("perSecond", 1), ("detectFrequency", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelBDIFreq.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelBDIFreq.setDescription('BDI is generated at the trail termination source point of a return path in response to a defect detected at the trail termination sink point of an LSP in the forwarding direction. The frequency of BDI can be set by user. 1: per-second; 2: same as detect frequency.')
hwMplsOamTrapOpen = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsOamTrapOpen.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamTrapOpen.setDescription('0: disable 1: enable')
hwMplsOamNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2))
hwMplsOamIgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 1)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrTunnName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamIgrLSPOutDefect.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrLSPOutDefect.setDescription('This notification is generated when the LSP is found not in the defect state at the LSP ingress.')
hwMplsOamIgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 2)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrTunnName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamIgrLSPInDefect.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrLSPInDefect.setDescription('This notification is generated when the LSP is found in the defect state at the LSP ingress.')
hwMplsOamIgrLSPAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 3)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrTunnName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamIgrLSPAva.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrLSPAva.setDescription('This notification is generated when the LSP is found in the available state at the LSP ingress.')
hwMplsOamIgrLSPUnAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 4)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrTunnName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamIgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamIgrLSPUnAva.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamIgrLSPUnAva.setDescription('This notification is generated when the LSP is found in the unavailable state at the LSP ingress.')
hwMplsOamEgrLSPOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 5)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamEgrLSPOutDefect.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrLSPOutDefect.setDescription('This notification is generated when the LSP is found not in the defect state at the LSP egress.')
hwMplsOamEgrLSPInDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 6)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamEgrLSPInDefect.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrLSPInDefect.setDescription('This notification is generated when the LSP is found in the defect state at the LSP egress.')
hwMplsOamEgrLSPAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 7)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamEgrLSPAva.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrLSPAva.setDescription('This notification is generated when the LSP is found in the available state at the LSP egress.')
hwMplsOamEgrLSPUnAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 8)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDefectType"))
if mibBuilder.loadTexts: hwMplsOamEgrLSPUnAva.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrLSPUnAva.setDescription('This notification is generated when the LSP is found in the unavailable state at the LSP egress.')
hwMplsOamEgrFirstPkt = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 9)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDetType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrDetFreq"))
if mibBuilder.loadTexts: hwMplsOamEgrFirstPkt.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrFirstPkt.setDescription('If autoprotocol is enabled, this notification is generated when egress receives the first CV/FFD packet.')
hwMplsOamEgrAutoProFDI = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 10)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrSessTunnId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamEgrEnable"))
if mibBuilder.loadTexts: hwMplsOamEgrAutoProFDI.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrAutoProFDI.setDescription('The FDI packet is used by the upstream node in an LSP to inform the egress of the defect information. It is also generated when the auto protocol is enabled, with which the LSP ingress notifies the egress to stop the OAM detection.')
hwMplsOamEgrRlsnDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 11)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnLspName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnLsrId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnIsDown"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnIfName"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamRlsnSessTunnId"))
if mibBuilder.loadTexts: hwMplsOamEgrRlsnDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamEgrRlsnDown.setDescription('This notification is generated when the Rlsn is down.')
hwMplsOamL2vcOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 12)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamL2vcOutDefect.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcOutDefect.setDescription('This notification is generated when the PW is found not in the defect state.')
hwMplsOamL2vcInDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 13)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamL2vcInDefect.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcInDefect.setDescription('This notification is generated when the PW is found not in the defect state.')
hwMplsOamL2vcAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 14)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamL2vcAva.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcAva.setDescription('This notification is generated when the PW is found in the unavailable state.')
hwMplsOamL2vcUnAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 15)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcPeerIp"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcVcId"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamL2vcBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamL2vcUnAva.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamL2vcUnAva.setDescription('This notification is generated when the PW is found in the unavailable state.')
hwMplsOamBidirectionalTunnelOutDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 16)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelOutDefect.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelOutDefect.setDescription('This notification is generated when the CO-ROUTE is found not in the defect state.')
hwMplsOamBidirectionalTunnelInDefect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 17)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelInDefect.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelInDefect.setDescription('This notification is generated when the CO-ROUTE is found not in the defect state.')
hwMplsOamBidirectionalTunnelAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 18)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAva.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelAva.setDescription('This notification is generated when the CO-ROUTE is found in the unavailable state.')
hwMplsOamBidirectionalTunnelUnAva = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 12, 7, 1, 2, 19)).setObjects(("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelIndex"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelAvaState"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelDefectType"), ("HUAWEI-MPLSOAM-MIB", "hwMplsOamBidirectionalTunnelBdiDefectType"))
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelUnAva.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBidirectionalTunnelUnAva.setDescription('This notification is generated when the CO-ROUTE is found in the unavailable state.')
mibBuilder.exportSymbols("HUAWEI-MPLSOAM-MIB", hwMplsOamEgrRevTunnName=hwMplsOamEgrRevTunnName, hwMplsOamEgrLSPInDefect=hwMplsOamEgrLSPInDefect, hwMplsOamL2vcValid=hwMplsOamL2vcValid, hwMplsOamEgrTable=hwMplsOamEgrTable, hwMplsOamBidirectionalTunnelInDefect=hwMplsOamBidirectionalTunnelInDefect, hwMplsOamL2vcOutDefect=hwMplsOamL2vcOutDefect, hwMplsOamL2vcAutoProlEn=hwMplsOamL2vcAutoProlEn, hwMplsOamIgrValid=hwMplsOamIgrValid, hwMplsOamIgrRowStatus=hwMplsOamIgrRowStatus, hwMplsOamTrapOpen=hwMplsOamTrapOpen, hwMplsOamBidirectionalTunnelTunnName=hwMplsOamBidirectionalTunnelTunnName, hwMplsOamNotifications=hwMplsOamNotifications, hwMplsOamEgrDetFreq=hwMplsOamEgrDetFreq, hwMplsOamL2vcCompatibilityMode=hwMplsOamL2vcCompatibilityMode, hwMplsOamL2vcBdiDefectType=hwMplsOamL2vcBdiDefectType, hwMplsOamBidirectionalTunnelEntry=hwMplsOamBidirectionalTunnelEntry, hwMplsOamEgrLSPOutDefect=hwMplsOamEgrLSPOutDefect, hwMplsOamIgrAvaState=hwMplsOamIgrAvaState, hwMplsOamIgrDefectType=hwMplsOamIgrDefectType, hwMplsOamRlsnEntry=hwMplsOamRlsnEntry, hwMplsOamL2vcAutoOvertime=hwMplsOamL2vcAutoOvertime, hwMplsOamPs=hwMplsOamPs, hwMplsOamL2vcAvaState=hwMplsOamL2vcAvaState, hwMplsOamIgrRevLsrId=hwMplsOamIgrRevLsrId, hwMplsOamRlsnIsDown=hwMplsOamRlsnIsDown, hwMplsOamEgrDetType=hwMplsOamEgrDetType, hwMplsOamEgrDefectType=hwMplsOamEgrDefectType, hwMplsOamL2vcRowStatus=hwMplsOamL2vcRowStatus, hwMplsOamL2vcUnAva=hwMplsOamL2vcUnAva, hwMplsOamIgrTable=hwMplsOamIgrTable, hwMplsOamL2vcDetFreq=hwMplsOamL2vcDetFreq, hwMplsOamL2vcBDIFreq=hwMplsOamL2vcBDIFreq, hwMplsOamIgrLSPOutDefect=hwMplsOamIgrLSPOutDefect, hwMplsOamL2vcSendEnable=hwMplsOamL2vcSendEnable, hwMplsOamBidirectionalTunnelSendEnable=hwMplsOamBidirectionalTunnelSendEnable, hwMplsOamEgrEntry=hwMplsOamEgrEntry, hwMplsOamIgrEnable=hwMplsOamIgrEnable, hwMplsOamRlsnSessTunnId=hwMplsOamRlsnSessTunnId, hwMplsOamEgrRevType=hwMplsOamEgrRevType, hwMplsOamBidirectionalTunnelTable=hwMplsOamBidirectionalTunnelTable, hwMplsOamL2vcDefectType=hwMplsOamL2vcDefectType, hwMplsOamView=hwMplsOamView, hwMplsOamBidirectionalTunnelUnAva=hwMplsOamBidirectionalTunnelUnAva, hwMplsOamEgrRlsnDown=hwMplsOamEgrRlsnDown, hwMplsOamEgrValid=hwMplsOamEgrValid, hwMplsOamL2vcPeerIp=hwMplsOamL2vcPeerIp, hwMplsOamBidirectionalTunnelAutoOvertime=hwMplsOamBidirectionalTunnelAutoOvertime, hwMplsOamBidirectionalTunnelAva=hwMplsOamBidirectionalTunnelAva, hwMplsOamL2vcInDefect=hwMplsOamL2vcInDefect, hwMplsOamBidirectionalTunnelRowStatus=hwMplsOamBidirectionalTunnelRowStatus, hwMplsOamIgrLSPUnAva=hwMplsOamIgrLSPUnAva, hwMplsOamEgrSessTunnId=hwMplsOamEgrSessTunnId, hwMplsOamIgrCompatibilityMode=hwMplsOamIgrCompatibilityMode, hwMplsOamBidirectionalTunnelRevDetType=hwMplsOamBidirectionalTunnelRevDetType, hwMplsOamL2vcDetType=hwMplsOamL2vcDetType, hwMplsOamBidirectionalTunnelOutDefect=hwMplsOamBidirectionalTunnelOutDefect, hwMplsOamRlsnIfName=hwMplsOamRlsnIfName, hwMplsOamBidirectionalTunnelDefectType=hwMplsOamBidirectionalTunnelDefectType, hwMplsOamIgrBDIFreq=hwMplsOamIgrBDIFreq, hwMplsOamIgrLSPInDefect=hwMplsOamIgrLSPInDefect, hwMplsOamIgrIndex=hwMplsOamIgrIndex, hwMplsOamIgrDetFreq=hwMplsOamIgrDetFreq, hwMplsOamBidirectionalTunnelIndex=hwMplsOamBidirectionalTunnelIndex, hwMplsOamL2vcRevDetFreq=hwMplsOamL2vcRevDetFreq, PYSNMP_MODULE_ID=hwMplsOam, hwMplsOamL2vcRevDetType=hwMplsOamL2vcRevDetType, hwMplsOamBidirectionalTunnelBDIFreq=hwMplsOamBidirectionalTunnelBDIFreq, hwMplsOamEgrAvaState=hwMplsOamEgrAvaState, hwMplsOam=hwMplsOam, hwMplsOamIgrLSPAva=hwMplsOamIgrLSPAva, hwMplsOamIgrDetType=hwMplsOamIgrDetType, hwMplsOamBidirectionalTunnelRevDetFreq=hwMplsOamBidirectionalTunnelRevDetFreq, hwMplsOamEgrLspName=hwMplsOamEgrLspName, hwMplsOamEgrAutoEn=hwMplsOamEgrAutoEn, hwMplsOamEgrLSPAva=hwMplsOamEgrLSPAva, hwMplsOamEgrAutoOvertime=hwMplsOamEgrAutoOvertime, hwMplsOamBidirectionalTunnelDetFreq=hwMplsOamBidirectionalTunnelDetFreq, hwMplsOamIgrRevLspName=hwMplsOamIgrRevLspName, hwMplsOamIgrEntry=hwMplsOamIgrEntry, hwMplsOamRlsnRowStatus=hwMplsOamRlsnRowStatus, hwMplsOamL2vcReceiveEnable=hwMplsOamL2vcReceiveEnable, hwMplsOamBidirectionalTunnelDetType=hwMplsOamBidirectionalTunnelDetType, hwMplsOamBidirectionalTunnelAvaState=hwMplsOamBidirectionalTunnelAvaState, hwMplsOamRlsnLspName=hwMplsOamRlsnLspName, hwMplsOamL2vcEntry=hwMplsOamL2vcEntry, hwMplsOamL2vcVcId=hwMplsOamL2vcVcId, hwMplsOamEgrLsrId=hwMplsOamEgrLsrId, hwMplsOamEgrRowStatus=hwMplsOamEgrRowStatus, hwMplsOamObjects=hwMplsOamObjects, hwMplsOamBidirectionalTunnelCompatibilityMode=hwMplsOamBidirectionalTunnelCompatibilityMode, hwMplsOamEgrLSPUnAva=hwMplsOamEgrLSPUnAva, hwMplsOamIgrRevType=hwMplsOamIgrRevType, hwMplsOamEgrEnable=hwMplsOamEgrEnable, hwMplsOamBidirectionalTunnelReceiveEnable=hwMplsOamBidirectionalTunnelReceiveEnable, hwMplsOamRlsnLsrId=hwMplsOamRlsnLsrId, hwMplsOamBidirectionalTunnelValid=hwMplsOamBidirectionalTunnelValid, hwMplsOamCapability=hwMplsOamCapability, hwMplsOamL2vcVcType=hwMplsOamL2vcVcType, hwMplsOamRlsnTable=hwMplsOamRlsnTable, hwMplsOamL2vcTable=hwMplsOamL2vcTable, hwMplsOamEgrBDIFreq=hwMplsOamEgrBDIFreq, hwMplsOamIgrTunnName=hwMplsOamIgrTunnName, hwMplsOamIgrRevSessTunnId=hwMplsOamIgrRevSessTunnId, hwMplsOamBidirectionalTunnelAutoProtocolEnable=hwMplsOamBidirectionalTunnelAutoProtocolEnable, hwMplsOamEgrAutoProFDI=hwMplsOamEgrAutoProFDI, hwMplsOamRlsnIfIndex=hwMplsOamRlsnIfIndex, hwMplsOamL2vcAva=hwMplsOamL2vcAva, hwMplsOamEgrFirstPkt=hwMplsOamEgrFirstPkt, hwMplsOamBidirectionalTunnelBdiDefectType=hwMplsOamBidirectionalTunnelBdiDefectType)
