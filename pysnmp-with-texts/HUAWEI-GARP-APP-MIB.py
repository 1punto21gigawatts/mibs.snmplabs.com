#
# PySNMP MIB module HUAWEI-GARP-APP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-GARP-APP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifEntry, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifEntry", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Gauge32, IpAddress, Integer32, iso, MibIdentifier, NotificationType, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Gauge32", "IpAddress", "Integer32", "iso", "MibIdentifier", "NotificationType", "ModuleIdentity", "Bits")
DisplayString, TimeInterval, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "TextualConvention")
hwGarpAppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213))
hwGarpAppMIB.setRevisions(('2009-09-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwGarpAppMIB.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hwGarpAppMIB.setLastUpdated('200909270000Z')
if mibBuilder.loadTexts: hwGarpAppMIB.setOrganization('Huawei Technologies co., Ltd.')
if mibBuilder.loadTexts: hwGarpAppMIB.setContactInfo('Huawei Nanjing R&D Center, 101 Software Avenue, Yuhua District, Nanjing, Jiangsu, PRC Zip:210012 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwGarpAppMIB.setDescription('This MIB describes objects used for config GARP, and some statistic information.')
class InterfaceIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero, for each interface or interface sub-layer in the managed system. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

hwGarpAppProtoObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1))
if mibBuilder.loadTexts: hwGarpAppProtoObject.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppProtoObject.setDescription('This object describes objects used for config GARP, and some statistic information.')
hwGarpAppLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 1), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGarpAppLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppLeaveAllTime.setDescription('The GARP LeaveAll time, in centiseconds.')
hwGarpAppSwitchCountTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 2), )
if mibBuilder.loadTexts: hwGarpAppSwitchCountTable.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppSwitchCountTable.setDescription('A table containing statistics about various frames on the switch.')
hwGarpAppSwitchGmrpRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwGarpAppSwitchGmrpRxPkt.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppSwitchGmrpRxPkt.setDescription('Number of GMRP frames received.')
hwGarpAppSwitchGvrpRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwGarpAppSwitchGvrpRxPkt.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppSwitchGvrpRxPkt.setDescription('Number of GVRP frames received.')
hwGarpAppSwitchGmrpTxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwGarpAppSwitchGmrpTxPkt.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppSwitchGmrpTxPkt.setDescription('Number of GMRP frames transmitted.')
hwGarpAppSwitchGvrpTxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwGarpAppSwitchGvrpTxPkt.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppSwitchGvrpTxPkt.setDescription('Number of GVRP frames transmitted.')
hwGarpAppSwitchDiscardedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwGarpAppSwitchDiscardedPkt.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppSwitchDiscardedPkt.setDescription('Number of discarded frames.')
hwGarpAppSwitchGarpStatClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGarpAppSwitchGarpStatClear.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppSwitchGarpStatClear.setDescription('Clear various Statistics viz. read operation not supported.')
hwGarpAppHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 3), )
if mibBuilder.loadTexts: hwGarpAppHoldTimeTable.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppHoldTimeTable.setDescription('A table for setting/getting the HoldTime of the port.')
hwGarpAppHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 3, 1), )
ifEntry.registerAugmentions(("HUAWEI-GARP-APP-MIB", "hwGarpAppHoldTimeEntry"))
hwGarpAppHoldTimeEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: hwGarpAppHoldTimeEntry.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppHoldTimeEntry.setDescription('A table for setting/getting the HoldTime of the port.')
hwGarpAppHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 32765)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGarpAppHoldTime.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppHoldTime.setDescription('HoldTime of the port.')
hwGarpAppInfObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 2))
hwGarpAppTrunkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 2, 1), )
if mibBuilder.loadTexts: hwGarpAppTrunkStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppTrunkStatusTable.setDescription('GVRP attributes on the VlanTrunk port.')
hwGarpAppTrunkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 2, 1, 1), ).setIndexNames((0, "HUAWEI-GARP-APP-MIB", "hwGarpAppTrunkIndex"))
if mibBuilder.loadTexts: hwGarpAppTrunkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppTrunkStatusEntry.setDescription('GVRP attributes on the VlanTrunk port.')
hwGarpAppSwitchCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 1, 2, 1), )
hwGarpAppTrunkStatusEntry.registerAugmentions(("HUAWEI-GARP-APP-MIB", "hwGarpAppSwitchCountEntry"))
hwGarpAppSwitchCountEntry.setIndexNames(*hwGarpAppTrunkStatusEntry.getIndexNames())
if mibBuilder.loadTexts: hwGarpAppSwitchCountEntry.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppSwitchCountEntry.setDescription('A table containing statistics about various frames on the switch.')
hwGarpAppTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwGarpAppTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppTrunkIndex.setDescription('Index number of the VLANTrunk interface.')
hwGarpAppTrunkGvrpRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fixed", 2), ("forbidden", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwGarpAppTrunkGvrpRegistration.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppTrunkGvrpRegistration.setDescription('GVRP registration information normal: This is the default configuration. Allow to create, register and unregister vlans dynamiclly at this port. fixed: Aallow to create and register vlan manually at this port. Prevent from unregistering vlans or registering known vlans of this port at another trunk port. forbidden: Unregister all vlans but vlan 1, forbid to create or register any other vlans at this port.')
hwGarpAppTrunkPassListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwGarpAppTrunkPassListLow.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppTrunkPassListLow.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 1 through 8, the second octet specifying VLANs 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each actually passed VLAN of the trunk port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is actually passed in the set of VLANs; the VLAN is not actually passed if its bit has a value of '0'.")
hwGarpAppTrunkPassListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwGarpAppTrunkPassListHigh.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppTrunkPassListHigh.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2049 through 2056, the second octet specifying VLANs 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each actually passed VLAN of the trunk port is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is actually passed in the set of VLANs; the VLAN is not actually passed if its bit has a value of '0'.")
hwGarpAppConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 3))
hwGarpAppCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 3, 1))
hwGarpAppCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 3, 1, 1)).setObjects(("HUAWEI-GARP-APP-MIB", "hwGarpAppGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGarpAppCompliance = hwGarpAppCompliance.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppCompliance.setDescription('The compliance statement for systems supporting this module.')
hwGarpAppGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 3, 2))
hwGarpAppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 213, 3, 2, 1)).setObjects(("HUAWEI-GARP-APP-MIB", "hwGarpAppLeaveAllTime"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppSwitchGmrpRxPkt"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppSwitchGvrpRxPkt"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppSwitchGmrpTxPkt"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppSwitchGvrpTxPkt"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppSwitchDiscardedPkt"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppSwitchGarpStatClear"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppHoldTime"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppTrunkGvrpRegistration"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppTrunkPassListLow"), ("HUAWEI-GARP-APP-MIB", "hwGarpAppTrunkPassListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwGarpAppGroup = hwGarpAppGroup.setStatus('current')
if mibBuilder.loadTexts: hwGarpAppGroup.setDescription("The GARP's Configuration group.")
mibBuilder.exportSymbols("HUAWEI-GARP-APP-MIB", hwGarpAppTrunkGvrpRegistration=hwGarpAppTrunkGvrpRegistration, hwGarpAppTrunkPassListLow=hwGarpAppTrunkPassListLow, hwGarpAppSwitchDiscardedPkt=hwGarpAppSwitchDiscardedPkt, hwGarpAppSwitchGarpStatClear=hwGarpAppSwitchGarpStatClear, hwGarpAppTrunkStatusEntry=hwGarpAppTrunkStatusEntry, hwGarpAppSwitchGmrpTxPkt=hwGarpAppSwitchGmrpTxPkt, hwGarpAppInfObject=hwGarpAppInfObject, hwGarpAppSwitchCountEntry=hwGarpAppSwitchCountEntry, hwGarpAppSwitchGmrpRxPkt=hwGarpAppSwitchGmrpRxPkt, hwGarpAppHoldTimeEntry=hwGarpAppHoldTimeEntry, hwGarpAppSwitchGvrpRxPkt=hwGarpAppSwitchGvrpRxPkt, hwGarpAppLeaveAllTime=hwGarpAppLeaveAllTime, InterfaceIndex=InterfaceIndex, hwGarpAppTrunkIndex=hwGarpAppTrunkIndex, hwGarpAppCompliances=hwGarpAppCompliances, hwGarpAppProtoObject=hwGarpAppProtoObject, hwGarpAppConformance=hwGarpAppConformance, hwGarpAppSwitchCountTable=hwGarpAppSwitchCountTable, PYSNMP_MODULE_ID=hwGarpAppMIB, hwGarpAppGroups=hwGarpAppGroups, hwGarpAppTrunkStatusTable=hwGarpAppTrunkStatusTable, hwGarpAppHoldTime=hwGarpAppHoldTime, hwGarpAppTrunkPassListHigh=hwGarpAppTrunkPassListHigh, hwGarpAppSwitchGvrpTxPkt=hwGarpAppSwitchGvrpTxPkt, hwGarpAppCompliance=hwGarpAppCompliance, hwGarpAppGroup=hwGarpAppGroup, hwGarpAppMIB=hwGarpAppMIB, hwGarpAppHoldTimeTable=hwGarpAppHoldTimeTable)
