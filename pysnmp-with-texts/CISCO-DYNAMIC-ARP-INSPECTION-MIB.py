#
# PySNMP MIB module CISCO-DYNAMIC-ARP-INSPECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DYNAMIC-ARP-INSPECTION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
VlanIndexOrZero, = mibBuilder.importSymbols("CISCO-PRIVATE-VLAN-MIB", "VlanIndexOrZero")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, iso, TimeTicks, Bits, Gauge32, IpAddress, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, ModuleIdentity, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "TimeTicks", "Bits", "Gauge32", "IpAddress", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "ModuleIdentity", "Counter64", "MibIdentifier")
TextualConvention, DisplayString, StorageType, TruthValue, DateAndTime, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "StorageType", "TruthValue", "DateAndTime", "RowStatus", "MacAddress")
ciscoDynamicArpInspectionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 374))
ciscoDynamicArpInspectionMIB.setRevisions(('2011-03-21 00:00', '2003-10-29 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDynamicArpInspectionMIB.setRevisionsDescriptions(('Add the following groups: - cdaiLoggingConfigGroup. - cdaiLogBufferGroup. - cdaiLogBufferActionGroup. - cdaiAddressValidationGroup. - cdaiVlanCfgGroup. - cdaiVlanArpProbeGroup. - cdaiVlanStatisticsGroup. - cdaiVlanExtStatisticsGroup.', 'Initial revision of this MIB module.',))
if mibBuilder.loadTexts: ciscoDynamicArpInspectionMIB.setLastUpdated('201103210000Z')
if mibBuilder.loadTexts: ciscoDynamicArpInspectionMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDynamicArpInspectionMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoDynamicArpInspectionMIB.setDescription('The MIB module is for configuration of Dynamic ARP Inspection feature. Dynamic ARP Inspection is a security mechanism which validate ARP packets seen on access ports.')
cdaiMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 0))
cdaiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1))
cdaiMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 2))
cdaiGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1))
cdaiVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2))
cdaiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3))
cdaiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4))
cdaiLoggingEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLoggingEnable.setStatus('current')
if mibBuilder.loadTexts: cdaiLoggingEnable.setDescription("This object indicates whether the Dynamic ARP Inspection logging is enabled on the device. If this object is set to 'true', Dynamic ARP Inspection logging is enabled. If this object is set to 'false', Dynamic ARP Inspection logging is disabled.")
cdaiAddressValidate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 2), Bits().clone(namedValues=NamedValues(("srcMacAddress", 0), ("dstMacAddress", 1), ("ip", 2), ("ipAllowZeros", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiAddressValidate.setStatus('current')
if mibBuilder.loadTexts: cdaiAddressValidate.setDescription("This object specifies address validation criteria used by Dynamic ARP Inspection feature. 'srcMacAddress' indicates that source MAC address in ethernet header is checked against the sender MAC address in ARP packet. When this bit is on, packets with different MAC addresses are classified as invalid packets and are dropped. This checking is done for both ARP request and ARP response packet. 'dstMacAddress' indicates that the destination MAC address in ethernet header is checked against the target MAC address in ARP packet. When this bit is on, packets with different addresses are classified as invalid packets and are dropped. This checking is done for ARP response packet only. 'ip' indicates that the IP addresses in ARP packet are checked for invalid or unexpected IP addresses. Addresses such as 0.0.0.0, 255.255.255.255 and all IP multicast addresses are considered invalid. When this bit is on, both the sender and target IP addresses in the ARP packet are checked. This checking is done for both ARP request and response packet. 'ipAllowZeros' works the same as 'ip' but address 0.0.0.0 is allowed. 'ip' and 'ipAllowZeros' are mutually exclusive.")
cdaiLogBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 3), Unsigned32()).setUnits('entries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLogBufferSize.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferSize.setDescription('This object specifies the size of the logging buffer.')
cdaiLoggingRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 4), Unsigned32()).setUnits('entries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLoggingRate.setStatus('current')
if mibBuilder.loadTexts: cdaiLoggingRate.setDescription('This object specifies the maximum number of logging entries will be logged during the time period denoted by cdaiLoggingInterval object for system message generation purpose. Zero value indicates that entry is placed in the log buffer, but a system message is not generated.')
cdaiLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLoggingInterval.setStatus('current')
if mibBuilder.loadTexts: cdaiLoggingInterval.setDescription('This object specifies the logging interval for system message generation purpose. Zero value indicates that system message is immediately generated (and the log buffer is always empty). Value of this object and value of cdaiLoggingRate object cannot be zero at the same time.')
cdaiLogBufferAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiLogBufferAction.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferAction.setDescription("This objects specifies the action can be taken with respect to logging buffer. 'none' indicates that no operation is performed. This object always return value 'none' when read. 'clear' indicates that all entries in cdaiLoggingBufferTable will be cleared.")
cdaiLogBufferTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7), )
if mibBuilder.loadTexts: cdaiLogBufferTable.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferTable.setDescription('A table provides the information of logged ARP flows for system message generation.')
cdaiLogBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferIndex"))
if mibBuilder.loadTexts: cdaiLogBufferEntry.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferEntry.setDescription('A row instance contains logged ARP flow data for system message generation. Entries in the log are cleared once system messages are generated on their behalf. A special entry will be populated for accounting drops of all flows that result in exceeding the number of entries of the log buffer. Special entry only contains packets counter and timestamps information. The rest of its fields are irrelevant.')
cdaiLogBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cdaiLogBufferIndex.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferIndex.setDescription('This object uniquely identifies a logged ARP flow in the buffer.')
cdaiLogBufferInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferInterface.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferInterface.setDescription('This object indicates the interface which sent the logged ARP flow. Zero value indicates the special entry.')
cdaiLogBufferVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 3), VlanIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferVlan.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferVlan.setDescription('This object indicates the VLAN number which the logged ARP flow belongs to. Zero value indicates the special entry.')
cdaiLogBufferSenderMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferSenderMacAddress.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferSenderMacAddress.setDescription('This object indicates the sender MAC address of the logged ARP flow. All zeros MAC address value indicates the special entry.')
cdaiLogBufferSenderAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferSenderAddressType.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferSenderAddressType.setDescription('This object indicates the sender Internet address type of the logged ARP flow.')
cdaiLogBufferSenderIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferSenderIpAddress.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferSenderIpAddress.setDescription('This object indicates the sender Internet address of the logged ARP flow. The type of this address is determined by the value of cdaiLogBufferSenderAddressType object. All zeros IP address value indicates the special entry.')
cdaiLogBufferReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("deny", 2), ("aclDeny", 3), ("aclPermit", 4), ("dhcpDeny", 5), ("dhcpPermit", 6), ("probePermit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferReason.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferReason.setDescription("This object indicates the reason for logging this ARP flow. 'unknown' indicates unknown reason. 'deny' indicates that this ARP flow is logged because it is denied by Dynamic ARP Inspection feature. 'aclDeny' indicates that this ARP flow is logged because it is denied by a configured ARP ACL. 'aclPermit' indicates that this ARP flow is logged because it is permitted by a configured ARP ACL. 'dhcpDeny' indicates that this ARP flow is logged because it is denied when comparing with DHCP bindings information. 'dhcpPermit' indicates that this ARP flow is logged because it is permitted when comparing with DHCP binding information. 'probePermit' indicates that this ARP flow is logged because it is a permitted ARP-Probe flow.")
cdaiLogBufferLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferLastUpdate.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferLastUpdate.setDescription('This object indicates the timestamp when the last packet of this flow was accounted by the system.')
cdaiLogBufferPacketsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 1, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiLogBufferPacketsCount.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferPacketsCount.setDescription('This object indicates the number of packets of this ARP flow was accounted by the system.')
cdaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 1), )
if mibBuilder.loadTexts: cdaiVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanConfigTable.setDescription('A table provides the mechanism to control Dynamic ARP Inspection per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
cdaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanIndex"))
if mibBuilder.loadTexts: cdaiVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanConfigEntry.setDescription('A row instance contains the configuration to enable or disable Dynamic ARP Inspection at each existing VLAN.')
cdaiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdaiVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanIndex.setDescription('This object indicates the VLAN number on which Dynamic ARP Inspection feature is configured.')
cdaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiVlanDynArpInspEnable.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanDynArpInspEnable.setDescription("This object indicates whether Dynamic ARP Inspection is enabled in this VLAN. If this object is set to 'true', Dynamic ARP Inspection is enabled. If this object is set to 'false', Dynamic ARP Inspection is disabled.")
cdaiVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2), )
if mibBuilder.loadTexts: cdaiVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanCfgTable.setDescription('A table provides the mechanism to control Dynamic ARP Inspection per VLAN. This table is populated for each existing VLAN in the device as well as non-existing VLANs which contains the Dynamic ARP Inspection configuration.')
cdaiVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanId"))
if mibBuilder.loadTexts: cdaiVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanCfgEntry.setDescription('A row instance contains the Dynamic ARP inspection configuration for a specific VLAN in the device.')
cdaiVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdaiVlanId.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanId.setDescription('This object indicates the VLAN number.')
cdaiVlanDynArpInspAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanDynArpInspAdmin.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanDynArpInspAdmin.setDescription("This object specifies the administrative status of Dynamic ARP Inspection feature in this VLAN. If this object value is 'enable', Dynamic ARP Inspection is enabled. If this object value is 'disable', Dynamic ARP Inspection is disabled.")
cdaiVlanDynArpInspOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDynArpInspOper.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanDynArpInspOper.setDescription("This object indicates the operational status of Dynamic ARP Inspection feature in this VLAN. If this object is 'active', Dynamic ARP Inspection is operationally active. If this object is 'inactive', Dynamic ARP Inspection is operationally inactive.")
cdaiVlanFilterArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanFilterArpAclName.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanFilterArpAclName.setDescription('This object specifies an ARP ACL name that Dynamic ARP Inspection feature uses to check the validity of the bindings information in ARP body. An emptry string indicates that no such ARP ACL is configured for this purpose.')
cdaiVlanFilterArpAclStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanFilterArpAclStatic.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanFilterArpAclStatic.setDescription("This object specifies whether the ARP ACL denoted by cdaiVlanFilterArpAclName is statically applied by Dynamic ARP Inspection feature. This object does not take effect if value of cdaiVlanFilterArpAclName on the row is an empty string. 'true' indicates that ARP ACL is applied statically. The action (denied or permitted) results from applying the ARP ACL is final and ARP packet is not compared against DHCP bindings information. 'false' indicates ARP ACL is not applied statically. If ARP packet is not explicitly classified by ARP ACL, it will be compared against DHCP bindings information.")
cdaiVlanAclLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("aclMatch", 2), ("deny", 3))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanAclLogging.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanAclLogging.setDescription("This object specifies the logging configuration that Dynamic ARP Inspection feature applies to ARP packets when they are classified by the configured ACL. 'none' indicates that no logging is performed when packets are classified by the configured ACL. 'aclMatch' indicates that logging is performed when packets are classified by the configured ACL and the matched ACE specified a logging action. 'deny' indicates that logging is performed when packets is denied by the configured ACL.")
cdaiVlanDhcpBindingLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("permit", 2), ("deny", 3), ("all", 4))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanDhcpBindingLogging.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanDhcpBindingLogging.setDescription("This object specifies packet logging configuration performed by Dynamic ARP Inspection feature when ARP packets is compared against DHCP bindings information. 'none' indicates that no packet logging is performed. 'permit' indicates that packet logging is performed only for packets that are permitted as a result of comparing with DHCP bindings information. 'deny' indicates that packet logging is performed only for packets that are denied as a result of comparing with DHCP bindings information. 'all' indicates that packet logging is performed for all packets that are permitted or denied as a result of comparing with DHCP bindings information.")
cdaiVlanArpProbeLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanArpProbeLogging.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanArpProbeLogging.setDescription("The objects specifies if ARP-Probe packets will be logged by Dynamic ARP Inspection feature. 'true' indicates ARP-Probe packets will be logged. 'false' indicates ARP-Probe packets will not be logged.")
cdaiVlanCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 9), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanCfgStorageType.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanCfgStorageType.setDescription('The objects specifies the storage type for this conceptual row.')
cdaiVlanCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 2, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdaiVlanCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanCfgRowStatus.setDescription('The status of this conceptual row entry. This object is used to manage creation and deletion of rows in this table. Deletion of an entry in this table is only allowed if the VLAN indicated by its row index object does not exist in the device. Writable objects can be modified at any time even while the row is active.')
cdaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 1), )
if mibBuilder.loadTexts: cdaiIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdaiIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for Dynamic ARP Inspection purpose at each physical interface capable of this feature. Some of the interfaces (but not limited to) for which this feature might be applicable are: ifType = ethernetCsmacd(6).')
cdaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdaiIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdaiIfConfigEntry.setDescription('A row instance contains the configuration to enable or disable trust state for Dynamic ARP Inspection at each physical interface capable of this feature.')
cdaiIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: cdaiIfTrustEnable.setDescription("This object indicates whether the interface is trusted for Dynamic ARP Inspection purpose. If this object is set to 'true', the interface is trusted. ARP packets coming to this interface will be forwarded without checking. If this object is set to 'false', the interface is not trusted. ARP packets coming to this interface will be subjected to ARP inspection.")
cdaiIfRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 2), )
if mibBuilder.loadTexts: cdaiIfRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: cdaiIfRateLimitTable.setDescription('A table provides the mechanism to configure the rate limit for Dynamic ARP Inspection purpose at each physical interface capable of this feature.')
cdaiIfRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdaiIfRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: cdaiIfRateLimitEntry.setDescription('A row instance contains the configuration of rate limit Dynamic ARP Inspection at each physical interface capable of this feature.')
cdaiIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 3, 2, 1, 1), Unsigned32()).setUnits('packet per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdaiIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: cdaiIfRateLimit.setDescription('This object indicates rate limit value for Dynamic ARP Inspection purpose. If the incoming rate of ARP packets exceeds the value of this object, ARP packets will be dropped. ')
cdaiVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1), )
if mibBuilder.loadTexts: cdaiVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanStatsTable.setDescription('A table lists the Dynamic Arp Inspection statistics per VLAN.')
cdaiVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanStatsIndex"))
if mibBuilder.loadTexts: cdaiVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanStatsEntry.setDescription('A row instance contains Dynamic ARP Inspection statistics information for each VLAN.')
cdaiVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cdaiVlanStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanStatsIndex.setDescription('This object indicates the VLAN number.')
cdaiVlanForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanForwarded.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanForwarded.setDescription('This object indicates the number of ARP packets forwarded by Dynamic Arp Inspection feature.')
cdaiVlanDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDropped.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanDropped.setDescription('This object indicates the number of ARP packets dropped by Dynamic ARP Inspection feature.')
cdaiVlanAclPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanAclPermitted.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanAclPermitted.setDescription('This object indicates the number of ARP packets permitted by the configured ACL.')
cdaiVlanDhcpBindingsPermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDhcpBindingsPermitted.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanDhcpBindingsPermitted.setDescription('This object indicates the number of DHCP-binding permitted ARP packets.')
cdaiVlanAclDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanAclDenied.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanAclDenied.setDescription('This object indicates the number of ARP packets denied by the configured ACL.')
cdaiVlanDhcpBindingDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDhcpBindingDenied.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanDhcpBindingDenied.setDescription('This object indicates the number of DHCP-binding denied ARP packets.')
cdaiVlanSrcMacValidationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanSrcMacValidationFailures.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanSrcMacValidationFailures.setDescription('This object indicates the number of ARP packets that fail source MAC address validation.')
cdaiVlanDestMacValidationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanDestMacValidationFailures.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanDestMacValidationFailures.setDescription('This object indicates the number of ARP packets that fail destination MAC address validation.')
cdaiVlanIpValidationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanIpValidationFailures.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanIpValidationFailures.setDescription('This object indicates the number of ARP packets that fail IP validation.')
cdaiVlanArpProbePermitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanArpProbePermitted.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanArpProbePermitted.setDescription('This object indicates the number of ARP Probe packets that are permitted.')
cdaiVlanInvalidProtocolData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 374, 1, 4, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdaiVlanInvalidProtocolData.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanInvalidProtocolData.setDescription('This object indicates the number of ARP packets that contain invalid protocol data.')
cdaiMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 1))
cdaiMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2))
cdaiMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 1, 1)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiGlobalLoggingGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfRateLimitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiMIBCompliance = cdaiMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cdaiMIBCompliance.setDescription('The compliance statement for CISCO-DYNAMIC-ARP-INSPECTION-MIB. This compliance is superceded by cdaiMIBCompliance1.')
cdaiMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 1, 2)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanCfgGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiGlobalLoggingGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfRateLimitGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLoggingConfigGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiAddressValidationGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanStatisticsGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanExtStatisticsGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanArpProbeGroup"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferActionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiMIBCompliance1 = cdaiMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: cdaiMIBCompliance1.setDescription('The compliance statement for CISCO-DYNAMIC-ARP-INSPECTION-MIB')
cdaiGlobalLoggingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 1)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLoggingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiGlobalLoggingGroup = cdaiGlobalLoggingGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiGlobalLoggingGroup.setDescription('A collection of object which is used to configure Dynamic ARP Inspection logging.')
cdaiVlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 2)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDynArpInspEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanConfigGroup = cdaiVlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanConfigGroup.setDescription('A collection of object which are used to configure as well as show information regarding the Dynamic ARP Inspection feature per VLAN.')
cdaiIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 3)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfTrustEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiIfConfigGroup = cdaiIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiIfConfigGroup.setDescription('A collection of object which are used to configure as well as show information regarding the interface trust state for Dynamic ARP Inspection purpose.')
cdaiIfRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 4)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiIfRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiIfRateLimitGroup = cdaiIfRateLimitGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiIfRateLimitGroup.setDescription('A collection of object which are used to configure as well as show information regarding the rate limit per interface for Dynamic ARP Inspection purpose.')
cdaiLoggingConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 5)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferSize"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLoggingRate"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLoggingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiLoggingConfigGroup = cdaiLoggingConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiLoggingConfigGroup.setDescription('A collection of object which provides logging configuration for Dynamic ARP Inspection feature.')
cdaiAddressValidationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 6)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiAddressValidate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiAddressValidationGroup = cdaiAddressValidationGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiAddressValidationGroup.setDescription('A collection of object which provides address validation configuration for Dynamic ARP Inspection feature.')
cdaiVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 7)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDynArpInspAdmin"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDynArpInspOper"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanFilterArpAclName"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanFilterArpAclStatic"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanAclLogging"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDhcpBindingLogging"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanCfgStorageType"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanCfgGroup = cdaiVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanCfgGroup.setDescription('A collection of object which provides additional VLAN configuration for Dynamic ARP Inspection feature.')
cdaiVlanStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 8)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanForwarded"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDropped"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanAclPermitted"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDhcpBindingsPermitted"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanAclDenied"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDhcpBindingDenied"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanSrcMacValidationFailures"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanDestMacValidationFailures"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanIpValidationFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanStatisticsGroup = cdaiVlanStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanStatisticsGroup.setDescription('A collection of object which provides Dynamic ARP Inspection statistics per VLAN.')
cdaiLogBufferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 9)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferInterface"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferVlan"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferSenderMacAddress"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferSenderAddressType"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferSenderIpAddress"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferReason"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferLastUpdate"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferPacketsCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiLogBufferGroup = cdaiLogBufferGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferGroup.setDescription('A collection of object which provides logging information for Dynamic ARP Inspection feature.')
cdaiVlanExtStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 10)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanArpProbePermitted"), ("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanInvalidProtocolData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanExtStatisticsGroup = cdaiVlanExtStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanExtStatisticsGroup.setDescription('A collection of object which provides additional Dynamic ARP Inspection statistics per VLAN.')
cdaiVlanArpProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 11)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiVlanArpProbeLogging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiVlanArpProbeGroup = cdaiVlanArpProbeGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiVlanArpProbeGroup.setDescription('A collection of object which provides additional VLAN configuration for ARP Probe packets.')
cdaiLogBufferActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 374, 2, 2, 12)).setObjects(("CISCO-DYNAMIC-ARP-INSPECTION-MIB", "cdaiLogBufferAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdaiLogBufferActionGroup = cdaiLogBufferActionGroup.setStatus('current')
if mibBuilder.loadTexts: cdaiLogBufferActionGroup.setDescription('A collection of object which provides log buffer action.')
mibBuilder.exportSymbols("CISCO-DYNAMIC-ARP-INSPECTION-MIB", cdaiVlanFilterArpAclName=cdaiVlanFilterArpAclName, cdaiLogBufferSize=cdaiLogBufferSize, cdaiVlanAclDenied=cdaiVlanAclDenied, cdaiVlanArpProbePermitted=cdaiVlanArpProbePermitted, cdaiAddressValidationGroup=cdaiAddressValidationGroup, cdaiIfRateLimit=cdaiIfRateLimit, cdaiLogBufferTable=cdaiLogBufferTable, ciscoDynamicArpInspectionMIB=ciscoDynamicArpInspectionMIB, cdaiMIBConformance=cdaiMIBConformance, PYSNMP_MODULE_ID=ciscoDynamicArpInspectionMIB, cdaiMIBCompliance1=cdaiMIBCompliance1, cdaiIfRateLimitTable=cdaiIfRateLimitTable, cdaiMIBNotifs=cdaiMIBNotifs, cdaiLogBufferSenderAddressType=cdaiLogBufferSenderAddressType, cdaiVlanConfigGroup=cdaiVlanConfigGroup, cdaiMIBObjects=cdaiMIBObjects, cdaiIfRateLimitGroup=cdaiIfRateLimitGroup, cdaiVlanCfgGroup=cdaiVlanCfgGroup, cdaiVlanSrcMacValidationFailures=cdaiVlanSrcMacValidationFailures, cdaiVlanIndex=cdaiVlanIndex, cdaiVlanStatsIndex=cdaiVlanStatsIndex, cdaiVlanDestMacValidationFailures=cdaiVlanDestMacValidationFailures, cdaiIfTrustEnable=cdaiIfTrustEnable, cdaiVlanStatsTable=cdaiVlanStatsTable, cdaiVlanArpProbeLogging=cdaiVlanArpProbeLogging, cdaiLogBufferEntry=cdaiLogBufferEntry, cdaiInterface=cdaiInterface, cdaiVlanFilterArpAclStatic=cdaiVlanFilterArpAclStatic, cdaiVlanDynArpInspEnable=cdaiVlanDynArpInspEnable, cdaiAddressValidate=cdaiAddressValidate, cdaiVlanConfigTable=cdaiVlanConfigTable, cdaiVlanDhcpBindingsPermitted=cdaiVlanDhcpBindingsPermitted, cdaiVlanStatisticsGroup=cdaiVlanStatisticsGroup, cdaiVlanCfgTable=cdaiVlanCfgTable, cdaiVlanDhcpBindingDenied=cdaiVlanDhcpBindingDenied, cdaiIfConfigEntry=cdaiIfConfigEntry, cdaiStatistics=cdaiStatistics, cdaiLogBufferReason=cdaiLogBufferReason, cdaiVlanInvalidProtocolData=cdaiVlanInvalidProtocolData, cdaiLogBufferPacketsCount=cdaiLogBufferPacketsCount, cdaiVlanConfigEntry=cdaiVlanConfigEntry, cdaiLogBufferIndex=cdaiLogBufferIndex, cdaiVlanCfgRowStatus=cdaiVlanCfgRowStatus, cdaiVlanIpValidationFailures=cdaiVlanIpValidationFailures, cdaiIfConfigTable=cdaiIfConfigTable, cdaiLoggingRate=cdaiLoggingRate, cdaiVlanCfgEntry=cdaiVlanCfgEntry, cdaiLogBufferInterface=cdaiLogBufferInterface, cdaiVlanDynArpInspOper=cdaiVlanDynArpInspOper, cdaiLogBufferSenderMacAddress=cdaiLogBufferSenderMacAddress, cdaiMIBCompliances=cdaiMIBCompliances, cdaiLoggingInterval=cdaiLoggingInterval, cdaiLogBufferVlan=cdaiLogBufferVlan, cdaiVlanDynArpInspAdmin=cdaiVlanDynArpInspAdmin, cdaiVlanCfgStorageType=cdaiVlanCfgStorageType, cdaiLogBufferGroup=cdaiLogBufferGroup, cdaiVlanAclLogging=cdaiVlanAclLogging, cdaiVlanDhcpBindingLogging=cdaiVlanDhcpBindingLogging, cdaiVlanArpProbeGroup=cdaiVlanArpProbeGroup, cdaiVlanForwarded=cdaiVlanForwarded, cdaiVlanDropped=cdaiVlanDropped, cdaiVlanExtStatisticsGroup=cdaiVlanExtStatisticsGroup, cdaiLogBufferLastUpdate=cdaiLogBufferLastUpdate, cdaiGlobal=cdaiGlobal, cdaiLogBufferActionGroup=cdaiLogBufferActionGroup, cdaiIfConfigGroup=cdaiIfConfigGroup, cdaiVlan=cdaiVlan, cdaiVlanId=cdaiVlanId, cdaiLoggingConfigGroup=cdaiLoggingConfigGroup, cdaiVlanStatsEntry=cdaiVlanStatsEntry, cdaiLogBufferAction=cdaiLogBufferAction, cdaiLogBufferSenderIpAddress=cdaiLogBufferSenderIpAddress, cdaiGlobalLoggingGroup=cdaiGlobalLoggingGroup, cdaiMIBCompliance=cdaiMIBCompliance, cdaiMIBGroups=cdaiMIBGroups, cdaiVlanAclPermitted=cdaiVlanAclPermitted, cdaiLoggingEnable=cdaiLoggingEnable, cdaiIfRateLimitEntry=cdaiIfRateLimitEntry)
