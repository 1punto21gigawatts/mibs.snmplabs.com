#
# PySNMP MIB module CYAN-S64-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYAN-S64-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:34:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
cyanEntityModules, = mibBuilder.importSymbols("CYAN-MIB", "cyanEntityModules")
CyanOpStateTc, CyanSecServiceStateTc, CyanNimTc, CyanOpStateQualTc, CyanSdhSnSignalLabelTc, CyanAdminStateTc = mibBuilder.importSymbols("CYAN-TC-MIB", "CyanOpStateTc", "CyanSecServiceStateTc", "CyanNimTc", "CyanOpStateQualTc", "CyanSdhSnSignalLabelTc", "CyanAdminStateTc")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, NotificationType, Unsigned32, ObjectIdentity, TimeTicks, ModuleIdentity, Bits, MibIdentifier, Integer32, Gauge32, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "NotificationType", "Unsigned32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Bits", "MibIdentifier", "Integer32", "Gauge32", "Counter64", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cyanS64Module = ModuleIdentity((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250))
cyanS64Module.setRevisions(('2014-12-07 05:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cyanS64Module.setRevisionsDescriptions(('Release 6.0 build 1416362081',))
if mibBuilder.loadTexts: cyanS64Module.setLastUpdated('201412070545Z')
if mibBuilder.loadTexts: cyanS64Module.setOrganization('Cyan, Inc.')
if mibBuilder.loadTexts: cyanS64Module.setContactInfo(' E-mail: support@cyaninc.com Postal: Cyan, Inc. 1390 N. McDowell Blvd., # G-327 Petaluma, CA 94954 USA Tel: +1-707-735-2300')
if mibBuilder.loadTexts: cyanS64Module.setDescription('MIB module for STS-192c/VC-4-64c Path layer')
cyanS64MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1))
cyanS64Table = MibTable((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1), )
if mibBuilder.loadTexts: cyanS64Table.setStatus('current')
if mibBuilder.loadTexts: cyanS64Table.setDescription('A list of S64 entries.')
cyanS64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1), ).setIndexNames((0, "CYAN-S64-MIB", "cyanS64ShelfId"), (0, "CYAN-S64-MIB", "cyanS64ModuleId"), (0, "CYAN-S64-MIB", "cyanS64S64Id"))
if mibBuilder.loadTexts: cyanS64Entry.setStatus('current')
if mibBuilder.loadTexts: cyanS64Entry.setDescription('An entry of S64.')
cyanS64ShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cyanS64ShelfId.setStatus('current')
if mibBuilder.loadTexts: cyanS64ShelfId.setDescription('Shelf Id')
cyanS64ModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cyanS64ModuleId.setStatus('current')
if mibBuilder.loadTexts: cyanS64ModuleId.setDescription('Module Id')
cyanS64S64Id = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: cyanS64S64Id.setStatus('current')
if mibBuilder.loadTexts: cyanS64S64Id.setDescription('S64 Termination Id')
cyanS64Accepted = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 4), CyanSdhSnSignalLabelTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64Accepted.setStatus('current')
if mibBuilder.loadTexts: cyanS64Accepted.setDescription('Received Signal Label value')
cyanS64AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 5), CyanAdminStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64AdminState.setStatus('current')
if mibBuilder.loadTexts: cyanS64AdminState.setDescription('Administrative state')
cyanS64AutoinserviceSoakTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64AutoinserviceSoakTimeSec.setStatus('current')
if mibBuilder.loadTexts: cyanS64AutoinserviceSoakTimeSec.setDescription('Auto-In-Service soak time')
cyanS64Description = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64Description.setStatus('current')
if mibBuilder.loadTexts: cyanS64Description.setDescription('Description')
cyanS64Expected = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 8), CyanSdhSnSignalLabelTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64Expected.setStatus('current')
if mibBuilder.loadTexts: cyanS64Expected.setDescription('Expected Signal Label value')
cyanS64Inserted = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 9), CyanSdhSnSignalLabelTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64Inserted.setStatus('current')
if mibBuilder.loadTexts: cyanS64Inserted.setDescription('Transmited Signal Label value')
cyanS64Monitorterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 10), CyanNimTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64Monitorterminate.setStatus('current')
if mibBuilder.loadTexts: cyanS64Monitorterminate.setDescription('Enable Non-Intrusive Monitoring')
cyanS64OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 11), CyanOpStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64OperState.setStatus('current')
if mibBuilder.loadTexts: cyanS64OperState.setDescription('Primary Operation State')
cyanS64OperStateQual = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 12), CyanOpStateQualTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64OperStateQual.setStatus('current')
if mibBuilder.loadTexts: cyanS64OperStateQual.setDescription('Operation state qualifier')
cyanS64SecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 1, 1, 1, 13), CyanSecServiceStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanS64SecServState.setStatus('current')
if mibBuilder.loadTexts: cyanS64SecServState.setDescription('Secondary service state')
cyanS64ObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 20)).setObjects(("CYAN-S64-MIB", "cyanS64Accepted"), ("CYAN-S64-MIB", "cyanS64AdminState"), ("CYAN-S64-MIB", "cyanS64AutoinserviceSoakTimeSec"), ("CYAN-S64-MIB", "cyanS64Description"), ("CYAN-S64-MIB", "cyanS64Expected"), ("CYAN-S64-MIB", "cyanS64Inserted"), ("CYAN-S64-MIB", "cyanS64Monitorterminate"), ("CYAN-S64-MIB", "cyanS64OperState"), ("CYAN-S64-MIB", "cyanS64OperStateQual"), ("CYAN-S64-MIB", "cyanS64SecServState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanS64ObjectGroup = cyanS64ObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cyanS64ObjectGroup.setDescription('Group of objects that comes with S64 module')
cyanS64Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 28533, 5, 30, 250, 30)).setObjects(("CYAN-S64-MIB", "cyanS64ObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanS64Compliance = cyanS64Compliance.setStatus('current')
if mibBuilder.loadTexts: cyanS64Compliance.setDescription('The basic info needed to be a cyan S64')
mibBuilder.exportSymbols("CYAN-S64-MIB", cyanS64OperState=cyanS64OperState, cyanS64Table=cyanS64Table, cyanS64Accepted=cyanS64Accepted, cyanS64Description=cyanS64Description, PYSNMP_MODULE_ID=cyanS64Module, cyanS64ShelfId=cyanS64ShelfId, cyanS64S64Id=cyanS64S64Id, cyanS64SecServState=cyanS64SecServState, cyanS64AdminState=cyanS64AdminState, cyanS64ObjectGroup=cyanS64ObjectGroup, cyanS64ModuleId=cyanS64ModuleId, cyanS64Compliance=cyanS64Compliance, cyanS64Module=cyanS64Module, cyanS64Entry=cyanS64Entry, cyanS64AutoinserviceSoakTimeSec=cyanS64AutoinserviceSoakTimeSec, cyanS64Monitorterminate=cyanS64Monitorterminate, cyanS64MibObjects=cyanS64MibObjects, cyanS64Expected=cyanS64Expected, cyanS64Inserted=cyanS64Inserted, cyanS64OperStateQual=cyanS64OperStateQual)
