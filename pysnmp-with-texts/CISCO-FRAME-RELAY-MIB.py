#
# PySNMP MIB module CISCO-FRAME-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FRAME-RELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
frCircuitDlci, frDlcmiEntry, frCircuitIfIndex, frCircuitEntry = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitDlci", "frDlcmiEntry", "frCircuitIfIndex", "frCircuitEntry")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, TimeTicks, Counter64, Unsigned32, IpAddress, Integer32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "TimeTicks", "Counter64", "Unsigned32", "IpAddress", "Integer32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Counter32", "Bits")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoFrameRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 49))
ciscoFrameRelayMIB.setRevisions(('2000-10-13 00:00', '2000-05-22 00:00', '2000-05-16 00:00', '2000-04-26 00:00', '1999-08-21 00:00', '1996-08-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFrameRelayMIB.setRevisionsDescriptions(('(1) Added objects of FR Switching, FR Fragmentation and FR/ATM Interworking. (2) Objects for per PVC I/O rate is added to cfrExtCircuitTable', '(1) Added ELMI subgroup for ELMI objects.', '(1) Added Traffic Shaping parameter objects to cfrExtCircuitTable. (2) Deprecated cfrSvcMinThruputOut and cfrSvcMinThruputIn. Added cfrExtCircuitMinThruputOut and cfrExtCircuitMinThruputIn in cfrExtCircuitTable inorder to make them applicable to both PVC/SVC. (3) Added cfrExtCircuitBandwidth object to cfrExtCircuitTable.', '(1) add an integer value for cfrMapPayloadCompressType; (2) reword the Description statements for { cfrMapPayloadCompressType, cfrExtCircuitUncompressIns, cfrExtCircuitUncompressOuts } so that they are not limited to software compression.', '(1) Added cfrExtCircuitUncompressOuts and cfrExtCircuitUncompressIns to the circuit subgroup; (2) Added cfrMapRtpHdrCompress and cfrMapPayloadCompressType to the mapping subgroup; (3) cfrMapPayloadCompress becomes deprecated, obsoleted by cfrMapPayloadCompressType; (4) frCircuitSentOctets and frCircuitReceivedOctets per RFC1315 will reflect the number of bytes in Frame Relay frames sent to and received from the physical layer. Same effect is applied to ifOutOctets and ifInOctets as well when ifIndex refers to a Frame Relay subinterface.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFrameRelayMIB.setLastUpdated('200010130000Z')
if mibBuilder.loadTexts: ciscoFrameRelayMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFrameRelayMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-framerelay@cisco.com')
if mibBuilder.loadTexts: ciscoFrameRelayMIB.setDescription('Cisco Frame Relay MIB')
ciscoFrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1))
cfrLmiObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1))
cfrCircuitObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2))
cfrMapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3))
cfrSvcObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4))
cfrElmiObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5))
cfrFragObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6))
cfrConnectionObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7))
class DlciNumber(TextualConvention, Integer32):
    description = "Numerical format of Data Link Connection Identifier (DLCI) in decimal, identical to the 'DLCI' as INTEGER of 0..DLCINumber in RFC1315. The maximum value depends on Frame Relay implementation, which is currently set to be 1023 for 2-octet address format per UNI Implementation Agreement FRF.1."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1023)

class CfrMapProtocols(TextualConvention, Integer32):
    description = 'Cisco link types (network protocols) that run over Frame Relay. Associated values, except for wildcard, match assigned values of internal software respectively.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 6, 7, 10, 11, 12, 13, 16, 18, 22, 25, 37, 38, 39, 40, 47, 48, 49, 53, 63, 74, 83, 999))
    namedValues = NamedValues(("arp", 1), ("serialArp", 6), ("ip", 7), ("xns", 10), ("novell", 11), ("apollo", 12), ("vines", 13), ("appletalk", 16), ("ieeeSpanning", 18), ("decnet", 22), ("clns", 25), ("rsrb", 37), ("bridge", 38), ("stun", 39), ("frArp", 40), ("uncompressedTcp", 47), ("compressedTcp", 48), ("llc2", 49), ("frSwitch", 53), ("dlsw", 63), ("nhrp", 74), ("compressedRtp", 83), ("wildcard", 999))

cfrLmiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1), )
if mibBuilder.loadTexts: cfrLmiTable.setReference('American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: cfrLmiTable.setStatus('current')
if mibBuilder.loadTexts: cfrLmiTable.setDescription("Table of Frame Relay LMI information that are either supplemental to the frDlcmiTable of RFC 1315 or specific to Cisco's implementation.")
cfrLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1), )
frDlcmiEntry.registerAugmentions(("CISCO-FRAME-RELAY-MIB", "cfrLmiEntry"))
cfrLmiEntry.setIndexNames(*frDlcmiEntry.getIndexNames())
if mibBuilder.loadTexts: cfrLmiEntry.setStatus('current')
if mibBuilder.loadTexts: cfrLmiEntry.setDescription('Each entry of the table contains information of Frame Relay LMI over one physical interface. They are mostly FR generic and some Cisco specific.')
cfrLmiLinkstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiLinkstatus.setStatus('current')
if mibBuilder.loadTexts: cfrLmiLinkstatus.setDescription('Data link status via LMI.')
cfrLmiLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nni", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiLinkType.setStatus('current')
if mibBuilder.loadTexts: cfrLmiLinkType.setDescription('Frame Relay link type.')
cfrLmiEnquiryIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 3), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiEnquiryIns.setStatus('current')
if mibBuilder.loadTexts: cfrLmiEnquiryIns.setDescription('Number of Status Enquiry messages received.')
cfrLmiEnquiryOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 4), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiEnquiryOuts.setStatus('current')
if mibBuilder.loadTexts: cfrLmiEnquiryOuts.setDescription('Number of Status Enquiry messages sent.')
cfrLmiStatusIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiStatusIns.setStatus('current')
if mibBuilder.loadTexts: cfrLmiStatusIns.setDescription('Number of Status messages received.')
cfrLmiStatusOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiStatusOuts.setStatus('current')
if mibBuilder.loadTexts: cfrLmiStatusOuts.setDescription('Number of Status messages sent.')
cfrLmiUpdateStatusIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiUpdateStatusIns.setStatus('current')
if mibBuilder.loadTexts: cfrLmiUpdateStatusIns.setDescription('Number of Update Status messages received.')
cfrLmiUpdateStatusOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiUpdateStatusOuts.setStatus('current')
if mibBuilder.loadTexts: cfrLmiUpdateStatusOuts.setDescription('Number of Update Status messages sent')
cfrLmiStatusTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 9), Counter32()).setUnits('times').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiStatusTimeouts.setStatus('current')
if mibBuilder.loadTexts: cfrLmiStatusTimeouts.setDescription('Number of times when timeout occurred on waiting for Status message')
cfrLmiStatusEnqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 10), Counter32()).setUnits('times').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiStatusEnqTimeouts.setStatus('current')
if mibBuilder.loadTexts: cfrLmiStatusEnqTimeouts.setDescription('Number of times when timeout occurred on waiting for Status Enquiry message')
cfrLmiN392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiN392Dce.setStatus('current')
if mibBuilder.loadTexts: cfrLmiN392Dce.setDescription('LMI error threshold for DCE interface. For DTE, value becomes 0.')
cfrLmiN393Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiN393Dce.setStatus('current')
if mibBuilder.loadTexts: cfrLmiN393Dce.setDescription('LMI monitored event count for DCE interface. For DTE, value becomes zero (0).')
cfrLmiT392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrLmiT392Dce.setStatus('current')
if mibBuilder.loadTexts: cfrLmiT392Dce.setDescription('DCE polling verification timer for DCE interface For DTE, the value becomes zero (0).')
cfrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1), )
if mibBuilder.loadTexts: cfrCircuitTable.setStatus('current')
if mibBuilder.loadTexts: cfrCircuitTable.setDescription('Table of descriptive and statistics information that are generic to Frame Relay virtual circuits.')
cfrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1), )
frCircuitEntry.registerAugmentions(("CISCO-FRAME-RELAY-MIB", "cfrCircuitEntry"))
cfrCircuitEntry.setIndexNames(*frCircuitEntry.getIndexNames())
if mibBuilder.loadTexts: cfrCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: cfrCircuitEntry.setDescription('Each entry of the table contains information of a circuit that are not included in frCircuitTable of RFC1315 but are generic to Frame Relay.')
cfrCircuitDEins = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrCircuitDEins.setStatus('current')
if mibBuilder.loadTexts: cfrCircuitDEins.setDescription('Number of packets received with the Discarded Eligibility indictor (the DE bit) set.')
cfrCircuitDEouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrCircuitDEouts.setStatus('current')
if mibBuilder.loadTexts: cfrCircuitDEouts.setDescription('Number of packets transmitted with DE bit set.')
cfrCircuitDropPktsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrCircuitDropPktsOuts.setStatus('current')
if mibBuilder.loadTexts: cfrCircuitDropPktsOuts.setDescription('Number of discarded packets that were to be sent.')
cfrCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrCircuitType.setStatus('current')
if mibBuilder.loadTexts: cfrCircuitType.setDescription('Basic circuit type')
cfrExtCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2), )
if mibBuilder.loadTexts: cfrExtCircuitTable.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitTable.setDescription('Table of Cisco implementation specific FR circuit information. This is a Cisco extension for the frCircuitTable of RFC 1315.')
cfrExtCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1), )
frCircuitEntry.registerAugmentions(("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitEntry"))
cfrExtCircuitEntry.setIndexNames(*frCircuitEntry.getIndexNames())
if mibBuilder.loadTexts: cfrExtCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitEntry.setDescription('Each entry of the table contains information of a Frame Relay virtual circuit that are specific to Cisco implementation.')
cfrExtCircuitIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitIfName.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitIfName.setDescription("The textual name of the main interface or the subinterface that this DLCI is associated with. This is the same name string of an interface used in the configuration and all console displays, such as 'serial 0', 'serial 3/0.3', etc.")
cfrExtCircuitIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mainInterface", 1), ("pointToPoint", 2), ("multipoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitIfType.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitIfType.setDescription('Type of the subinterface this DLCI is associated with, if configured.')
cfrExtCircuitSubifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitSubifIndex.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitSubifIndex.setDescription('For value greater than zero (0), it indicates the network management interface index for the subinterface associated with this DLCI. Value 0 means the DLCI is not associated with any subinterface.')
cfrExtCircuitMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitMapStatus.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitMapStatus.setDescription("The mapping protocols (internally considered as the 'link type') applied on this circuit. The value ranges from 0 to 2047. For point-to-point DLCI, the value stays zero. Otherwise, the value is a sum. It initially takes the value zero, then, for each type of Protocol, 2 raised to a power is added to the sum. The following table presents respective power and equivalent value for each applicable type: Protocol Power Value -------- ----- ----- IP 0 1 IPX 1 2 Appletalk 2 4 XNS 3 8 VINES 4 16 DECnet 5 32 CLNS 6 64 Bridging 7 128 RSRB 8 256 STUN 9 512 LLC2 10 1024 For example, value 3 means the circuit's mapping protocols include IP and IPX. (3 = 2**1 + 2**0, where 0 corresponds to IP and 1 to IPX.) Value 0 means there is currently no mapping protocol for the circuit. See cfrMapTable for more mapping information.")
cfrExtCircuitCreateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitCreateType.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitCreateType.setDescription("Identify the last source of the circuit's creation.")
cfrExtCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitMulticast.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitMulticast.setDescription('Indicate if this DLCI is a multicast DLCI.')
cfrExtCircuitRoutedDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 7), DlciNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitRoutedDlci.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitRoutedDlci.setDescription('The routed DLCI to pair up with this DLCI for switching function. NOTE: Value zero (0) indicates that there is no such routed DLCI corresponding to this DLCI.')
cfrExtCircuitRoutedIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitRoutedIf.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitRoutedIf.setDescription('The interface for the routed DLCI that pairs up with this DLCI for switching. Value greater than 0 is the InterfaceIndex for that interface. Value zero (0) indicates that there is no such routed DLCI corresponding to this DLCI.')
cfrExtCircuitUncompressIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 9), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitUncompressIns.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitUncompressIns.setDescription('Number of inbound octets of the data packets, accounted at Frame Relay level after FRF.9 payload decompression is applied. In the case of non-FRF.9, this value could be identical to frCircuitReceivedOctets, unless otherwise noted.')
cfrExtCircuitUncompressOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 10), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitUncompressOuts.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitUncompressOuts.setDescription('Number of outbound octets of the data packets, accounted at Frame Relay level before FRF.9 payload compression is applied. In the case of non-FRF.9, this value could be identical to frCircuitSentOctets, unless otherwise noted.')
cfrExtCircuitFECNOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitFECNOuts.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitFECNOuts.setDescription('Total number of frames sent out to the network indicating forward congestion.')
cfrExtCircuitBECNOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitBECNOuts.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitBECNOuts.setDescription('Total number of frames sent out to the network indicating backward congestion.')
cfrExtCircuitMinThruputOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitMinThruputOut.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitMinThruputOut.setDescription("Circuit's outgoing minimal Throughput based on configuration.")
cfrExtCircuitMinThruputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitMinThruputIn.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitMinThruputIn.setDescription("Circuit's incoming minimal Throughput based on configuration.")
cfrExtCircuitBcastPktOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitBcastPktOuts.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitBcastPktOuts.setDescription('Total number of broadcast packets sent out to the network.')
cfrExtCircuitBcastByteOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitBcastByteOuts.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitBcastByteOuts.setDescription('Total number of bytes sent out to the network in broadcast packets.')
cfrExtCircuitBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitBandwidth.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitBandwidth.setDescription('Bandwidth of the virtual circuit, acquired from Cisco typed LMI Full Status message.')
cfrExtCircuitShapeByteLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(125, 2147483647))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeByteLimit.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapeByteLimit.setDescription('Maximum number of tokens a token bucket can hold in any time interval in case of traffic shaping.')
cfrExtCircuitShapeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 125))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeInterval.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapeInterval.setDescription('Committed rate measurement interval.')
cfrExtCircuitShapeByteIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(125, 2147483647))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeByteIncrement.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapeByteIncrement.setDescription('Number of tokens added into the token bucket per time interval in case of traffic shaping.')
cfrExtCircuitShapePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapePkts.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapePkts.setDescription('Total number of packets that went through traffic shaping.')
cfrExtCircuitShapeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 22), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeBytes.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapeBytes.setDescription('Total number of bytes that went through traffic shaping.')
cfrExtCircuitShapePktsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapePktsDelay.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapePktsDelay.setDescription('Total number of packets that were delayed by the traffic shaper.')
cfrExtCircuitShapeBytesDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 24), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeBytesDelay.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapeBytesDelay.setDescription('Total number of bytes that were delayed by the traffic shaper.')
cfrExtCircuitShapeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeActive.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapeActive.setDescription('Shows whether shaping is active or not.')
cfrExtCircuitShapeAdapting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("becn", 2), ("foreSight", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitShapeAdapting.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitShapeAdapting.setDescription('Type of Adaptive Shaping configured. none(1) - No adaptive shaping configured becn(2) - Backward Explicit Congestion Notification foreSight(3) - ForeSight is the network traffic control software used in Cisco WAN switches')
cfrExtCircuitTxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitTxDataRate.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitTxDataRate.setDescription('The average rate (bytes/second) at which data is transmitted in this circuit. ')
cfrExtCircuitTxPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitTxPktRate.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitTxPktRate.setDescription('The average number of packets sent in a second in this circuit.')
cfrExtCircuitRcvDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitRcvDataRate.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitRcvDataRate.setDescription('The average rate (bytes/second) at which data is received in this circuit. ')
cfrExtCircuitRcvPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrExtCircuitRcvPktRate.setStatus('current')
if mibBuilder.loadTexts: cfrExtCircuitRcvPktRate.setDescription('The average number of packets received in a second in this circuit. ')
cfrMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1), )
if mibBuilder.loadTexts: cfrMapTable.setStatus('current')
if mibBuilder.loadTexts: cfrMapTable.setDescription('Table of protocols and addresses mapping information of FR virtual circuit.')
cfrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1), ).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"), (0, "CISCO-FRAME-RELAY-MIB", "cfrMapIndex"))
if mibBuilder.loadTexts: cfrMapEntry.setStatus('current')
if mibBuilder.loadTexts: cfrMapEntry.setDescription('Each entry of the table contains one mapping information of a Frame Relay virtual circuit.')
cfrMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapIndex.setStatus('current')
if mibBuilder.loadTexts: cfrMapIndex.setDescription('An arbitrary Index to the mapping information associated with a certain circuit. The maximum value is arbitrarily picked which is considered sufficient for usual configuration.')
cfrMapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 2), CfrMapProtocols()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapProtocol.setStatus('current')
if mibBuilder.loadTexts: cfrMapProtocol.setDescription('Mapping protocol for this circuit.')
cfrMapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapAddress.setStatus('current')
if mibBuilder.loadTexts: cfrMapAddress.setDescription('Mapping protocol address at remote end for this DLCI. NOTE: For point-to-point DLCI, the string is fixed to be point-to-point.')
cfrMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("svc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapType.setStatus('current')
if mibBuilder.loadTexts: cfrMapType.setDescription('Type for the map creation.')
cfrMapEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ietf", 1), ("cisco", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapEncaps.setStatus('current')
if mibBuilder.loadTexts: cfrMapEncaps.setDescription('Indication of the encapsulation type for this mapping protocol.')
cfrMapBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapBroadcast.setStatus('current')
if mibBuilder.loadTexts: cfrMapBroadcast.setDescription('Broadcast enabled or disabled.')
cfrMapPayloadCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapPayloadCompress.setStatus('deprecated')
if mibBuilder.loadTexts: cfrMapPayloadCompress.setDescription('Indicate if payload compression is enabled.')
cfrMapTcpHdrCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inapplicable", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapTcpHdrCompress.setStatus('current')
if mibBuilder.loadTexts: cfrMapTcpHdrCompress.setDescription('TCP header compression type, if applicable.')
cfrMapRtpHdrCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inapplicable", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapRtpHdrCompress.setStatus('current')
if mibBuilder.loadTexts: cfrMapRtpHdrCompress.setDescription("RTP header compression type, if applicable. The value 'passive' means that the header of an outgoing RTP/IP packet is compressed only if an incoming RTP/IP packet had a compressed header. The value 'active' means the header of every outgoing RTP/IP packet is compressed.")
cfrMapPayloadCompressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inapplicable", 1), ("cisco", 2), ("frf9Software", 3), ("frf9Hardware", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrMapPayloadCompressType.setReference('Frame Relay Forum document number FRF.9')
if mibBuilder.loadTexts: cfrMapPayloadCompressType.setStatus('current')
if mibBuilder.loadTexts: cfrMapPayloadCompressType.setDescription('FR payload compression type, if applicable. FRF.9 is the Frame Relay Forum Implementation Agreement on FR payload compression. The compression can be done by either software or hardware (when equipped with the supporting hardware), depending on configuration.')
cfrSvcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1), )
if mibBuilder.loadTexts: cfrSvcTable.setStatus('current')
if mibBuilder.loadTexts: cfrSvcTable.setDescription('Table of FR SVC specific, descriptive and statistics information.')
cfrSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1), ).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: cfrSvcEntry.setStatus('current')
if mibBuilder.loadTexts: cfrSvcEntry.setDescription('Each entry of the table contains circuit information specific to a Frame Relay Switched Virtual Circuit.')
cfrSvcAddrLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcAddrLocal.setStatus('current')
if mibBuilder.loadTexts: cfrSvcAddrLocal.setDescription('Local E.164/X.125 address for the circuit.')
cfrSvcAddrRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcAddrRemote.setStatus('current')
if mibBuilder.loadTexts: cfrSvcAddrRemote.setDescription('Remote E.164/X.125 address for the circuit.')
cfrSvcThroughputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcThroughputIn.setStatus('current')
if mibBuilder.loadTexts: cfrSvcThroughputIn.setDescription("Circuit's incoming throughput. For outgoing throughput (commonly referred to as CIR) see frCircuitThroughput per RFC1315.")
cfrSvcMinThruputOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcMinThruputOut.setStatus('deprecated')
if mibBuilder.loadTexts: cfrSvcMinThruputOut.setDescription("Circuit's outgoing minimal Throughput.")
cfrSvcMinThruputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcMinThruputIn.setStatus('deprecated')
if mibBuilder.loadTexts: cfrSvcMinThruputIn.setDescription("Circuit's incoming minimal Throughput.")
cfrSvcCommitBurstIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 1544000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcCommitBurstIn.setStatus('current')
if mibBuilder.loadTexts: cfrSvcCommitBurstIn.setDescription("Circuit's incoming Committed Burst Rate. See ANSI and/or ITU specifications for definition and calculations. For outgoing CBR, see frCircuitCommittedBurst per RFC 1315.")
cfrSvcExcessBurstIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9600, 2440000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcExcessBurstIn.setStatus('current')
if mibBuilder.loadTexts: cfrSvcExcessBurstIn.setDescription("Circuit's incoming Excess Burst Rate. See ANSI and/or ITU specifications for definition and calculations. For outgoing EBR, see frCircuitExcessBurst per RFC 1315.")
cfrSvcIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 4, 1, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrSvcIdleTime.setStatus('current')
if mibBuilder.loadTexts: cfrSvcIdleTime.setDescription("Circuit's idle time period. If expires, the circuit is cleared.")
cfrElmiIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiIpAddr.setStatus('current')
if mibBuilder.loadTexts: cfrElmiIpAddr.setDescription('This object represents the Management address of the device used for address registration. Network management station can send management messages to this IP address. This can be user configured address or the address of one of the interfaces on the device. If address registration is disabled then this will have a value of 0.0.0.0. This object is accessible only if the ELMI protocol is supported on the device')
cfrElmiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2), )
if mibBuilder.loadTexts: cfrElmiTable.setStatus('current')
if mibBuilder.loadTexts: cfrElmiTable.setDescription('Table of CISCO Frame Relay ELMI information that is specific to CISCO implementation')
cfrElmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfrElmiEntry.setStatus('current')
if mibBuilder.loadTexts: cfrElmiEntry.setDescription('Each entry of the table contains information about a physical interface. The table can be accessible only if the device supports ELMI protocol and if LMI is enabled on the interface.')
cfrElmiLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cfrElmiLinkStatus.setDescription('This variable states whether Enhanced Link Management Interface(ELMI) protocol is enabled or not on a frame relay interface.')
cfrElmiArStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiArStatus.setStatus('current')
if mibBuilder.loadTexts: cfrElmiArStatus.setDescription("This variable states whether the Enhanced Link Management Interface(ELMI) address registration(AR) mechanism is enabled or not on a frame relay interface. A value of 1 indicates ELMI AR is supported on the interface. A value of 2 indicates ELMI AR is supported but the user disabled the exchange of IP address and ifIndex with the neighboring device. This object doesn't have any significance if cfrElmiLinkStatus is disabled on the interface.")
cfrElmiRemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiRemoteStatus.setStatus('current')
if mibBuilder.loadTexts: cfrElmiRemoteStatus.setDescription("This variable states the Enhanced Link Management(ELMI) status on the other end of the interface. If cfrElmiLinkStatus is enabled on the other end a value of 1 will be returned, else 2 will be returned. This object doesn't have any significance if cfrElmiLinkStatus is disabled on the interface")
cfrElmiNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3), )
if mibBuilder.loadTexts: cfrElmiNeighborTable.setStatus('current')
if mibBuilder.loadTexts: cfrElmiNeighborTable.setDescription('Table of CISCO Frame Relay Neighbor ELMI information that is specific to CISCO implementation.')
cfrElmiNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfrElmiNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: cfrElmiNeighborEntry.setDescription('Each entry of the table contains information of the neighboring device connected to a physical interface. The entry will be present only if ELMI is enabled on the neighboring device interface. If the value of the cfrElmiRemoteStatus in the cfrElmiEntry is 1 then a valid entry exists for the interface. If ELMI is not supported on the remote end then, the neighbor information for the interface will not be present')
cfrElmiNeighborArStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notsupported", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborArStatus.setStatus('current')
if mibBuilder.loadTexts: cfrElmiNeighborArStatus.setDescription('This variable indicates the status of ELMI Address registration(AR) on the neighboring device. A value of 1 indicates ELMI AR is not supported on the neighboring device. A value of 2 indicates ELMI AR is enabled on the interface. A value of 3 indicates AR is supported, but user disabled the exchange of IP address and ifIndex with the neighbor.')
cfrElmiNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborIpAddress.setStatus('current')
if mibBuilder.loadTexts: cfrElmiNeighborIpAddress.setDescription('The Management IP address of the neighboring device to which the other end of this interface is connected. Network management system can use this address to send management messages to the device. If address registration is not supported on the remote end then the value will be 0.0.0.0. NMS uses this object in the topology discovery of the network.')
cfrElmiNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: cfrElmiNeighborIfIndex.setDescription('The Interface index of the neighboring device to which this interface is connected. If the value of cfrElmiNeighborArStatus is 2 then this will have a valid value. If the value of cfrElmiNeighborArStatus is 3 or 1 then value of this object will be 0. NMS uses this object in the topology discovery of the network.')
cfrElmiNeighborVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborVendorName.setStatus('current')
if mibBuilder.loadTexts: cfrElmiNeighborVendorName.setDescription('Vendor name of the neighboring device to which the other end of this interface is connected.')
cfrElmiNeighborPlatformName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborPlatformName.setStatus('current')
if mibBuilder.loadTexts: cfrElmiNeighborPlatformName.setDescription('Platform name of the neighboring device to which the other end of this interface is connected.')
cfrElmiNeighborDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrElmiNeighborDeviceName.setStatus('current')
if mibBuilder.loadTexts: cfrElmiNeighborDeviceName.setDescription('Device name of the neighboring device to which the other end of this interface is connected.')
cfrFragTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1), )
if mibBuilder.loadTexts: cfrFragTable.setStatus('current')
if mibBuilder.loadTexts: cfrFragTable.setDescription("Table of Frame Relay Fragmentation information. These are specific to Cisco's implementation.")
cfrFragEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1), ).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: cfrFragEntry.setStatus('current')
if mibBuilder.loadTexts: cfrFragEntry.setDescription('Each entry of the table contains details of fragmentation configured on this circuit. ')
cfrFragSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1600))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragSize.setStatus('current')
if mibBuilder.loadTexts: cfrFragSize.setDescription('cfrFragSize defines the payload size of a fragment and it excludes the FR headers and any FR fragmentation header.')
cfrFragType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragType.setStatus('current')
if mibBuilder.loadTexts: cfrFragType.setDescription('Fragmentation type configured by the user. The types supported are end-to-end, VoFR-cisco and VoFR.')
cfrFragInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragInPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragInPkts.setDescription('Total number of frames received that have a fragmentation header.')
cfrFragOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragOutPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragOutPkts.setDescription('Total number of fragments that are transmitted with a fragmenation header.')
cfrFragInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragInOctets.setStatus('current')
if mibBuilder.loadTexts: cfrFragInOctets.setDescription('Total number of bytes received in frames that have a fragmentation header. The number of bytes include the FR header.')
cfrFragOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 6), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragOutOctets.setStatus('current')
if mibBuilder.loadTexts: cfrFragOutOctets.setDescription('Total number of bytes that are transmitted in frames with a fragmenation header. The number of bytes also includes the FR header.')
cfrFragNotInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragNotInPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragNotInPkts.setDescription('Total number of frames received that do not require reassembly and therefore will not contain the fragmentation header. This counter is valid only when end-to-end fragmentation type is set.')
cfrFragNotOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragNotOutPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragNotOutPkts.setDescription('Total number of frames transmitted without fragmenting and therefore will not contain the fragmentation header. This counter is valid only when end-to-end fragmentation type is set.')
cfrFragNotInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 9), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragNotInOctets.setStatus('current')
if mibBuilder.loadTexts: cfrFragNotInOctets.setDescription('Total number of bytes received in frames that do not require reassembly and therefore will not contain the fragmentation header. This counter is valid only when end-to-end fragmentation type is set.')
cfrFragNotOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 10), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragNotOutOctets.setStatus('current')
if mibBuilder.loadTexts: cfrFragNotOutOctets.setDescription('Total number of bytes transmitted in frames that are not fragmented and therefore will not contain the fragmentation header. This counter is valid only when end-to-end fragmentation type is set.')
cfrFragAssembledInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragAssembledInPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragAssembledInPkts.setDescription('Total number of fully reassembled frames. It also counts the number of packets received without FR fragmentation header (i.e. in un-fragmentated pkts).')
cfrFragAssembledInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 12), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragAssembledInOctets.setStatus('current')
if mibBuilder.loadTexts: cfrFragAssembledInOctets.setDescription('Total number of bytes received in fully reassembled frames. It also counts the number of packets received without FR fragmentation header (i.e.in un-fragmentated pkts).')
cfrFragPreOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragPreOutPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragPreOutPkts.setDescription('Total number of frames fragmented and trasmitted. It also counts the number of packets trasmitted without FR fragmentation header (i.e. in un-fragmentated pkts).')
cfrFragPreOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 14), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragPreOutOctets.setStatus('current')
if mibBuilder.loadTexts: cfrFragPreOutOctets.setDescription('Total number of bytes transmitted in fragmented frames. It also counts the number of bytes trasmitted in frames without FR fragmentation header (i.e. in un-fragmentated pkts).')
cfrFragDroppedReAssembledInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragDroppedReAssembledInPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragDroppedReAssembledInPkts.setDescription('Number of received fragments dropped for reasons such as : running out of memory, receiving segments out of sequence, receiving an unexpected frame with a B bit set, timing out on a reassembling frame.')
cfrFragDroppedFragmentedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragDroppedFragmentedOutPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragDroppedFragmentedOutPkts.setDescription('Number of fragments dropped because of running out of memory.')
cfrFragTimeoutsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragTimeoutsIn.setStatus('current')
if mibBuilder.loadTexts: cfrFragTimeoutsIn.setDescription('Number of reassemble timer timeouts for this circuit. A frame requiring more than two minutes to fully reassemble is dropped and timeout will be incremented by one.')
cfrFragOutOfSeqFragPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragOutOfSeqFragPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragOutOfSeqFragPkts.setDescription('Indicates the total number of packets received with an unexpected sequence number. All fragments being reassembled are dropped. Start a new packet with the received segment only if the B bit is set on the segment. Otherwise the new segment is also dropped.')
cfrFragUnexpectedBBitSetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragUnexpectedBBitSetPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragUnexpectedBBitSetPkts.setDescription('Number of fragments received in this circuit with a B bit set. All fragments being reassembled are dropped and a new packet is started with this segment.')
cfrFragSeqMissedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragSeqMissedPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragSeqMissedPkts.setDescription('Number of fragments received in this circuit with skipped sequence number.')
cfrFragInterleavedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 6, 1, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrFragInterleavedOutPkts.setStatus('current')
if mibBuilder.loadTexts: cfrFragInterleavedOutPkts.setDescription('Number of packets that have been interleaved between segments.')
cfrConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1), )
if mibBuilder.loadTexts: cfrConnectionTable.setStatus('current')
if mibBuilder.loadTexts: cfrConnectionTable.setDescription("Table of Frame Relay/Frame Relay and Frame Relay/ATM Network/Service Interworking connection information. These are specific to Cisco's implementation.")
cfrConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1), ).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: cfrConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: cfrConnectionEntry.setDescription('Each entry of the table contains information of a connection that is established for Frame Relay/Frame Relay and Frame Relay/ATM Network/Service Interworking.')
cfrConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnName.setStatus('current')
if mibBuilder.loadTexts: cfrConnName.setDescription('The textual name of a for FR/FR or FR/ATM Network/Service Interworking connection.')
cfrConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnID.setStatus('current')
if mibBuilder.loadTexts: cfrConnID.setDescription('The numerical identifier of a FR/FR or FR/ATM Network/Service Interworking connection.')
cfrConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnState.setStatus('current')
if mibBuilder.loadTexts: cfrConnState.setDescription('Status of a FR/FR or FR/ATM Network/Service Interworking connection.')
cfrConnSegment1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment1Name.setStatus('current')
if mibBuilder.loadTexts: cfrConnSegment1Name.setDescription('The textual name used to identify the first segment of a FR/FR or FR/ATM Network/Service Interworking connection.')
cfrConnSegment1VCGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment1VCGroup.setStatus('current')
if mibBuilder.loadTexts: cfrConnSegment1VCGroup.setDescription('The textual name used to identify the VC-Group in the first segment of a Frame Relay/ATM Network Interworking (FRF.5)connection. This field is not applicabe in case of, FRF.8 (Frame Relay/ATM Service Interworking) and FR-FR connectione. ')
cfrConnSegment1Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 6), DlciNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment1Dlci.setStatus('current')
if mibBuilder.loadTexts: cfrConnSegment1Dlci.setDescription('The DLCI used as the first segment of a FR-FR or FR-ATM Network/Service Interworking connection.')
cfrConnSegment2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment2Name.setStatus('current')
if mibBuilder.loadTexts: cfrConnSegment2Name.setDescription('The interface on which second segment of a FR-FR or FR-ATM Network/Service Interworking connection is configured.')
cfrConnSegment2Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment2Vpi.setStatus('current')
if mibBuilder.loadTexts: cfrConnSegment2Vpi.setDescription('The value of VPI, in the ATM connection, used as the second segment of a FR-ATM Network/Service Interworking connection. In case of FR-FR connection, the same will be used to display the DLCI used as the second segment.')
cfrConnSegment2Vci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnSegment2Vci.setStatus('current')
if mibBuilder.loadTexts: cfrConnSegment2Vci.setDescription('The value of VCI, in the ATM connection, used as the second segment of a FR-ATM Network/Service Interworking connection. In case of FR-FR connection, this is not supported.')
cfrConnServiceTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serviceTranslationEnabled", 1), ("serviceTranslationNotEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnServiceTranslation.setStatus('current')
if mibBuilder.loadTexts: cfrConnServiceTranslation.setDescription('Shows whether Service Translation Mode is supported or not. Translation Mode is the interworking of internetworking (routed and/or bridged) protocols used in FR-ATM Service PVC Interworking(FRF.8). This is not supported in case of FRF.5 (FR-ATM network Interworking) and FR-FR connections.')
cfrConnFrSscsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 11), DlciNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnFrSscsDlci.setStatus('current')
if mibBuilder.loadTexts: cfrConnFrSscsDlci.setDescription('The DLCI value used at the FR-SSCS layer. This is one of connection multiplexing methods used in Frame Relay/ATM Network Interworking. Not supported in case of FRF.8 (FR-ATM Service PVC Interworking) and FR-FR connections')
cfrConnEfciBit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mapFecn", 1), ("notMapFecn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnEfciBit.setStatus('current')
if mibBuilder.loadTexts: cfrConnEfciBit.setDescription('Shows whether the FECN field in the FR frame is mapped to the ATM EFCI field of every cell generated out of the FR frame. This is used to indicate congestion in FR to ATM direction in case of Frame Relay/ATM Service PVC Interworking. Not supported in FRF.5 (Frame Relay/ATM Network Interworking and FR-FR connections.')
cfrConnDeBit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noMapClp", 1), ("mapClp", 2), ("setDe0", 3), ("setDe1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnDeBit.setStatus('current')
if mibBuilder.loadTexts: cfrConnDeBit.setDescription('The method of operation for loss priority mapping in the B-ISDN to FR direction.. Not supported in case of FR-FR connection.')
cfrConnClpBit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 49, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("setClpTo0AndCopyDeToFrsscsDe", 1), ("setClpTo1AndCopyDeToFrsscsDe", 2), ("copyDeToFrsscsDeAndClp", 3), ("copyDeToClp", 4), ("setClp1", 5), ("setClp0", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfrConnClpBit.setStatus('current')
if mibBuilder.loadTexts: cfrConnClpBit.setDescription('The method of operation used to map loss priority mapping in the FR to ATM direction. Not supported in case of FR-FR connection.')
ciscoFrMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 3))
ciscoFrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1))
ciscoFrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2))
ciscoFrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 1)).setObjects(("CISCO-FRAME-RELAY-MIB", "ciscoFrMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrMIBCompliance = ciscoFrMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoFrMIBCompliance.setDescription('The compliance statement for entities which implement this Cisco Frame Relay MIB.')
ciscoFrMIBCompliancesRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 2)).setObjects(("CISCO-FRAME-RELAY-MIB", "ciscoFrMIBGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrMIBCompliancesRev1 = ciscoFrMIBCompliancesRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoFrMIBCompliancesRev1.setDescription('The compliance statement for entities which implement this Cisco Frame Relay MIB.')
ciscoFrMIBCompliancesRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 3)).setObjects(("CISCO-FRAME-RELAY-MIB", "ciscoFrLmiMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrCircuitMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoExtCircuitMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrTsMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrMapMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrSvcMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrMIBCompliancesRev2 = ciscoFrMIBCompliancesRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoFrMIBCompliancesRev2.setDescription('The compliance statement for entities which implement this Cisco Frame Relay MIB.')
ciscoFrMIBCompliancesRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 4)).setObjects(("CISCO-FRAME-RELAY-MIB", "ciscoFrLmiMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrCircuitMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoExtCircuitMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrTsMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrMapMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrSvcMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrElmiMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrMIBCompliancesRev3 = ciscoFrMIBCompliancesRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoFrMIBCompliancesRev3.setDescription('The compliance statement for entities which implement this Cisco Frame Relay MIB.')
ciscoFrMIBCompliancesRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 1, 5)).setObjects(("CISCO-FRAME-RELAY-MIB", "ciscoFrLmiMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrCircuitMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoExtCircuitMIBGroup1"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrTsMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrMapMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrSvcMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrElmiMIBGroup1"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrFragMIBGroup"), ("CISCO-FRAME-RELAY-MIB", "ciscoFrConnMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrMIBCompliancesRev4 = ciscoFrMIBCompliancesRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoFrMIBCompliancesRev4.setDescription('The compliance statement for entities which implement this Cisco Frame Relay MIB.')
ciscoFrMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 1)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkstatus"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkType"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusEnqTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN393Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiT392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEins"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEouts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDropPktsOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfName"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitSubifIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMapStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitCreateType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMulticast"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedIf"), ("CISCO-FRAME-RELAY-MIB", "cfrMapIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrMapProtocol"), ("CISCO-FRAME-RELAY-MIB", "cfrMapAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapEncaps"), ("CISCO-FRAME-RELAY-MIB", "cfrMapBroadcast"), ("CISCO-FRAME-RELAY-MIB", "cfrMapPayloadCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapTcpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrLocal"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrRemote"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcThroughputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcMinThruputOut"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcMinThruputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcCommitBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcExcessBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcIdleTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrMIBGroup = ciscoFrMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoFrMIBGroup.setDescription('The compliance statement for entities which implement this Cisco Frame Relay MIB.')
ciscoFrMIBGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 2)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkstatus"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkType"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusEnqTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN393Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiT392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEins"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEouts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDropPktsOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfName"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitSubifIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMapStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitCreateType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMulticast"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedIf"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrMapIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrMapProtocol"), ("CISCO-FRAME-RELAY-MIB", "cfrMapAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapEncaps"), ("CISCO-FRAME-RELAY-MIB", "cfrMapBroadcast"), ("CISCO-FRAME-RELAY-MIB", "cfrMapTcpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapRtpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapPayloadCompressType"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrLocal"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrRemote"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcThroughputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcMinThruputOut"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcMinThruputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcCommitBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcExcessBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcIdleTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrMIBGroupRev1 = ciscoFrMIBGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoFrMIBGroupRev1.setDescription("A collection of objects providing router's Frame Relay configuration and statistics information that are additional to the IETF standard Frame Relay DTE MIB.")
ciscoFrLmiMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 3)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkstatus"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiLinkType"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiEnquiryOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusIns"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiUpdateStatusOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiStatusEnqTimeouts"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN392Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiN393Dce"), ("CISCO-FRAME-RELAY-MIB", "cfrLmiT392Dce"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrLmiMIBGroup = ciscoFrLmiMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFrLmiMIBGroup.setDescription("A collection of objects providing router's Frame Relay LMI configuration and statistics information either supplemental to the frDlcmiTable of RFC 1315 or specific to Cisco's implementation.")
ciscoFrCircuitMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 4)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEins"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDEouts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitDropPktsOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrCircuitType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrCircuitMIBGroup = ciscoFrCircuitMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFrCircuitMIBGroup.setDescription('A collection of objects providing information of a circuit that are not included in frCircuitTable of RFC1315 but are generic to Frame Relay.')
ciscoExtCircuitMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 5)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfName"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitSubifIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMapStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitCreateType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMulticast"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedIf"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitFECNOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBECNOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMinThruputOut"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMinThruputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBcastPktOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBcastByteOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtCircuitMIBGroup = ciscoExtCircuitMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoExtCircuitMIBGroup.setDescription('A collection of objects that provide Cisco implementation specific FR circuit information. This is a Cisco extension for the frCircuitTable of RFC 1315.')
ciscoExtCircuitMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 13)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfName"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitIfType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitSubifIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMapStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitCreateType"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMulticast"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRoutedIf"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressIns"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitUncompressOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitFECNOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBECNOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMinThruputOut"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitMinThruputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBcastPktOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBcastByteOuts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitBandwidth"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitTxDataRate"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitTxPktRate"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRcvDataRate"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitRcvPktRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoExtCircuitMIBGroup1 = ciscoExtCircuitMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoExtCircuitMIBGroup1.setDescription('A collection of objects that provide Cisco implementation specific FR circuit information. This is a Cisco extension for the frCircuitTable of RFC 1315.')
ciscoFrTsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 6)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeByteLimit"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeInterval"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeByteIncrement"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapePkts"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeBytes"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapePktsDelay"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeBytesDelay"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeActive"), ("CISCO-FRAME-RELAY-MIB", "cfrExtCircuitShapeAdapting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrTsMIBGroup = ciscoFrTsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFrTsMIBGroup.setDescription('A collection of objects that provide information about Frame Relay Traffic Shaping. These are additional to the IETF standard Frame Relay DTE MIB.')
ciscoFrMapMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 7)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrMapIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrMapProtocol"), ("CISCO-FRAME-RELAY-MIB", "cfrMapAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapType"), ("CISCO-FRAME-RELAY-MIB", "cfrMapEncaps"), ("CISCO-FRAME-RELAY-MIB", "cfrMapBroadcast"), ("CISCO-FRAME-RELAY-MIB", "cfrMapTcpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapRtpHdrCompress"), ("CISCO-FRAME-RELAY-MIB", "cfrMapPayloadCompressType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrMapMIBGroup = ciscoFrMapMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFrMapMIBGroup.setDescription('A collection of objects to provide mapping information of a Frame Relay virtual circuit. These are additional to the IETF standard Frame Relay DTE MIB.')
ciscoFrSvcMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 8)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrLocal"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcAddrRemote"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcThroughputIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcCommitBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcExcessBurstIn"), ("CISCO-FRAME-RELAY-MIB", "cfrSvcIdleTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrSvcMIBGroup = ciscoFrSvcMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFrSvcMIBGroup.setDescription('A collection of objects to provide circuit information specific to a Frame Relay Switched Virtual Circuit.This is in addition to the IETF standard Frame Relay DTE MIB.')
ciscoFrElmiMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 9)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrElmiIpAddr"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiArStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiRemoteStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborArStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborIpAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborIfIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborVendorName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborPlatformName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborDeviceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrElmiMIBGroup = ciscoFrElmiMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoFrElmiMIBGroup.setDescription("A collection of objects providing router's ELMI information.")
ciscoFrElmiMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 10)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrElmiIpAddr"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiArStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiRemoteStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborArStatus"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborIpAddress"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborIfIndex"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborVendorName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborPlatformName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiNeighborDeviceName"), ("CISCO-FRAME-RELAY-MIB", "cfrElmiLinkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrElmiMIBGroup1 = ciscoFrElmiMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoFrElmiMIBGroup1.setDescription("A collection of objects providing router's ELMI information.")
ciscoFrFragMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 11)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrFragSize"), ("CISCO-FRAME-RELAY-MIB", "cfrFragType"), ("CISCO-FRAME-RELAY-MIB", "cfrFragInPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragInOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragOutOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragNotInPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragNotOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragNotInOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragNotOutOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragAssembledInPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragAssembledInOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragPreOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragPreOutOctets"), ("CISCO-FRAME-RELAY-MIB", "cfrFragDroppedReAssembledInPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragDroppedFragmentedOutPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragTimeoutsIn"), ("CISCO-FRAME-RELAY-MIB", "cfrFragOutOfSeqFragPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragUnexpectedBBitSetPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragSeqMissedPkts"), ("CISCO-FRAME-RELAY-MIB", "cfrFragInterleavedOutPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrFragMIBGroup = ciscoFrFragMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFrFragMIBGroup.setDescription("A collection of objects providing router's fragmentation information.")
ciscoFrConnMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 49, 3, 2, 12)).setObjects(("CISCO-FRAME-RELAY-MIB", "cfrConnName"), ("CISCO-FRAME-RELAY-MIB", "cfrConnID"), ("CISCO-FRAME-RELAY-MIB", "cfrConnState"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment1Name"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment1VCGroup"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment1Dlci"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment2Name"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment2Vpi"), ("CISCO-FRAME-RELAY-MIB", "cfrConnSegment2Vci"), ("CISCO-FRAME-RELAY-MIB", "cfrConnServiceTranslation"), ("CISCO-FRAME-RELAY-MIB", "cfrConnFrSscsDlci"), ("CISCO-FRAME-RELAY-MIB", "cfrConnEfciBit"), ("CISCO-FRAME-RELAY-MIB", "cfrConnDeBit"), ("CISCO-FRAME-RELAY-MIB", "cfrConnClpBit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFrConnMIBGroup = ciscoFrConnMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFrConnMIBGroup.setDescription("A collection of objects providing router's fragmentation information.")
mibBuilder.exportSymbols("CISCO-FRAME-RELAY-MIB", cfrElmiLinkStatus=cfrElmiLinkStatus, ciscoFrTsMIBGroup=ciscoFrTsMIBGroup, ciscoFrElmiMIBGroup=ciscoFrElmiMIBGroup, cfrExtCircuitFECNOuts=cfrExtCircuitFECNOuts, cfrFragOutOfSeqFragPkts=cfrFragOutOfSeqFragPkts, cfrFragOutPkts=cfrFragOutPkts, cfrFragInPkts=cfrFragInPkts, cfrExtCircuitShapeActive=cfrExtCircuitShapeActive, cfrFragAssembledInOctets=cfrFragAssembledInOctets, cfrExtCircuitShapeInterval=cfrExtCircuitShapeInterval, cfrCircuitDropPktsOuts=cfrCircuitDropPktsOuts, cfrSvcObjs=cfrSvcObjs, ciscoFrMIBConformance=ciscoFrMIBConformance, cfrConnSegment1Dlci=cfrConnSegment1Dlci, cfrSvcEntry=cfrSvcEntry, ciscoFrMIBCompliancesRev4=ciscoFrMIBCompliancesRev4, cfrFragUnexpectedBBitSetPkts=cfrFragUnexpectedBBitSetPkts, PYSNMP_MODULE_ID=ciscoFrameRelayMIB, cfrConnServiceTranslation=cfrConnServiceTranslation, cfrCircuitDEins=cfrCircuitDEins, cfrExtCircuitIfName=cfrExtCircuitIfName, cfrFragDroppedFragmentedOutPkts=cfrFragDroppedFragmentedOutPkts, cfrExtCircuitTxPktRate=cfrExtCircuitTxPktRate, cfrExtCircuitRoutedIf=cfrExtCircuitRoutedIf, ciscoFrFragMIBGroup=ciscoFrFragMIBGroup, cfrLmiUpdateStatusIns=cfrLmiUpdateStatusIns, cfrFragDroppedReAssembledInPkts=cfrFragDroppedReAssembledInPkts, cfrSvcIdleTime=cfrSvcIdleTime, cfrElmiIpAddr=cfrElmiIpAddr, cfrFragEntry=cfrFragEntry, cfrLmiEnquiryIns=cfrLmiEnquiryIns, cfrExtCircuitBECNOuts=cfrExtCircuitBECNOuts, cfrExtCircuitIfType=cfrExtCircuitIfType, cfrFragTable=cfrFragTable, cfrConnSegment1VCGroup=cfrConnSegment1VCGroup, cfrSvcAddrRemote=cfrSvcAddrRemote, cfrMapPayloadCompressType=cfrMapPayloadCompressType, cfrFragNotInPkts=cfrFragNotInPkts, cfrFragPreOutOctets=cfrFragPreOutOctets, cfrMapPayloadCompress=cfrMapPayloadCompress, cfrConnSegment2Vci=cfrConnSegment2Vci, cfrExtCircuitEntry=cfrExtCircuitEntry, cfrConnName=cfrConnName, cfrLmiUpdateStatusOuts=cfrLmiUpdateStatusOuts, cfrMapTcpHdrCompress=cfrMapTcpHdrCompress, ciscoFrMIBCompliancesRev2=ciscoFrMIBCompliancesRev2, cfrFragPreOutPkts=cfrFragPreOutPkts, cfrExtCircuitBcastByteOuts=cfrExtCircuitBcastByteOuts, cfrExtCircuitUncompressIns=cfrExtCircuitUncompressIns, cfrElmiNeighborArStatus=cfrElmiNeighborArStatus, cfrExtCircuitRoutedDlci=cfrExtCircuitRoutedDlci, cfrConnEfciBit=cfrConnEfciBit, cfrMapTable=cfrMapTable, ciscoFrMIBCompliances=ciscoFrMIBCompliances, cfrLmiEnquiryOuts=cfrLmiEnquiryOuts, cfrConnSegment2Name=cfrConnSegment2Name, ciscoFrameRelayMIB=ciscoFrameRelayMIB, cfrExtCircuitUncompressOuts=cfrExtCircuitUncompressOuts, cfrElmiArStatus=cfrElmiArStatus, cfrElmiNeighborIpAddress=cfrElmiNeighborIpAddress, cfrFragNotInOctets=cfrFragNotInOctets, DlciNumber=DlciNumber, cfrMapEncaps=cfrMapEncaps, cfrCircuitObjs=cfrCircuitObjs, cfrConnState=cfrConnState, cfrElmiNeighborIfIndex=cfrElmiNeighborIfIndex, ciscoFrMapMIBGroup=ciscoFrMapMIBGroup, cfrSvcMinThruputIn=cfrSvcMinThruputIn, cfrLmiLinkType=cfrLmiLinkType, cfrElmiTable=cfrElmiTable, cfrExtCircuitTxDataRate=cfrExtCircuitTxDataRate, cfrFragTimeoutsIn=cfrFragTimeoutsIn, cfrMapType=cfrMapType, cfrExtCircuitBcastPktOuts=cfrExtCircuitBcastPktOuts, cfrElmiNeighborTable=cfrElmiNeighborTable, cfrMapIndex=cfrMapIndex, cfrFragType=cfrFragType, cfrMapEntry=cfrMapEntry, cfrConnectionObjs=cfrConnectionObjs, cfrLmiN392Dce=cfrLmiN392Dce, cfrConnID=cfrConnID, ciscoFrSvcMIBGroup=ciscoFrSvcMIBGroup, cfrConnectionEntry=cfrConnectionEntry, cfrLmiTable=cfrLmiTable, cfrSvcAddrLocal=cfrSvcAddrLocal, cfrExtCircuitMinThruputOut=cfrExtCircuitMinThruputOut, cfrMapProtocol=cfrMapProtocol, cfrElmiNeighborPlatformName=cfrElmiNeighborPlatformName, cfrLmiObjs=cfrLmiObjs, cfrCircuitTable=cfrCircuitTable, ciscoFrMIBCompliancesRev1=ciscoFrMIBCompliancesRev1, cfrMapRtpHdrCompress=cfrMapRtpHdrCompress, cfrExtCircuitBandwidth=cfrExtCircuitBandwidth, cfrLmiStatusEnqTimeouts=cfrLmiStatusEnqTimeouts, cfrLmiEntry=cfrLmiEntry, cfrExtCircuitShapeAdapting=cfrExtCircuitShapeAdapting, cfrConnSegment1Name=cfrConnSegment1Name, cfrElmiNeighborVendorName=cfrElmiNeighborVendorName, cfrExtCircuitShapePktsDelay=cfrExtCircuitShapePktsDelay, cfrLmiT392Dce=cfrLmiT392Dce, cfrConnDeBit=cfrConnDeBit, cfrElmiRemoteStatus=cfrElmiRemoteStatus, cfrConnClpBit=cfrConnClpBit, ciscoFrMIBCompliancesRev3=ciscoFrMIBCompliancesRev3, ciscoFrMIBGroup=ciscoFrMIBGroup, cfrLmiStatusOuts=cfrLmiStatusOuts, ciscoExtCircuitMIBGroup1=ciscoExtCircuitMIBGroup1, cfrConnSegment2Vpi=cfrConnSegment2Vpi, cfrExtCircuitShapeByteIncrement=cfrExtCircuitShapeByteIncrement, ciscoFrMIBObjects=ciscoFrMIBObjects, cfrLmiN393Dce=cfrLmiN393Dce, cfrSvcMinThruputOut=cfrSvcMinThruputOut, cfrCircuitDEouts=cfrCircuitDEouts, cfrExtCircuitRcvDataRate=cfrExtCircuitRcvDataRate, cfrSvcTable=cfrSvcTable, ciscoFrCircuitMIBGroup=ciscoFrCircuitMIBGroup, cfrExtCircuitTable=cfrExtCircuitTable, ciscoFrLmiMIBGroup=ciscoFrLmiMIBGroup, cfrLmiLinkstatus=cfrLmiLinkstatus, cfrMapBroadcast=cfrMapBroadcast, cfrFragObjs=cfrFragObjs, cfrElmiEntry=cfrElmiEntry, ciscoFrMIBGroupRev1=ciscoFrMIBGroupRev1, cfrMapObjs=cfrMapObjs, cfrConnFrSscsDlci=cfrConnFrSscsDlci, cfrExtCircuitMapStatus=cfrExtCircuitMapStatus, cfrConnectionTable=cfrConnectionTable, cfrFragOutOctets=cfrFragOutOctets, ciscoFrElmiMIBGroup1=ciscoFrElmiMIBGroup1, cfrFragSeqMissedPkts=cfrFragSeqMissedPkts, cfrElmiNeighborDeviceName=cfrElmiNeighborDeviceName, cfrFragInterleavedOutPkts=cfrFragInterleavedOutPkts, ciscoFrConnMIBGroup=ciscoFrConnMIBGroup, cfrSvcExcessBurstIn=cfrSvcExcessBurstIn, cfrCircuitEntry=cfrCircuitEntry, cfrFragNotOutOctets=cfrFragNotOutOctets, ciscoFrMIBCompliance=ciscoFrMIBCompliance, cfrExtCircuitShapePkts=cfrExtCircuitShapePkts, cfrSvcThroughputIn=cfrSvcThroughputIn, cfrCircuitType=cfrCircuitType, cfrExtCircuitMulticast=cfrExtCircuitMulticast, cfrExtCircuitRcvPktRate=cfrExtCircuitRcvPktRate, cfrSvcCommitBurstIn=cfrSvcCommitBurstIn, cfrElmiNeighborEntry=cfrElmiNeighborEntry, cfrFragAssembledInPkts=cfrFragAssembledInPkts, cfrExtCircuitShapeByteLimit=cfrExtCircuitShapeByteLimit, cfrFragSize=cfrFragSize, cfrElmiObjs=cfrElmiObjs, cfrMapAddress=cfrMapAddress, cfrLmiStatusIns=cfrLmiStatusIns, cfrFragInOctets=cfrFragInOctets, cfrExtCircuitShapeBytes=cfrExtCircuitShapeBytes, cfrFragNotOutPkts=cfrFragNotOutPkts, CfrMapProtocols=CfrMapProtocols, ciscoExtCircuitMIBGroup=ciscoExtCircuitMIBGroup, cfrLmiStatusTimeouts=cfrLmiStatusTimeouts, cfrExtCircuitShapeBytesDelay=cfrExtCircuitShapeBytesDelay, cfrExtCircuitMinThruputIn=cfrExtCircuitMinThruputIn, cfrExtCircuitCreateType=cfrExtCircuitCreateType, ciscoFrMIBGroups=ciscoFrMIBGroups, cfrExtCircuitSubifIndex=cfrExtCircuitSubifIndex)
