#
# PySNMP MIB module SONUS-IP-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-IP-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, iso, MibIdentifier, Unsigned32, Integer32, Gauge32, ObjectIdentity, Counter32, IpAddress, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "iso", "MibIdentifier", "Unsigned32", "Integer32", "Gauge32", "ObjectIdentity", "Counter32", "IpAddress", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
sonusEventClass, sonusSlotIndex, sonusShelfIndex, sonusEventDescription, sonusEventLevel = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusEventClass", "sonusSlotIndex", "sonusShelfIndex", "sonusEventDescription", "sonusEventLevel")
sonusPacketMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusPacketMIBs")
SonusName, = mibBuilder.importSymbols("SONUS-TC", "SonusName")
sonusIpInterfaceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1))
if mibBuilder.loadTexts: sonusIpInterfaceMIB.setLastUpdated('200107310000Z')
if mibBuilder.loadTexts: sonusIpInterfaceMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusIpInterfaceMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusIpInterfaceMIB.setDescription('The MIB Module for IP Interface Management.')
sonusIpInterfaceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1))
sonusNrsConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 1))
sonusNrsVirtExtRouterEnable = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsVirtExtRouterEnable.setStatus('current')
if mibBuilder.loadTexts: sonusNrsVirtExtRouterEnable.setDescription("The Virtual External Router administrative status. The value 'enabled' denotes that Gateway IP addresses will be advertised with one associated with each active PNS link and that learned routes will not be readvertised (to prevent routes through us). The value 'disabled' denotes that routing will operate as usual.")
sonusNif = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3))
sonusNifNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNifNextIndex.setDescription('The next valid index to use when creating an entry in the sonusNifTable.')
sonusNifTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2), )
if mibBuilder.loadTexts: sonusNifTable.setStatus('current')
if mibBuilder.loadTexts: sonusNifTable.setDescription('The collection of Interface information for the specified instance.')
sonusNifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNifIndex"))
if mibBuilder.loadTexts: sonusNifEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNifEntry.setDescription('The collection of Interface information for the specified instance.')
sonusNifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNifIndex.setDescription('The ifIndex assigned to this NIF when it was created. This will not change until the NIF is deleted.')
sonusNifName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifName.setStatus('current')
if mibBuilder.loadTexts: sonusNifName.setDescription('The administrative name of the NIF.')
sonusNifType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 3), IANAifType().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifType.setStatus('current')
if mibBuilder.loadTexts: sonusNifType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately 'below' the network layer in the protocol stack. Values are from the IANAifType TC.")
sonusNifIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifIpAddress.setStatus('current')
if mibBuilder.loadTexts: sonusNifIpAddress.setDescription('The IP Address of the Interface')
sonusNifIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifIpMask.setStatus('current')
if mibBuilder.loadTexts: sonusNifIpMask.setDescription('The IP subnet mask of this Interface.')
sonusNifMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifMtu.setStatus('current')
if mibBuilder.loadTexts: sonusNifMtu.setDescription('The size of the largest datagram that can be sent/received on the interface, specified in octets.')
sonusNifShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifShelf.setStatus('current')
if mibBuilder.loadTexts: sonusNifShelf.setDescription('A 32-bit integer identifying the shelf of the Interface')
sonusNifSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifSlot.setStatus('current')
if mibBuilder.loadTexts: sonusNifSlot.setDescription('A 32-bit integer identifying the slot of the Interface')
sonusNifPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifPort.setStatus('current')
if mibBuilder.loadTexts: sonusNifPort.setDescription('A 32-bit integer identifying the port of the Interface.')
sonusNifCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 10), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifCircuit.setStatus('current')
if mibBuilder.loadTexts: sonusNifCircuit.setDescription('A 32-bit integer identifying the circuit of the Interface. For current hardware this must be 1.')
sonusNifNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifNextHopAddr.setStatus('current')
if mibBuilder.loadTexts: sonusNifNextHopAddr.setDescription('The next hop address to use for all traffic out this NIF.')
sonusNifMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifMode.setStatus('current')
if mibBuilder.loadTexts: sonusNifMode.setDescription('The operation mode for NIF.')
sonusNifAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dryUp", 1), ("force", 2))).clone('dryUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifAction.setStatus('current')
if mibBuilder.loadTexts: sonusNifAction.setDescription('The dryup option for NIF.')
sonusNifTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusNifTimeout.setDescription('The dryup timeout in minute. The default is one hour ')
sonusNifState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifState.setStatus('current')
if mibBuilder.loadTexts: sonusNifState.setDescription('Administrative state of the interface. Changes may only be made while disabled and will only take effect when enabled next.')
sonusNifOutOfServiceReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notApplicable", 1), ("admin", 2), ("gateway", 3), ("portDown", 4), ("serverDown", 5), ("vcsDown", 6), ("noVc", 7), ("srvrAbsent", 8), ("linkDown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifOutOfServiceReason.setStatus('current')
if mibBuilder.loadTexts: sonusNifOutOfServiceReason.setDescription('The reason of NIF being out of service. The NIF could be out of service due to one of the following reasons: operator initiated command, gateway not responding to arp request, port failure/outOfService, or server failure/outOfService. The notApplicable is set when the NIF is inService or dryUp state')
sonusNifClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("general", 1), ("reserved", 2))).clone('general')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifClass.setStatus('current')
if mibBuilder.loadTexts: sonusNifClass.setDescription('This object indicates whether a NIF is reserved or general(not reserved). The resources of a general NIF are used by marlin common IP calls whereas the resources of a reserved NIF are used only by MGCP IP calls')
sonusNifRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 18), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNifRowStatus.setDescription('')
sonusNifBwDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifBwDeviation.setStatus('current')
if mibBuilder.loadTexts: sonusNifBwDeviation.setDescription('The deviation between actual and expected NIF bandwidth in percentage of the overall NIF bandwidth. If actual bandwidth is greater than the expected bandwdith plus deviation amount, a trap will be set and the trap will be only cleared when the actual bandwidth dropped below the expected bandwidth. If the actual bandwidth is lower than the expected badniwdth minus 2 times of deviation amount, a different trap will be set and the trap will be cleared when the actual bandwdith reaches the expected bandwidth. ')
sonusNifBwContingency = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNifBwContingency.setStatus('current')
if mibBuilder.loadTexts: sonusNifBwContingency.setDescription('The percentage of the overall NIF bandwidth is reserved for contigency. If actual bandwidth is greater than the expected bandwdith and less than the overall NIF bandwidth minus contingency amount, calls will still be accepted. ')
sonusNifAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 6), )
if mibBuilder.loadTexts: sonusNifAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusNifAdmnTable.setDescription('The collection of Interface information for the specified instance.')
sonusNifAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 6, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNifAdmnShelf"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNifAdmnSlot"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNifAdmnPort"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNifAdmnIndex"))
if mibBuilder.loadTexts: sonusNifAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNifAdmnEntry.setDescription('The collection of Interface information for the specified instance.')
sonusNifAdmnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifAdmnShelf.setStatus('current')
if mibBuilder.loadTexts: sonusNifAdmnShelf.setDescription('A 32-bit integer identifying the shelf of the Interface')
sonusNifAdmnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifAdmnSlot.setStatus('current')
if mibBuilder.loadTexts: sonusNifAdmnSlot.setDescription('A 32-bit integer identifying the slot of the Interface')
sonusNifAdmnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifAdmnPort.setStatus('current')
if mibBuilder.loadTexts: sonusNifAdmnPort.setDescription('A 32-bit integer identifying the port of the Interface.')
sonusNifAdmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNifAdmnIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNifAdmnIndex.setDescription('The ifIndex assigned to this NIF when it was created. This will not change until the NIF is deleted.')
sonusNrsMgmtIfTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7), )
if mibBuilder.loadTexts: sonusNrsMgmtIfTable.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfTable.setDescription('The collection of Management Interface information for the specified instance.')
sonusNrsMgmtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNrsMgmtIfShelf"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsMgmtIfSlot"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsMgmtIfPort"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsMgmtIfCircuit"))
if mibBuilder.loadTexts: sonusNrsMgmtIfEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfEntry.setDescription('The collection of Management Interface information for the specified instance.')
sonusNrsMgmtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsMgmtIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfIndex.setDescription('The ifIndex assigned to this management NIF when it was created. This will not change until the NIF is deleted.')
sonusNrsMgmtIfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfShelf.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfShelf.setDescription('A 32-bit integer identifying the shelf of the Management Interface')
sonusNrsMgmtIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfSlot.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfSlot.setDescription('A 32-bit integer identifying the slot of the Management Interface')
sonusNrsMgmtIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfPort.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfPort.setDescription('A 32-bit integer identifying the port of the Management Interface. For current hardware this must be 1 or 2.')
sonusNrsMgmtIfCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsMgmtIfCircuit.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfCircuit.setDescription('A 32-bit integer identifying the circuit of the Management Interface. For current hardware this must be 1.')
sonusNrsMgmtIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 6), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsMgmtIfType.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately 'below' the network layer in the protocol stack. Values are from RFC1213 for the ifType object. Current hardware supports only the ethernet-csmacd (6) type.")
sonusNrsMgmtIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfIpAddress.setDescription('The IP Address of the Management Interface')
sonusNrsMgmtIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfIpMask.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfIpMask.setDescription('The IP subnet mask of this Management Interface.')
sonusNrsMgmtIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfMtu.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfMtu.setDescription('The size of the largest datagram that can be sent/received on the interface, specified in octets.')
sonusNrsMgmtIfGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfGatewayAddress.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfGatewayAddress.setDescription('The IP address of the default gateway for this Management Interface.')
sonusNrsMgmtIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standby", 1), ("active", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfMode.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfMode.setDescription('The requested mode of the interface.')
sonusNrsMgmtIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsMgmtIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfAdminStatus.setDescription('The requested status of the interface.')
sonusNrsMgmtIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("outOfServiceDisabled", 3), ("outOfServiceLinkDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsMgmtIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfOperStatus.setDescription('The actual status of the management interface. A link will be InService if the sonusNrsMgmtIfAdminStatus is enabled and the physical link is up. It will be OutOfService if the admin status is enabled but the physical link is down. It will be OutOfServiceDisabled if the physical link is up but the admin status is disabled. It will be OutOfServiceLinkDown if the physical link is down and the admin status is disabled.')
sonusNrsMgmtIfLogicMgmtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 7, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsMgmtIfLogicMgmtIpAddress.setStatus('current')
if mibBuilder.loadTexts: sonusNrsMgmtIfLogicMgmtIpAddress.setDescription('The logical Mgmt IP address assigned to the mgmt interface if this mgmt interface is active and in service.')
sonusNrsLogicMgmtIfAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 8), )
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnTable.setDescription('The collection of logical IP addresses for the node')
sonusNrsLogicMgmtIfAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 8, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNrsLogicMgmtIfAdmnShelf"))
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnEntry.setDescription('The collection of logical IP addresses for the node')
sonusNrsLogicMgmtIfAdmnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnShelf.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnShelf.setDescription('A 32-bit integer identifying the shelf of the logical ip address assigned to')
sonusNrsLogicMgmtIfAdmnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnIpAddress.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnIpAddress.setDescription('The Logical IP address of the shelf')
sonusNrsLogicMgmtIfAdmnIpAddressB = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnIpAddressB.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLogicMgmtIfAdmnIpAddressB.setDescription('The second logical IP address for the shelf if the MNS ports are on the different subnet.')
sonusNrsLinkFailureParamAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9), )
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnTable.setDescription('The table of user configured parameters for link failure detection')
sonusNrsLinkFailureParamAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNrsLinkFailureParamAdmnShelf"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsLinkFailureParamAdmnSlot"))
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnEntry.setDescription('One set of parameters configured for a server')
sonusNrsLinkFailureParamAdmnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnShelf.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnShelf.setDescription('The shelf index of the server')
sonusNrsLinkFailureParamAdmnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnSlot.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnSlot.setDescription('The slot index of the server')
sonusNrsLinkFailureParamAdmnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnThreshold.setDescription('The number of failed port accepted before failing over the server. 0 Threshold means the link/port failure will not trigger failover.')
sonusNrsLinkFailureParamAdmnRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnRetries.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnRetries.setDescription('The number of retries before declare the link failure')
sonusNrsLinkFailureParamAdmnVerifyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnVerifyTimer.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnVerifyTimer.setDescription('The verify timer in ms unit defined when link is up')
sonusNrsLinkFailureParamAdmnReattemptTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnReattemptTimer.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnReattemptTimer.setDescription('The re-attempt timer in ms unit defined between retires')
sonusNrsLinkFailureParamAdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureParamAdmnState.setDescription('The administrative state of turning on/off link failure detection.')
sonusNrsLinkFailureStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 10), )
if mibBuilder.loadTexts: sonusNrsLinkFailureStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureStatTable.setDescription('statistics for link failure detection')
sonusNrsLinkFailureStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 10, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNrsLinkFailureStatShelf"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsLinkFailureStatSlot"))
if mibBuilder.loadTexts: sonusNrsLinkFailureStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureStatEntry.setDescription('')
sonusNrsLinkFailureStatShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsLinkFailureStatShelf.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureStatShelf.setDescription('shelf index for target server')
sonusNrsLinkFailureStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsLinkFailureStatSlot.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureStatSlot.setDescription('slot index for target server')
sonusNrsLinkFailureStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsLinkFailureStatFailures.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureStatFailures.setDescription('number of failures detected on this server')
sonusNrsLinkFailureStatRedundFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsLinkFailureStatRedundFailures.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkFailureStatRedundFailures.setDescription('number of failures detected on the redundant server')
sonusNrsPerDestLinkFailureStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11), )
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatTable.setDescription('statistics for link failure detected per destination')
sonusNrsPerDestLinkFailureStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNrsPerDestLinkFailureStatIfIndex"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsPerDestLinkFailureStatIpAddress"))
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatEntry.setDescription('')
sonusNrsPerDestLinkFailureStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatIfIndex.setDescription('The ifindex')
sonusNrsPerDestLinkFailureStatIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatIpAddress.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatIpAddress.setDescription('The destination IP address.')
sonusNrsPerDestLinkFailureStatMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatMinTime.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatMinTime.setDescription('The minimum time used for get reply for a echo request packet.')
sonusNrsPerDestLinkFailureStatMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatMaxTime.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatMaxTime.setDescription('The maximum time used for get reply for a echo request packet.')
sonusNrsPerDestLinkFailureStatAverageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatAverageTime.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatAverageTime.setDescription('The average time used for get reply for a echo request packet.')
sonusNrsPerDestLinkFailureStatSumTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatSumTime.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatSumTime.setDescription('The summary of time')
sonusNrsPerDestLinkFailureStat1Failure = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStat1Failure.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStat1Failure.setDescription('The number of single failures for this destination.')
sonusNrsPerDestLinkFailureStat2Failure = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStat2Failure.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStat2Failure.setDescription('The number of double failures for this destination.')
sonusNrsPerDestLinkFailureStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatFailures.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatFailures.setDescription('The number of >2 failures for this destination.')
sonusNrsPerDestLinkFailureStatReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatReplies.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatReplies.setDescription('The number of replies')
sonusNrsPerDestLinkFailureStatDupeReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatDupeReplies.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatDupeReplies.setDescription('The number of dupe replies')
sonusNrsPerDestLinkFailureStatLateReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatLateReplies.setStatus('current')
if mibBuilder.loadTexts: sonusNrsPerDestLinkFailureStatLateReplies.setDescription('The number of late replies.')
sonusSrvrEthernetSwitchIpTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 12), )
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpTable.setStatus('current')
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpTable.setDescription('The table of ethernet switch IP address for servers')
sonusSrvrEthernetSwitchIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 12, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusSrvrEthernetSwitchIpShelf"), (0, "SONUS-IP-INTERFACE-MIB", "sonusSrvrEthernetSwitchIpSlot"), (0, "SONUS-IP-INTERFACE-MIB", "sonusSrvrEthernetSwitchIpPort"))
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpEntry.setStatus('current')
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpEntry.setDescription('ethernet switch IP address for a server')
sonusSrvrEthernetSwitchIpShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpShelf.setStatus('current')
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpShelf.setDescription('The shelf index of the server')
sonusSrvrEthernetSwitchIpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpSlot.setStatus('current')
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpSlot.setDescription('The slot index of the server')
sonusSrvrEthernetSwitchIpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 12, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpIpAddress.setStatus('current')
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpIpAddress.setDescription('The ethernet switch IP address for this server.')
sonusSrvrEthernetSwitchIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpPort.setStatus('current')
if mibBuilder.loadTexts: sonusSrvrEthernetSwitchIpPort.setDescription('The port index of the server')
sonusNrsSocketAccessAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 13), )
if mibBuilder.loadTexts: sonusNrsSocketAccessAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusNrsSocketAccessAdmnTable.setDescription('The table of socket access definitions')
sonusNrsSocketAccessAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 13, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNrsSocketAccessProtocol"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsSocketAccessPort"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsSocketAccessIfIndex"))
if mibBuilder.loadTexts: sonusNrsSocketAccessAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNrsSocketAccessAdmnEntry.setDescription('socket access definition for a server')
sonusNrsSocketAccessProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17))).clone('tcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsSocketAccessProtocol.setStatus('current')
if mibBuilder.loadTexts: sonusNrsSocketAccessProtocol.setDescription('The protocol definition')
sonusNrsSocketAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsSocketAccessPort.setStatus('current')
if mibBuilder.loadTexts: sonusNrsSocketAccessPort.setDescription('The port number, value between 1-65535')
sonusNrsSocketAccessIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsSocketAccessIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNrsSocketAccessIfIndex.setDescription('A non-zero unsigned long ifindex assigned to the port where defines the access permition.')
sonusNrsSocketAccessPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2))).clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsSocketAccessPermission.setStatus('current')
if mibBuilder.loadTexts: sonusNrsSocketAccessPermission.setDescription('The access permission')
sonusNrsSocketAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 13, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsSocketAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNrsSocketAccessRowStatus.setDescription('')
sonusNrsDebugIfTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99), )
if mibBuilder.loadTexts: sonusNrsDebugIfTable.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfTable.setDescription('The collection of Debug Interface information for the specified instance.')
sonusNrsDebugIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1), ).setIndexNames((0, "SONUS-IP-INTERFACE-MIB", "sonusNrsDebugIfShelf"), (0, "SONUS-IP-INTERFACE-MIB", "sonusNrsDebugIfSlot"))
if mibBuilder.loadTexts: sonusNrsDebugIfEntry.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfEntry.setDescription('The collection of Debug Interface information for the specified instance.')
sonusNrsDebugIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsDebugIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfIndex.setDescription('The ifIndex assigned to this debug NIF when it was created. This will not change until the NIF is deleted.')
sonusNrsDebugIfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfShelf.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfShelf.setDescription('A 32-bit integer identifying the shelf of the Debug Interface')
sonusNrsDebugIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfSlot.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfSlot.setDescription('A 32-bit integer identifying the slot of the Debug Interface')
sonusNrsDebugIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfPort.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfPort.setDescription('A 32-bit integer identifying the port of the Debug Interface. For current hardware this must be 1.')
sonusNrsDebugIfCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfCircuit.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfCircuit.setDescription('A 32-bit integer identifying the circuit of the Debug Interface. For current hardware this must be 1.')
sonusNrsDebugIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 6), IANAifType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfType.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately 'below' the network layer in the protocol stack. Values are from RFC1213 for the ifType object. Current hardware supports only the ethernet-csmacd (6) type.")
sonusNrsDebugIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfIpAddress.setDescription('The IP Address of the Debug Interface')
sonusNrsDebugIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfIpMask.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfIpMask.setDescription('The IP subnet mask of this Debug Interface.')
sonusNrsDebugIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfMtu.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfMtu.setDescription('The size of the largest datagram that can be sent/received on the interface, specified in octets.')
sonusNrsDebugIfGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfGatewayAddress.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfGatewayAddress.setDescription('The IP address of the default gateway for this Debug Interface.')
sonusNrsDebugIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusNrsDebugIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfAdminStatus.setDescription('The requested status of the interface.')
sonusNrsDebugIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 1, 99, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("outOfServiceDisabled", 3), ("outOfServiceLinkDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusNrsDebugIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: sonusNrsDebugIfOperStatus.setDescription('The actual status of the debug interface. A link will be InService if the sonusNrsDebugIfAdminStatus is enabled and the physical link is up. It will be OutOfService if the admin status is enabled but the physical link is down. It will be OutOfServiceDisabled if the physical link is up but the admin status is disabled. It will be OutOfServiceLinkDown if the physical link is down and the admin status is disabled.')
sonusIpInterfaceMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2))
sonusIpInterfaceMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0))
sonusIpInterfaceMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 1))
sonusNrsNifInServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 1)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifInServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifInServiceNotification.setDescription('This trap indicates that a NIF is available to support call processing.')
sonusNrsNifOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 2)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-IP-INTERFACE-MIB", "sonusNifOutOfServiceReason"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifOutOfServiceNotification.setDescription('This trap indicates that a NIF is no longer available to support call processing.')
sonusNrsNifEnabledNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 3)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifEnabledNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifEnabledNotification.setDescription("This trap indicates that a NIF's configuration is enabled.")
sonusNrsNifDisabledNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 4)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifDisabledNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifDisabledNotification.setDescription("This trap indicates that a NIF's configuration is disabled.")
sonusNrsNifDeletedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 5)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifDeletedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifDeletedNotification.setDescription("This trap indicates that a NIF's configuration is deleted.")
sonusNrsNifHighWatermarkNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 6)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifHighWatermarkNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifHighWatermarkNotification.setDescription("This trap indicates that a NIF's high watermark has been reached the first time since the NIF's low watermark has beend reached.")
sonusNrsNifLowWatermarkNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 7)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifLowWatermarkNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifLowWatermarkNotification.setDescription("This trap indicates that a NIF's low watermark has been reached the first time since the NIF's high watermark has been reached.")
sonusNrsNifBwHighDeviationNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 8)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifBwHighDeviationNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifBwHighDeviationNotification.setDescription("This trap indicates that a NIF's actual bandwidth is greater than the expected bandwidth plus deviation amount. This trap will be re-armed when the actual bandwdith dropped below the expected level. ")
sonusNrsNifBwLowDeviationNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 9)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifBwLowDeviationNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifBwLowDeviationNotification.setDescription("This trap indicates that a NIF's actual bandwidth is lower than the expected bandwidth minus 2 times the deviation amount.This trap will be re-armed when the actual bandwdith reached the expected level.")
sonusNrsLinkDownNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 10)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsLinkDownNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkDownNotification.setDescription('This trap indicates that a link down event has been detected on a server')
sonusNrsLinkUpNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 11)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsLinkUpNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsLinkUpNotification.setDescription('This trap indicates that a link up event has event detected on a server')
sonusNrsNifCreatedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 3, 1, 2, 0, 12)).setObjects(("SONUS-IP-INTERFACE-MIB", "sonusNifShelf"), ("SONUS-IP-INTERFACE-MIB", "sonusNifSlot"), ("SONUS-IP-INTERFACE-MIB", "sonusNifPort"), ("SONUS-IP-INTERFACE-MIB", "sonusNifIndex"), ("SONUS-IP-INTERFACE-MIB", "sonusNifName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusNrsNifCreatedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusNrsNifCreatedNotification.setDescription("This trap indicates that a NIF's configuration is created.")
mibBuilder.exportSymbols("SONUS-IP-INTERFACE-MIB", sonusNrsNifBwLowDeviationNotification=sonusNrsNifBwLowDeviationNotification, sonusNrsLinkFailureParamAdmnRetries=sonusNrsLinkFailureParamAdmnRetries, sonusIpInterfaceMIBNotificationsObjects=sonusIpInterfaceMIBNotificationsObjects, sonusNifTable=sonusNifTable, sonusNifIpMask=sonusNifIpMask, sonusNrsLogicMgmtIfAdmnTable=sonusNrsLogicMgmtIfAdmnTable, sonusNrsSocketAccessAdmnEntry=sonusNrsSocketAccessAdmnEntry, sonusNrsMgmtIfIndex=sonusNrsMgmtIfIndex, sonusNrsDebugIfShelf=sonusNrsDebugIfShelf, sonusNrsMgmtIfAdminStatus=sonusNrsMgmtIfAdminStatus, sonusNrsDebugIfSlot=sonusNrsDebugIfSlot, sonusNrsLinkUpNotification=sonusNrsLinkUpNotification, sonusNrsDebugIfType=sonusNrsDebugIfType, sonusNrsPerDestLinkFailureStatTable=sonusNrsPerDestLinkFailureStatTable, sonusNifAdmnTable=sonusNifAdmnTable, sonusIpInterfaceMIB=sonusIpInterfaceMIB, sonusNrsLinkFailureStatTable=sonusNrsLinkFailureStatTable, sonusNrsDebugIfOperStatus=sonusNrsDebugIfOperStatus, sonusNifIndex=sonusNifIndex, sonusNrsDebugIfPort=sonusNrsDebugIfPort, sonusNrsNifHighWatermarkNotification=sonusNrsNifHighWatermarkNotification, sonusNifClass=sonusNifClass, sonusNifAdmnPort=sonusNifAdmnPort, sonusNrsNifCreatedNotification=sonusNrsNifCreatedNotification, sonusNrsNifDeletedNotification=sonusNrsNifDeletedNotification, sonusNrsDebugIfAdminStatus=sonusNrsDebugIfAdminStatus, sonusNrsLinkFailureParamAdmnTable=sonusNrsLinkFailureParamAdmnTable, sonusNrsLinkFailureParamAdmnVerifyTimer=sonusNrsLinkFailureParamAdmnVerifyTimer, sonusSrvrEthernetSwitchIpIpAddress=sonusSrvrEthernetSwitchIpIpAddress, sonusNrsMgmtIfMtu=sonusNrsMgmtIfMtu, sonusIpInterfaceMIBNotifications=sonusIpInterfaceMIBNotifications, sonusNrsLinkFailureParamAdmnThreshold=sonusNrsLinkFailureParamAdmnThreshold, sonusSrvrEthernetSwitchIpSlot=sonusSrvrEthernetSwitchIpSlot, sonusNrsMgmtIfIpMask=sonusNrsMgmtIfIpMask, sonusNrsSocketAccessRowStatus=sonusNrsSocketAccessRowStatus, sonusNrsPerDestLinkFailureStatMinTime=sonusNrsPerDestLinkFailureStatMinTime, sonusNrsNifEnabledNotification=sonusNrsNifEnabledNotification, sonusSrvrEthernetSwitchIpPort=sonusSrvrEthernetSwitchIpPort, sonusNrsDebugIfMtu=sonusNrsDebugIfMtu, sonusNrsMgmtIfPort=sonusNrsMgmtIfPort, sonusNif=sonusNif, sonusNrsMgmtIfCircuit=sonusNrsMgmtIfCircuit, sonusIpInterfaceMIBObjects=sonusIpInterfaceMIBObjects, sonusNrsDebugIfGatewayAddress=sonusNrsDebugIfGatewayAddress, sonusNifTimeout=sonusNifTimeout, sonusNrsLogicMgmtIfAdmnEntry=sonusNrsLogicMgmtIfAdmnEntry, sonusNrsDebugIfCircuit=sonusNrsDebugIfCircuit, sonusNrsPerDestLinkFailureStat1Failure=sonusNrsPerDestLinkFailureStat1Failure, sonusNrsPerDestLinkFailureStatIpAddress=sonusNrsPerDestLinkFailureStatIpAddress, sonusNrsDebugIfIpMask=sonusNrsDebugIfIpMask, sonusSrvrEthernetSwitchIpShelf=sonusSrvrEthernetSwitchIpShelf, sonusNrsLinkFailureParamAdmnState=sonusNrsLinkFailureParamAdmnState, sonusNrsMgmtIfEntry=sonusNrsMgmtIfEntry, sonusNrsLogicMgmtIfAdmnShelf=sonusNrsLogicMgmtIfAdmnShelf, sonusNifNextIndex=sonusNifNextIndex, sonusNrsLinkFailureStatShelf=sonusNrsLinkFailureStatShelf, sonusNrsPerDestLinkFailureStatIfIndex=sonusNrsPerDestLinkFailureStatIfIndex, sonusNrsNifInServiceNotification=sonusNrsNifInServiceNotification, sonusNrsDebugIfIpAddress=sonusNrsDebugIfIpAddress, sonusNrsNifOutOfServiceNotification=sonusNrsNifOutOfServiceNotification, sonusNifName=sonusNifName, sonusNrsMgmtIfOperStatus=sonusNrsMgmtIfOperStatus, sonusNifBwContingency=sonusNifBwContingency, sonusNrsNifDisabledNotification=sonusNrsNifDisabledNotification, sonusNifMtu=sonusNifMtu, sonusNrsSocketAccessProtocol=sonusNrsSocketAccessProtocol, sonusNifType=sonusNifType, sonusNifOutOfServiceReason=sonusNifOutOfServiceReason, sonusNrsLogicMgmtIfAdmnIpAddressB=sonusNrsLogicMgmtIfAdmnIpAddressB, sonusNifNextHopAddr=sonusNifNextHopAddr, sonusNrsMgmtIfTable=sonusNrsMgmtIfTable, sonusNrsLinkDownNotification=sonusNrsLinkDownNotification, sonusNifEntry=sonusNifEntry, sonusNrsPerDestLinkFailureStatLateReplies=sonusNrsPerDestLinkFailureStatLateReplies, sonusNrsPerDestLinkFailureStatFailures=sonusNrsPerDestLinkFailureStatFailures, sonusNrsSocketAccessPermission=sonusNrsSocketAccessPermission, sonusNifAdmnShelf=sonusNifAdmnShelf, sonusNrsLinkFailureStatFailures=sonusNrsLinkFailureStatFailures, sonusNrsLinkFailureStatSlot=sonusNrsLinkFailureStatSlot, sonusNrsMgmtIfIpAddress=sonusNrsMgmtIfIpAddress, sonusNrsLinkFailureStatRedundFailures=sonusNrsLinkFailureStatRedundFailures, sonusNrsLinkFailureStatEntry=sonusNrsLinkFailureStatEntry, sonusSrvrEthernetSwitchIpEntry=sonusSrvrEthernetSwitchIpEntry, sonusNrsMgmtIfGatewayAddress=sonusNrsMgmtIfGatewayAddress, sonusNrsMgmtIfMode=sonusNrsMgmtIfMode, sonusNrsMgmtIfSlot=sonusNrsMgmtIfSlot, sonusNifShelf=sonusNifShelf, sonusNrsSocketAccessIfIndex=sonusNrsSocketAccessIfIndex, sonusNrsPerDestLinkFailureStatMaxTime=sonusNrsPerDestLinkFailureStatMaxTime, sonusNrsPerDestLinkFailureStat2Failure=sonusNrsPerDestLinkFailureStat2Failure, sonusNifBwDeviation=sonusNifBwDeviation, sonusNrsVirtExtRouterEnable=sonusNrsVirtExtRouterEnable, sonusNifAction=sonusNifAction, sonusNrsNifLowWatermarkNotification=sonusNrsNifLowWatermarkNotification, sonusNifMode=sonusNifMode, sonusSrvrEthernetSwitchIpTable=sonusSrvrEthernetSwitchIpTable, sonusNrsLinkFailureParamAdmnReattemptTimer=sonusNrsLinkFailureParamAdmnReattemptTimer, sonusNrsDebugIfIndex=sonusNrsDebugIfIndex, sonusNrsConfigObjects=sonusNrsConfigObjects, sonusNrsPerDestLinkFailureStatEntry=sonusNrsPerDestLinkFailureStatEntry, sonusNrsDebugIfTable=sonusNrsDebugIfTable, sonusNrsPerDestLinkFailureStatSumTime=sonusNrsPerDestLinkFailureStatSumTime, sonusNrsMgmtIfType=sonusNrsMgmtIfType, sonusNifPort=sonusNifPort, sonusNrsPerDestLinkFailureStatDupeReplies=sonusNrsPerDestLinkFailureStatDupeReplies, sonusNrsSocketAccessPort=sonusNrsSocketAccessPort, sonusNrsPerDestLinkFailureStatAverageTime=sonusNrsPerDestLinkFailureStatAverageTime, sonusNrsDebugIfEntry=sonusNrsDebugIfEntry, sonusNifState=sonusNifState, sonusNrsSocketAccessAdmnTable=sonusNrsSocketAccessAdmnTable, sonusNrsLinkFailureParamAdmnEntry=sonusNrsLinkFailureParamAdmnEntry, sonusNifSlot=sonusNifSlot, sonusNrsPerDestLinkFailureStatReplies=sonusNrsPerDestLinkFailureStatReplies, sonusNrsNifBwHighDeviationNotification=sonusNrsNifBwHighDeviationNotification, sonusIpInterfaceMIBNotificationsPrefix=sonusIpInterfaceMIBNotificationsPrefix, PYSNMP_MODULE_ID=sonusIpInterfaceMIB, sonusNifAdmnSlot=sonusNifAdmnSlot, sonusNrsMgmtIfShelf=sonusNrsMgmtIfShelf, sonusNifIpAddress=sonusNifIpAddress, sonusNifRowStatus=sonusNifRowStatus, sonusNifAdmnIndex=sonusNifAdmnIndex, sonusNifAdmnEntry=sonusNifAdmnEntry, sonusNifCircuit=sonusNifCircuit, sonusNrsMgmtIfLogicMgmtIpAddress=sonusNrsMgmtIfLogicMgmtIpAddress, sonusNrsLinkFailureParamAdmnSlot=sonusNrsLinkFailureParamAdmnSlot, sonusNrsLogicMgmtIfAdmnIpAddress=sonusNrsLogicMgmtIfAdmnIpAddress, sonusNrsLinkFailureParamAdmnShelf=sonusNrsLinkFailureParamAdmnShelf)
