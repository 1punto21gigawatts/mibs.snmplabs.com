#
# PySNMP MIB module BRS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BRS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Bits, enterprises, Counter64, TimeTicks, NotificationType, IpAddress, MibIdentifier, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Bits", "enterprises", "Counter64", "TimeTicks", "NotificationType", "IpAddress", "MibIdentifier", "Counter32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
proteon = MibIdentifier((1, 3, 6, 1, 4, 1, 1))
proAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 1))
proFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 1, 7))
proFeatureBrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 1, 7, 1))
proBrsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1))
class BRSPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("low", 1), ("normal", 2), ("high", 3), ("urgent", 4))

proBrsNumber = MibScalar((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsNumber.setDescription('The number of interfaces enabled for BRS.')
proBrsPortTable = MibTable((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2), )
if mibBuilder.loadTexts: proBrsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsPortTable.setDescription('A list of BRS ports/interfaces. The number of entries is given by the value of proBrsNumber. Only ports/interfaces that have BRS enabled will appear in this table.')
proBrsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: proBrsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsPortEntry.setDescription('Status and parameter values for an interface.')
proBrsClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassNumber.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassNumber.setDescription('The number of classes on this interface.')
proBrsDefaultClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsDefaultClassName.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsDefaultClassName.setDescription('The name of the default class.')
proBrsDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 2, 1, 3), BRSPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsDefaultPriority.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsDefaultPriority.setDescription('The default priority for the default class.')
proBrsClassTable = MibTable((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3), )
if mibBuilder.loadTexts: proBrsClassTable.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassTable.setDescription('A list of BRS Classes per interface. The number of entries is given by the value of proBrsClassNumber in the previous proBrsPortTable group.')
proBrsClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "BRS-MIB", "proBrsClassId"))
if mibBuilder.loadTexts: proBrsClassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassEntry.setDescription('Status and parameter values for a class.')
proBrsClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassId.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassId.setDescription('A unique ID for each class. Its value ranges between 1 and the value of proBrsClassNumber in the proBrsPortTable.')
proBrsClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassName.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassName.setDescription('The class name.')
proBrsClassAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proBrsClassAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassAlloc.setDescription('Bandwidth Allocation percentage.')
proBrsClassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassBytes.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassBytes.setDescription('The number of bytes transmitted in this class.')
proBrsClassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassPkts.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassPkts.setDescription('The number of packets transmitted in this class.')
proBrsClassDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsClassDiscs.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsClassDiscs.setDescription('The number of bytes discarded in this class.')
proBrsFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4), )
if mibBuilder.loadTexts: proBrsFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterTable.setDescription('A list of BRS Protocols/Filters.')
proBrsFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "BRS-MIB", "proBrsClassId"), (0, "BRS-MIB", "proBrsFilterId"))
if mibBuilder.loadTexts: proBrsFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterEntry.setDescription('Status and parameter values for a filter.')
proBrsFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterId.setDescription('A unique value for each filter. Its value is the protocol number or a filter number + the maximum protocol number.')
proBrsFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterName.setDescription('The filter name.')
proBrsFilterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("normal", 2), ("high", 3), ("urgent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterPriority.setDescription('The priority of the filter.')
proBrsFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterPortType.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterPortType.setDescription('This field is relevent to the UDP_TCP port filters only (where proBRSFilterId is UDP_TCP1, UDP_TCP2, UDP_TCP3, UDP_TCP4 or UDP_TCP5). It signifies whether UDP/IP or TCP/IP traffic should be filtered. Valid values are tcp(1), udp(2) or other(3), which is specified for other protocol/filter types.')
proBrsFilterLowPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterLowPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterLowPortNum.setDescription('This field is relevent to the UDP_TCP port filters only (where proBRSFilterId is UDP_TCP1, UDP_TCP2, UDP_TCP3, UDP_TCP4 or UDP_TCP5). It signifies the low end of a range of port numbers on which a UDP_TCP filter is based. Valid values for UDP_TCP filters are from 1 to 65535. This field will be zero for other protocol/filter types.')
proBrsFilterHighPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterHighPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterHighPortNum.setDescription('This is field relevent to the UDP_TCP port filters only (where proBRSFilterId is UDP_TCP1, UDP_TCP2, UDP_TCP3, UDP_TCP4 or UDP_TCP5). It signifies the high end of a range of port numbers. It can range from 1 to 65535 and is equal to or greater than the low port range. This field will be 0 for other protocol/filter types.')
proBrsFilterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterIpAddr.setDescription('This field is relevent to the UDP_TCP port filters only. If the IP address is non zero, the IP address and the port number range (defined by the Low Port and High Port) are used together to define a socket in the filtering criteria for the UDP_TCP filter. If the IP address is zero, only the port range criteria criteria is used for the UDP_TCP filter. This field will be zero for other protocol/filter types.')
proBrsFilterTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1, 1, 7, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: proBrsFilterTag.setStatus('mandatory')
if mibBuilder.loadTexts: proBrsFilterTag.setDescription('This field is relevent only for BRS tags (where proBRSFilterId is TAG1, TAG2, TAG3, TAG4 or TAG5). The Tag Value identifies a set of filter items associated with a specific tag value via MAC Filtering configuration. The association of a Tag Value with one of the 5 BRS tags allows the set of filtered items to be assigned to a class and priority configured for the BRS tag. Valid values are 1 to 64. This field will be 0 for other protocol/filter types.')
mibBuilder.exportSymbols("BRS-MIB", proBrsFilterHighPortNum=proBrsFilterHighPortNum, proBrsFilterTag=proBrsFilterTag, proBrsFilterEntry=proBrsFilterEntry, proBrsClassNumber=proBrsClassNumber, proBrsClassPkts=proBrsClassPkts, proBrsMib=proBrsMib, proBrsClassTable=proBrsClassTable, proBrsFilterPortType=proBrsFilterPortType, proBrsFilterIpAddr=proBrsFilterIpAddr, proBrsClassName=proBrsClassName, proBrsFilterId=proBrsFilterId, proBrsPortTable=proBrsPortTable, proFeatureBrs=proFeatureBrs, proBrsClassBytes=proBrsClassBytes, proBrsClassEntry=proBrsClassEntry, proBrsPortEntry=proBrsPortEntry, proBrsFilterLowPortNum=proBrsFilterLowPortNum, proBrsNumber=proBrsNumber, proBrsFilterPriority=proBrsFilterPriority, proBrsDefaultClassName=proBrsDefaultClassName, proBrsFilterTable=proBrsFilterTable, proBrsDefaultPriority=proBrsDefaultPriority, proBrsClassAlloc=proBrsClassAlloc, BRSPriority=BRSPriority, proBrsClassDiscs=proBrsClassDiscs, proFeature=proFeature, proAdmin=proAdmin, proteon=proteon, proBrsFilterName=proBrsFilterName, proBrsClassId=proBrsClassId)
