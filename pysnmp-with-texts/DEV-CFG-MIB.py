#
# PySNMP MIB module DEV-CFG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEV-CFG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, IpAddress, Integer32, Gauge32, Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Bits, NotificationType, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Integer32", "Gauge32", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Bits", "NotificationType", "iso", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbSwitchG1Il = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50))
nbDeviceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 11))
nbDevGen = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1))
nbDevOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accelerouter", 1), ("router", 2), ("switch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevOperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbDevOperationMode.setDescription('The Operational mode of Device. This is for internal usage.')
nbDevErrorText = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbDevErrorText.setStatus('mandatory')
if mibBuilder.loadTexts: nbDevErrorText.setDescription('This is the text of the last error that the agent found. it is sent to the RS232 port, and it used by the manager to show the cause of the last error.')
nbDevRouterSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveConfig", 1), ("resetConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbDevRouterSaveConfig.setStatus('mandatory')
if mibBuilder.loadTexts: nbDevRouterSaveConfig.setDescription('If operation SET is issued with value saveConfig(1), all configuration is to be saved in relevant configuration files; if operation SET is issued with value resetConfig(2), all configuration is to get from relevant configuration files')
nbsDevProperties = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevProperties.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevProperties.setDescription('Additional Device Properties. This MIB Object is created as a Bits Mask, when the corresponding Bit says about the specific property. value=0 : If no additional properties exist. value=1 : If Device have a Redundant Power Supply. value=2 : If Device can include the High Density Fibre Ports. value=4 : If Device have a Direct Current (DC) Power Supply for extreme temperature conditions. value=8 : If Device is of the OptiSwitch_100FX Type (fixed schema of the OptiSwitch_400 Device). value=16: If Device is of the Cheap Modification. value=32: If Device is of the Expensive Modification. For example: If Device have a the both properties (Redundant Power Supply & High Density Fiber Ports), value=3 will be responded on the GET SNMP command (etc...).')
nbsDevTemperatureMode = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("normal", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevTemperatureMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevTemperatureMode.setDescription('The Temperature Mode of Device.')
nbsDevPS = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8))
nbsDevPSNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSNumber.setDescription('The number of Power Supplies in the corresponding Device. Value = 0 says, that Power Supply Table is not supported.')
nbsDevPSTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 2), )
if mibBuilder.loadTexts: nbsDevPSTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSTable.setDescription('This table shows all the Power Supplies modules, existing in the corresponding Device.')
nbsDevPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 2, 1), ).setIndexNames((0, "DEV-CFG-MIB", "nbsDevPSIndex"))
if mibBuilder.loadTexts: nbsDevPSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSEntry.setDescription('The entries of the table.')
nbsDevPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSIndex.setDescription('The index of the table, (MAX Value is equal to nbsDevPSNumber).')
nbsDevPSType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("acPS", 2), ("dcPS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSType.setDescription('The physical Type of the Power Supply. acPS (2) - alternating current PS, dcPS (3) - dirrect current PS.')
nbsDevPSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSDescription.setDescription('The Text Decription of the Power Supply.')
nbsDevPSRedundantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mainPS", 2), ("secondaryPS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSRedundantMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSRedundantMode.setDescription('The working mode of the Power Supply.')
nbsDevPSOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSOperStatus.setDescription('The Oper status of the Power Supply.')
nbsDevPSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsDevPSAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSAdminStatus.setDescription('The Admin status of the Power Supply.')
nbsDevPSInput = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9))
nbsDevPSInputNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSInputNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputNumber.setDescription('The number of Power Suppliy Inputs in the corresponding Device. Value = 0 says, that Power Supply Inputs Table is not supported.')
nbsDevPSInputTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 2), )
if mibBuilder.loadTexts: nbsDevPSInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputTable.setDescription('This table shows all the Power Supply Inputs, existing in the corresponding Device.')
nbsDevPSInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 2, 1), ).setIndexNames((0, "DEV-CFG-MIB", "nbsDevPSInputIndex"))
if mibBuilder.loadTexts: nbsDevPSInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputEntry.setDescription('The entries of the table.')
nbsDevPSInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSInputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputIndex.setDescription('The index of the table, (MAX Value is equal to nbsDevPSInputNumber).')
nbsDevPSInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("acInput", 2), ("dcInput", 3), ("dcRedundInput", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSInputType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputType.setDescription('The physical Type of the Power Supply. acInput (2) - alternating current input, dcInput (3) - direct current input, dcRedundInput (4) - direct current Redundant input.')
nbsDevPSInputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSInputDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputDescription.setDescription('The Text Decription of the Power Supply Input.')
nbsDevPSInputRedundantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mainInput", 2), ("secondaryInput", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSInputRedundantMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputRedundantMode.setDescription('The Redundant mode of the Power Supply Input.')
nbsDevPSInputOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevPSInputOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputOperStatus.setDescription('The Oper status of the Power Supply Input.')
nbsDevPSInputAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsDevPSInputAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevPSInputAdminStatus.setDescription('The Admin status of the Power Supply Input.')
nbsDevCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10))
nbsDevCPUNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevCPUNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUNumber.setDescription('The number of CPU cards in the corresponding Device. Value = 0 says, that CPU Table is not supported.')
nbsDevCPUTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2), )
if mibBuilder.loadTexts: nbsDevCPUTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUTable.setDescription('This table shows all the CPU modules, existing in the corresponding Device.')
nbsDevCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2, 1), ).setIndexNames((0, "DEV-CFG-MIB", "nbsDevCPUIndex"))
if mibBuilder.loadTexts: nbsDevCPUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUEntry.setDescription('The entries of the table.')
nbsDevCPUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevCPUIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUIndex.setDescription('The index of the table, (MAX Value is equal to nbsDevCPUNumber).')
nbsDevCPUType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("cx33CPU", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevCPUType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUType.setDescription('The physical Type of the CPU. cx33CPU (2) - CPU CX with 33Mhz clock.')
nbsDevCPUDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevCPUDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUDescription.setDescription('The Text Decription of the CPU card.')
nbsDevCPURedundantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mainCPU", 2), ("redundantCPU", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevCPURedundantMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPURedundantMode.setDescription('The Redundant mode of the CPU card.')
nbsDevCPUOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevCPUOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUOperStatus.setDescription('The Oper status of the CPU card.')
nbsDevCPUAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsDevCPUAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUAdminStatus.setDescription('The Admin status of the CPU card.')
nbsDevCPUOrderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevCPUOrderNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevCPUOrderNumber.setDescription('The order number of the CPU card.')
nbsDevFAN = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11))
nbsDevFANsNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevFANsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevFANsNumber.setDescription('The number of FAN cards in the corresponding Device. Value = 0 says, that FAN Table is not supported.')
nbsDevFANTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11, 2), )
if mibBuilder.loadTexts: nbsDevFANTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevFANTable.setDescription('This table shows all the FAN modules, existing in the corresponding Device.')
nbsDevFANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11, 2, 1), ).setIndexNames((0, "DEV-CFG-MIB", "nbsDevFANIndex"))
if mibBuilder.loadTexts: nbsDevFANEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevFANEntry.setDescription('The entries of the table.')
nbsDevFANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevFANIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevFANIndex.setDescription('The index of the table, (MAX Value is equal to nbsDevFANsNumber).')
nbsDevFANType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("none", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevFANType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevFANType.setDescription('The physical Type of the FAN.')
nbsDevFANDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevFANDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevFANDescription.setDescription('The Text Decription of the FAN card.')
nbsDevFANOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsDevFANOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevFANOperStatus.setDescription('The Oper status of the FAN card.')
nbsDevFANAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 11, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsDevFANAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsDevFANAdminStatus.setDescription('The Admin status of the FAN card.')
mibBuilder.exportSymbols("DEV-CFG-MIB", nbsDevPSAdminStatus=nbsDevPSAdminStatus, nbsDevFAN=nbsDevFAN, nbsDevTemperatureMode=nbsDevTemperatureMode, nbsDevCPUType=nbsDevCPUType, nbsDevPSDescription=nbsDevPSDescription, nbsDevFANIndex=nbsDevFANIndex, nbsDevPSIndex=nbsDevPSIndex, nbsDevPSInputType=nbsDevPSInputType, nbsDevCPUEntry=nbsDevCPUEntry, nbDevRouterSaveConfig=nbDevRouterSaveConfig, nbsDevCPUNumber=nbsDevCPUNumber, nbsDevFANTable=nbsDevFANTable, nbsDevFANType=nbsDevFANType, nbsDevCPUOrderNumber=nbsDevCPUOrderNumber, nbsDevFANAdminStatus=nbsDevFANAdminStatus, nbase=nbase, nbSwitchG1=nbSwitchG1, nbsDevPSInputDescription=nbsDevPSInputDescription, nbsDevPSRedundantMode=nbsDevPSRedundantMode, nbsDevPSOperStatus=nbsDevPSOperStatus, nbsDevCPURedundantMode=nbsDevCPURedundantMode, nbsDevCPUAdminStatus=nbsDevCPUAdminStatus, nbsDevPSInputRedundantMode=nbsDevPSInputRedundantMode, nbsDevPSInputOperStatus=nbsDevPSInputOperStatus, nbsDevCPU=nbsDevCPU, nbDevOperationMode=nbDevOperationMode, nbsDevPSEntry=nbsDevPSEntry, nbSwitchG1Il=nbSwitchG1Il, nbsDevCPUTable=nbsDevCPUTable, nbsDevPSInputNumber=nbsDevPSInputNumber, nbsDevCPUIndex=nbsDevCPUIndex, nbsDevPSInputAdminStatus=nbsDevPSInputAdminStatus, nbsDevPSInputTable=nbsDevPSInputTable, nbsDevPSInputEntry=nbsDevPSInputEntry, nbsDevFANsNumber=nbsDevFANsNumber, nbsDevProperties=nbsDevProperties, nbDeviceConfig=nbDeviceConfig, nbsDevPSTable=nbsDevPSTable, nbsDevFANOperStatus=nbsDevFANOperStatus, nbsDevPSInput=nbsDevPSInput, nbsDevCPUDescription=nbsDevCPUDescription, nbsDevFANEntry=nbsDevFANEntry, nbDevGen=nbDevGen, nbsDevPSType=nbsDevPSType, nbsDevPSNumber=nbsDevPSNumber, nbsDevFANDescription=nbsDevFANDescription, nbDevErrorText=nbDevErrorText, nbsDevPS=nbsDevPS, nbsDevCPUOperStatus=nbsDevCPUOperStatus, nbsDevPSInputIndex=nbsDevPSInputIndex)
