#
# PySNMP MIB module CXCFG-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXCFG-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cxCfgIp, cxCfgIpSap, cxIcmp, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxCfgIp", "cxCfgIpSap", "cxIcmp", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, ObjectIdentity, Bits, Integer32, Counter32, IpAddress, Counter64, Unsigned32, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Integer32", "Counter32", "IpAddress", "Counter64", "Unsigned32", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxCfgIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1), )
if mibBuilder.loadTexts: cxCfgIpAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAddrTable.setDescription('Provides the configuration and addressing information for eachIP port. This information is used when a port binds to a physical port or a convergence port. The table contains one default entry (row) which can be modified. If more than one IP port is required, additional entries can be added.')
cxCfgIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1), ).setIndexNames((0, "CXCFG-IP-MIB", "cxCfgIpAdEntAddr"))
if mibBuilder.loadTexts: cxCfgIpAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAddrEntry.setDescription('Identifies the configuration and addressing information for a particular IP port. This information is used when the port binds to a physical port or a convergence port.')
cxCfgIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpAdEntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntAddr.setDescription('Determines the IP address assigned to a particular IP Port. The value of this address is used to index this row of the table. Range of Values: 4 integers, each one ranging from 0 to 255. Default Value: 00.00.00.00 Configuration Changed: Administrative. ')
cxCfgIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntIfIndex.setDescription('Identifies the table row that contains configuration or monitoring objects for a specific type of physical interface. Range of Values: From 1 to the number of entries in the interface table. Default Value: None ')
cxCfgIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntNetMask.setDescription('Determines the subnet mask associated with this IP address. The mask defines which part of the IP address is the network and which part is the host. Range of Values: 4 integers, with the parts identifying the network set to 255 and the parts identifying the host set to 0. Default Value: 00.00.00.00. Configuration Changed: Administrative. ')
cxCfgIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
cxCfgIpAdEntSubnetworkSAPAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntSubnetworkSAPAlias.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntSubnetworkSAPAlias.setDescription("Determines the name which uniquely identifies the cxCfgIpAdEntSubnetworkSAP. Range of Values: 0 to 16 alphanumeric characters. (Note that the first character must be a letter, spaces are not allowed). Default Value: LAN_PORT1 Related Parameters: If the IP port binds to a physical port, then the alias must match the alias defined in cxLanIoPortAlias of the cxLanIoPortTable; if the IP port binds to a convergence port, then the alias must match the port's alias defined in cxConvPortAlias of the cxConvTable. Configuration Changed: Administrative")
cxCfgIpAdEntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged. After next reset the values will be disabled and the row will be deleted from the table. valid (2): Values are enabled. Default Value: (2) Configuration Changed: Administrative')
cxCfgIpAdEntState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("onether", 3), ("ontoken", 4))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntState.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntState.setDescription('Determines whether the IP port is active or inactive. Options: On (1): The port is active, transmission is possible. Off (2): The port is inactive, transmission is not possible. OnEther (3): The Ethernet STP port will bind to this IP port. OnToken (4): The Token Ring STP port will bind to this IP port. Default Value: (1) Configuration Changed: Administrative')
cxCfgIpAdEntPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntPeerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntPeerAddr.setDescription("Determines the IP address of the port's closest neighbor (the port that is one hop away). The object is only applicable if the IP port binds to a convergence port. On broadcast networks, this value can be void, i.e. 00.00.00.00. Range of Values: 4 integers, each one ranging from 0 to 255. Default Values: 00.00.00.00 Configuration Changed: Administrative")
cxCfgIpAdEntRtProto = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rip", 2), ("ospf", 3))).clone('rip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntRtProto.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntRtProto.setDescription('Determines which routing protocol the IP port is associated with. Options: none (1): No routing protocol is used rip (2): Routing Information Protocol (RIP). A distance vector routing protocol popular for routing IP. ospf (3): Open Shortest Path First (OSPF). A link state routing protocol used for routing IP. Default Value: rip (2) Configuration Changed: administrative')
cxCfgIpAdEntMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4096)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntMtu.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntMtu.setDescription('Determines the size, in bytes, of the largest IP packet that can be sent or received at the IP layer. Packets that exceed this size are fragmented. This value should always be less than or equal to the sub-layer packet size. Range of Values: 64-4096 Default Value: 1600 Configuration Changed: administrative')
cxCfgIpAdEntReplyToRARP = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntReplyToRARP.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntReplyToRARP.setDescription('Determines whether the port should reply a RARP request. Default Value: disabled (2) Configuration Changed: administrative')
cxCfgIpAdEntSRSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpAdEntSRSupport.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpAdEntSRSupport.setDescription('Determines whether the port should support Source Routing packet. If it is enabled, the physical infterface of the port must be Token-Ring. If it is disabled, any Source Routing packet will be discarded. Default Value: disabled (2) Configuration Changed: administrative')
cxCfgIpPingTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1), )
if mibBuilder.loadTexts: cxCfgIpPingTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingTable.setDescription('Provides the configuration to perform an IP Ping. The table contains one default entry (row) which can be modified.')
cxCfgIpPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1), ).setIndexNames((0, "CXCFG-IP-MIB", "cxCfgIpPingDestAddr"))
if mibBuilder.loadTexts: cxCfgIpPingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingEntry.setDescription('Identifies the configuration of a Ping table.')
cxCfgIpPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpPingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingIndex.setDescription('Determines the number used to index the Ping entry table. Range of Values: From 1 - 32 Default Value: None Configuration Changed: Administrative')
cxCfgIpPingDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpPingDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingDestAddr.setDescription('The Destination IP Address, a unique IP number. Default Value: None ')
cxCfgIpPingGapsInMs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpPingGapsInMs.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingGapsInMs.setDescription('Gaps in Tenths of a second between ping frames. Range of Values: From 1 to 1000 Default Value: 10')
cxCfgIpPingNbOfPings = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpPingNbOfPings.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingNbOfPings.setDescription('Number of Ping frames to send. A value of 0, means run infinitely. Range of Values: From 0 to 4,000,000 Default Value: 1')
cxCfgIpPingDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpPingDataSize.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingDataSize.setDescription('Size of data packet to send in the IP Ping frame. Range of Values: From 1 to 300 Default Value: 64')
cxCfgIpPingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpPingRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged. After next reset the values will be disabled and the row will be deleted from the table. valid (2): Values are enabled. Default Value: (2) Configuration Changed: Administrative')
cxCfgIpPingTriggerSend = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipIdle", 1), ("ipSend", 2))).clone('ipIdle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpPingTriggerSend.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingTriggerSend.setDescription('The parameter that triggers whether Pings are sent out. Options: ipIdle (1): No Pings are sent ipSend (2): The counter is set to zero and Pings are sent Default Value: ipIdle (1)')
cxCfgIpPingNbTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingNbTx.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingNbTx.setDescription('The number of Ping frames transmitted.')
cxCfgIpPingNbReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingNbReplyRx.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingNbReplyRx.setDescription('The number of positive Ping replies received.')
cxCfgIpPingNbErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingNbErrorRx.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingNbErrorRx.setDescription('The number of error replies received.')
cxCfgIpPingLastSeqNumRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingLastSeqNumRx.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingLastSeqNumRx.setDescription('The sequence of the last Ping frame received.')
cxCfgIpPingLastRoundTripInMs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingLastRoundTripInMs.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingLastRoundTripInMs.setDescription('The time elapsed in milliseconds for the round trip of the last Ping frame.')
cxCfgIpPingAvgRoundTripInMs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingAvgRoundTripInMs.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingAvgRoundTripInMs.setDescription('The average time spent in ms for the round trips of the each Ping frame.')
cxCfgIpPingMinRoundTripInMs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingMinRoundTripInMs.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingMinRoundTripInMs.setDescription('The minimum time spent in ms for a round trips of a Ping frame.')
cxCfgIpPingMaxRoundTripInMs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingMaxRoundTripInMs.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingMaxRoundTripInMs.setDescription('The maximum time spent in ms for a round trips of a Ping frame.')
cxCfgIpPingLastNumHopsTraveled = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 11, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpPingLastNumHopsTraveled.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpPingLastNumHopsTraveled.setDescription('The number of hops traveled counter for the last Ping frame.')
cxCfgIpRIP = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpRIP.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpRIP.setDescription('Determines whether RIP is enabled or disabled on this router. Options: on (1): RIP enabled off (2): RIP disabled Default Value: on Configuration Changed: administrative')
cxCfgRIPII = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgRIPII.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgRIPII.setDescription('Determines whether RIP-2 is enabled or disabled on this router. RIP-2 can only be enabled, if RIP is also enabled. Options: on (1): RIP-2 enabled off (2): RIP-2 disabled Default Value: on (1) Configuration Changed: Administrative')
cxCfgIpMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cxCfgIpMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
mibBuilder.exportSymbols("CXCFG-IP-MIB", cxCfgIpAdEntRowStatus=cxCfgIpAdEntRowStatus, cxCfgIpRIP=cxCfgIpRIP, cxCfgIpAdEntSubnetworkSAPAlias=cxCfgIpAdEntSubnetworkSAPAlias, cxCfgIpAdEntPeerAddr=cxCfgIpAdEntPeerAddr, cxCfgIpPingMinRoundTripInMs=cxCfgIpPingMinRoundTripInMs, cxCfgRIPII=cxCfgRIPII, cxCfgIpAdEntMtu=cxCfgIpAdEntMtu, cxCfgIpPingIndex=cxCfgIpPingIndex, cxCfgIpAdEntNetMask=cxCfgIpAdEntNetMask, cxCfgIpPingNbTx=cxCfgIpPingNbTx, cxCfgIpAdEntBcastAddr=cxCfgIpAdEntBcastAddr, cxCfgIpPingGapsInMs=cxCfgIpPingGapsInMs, cxCfgIpAdEntState=cxCfgIpAdEntState, cxCfgIpPingMaxRoundTripInMs=cxCfgIpPingMaxRoundTripInMs, cxCfgIpMibLevel=cxCfgIpMibLevel, cxCfgIpPingNbReplyRx=cxCfgIpPingNbReplyRx, cxCfgIpPingTable=cxCfgIpPingTable, cxCfgIpAdEntAddr=cxCfgIpAdEntAddr, cxCfgIpPingNbErrorRx=cxCfgIpPingNbErrorRx, cxCfgIpAdEntReplyToRARP=cxCfgIpAdEntReplyToRARP, cxCfgIpPingDestAddr=cxCfgIpPingDestAddr, cxCfgIpAdEntSRSupport=cxCfgIpAdEntSRSupport, cxCfgIpAdEntIfIndex=cxCfgIpAdEntIfIndex, cxCfgIpAddrTable=cxCfgIpAddrTable, cxCfgIpPingDataSize=cxCfgIpPingDataSize, cxCfgIpAddrEntry=cxCfgIpAddrEntry, cxCfgIpAdEntRtProto=cxCfgIpAdEntRtProto, cxCfgIpPingRowStatus=cxCfgIpPingRowStatus, cxCfgIpPingTriggerSend=cxCfgIpPingTriggerSend, cxCfgIpPingLastSeqNumRx=cxCfgIpPingLastSeqNumRx, cxCfgIpPingLastRoundTripInMs=cxCfgIpPingLastRoundTripInMs, cxCfgIpPingLastNumHopsTraveled=cxCfgIpPingLastNumHopsTraveled, cxCfgIpPingEntry=cxCfgIpPingEntry, cxCfgIpPingNbOfPings=cxCfgIpPingNbOfPings, cxCfgIpPingAvgRoundTripInMs=cxCfgIpPingAvgRoundTripInMs)
