#
# PySNMP MIB module IPAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, Unsigned32, Counter64, enterprises, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, NotificationType, iso, ObjectIdentity, Gauge32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Unsigned32", "Counter64", "enterprises", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "NotificationType", "iso", "ObjectIdentity", "Gauge32", "IpAddress", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
verilink = MibIdentifier((1, 3, 6, 1, 4, 1, 321))
hbu = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100))
ipad = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1))
ipadFrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 1))
ipadService = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 2))
ipadChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 3))
ipadDLCI = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 4))
ipadEndpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 5))
ipadUser = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 6))
ipadPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 7))
ipadModem = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 8))
ipadSvcAware = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 9))
ipadPktSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 10))
ipadTrapDest = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 11))
ipadMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 12))
ipadRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 13))
ipadSoftKey = MibIdentifier((1, 3, 6, 1, 4, 1, 321, 100, 1, 14))
ipadFrPortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1), )
if mibBuilder.loadTexts: ipadFrPortTable.setStatus('optional')
if mibBuilder.loadTexts: ipadFrPortTable.setDescription('Table of frame relay port parameters.')
ipadFrPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadFrPortService"))
if mibBuilder.loadTexts: ipadFrPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortTableEntry.setDescription('An entry in the ipad frame relay port table.')
ipadFrPortService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortService.setDescription('Index into the ipad frame relay port table; an entry in the ipad service table.')
ipadFrPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortActive.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortActive.setDescription('Specifies if the port is active.')
ipadFrPortLMIType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ccitt", 2), ("ansi", 3), ("lmi", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortLMIType.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortLMIType.setDescription('Specifies the link management information type used on this port.')
ipadFrPortLMIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sourcing", 2), ("monitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortLMIMode.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortLMIMode.setDescription('Specifies the link management information mode used on this port.')
ipadFrPortRxInvAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortRxInvAlmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortRxInvAlmThreshold.setDescription('Sets the rx invalid frames alarm threshold. Setting this field to 0 disables the alarm.')
ipadFrPortRxInvAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortRxInvAlmAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortRxInvAlmAlarm.setDescription('Reports if the invalid frames threshold has been exceeded.')
ipadFrPortTxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortTxAlmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortTxAlmThreshold.setDescription('Sets the tx throughput alarm threshold (in octets/second). Setting this field to 0 disables the alarm.')
ipadFrPortTxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortTxAlmAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortTxAlmAlarm.setDescription('Reports if the tx throughput threshold has been exceeded.')
ipadFrPortRxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadFrPortRxAlmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortRxAlmThreshold.setDescription('Sets the rx throughput alarm threshold (in octets/second). Setting this field to 0 disables the alarm.')
ipadFrPortRxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortRxAlmAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortRxAlmAlarm.setDescription('Reports if the rx throughput threshold has been exceeded.')
ipadServiceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1), )
if mibBuilder.loadTexts: ipadServiceTable.setStatus('optional')
if mibBuilder.loadTexts: ipadServiceTable.setDescription('The ipad service table.')
ipadServiceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadServiceIndex"))
if mibBuilder.loadTexts: ipadServiceTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadServiceTableEntry.setDescription('An entry in the ipad service table.')
ipadServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadServiceIndex.setDescription('The index for the ipad service table.')
ipadServiceifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 0), ("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadServiceifIndex.setDescription('The MIB-II ifIndex for this service.')
ipadServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("tdm", 2), ("ppp", 3), ("pppMonitor", 4), ("frameRelay", 5), ("frameRelayMonitor", 6), ("ip", 7), ("serial", 8), ("tty", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: ipadServiceType.setDescription('The type of this service.')
ipadServicePair = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServicePair.setStatus('mandatory')
if mibBuilder.loadTexts: ipadServicePair.setDescription('An entry in this table, which establishes a service pairing.')
ipadServiceAddService = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("addService", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceAddService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadServiceAddService.setDescription('Adds a row to the Service Table.')
ipadServiceDeleteService = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadServiceDeleteService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadServiceDeleteService.setDescription('Identifies a Service to be deleted; an index into the Service Table.')
ipadChannelTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1), )
if mibBuilder.loadTexts: ipadChannelTable.setStatus('optional')
if mibBuilder.loadTexts: ipadChannelTable.setDescription('The ipad channel table.')
ipadChannelTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadChannelifIndex"), (0, "IPAD-MIB", "ipadChannelIndex"))
if mibBuilder.loadTexts: ipadChannelTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadChannelTableEntry.setDescription('An entry in the ipad channel table.')
ipadChannelifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadChannelifIndex.setDescription('Primary index into ipad channel table, MIB-II ifIndex.')
ipadChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadChannelIndex.setDescription('Channel index for the physical interface.')
ipadChannelService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadChannelService.setDescription('Index into service table for this channel.')
ipadChannelPair = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelPair.setStatus('mandatory')
if mibBuilder.loadTexts: ipadChannelPair.setDescription('Pair for this channel; an entry in the channel table. Use service pair in service table to determine which service contains this channel.')
ipadChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rate56", 2), ("rate64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadChannelRate.setStatus('mandatory')
if mibBuilder.loadTexts: ipadChannelRate.setDescription('Rate for this channel.')
ipadDLCITable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1), )
if mibBuilder.loadTexts: ipadDLCITable.setStatus('optional')
if mibBuilder.loadTexts: ipadDLCITable.setDescription('The ipad DLCI table.')
ipadDLCITableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadDLCIservice"), (0, "IPAD-MIB", "ipadDLCInumber"))
if mibBuilder.loadTexts: ipadDLCITableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCITableEntry.setDescription('An entry in the ipad DLCI table.')
ipadDLCIservice = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIservice.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIservice.setDescription('An index into the ipad service table.')
ipadDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCInumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCInumber.setDescription('The DLCI number for this entry.')
ipadDLCIactive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3), ("pending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIactive.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIactive.setDescription('Specifies if the DLCI is active.')
ipadDLCIcongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIcongestion.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIcongestion.setDescription('Specifies if the dlci is receiving frames with FECN or BECN bit set.')
ipadDLCIremote = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremote.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIremote.setDescription('Remote DLCI number.')
ipadDLCIremoteUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremoteUnit.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIremoteUnit.setDescription('Name of the remote DLCI.')
ipadDLCIremoteEquipActive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("sosAlarm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIremoteEquipActive.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIremoteEquipActive.setDescription('Reports if the equipment attached to the remote unit is active.')
ipadDLCIencapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rfc1490", 2), ("proprietary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIencapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIencapsulation.setDescription('Type of protocol encapsulation used on this DLCI.')
ipadDLCIproprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("ipx", 3), ("ethertype", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIproprietary.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIproprietary.setDescription('When the encapsulation is proprietary, the traffic type must be configured to gather protocol specific statistics.')
ipadDLCIpropOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIpropOffset.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIpropOffset.setDescription('When the encapsulation is proprietary, this is the number of bytes after the frame relay header to look for the specified protocol decode.')
ipadDLCIinBand = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIinBand.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIinBand.setDescription('Determines if frames on this DLCI will be parsed to look for management frames destined for the unit itself.')
ipadDLCICIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCICIR.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCICIR.setDescription('Default committed information rate in bits per second.')
ipadDLCIBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIBe.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIBe.setDescription('Default excess burst rate in bits per second.')
ipadDLCIminBC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIminBC.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIminBC.setDescription('If the corresponding interface is configured to enable congestion management, the minimum transfer rate at which the unit will throttle back offering data to the network.')
ipadDLCIrxMon = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIrxMon.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIrxMon.setDescription('Determines if the SLA parameters will be monitored for received frames.')
ipadDLCIdEctrl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIdEctrl.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIdEctrl.setDescription('Determines if the Rx monitor will set the DE bit on all frames received in excess of the CIR before they are switched to their destination port.')
ipadDLCIenableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIenableDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIenableDelay.setDescription('Enable or disable delay.')
ipadDLCItxExCIRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCItxExCIRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCItxExCIRThreshold.setDescription('Sets the Tx over CIR alarm threshold. This threshold is the number of octets per second in excess of CIR. Setting this field to 0 disables the alarm.')
ipadDLCItxExCIRAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCItxExCIRAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCItxExCIRAlarm.setDescription('Reports if the Tx over CIR threshold has been exceeded.')
ipadDLCItxExBeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCItxExBeThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCItxExBeThreshold.setDescription('Sets the Tx over Be alarm threshold. This threshold is the number of octets per second in excess of Be. Setting this field to 0 disables the alarm.')
ipadDLCItxExBeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCItxExBeAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCItxExBeAlarm.setDescription('Reports if the Tx over Be threshold has been exceeded.')
ipadDLCIrxCongThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIrxCongThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIrxCongThreshold.setDescription('Sets the Rx congestion alarm threshold. This threshold is the number of frames received with BECN/FECN. Setting this field to 0 disables the alarm.')
ipadDLCIrxCongAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIrxCongAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIrxCongAlarm.setDescription('Reports if the Rx congestion threshold has been exceeded.')
ipadDLCIrxBECNinCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("alarmCondition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIrxBECNinCIR.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIrxBECNinCIR.setDescription('Reports if BECN has been received within CIR.')
ipadDLCIUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadDLCIUASThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIUASThreshold.setDescription('Sets the UAS (unavailable seconds) alarm threshold. This threshold is the number of seconds passed that the DLCI is unavailable. Setting this field to 0 disables the alarm.')
ipadDLCIUASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIUASAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIUASAlarm.setDescription('Reports if the UAS threshold has been exceeded.')
ipadDLCILastChange = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 4, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCILastChange.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCILastChange.setDescription('Time of the last change in the DLCI table.')
ipadEndpointTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1), )
if mibBuilder.loadTexts: ipadEndpointTable.setStatus('optional')
if mibBuilder.loadTexts: ipadEndpointTable.setDescription('The ipad endpoint table.')
ipadEndpointTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadEndpointIndex"))
if mibBuilder.loadTexts: ipadEndpointTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointTableEntry.setDescription('An entry in the ipad endpoint table.')
ipadEndpointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadEndpointIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointIndex.setDescription('The index into the ipad endpoint table.')
ipadEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointName.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointName.setDescription('The name for the endpoint.')
ipadEndpointService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointService.setDescription('An index into the ipad service table.')
ipadEndpointDLCInumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointDLCInumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointDLCInumber.setDescription('Data link connection identifier for this endpoint; The DLCI number for this entry.')
ipadEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("switched", 3), ("ipRoute", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointType.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointType.setDescription('Endpoint type.')
ipadEndpointForward = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointForward.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointForward.setDescription('Index into the endpoint names table. This is the endpoint on which data should be forwarded for switched endpoints.')
ipadEndpointBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointBackup.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointBackup.setDescription('Index into the endpoint table. This is the endpoint on which data should be forwarded in the case where the endpoint becomes inactive.')
ipadEndpointRefSLP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRefSLP.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointRefSLP.setDescription('Index into the endpoint table. The service level parameters can be copied from another configured endpoint.')
ipadEndpointRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointRemoteIpAddr.setDescription('IP address for remote.')
ipadEndpointRemoteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointRemoteIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointRemoteIpMask.setDescription('IP address mask for remote.')
ipadEndpointAddEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointAddEndpoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointAddEndpoint.setDescription('Identifies an Endpoint to be added.')
ipadEndpointDeleteEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadEndpointDeleteEndpoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointDeleteEndpoint.setDescription('Identifies an Endpoint to be deleted.')
ipadEndpointLastChange = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadEndpointLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: ipadEndpointLastChange.setDescription('Time of the last change in the Endpoint table.')
ipadUserTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1), )
if mibBuilder.loadTexts: ipadUserTable.setStatus('optional')
if mibBuilder.loadTexts: ipadUserTable.setDescription('Table of user selected parameters.')
ipadUserTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadUserIndex"))
if mibBuilder.loadTexts: ipadUserTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserTableEntry.setDescription('An entry in the ipad user table.')
ipadUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIndex.setDescription('Index into the ipad user table.')
ipadUserFilterByDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserFilterByDLCI.setDescription('Enables Service+DLCI filtering for this user statistic.')
ipadUserService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserService.setDescription('Specifies the service for this user type; identifies an entry in the ipad DLCI table when combined with ipadUserDLCI. Meaningful when ipadUserFilterByDLCI is enabled. Meaningless when collecting PPP statistics.')
ipadUserDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserDLCI.setDescription('Specifies the DLCI for this user type; identifies an entry in the ipad DLCI table when combined with ipadUserService. Meaningful when ipadUserFilterByDLCI is enabled. Meaningless when collecting PPP statistics.')
ipadUserFilterByIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserFilterByIPAddress.setDescription('Enables IP address filtering for this user statistic. A packet is counted towards the user statistics if the result of a bitwise-and of an IP address in a transmitted packet with ipadUserIPMask equals ipadUserIPAddress.')
ipadUserIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPAddress.setDescription('Specifies the IP address for this user type.')
ipadUserIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPMask.setDescription('Specifies the IP address mask for this user type.')
ipadUserFilterByIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserFilterByIPPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserFilterByIPPort.setDescription('Enables IP Port filtering for this user statistic.')
ipadUserIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 7, 11, 17, 20, 21, 23, 25, 31, 37, 42, 53, 66, 69, 70, 79, 80, 88, 92, 101, 107, 109, 110, 111, 113, 119, 137, 138, 139, 153, 161, 162, 163, 164, 169, 179, 194, 201, 202, 204, 206, 213, 395, 396, 444, 494, 533, 540, 541, 600, 749))).clone(namedValues=NamedValues(("rje", 5), ("echo", 7), ("systat", 11), ("qotd", 17), ("ftpdata", 20), ("ftp", 21), ("telnet", 23), ("smtp", 25), ("msgauth", 31), ("time", 37), ("nameserver", 42), ("domain", 53), ("sqlnet", 66), ("tftp", 69), ("gopher", 70), ("finger", 79), ("http", 80), ("kerberos", 88), ("npp", 92), ("hostname", 101), ("rtelnet", 107), ("pop2", 109), ("pop3", 110), ("sunrpc", 111), ("auth", 113), ("nntp", 119), ("netbiosns", 137), ("netbiosdgm", 138), ("netbiosssn", 139), ("sgmp", 153), ("snmp", 161), ("snmptrap", 162), ("cmipman", 163), ("cmipagent", 164), ("send", 169), ("bgp", 179), ("irc", 194), ("atrtmp", 201), ("atnbp", 202), ("atecho", 204), ("atzis", 206), ("ipx", 213), ("netcp", 395), ("netwareip", 396), ("snpp", 444), ("povray", 494), ("netwall", 533), ("uucp", 540), ("uucprlogin", 541), ("ipcserver", 600), ("kerberosadm", 749)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPPort.setDescription('Specifies the IP port for this user type.')
ipadUserTxAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserTxAlmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserTxAlmThreshold.setDescription('Sets the tx throughput alarm threshold in octets per second. Setting this field to 0 disables the alarm.')
ipadUserTxAlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("thresholdExceeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserTxAlmAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserTxAlmAlarm.setDescription('Reports if the tx throughput threshold has been exceeded.')
ipadUserIPStatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPStatTimeRemaining.setDescription('Specifies seconds until the next IP TopN report is generated.')
ipadUserIPStatTimeDuration = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatTimeDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPStatTimeDuration.setDescription('The value of TimeRemaining when TimeRemaining was last set. Indicates the number of seconds that the next IP TopN report will cover.')
ipadUserIPStatStartTime = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPStatStartTime.setDescription('The value of SysUpTime when TimeRemaining was last set.')
ipadUserIPStatRequestedReportSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatRequestedReportSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPStatRequestedReportSize.setDescription('Determines the requested maximum number of entries in the topN report.')
ipadUserIPStatGrantedReportSize = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatGrantedReportSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPStatGrantedReportSize.setDescription('Determines the granted number of entries in the topN report. This is by definition less than or equal to requested report size.')
ipadUserIPStatReportNumber = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserIPStatReportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPStatReportNumber.setDescription('Specifies the number of reports that have been generated. This value resets to zero when the unit is restarted.')
ipadUserIPStatDiscardType = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("byTime", 1), ("byFrames", 2), ("byOctets", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadUserIPStatDiscardType.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserIPStatDiscardType.setDescription('The internal table used to track TopN statistics is finite in size. On the condition when the internal table is full and a new IP address is encountered, an element already existing in the table must be removed. This variable determines the manner of selection. Writing byTime(1) will cause the entry with the least recent frame to be discarded. That is, all other entries in the table will have transmitted or received at least one packet more recently. Writing byFrames(2) will select the entry with the fewest transmitted or received frames. Writing byOctets(3) will select the entry with the fewest transmitted or received octets. The default is byTime(1).')
ipadPPPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1), )
if mibBuilder.loadTexts: ipadPPPCfgTable.setStatus('optional')
if mibBuilder.loadTexts: ipadPPPCfgTable.setDescription('The ipad PPP configuration table.')
ipadPPPCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadPPPCfgService"))
if mibBuilder.loadTexts: ipadPPPCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgTableEntry.setDescription('An entry in the ipad PPP configuration table.')
ipadPPPCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPCfgService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgService.setDescription('The index into the PPP configuration table; an entry in the ipad service table.')
ipadPPPCfgDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("direct", 2), ("dialup", 3), ("demanddial", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgDialMode.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgDialMode.setDescription('Determines the permancency of a communications connection.')
ipadPPPCfgInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgInactivityTimer.setDescription('Determines when a dial-up or demand-dial connection will be disconnected due to inactivity in both directions. When this parameter is set to zero then the timer is disabled.')
ipadPPPCfgNegotiationInit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegotiationInit.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegotiationInit.setDescription('Determines if the port waits for the other end to initiate parameter negotiations.')
ipadPPPCfgMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgMRU.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgMRU.setDescription('The maximum receive unit the interface will accept. Valid values are in the range 128 - 4096, default is 1500.')
ipadPPPCfgACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgACCM.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgACCM.setDescription('Sets the async control character map used when generating async HDLC frames. Setting a bit in the map causes the corresponding character to be mapped for transparency.')
ipadPPPCfgNegMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegMRU.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegMRU.setDescription('Determines if MRU size is negotiated.')
ipadPPPCfgNegACCM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegACCM.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegACCM.setDescription('Determines if ACCM is negotiated.')
ipadPPPCfgNegMagic = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegMagic.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegMagic.setDescription('Determines if the magic number is negotiated.')
ipadPPPCfgNegCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegCompression.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegCompression.setDescription('Determines if the PPP protocol header compression is negotiated.')
ipadPPPCfgNegAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegAddress.setDescription('Determines if the PPP HDLC header compression is negotiated.')
ipadPPPCfgNegPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegPAP.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegPAP.setDescription('Determines if PAP is negotiated with the peer when a more secure authentication protocol is rejected.')
ipadPPPCfgNegCHAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegCHAP.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegCHAP.setDescription('Determines if CHAP is negotiated with the peer when a more secure authentication protocol is rejected.')
ipadPPPCfgAllowPAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAllowPAP.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgAllowPAP.setDescription('Determines if PAP is allowed to be negotiated by the peer.')
ipadPPPCfgAllowCHAP = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAllowCHAP.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgAllowCHAP.setDescription('Determines if CHAP is allowed to be negotiated by the peer.')
ipadPPPCfgPAPUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPAPUsername.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgPAPUsername.setDescription('Identification string to determine the user identity.')
ipadPPPCfgPAPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPAPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgPAPPassword.setDescription('Password string to validate the user identity.')
ipadPPPCfgCHAPUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgCHAPUsername.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgCHAPUsername.setDescription('Identification string to determine the user identity.')
ipadPPPCfgCHAPSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgCHAPSecret.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgCHAPSecret.setDescription('Password string to validate the user identity.')
ipadPPPCfgPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgPortIpAddress.setDescription("Sets the IP address of the unit's port.")
ipadPPPCfgPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgPeerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgPeerIpAddress.setDescription("Sets the IP address of the unit's peer.")
ipadPPPCfgNegIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegIpAddress.setDescription('Determines if IP addresses are dynamically negotiated.')
ipadPPPCfgNegIPCPCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgNegIPCPCompression.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgNegIPCPCompression.setDescription('Determines if Van Jacobson TCPIP header compression is negotiated.')
ipadPPPCfgSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgSubnetMask.setDescription('Specifies the subnet mask.')
ipadPPPCfgAuthChallengeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCfgAuthChallengeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCfgAuthChallengeInterval.setDescription('Specifies the authentication challenge interval.')
ipadPPPPAPTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2), )
if mibBuilder.loadTexts: ipadPPPPAPTable.setStatus('optional')
if mibBuilder.loadTexts: ipadPPPPAPTable.setDescription('Table of PAP authentication parameters.')
ipadPPPPAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1), ).setIndexNames((0, "IPAD-MIB", "ipadPPPPAPTableIndex"))
if mibBuilder.loadTexts: ipadPPPPAPTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPPAPTableEntry.setDescription('An entry in the ipad PPP PAP table.')
ipadPPPPAPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPPAPTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPPAPTableIndex.setDescription('The index into the PPP PAP association table.')
ipadPPPPAPTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPPAPTableUsername.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPPAPTableUsername.setDescription('Identification string to identify the user.')
ipadPPPPAPTablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPPAPTablePassword.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPPAPTablePassword.setDescription('Password string to validate the user identity.')
ipadPPPCHAPTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3), )
if mibBuilder.loadTexts: ipadPPPCHAPTable.setStatus('optional')
if mibBuilder.loadTexts: ipadPPPCHAPTable.setDescription('Table of CHAP authentication parameters.')
ipadPPPCHAPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1), ).setIndexNames((0, "IPAD-MIB", "ipadPPPCHAPTableIndex"))
if mibBuilder.loadTexts: ipadPPPCHAPTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCHAPTableEntry.setDescription('An entry in the ipad PPP CHAP table.')
ipadPPPCHAPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPPPCHAPTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCHAPTableIndex.setDescription('The index into the PPP CHAP association table.')
ipadPPPCHAPTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCHAPTableUsername.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCHAPTableUsername.setDescription('Identification string to identify the user.')
ipadPPPCHAPTableSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPPPCHAPTableSecret.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPPPCHAPTableSecret.setDescription('Password string to validate the user identity.')
ipadModemDialTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1), )
if mibBuilder.loadTexts: ipadModemDialTable.setStatus('optional')
if mibBuilder.loadTexts: ipadModemDialTable.setDescription('Table of modem dialing parameters.')
ipadModemDialTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadModemDialTableIndex"))
if mibBuilder.loadTexts: ipadModemDialTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialTableEntry.setDescription('An entry in the ipad modem dialing parameters table.')
ipadModemDialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDialTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialTableIndex.setDescription('The index into the ipad modem dialing parameters table. Equivalent to MIB-II ifIndex.')
ipadModemDialDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialDataIndex.setDescription('An index into the Modem Data Table, which selects a modem.')
ipadModemDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialNumber.setDescription('Specifies the telephone number to dial.')
ipadModemDialAbortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialAbortTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialAbortTimer.setDescription('Aborts a connection attempt if an initialed dial-up connection has failed to connect within the specified number of seconds. Range is 1..255.')
ipadModemDialRedialAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialRedialAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialRedialAttempts.setDescription('Determines how many attempts to initiate a dial-up connection after the initial failure. Range is 0..10.')
ipadModemDialDelayBeforeRedial = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialDelayBeforeRedial.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialDelayBeforeRedial.setDescription('Specifies the number of seconds to wait before redialing. Range is 1..255.')
ipadModemDialLoginScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialLoginScript.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialLoginScript.setDescription('Script string interpreted after a dial-up connection is first established.')
ipadModemDialUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialUsername.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialUsername.setDescription('Identification string to determine the user identity.')
ipadModemDialPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDialPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDialPassword.setDescription('Password string to validate the user identity.')
ipadModemDataTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2), )
if mibBuilder.loadTexts: ipadModemDataTable.setStatus('optional')
if mibBuilder.loadTexts: ipadModemDataTable.setDescription('Table of modem database parameters.')
ipadModemDataTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1), ).setIndexNames((0, "IPAD-MIB", "ipadModemDataTableIndex"))
if mibBuilder.loadTexts: ipadModemDataTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDataTableEntry.setDescription('An entry in the ipad modem database parameters table.')
ipadModemDataTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadModemDataTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDataTableIndex.setDescription('The index into the ipad modem database parameters table.')
ipadModemDataModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataModemName.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDataModemName.setDescription('Identification string for the modem database.')
ipadModemDataSetupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataSetupScript.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDataSetupScript.setDescription('Script interpreted when a modem port is first started.')
ipadModemDataDialingScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataDialingScript.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDataDialingScript.setDescription('Script interpreted when a dial-up connection is initiated.')
ipadModemDataAnswerScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataAnswerScript.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDataAnswerScript.setDescription('Script interpreted when a modem port is waiting for an incoming call.')
ipadModemDataHangupScript = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadModemDataHangupScript.setStatus('mandatory')
if mibBuilder.loadTexts: ipadModemDataHangupScript.setDescription('Script interpreted when a dial-up connection is no longer needed.')
ipadFrPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1), )
if mibBuilder.loadTexts: ipadFrPortStatsTable.setStatus('optional')
if mibBuilder.loadTexts: ipadFrPortStatsTable.setDescription('Port statistics.')
ipadFrPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadFrPortStatsService"), (0, "IPAD-MIB", "ipadFrPortStatsPeriod"))
if mibBuilder.loadTexts: ipadFrPortStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsEntry.setDescription('An entry in the service aware ports statistics table.')
ipadFrPortStatsService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsService.setDescription('Port index in the ipadFrPortStats table; an entry in the ipad service table.')
ipadFrPortStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("portStatsSummary", 1), ("portStatsCurrent", 2), ("portStatsperiod1", 3), ("portStatsperiod2", 4), ("portStatsperiod3", 5), ("portStatsperiod4", 6), ("portStatsperiod5", 7), ("portStatsperiod6", 8), ("portStatsperiod7", 9), ("portStatsperiod8", 10), ("portStatsperiod9", 11), ("portStatsperiod10", 12), ("portStatsperiod11", 13), ("portStatsperiod12", 14), ("portStatsperiod13", 15), ("portStatsperiod14", 16), ("portStatsperiod15", 17), ("portStatsperiod16", 18), ("portStatsperiod17", 19), ("portStatsperiod18", 20), ("portStatsperiod19", 21), ("portStatsperiod20", 22), ("portStatsperiod21", 23), ("portStatsperiod22", 24), ("portStatsperiod23", 25), ("portStatsperiod24", 26), ("portStatsperiod25", 27), ("portStatsperiod26", 28), ("portStatsperiod27", 29), ("portStatsperiod28", 30), ("portStatsperiod29", 31), ("portStatsperiod30", 32), ("portStatsperiod31", 33), ("portStatsperiod32", 34), ("portStatsperiod33", 35), ("portStatsperiod34", 36), ("portStatsperiod35", 37), ("portStatsperiod36", 38), ("portStatsperiod37", 39), ("portStatsperiod38", 40), ("portStatsperiod39", 41), ("portStatsperiod40", 42), ("portStatsperiod41", 43), ("portStatsperiod42", 44), ("portStatsperiod43", 45), ("portStatsperiod44", 46), ("portStatsperiod45", 47), ("portStatsperiod46", 48), ("portStatsperiod47", 49), ("portStatsperiod48", 50), ("portStatsperiod49", 51), ("portStatsperiod50", 52), ("portStatsperiod51", 53), ("portStatsperiod52", 54), ("portStatsperiod53", 55), ("portStatsperiod54", 56), ("portStatsperiod55", 57), ("portStatsperiod56", 58), ("portStatsperiod57", 59), ("portStatsperiod58", 60), ("portStatsperiod59", 61), ("portStatsperiod60", 62), ("portStatsperiod61", 63), ("portStatsperiod62", 64), ("portStatsperiod63", 65), ("portStatsperiod64", 66), ("portStatsperiod65", 67), ("portStatsperiod66", 68), ("portStatsperiod67", 69), ("portStatsperiod68", 70), ("portStatsperiod69", 71), ("portStatsperiod70", 72), ("portStatsperiod71", 73), ("portStatsperiod72", 74), ("portStatsperiod73", 75), ("portStatsperiod74", 76), ("portStatsperiod75", 77), ("portStatsperiod76", 78), ("portStatsperiod77", 79), ("portStatsperiod78", 80), ("portStatsperiod79", 81), ("portStatsperiod80", 82), ("portStatsperiod81", 83), ("portStatsperiod82", 84), ("portStatsperiod83", 85), ("portStatsperiod84", 86), ("portStatsperiod85", 87), ("portStatsperiod86", 88), ("portStatsperiod87", 89), ("portStatsperiod88", 90), ("portStatsperiod89", 91), ("portStatsperiod90", 92), ("portStatsperiod91", 93), ("portStatsperiod92", 94), ("portStatsperiod93", 95), ("portStatsperiod94", 96), ("portStatsperiod95", 97), ("portStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsPeriod.setDescription('The index into the port stats 24-hour table.')
ipadFrPortStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsTxFrames.setDescription('Number of transmitted frames for the period.')
ipadFrPortStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxFrames.setDescription('Number of received frames for the period.')
ipadFrPortStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsTxOctets.setDescription('Number of transmitted octets for the period.')
ipadFrPortStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxOctets.setDescription('Number of received octets for the period.')
ipadFrPortStatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtFrames.setDescription('Number of transmitted management frames for the period.')
ipadFrPortStatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtFrames.setDescription('Number of received management frames for the period.')
ipadFrPortStatsTxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsTxMgmtOctets.setDescription('Number of transmitted management octets for the period.')
ipadFrPortStatsRxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxMgmtOctets.setDescription('Number of received management octets for the period.')
ipadFrPortStatsRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxFECN.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxFECN.setDescription('Number of received frames with FECN set for the period.')
ipadFrPortStatsRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxBECN.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxBECN.setDescription('Number of received frames with BECN set for the period.')
ipadFrPortStatsRxInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInvalid.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxInvalid.setDescription('Number of invalid received frames for the period.')
ipadFrPortStatsTxStatInq = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxStatInq.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsTxStatInq.setDescription('Number of transmitted status inquiry frames for the period.')
ipadFrPortStatsRxStatInq = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxStatInq.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxStatInq.setDescription('Number of received status inquiry frames for the period.')
ipadFrPortStatsTxStatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsTxStatResp.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsTxStatResp.setDescription('Number of transmitted status response frames for the period.')
ipadFrPortStatsRxStatResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxStatResp.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxStatResp.setDescription('Number of received status response frames for the period.')
ipadFrPortStatsRxInvLMI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsRxInvLMI.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsRxInvLMI.setDescription('Number of received frames with an invalid LMI for the period.')
ipadFrPortStatsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsPeak.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsPeak.setDescription('Peak throughput rate for the period (in octets/second).')
ipadFrPortStatsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadFrPortStatsAverage.setStatus('mandatory')
if mibBuilder.loadTexts: ipadFrPortStatsAverage.setDescription('Average throughput rate for the period (in octets/second).')
ipadDLCIstatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2), )
if mibBuilder.loadTexts: ipadDLCIstatsTable.setStatus('optional')
if mibBuilder.loadTexts: ipadDLCIstatsTable.setDescription('Port statistics.')
ipadDLCIstatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1), ).setIndexNames((0, "IPAD-MIB", "ipadDLCIstatsService"), (0, "IPAD-MIB", "ipadDLCIstatsDLCI"), (0, "IPAD-MIB", "ipadDLCIstatsPeriod"))
if mibBuilder.loadTexts: ipadDLCIstatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsEntry.setDescription('An entry in the service aware DLCI statistics table.')
ipadDLCIstatsService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsService.setDescription('The service index for the service aware stats table; identifies an entry in the ipad DLCI table when combined with ipadDLCIstatsDLCI.')
ipadDLCIstatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsDLCI.setDescription('The DLCI index for the service aware stats table; identifies an entry in the ipad DLCI table when combined with ipadDLCIstatsService.')
ipadDLCIstatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("dlciStatsSummary", 1), ("dlciStatsCurrent", 2), ("dlciStatsperiod1", 3), ("dlciStatsperiod2", 4), ("dlciStatsperiod3", 5), ("dlciStatsperiod4", 6), ("dlciStatsperiod5", 7), ("dlciStatsperiod6", 8), ("dlciStatsperiod7", 9), ("dlciStatsperiod8", 10), ("dlciStatsperiod9", 11), ("dlciStatsperiod10", 12), ("dlciStatsperiod11", 13), ("dlciStatsperiod12", 14), ("dlciStatsperiod13", 15), ("dlciStatsperiod14", 16), ("dlciStatsperiod15", 17), ("dlciStatsperiod16", 18), ("dlciStatsperiod17", 19), ("dlciStatsperiod18", 20), ("dlciStatsperiod19", 21), ("dlciStatsperiod20", 22), ("dlciStatsperiod21", 23), ("dlciStatsperiod22", 24), ("dlciStatsperiod23", 25), ("dlciStatsperiod24", 26), ("dlciStatsperiod25", 27), ("dlciStatsperiod26", 28), ("dlciStatsperiod27", 29), ("dlciStatsperiod28", 30), ("dlciStatsperiod29", 31), ("dlciStatsperiod30", 32), ("dlciStatsperiod31", 33), ("dlciStatsperiod32", 34), ("dlciStatsperiod33", 35), ("dlciStatsperiod34", 36), ("dlciStatsperiod35", 37), ("dlciStatsperiod36", 38), ("dlciStatsperiod37", 39), ("dlciStatsperiod38", 40), ("dlciStatsperiod39", 41), ("dlciStatsperiod40", 42), ("dlciStatsperiod41", 43), ("dlciStatsperiod42", 44), ("dlciStatsperiod43", 45), ("dlciStatsperiod44", 46), ("dlciStatsperiod45", 47), ("dlciStatsperiod46", 48), ("dlciStatsperiod47", 49), ("dlciStatsperiod48", 50), ("dlciStatsperiod49", 51), ("dlciStatsperiod50", 52), ("dlciStatsperiod51", 53), ("dlciStatsperiod52", 54), ("dlciStatsperiod53", 55), ("dlciStatsperiod54", 56), ("dlciStatsperiod55", 57), ("dlciStatsperiod56", 58), ("dlciStatsperiod57", 59), ("dlciStatsperiod58", 60), ("dlciStatsperiod59", 61), ("dlciStatsperiod60", 62), ("dlciStatsperiod61", 63), ("dlciStatsperiod62", 64), ("dlciStatsperiod63", 65), ("dlciStatsperiod64", 66), ("dlciStatsperiod65", 67), ("dlciStatsperiod66", 68), ("dlciStatsperiod67", 69), ("dlciStatsperiod68", 70), ("dlciStatsperiod69", 71), ("dlciStatsperiod70", 72), ("dlciStatsperiod71", 73), ("dlciStatsperiod72", 74), ("dlciStatsperiod73", 75), ("dlciStatsperiod74", 76), ("dlciStatsperiod75", 77), ("dlciStatsperiod76", 78), ("dlciStatsperiod77", 79), ("dlciStatsperiod78", 80), ("dlciStatsperiod79", 81), ("dlciStatsperiod80", 82), ("dlciStatsperiod81", 83), ("dlciStatsperiod82", 84), ("dlciStatsperiod83", 85), ("dlciStatsperiod84", 86), ("dlciStatsperiod85", 87), ("dlciStatsperiod86", 88), ("dlciStatsperiod87", 89), ("dlciStatsperiod88", 90), ("dlciStatsperiod89", 91), ("dlciStatsperiod90", 92), ("dlciStatsperiod91", 93), ("dlciStatsperiod92", 94), ("dlciStatsperiod93", 95), ("dlciStatsperiod94", 96), ("dlciStatsperiod95", 97), ("dlciStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsPeriod.setDescription('The index into the DLCI stats 24-hour table.')
ipadDLCIstatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsTxFrames.setDescription('The number of transmitted frames for the period.')
ipadDLCIstatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsRxFrames.setDescription('The number of received frames for the period.')
ipadDLCIstatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsTxOctets.setDescription('The number of transmitted octets for the period.')
ipadDLCIstatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsRxOctets.setDescription('The number of received octets for the period.')
ipadDLCIstatsRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxFECN.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsRxFECN.setDescription('The number of received frames with FECN set for the period.')
ipadDLCIstatsRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxBECN.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsRxBECN.setDescription('The number of received frames with BECN set for the period.')
ipadDLCIstatsRxDE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxDE.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsRxDE.setDescription('The number of received frames with DE bit set for the period.')
ipadDLCIstatsTxExcessCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessCIR.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessCIR.setDescription('The number of transmitted octets in excess of CIR for the period.')
ipadDLCIstatsTxExcessBe = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessBe.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsTxExcessBe.setDescription('The number of transmitted octets in excess of Be for the period.')
ipadDLCIstatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtFrames.setDescription('The number of transmitted management frames for the period.')
ipadDLCIstatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtFrames.setDescription('The number of received management frames for the period.')
ipadDLCIstatsTxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsTxMgmtOctets.setDescription('The number of transmitted management octets for the period.')
ipadDLCIstatsRxMgmtOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsRxMgmtOctets.setDescription('The number of received management octets for the period.')
ipadDLCIstatsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsPeak.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsPeak.setDescription('Peak throughput rate for the period (in octets/second).')
ipadDLCIstatsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsAverage.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsAverage.setDescription('Average throughput rate for the period (in octets/second).')
ipadDLCIstatsDelayPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDelayPeak.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsDelayPeak.setDescription('Peak roundtrip delay for the period.')
ipadDLCIstatsDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsDelayAverage.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsDelayAverage.setDescription('Average roundtrip delay for the period.')
ipadDLCIstatsRoundTripTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsRoundTripTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsRoundTripTimeouts.setDescription('Number of timeouts on roundtrip delay for the period.')
ipadDLCIstatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadDLCIstatsUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ipadDLCIstatsUAS.setDescription('Number of seconds the DLCI is unavailable.')
ipadUserStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3), )
if mibBuilder.loadTexts: ipadUserStatsTable.setStatus('optional')
if mibBuilder.loadTexts: ipadUserStatsTable.setDescription('User-selected protocol statistics.')
ipadUserStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1), ).setIndexNames((0, "IPAD-MIB", "ipadUserStatsIndex"), (0, "IPAD-MIB", "ipadUserStatsPeriod"))
if mibBuilder.loadTexts: ipadUserStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsEntry.setDescription('An entry in the user statistics table.')
ipadUserStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsIndex.setDescription('Index into the user statistics table.')
ipadUserStatsPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("userStatsSummary", 1), ("userStatsCurrent", 2), ("userStatsperiod1", 3), ("userStatsperiod2", 4), ("userStatsperiod3", 5), ("userStatsperiod4", 6), ("userStatsperiod5", 7), ("userStatsperiod6", 8), ("userStatsperiod7", 9), ("userStatsperiod8", 10), ("userStatsperiod9", 11), ("userStatsperiod10", 12), ("userStatsperiod11", 13), ("userStatsperiod12", 14), ("userStatsperiod13", 15), ("userStatsperiod14", 16), ("userStatsperiod15", 17), ("userStatsperiod16", 18), ("userStatsperiod17", 19), ("userStatsperiod18", 20), ("userStatsperiod19", 21), ("userStatsperiod20", 22), ("userStatsperiod21", 23), ("userStatsperiod22", 24), ("userStatsperiod23", 25), ("userStatsperiod24", 26), ("userStatsperiod25", 27), ("userStatsperiod26", 28), ("userStatsperiod27", 29), ("userStatsperiod28", 30), ("userStatsperiod29", 31), ("userStatsperiod30", 32), ("userStatsperiod31", 33), ("userStatsperiod32", 34), ("userStatsperiod33", 35), ("userStatsperiod34", 36), ("userStatsperiod35", 37), ("userStatsperiod36", 38), ("userStatsperiod37", 39), ("userStatsperiod38", 40), ("userStatsperiod39", 41), ("userStatsperiod40", 42), ("userStatsperiod41", 43), ("userStatsperiod42", 44), ("userStatsperiod43", 45), ("userStatsperiod44", 46), ("userStatsperiod45", 47), ("userStatsperiod46", 48), ("userStatsperiod47", 49), ("userStatsperiod48", 50), ("userStatsperiod49", 51), ("userStatsperiod50", 52), ("userStatsperiod51", 53), ("userStatsperiod52", 54), ("userStatsperiod53", 55), ("userStatsperiod54", 56), ("userStatsperiod55", 57), ("userStatsperiod56", 58), ("userStatsperiod57", 59), ("userStatsperiod58", 60), ("userStatsperiod59", 61), ("userStatsperiod60", 62), ("userStatsperiod61", 63), ("userStatsperiod62", 64), ("userStatsperiod63", 65), ("userStatsperiod64", 66), ("userStatsperiod65", 67), ("userStatsperiod66", 68), ("userStatsperiod67", 69), ("userStatsperiod68", 70), ("userStatsperiod69", 71), ("userStatsperiod70", 72), ("userStatsperiod71", 73), ("userStatsperiod72", 74), ("userStatsperiod73", 75), ("userStatsperiod74", 76), ("userStatsperiod75", 77), ("userStatsperiod76", 78), ("userStatsperiod77", 79), ("userStatsperiod78", 80), ("userStatsperiod79", 81), ("userStatsperiod80", 82), ("userStatsperiod81", 83), ("userStatsperiod82", 84), ("userStatsperiod83", 85), ("userStatsperiod84", 86), ("userStatsperiod85", 87), ("userStatsperiod86", 88), ("userStatsperiod87", 89), ("userStatsperiod88", 90), ("userStatsperiod89", 91), ("userStatsperiod90", 92), ("userStatsperiod91", 93), ("userStatsperiod92", 94), ("userStatsperiod93", 95), ("userStatsperiod94", 96), ("userStatsperiod95", 97), ("userStatsperiod96", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsPeriod.setDescription('The index into the user stats 24-hour table.')
ipadUserStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsTxFrames.setDescription('Number of transmitted frames for the period.')
ipadUserStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsRxFrames.setDescription('Number of received frames for the period.')
ipadUserStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsTxOctets.setDescription('Number of transmitted octets for the period.')
ipadUserStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsRxOctets.setDescription('Number of received octets for the period.')
ipadUserStatsTxRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxRatePeak.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsTxRatePeak.setDescription('Peak throughput rate for the period (in octets/second).')
ipadUserStatsTxRateAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadUserStatsTxRateAverage.setStatus('mandatory')
if mibBuilder.loadTexts: ipadUserStatsTxRateAverage.setDescription('Average throughput rate for the period (in octets/second).')
ipadIPTopNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4), )
if mibBuilder.loadTexts: ipadIPTopNStatsTable.setStatus('optional')
if mibBuilder.loadTexts: ipadIPTopNStatsTable.setDescription('IP TopN statistics.')
ipadIPTopNStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1), ).setIndexNames((0, "IPAD-MIB", "ipadIPTopNStatsIndex"))
if mibBuilder.loadTexts: ipadIPTopNStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadIPTopNStatsEntry.setDescription('An entry in the user statistics table.')
ipadIPTopNStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadIPTopNStatsIndex.setDescription('Index into the IP TopN statistics table.')
ipadIPTopNStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipadIPTopNStatsAddress.setDescription('IP address of this entry.')
ipadIPTopNStatsTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ipadIPTopNStatsTimestamp.setDescription('Time of last IP frame for this entry.')
ipadIPTopNStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadIPTopNStatsRxFrames.setDescription('Number of received IP frames for this entry.')
ipadIPTopNStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadIPTopNStatsRxOctets.setDescription('Number of received IP octets for this entry.')
ipadIPTopNStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ipadIPTopNStatsTxFrames.setDescription('Number of transmitted IP frames for this entry.')
ipadIPTopNStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 9, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadIPTopNStatsTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ipadIPTopNStatsTxOctets.setDescription('Number of transmitted IP octets for this entry.')
ipadPktSwOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("tdm", 2), ("monitor", 3), ("packet", 4), ("remoteConfig", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwOperatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwOperatingMode.setDescription('Selects overall mode of operation.')
ipadPktSwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2), )
if mibBuilder.loadTexts: ipadPktSwCfgTable.setStatus('optional')
if mibBuilder.loadTexts: ipadPktSwCfgTable.setDescription('The ipad packet switch configuration table.')
ipadPktSwCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1), ).setIndexNames((0, "IPAD-MIB", "ipadPktSwCfgService"))
if mibBuilder.loadTexts: ipadPktSwCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgTableEntry.setDescription('An entry in the ipad packet switch configuration table.')
ipadPktSwCfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadPktSwCfgService.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgService.setDescription('The index into the packet switch configuration table; an entry in the ipad Service table.')
ipadPktSwCfgInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uni", 1), ("ni", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgInterfaceType.setDescription('Network ports should be set to User Network Interface (uni) and user ports should be set to Network Interface (ni).')
ipadPktSwCfgLnkMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("ccitt", 3), ("ansi", 4), ("lmi", 5), ("none", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgLnkMgmtType.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgLnkMgmtType.setDescription('If set to auto, the frame relay LMI type will be learned from the network side. If set to none, all DLCI must be configured.')
ipadPktSwCfgMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgMaxFrameSize.setDescription('This is the maximum frame size configured in the frame relay network.')
ipadPktSwCfgnN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN1.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgnN1.setDescription('Number of keep alive requests between full status request.')
ipadPktSwCfgnN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN2.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgnN2.setDescription('Number of errors from FRAD before alarm.')
ipadPktSwCfgnN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnN3.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgnN3.setDescription('Number of events to sample nN2.')
ipadPktSwCfgnT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgnT1.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgnT1.setDescription('Delay before issuing a poll sequence.')
ipadPktSwCfgDefCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDefCIR.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgDefCIR.setDescription('Default committed information rate in bits per second.')
ipadPktSwCfgDefExBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgDefExBurst.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgDefExBurst.setDescription('Default excess burst rate in bits per second.')
ipadPktSwCfgCIREE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgCIREE.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgCIREE.setDescription('Determines if the interface will enforce CIR and excess burst configured values.')
ipadPktSwCfgLinkInjection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("buffered", 3), ("forced", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgLinkInjection.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgLinkInjection.setDescription('Indicates how to process frames in excess of the CIR when congestion exists.')
ipadPktSwCfgAutoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiagnostic.setDescription('Determines if the unit will put itself into diagnostic mode everytime it determines that there are no LMI received on a network service.')
ipadPktSwCfgAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiscovery.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgAutoDiscovery.setDescription('Determines if the unit will learn the DLCIs from the LMMI received on this service.')
ipadPktSwCfgMgmtDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadPktSwCfgMgmtDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: ipadPktSwCfgMgmtDLCI.setDescription('Specifies the DLCI that will be used by the unit for management information. Specifying a 0 disables this feature.')
ipadTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1), )
if mibBuilder.loadTexts: ipadTrapDestTable.setStatus('optional')
if mibBuilder.loadTexts: ipadTrapDestTable.setDescription('The ipad trap destination table.')
ipadTrapDestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadTrapDestIndex"))
if mibBuilder.loadTexts: ipadTrapDestTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadTrapDestTableEntry.setDescription('An entry in the ipad trap destination table.')
ipadTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadTrapDestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadTrapDestIndex.setDescription('Index into the ipad trap destination table.')
ipadTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 11, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadTrapDestination.setStatus('mandatory')
if mibBuilder.loadTexts: ipadTrapDestination.setDescription('Trap destination.')
ipadFrPortRxInvalidFramesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25000))
if mibBuilder.loadTexts: ipadFrPortRxInvalidFramesExceeded.setDescription('This trap is sent out when an ipad frame relay port receive invalid frames alarm threshold has been exceeded.')
ipadFrPortRxThroughputExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25001))
if mibBuilder.loadTexts: ipadFrPortRxThroughputExceeded.setDescription('This trap is sent out when an ipad frame relay port receive throughput threshold has been exceeded.')
ipadFrPortTxThroughputExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25002))
if mibBuilder.loadTexts: ipadFrPortTxThroughputExceeded.setDescription('This trap is sent out when an ipad frame relay port transmit throughput threshold has been exceeded.')
ipadDLCItxCIRexceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25003))
if mibBuilder.loadTexts: ipadDLCItxCIRexceeded.setDescription('This trap is sent out when the Tx over CIR threshold has been exceeded. This threshold is the number of frames in excess of CIR.')
ipadDLCItxBEexceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25004))
if mibBuilder.loadTexts: ipadDLCItxBEexceeded.setDescription('This trap is sent out when the Tx over Be threshold has been exceeded. This threshold is the number of frames in excess of Be.')
ipadDLCIRxCongestionExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25005))
if mibBuilder.loadTexts: ipadDLCIRxCongestionExceeded.setDescription('This trap is sent out when the Rx congestion threshold has been exceeded. This threshold is the number of frames received with BECN/FECN.')
ipadUserTxExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25006))
if mibBuilder.loadTexts: ipadUserTxExceeded.setDescription('This trap is sent out when the Tx throughput threshold in bits per second has been exceeded. This threshold represents the number of bits for the user-selected protocol.')
ipadDlciRxBECNinCIRAlarm = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25007))
if mibBuilder.loadTexts: ipadDlciRxBECNinCIRAlarm.setDescription('This trap is sent out when a frame with BECN set has been received within CIR.')
ipadDlciUASExceeded = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25008))
if mibBuilder.loadTexts: ipadDlciUASExceeded.setDescription('This trap is sent out when the UAS (unavailable seconds) threshold for the DLCI has been exceeded.')
ipadserialDteDTRAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25009))
if mibBuilder.loadTexts: ipadserialDteDTRAlarmExists.setDescription('This trap is sent out when a DTR Loss alarm is declared.')
ipadt1e1ESAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25010))
if mibBuilder.loadTexts: ipadt1e1ESAlarmDeclared.setDescription('This trap is sent out when an Errored Seconds alarm is declared.')
ipadt1e1SESAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25011))
if mibBuilder.loadTexts: ipadt1e1SESAlarmDeclared.setDescription('This trap is sent out when a Severely Errored Seconds alarm is declared.')
ipadt1e1LOSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25012))
if mibBuilder.loadTexts: ipadt1e1LOSSAlarmDeclared.setDescription('This trap is sent out when a Loss of Signal Seconds alarm is declared.')
ipadt1e1UASAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25013))
if mibBuilder.loadTexts: ipadt1e1UASAlarmDeclared.setDescription('This trap is sent out when an Unavailable Seconds alarm is declared.')
ipadt1e1CSSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25014))
if mibBuilder.loadTexts: ipadt1e1CSSAlarmDeclared.setDescription('This trap is sent out when a Controlled Slip Seconds alarm is declared.')
ipadt1e1BPVSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25015))
if mibBuilder.loadTexts: ipadt1e1BPVSAlarmDeclared.setDescription('This trap is sent out when a Bipolar Violation Seconds alarm is declared.')
ipadt1e1OOFSAlarmDeclared = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25016))
if mibBuilder.loadTexts: ipadt1e1OOFSAlarmDeclared.setDescription('This trap is sent out when an Out of Frame Seconds alarm is declared.')
ipadt1e1AISAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25017))
if mibBuilder.loadTexts: ipadt1e1AISAlarmExists.setDescription('This trap is sent out when an Alarm Indication Signal alarm is declared.')
ipadt1e1RASAlarmExists = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25018))
if mibBuilder.loadTexts: ipadt1e1RASAlarmExists.setDescription('This trap is sent out when a Remote Alarm Signal alarm is declared.')
ipadDLCIremoteSOSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 321, 100) + (0,25019))
if mibBuilder.loadTexts: ipadDLCIremoteSOSAlarm.setDescription('This trap is sent when the remote unit for a DLCI senses and reports an SOS condition.')
ipadMiscPortSettings = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1), )
if mibBuilder.loadTexts: ipadMiscPortSettings.setStatus('optional')
if mibBuilder.loadTexts: ipadMiscPortSettings.setDescription('The ipad miscellaneous port settings table.')
ipadMiscPortSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadMiscPortSettingsIndex"))
if mibBuilder.loadTexts: ipadMiscPortSettingsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadMiscPortSettingsEntry.setDescription('An entry in the ipad miscellaneous port settings table.')
ipadMiscPortSettingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("supervisor", 1), ("network1", 2), ("network2", 3), ("user1", 4), ("user2", 5), ("ethernet", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadMiscPortSettingsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadMiscPortSettingsIndex.setDescription('The MIB-II ifIndex for this port.')
ipadMiscPortSettingsSerialType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dce", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscPortSettingsSerialType.setStatus('mandatory')
if mibBuilder.loadTexts: ipadMiscPortSettingsSerialType.setDescription('The type of this serial port.')
ipadMiscClearStatusCounts = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadMiscClearStatusCounts.setStatus('mandatory')
if mibBuilder.loadTexts: ipadMiscClearStatusCounts.setDescription('Writing a 2 to this field will clear all status counts.')
ipadSoftKeyTable = MibTable((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1), )
if mibBuilder.loadTexts: ipadSoftKeyTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipadSoftKeyTable.setDescription('Table of software keys.')
ipadSoftKeyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1), ).setIndexNames((0, "IPAD-MIB", "ipadSoftKeyIndex"))
if mibBuilder.loadTexts: ipadSoftKeyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadSoftKeyTableEntry.setDescription('An entry in the software key table.')
ipadSoftKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipadSoftKeyIndex.setDescription('Index into the ipad software key table.')
ipadSoftKeyAcronym = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyAcronym.setStatus('mandatory')
if mibBuilder.loadTexts: ipadSoftKeyAcronym.setDescription('Three-letter acronym for software key.')
ipadSoftKeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyDescription.setStatus('mandatory')
if mibBuilder.loadTexts: ipadSoftKeyDescription.setDescription('Description, if available, of this software key.')
ipadSoftKeyExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipadSoftKeyExpirationDate.setStatus('mandatory')
if mibBuilder.loadTexts: ipadSoftKeyExpirationDate.setDescription('Expiration date of this software key in the format YY/MM/DD.')
ipadSoftKeyEntry = MibScalar((1, 3, 6, 1, 4, 1, 321, 100, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipadSoftKeyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipadSoftKeyEntry.setDescription('Writing a software key will enable that feature (assuming a correct and valid key is entered).')
mibBuilder.exportSymbols("IPAD-MIB", ipadPPPCfgPortIpAddress=ipadPPPCfgPortIpAddress, ipadDLCIstatsRxOctets=ipadDLCIstatsRxOctets, ipadUserStatsRxFrames=ipadUserStatsRxFrames, ipadUserTableEntry=ipadUserTableEntry, ipadDLCIremoteUnit=ipadDLCIremoteUnit, ipadDLCIstatsTable=ipadDLCIstatsTable, ipadUserStatsPeriod=ipadUserStatsPeriod, ipadDLCIproprietary=ipadDLCIproprietary, ipadt1e1RASAlarmExists=ipadt1e1RASAlarmExists, ipadPktSwitch=ipadPktSwitch, ipadModemDialDataIndex=ipadModemDialDataIndex, ipadEndpointService=ipadEndpointService, ipadUserIPAddress=ipadUserIPAddress, ipadFrPortTxAlmAlarm=ipadFrPortTxAlmAlarm, ipadEndpointIndex=ipadEndpointIndex, ipadPPPCfgMRU=ipadPPPCfgMRU, ipadDLCI=ipadDLCI, ipadDLCIstatsDelayPeak=ipadDLCIstatsDelayPeak, ipadUserStatsTxRateAverage=ipadUserStatsTxRateAverage, ipadPktSwCfgInterfaceType=ipadPktSwCfgInterfaceType, ipadTrapDest=ipadTrapDest, ipadPPPPAPTableUsername=ipadPPPPAPTableUsername, ipadIPTopNStatsTimestamp=ipadIPTopNStatsTimestamp, ipadDLCIremoteSOSAlarm=ipadDLCIremoteSOSAlarm, ipadDLCIstatsTxMgmtFrames=ipadDLCIstatsTxMgmtFrames, hbu=hbu, ipadModemDialTableEntry=ipadModemDialTableEntry, ipadFrPortStatsRxStatInq=ipadFrPortStatsRxStatInq, ipadEndpointRemoteIpAddr=ipadEndpointRemoteIpAddr, ipadFrPortTableEntry=ipadFrPortTableEntry, ipadMiscPortSettingsSerialType=ipadMiscPortSettingsSerialType, ipadIPTopNStatsRxOctets=ipadIPTopNStatsRxOctets, ipadUserIPStatTimeRemaining=ipadUserIPStatTimeRemaining, ipadPPPCHAPTable=ipadPPPCHAPTable, ipadPPPCfgNegIpAddress=ipadPPPCfgNegIpAddress, ipadPPP=ipadPPP, ipad=ipad, ipadFrPortLMIType=ipadFrPortLMIType, ipadPPPCfgPeerIpAddress=ipadPPPCfgPeerIpAddress, ipadDLCItxExCIRThreshold=ipadDLCItxExCIRThreshold, ipadDLCIrxCongThreshold=ipadDLCIrxCongThreshold, ipadFrPortStatsRxMgmtFrames=ipadFrPortStatsRxMgmtFrames, ipadDlciUASExceeded=ipadDlciUASExceeded, ipadFrPortStatsTxStatResp=ipadFrPortStatsTxStatResp, ipadPPPCfgNegMagic=ipadPPPCfgNegMagic, ipadUserDLCI=ipadUserDLCI, ipadPPPCfgNegACCM=ipadPPPCfgNegACCM, ipadServiceTable=ipadServiceTable, ipadServiceTableEntry=ipadServiceTableEntry, ipadPPPCfgACCM=ipadPPPCfgACCM, ipadDLCIstatsRxMgmtFrames=ipadDLCIstatsRxMgmtFrames, ipadIPTopNStatsTxOctets=ipadIPTopNStatsTxOctets, ipadDLCItxBEexceeded=ipadDLCItxBEexceeded, ipadt1e1LOSSAlarmDeclared=ipadt1e1LOSSAlarmDeclared, ipadPPPCfgDialMode=ipadPPPCfgDialMode, ipadUserStatsTxRatePeak=ipadUserStatsTxRatePeak, ipadFrPortService=ipadFrPortService, ipadDLCILastChange=ipadDLCILastChange, ipadUserFilterByDLCI=ipadUserFilterByDLCI, ipadChannelifIndex=ipadChannelifIndex, ipadDLCIrxBECNinCIR=ipadDLCIrxBECNinCIR, ipadSoftKeyTable=ipadSoftKeyTable, ipadFrPortStatsTxMgmtFrames=ipadFrPortStatsTxMgmtFrames, ipadPPPCfgNegAddress=ipadPPPCfgNegAddress, ipadEndpointRemoteIpMask=ipadEndpointRemoteIpMask, ipadIPTopNStatsRxFrames=ipadIPTopNStatsRxFrames, ipadUserIPStatStartTime=ipadUserIPStatStartTime, ipadPktSwOperatingMode=ipadPktSwOperatingMode, ipadEndpoint=ipadEndpoint, ipadPPPCfgService=ipadPPPCfgService, ipadFrPortStatsRxStatResp=ipadFrPortStatsRxStatResp, ipadUserStatsIndex=ipadUserStatsIndex, ipadModemDialUsername=ipadModemDialUsername, ipadPktSwCfgnN2=ipadPktSwCfgnN2, ipadPPPCHAPTableIndex=ipadPPPCHAPTableIndex, ipadPktSwCfgMgmtDLCI=ipadPktSwCfgMgmtDLCI, ipadFrPortRxInvAlmThreshold=ipadFrPortRxInvAlmThreshold, ipadFrPortStatsPeriod=ipadFrPortStatsPeriod, ipadServiceifIndex=ipadServiceifIndex, ipadDLCIservice=ipadDLCIservice, ipadFrPortStatsTxStatInq=ipadFrPortStatsTxStatInq, ipadFrPortStatsRxBECN=ipadFrPortStatsRxBECN, ipadChannelPair=ipadChannelPair, ipadPktSwCfgService=ipadPktSwCfgService, ipadUserService=ipadUserService, ipadserialDteDTRAlarmExists=ipadserialDteDTRAlarmExists, ipadEndpointName=ipadEndpointName, ipadDLCIpropOffset=ipadDLCIpropOffset, ipadModem=ipadModem, ipadChannelTableEntry=ipadChannelTableEntry, ipadEndpointForward=ipadEndpointForward, ipadModemDialLoginScript=ipadModemDialLoginScript, ipadEndpointTableEntry=ipadEndpointTableEntry, ipadEndpointTable=ipadEndpointTable, ipadUserFilterByIPAddress=ipadUserFilterByIPAddress, ipadPktSwCfgDefExBurst=ipadPktSwCfgDefExBurst, ipadDLCIstatsDelayAverage=ipadDLCIstatsDelayAverage, ipadIPTopNStatsIndex=ipadIPTopNStatsIndex, ipadPPPCfgAllowCHAP=ipadPPPCfgAllowCHAP, ipadChannelTable=ipadChannelTable, ipadDLCIstatsUAS=ipadDLCIstatsUAS, ipadMiscPortSettingsEntry=ipadMiscPortSettingsEntry, ipadFrPortRxInvalidFramesExceeded=ipadFrPortRxInvalidFramesExceeded, ipadDLCITableEntry=ipadDLCITableEntry, ipadDLCInumber=ipadDLCInumber, ipadUserIPStatRequestedReportSize=ipadUserIPStatRequestedReportSize, ipadUserStatsTxOctets=ipadUserStatsTxOctets, ipadSoftKeyEntry=ipadSoftKeyEntry, ipadEndpointAddEndpoint=ipadEndpointAddEndpoint, ipadFrPortStatsRxFECN=ipadFrPortStatsRxFECN, ipadPPPPAPTable=ipadPPPPAPTable, ipadFrPortLMIMode=ipadFrPortLMIMode, ipadDlciRxBECNinCIRAlarm=ipadDlciRxBECNinCIRAlarm, ipadDLCIstatsPeak=ipadDLCIstatsPeak, ipadFrPortStatsRxMgmtOctets=ipadFrPortStatsRxMgmtOctets, ipadFrPortTxThroughputExceeded=ipadFrPortTxThroughputExceeded, ipadTrapDestTableEntry=ipadTrapDestTableEntry, ipadDLCIinBand=ipadDLCIinBand, ipadModemDialAbortTimer=ipadModemDialAbortTimer, ipadDLCIminBC=ipadDLCIminBC, ipadPPPPAPTablePassword=ipadPPPPAPTablePassword, ipadModemDataTableIndex=ipadModemDataTableIndex, ipadEndpointLastChange=ipadEndpointLastChange, ipadDLCIstatsEntry=ipadDLCIstatsEntry, ipadUserIndex=ipadUserIndex, ipadDLCIrxMon=ipadDLCIrxMon, ipadPktSwCfgDefCIR=ipadPktSwCfgDefCIR, ipadPPPCfgNegotiationInit=ipadPPPCfgNegotiationInit, ipadFrPortTxAlmThreshold=ipadFrPortTxAlmThreshold, ipadPPPCfgCHAPUsername=ipadPPPCfgCHAPUsername, ipadSoftKeyDescription=ipadSoftKeyDescription, ipadDLCIstatsTxExcessBe=ipadDLCIstatsTxExcessBe, ipadPktSwCfgAutoDiscovery=ipadPktSwCfgAutoDiscovery, ipadChannelRate=ipadChannelRate, ipadPPPPAPTableEntry=ipadPPPPAPTableEntry, ipadPPPCfgAllowPAP=ipadPPPCfgAllowPAP, ipadDLCIstatsService=ipadDLCIstatsService, ipadModemDialTableIndex=ipadModemDialTableIndex, ipadIPTopNStatsTxFrames=ipadIPTopNStatsTxFrames, ipadt1e1OOFSAlarmDeclared=ipadt1e1OOFSAlarmDeclared, ipadChannel=ipadChannel, ipadt1e1SESAlarmDeclared=ipadt1e1SESAlarmDeclared, ipadModemDialRedialAttempts=ipadModemDialRedialAttempts, ipadIPTopNStatsTable=ipadIPTopNStatsTable, ipadSoftKeyAcronym=ipadSoftKeyAcronym, ipadUserStatsTable=ipadUserStatsTable, ipadPPPCfgInactivityTimer=ipadPPPCfgInactivityTimer, ipadPPPCfgAuthChallengeInterval=ipadPPPCfgAuthChallengeInterval, ipadModemDataTableEntry=ipadModemDataTableEntry, ipadUserStatsRxOctets=ipadUserStatsRxOctets, ipadUserTxAlmAlarm=ipadUserTxAlmAlarm, ipadPPPCfgTableEntry=ipadPPPCfgTableEntry, ipadFrPortStatsAverage=ipadFrPortStatsAverage, ipadPktSwCfgLnkMgmtType=ipadPktSwCfgLnkMgmtType, ipadMiscClearStatusCounts=ipadMiscClearStatusCounts, ipadSvcAware=ipadSvcAware, ipadMiscPortSettingsIndex=ipadMiscPortSettingsIndex, ipadFrPortRxAlmThreshold=ipadFrPortRxAlmThreshold, ipadDLCItxExBeAlarm=ipadDLCItxExBeAlarm, ipadDLCIcongestion=ipadDLCIcongestion, ipadPPPCHAPTableUsername=ipadPPPCHAPTableUsername, ipadPPPCHAPTableEntry=ipadPPPCHAPTableEntry, ipadServiceAddService=ipadServiceAddService, ipadPPPCfgCHAPSecret=ipadPPPCfgCHAPSecret, ipadDLCItxCIRexceeded=ipadDLCItxCIRexceeded, ipadUserIPStatTimeDuration=ipadUserIPStatTimeDuration, ipadDLCIstatsTxOctets=ipadDLCIstatsTxOctets, ipadEndpointType=ipadEndpointType, ipadFrPortStatsService=ipadFrPortStatsService, ipadDLCIstatsTxExcessCIR=ipadDLCIstatsTxExcessCIR, ipadService=ipadService, ipadPPPCfgNegCHAP=ipadPPPCfgNegCHAP, ipadDLCIdEctrl=ipadDLCIdEctrl, ipadUserTxAlmThreshold=ipadUserTxAlmThreshold, ipadFrPortActive=ipadFrPortActive, ipadModemDialPassword=ipadModemDialPassword, ipadPPPCfgTable=ipadPPPCfgTable, ipadSoftKey=ipadSoftKey, ipadUserStatsEntry=ipadUserStatsEntry, ipadServiceDeleteService=ipadServiceDeleteService, ipadFrPortRxThroughputExceeded=ipadFrPortRxThroughputExceeded, ipadDLCIenableDelay=ipadDLCIenableDelay, ipadUserIPPort=ipadUserIPPort, ipadTrapDestIndex=ipadTrapDestIndex, ipadIPTopNStatsAddress=ipadIPTopNStatsAddress, ipadEndpointBackup=ipadEndpointBackup, ipadDLCIstatsRxMgmtOctets=ipadDLCIstatsRxMgmtOctets, ipadServicePair=ipadServicePair, ipadUserIPMask=ipadUserIPMask, ipadModemDataHangupScript=ipadModemDataHangupScript, ipadPktSwCfgnN3=ipadPktSwCfgnN3, ipadModemDataDialingScript=ipadModemDataDialingScript, ipadSoftKeyExpirationDate=ipadSoftKeyExpirationDate, ipadDLCIstatsRxFECN=ipadDLCIstatsRxFECN, ipadDLCIstatsRxBECN=ipadDLCIstatsRxBECN, ipadDLCIRxCongestionExceeded=ipadDLCIRxCongestionExceeded, ipadFrPortStatsRxInvalid=ipadFrPortStatsRxInvalid, ipadModemDataTable=ipadModemDataTable, ipadTrapDestTable=ipadTrapDestTable, ipadPktSwCfgLinkInjection=ipadPktSwCfgLinkInjection, ipadDLCIstatsRxDE=ipadDLCIstatsRxDE, ipadt1e1BPVSAlarmDeclared=ipadt1e1BPVSAlarmDeclared, ipadDLCIUASThreshold=ipadDLCIUASThreshold, ipadFrPortStatsRxInvLMI=ipadFrPortStatsRxInvLMI, ipadSoftKeyTableEntry=ipadSoftKeyTableEntry, ipadDLCICIR=ipadDLCICIR, ipadt1e1UASAlarmDeclared=ipadt1e1UASAlarmDeclared, ipadEndpointRefSLP=ipadEndpointRefSLP, ipadPktSwCfgnT1=ipadPktSwCfgnT1, ipadPPPCfgNegIPCPCompression=ipadPPPCfgNegIPCPCompression, ipadFrPortStatsRxOctets=ipadFrPortStatsRxOctets, ipadDLCIstatsTxMgmtOctets=ipadDLCIstatsTxMgmtOctets, ipadChannelIndex=ipadChannelIndex, ipadModemDataAnswerScript=ipadModemDataAnswerScript, ipadDLCITable=ipadDLCITable, ipadFrPortStatsTxOctets=ipadFrPortStatsTxOctets, ipadDLCIstatsRoundTripTimeouts=ipadDLCIstatsRoundTripTimeouts, ipadUserTxExceeded=ipadUserTxExceeded, ipadPPPCfgNegMRU=ipadPPPCfgNegMRU, ipadPPPPAPTableIndex=ipadPPPPAPTableIndex, ipadModemDialNumber=ipadModemDialNumber, ipadFrPortTable=ipadFrPortTable, ipadUser=ipadUser, ipadSoftKeyIndex=ipadSoftKeyIndex, ipadDLCIstatsRxFrames=ipadDLCIstatsRxFrames, ipadPPPCfgPAPPassword=ipadPPPCfgPAPPassword, ipadServiceIndex=ipadServiceIndex, ipadPktSwCfgnN1=ipadPktSwCfgnN1, ipadt1e1ESAlarmDeclared=ipadt1e1ESAlarmDeclared, ipadPktSwCfgMaxFrameSize=ipadPktSwCfgMaxFrameSize, ipadPPPCfgNegPAP=ipadPPPCfgNegPAP, ipadFrPortRxAlmAlarm=ipadFrPortRxAlmAlarm, ipadRouter=ipadRouter, ipadChannelService=ipadChannelService, ipadDLCIBe=ipadDLCIBe, ipadDLCIremote=ipadDLCIremote, ipadFrPortStatsPeak=ipadFrPortStatsPeak, ipadTrapDestination=ipadTrapDestination, ipadUserIPStatGrantedReportSize=ipadUserIPStatGrantedReportSize, ipadUserStatsTxFrames=ipadUserStatsTxFrames, ipadPPPCHAPTableSecret=ipadPPPCHAPTableSecret, verilink=verilink, ipadModemDialDelayBeforeRedial=ipadModemDialDelayBeforeRedial, ipadFrPortStatsRxFrames=ipadFrPortStatsRxFrames, ipadDLCIstatsTxFrames=ipadDLCIstatsTxFrames, ipadPPPCfgNegCompression=ipadPPPCfgNegCompression, ipadFrPortStatsTable=ipadFrPortStatsTable, ipadMisc=ipadMisc, ipadDLCIstatsDLCI=ipadDLCIstatsDLCI, ipadUserTable=ipadUserTable, ipadDLCIencapsulation=ipadDLCIencapsulation, ipadModemDialTable=ipadModemDialTable, ipadFrPortStatsTxFrames=ipadFrPortStatsTxFrames, ipadUserFilterByIPPort=ipadUserFilterByIPPort)
mibBuilder.exportSymbols("IPAD-MIB", ipadServiceType=ipadServiceType, ipadPPPCfgPAPUsername=ipadPPPCfgPAPUsername, ipadt1e1CSSAlarmDeclared=ipadt1e1CSSAlarmDeclared, ipadFrPort=ipadFrPort, ipadModemDataModemName=ipadModemDataModemName, ipadDLCItxExCIRAlarm=ipadDLCItxExCIRAlarm, ipadPktSwCfgAutoDiagnostic=ipadPktSwCfgAutoDiagnostic, ipadDLCIrxCongAlarm=ipadDLCIrxCongAlarm, ipadEndpointDLCInumber=ipadEndpointDLCInumber, ipadDLCItxExBeThreshold=ipadDLCItxExBeThreshold, ipadFrPortStatsTxMgmtOctets=ipadFrPortStatsTxMgmtOctets, ipadMiscPortSettings=ipadMiscPortSettings, ipadEndpointDeleteEndpoint=ipadEndpointDeleteEndpoint, ipadModemDataSetupScript=ipadModemDataSetupScript, ipadDLCIactive=ipadDLCIactive, ipadUserIPStatDiscardType=ipadUserIPStatDiscardType, ipadFrPortStatsEntry=ipadFrPortStatsEntry, ipadDLCIUASAlarm=ipadDLCIUASAlarm, ipadDLCIremoteEquipActive=ipadDLCIremoteEquipActive, ipadPktSwCfgTable=ipadPktSwCfgTable, ipadPktSwCfgTableEntry=ipadPktSwCfgTableEntry, ipadDLCIstatsAverage=ipadDLCIstatsAverage, ipadPktSwCfgCIREE=ipadPktSwCfgCIREE, ipadIPTopNStatsEntry=ipadIPTopNStatsEntry, ipadt1e1AISAlarmExists=ipadt1e1AISAlarmExists, ipadDLCIstatsPeriod=ipadDLCIstatsPeriod, ipadUserIPStatReportNumber=ipadUserIPStatReportNumber, ipadFrPortRxInvAlmAlarm=ipadFrPortRxInvAlmAlarm, ipadPPPCfgSubnetMask=ipadPPPCfgSubnetMask)
