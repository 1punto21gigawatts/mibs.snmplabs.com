#
# PySNMP MIB module OVERLAND-NEXTGEN (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OVERLAND-NEXTGEN
# Produced by pysmi-0.3.4 at Wed May  1 14:35:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, ModuleIdentity, NotificationType, iso, Gauge32, IpAddress, Bits, MibIdentifier, TimeTicks, Counter64, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "iso", "Gauge32", "IpAddress", "Bits", "MibIdentifier", "TimeTicks", "Counter64", "Counter32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
overlandGlobalRegModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3351, 1, 1, 1, 1))
if mibBuilder.loadTexts: overlandGlobalRegModule.setLastUpdated('9807090845Z')
if mibBuilder.loadTexts: overlandGlobalRegModule.setOrganization('Overland Data, Inc.')
if mibBuilder.loadTexts: overlandGlobalRegModule.setContactInfo('Robert Kingsley email: bkingsley@overlanddata.com')
if mibBuilder.loadTexts: overlandGlobalRegModule.setDescription('The Overland Data central registration module.')
overlandRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1))
overlandReg = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 1))
overlandGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 2))
overlandProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3))
overlandCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 4))
overlandReqs = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 5))
overlandExpr = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 6))
overlandModules = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 1, 1))
overlandNextGen = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2))
overlandNextGenActions = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 1))
overlandNextGenStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 2))
overlandNextGenState = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3))
overlandNextGenComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 4))
overlandNextGenAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5))
overlandNextGenEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6))
overlandNextGenGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7))
overlandLoopback = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overlandLoopback.setStatus('current')
if mibBuilder.loadTexts: overlandLoopback.setDescription('Sends or retrieves a loopback string to the target.')
overlandActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7, 1)).setObjects(("OVERLAND-NEXTGEN", "overlandLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    overlandActionGroup = overlandActionGroup.setStatus('current')
if mibBuilder.loadTexts: overlandActionGroup.setDescription('Current library status which may be queried.')
driveStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: driveStatusTable.setStatus('current')
if mibBuilder.loadTexts: driveStatusTable.setDescription('Table containing various drive status.')
driveStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "OVERLAND-NEXTGEN", "dstIndex"))
if mibBuilder.loadTexts: driveStatusEntry.setStatus('current')
if mibBuilder.loadTexts: driveStatusEntry.setDescription('A row in the drive status table.')
dstRowValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstRowValid.setStatus('current')
if mibBuilder.loadTexts: dstRowValid.setDescription('Provides an INVALID indication if no drives are installed or if the drive type is unknown; otherwise, an indication of the drive type is provided.')
dstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstIndex.setStatus('current')
if mibBuilder.loadTexts: dstIndex.setDescription('Index to drive status fields.')
dstState = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("initializedNoError", 0), ("initializedWithError", 1), ("notInitialized", 2), ("notInstalled", 3), ("notInserted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstState.setStatus('current')
if mibBuilder.loadTexts: dstState.setDescription('Current state of the drive.')
dstMotion = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstMotion.setStatus('current')
if mibBuilder.loadTexts: dstMotion.setDescription('ASCII msg describing current drive tape motion.')
dstCodeRevDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstCodeRevDrive.setStatus('current')
if mibBuilder.loadTexts: dstCodeRevDrive.setDescription('Revision number of the drive code.')
dstCodeRevController = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstCodeRevController.setStatus('current')
if mibBuilder.loadTexts: dstCodeRevController.setDescription('Revision number of the drive controller code.')
dstScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstScsiId.setStatus('current')
if mibBuilder.loadTexts: dstScsiId.setDescription('SCSI Id number of drive.')
dstSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstSerialNum.setStatus('current')
if mibBuilder.loadTexts: dstSerialNum.setDescription('Serial number of this drive.')
dstCleanRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cleanNotNeeded", 0), ("cleanNeeded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstCleanRequested.setStatus('current')
if mibBuilder.loadTexts: dstCleanRequested.setDescription('The drive heads needs to be cleaned with a cleaning cartridge.')
libraryStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2), )
if mibBuilder.loadTexts: libraryStatusTable.setStatus('current')
if mibBuilder.loadTexts: libraryStatusTable.setDescription('Table containing fault code, severity and ACSII error messages displayed on front panel of library.')
libraryStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1), ).setIndexNames((0, "OVERLAND-NEXTGEN", "lstIndex"))
if mibBuilder.loadTexts: libraryStatusEntry.setStatus('current')
if mibBuilder.loadTexts: libraryStatusEntry.setDescription('A row in the library status table.')
lstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstIndex.setStatus('current')
if mibBuilder.loadTexts: lstIndex.setDescription('Index to table of library status.')
lstConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standalone", 0), ("multimodule", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstConfig.setStatus('current')
if mibBuilder.loadTexts: lstConfig.setDescription('Indicates if library is standalone or multi-module.')
lstScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstScsiId.setStatus('current')
if mibBuilder.loadTexts: lstScsiId.setDescription('Indicates library SCSI bus ID.')
lstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstStatus.setStatus('current')
if mibBuilder.loadTexts: lstStatus.setDescription('Indication of current library status.')
lstChangerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstChangerStatus.setStatus('current')
if mibBuilder.loadTexts: lstChangerStatus.setDescription('Bit-mapped indication of current changer status: bit 0 - cartridge map valid bit 1 - initializing bit 2 - door open bit 3 - front panel mode bit 4 - door closed bit 5 - browser mode bit 6 - master busy')
lstLibraryState = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("initializing", 0), ("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lstLibraryState.setStatus('current')
if mibBuilder.loadTexts: lstLibraryState.setDescription('Indication of current library state.')
errorTable = MibTable((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3), )
if mibBuilder.loadTexts: errorTable.setStatus('current')
if mibBuilder.loadTexts: errorTable.setDescription('Table containing fault code, severity and ACSII error messages displayed on front panel of library.')
errorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1), ).setIndexNames((0, "OVERLAND-NEXTGEN", "errIndex"))
if mibBuilder.loadTexts: errorEntry.setStatus('current')
if mibBuilder.loadTexts: errorEntry.setDescription('A row in the error info table.')
errIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errIndex.setStatus('current')
if mibBuilder.loadTexts: errIndex.setDescription('Index to table of library error information.')
errCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errCode.setStatus('current')
if mibBuilder.loadTexts: errCode.setDescription('Hex code unique to the reported error.')
errSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("informational", 0), ("mild", 1), ("hard", 2), ("severe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errSeverity.setStatus('current')
if mibBuilder.loadTexts: errSeverity.setDescription('Indication of how serious the reported error is: 0 = informational error, not very severe 1 = mild error, operator intervention not necessary 2 = hard error, may be corrected remotely 3 = very severe, power cycle required to clear')
errMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMsg.setStatus('current')
if mibBuilder.loadTexts: errMsg.setDescription('ASCII message naming the current error.')
errActionMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errActionMsg.setStatus('current')
if mibBuilder.loadTexts: errActionMsg.setDescription('ASCII message providing additional information about current error and possibly some suggestions for correcting it.')
overlandStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7, 3)).setObjects(("OVERLAND-NEXTGEN", "errIndex"), ("OVERLAND-NEXTGEN", "errCode"), ("OVERLAND-NEXTGEN", "errSeverity"), ("OVERLAND-NEXTGEN", "errMsg"), ("OVERLAND-NEXTGEN", "errActionMsg"), ("OVERLAND-NEXTGEN", "dstRowValid"), ("OVERLAND-NEXTGEN", "dstIndex"), ("OVERLAND-NEXTGEN", "dstState"), ("OVERLAND-NEXTGEN", "dstMotion"), ("OVERLAND-NEXTGEN", "dstCodeRevDrive"), ("OVERLAND-NEXTGEN", "dstCodeRevController"), ("OVERLAND-NEXTGEN", "dstScsiId"), ("OVERLAND-NEXTGEN", "dstSerialNum"), ("OVERLAND-NEXTGEN", "dstCleanRequested"), ("OVERLAND-NEXTGEN", "lstIndex"), ("OVERLAND-NEXTGEN", "lstConfig"), ("OVERLAND-NEXTGEN", "lstScsiId"), ("OVERLAND-NEXTGEN", "lstStatus"), ("OVERLAND-NEXTGEN", "lstChangerStatus"), ("OVERLAND-NEXTGEN", "lstLibraryState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    overlandStateGroup = overlandStateGroup.setStatus('current')
if mibBuilder.loadTexts: overlandStateGroup.setDescription('Current library states which may be queried.')
numModules = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numModules.setStatus('current')
if mibBuilder.loadTexts: numModules.setDescription('Reads the total number of modules available in the attached library.')
numBins = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBins.setStatus('current')
if mibBuilder.loadTexts: numBins.setDescription('Reads the total number of cartridge storage slots available in the attached library.')
numDrives = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDrives.setStatus('current')
if mibBuilder.loadTexts: numDrives.setDescription('Reads the total number of drives available in the attached library.')
numMailSlots = MibScalar((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numMailSlots.setStatus('current')
if mibBuilder.loadTexts: numMailSlots.setDescription('Returns the total number of mail slots available in the attached library.')
moduleGeometryTable = MibTable((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5), )
if mibBuilder.loadTexts: moduleGeometryTable.setStatus('current')
if mibBuilder.loadTexts: moduleGeometryTable.setDescription('Table containing library module geometry.')
moduleGeometryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1), ).setIndexNames((0, "OVERLAND-NEXTGEN", "modIndex"))
if mibBuilder.loadTexts: moduleGeometryEntry.setStatus('current')
if mibBuilder.loadTexts: moduleGeometryEntry.setDescription('A row in the library module geometry table.')
modDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modDesc.setStatus('current')
if mibBuilder.loadTexts: modDesc.setDescription('If library geometry is valid, an ASCII message desribing the module.')
modIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modIndex.setStatus('current')
if mibBuilder.loadTexts: modIndex.setDescription('Index to table of library module geometry: 8 = Master or Standalone module 0-7 = Slave Module')
modAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("isNotAttached", 0), ("isAttached", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modAttached.setStatus('current')
if mibBuilder.loadTexts: modAttached.setDescription('Indication of whether or not module is attached.')
modStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modStatus.setStatus('current')
if mibBuilder.loadTexts: modStatus.setDescription('ASCII message desribing the current status of the module.')
modConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("lightning", 1), ("thunder", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modConfig.setStatus('current')
if mibBuilder.loadTexts: modConfig.setDescription("Indication of this module's type.")
modFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFwRev.setStatus('current')
if mibBuilder.loadTexts: modFwRev.setDescription("Indication of this module's firmware revision level.")
modNumBins = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumBins.setStatus('current')
if mibBuilder.loadTexts: modNumBins.setDescription('Indication of the number of bins within this module.')
modNumDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumDrives.setStatus('current')
if mibBuilder.loadTexts: modNumDrives.setDescription('Indication of the number of drives within this module.')
modNumMailSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 5, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumMailSlots.setStatus('current')
if mibBuilder.loadTexts: modNumMailSlots.setDescription('Indication of the number of mailslots within this module.')
overlandAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7, 4)).setObjects(("OVERLAND-NEXTGEN", "numModules"), ("OVERLAND-NEXTGEN", "numBins"), ("OVERLAND-NEXTGEN", "numDrives"), ("OVERLAND-NEXTGEN", "numMailSlots"), ("OVERLAND-NEXTGEN", "modDesc"), ("OVERLAND-NEXTGEN", "modIndex"), ("OVERLAND-NEXTGEN", "modAttached"), ("OVERLAND-NEXTGEN", "modStatus"), ("OVERLAND-NEXTGEN", "modConfig"), ("OVERLAND-NEXTGEN", "modFwRev"), ("OVERLAND-NEXTGEN", "modNumBins"), ("OVERLAND-NEXTGEN", "modNumDrives"), ("OVERLAND-NEXTGEN", "modNumMailSlots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    overlandAttributesGroup = overlandAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: overlandAttributesGroup.setDescription('Current library info which may be queried.')
eventDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 1))
if mibBuilder.loadTexts: eventDoorOpen.setStatus('current')
if mibBuilder.loadTexts: eventDoorOpen.setDescription('A library door has been opened.')
eventMailSlotAccessed = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 2))
if mibBuilder.loadTexts: eventMailSlotAccessed.setStatus('current')
if mibBuilder.loadTexts: eventMailSlotAccessed.setDescription('A mail slot is being accessed.')
eventHardFault = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 3))
if mibBuilder.loadTexts: eventHardFault.setStatus('current')
if mibBuilder.loadTexts: eventHardFault.setDescription('The library has posted a hard fault.')
eventSlaveFailed = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 4))
if mibBuilder.loadTexts: eventSlaveFailed.setStatus('current')
if mibBuilder.loadTexts: eventSlaveFailed.setDescription('A slave module has faulted.')
eventPowerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 5))
if mibBuilder.loadTexts: eventPowerSupplyFailed.setStatus('current')
if mibBuilder.loadTexts: eventPowerSupplyFailed.setDescription('One of the redundant power supplies has failed.')
eventRequestDriveClean = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 6))
if mibBuilder.loadTexts: eventRequestDriveClean.setStatus('current')
if mibBuilder.loadTexts: eventRequestDriveClean.setDescription('One of the library tape drives has requested a cleaning cycle to ensure continued data reliability.')
eventFanStalled = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 7))
if mibBuilder.loadTexts: eventFanStalled.setStatus('current')
if mibBuilder.loadTexts: eventFanStalled.setDescription('A tape drive fan has stalled.')
eventDriveError = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 8))
if mibBuilder.loadTexts: eventDriveError.setStatus('current')
if mibBuilder.loadTexts: eventDriveError.setDescription('A tape drive error has occurred.')
eventDriveRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 9))
if mibBuilder.loadTexts: eventDriveRemoved.setStatus('current')
if mibBuilder.loadTexts: eventDriveRemoved.setDescription('A tape drive has been removed from the library.')
eventSlaveRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 10))
if mibBuilder.loadTexts: eventSlaveRemoved.setStatus('current')
if mibBuilder.loadTexts: eventSlaveRemoved.setDescription('A slave module has been removed from the library.')
eventFailedOver = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 11))
if mibBuilder.loadTexts: eventFailedOver.setStatus('current')
if mibBuilder.loadTexts: eventFailedOver.setDescription('The library is failed over to the Secondary Master.')
eventLoaderRetriesExcessive = NotificationType((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 6, 12))
if mibBuilder.loadTexts: eventLoaderRetriesExcessive.setStatus('current')
if mibBuilder.loadTexts: eventLoaderRetriesExcessive.setDescription('The library has detected excessive loader retries.')
overlandNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3351, 1, 3, 2, 7, 7)).setObjects(("OVERLAND-NEXTGEN", "eventDoorOpen"), ("OVERLAND-NEXTGEN", "eventMailSlotAccessed"), ("OVERLAND-NEXTGEN", "eventHardFault"), ("OVERLAND-NEXTGEN", "eventSlaveFailed"), ("OVERLAND-NEXTGEN", "eventPowerSupplyFailed"), ("OVERLAND-NEXTGEN", "eventRequestDriveClean"), ("OVERLAND-NEXTGEN", "eventFanStalled"), ("OVERLAND-NEXTGEN", "eventDriveError"), ("OVERLAND-NEXTGEN", "eventDriveRemoved"), ("OVERLAND-NEXTGEN", "eventSlaveRemoved"), ("OVERLAND-NEXTGEN", "eventFailedOver"), ("OVERLAND-NEXTGEN", "eventLoaderRetriesExcessive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    overlandNotificationGroup = overlandNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: overlandNotificationGroup.setDescription('Trap events returned by the browser.')
mibBuilder.exportSymbols("OVERLAND-NEXTGEN", modIndex=modIndex, eventSlaveFailed=eventSlaveFailed, driveStatusEntry=driveStatusEntry, dstState=dstState, eventRequestDriveClean=eventRequestDriveClean, modDesc=modDesc, modNumMailSlots=modNumMailSlots, overlandNotificationGroup=overlandNotificationGroup, eventMailSlotAccessed=eventMailSlotAccessed, overlandAttributesGroup=overlandAttributesGroup, dstCleanRequested=dstCleanRequested, overlandProducts=overlandProducts, dstIndex=dstIndex, overlandReqs=overlandReqs, dstCodeRevDrive=dstCodeRevDrive, moduleGeometryTable=moduleGeometryTable, dstScsiId=dstScsiId, numMailSlots=numMailSlots, dstMotion=dstMotion, overlandNextGenEvents=overlandNextGenEvents, overlandNextGenComponents=overlandNextGenComponents, lstScsiId=lstScsiId, overlandActionGroup=overlandActionGroup, overlandLoopback=overlandLoopback, overlandCaps=overlandCaps, lstIndex=lstIndex, errorTable=errorTable, modConfig=modConfig, lstChangerStatus=lstChangerStatus, numDrives=numDrives, errActionMsg=errActionMsg, overlandGeneric=overlandGeneric, errMsg=errMsg, overlandNextGenState=overlandNextGenState, lstConfig=lstConfig, modStatus=modStatus, eventPowerSupplyFailed=eventPowerSupplyFailed, overlandGlobalRegModule=overlandGlobalRegModule, errSeverity=errSeverity, driveStatusTable=driveStatusTable, overlandStateGroup=overlandStateGroup, errIndex=errIndex, moduleGeometryEntry=moduleGeometryEntry, modFwRev=modFwRev, eventFanStalled=eventFanStalled, errCode=errCode, eventDriveError=eventDriveError, eventDoorOpen=eventDoorOpen, dstRowValid=dstRowValid, eventSlaveRemoved=eventSlaveRemoved, eventFailedOver=eventFailedOver, numModules=numModules, overlandReg=overlandReg, lstLibraryState=lstLibraryState, modNumBins=modNumBins, overlandNextGen=overlandNextGen, libraryStatusTable=libraryStatusTable, overlandNextGenAttributes=overlandNextGenAttributes, numBins=numBins, overlandExpr=overlandExpr, dstCodeRevController=dstCodeRevController, dstSerialNum=dstSerialNum, libraryStatusEntry=libraryStatusEntry, errorEntry=errorEntry, modNumDrives=modNumDrives, overlandRoot=overlandRoot, eventLoaderRetriesExcessive=eventLoaderRetriesExcessive, overlandModules=overlandModules, eventDriveRemoved=eventDriveRemoved, PYSNMP_MODULE_ID=overlandGlobalRegModule, overlandNextGenStatistics=overlandNextGenStatistics, lstStatus=lstStatus, modAttached=modAttached, eventHardFault=eventHardFault, overlandNextGenActions=overlandNextGenActions, overlandNextGenGroups=overlandNextGenGroups)
