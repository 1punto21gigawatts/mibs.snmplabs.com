#
# PySNMP MIB module CXLapBConv-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXLapBConv-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
Alias, cxLapBConv, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxLapBConv", "SapIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, iso, Counter32, Counter64, Integer32, ObjectIdentity, IpAddress, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "iso", "Counter32", "Counter64", "Integer32", "ObjectIdentity", "IpAddress", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PSapIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

lapbcnvSysRouteConnectInterval = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 900)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbcnvSysRouteConnectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSysRouteConnectInterval.setDescription('Determines the number of seconds between attempts to establish a connection for a LAPB system route. A connection is attempted only for defined non-connected routes. Range of Values: 10 - 900 seconds Default Value: 30 seconds Configuration Changed: administrative and operative')
lapbcnvSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10), )
if mibBuilder.loadTexts: lapbcnvSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapTable.setDescription('A table containing configuration information about each LAPB convergence service access point. Service access points of this type exist at the upper interface of the LAPB Convergence layer, and are used to communicate with the LAPBD or IAM layers.')
lapbcnvSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1), ).setIndexNames((0, "CXLapBConv-MIB", "lapbcnvSapNumber"))
if mibBuilder.loadTexts: lapbcnvSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapEntry.setDescription('Defines a row in the Service Access Point Configuration table. Each row contains the objects which are used to define a service access point upper interface of the LAPB Convergence layer.')
lapbcnvSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 1), PSapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapNumber.setDescription('Identifies this SAP (service access point) with a numerical value. Values are unique for each service access point.')
lapbcnvSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbcnvSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default Value: valid (2) Configuration Changed: administrative')
lapbcnvSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbcnvSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapAlias.setDescription('Identifies this service access point by a textual name. Names must be unique across all service access points at all layers. Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
lapbcnvSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: lapbcnvSapControl.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapControl.setDescription('Permits control of a specific SAP (service access point). Options: clearStats (1): Clear all statistics stored by statistics objects. Configuration Changed: operative')
lapbcnvSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("offLine", 1), ("unbound", 2), ("notConnected", 3), ("inProgress", 4), ("connected", 5))).clone('unbound')).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapState.setDescription('Indicates the current state of this SAP (service access point). Options: offLine (1): Indicates a newly created service access point whose configuration has not yet been sent to the LAPB Convergence layer. unbound (2): SAP is not yet bound to its companion SAP at an upper layer. notConnected (3): The associated route with this SAP is not connected, or there is no route associated with this SAP. inProgress (4): The associated route is in the process of connecting. connected (5): The associated route is connected.')
lapbcnvSapTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapTxFrames.setDescription('Indicates the number of frames transmitted by this service access point.')
lapbcnvSapRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapRxFrames.setDescription('Indicates the number of frames received by this service access point.')
lapbcnvSapTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapTxOctets.setDescription('Indicates the number of octets transmitted by this service access point.')
lapbcnvSapRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapRxOctets.setDescription('Indicates the number of octets received by this service access point.')
lapbcnvSapOutSuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapOutSuccessfullConnects.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapOutSuccessfullConnects.setDescription('Indicates the number of successful outgoing connections established by this SAP (service access point). An outgoing connection is always attempted from LAPB convergence to the Inter-Application Module (IAM). At the PSAP, this object represents the total number of outgoing connections established by all SAPs. At each individual SAP, this object represents the number of outgoing connections established by only that SAP.')
lapbcnvSapOutUnsuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapOutUnsuccessfullConnects.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapOutUnsuccessfullConnects.setDescription('Indicates the number of unsuccessful outgoing connections attempted by this SAP (service access point). An outgoing connection is always attempted from LAPB convergence to the Inter-Application Module (IAM). At the PSAP, this object represents the total number of unsuccessful outgoing connections attempted by all SAPs. At each individual SAP, this object represents the number of unsuccessful outgoing connections attempted by only that SAP.')
lapbcnvSapInSuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapInSuccessfullConnects.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapInSuccessfullConnects.setDescription('Indicates the number of successful incoming connections established at this SAP (service access point). An incoming connection is always attempted from the Inter-Application Module (IAM) to LAPB convergence. At the PSAP, this object represents the total number of successful incoming connections for all SAPs. At each individual SAP, this object represents the number of successful incoming connections for only that SAP.')
lapbcnvSapInUnsuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapInUnsuccessfullConnects.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapInUnsuccessfullConnects.setDescription('Indicates the number of unsuccessful incoming connections attempted at this SAP (service access point). An incoming connection is always attempted from the Inter-Application Module (IAM) to LAPB convergence. At the PSAP, this object represents the total number of unsuccessful incoming connections for all SAPs. At each individual SAP, this object represents the number of unsuccessful incoming connections for only that SAP.')
lapbcnvSapUnopenedServiceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapUnopenedServiceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapUnopenedServiceDiscards.setDescription('This object applies only to the PSAP (public service access point). Indicates the number of frames received and discarded by the PSAP because: - no route was associated with the frame - the frame was destined for a route that is not connected')
lapbcnvSapTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapTxResets.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapTxResets.setDescription('This object applies only to the PSAP (public service access point). Indicates the number of Inter- Application Module (IAM) reset frames sent by the PSAP.')
lapbcnvSapRxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSapRxResets.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSapRxResets.setDescription('This object applies only to the PSAP. Indicates the number of Inter- Application Module (IAM) reset frames received by the PSAP.')
lapbcnvSysRouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 11), )
if mibBuilder.loadTexts: lapbcnvSysRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSysRouteTable.setDescription('A table containing information about each LAPB system route. Routes allow this LAPB/D layer to link with another LAPB/D layer across a frame relay network, or with the LAPB layer on another similar card in the same chassis (for future use with the CX1000).')
lapbcnvSysRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 11, 1), ).setIndexNames((0, "CXLapBConv-MIB", "lapbcnvSRSapNumber"))
if mibBuilder.loadTexts: lapbcnvSysRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSysRouteEntry.setDescription('Defines a row in the lapbcnvSysRouteTable. Each row contains the objects which define a system route.')
lapbcnvSRSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 11, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSRSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSRSapNumber.setDescription('Identifies the service access point this route entry is associated with.')
lapbcnvSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbcnvSRRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSRRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default Value: none Configuration Changed: administrative and operative')
lapbcnvSRDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 11, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbcnvSRDestAlias.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSRDestAlias.setDescription('Determines the textual name of the destination service this route connects to. When attempting a LAPB connection across Frame Relay, this object specifies the name of the outgoing circuit at the Frame Relay layer. When attempting a LAPB connection between cards within the same chassis (future use within CX1000), this object specifies the name of the LAPB Convergence SAP on the remote card. Range of Values: 1 -16 characters (first character must be a letter) Default Value: none Configuration Changed: administrative and operative')
lapbcnvSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 11, 1, 4), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbcnvSRSubRef.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSRSubRef.setDescription('Specifies a reference number that uniquely identifies this route. This number is used by the FRIM (Frame Relay Interface Module) to identify routes using the same DLCI (enables PVC consolidation). This number must be unique for all routes sharing the same DLCI. Range of Values: 1 - 255 (when using PVC consolidation) 0 (when not using PVC consolidation) Default Value: 0 Configuration Changed: administrative and operative')
lapbcnvSRRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("inProgress", 3), ("connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSRRouteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSRRouteStatus.setDescription('Indicates the connection status of this LAPB route. Options: offLine (1): Indicates that the LAPB Convergence SAP this route is associated with does not exist or is offline. notConnected (2): Indicates that the remote destination does not exist, or has refused the connection. inProgress (3): Indicates that the connection is in the process of being established. This is a transient state. connected (4): Indicates that the connection is established and is ready for data transfer.')
lapbcnvSRClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 28, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("localAllocFailure", 3), ("remoteAllocFailure", 4), ("localNoAccess", 5), ("remoteNoAccess", 6), ("localPvcDown", 7), ("remotePvcDown", 8), ("localPvcBusy", 9), ("remotePvcBusy", 10), ("localFcnFailure", 11), ("remoteFcnFailure", 12), ("localDsnFailure", 13), ("localRefInUse", 14), ("remoteAliasNotFound", 15), ("remoteNoPvcService", 16), ("mpeInvalidSubref", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbcnvSRClearStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lapbcnvSRClearStatus.setDescription("Indicates the status of a failed connection. The value of this object is only valid only between attempts to establish the route connection (lapbcnvSRRouteStatus = notConnected), and may or may not change after successive failed attempts. Options: noFailure (1): Once a system route has been successfully connected, this value is maintained for the duration of the connection. internalError (2): An internal error has occurred. localAllocFailure (3): There is insufficient memory available for LAPB Convergence to establish this connection. remoteAllocFailure (4): There is insufficient memory available for the destination protocol layer to establish this connection. localNoAccess (5): This route is associated with a SAP that does not exist. remoteNoAccess (6): This route is associated with a SAP that does not exist at the destination layer. localPvcDown (7): For future use. remotePvcDown (8): The PVC at the destination protocol layer is down. localPvcBusy (9): The SAP associated with this route is already connected. remotePvcBusy (10): The destination associated with this route is already connected. This typically occurs when the route is a non-MPE (PVC consolidating) circuit. localFcnFailure (11): Flow control negotiation failed. remoteFcnFailure (12): Flow control negotiation failed at the destination protocol layer. localDsnFailure (13): Data size negotiation failed. localRefInUse (14): Data size negotiation failed at the destination protocol layer. remoteAliasNotFound (15): The destination alias (lapbcnvSRDestAlias) does not exist. remoteNoPvcService (16): The destination protocol layer does not support PVC service. mpeInvalidSubref (17): The value of lapbcnvSRSubRef is invalid at the destination protocol layer. (i.e., lapcnvSRSubRef is set to '0' and the destination frame relay circuit is configured for PVC consolidation).")
mibBuilder.exportSymbols("CXLapBConv-MIB", lapbcnvSapInSuccessfullConnects=lapbcnvSapInSuccessfullConnects, lapbcnvSapNumber=lapbcnvSapNumber, lapbcnvSRSubRef=lapbcnvSRSubRef, lapbcnvSysRouteConnectInterval=lapbcnvSysRouteConnectInterval, lapbcnvSapEntry=lapbcnvSapEntry, lapbcnvSapTxOctets=lapbcnvSapTxOctets, lapbcnvSapTxFrames=lapbcnvSapTxFrames, lapbcnvSapAlias=lapbcnvSapAlias, lapbcnvSapInUnsuccessfullConnects=lapbcnvSapInUnsuccessfullConnects, lapbcnvSRClearStatus=lapbcnvSRClearStatus, lapbcnvSapRxOctets=lapbcnvSapRxOctets, lapbcnvSapTxResets=lapbcnvSapTxResets, SubRef=SubRef, PSapIndex=PSapIndex, lapbcnvSysRouteTable=lapbcnvSysRouteTable, lapbcnvSapState=lapbcnvSapState, lapbcnvSapOutSuccessfullConnects=lapbcnvSapOutSuccessfullConnects, lapbcnvSRRowStatus=lapbcnvSRRowStatus, lapbcnvSapOutUnsuccessfullConnects=lapbcnvSapOutUnsuccessfullConnects, lapbcnvSRRouteStatus=lapbcnvSRRouteStatus, lapbcnvSapRxResets=lapbcnvSapRxResets, lapbcnvSapRxFrames=lapbcnvSapRxFrames, lapbcnvSRSapNumber=lapbcnvSRSapNumber, lapbcnvSapControl=lapbcnvSapControl, lapbcnvSysRouteEntry=lapbcnvSysRouteEntry, lapbcnvSapTable=lapbcnvSapTable, lapbcnvSapRowStatus=lapbcnvSapRowStatus, lapbcnvSRDestAlias=lapbcnvSRDestAlias, lapbcnvSapUnopenedServiceDiscards=lapbcnvSapUnopenedServiceDiscards)
