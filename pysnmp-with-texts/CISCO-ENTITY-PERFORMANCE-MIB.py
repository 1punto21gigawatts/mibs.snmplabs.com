#
# PySNMP MIB module CISCO-ENTITY-PERFORMANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENTITY-PERFORMANCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, Gauge32, ObjectIdentity, ModuleIdentity, NotificationType, Counter32, Counter64, iso, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "Gauge32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Counter32", "Counter64", "iso", "Bits", "IpAddress")
DisplayString, DateAndTime, TruthValue, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TruthValue", "TimeStamp", "TextualConvention")
ciscoEntityPerformanceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 756))
ciscoEntityPerformanceMIB.setRevisions(('2014-06-18 00:00', '2010-09-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEntityPerformanceMIB.setRevisionsDescriptions(('Added the following objects to the MIB. cepThroughputLicensedBW, cepThroughputLevel, cepThroughputInterval, cepThroughputThreshold, cepThroughputAvgRate to cepThroughputTable. Added cepThroughputNotifEnabled to ciscoEntityPerformanceMIBNotifObjects group. Added cepThroughputNotif as a new notification to the MIB. Added a new MIB conform group, ciscoEntityPerformanceMIBThroughputGroup for the new objects. Also modified the ciscoEntityPerformanceMIBCompliance to add the new group ciscoEntityPerformanceMIBThroughputGroup.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoEntityPerformanceMIB.setLastUpdated('201406180000Z')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIB.setDescription('This MIB module defines managed objects that facilitate to monitor performance of any physical entity, which are listed in the ENTITY-MIB (RFC 4133) entPhysicalTable. The performance monitoring includes utilization, input/output packet/byte rates, etc. This monitoring is through the measurement periods of current, 1-minute, 5-minutes, 15-minutes. The performance data calculation method would vary for each entity for a specific interval, hence users of this MIB should obtain the information using the object cepStatsAlgorithm for a specific interval. The performance statistics can be accumulated for the 1-minute, 5-minutes and 15-minutes (recommended) intervals. At any one time, an agent maintains one current (incomplete) interval for each interval type and up to 96 completed interval number. Fewer than 96 interval number of data will be available if the agent has been restarted within the last 24 hours for 15 minutes interval, 8 hours for 5 minutes interval, and 1.36 hours for 1 minute interval. There is no requirement for an agent to ensure fixed relationship between the start of a one/five/fifteen minute intervals and wall clock, however some agents may align the fifteen minutes interval with quarter hours. The following terminologies apply within the scope of this MIB. o entity - Any physical entity which can support performance monitoring as specified in this MIB o Utilization - The ratio of current usage to the maximum capacity the entity can handle o Input - Communication channel where packets arrive on the entity o Output - Communication channel where packets leave the entity Acronyms ======== SMA - Simple Moving Average')
class CiscoEntPerfMeasurement(TextualConvention, Counter64):
    description = 'This textual convention indicates the measurement of entity performance.'
    status = 'current'

class CiscoEntPerfRange(TextualConvention, Integer32):
    description = 'This textual convention indicates the allowed range for the specified measurement of entity performance. rangePercentage(1) 0 - 100 rangeInt32(2) 0 - 4294967295 rangeInt64(3) 0 - 18446744073709551615'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rangePercentage", 1), ("rangeInt32", 2), ("rangeInt64", 3))

class CiscoEntPerfType(TextualConvention, Integer32):
    description = 'This textual convention denotes an enumerated integer-value that represents the available various measurement types. utilization(1) - The ratio of current usage to the maximum capacity the entity can handle bitInputRate(2) - Input bit rate bitOutputRate(3) - Output bit rate bitDropRate(4) - Drop bit rate packetInputRate(5) - Input packet rate packetOutputRate(6) - Output packet rate packetDropRate(7) - Drop packet rate'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("utilization", 1), ("bitInputRate", 2), ("bitOutputRate", 3), ("bitDropRate", 4), ("packetInputRate", 5), ("packetOutputRate", 6), ("packetDropRate", 7))

class CiscoEntPerfInterval(TextualConvention, Integer32):
    description = 'This textual convention denotes an enumerated integer-value that represents the available interval values for which the periodic statistics are to be collected. current (1) - Current interval to collect statistics. In case of any entity which only start collecting statistics from last 5/10 seconds then the entity can choose this interval oneMinute (2) - Interval to collect last 1 minute statistics fiveMinutes (3) - Interval to collect last 5 minutes statistics fifteenMinutes (4) - Interval to collect last 15 minutes statistics'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("current", 1), ("oneMinute", 2), ("fiveMinutes", 3), ("fifteenMinutes", 4))

class CiscoEntPerfHistInterval(TextualConvention, Integer32):
    description = 'This textual convention denotes an enumerated integer-value that represents the available interval values for which the historic performance statistics are to be collected. oneMinute (1) - Last 1 minute statistics fiveMinutes (2) - Last 5 minutes statistics fifteenMinutes (3) - Last 15 minutes statistics'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("oneMinute", 1), ("fiveMinutes", 2), ("fifteenMinutes", 3))

class CiscoEntPerfIntervalAlgo(TextualConvention, Integer32):
    description = 'This textual convention denotes an enumerated integer-value that represents the method used to calculate the specific interval data. unknown (1) - The calculation method is unknown other (2) - The calculation method is not list in this enumeration. current (3) - This is current data algoSMA (4) - Simple Moving Average over the specified interval'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("current", 3), ("algoSMA", 4))

ciscoEntityPerformanceMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 756, 0))
ciscoEntityPerformanceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 756, 1))
ciscoEntityPerformanceMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 756, 2))
cepEntityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 1), )
if mibBuilder.loadTexts: cepEntityTable.setStatus('current')
if mibBuilder.loadTexts: cepEntityTable.setDescription('This table maintains the specific performance information for each physical entity, which supports performance monitoring. An agent creates a conceptual row to this table corresponding to a physical entity upon detection of a physical entity supporting the performance monitoring. An agent destroys a conceptual row from this table corresponding to a physical entity upon removal of the physical entity.')
cepEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cepEntityEntry.setStatus('current')
if mibBuilder.loadTexts: cepEntityEntry.setDescription('A conceptual row in the cepEntityTable. There is an entry in this table for each entity which supports performance monitoring, as defined by a value of entPhysicalIndex.')
cepEntityNumReloads = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 1, 1, 1), Counter32()).setUnits('reloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cepEntityNumReloads.setStatus('current')
if mibBuilder.loadTexts: cepEntityNumReloads.setDescription('This object provides the number of times the entity is reloaded, since the entity host is up.')
cepEntityLastReloadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepEntityLastReloadTime.setStatus('current')
if mibBuilder.loadTexts: cepEntityLastReloadTime.setDescription('This object provides the entity last reload time.')
cepConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 2), )
if mibBuilder.loadTexts: cepConfigTable.setStatus('current')
if mibBuilder.loadTexts: cepConfigTable.setDescription('This table maintains the performance configuration information for each physical entity at various performance time intervals such as current, 1 minute, etc. An agent creates a conceptual row to this table corresponding to a physical entity for each supported performance measurement and a performance interval upon detection. The agent destroys a conceptual row from this table corresponding to a physical entity for a specific performance measurement and an interval upon removal of the physical entity.')
cepConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigInterval"), (0, "CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigPerfType"))
if mibBuilder.loadTexts: cepConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cepConfigEntry.setDescription('A conceptual row in the cepConfigTable. There is an entry in this table for each entity by a value of entPhysicalIndex, the supported performance time interval by a value of cepConfigInterval, and the supported performance type by a value of cepConfigPerfType.')
cepConfigInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 2, 1, 1), CiscoEntPerfInterval())
if mibBuilder.loadTexts: cepConfigInterval.setStatus('current')
if mibBuilder.loadTexts: cepConfigInterval.setDescription('This object identifies the time interval for which the performance configuration being applied. The interval values can be current, 1 minute, etc. as specified in the CiscoEntPerfInterval.')
cepConfigPerfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 2, 1, 2), CiscoEntPerfType())
if mibBuilder.loadTexts: cepConfigPerfType.setStatus('current')
if mibBuilder.loadTexts: cepConfigPerfType.setDescription('This object identifies the performance measurement type for which the performance configuration being applied.')
cepConfigPerfRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 2, 1, 3), CiscoEntPerfRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepConfigPerfRange.setStatus('current')
if mibBuilder.loadTexts: cepConfigPerfRange.setDescription('This object indicates the range used by the performance configuration objects such as cepConfigRisingThreshold, etc. for the specific performance measurement type.')
cepConfigRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 2, 1, 4), CiscoEntPerfMeasurement()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cepConfigRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: cepConfigRisingThreshold.setDescription("This object contains the rising threshold value for a specific performance measurement type at a specific performance time interval. The value of this object must be greater than cepConfigFallingThreshold. The supported range of this object can be identified by the object 'cepConfigPerfRange'. The value of zero indicates that no comparison is being made between the cepStatsMeasurement object value and the threshold value, therefore no event action will be generated.")
cepConfigFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 2, 1, 5), CiscoEntPerfMeasurement()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cepConfigFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: cepConfigFallingThreshold.setDescription("This object contains the falling threshold value for a specific performance measurement type at a specific performance interval. The value of this object must be less than cepConfigRisingThreshold. The supported range of this object can be identified by the object 'cepConfigPerfRange'. The value of zero indicates that no comparison is being made between the cepStatsMeasurement object value and the threshold value, therefore no event action will be generated.")
cepConfigThresholdNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cepConfigThresholdNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cepConfigThresholdNotifEnabled.setDescription("This object provides the control to the threshold notification for a specific entity performance type at a specific interval. The notification will be sent based on this object value and the global object 'cepThresholdNotifEnabled'. The following table would explain when the notification would be generated. cepThresholdNotifEnabled cepConfigThresholdNotifEnabled Notify ======================== ============================== ====== true true Yes true false No false true No false false No")
cepStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 3), )
if mibBuilder.loadTexts: cepStatsTable.setStatus('current')
if mibBuilder.loadTexts: cepStatsTable.setDescription('This table maintains entity running performance, which are collected at various performance intervals. An agent creates a conceptual row to this table corresponding to a physical entity for each supported performance measurement and a performance interval upon detection. The agent destroys a conceptual row from this table corresponding to a physical entity for a specific performance measurement and an interval upon removal of the physical entity.')
cepStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigInterval"), (0, "CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigPerfType"))
if mibBuilder.loadTexts: cepStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cepStatsEntry.setDescription('A conceptual row in the cepStatsTable. There is an entry in this table for each entity by a value of entPhysicalIndex, the supported performance time interval by a value of cepConfigInterval, and the supported performance type by a value of cepConfigPerfType.')
cepStatsAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 3, 1, 1), CiscoEntPerfIntervalAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepStatsAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cepStatsAlgorithm.setDescription('This object provides the algorithm used to calculate the entity performance statistics over the specified interval.')
cepStatsMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 3, 1, 2), CiscoEntPerfMeasurement()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepStatsMeasurement.setStatus('current')
if mibBuilder.loadTexts: cepStatsMeasurement.setDescription("This object provides a specific performance measurement of the entity over the specified interval. The range of this object can be identified by the object 'cepConfigPerfRange'.")
cepEntityIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 4), )
if mibBuilder.loadTexts: cepEntityIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cepEntityIntervalTable.setDescription('This table maintains the interval information for each entity at various interval period. An agent creates a conceptual row to this table corresponding to a physical entity upon detection of a physical entity supporting the specific performance interval statistics collection. An agent destroys a conceptual row from this table corresponding to a physical entity upon removal of the physical entity.')
cepEntityIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-PERFORMANCE-MIB", "cepHistInterval"))
if mibBuilder.loadTexts: cepEntityIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cepEntityIntervalEntry.setDescription('A conceptual row in the cepEntityIntervalTable. There is an entry in this table for each entity by a value of entPhysicalIndex, and the supported performance history time interval by a value of cepHistInterval.')
cepHistInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 4, 1, 1), CiscoEntPerfHistInterval())
if mibBuilder.loadTexts: cepHistInterval.setStatus('current')
if mibBuilder.loadTexts: cepHistInterval.setDescription('This object identifies the time interval for which the performance history being applied. The interval values can be 1 minute, 5 minutes, etc. as specified in the CiscoEntPerfHistInterval.')
cepIntervalTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cepIntervalTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: cepIntervalTimeElapsed.setDescription("This object provides the number of seconds that have elapsed since the beginning of the chosen interval on this entity. If for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value for the chosen interval. For example: Interval Maximum value ======== ============= 15 minutes 899 5 minutes 299 1 minutes 59")
cepValidIntervalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepValidIntervalCount.setStatus('current')
if mibBuilder.loadTexts: cepValidIntervalCount.setDescription('This object provides the number of completed intervals for which valid entity performance data has been collected for the chosen interval. The value will be 96 unless the entity was brought online within the last 1.36/8/24 hours for 1/5/15 minutes interval respectively, in which case the value will be the number of completed 1/5/15 minute intervals since the entity has been online.')
cepIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 5), )
if mibBuilder.loadTexts: cepIntervalStatsTable.setStatus('current')
if mibBuilder.loadTexts: cepIntervalStatsTable.setDescription('This table contains specific performance statistics collected by each entity over the specified interval. The table has the maximum of 96 buckets for all the supported intervals. The following table would list the total hours of history maintained for various intervals. Intervals (minutes) Buckets History ========= ======= ======= 15 96 24 hours 5 96 8 hours 1 96 1 hour 36 minutes An agent creates a conceptual row to this table corresponding to a physical entity upon detection of a physical entity supporting the specific performance statistics for a specific interval. An agent destroys a conceptual row from this table corresponding to a physical entity upon removal of the physical entity. The support for 15-minutes interval history is required for all the entities supporting performance data. However, the support for 1-minute and 5-minutes interval history for entities are optional and at the descretion of the device supporting the performance monitoring.')
cepIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENTITY-PERFORMANCE-MIB", "cepHistInterval"), (0, "CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigPerfType"), (0, "CISCO-ENTITY-PERFORMANCE-MIB", "cepIntervalNumber"))
if mibBuilder.loadTexts: cepIntervalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cepIntervalStatsEntry.setDescription('A conceptual row in the cepIntervalStatsTable. There is an entry in this table for each entity by a value of entPhysicalIndex, the supported performance history time interval by a value of cepHistInterval, the supported performance statistics by a value of cepConfigPerfType and the interval number by a value of cepIntervalNumber.')
cepIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cepIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cepIntervalNumber.setDescription('An interval number between 1 and 96, where 1 is the most recently completed interval and 96 is the least recently completed interval. For example, if it is 15 minutes interval history, then the 96 is the interval number completed 23 hours and 45 minutes prior to interval 1.')
cepIntervalStatsValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepIntervalStatsValidData.setStatus('current')
if mibBuilder.loadTexts: cepIntervalStatsValidData.setDescription("This object indicates whether the performance statistics for this interval is valid. The value 'true' means the performance statistics is valid, otherwise the performance statistics is invalid for the interval.")
cepIntervalStatsRange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 5, 1, 3), CiscoEntPerfRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepIntervalStatsRange.setStatus('current')
if mibBuilder.loadTexts: cepIntervalStatsRange.setDescription("This object provides the range information for the object 'cepIntervalStatsMeasurement'.")
cepIntervalStatsMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 5, 1, 4), CiscoEntPerfMeasurement()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepIntervalStatsMeasurement.setStatus('current')
if mibBuilder.loadTexts: cepIntervalStatsMeasurement.setDescription("This object provides the specific performance statistics of an entity over the specified interval. The range of this object can be identified by object 'cepIntervalStatsRange'.")
cepIntervalStatsCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 5, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepIntervalStatsCreateTime.setStatus('current')
if mibBuilder.loadTexts: cepIntervalStatsCreateTime.setDescription('This object provides the time stamp at which the specific performance statistics gets created.')
ciscoEntityPerformanceMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 6))
cepThroughputTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 7), )
if mibBuilder.loadTexts: cepThroughputTable.setStatus('current')
if mibBuilder.loadTexts: cepThroughputTable.setDescription('This table maintains the specific throughput information for each physical entity, which supports throughput monitoring. An agent creates a conceptual row to this table corresponding to a physical entity upon detection of a physical entity supporting the throughput monitoring. An agent destroys a conceptual row from this table corresponding to a physical entity upon removal of the physical entity.')
cepThroughputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cepThroughputEntry.setStatus('current')
if mibBuilder.loadTexts: cepThroughputEntry.setDescription('A conceptual row in the cepThroughputTable. There is an entry in this table for each entity which supports throughput monitoring, as defined by a value of entPhysicalIndex.')
cepThroughputLicensedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 7, 1, 1), Counter64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cepThroughputLicensedBW.setStatus('current')
if mibBuilder.loadTexts: cepThroughputLicensedBW.setDescription('This object represents the bandwidth for installed throughput license of the entity.')
cepThroughputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("exceed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cepThroughputLevel.setStatus('current')
if mibBuilder.loadTexts: cepThroughputLevel.setDescription('This object represents the current throughput level for installed throughput license of the entity. normal (1) - Throughput usage is normal warning (2) - Throughput usage has crossed the configured threshold limit exceed (3) - Throughput usage has exceeded the total licensed bandwidth')
cepThroughputInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 86400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cepThroughputInterval.setStatus('current')
if mibBuilder.loadTexts: cepThroughputInterval.setDescription('The object represents the configured time interval at which the cepThroughputLevel is checked for this entity.')
cepThroughputThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 95))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cepThroughputThreshold.setStatus('current')
if mibBuilder.loadTexts: cepThroughputThreshold.setDescription('The object represents the configured throughput threshold for this entity.')
cepThroughputAvgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 7, 1, 5), Counter64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cepThroughputAvgRate.setStatus('current')
if mibBuilder.loadTexts: cepThroughputAvgRate.setDescription('The object represents the average throughput rate in the interval cepThroughputInterval for this entity.')
cepThresholdNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 6, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cepThresholdNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cepThresholdNotifEnabled.setDescription("This object controls the entity performance measurement rising/falling threshold notification. When this object contains a value of 'true', then generation of entity rising/falling threshold notification is enabled. If this object contains a value of 'false', then generation of entity rising/falling threshold notification is disabled. The generation of the rising/falling threshold depends on this global value as well as the object 'cepConfigThresholdNotifEnabled' present in cepConfigTable.")
cepThroughputNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 756, 1, 6, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cepThroughputNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cepThroughputNotifEnabled.setDescription("This object controls throughput rate notification. When this object contains a value 'true', then generation of cepThroughputNotif is enabled. If this object contains a value 'false', then generation of cepThroughputNotif is disabled.")
cepPerfThreshRisingEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 756, 0, 1)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigPerfRange"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigRisingThreshold"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepStatsMeasurement"))
if mibBuilder.loadTexts: cepPerfThreshRisingEvent.setStatus('current')
if mibBuilder.loadTexts: cepPerfThreshRisingEvent.setDescription('A notification indicating that the specific performance measurement is rising the configured threshold on this physical entity at a specific performance interval. This notification will be sent, whenever the cepStatsMeasurement is equal to or above the cepConfigRisingThreshold for a specific performance measurement at a specific interval and the notification control objects are enabled. An agent may throttle the generation of consecutive cepPerfThreshRisingEvent notification so that there is at least a five second (suggested default) gap between notification for an entity of specific performance measurement type at a specific interval.')
cepPerfThreshFallingEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 756, 0, 2)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigPerfRange"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigFallingThreshold"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepStatsMeasurement"))
if mibBuilder.loadTexts: cepPerfThreshFallingEvent.setStatus('current')
if mibBuilder.loadTexts: cepPerfThreshFallingEvent.setDescription('A notification indicating that the specific performance measurement is falling the configured threshold on this physical entity at a specific performance interval. This notification will be sent, whenever the cepStatsMeasurement is equal to or below the cepConfigFallingThreshold for a specific performance measurement at a specific interval and the notification control objects are enabled. An agent may throttle the generation of consecutive cepPerfThreshFallingEvent notification so that there is at least a five second (suggested default) gap between notification for an entity of specific performance measurement type at a specific interval.')
cepThroughputNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 756, 0, 3)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputLicensedBW"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputLevel"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputAvgRate"))
if mibBuilder.loadTexts: cepThroughputNotif.setStatus('current')
if mibBuilder.loadTexts: cepThroughputNotif.setDescription('A notification indicating that the average throughput rate for the configured interval has exceeded the threshold or reached maximum bandwidth allowed. This notification will be sent, whenever the cepThroughputLevel object has the value warning(2) or exceed(3). The condition for trap generation will be checked in every cepThroughputInterval. cepThroughputNotif with ceqfpThrougputLevel as warning(2) indicates that average throughput rate has crossed the configured threshold. cepThroughputNotif with cepThrougputLevel as exceed(3) indicates that average throughput rate has reached maximum licensed bandwidth.')
ciscoEntityPerformanceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 1))
ciscoEntityPerformanceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2))
ciscoEntityPerformanceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 1, 1)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "ciscoEntityPerformanceMIBEntityGroup"), ("CISCO-ENTITY-PERFORMANCE-MIB", "ciscoEntityPerformanceMIBConfigGroup"), ("CISCO-ENTITY-PERFORMANCE-MIB", "ciscoEntityPerformanceMIBNotificationGroup"), ("CISCO-ENTITY-PERFORMANCE-MIB", "ciscoEntityPerformanceMIBPerfStatsGroup"), ("CISCO-ENTITY-PERFORMANCE-MIB", "ciscoEntityPerformanceMIBIntervalStatsGroup"), ("CISCO-ENTITY-PERFORMANCE-MIB", "ciscoEntityPerformanceMIBNotifControlGroup"), ("CISCO-ENTITY-PERFORMANCE-MIB", "ciscoEntityPerformanceMIBEntityIntervalGroup"), ("CISCO-ENTITY-PERFORMANCE-MIB", "ciscoEntityPerformanceMIBThroughputGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBCompliance = ciscoEntityPerformanceMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBCompliance.setDescription('The compliance statement for CISCO-ENTITY-PERFORMANCE-MIB.')
ciscoEntityPerformanceMIBEntityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2, 1)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepEntityNumReloads"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepEntityLastReloadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBEntityGroup = ciscoEntityPerformanceMIBEntityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBEntityGroup.setDescription('This group contains collection of entity information objects.')
ciscoEntityPerformanceMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2, 2)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigRisingThreshold"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigFallingThreshold"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigPerfRange"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepConfigThresholdNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBConfigGroup = ciscoEntityPerformanceMIBConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBConfigGroup.setDescription('This group contains collection of configuration objects related to performance.')
ciscoEntityPerformanceMIBPerfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2, 3)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepStatsAlgorithm"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepStatsMeasurement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBPerfStatsGroup = ciscoEntityPerformanceMIBPerfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBPerfStatsGroup.setDescription('This group contains collection of performance statistics information objects.')
ciscoEntityPerformanceMIBEntityIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2, 4)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepIntervalTimeElapsed"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepValidIntervalCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBEntityIntervalGroup = ciscoEntityPerformanceMIBEntityIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBEntityIntervalGroup.setDescription('This group contains collection of performance interval data objects.')
ciscoEntityPerformanceMIBIntervalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2, 5)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepIntervalStatsValidData"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepIntervalStatsMeasurement"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepIntervalStatsCreateTime"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepIntervalStatsRange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBIntervalStatsGroup = ciscoEntityPerformanceMIBIntervalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBIntervalStatsGroup.setDescription('This group contains collection of performance interval statistics objects.')
ciscoEntityPerformanceMIBNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2, 6)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepThresholdNotifEnabled"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBNotifControlGroup = ciscoEntityPerformanceMIBNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBNotifControlGroup.setDescription('This group contains collection of notification control objects.')
ciscoEntityPerformanceMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2, 7)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepPerfThreshRisingEvent"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepPerfThreshFallingEvent"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBNotificationGroup = ciscoEntityPerformanceMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBNotificationGroup.setDescription('This group contains collection of performance notification objects.')
ciscoEntityPerformanceMIBThroughputGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 756, 2, 2, 8)).setObjects(("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputLicensedBW"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputLevel"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputInterval"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputThreshold"), ("CISCO-ENTITY-PERFORMANCE-MIB", "cepThroughputAvgRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEntityPerformanceMIBThroughputGroup = ciscoEntityPerformanceMIBThroughputGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEntityPerformanceMIBThroughputGroup.setDescription('This group contains collection of throughput rate objects.')
mibBuilder.exportSymbols("CISCO-ENTITY-PERFORMANCE-MIB", cepPerfThreshRisingEvent=cepPerfThreshRisingEvent, cepIntervalStatsCreateTime=cepIntervalStatsCreateTime, ciscoEntityPerformanceMIBGroups=ciscoEntityPerformanceMIBGroups, cepThroughputAvgRate=cepThroughputAvgRate, cepThroughputNotifEnabled=cepThroughputNotifEnabled, ciscoEntityPerformanceMIBConform=ciscoEntityPerformanceMIBConform, cepStatsMeasurement=cepStatsMeasurement, ciscoEntityPerformanceMIBEntityGroup=ciscoEntityPerformanceMIBEntityGroup, cepStatsEntry=cepStatsEntry, ciscoEntityPerformanceMIBCompliances=ciscoEntityPerformanceMIBCompliances, ciscoEntityPerformanceMIBEntityIntervalGroup=ciscoEntityPerformanceMIBEntityIntervalGroup, cepConfigTable=cepConfigTable, cepConfigInterval=cepConfigInterval, cepConfigThresholdNotifEnabled=cepConfigThresholdNotifEnabled, CiscoEntPerfIntervalAlgo=CiscoEntPerfIntervalAlgo, cepConfigEntry=cepConfigEntry, CiscoEntPerfRange=CiscoEntPerfRange, cepIntervalStatsEntry=cepIntervalStatsEntry, cepThroughputEntry=cepThroughputEntry, cepThresholdNotifEnabled=cepThresholdNotifEnabled, ciscoEntityPerformanceMIBThroughputGroup=ciscoEntityPerformanceMIBThroughputGroup, cepHistInterval=cepHistInterval, cepEntityEntry=cepEntityEntry, cepPerfThreshFallingEvent=cepPerfThreshFallingEvent, cepConfigFallingThreshold=cepConfigFallingThreshold, ciscoEntityPerformanceMIBCompliance=ciscoEntityPerformanceMIBCompliance, cepIntervalStatsMeasurement=cepIntervalStatsMeasurement, cepIntervalTimeElapsed=cepIntervalTimeElapsed, cepIntervalStatsTable=cepIntervalStatsTable, ciscoEntityPerformanceMIBConfigGroup=ciscoEntityPerformanceMIBConfigGroup, cepEntityTable=cepEntityTable, cepIntervalStatsRange=cepIntervalStatsRange, cepIntervalNumber=cepIntervalNumber, ciscoEntityPerformanceMIBNotifObjects=ciscoEntityPerformanceMIBNotifObjects, cepIntervalStatsValidData=cepIntervalStatsValidData, ciscoEntityPerformanceMIBIntervalStatsGroup=ciscoEntityPerformanceMIBIntervalStatsGroup, cepThroughputTable=cepThroughputTable, CiscoEntPerfMeasurement=CiscoEntPerfMeasurement, cepEntityIntervalTable=cepEntityIntervalTable, cepValidIntervalCount=cepValidIntervalCount, CiscoEntPerfHistInterval=CiscoEntPerfHistInterval, ciscoEntityPerformanceMIBObjects=ciscoEntityPerformanceMIBObjects, cepThroughputNotif=cepThroughputNotif, cepConfigRisingThreshold=cepConfigRisingThreshold, cepThroughputThreshold=cepThroughputThreshold, cepStatsAlgorithm=cepStatsAlgorithm, cepEntityNumReloads=cepEntityNumReloads, CiscoEntPerfType=CiscoEntPerfType, cepStatsTable=cepStatsTable, cepConfigPerfRange=cepConfigPerfRange, cepConfigPerfType=cepConfigPerfType, ciscoEntityPerformanceMIBNotifs=ciscoEntityPerformanceMIBNotifs, cepEntityIntervalEntry=cepEntityIntervalEntry, cepEntityLastReloadTime=cepEntityLastReloadTime, ciscoEntityPerformanceMIBNotificationGroup=ciscoEntityPerformanceMIBNotificationGroup, cepThroughputLevel=cepThroughputLevel, ciscoEntityPerformanceMIBPerfStatsGroup=ciscoEntityPerformanceMIBPerfStatsGroup, cepThroughputInterval=cepThroughputInterval, ciscoEntityPerformanceMIBNotifControlGroup=ciscoEntityPerformanceMIBNotifControlGroup, CiscoEntPerfInterval=CiscoEntPerfInterval, cepThroughputLicensedBW=cepThroughputLicensedBW, PYSNMP_MODULE_ID=ciscoEntityPerformanceMIB, ciscoEntityPerformanceMIB=ciscoEntityPerformanceMIB)
