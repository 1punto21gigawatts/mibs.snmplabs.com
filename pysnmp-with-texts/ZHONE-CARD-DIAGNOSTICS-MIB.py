#
# PySNMP MIB module ZHONE-CARD-DIAGNOSTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-CARD-DIAGNOSTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:46:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, TimeTicks, iso, Unsigned32, ObjectIdentity, Integer32, NotificationType, Bits, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "TimeTicks", "iso", "Unsigned32", "ObjectIdentity", "Integer32", "NotificationType", "Bits", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
zhoneSlotIndex, zhoneCard, zhoneModules, zhoneShelfIndex = mibBuilder.importSymbols("Zhone", "zhoneSlotIndex", "zhoneCard", "zhoneModules", "zhoneShelfIndex")
ZhoneDiagAction, ZhoneDiagResult, ZhoneRowStatus = mibBuilder.importSymbols("Zhone-TC", "ZhoneDiagAction", "ZhoneDiagResult", "ZhoneRowStatus")
zhoneCardDiagnosticsModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 11))
zhoneCardDiagnosticsModule.setRevisions(('2010-03-05 14:05', '2009-05-14 09:39', '2009-05-07 22:37', '2009-01-12 15:36', '2008-10-22 05:28', '2006-07-24 11:28', '2001-11-14 15:28', '2001-08-30 11:21', '2001-08-27 18:14', '2001-06-28 12:01', '2001-06-26 12:40', '2000-12-12 16:30', '2000-10-19 19:45', '2000-10-17 10:32', '2000-09-12 11:07',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneCardDiagnosticsModule.setRevisionsDescriptions(('V01.00.14 change tactestresults to persistent', 'V01.00.13 add optional parameters for line test', 'V01.00.12 mtac name changes', 'add trap for mtac ringer power bus fault alarm', 'Changing the mtac name into tac and removing the name metallic.', 'V01.00.09 - Add new Mtac test controls for the Legerity Test Suite.', 'V01.00.08. Added comments for mtactestmode', 'V01.00.07 - Modify description of zhoneCardDiagType to include specific diagnostics for T3TDM card', 'V01.00.06 - Modify description of zhoneCardDiagType to include specific diagnostics for VASP card - Add DEFVAL for zhoneCardDiagType - Modify DEFVAL for zhoneCardDiagRepetition, zhoneCardDiagDuration', 'V01.00.05 - fix the 17 slot problem', 'V01.00.04 - Added zhoneMetallicTest Table entry,and also added the markups. Removed zhoneCardDiagIndex field from zhoneCardDiagObjects. ', 'V01.00.03 - move zhoneCardDiagNextIndex into table.', 'V01.00.02 - Corrected revision information.', 'VO1.00.01 - Added ZHONE_KEYWORD markup.', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: zhoneCardDiagnosticsModule.setLastUpdated('201003030930Z')
if mibBuilder.loadTexts: zhoneCardDiagnosticsModule.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhoneCardDiagnosticsModule.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhoneCardDiagnosticsModule.setDescription('Contains the diagnostics and results available on a per card or resource basis.')
zhoneCardDiagNextTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 5), )
if mibBuilder.loadTexts: zhoneCardDiagNextTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagNextTable.setDescription('Augment table of the unit/card resource but specific to the diagnostic results information. This card contains the index to create diagnostics table entries (zhoneCardDiagEntry) which contains all the data for executing and obtaining diagnostic results.')
zhoneCardDiagNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 5, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: zhoneCardDiagNextEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagNextEntry.setDescription('This is the card diagnostics next index table which contains all the data for: - index for creating next zhoneCardDiagEntry.')
zhoneCardDiagNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardDiagNextIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagNextIndex.setDescription('We allow ten diagnostic requests from multiple interfaces. The diagNextIndex represents the next available diagnostic request handle for requesting a diagnostic. NOTE: this operates as a wrap-around counter starting at 1 and wrapping around to 1 after reaching 10.')
zhoneCardDiagTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6), )
if mibBuilder.loadTexts: zhoneCardDiagTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagTable.setDescription('Augment table of the unit/card resource but specific to the diagnostic results information. This is the card diagnostics table which contains all the data for executing and obtaining diagnostic results.')
zhoneCardDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"), (0, "ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagIndex"))
if mibBuilder.loadTexts: zhoneCardDiagEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagEntry.setDescription('This is the card diagnostics table which contains all the data for: - invoking diagnostics, - obtaining diagnostic results.')
zhoneCardDiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: zhoneCardDiagIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagIndex.setDescription('We allow ten diagnostic requests from multiple interfaces. The diagIndex represents the diagnostic request to start a diagnostic or obtain test results for a completed diagnostic. NOTE: this operates as a wrap-around counter starting at 1 and wrapping around to 1 after reaching 10.')
zhoneCardDiagType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("selftest", 1), ("supvBus", 2), ("cardEEprom", 3), ("frbus", 4), ("pcmcia", 5), ("shelfLamp", 6), ("realTimeClock", 7), ("fanTray", 8), ("shelfMonitor", 9), ("ioCard", 10), ("mezzanineCard", 11), ("backPlane", 12), ("midPlane", 13))).clone('selftest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCardDiagType.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagType.setDescription("This field specifies the diagnostic to execute. The default value is 'selftest'. NOTE: not all of the individual diagnostics are available on every Zhone card type. NOTE: Zhone card types (cardZhoneType) are defined in the genCardResources.mib List of possible diagnostics: ============================ Common to all PLS cards ----------------------- selftest(1) - this diagnostic will execute all of the individual tests available on this card. Supports: diagStart, diagStop, diagRepetition. cardEEprom(3) - this diagnostic will verify the main card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. frbus(4) - this diagnostic will verify that the BAN slot card can access the Fhrame Bus by doing a loopback with 10 message of 100 bytes. Supports: diagStart, diagStop, diagRepetition. backPlane(12) - this diagnostic will verify that the BAN slot card can access the back plane by verifying the back plane EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. cardZhoneType::infoServices(3) specific --------------------------------------- supvBus(2) - this diagnostic will verify that the BAN slot card can access the supervisory Bus by doing a loopback of 20 bytes. Supports: diagStart, diagStop, diagRepetition. pcmcia(5) - this diagnostic will verify that the InfoServ card can access the PCMCIA flash card I/O by doing a file create, write, and read of length 4000 bytes. Supports: diagStart, diagStop, diagRepetition. shelfLamp(6) - this diagnostic will illuminate the shelf alarm indicators for a period of 1.5 seconds. The indicators will return to their original settings after the diagnostic completes. Supports: diagStart, diagStop, diagRepetition. realTimeClk(7) - this diagnostic will verify that the real time clock increments. Supports: diagStart, diagStop, diagRepetition. fanTray(8) - this diagnostic tests that the fan tray is operational by verifying the fan tray EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. shelfMonitor(9) - this diagnostic tests the shelf monitor board is operational by checking the POST status register and verifying the shelf monitor board EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. midPlane(13) - this diagnostic will verify that the mid plane card is present by verifying the mid plane card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. cardZhoneType::vasp(5) specific --------------------------------- ioCard(10) - this diagnostic will verify that the I/O card is present by verifying the I/O card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. mezzanineCard(11) - this diagnostic will test that the mezzanine card is operational by verifying the mezzanine card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. cardZhoneType::t3Tdm(6) specific --------------------------------- ioCard(10) - this diagnostic will verify that the I/O card is present by verifying the I/O card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. midPlane(13) - this diagnostic will verify that the mid plane card is present by verifying the mid plane card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. cardZhoneType::ethernet(9) specific ----------------------------------- midPlane(13) - this diagnostic will verify that the mid plane card is present by verifying the mid plane card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. cardZhoneType::hdsl2(10) specific --------------------------------- ioCard(10) - this diagnostic will verify that the I/O card is present by verifying the I/O card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition. mezzanineCard(11) - this diagnostic will test that the mezzanine card is operational by verifying the mezzanine card EEPROM checksum. Supports: diagStart, diagStop, diagRepetition.")
zhoneCardDiagAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 3), ZhoneDiagAction().clone('diagStart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCardDiagAction.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagAction.setDescription('The diagAction field represents the diagnostic operation to execute. Current supported actions are as follows: diagStart : begin diagnostics and initialize results. diagStop : stop diagnostics if not yet complete. diagSuspend: suspend diagnostics at current point. diagResume : resume diagnostics from point of suspension.')
zhoneCardDiagRepetition = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCardDiagRepetition.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagRepetition.setDescription('This field specifies the number of repetitions of diagnostics to execute. The default value is 1. NOTE: this field operates as an OR with the diagDuration field. If this field is set to non-zero then the diagnostics will be executed that amount of repetitions.')
zhoneCardDiagDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCardDiagDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagDuration.setDescription('This field specifies the duration of diagnostics to execute. The default value is 60 seconds. NOTE: this field operates as an OR with the diagRepetition field. If this field is set to non-zero then the diagnostics will be executed that amount of time.')
zhoneCardDiagResult = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 6), ZhoneDiagResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardDiagResult.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagResult.setDescription('This represents the overall diagnostic result.')
zhoneCardDiagPassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardDiagPassCount.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagPassCount.setDescription('The number of diagnostics that executed successfully.')
zhoneCardDiagFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardDiagFailCount.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagFailCount.setDescription('The number of diagnostics that have failed.')
zhoneCardDiagDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardDiagDetails.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagDetails.setDescription('The failure reason, if any, for the last diagnostic which has executed. NOTE: An empty string indicates that no additional information is available.')
zhoneCardDiagStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardDiagStartTime.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagStartTime.setDescription('Starting date and time of last selftest execution.')
zhoneCardDiagEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardDiagEndTime.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagEndTime.setDescription('Ending date and time of last selftest execution.')
zhoneCardDiagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 6, 1, 12), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCardDiagRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagRowStatus.setDescription('In any case where a new row can be created either via the cli or zms there will always be a proprietary mib entity of type ZhoneRowStatus which has the basic equivalence of the standard rowstatus object_id.')
zhoneTacTestTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7), )
if mibBuilder.loadTexts: zhoneTacTestTable.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestTable.setDescription('This table contains one entry for each tac test channel available on Zhone devices. In the initial release only the primary channel (1) is supported. Future line cards may support the second channel. If the second channel is supported the row will be populated, if the second channel is not supported a get will return no such instance. ')
zhoneTacTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1), ).setIndexNames((0, "ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacIndex"))
if mibBuilder.loadTexts: zhoneTacTestEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestEntry.setDescription('One row per tac test channel.')
zhoneTacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: zhoneTacIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneTacIndex.setDescription('This field is the index field for the tac test channel which will be connected on the external port. This device supports a maximum of two channels, one or both channels may be supported by a device depending on which lines cards are installed.')
zhoneTacInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTacInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneTacInterfaceIndex.setDescription('This field contains the InterfaceIndex of the physical line to be tested. If no line is currently being tested this value is 0. The ability of a physical line type to support tac test may vary depending on the line cards installed and the external test equipment. This field may not be modified when an tac test is in progress as indicated by a non-zero value in this field and the test mode set to one of tacModeLookIn, tacModeLookOut or tacModeBridge')
zhoneTacTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mtacModeBridge", 1), ("mtacModeLookIn", 2), ("mtacModeLookOut", 3), ("mtacModeNone", 4))).clone('mtacModeNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTacTestMode.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestMode.setDescription('This field is used to set the mtac test mode for a given line. The options are: mtacModeBridge - All traffic on the given line is bridged across the mtac lines mtacModeLookIn - All outbound traffic on the given line originates exclusively to the mtac lines mtacModeLookIn - All inbound traffic on the given line originates exclusively to the mtac lines mtacModeNone - No mtac test is in progress. The mtac test mode may be changed only if the zhoneInterfaceIndex is set, Otherwise it defaults to mtacModeNone. And can be changed again by setting InterfaceIndex to non-zero values. ')
zhoneTacTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("none", 1), ("runAllTests", 2), ("abortTest", 3), ("calibration", 4), ("foreignDCVoltage", 5), ("foreignACVoltage", 6), ("dcLoopResistance", 7), ("threeElementInsulationResistance", 8), ("fiveElementInsulationResistance", 9), ("threeElementCapacitance", 10), ("receiverOffHook", 11), ("distanceToOpen", 12), ("foreignACCurrents", 13), ("ringerEquivalencyNumber", 14), ("dtmfAndPulseDigitMeasurement", 15), ("noiseMeasurement", 16), ("signalToNoiseRatio", 17), ("arbitrarySignalToneMeasurement", 18), ("toneGeneration", 19), ("transHybridLoss", 20), ("drawAndBreakDialTone", 21), ("inwardCurrent", 22), ("dcFeedSelf", 23), ("onAndOffHookSelfTest", 24), ("ringingSelfTest", 25), ("ringingMonitor", 26), ("meteringSelfTest", 27), ("transmissionSelfTest", 28), ("dialingSelfTest", 29), ("howlerTest", 30), ("fuseTest", 31), ("readLoopAndBatteryConditions", 32))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTacTestId.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestId.setDescription('This object is only valid for Tac Cards which support the new Legerity Suite of tests. This object identifies which test is to be run, or can be set to abort the current test. Test results are sent to the zhoneTacTestResultsTable. There are 3 Legerity software packages: Basic Test (VCP-BT), Advanced Test (VCP-AT), and Advanced Test Plus (VCP-ATP). We currently support Basic Test package. The following lists which tests are supported in each software package. Calibration VCP-ATP Foreign DC Voltage Test VCP-BT, VCP-AT, VCP-ATP Foreign AC VoltageTest VCP-BT, VCP-AT, VCP-ATP DC Loop Resistance Test VCP-BT, VCP-AT, VCP-ATP Three-Element Insulation Resistance Test VCP-BT, VCP-AT, VCP-ATP Five-Element Insulation Resistance Test VCP-ATP Three-Element Capacitance Test VCP-BT, VCP-AT Receiver Off-Hook Test VCP-BT, VCP-AT, VCP-ATP Distance to Open Test VCP-BT, VCP-AT Foreign AC Currents Test VCP-BT, VCP-AT Ringer Equivalency Number Test VCP-BT, VCP-AT, VCP-ATP DTMF and Pulse Digit Measurement Test VCP-BT, VCP-AT Noise Measurement Test VCP-BT, VCP-AT, VCP-ATP Signal to Noise Ratio Test VCP-ATP Arbitrary Single Tone Measurement Test VCP-ATP Tone Generation Test VCP-BT, VCP-AT Trans-Hybrid Loss Test VCP-BT, VCP-AT, VCP-ATP Draw and Break Dial Tone Test VCP-BT, VCP-AT Inward Current Test VCP-ATP DC Feed Self-Test VCP-BT, VCP-AT, VCP-ATP On/Off Hook Self-Test VCP-BT, VCP-AT, VCP-ATP Ringing Self-Test VCP-BT, VCP-AT, VCP-ATP Ringing Monitor Test VCP-BT, VCP-AT, VCP-ATP Metering Self-Test VCP-BT, VCP-AT Transmission Self-Test VCP-BT, VCP-AT, VCP-ATP Dialing Sef Test VCP-BT, VCP-AT Howler Test VCP-BT, VCP-AT Fuse Test VCP-ATP Read Loop and Battery Conditions VCP-BT, VCP-AT, VCP-ATP ')
zhoneTacTestParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTacTestParam1.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestParam1.setDescription('Optional Test Parameter #1')
zhoneTacTestParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTacTestParam2.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestParam2.setDescription('Optional Test Paramerter #2')
zhoneTacTestParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTacTestParam3.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestParam3.setDescription('Optional Test Parameter #3')
zhoneTacTestParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTacTestParam4.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestParam4.setDescription('Optional Test Parameter #4')
zhoneTacTestParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTacTestParam5.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestParam5.setDescription('Optional Test Parameter #5 Value: 0x00000001 Force Line-Test mode')
zhoneTacTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 3, 12), )
if mibBuilder.loadTexts: zhoneTacTestResultsTable.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestResultsTable.setDescription('Table of Tac Test Results objects. Indexed by same index as zhoneTacTestTable. This table is only valid for Tac cards which support the Legerity Suite of tests.')
zhoneTacTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 3, 12, 1), ).setIndexNames((0, "ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacIndex"))
if mibBuilder.loadTexts: zhoneTacTestResultsEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestResultsEntry.setDescription('Entry of Test Results objects. Indexed by same index as zhoneTacTestEntry. This entry is only valid for Tac cards which support the Legerity Suite of tests.')
zhoneTacTestResultsTimeStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 12, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTacTestResultsTimeStarted.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestResultsTimeStarted.setDescription('Description.')
zhoneTacTestResultsTimeEnded = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 12, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTacTestResultsTimeEnded.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestResultsTimeEnded.setDescription('Description.')
zhoneTacTestResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testNotStarted", 1), ("testInProgress", 2), ("testCompleted", 3), ("testAborted", 4), ("testNotSupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTacTestResultStatus.setReference('Contains the test status.')
if mibBuilder.loadTexts: zhoneTacTestResultStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestResultStatus.setDescription('Contains test results.')
zhoneTacTestResultsOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 3, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTacTestResultsOutput.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestResultsOutput.setDescription("For Legerity Test Suite, results of test(s) are output to this object as one string, separated by UNIX '/n' for newline characters and terminated by the NULL character. This test results will persist until the next test is run or until tac card reboot.")
zhoneTacTestTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 13))
if mibBuilder.loadTexts: zhoneTacTestTraps.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestTraps.setDescription('Traps for the tac system.')
zhoneRingerTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3, 13, 0))
if mibBuilder.loadTexts: zhoneRingerTraps.setStatus('current')
if mibBuilder.loadTexts: zhoneRingerTraps.setDescription('Traps associated with ring generator. Traps should be added below - the .0 on this entry is required.')
zhoneRingerStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 13, 0, 1))
if mibBuilder.loadTexts: zhoneRingerStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: zhoneRingerStatusAlarm.setDescription('This trap occurs when a ring signal fails to be detected, or when it re-starts after failure.')
zhoneRingerBusFaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 3, 13, 0, 2))
if mibBuilder.loadTexts: zhoneRingerBusFaultAlarm.setStatus('current')
if mibBuilder.loadTexts: zhoneRingerBusFaultAlarm.setDescription('This trap occurs when a fault in the ringer power bus is detected. Such fault may be caused by the possible shortage in the POTS or DSL line.')
zhoneCardDiagObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 6, 11, 1)).setObjects(("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagNextIndex"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagType"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagAction"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagRepetition"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagDuration"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagResult"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagPassCount"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagFailCount"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagDetails"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagStartTime"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagEndTime"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneCardDiagRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCardDiagObjects = zhoneCardDiagObjects.setStatus('current')
if mibBuilder.loadTexts: zhoneCardDiagObjects.setDescription('This group contains objects associated with Zhone Card Diagnostics')
zhoneTacTestObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 6, 11, 2)).setObjects(("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacInterfaceIndex"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacTestMode"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacTestId"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacTestResultsTimeStarted"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacTestResultsTimeEnded"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacTestResultStatus"), ("ZHONE-CARD-DIAGNOSTICS-MIB", "zhoneTacTestResultsOutput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneTacTestObjects = zhoneTacTestObjects.setStatus('current')
if mibBuilder.loadTexts: zhoneTacTestObjects.setDescription('This group contains objects associated with initiating tac tests')
mibBuilder.exportSymbols("ZHONE-CARD-DIAGNOSTICS-MIB", zhoneCardDiagDetails=zhoneCardDiagDetails, zhoneTacTestMode=zhoneTacTestMode, zhoneRingerBusFaultAlarm=zhoneRingerBusFaultAlarm, zhoneCardDiagNextIndex=zhoneCardDiagNextIndex, zhoneTacTestResultsTimeEnded=zhoneTacTestResultsTimeEnded, zhoneCardDiagEntry=zhoneCardDiagEntry, zhoneTacTestParam4=zhoneTacTestParam4, zhoneCardDiagRowStatus=zhoneCardDiagRowStatus, zhoneTacIndex=zhoneTacIndex, zhoneTacTestParam1=zhoneTacTestParam1, zhoneTacInterfaceIndex=zhoneTacInterfaceIndex, zhoneTacTestTable=zhoneTacTestTable, zhoneRingerTraps=zhoneRingerTraps, zhoneCardDiagStartTime=zhoneCardDiagStartTime, zhoneTacTestResultsOutput=zhoneTacTestResultsOutput, zhoneTacTestResultsTimeStarted=zhoneTacTestResultsTimeStarted, zhoneCardDiagResult=zhoneCardDiagResult, zhoneCardDiagPassCount=zhoneCardDiagPassCount, zhoneTacTestTraps=zhoneTacTestTraps, zhoneCardDiagTable=zhoneCardDiagTable, zhoneCardDiagObjects=zhoneCardDiagObjects, zhoneCardDiagnosticsModule=zhoneCardDiagnosticsModule, zhoneTacTestParam2=zhoneTacTestParam2, zhoneTacTestParam5=zhoneTacTestParam5, zhoneCardDiagNextTable=zhoneCardDiagNextTable, zhoneCardDiagEndTime=zhoneCardDiagEndTime, zhoneTacTestEntry=zhoneTacTestEntry, zhoneTacTestResultStatus=zhoneTacTestResultStatus, zhoneTacTestId=zhoneTacTestId, zhoneTacTestResultsEntry=zhoneTacTestResultsEntry, zhoneCardDiagDuration=zhoneCardDiagDuration, zhoneTacTestObjects=zhoneTacTestObjects, zhoneCardDiagNextEntry=zhoneCardDiagNextEntry, zhoneTacTestParam3=zhoneTacTestParam3, zhoneCardDiagFailCount=zhoneCardDiagFailCount, zhoneCardDiagIndex=zhoneCardDiagIndex, zhoneCardDiagAction=zhoneCardDiagAction, zhoneTacTestResultsTable=zhoneTacTestResultsTable, zhoneCardDiagRepetition=zhoneCardDiagRepetition, zhoneRingerStatusAlarm=zhoneRingerStatusAlarm, zhoneCardDiagType=zhoneCardDiagType, PYSNMP_MODULE_ID=zhoneCardDiagnosticsModule)
