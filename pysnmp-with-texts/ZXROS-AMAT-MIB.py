#
# PySNMP MIB module ZXROS-AMAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXROS-AMAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, enterprises, Bits, ModuleIdentity, IpAddress, Counter64, MibIdentifier, TimeTicks, Integer32, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "enterprises", "Bits", "ModuleIdentity", "IpAddress", "Counter64", "MibIdentifier", "TimeTicks", "Integer32", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxros = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 100))
zxrosAMAT = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 100, 1000))
class DisplayString(OctetString):
    pass

zxrosAMATconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1))
zxrosAMATAttackAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATAttackAgingTime.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATAttackAgingTime.setDescription('An 32 bit unsigned integer description of the zxrosAMATAttackAgingTime.')
zxrosAMATState = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATState.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATState.setDescription('Using enable and disable to describe amat state.')
zxrosAMATHashOverNum = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATHashOverNum.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATHashOverNum.setDescription('An 32 bit unsigned integer description of the zxrosAMATHashOverNum.')
zxrosAMATHashUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATHashUpdateTime.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATHashUpdateTime.setDescription('An 32 bit unsigned integer description of the zxrosAMATHashUpdateTime.')
zxrosAMATIcmpConn = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATIcmpConn.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIcmpConn.setDescription('An 32 bit unsigned integer description of the zxrosAMATIcmpConn.')
zxrosAMATIcmpRate = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATIcmpRate.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIcmpRate.setDescription('An 32 bit unsigned integer description of the zxrosAMATIcmpRate.')
zxrosAMATIntervalSampleRate = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATIntervalSampleRate.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIntervalSampleRate.setDescription('An 32 bit unsigned integer description of the zxrosAMATIntervalSampleRate.')
zxrosAMATLogging = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATLogging.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATLogging.setDescription('Using on and off to describe amat Logging state.')
zxrosAMATRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATRateLimit.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATRateLimit.setDescription('An 32 bit unsigned integer description of the zxrosAMATRateLimit.')
zxrosAMATRuleUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATRuleUpdateTime.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATRuleUpdateTime.setDescription('An 32 bit unsigned integer description of the zxrosAMATRuleUpdateTime.')
zxrosAMATSampleCode = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATSampleCode.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATSampleCode.setDescription('An 32 bit unsigned integer description of the zxrosAMATSampleCode.')
zxrosAMATSampleMatchCode = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATSampleMatchCode.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATSampleMatchCode.setDescription('An 32 bit unsigned integer description of the zxrosAMATSampleMatchCode.')
zxrosAMATTcpConn = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATTcpConn.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTcpConn.setDescription('An 32 bit unsigned integer description of the zxrosAMATTcpConn.')
zxrosAMATTcpProportion = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATTcpProportion.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTcpProportion.setDescription('An 32 bit unsigned integer description of the zxrosAMATTcpProportion.')
zxrosAMATTcpRate = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATTcpRate.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTcpRate.setDescription('An 32 bit unsigned integer description of the zxrosAMATTcpRate.')
zxrosAMATUdpConn = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATUdpConn.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATUdpConn.setDescription('An 32 bit unsigned integer description of the zxrosAMATUdpConn.')
zxrosAMATUdpRate = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATUdpRate.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATUdpRate.setDescription('An 32 bit unsigned integer description of the zxrosAMATUdpRate.')
zxrosAMATIgnoreIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2), )
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressTable.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressTable.setDescription('AMAT ignore ip address table')
zxrosAMATIgnoreIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2, 1), ).setIndexNames((0, "ZXROS-AMAT-MIB", "zxrosAMATIgnoreIpAddressIpAddress"), (0, "ZXROS-AMAT-MIB", "zxrosAMATIgnoreIpAddressVpnName"))
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressEntry.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressEntry.setDescription('AMAT ignore ip address entry')
zxrosAMATIgnoreIpAddressIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressIpAddress.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressIpAddress.setDescription('AMAT ignore ip address.')
zxrosAMATIgnoreIpAddressVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressVpnName.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressVpnName.setDescription('A string description of the zxrosAMATIgnoreIpAddressVpnName.')
zxrosAMATIgnoreIpAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table.')
zxrosAMATAttackLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3), )
if mibBuilder.loadTexts: zxrosAMATAttackLoggingTable.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATAttackLoggingTable.setDescription('AMAT attack logging table')
zxrosAMATAttackLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1), ).setIndexNames((0, "ZXROS-AMAT-MIB", "zxrosAMATAttackLoggingNo"))
if mibBuilder.loadTexts: zxrosAMATAttackLoggingEntry.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATAttackLoggingEntry.setDescription('AMAT attack logging entry')
zxrosAMATAttackLoggingNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATAttackLoggingNo.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATAttackLoggingNo.setDescription('An 32 bit unsigned integer description of the zxrosAMATAttackLoggingNo.')
zxrosAMATAttackDetectedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATAttackDetectedTime.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATAttackDetectedTime.setDescription('The time when attack is been detected.')
zxrosAMATAttackOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATAttackOverTime.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATAttackOverTime.setDescription('The time when attack is over.')
zxrosAMATVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATVpnName.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATVpnName.setDescription('A string description of the zxrosAMATVpnName.')
zxrosAMATIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIpAddress.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIpAddress.setDescription('AMAT ignore ip address.')
zxrosAMATAttackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATAttackMode.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATAttackMode.setDescription('A string description of the zxrosAMATAttackMode.')
zxrosAMATTcpPassPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpPassPacket.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTcpPassPacket.setDescription('An 32 bit unsigned integer description of the zxrosAMATTcpPassPacket.')
zxrosAMATTcpFilterPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpFilterPacket.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTcpFilterPacket.setDescription('An 32 bit unsigned integer description of the zxrosAMATTcpFilterPacket.')
zxrosAMATUdpPassPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpPassPacket.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATUdpPassPacket.setDescription('An 32 bit unsigned integer description of the zxrosAMATUdpPassPacket.')
zxrosAMATUdpFilterPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpFilterPacket.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATUdpFilterPacket.setDescription('An 32 bit unsigned integer description of the zxrosAMATUdpFilterPacket.')
zxrosAMATIcmpPassPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpPassPacket.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIcmpPassPacket.setDescription('An 32 bit unsigned integer description of the zxrosAMATIcmpPassPacket.')
zxrosAMATIcmpFilterPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpFilterPacket.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIcmpFilterPacket.setDescription('An 32 bit unsigned integer description of the zxrosAMATIcmpFilterPacket.')
zxrosAMATTcpAttackOverValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpAttackOverValue.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTcpAttackOverValue.setDescription('An 32 bit unsigned integer description of the zxrosAMATTcpAttackOverValue.')
zxrosAMATUdpAttackOverValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpAttackOverValue.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATUdpAttackOverValue.setDescription('An 32 bit unsigned integer description of the zxrosAMATUdpAttackOverValue.')
zxrosAMATIcmpAttackOverValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpAttackOverValue.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIcmpAttackOverValue.setDescription('An 32 bit unsigned integer description of the zxrosAMATIcmpAttackOverValue.')
zxrosAMATPassPacketsBeforeRuleCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATPassPacketsBeforeRuleCreated.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATPassPacketsBeforeRuleCreated.setDescription('An 32 bit unsigned integer description of the zxrosAMATPassPacketsBeforeRuleCreated.')
zxrosAMATShutDownLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4), )
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingTable.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingTable.setDescription('AMAT shut down logging table')
zxrosAMATShutDownLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1), ).setIndexNames((0, "ZXROS-AMAT-MIB", "zxrosAMATShutDownLoggingNo"))
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingEntry.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingEntry.setDescription('AMAT shut down logging entry')
zxrosAMATShutDownLoggingNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingNo.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingNo.setDescription('An 32 bit unsigned integer description of the zxrosAMATShutDownLoggingNo.')
zxrosAMATStartUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATStartUpTime.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATStartUpTime.setDescription('The time when AMAT module is start up.')
zxrosAMATShutDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATShutDownTime.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATShutDownTime.setDescription('The time when AMAT module is shut down.')
zxrosAMATNoAmatPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATNoAmatPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATNoAmatPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATNoAmatPackets.')
zxrosAMATTotalPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTotalPassPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTotalPassPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATTotalPassPackets.')
zxrosAMATTotalFilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTotalFilterPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTotalFilterPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATTotalFilterPackets.')
zxrosAMATTcpPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpPassPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTcpPassPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATTcpPassPackets.')
zxrosAMATTcpFilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpFilterPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATTcpFilterPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATTcpFilterPackets.')
zxrosAMATUdpPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpPassPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATUdpPassPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATUdpPassPackets.')
zxrosAMATUdpFilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpFilterPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATUdpFilterPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATUdpFilterPackets.')
zxrosAMATIcmpPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpPassPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIcmpPassPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATIcmpPassPackets.')
zxrosAMATIcmpFilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpFilterPackets.setStatus('current')
if mibBuilder.loadTexts: zxrosAMATIcmpFilterPackets.setDescription('An 32 bit unsigned integer description of the zxrosAMATIcmpFilterPackets.')
mibBuilder.exportSymbols("ZXROS-AMAT-MIB", zxrosAMATconfig=zxrosAMATconfig, zxrosAMATHashOverNum=zxrosAMATHashOverNum, DisplayString=DisplayString, zxrosAMATShutDownLoggingNo=zxrosAMATShutDownLoggingNo, zxrosAMATIgnoreIpAddressEntry=zxrosAMATIgnoreIpAddressEntry, zxrosAMATIcmpPassPackets=zxrosAMATIcmpPassPackets, zxrosAMATUdpFilterPackets=zxrosAMATUdpFilterPackets, zxrosAMATLogging=zxrosAMATLogging, zxrosAMATTcpConn=zxrosAMATTcpConn, zxrosAMATIcmpFilterPackets=zxrosAMATIcmpFilterPackets, zxrosAMATIcmpConn=zxrosAMATIcmpConn, zte=zte, zxrosAMATTcpAttackOverValue=zxrosAMATTcpAttackOverValue, zxrosAMATIgnoreIpAddressTable=zxrosAMATIgnoreIpAddressTable, zxrosAMATTcpFilterPacket=zxrosAMATTcpFilterPacket, zxrosAMATRuleUpdateTime=zxrosAMATRuleUpdateTime, zxrosAMATTcpProportion=zxrosAMATTcpProportion, zxrosAMATIpAddress=zxrosAMATIpAddress, zxrosAMATIgnoreIpAddressIpAddress=zxrosAMATIgnoreIpAddressIpAddress, zxrosAMATUdpAttackOverValue=zxrosAMATUdpAttackOverValue, zxrosAMATShutDownLoggingTable=zxrosAMATShutDownLoggingTable, zxrosAMATVpnName=zxrosAMATVpnName, zxrosAMATIgnoreIpAddressRowStatus=zxrosAMATIgnoreIpAddressRowStatus, zxrosAMATAttackDetectedTime=zxrosAMATAttackDetectedTime, zxrosAMATIcmpFilterPacket=zxrosAMATIcmpFilterPacket, zxrosAMATRateLimit=zxrosAMATRateLimit, zxrosAMATAttackLoggingNo=zxrosAMATAttackLoggingNo, zxrosAMATIcmpPassPacket=zxrosAMATIcmpPassPacket, zxrosAMATAttackAgingTime=zxrosAMATAttackAgingTime, zxrosAMATAttackMode=zxrosAMATAttackMode, zxrosAMAT=zxrosAMAT, zxrosAMATTotalFilterPackets=zxrosAMATTotalFilterPackets, zxrosAMATTcpPassPackets=zxrosAMATTcpPassPackets, zxrosAMATShutDownTime=zxrosAMATShutDownTime, zxrosAMATIntervalSampleRate=zxrosAMATIntervalSampleRate, zxrosAMATShutDownLoggingEntry=zxrosAMATShutDownLoggingEntry, zxrosAMATTcpPassPacket=zxrosAMATTcpPassPacket, zxrosAMATTcpRate=zxrosAMATTcpRate, zxrosAMATState=zxrosAMATState, zxrosAMATUdpRate=zxrosAMATUdpRate, zxrosAMATHashUpdateTime=zxrosAMATHashUpdateTime, zxrosAMATAttackLoggingEntry=zxrosAMATAttackLoggingEntry, zxrosAMATPassPacketsBeforeRuleCreated=zxrosAMATPassPacketsBeforeRuleCreated, zxros=zxros, zxrosAMATIgnoreIpAddressVpnName=zxrosAMATIgnoreIpAddressVpnName, zxrosAMATUdpFilterPacket=zxrosAMATUdpFilterPacket, zxrosAMATUdpPassPacket=zxrosAMATUdpPassPacket, zxrosAMATTcpFilterPackets=zxrosAMATTcpFilterPackets, zxrosAMATIcmpAttackOverValue=zxrosAMATIcmpAttackOverValue, zxrosAMATTotalPassPackets=zxrosAMATTotalPassPackets, zxrosAMATUdpPassPackets=zxrosAMATUdpPassPackets, zxrosAMATUdpConn=zxrosAMATUdpConn, zxrosAMATSampleMatchCode=zxrosAMATSampleMatchCode, zxrosAMATStartUpTime=zxrosAMATStartUpTime, zxrosAMATNoAmatPackets=zxrosAMATNoAmatPackets, zxrosAMATSampleCode=zxrosAMATSampleCode, zxrosAMATAttackOverTime=zxrosAMATAttackOverTime, zxrosAMATAttackLoggingTable=zxrosAMATAttackLoggingTable, zxrosAMATIcmpRate=zxrosAMATIcmpRate)
