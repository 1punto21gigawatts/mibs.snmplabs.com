#
# PySNMP MIB module APPN-DLUR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPN-DLUR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
SnaControlPointName, = mibBuilder.importSymbols("APPN-MIB", "SnaControlPointName")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
snanauMIB, = mibBuilder.importSymbols("SNA-NAU-MIB", "snanauMIB")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, TimeTicks, NotificationType, Gauge32, MibIdentifier, Counter64, Bits, ModuleIdentity, IpAddress, Counter32, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "TimeTicks", "NotificationType", "Gauge32", "MibIdentifier", "Counter64", "Bits", "ModuleIdentity", "IpAddress", "Counter32", "ObjectIdentity", "iso")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
dlurMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 34, 5))
if mibBuilder.loadTexts: dlurMIB.setLastUpdated('9705101500Z')
if mibBuilder.loadTexts: dlurMIB.setOrganization('IETF SNA NAU MIB WG / AIW APPN/HPR MIBs SIG')
if mibBuilder.loadTexts: dlurMIB.setContactInfo(' Bob Clouston Cisco Systems 7025 Kit Creek Road P.O. Box 14987 Research Triangle Park, NC 27709, USA Tel: 1 919 472 2333 E-mail: clouston@cisco.com Bob Moore IBM Corporation 800 Park Offices Drive RHJA/664 P.O. Box 12195 Research Triangle Park, NC 27709, USA Tel: 1 919 254 4436 E-mail: remoore@ralvm6.vnet.ibm.com ')
if mibBuilder.loadTexts: dlurMIB.setDescription('This is the MIB module for objects used to manage network devices with DLUR capabilities. This MIB contains information that is useful for managing an APPN product that implements a DLUR (Dependent Logical Unit Requester). The DLUR product has a client/server relationship with an APPN product that implements a DLUS (Dependent Logical Unit Server).')
dlurObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 5, 1))
dlurNodeInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 5, 1, 1))
dlurNodeCapabilities = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 1))
dlurNodeCpName = MibScalar((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 1, 1), SnaControlPointName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurNodeCpName.setStatus('current')
if mibBuilder.loadTexts: dlurNodeCpName.setDescription('Administratively assigned network name for the APPN node where this DLUR implementation resides. If this object has the same value as the appnNodeCpName object in the APPN MIB, then the two objects are referring to the same APPN node.')
dlurReleaseLevel = MibScalar((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurReleaseLevel.setStatus('current')
if mibBuilder.loadTexts: dlurReleaseLevel.setDescription("The DLUR release level of this implementation. This is the value that is encoded in the DLUR/DLUS Capabilites (CV 51). To insure consistent display, this one-byte value is encoded here as two displayable characters that are equivalent to a hexadecimal display. For example, if the one-byte value as encoded in CV51 is X'01', this object will contain the displayable string '01'.")
dlurAnsSupport = MibScalar((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("continueOrStop", 1), ("stopOnly", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurAnsSupport.setStatus('current')
if mibBuilder.loadTexts: dlurAnsSupport.setDescription("Automatic Network Shutdown (ANS) capability of this node. - 'continueOrStop' indicates that the DLUR implementation supports either ANS value (continue or stop) as specified by the DLUS on ACTPU for each PU. - 'stopOnly' indicates that the DLUR implementation only supports the ANS value of stop. ANS = continue means that the DLUR node will keep LU-LU sessions active even if SSCP-PU and SSCP-LU control sessions are interrupted. ANS = stop means that LU-LU sessions will be interrupted when the SSCP-PU and SSCP-LU sessions are interrupted.")
dlurMultiSubnetSupport = MibScalar((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurMultiSubnetSupport.setStatus('current')
if mibBuilder.loadTexts: dlurMultiSubnetSupport.setDescription('Indication of whether this DLUR implementation can support CPSVRMGR sessions that cross NetId boundaries.')
dlurDefaultDefPrimDlusName = MibScalar((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 1, 5), SnaControlPointName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurDefaultDefPrimDlusName.setStatus('current')
if mibBuilder.loadTexts: dlurDefaultDefPrimDlusName.setDescription('The SNA name of the defined default primary DLUS for all of the PUs served by this DLUR. This can be overridden for a particular PU by a defined primary DLUS for that PU, represented by the dlurPuDefPrimDlusName object.')
dlurNetworkNameForwardingSupport = MibScalar((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurNetworkNameForwardingSupport.setStatus('current')
if mibBuilder.loadTexts: dlurNetworkNameForwardingSupport.setDescription('Indication of whether this DLUR implementation supports forwarding of Network Name control vectors on ACTPUs and ACTLUs to DLUR-served PUs and their associated LUs. This object corresponds to byte 9. bit 3 of cv51.')
dlurNondisDlusDlurSessDeactSup = MibScalar((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurNondisDlusDlurSessDeactSup.setStatus('current')
if mibBuilder.loadTexts: dlurNondisDlusDlurSessDeactSup.setDescription("Indication of whether this DLUR implementation supports nondisruptive deactivation of its DLUR-DLUS sessions. Upon receiving from a DLUS an UNBIND for the CPSVRMGR pipe with sense data X'08A0 000B', a DLUR that supports this option immediately begins attempting to activate a CPSVRMGR pipe with a DLUS other than the one that sent the UNBIND. This object corresponds to byte 9. bit 4 of cv51.")
dlurDefaultDefBackupDlusTable = MibTable((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 2), )
if mibBuilder.loadTexts: dlurDefaultDefBackupDlusTable.setStatus('current')
if mibBuilder.loadTexts: dlurDefaultDefBackupDlusTable.setDescription('This table contains an ordered list of defined backup DLUSs for all of the PUs served by this DLUR. These can be overridden for a particular PU by a list of defined backup DLUSs for that PU, represented by the dlurPuDefBackupDlusNameTable. Entries in this table are ordered from most preferred default backup DLUS to least preferred.')
dlurDefaultDefBackupDlusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 2, 1), ).setIndexNames((0, "APPN-DLUR-MIB", "dlurDefaultDefBackupDlusIndex"))
if mibBuilder.loadTexts: dlurDefaultDefBackupDlusEntry.setStatus('current')
if mibBuilder.loadTexts: dlurDefaultDefBackupDlusEntry.setDescription('This table is indexed by an integer-valued index, which orders the entries from most preferred default backup DLUS to least preferred.')
dlurDefaultDefBackupDlusIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: dlurDefaultDefBackupDlusIndex.setStatus('current')
if mibBuilder.loadTexts: dlurDefaultDefBackupDlusIndex.setDescription('Index for this table. The index values start at 1, which identifies the most preferred default backup DLUS.')
dlurDefaultDefBackupDlusName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 1, 2, 1, 2), SnaControlPointName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurDefaultDefBackupDlusName.setStatus('current')
if mibBuilder.loadTexts: dlurDefaultDefBackupDlusName.setDescription('Fully qualified name of a default backup DLUS for PUs served by this DLUR.')
dlurPuInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 5, 1, 2))
dlurPuTable = MibTable((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1), )
if mibBuilder.loadTexts: dlurPuTable.setStatus('current')
if mibBuilder.loadTexts: dlurPuTable.setDescription('Information about the PUs supported by this DLUR.')
dlurPuEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1), ).setIndexNames((0, "APPN-DLUR-MIB", "dlurPuName"))
if mibBuilder.loadTexts: dlurPuEntry.setStatus('current')
if mibBuilder.loadTexts: dlurPuEntry.setDescription('Entry in a table of PU information, indexed by PU name.')
dlurPuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: dlurPuName.setStatus('current')
if mibBuilder.loadTexts: dlurPuName.setDescription('Locally administered name of the PU.')
dlurPuSscpSuppliedName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuSscpSuppliedName.setStatus('current')
if mibBuilder.loadTexts: dlurPuSscpSuppliedName.setDescription('The SNA name of the PU. This value is supplied to a PU by the SSCP that activated it. If a value has not been supplied, a zero-length string is returned.')
dlurPuStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("reset", 1), ("pendReqActpuRsp", 2), ("pendActpu", 3), ("pendActpuRsp", 4), ("active", 5), ("pendLinkact", 6), ("pendDactpuRsp", 7), ("pendInop", 8), ("pendInopActpu", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuStatus.setStatus('current')
if mibBuilder.loadTexts: dlurPuStatus.setDescription('Status of the DLUR-supported PU. The following values are defined: reset(1) - reset pendReqActpuRsp(2) - pending a response from the DLUS to a Request ACTPU pendActpu(3) - pending an ACTPU from the DLUS pendActpuRsp(4) - pending an ACTPU response from the PU active(5) - active pendLinkact(6) - pending activation of the link to a downstream PU pendDactpuRsp(7) - pending a DACTPU response from the PU pendInop(8) - the CPSVRMGR pipe became inoperative while the DLUR was pending an ACTPU response from the PU pendInopActpu(9) - when the DLUR was in the pendInop state, a CPSVRMGR pipe became active and a new ACTPU was received over it, before a response to the previous ACTPU was received from the PU.')
dlurPuAnsSupport = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("continue", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuAnsSupport.setStatus('current')
if mibBuilder.loadTexts: dlurPuAnsSupport.setDescription("The Automatic Network Shutdown (ANS) support configured for this PU. This value (as configured by the network administrator) is sent by DLUS with ACTPU for each PU. - 'continue' means that the DLUR node will attempt to keep LU-LU sessions active even if SSCP-PU and SSCP-LU control sessions are interrupted. - 'stop' means that LU-LU sessions will be interrupted when the SSCP-PU and SSCP-LU sessions are interrupted.")
dlurPuLocation = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("downstream", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuLocation.setStatus('current')
if mibBuilder.loadTexts: dlurPuLocation.setDescription('Location of the DLUR-support PU: internal(1) - internal to the APPN node itself (no link) downstream(2) - downstream of the APPN node (connected via a link).')
dlurPuLsName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuLsName.setStatus('current')
if mibBuilder.loadTexts: dlurPuLsName.setDescription('Administratively assigned name of the link station through which a downstream PU is connected to this DLUR. A zero-length string is returned for internal PUs. If this object has the same value as the appnLsName object in the APPN MIB, then the two are identifying the same link station.')
dlurPuDlusSessnStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("pendingActive", 2), ("active", 3), ("pendingInactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuDlusSessnStatus.setStatus('current')
if mibBuilder.loadTexts: dlurPuDlusSessnStatus.setDescription("Status of the control session to the DLUS identified in dlurPuActiveDlusName. This is a combination of the separate states for the contention-winner and contention-loser sessions: reset(1) - none of the cases below pendingActive(2) - either contention-winner session or contention-loser session is pending active active(3) - contention-winner and contention-loser sessions are both active pendingInactive(4) - either contention-winner session or contention-loser session is pending inactive - this test is made AFTER the 'pendingActive' test. The following matrix provides a different representation of how the values of this object are related to the individual states of the contention-winner and contention-loser sessions: Conwinner | pA | pI | A | X = !(pA | pI | A) C ++++++++++++++++++++++++++++++++++ o pA | 2 | 2 | 2 | 2 n ++++++++++++++++++++++++++++++++++ l pI | 2 | 4 | 4 | 4 o ++++++++++++++++++++++++++++++++++ s A | 2 | 4 | 3 | 1 e ++++++++++++++++++++++++++++++++++ r X | 2 | 4 | 1 | 1 ++++++++++++++++++++++++++++++++++ ")
dlurPuActiveDlusName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuActiveDlusName.setStatus('current')
if mibBuilder.loadTexts: dlurPuActiveDlusName.setDescription('The SNA name of the active DLUS for this PU. If its length is not zero, this name follows the SnaControlPointName textual convention. A zero-length string indicates that the PU does not currently have an active DLUS.')
dlurPuDefPrimDlusName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuDefPrimDlusName.setStatus('current')
if mibBuilder.loadTexts: dlurPuDefPrimDlusName.setDescription('The SNA name of the defined primary DLUS for this PU, if one has been defined. If present, this name follows the SnaControlPointName textual convention. A zero-length string indicates that no primary DLUS has been defined for this PU, in which case the global default represented by the dlurDefaultDefPrimDlusName object is used.')
dlurPuDefBackupDlusTable = MibTable((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 2), )
if mibBuilder.loadTexts: dlurPuDefBackupDlusTable.setStatus('current')
if mibBuilder.loadTexts: dlurPuDefBackupDlusTable.setDescription('This table contains an ordered list of defined backup DLUSs for those PUs served by this DLUR that have their own defined backup DLUSs. PUs that have no entries in this table use the global default backup DLUSs for the DLUR, represented by the dlurDefaultDefBackupDlusNameTable. Entries in this table are ordered from most preferred backup DLUS to least preferred for each PU.')
dlurPuDefBackupDlusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 2, 1), ).setIndexNames((0, "APPN-DLUR-MIB", "dlurPuDefBackupDlusPuName"), (0, "APPN-DLUR-MIB", "dlurPuDefBackupDlusIndex"))
if mibBuilder.loadTexts: dlurPuDefBackupDlusEntry.setStatus('current')
if mibBuilder.loadTexts: dlurPuDefBackupDlusEntry.setDescription('This table is indexed by PU name and by an integer-valued index, which orders the entries from most preferred backup DLUS for the PU to least preferred.')
dlurPuDefBackupDlusPuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17)))
if mibBuilder.loadTexts: dlurPuDefBackupDlusPuName.setStatus('current')
if mibBuilder.loadTexts: dlurPuDefBackupDlusPuName.setDescription('Locally administered name of the PU. If this object has the same value as the dlurPuName object, then the two are identifying the same PU.')
dlurPuDefBackupDlusIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: dlurPuDefBackupDlusIndex.setStatus('current')
if mibBuilder.loadTexts: dlurPuDefBackupDlusIndex.setDescription('Secondary index for this table. The index values start at 1, which identifies the most preferred backup DLUS for the PU.')
dlurPuDefBackupDlusName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 2, 2, 1, 3), SnaControlPointName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurPuDefBackupDlusName.setStatus('current')
if mibBuilder.loadTexts: dlurPuDefBackupDlusName.setDescription('Fully qualified name of a backup DLUS for this PU.')
dlurDlusInfo = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 5, 1, 3))
dlurDlusTable = MibTable((1, 3, 6, 1, 2, 1, 34, 5, 1, 3, 1), )
if mibBuilder.loadTexts: dlurDlusTable.setStatus('current')
if mibBuilder.loadTexts: dlurDlusTable.setDescription('Information about DLUS control sessions.')
dlurDlusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 5, 1, 3, 1, 1), ).setIndexNames((0, "APPN-DLUR-MIB", "dlurDlusName"))
if mibBuilder.loadTexts: dlurDlusEntry.setStatus('current')
if mibBuilder.loadTexts: dlurDlusEntry.setDescription('This entry is indexed by the name of the DLUS.')
dlurDlusName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 3, 1, 1, 1), SnaControlPointName())
if mibBuilder.loadTexts: dlurDlusName.setStatus('current')
if mibBuilder.loadTexts: dlurDlusName.setDescription('The SNA name of a DLUS with which this DLUR currently has a CPSVRMGR pipe established.')
dlurDlusSessnStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("pendingActive", 2), ("active", 3), ("pendingInactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurDlusSessnStatus.setStatus('current')
if mibBuilder.loadTexts: dlurDlusSessnStatus.setDescription("Status of the CPSVRMGR pipe between the DLUR and this DLUS. This is a combination of the separate states for the contention-winner and contention-loser sessions: reset(1) - none of the cases below pendingActive(2) - either contention-winner session or contention-loser session is pending active active(3) - contention-winner and contention-loser sessions are both active pendingInactive(4) - either contention-winner session or contention-loser session is pending inactive - this test is made AFTER the 'pendingActive' test. The following matrix provides a different representation of how the values of this object are related to the individual states of the contention-winner and contention-loser sessions: Conwinner | pA | pI | A | X = !(pA | pI | A) C ++++++++++++++++++++++++++++++++++ o pA | 2 | 2 | 2 | 2 n ++++++++++++++++++++++++++++++++++ l pI | 2 | 4 | 4 | 4 o ++++++++++++++++++++++++++++++++++ s A | 2 | 4 | 3 | 1 e ++++++++++++++++++++++++++++++++++ r X | 2 | 4 | 1 | 1 ++++++++++++++++++++++++++++++++++ ")
dlurConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 5, 2))
dlurCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 5, 2, 1))
dlurGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 5, 2, 2))
dlurCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 34, 5, 2, 1, 1)).setObjects(("APPN-DLUR-MIB", "dlurConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dlurCompliance = dlurCompliance.setStatus('current')
if mibBuilder.loadTexts: dlurCompliance.setDescription('The compliance statement for the SNMPv2 entities which implement the DLUR MIB.')
dlurConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 5, 2, 2, 1)).setObjects(("APPN-DLUR-MIB", "dlurNodeCpName"), ("APPN-DLUR-MIB", "dlurReleaseLevel"), ("APPN-DLUR-MIB", "dlurAnsSupport"), ("APPN-DLUR-MIB", "dlurMultiSubnetSupport"), ("APPN-DLUR-MIB", "dlurNetworkNameForwardingSupport"), ("APPN-DLUR-MIB", "dlurNondisDlusDlurSessDeactSup"), ("APPN-DLUR-MIB", "dlurDefaultDefPrimDlusName"), ("APPN-DLUR-MIB", "dlurDefaultDefBackupDlusName"), ("APPN-DLUR-MIB", "dlurPuSscpSuppliedName"), ("APPN-DLUR-MIB", "dlurPuStatus"), ("APPN-DLUR-MIB", "dlurPuAnsSupport"), ("APPN-DLUR-MIB", "dlurPuLocation"), ("APPN-DLUR-MIB", "dlurPuLsName"), ("APPN-DLUR-MIB", "dlurPuDlusSessnStatus"), ("APPN-DLUR-MIB", "dlurPuActiveDlusName"), ("APPN-DLUR-MIB", "dlurPuDefPrimDlusName"), ("APPN-DLUR-MIB", "dlurPuDefBackupDlusName"), ("APPN-DLUR-MIB", "dlurDlusSessnStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dlurConfGroup = dlurConfGroup.setStatus('current')
if mibBuilder.loadTexts: dlurConfGroup.setDescription('A collection of objects providing information on an implementation of APPN DLUR.')
mibBuilder.exportSymbols("APPN-DLUR-MIB", dlurNondisDlusDlurSessDeactSup=dlurNondisDlusDlurSessDeactSup, dlurPuStatus=dlurPuStatus, dlurPuEntry=dlurPuEntry, dlurPuTable=dlurPuTable, dlurDefaultDefBackupDlusName=dlurDefaultDefBackupDlusName, dlurGroups=dlurGroups, dlurDlusName=dlurDlusName, dlurPuDlusSessnStatus=dlurPuDlusSessnStatus, dlurPuDefPrimDlusName=dlurPuDefPrimDlusName, dlurDefaultDefPrimDlusName=dlurDefaultDefPrimDlusName, dlurNodeInfo=dlurNodeInfo, dlurPuAnsSupport=dlurPuAnsSupport, dlurReleaseLevel=dlurReleaseLevel, dlurConformance=dlurConformance, dlurObjects=dlurObjects, dlurDlusSessnStatus=dlurDlusSessnStatus, dlurMultiSubnetSupport=dlurMultiSubnetSupport, dlurPuDefBackupDlusPuName=dlurPuDefBackupDlusPuName, dlurPuDefBackupDlusName=dlurPuDefBackupDlusName, dlurCompliances=dlurCompliances, dlurDefaultDefBackupDlusEntry=dlurDefaultDefBackupDlusEntry, dlurDefaultDefBackupDlusIndex=dlurDefaultDefBackupDlusIndex, dlurPuDefBackupDlusTable=dlurPuDefBackupDlusTable, dlurPuInfo=dlurPuInfo, dlurPuDefBackupDlusEntry=dlurPuDefBackupDlusEntry, dlurConfGroup=dlurConfGroup, dlurDlusEntry=dlurDlusEntry, dlurDefaultDefBackupDlusTable=dlurDefaultDefBackupDlusTable, dlurPuDefBackupDlusIndex=dlurPuDefBackupDlusIndex, dlurPuActiveDlusName=dlurPuActiveDlusName, dlurAnsSupport=dlurAnsSupport, dlurNodeCapabilities=dlurNodeCapabilities, dlurPuSscpSuppliedName=dlurPuSscpSuppliedName, dlurNetworkNameForwardingSupport=dlurNetworkNameForwardingSupport, dlurCompliance=dlurCompliance, dlurMIB=dlurMIB, dlurNodeCpName=dlurNodeCpName, dlurPuLocation=dlurPuLocation, dlurPuName=dlurPuName, PYSNMP_MODULE_ID=dlurMIB, dlurPuLsName=dlurPuLsName, dlurDlusInfo=dlurDlusInfo, dlurDlusTable=dlurDlusTable)
