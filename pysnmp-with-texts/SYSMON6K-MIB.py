#
# PySNMP MIB module SYSMON6K-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYSMON6K-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibIdentifier, Counter64, ModuleIdentity, ObjectIdentity, enterprises, Gauge32, TimeTicks, IpAddress, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "Counter64", "ModuleIdentity", "ObjectIdentity", "enterprises", "Gauge32", "TimeTicks", "IpAddress", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Counter32")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
systemsMonitor6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12))
sm6kProgramInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1))
sm6kSystemInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2))
sm6kNetworkInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 3))
sm6kCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 4))
sm6kThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 5))
sm6kAnalysis = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 6))
sm6kFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 7))
sm6kAlias = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 8))
sm6kTrapDestination = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 9))
sm6kAdministration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 10))
sm6kProgramData = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1))
sm6kResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2))
sm6kProgramMessages = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 3))
sm6kProgramDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 1))
sm6kProgramControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2))
sm6kProgramLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 3))
sm6kProgramDataCollection = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 4))
sm6kProgramSetableTestObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 5))
sm6kProgramName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramName.setDescription('Official name of the AIX Systems Monitor/6000 program.')
sm6kProgramNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramNumber.setDescription('Program number for the AIX Systems Monitor/6000 program.')
sm6kProgramVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramVersion.setDescription('Version number of the AIX Systems Monitor/6000 program.')
sm6kProgramCompilationDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramCompilationDate.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramCompilationDate.setDescription('Date and time when the current agent was compiled.')
sm6kProgramUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramUpTime.setDescription('Time (in hundredths of a second) since the AIX Systems Monitor/6000 Program was last re-initialized.')
sm6kProgramContact = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramContact.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramContact.setDescription('Textual identification of the contact person for the AIX Systems Monitor/6000 program on this managed node and information on how to contact this person.')
sm6kProgramControlLocalConfigurationFile = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlLocalConfigurationFile.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlLocalConfigurationFile.setDescription('Name of a local configuration file. When this field is set to a file name, a local configuration file is written which will be used on the next initialization of the AIX Systems Monitor/6000 program. If this field is cleared, the default configuration files are read.')
sm6kProgramControlReInitializeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlReInitializeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlReInitializeMonitor.setDescription('Time AIX Systems Monitor/6000 was last initialized. A SET to this will reinitialize the program.')
sm6kProgramControlNonForkCacheTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlNonForkCacheTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlNonForkCacheTime.setDescription('Default cache time, in seconds, for instrumentation not requiring a fork.')
sm6kProgramControlForkCacheTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlForkCacheTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlForkCacheTime.setDescription('Default cache time, in seconds, for instrumentation requiring a fork.')
sm6kProgramControlPercentMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlPercentMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlPercentMultiplier.setDescription('Multiplier used to multiply percentage variables. The default is 100 (so 99% is 9900); 0 is treated the same as the default.')
sm6kProgramControlPollTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlPollTime.setDescription('Reserved')
sm6kProgramControlFlags = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlFlags.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlFlags.setDescription('Reserved')
sm6kProgramRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramRetryCount.setDescription('Default number of retries for actions that can be retried.')
sm6kProgramTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 2, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramTimeout.setDescription('Default number of timeout for actions that can timeout.')
sm6kProgramLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramLogFileName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramLogFileName.setDescription('File name for logging information in AIX Systems Monitor/6000. The type of information being logged depends on the trace mask (ie. sm6kProgramLogMask).')
sm6kProgramLogFileSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramLogFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramLogFileSize.setDescription('Current size of the log file in bytes.')
sm6kProgramLogMaxFileSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramLogMaxFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramLogMaxFileSize.setDescription('Maximum size of the log file in kilobytes.')
sm6kProgramLogNumFiles = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramLogNumFiles.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramLogNumFiles.setDescription('Maximum number of log files to keep. When the data log file is full, it is rolled over to <logFilename>1. Files are rolled up until the number of files specified by this field exists (ie. <LogFilename>1 becomes <LogFilename>2, etc.).')
sm6kProgramLogFileBehavior = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wrapFlush", 1), ("wrapNoflush", 2), ("nowrapFlush", 3), ("nowrapNoflush", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramLogFileBehavior.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramLogFileBehavior.setDescription('This field determines what is done when the maximum file size is exceeded and the number of log files specified already exists. If wrap is specified, then the oldest log file is removed, all other files are rolled up, and logging continues into a new file. If nowrap is specified, no more data will be logged until either the log file name is changed or the existing files are renamed (or removed). Flushing refers to whether or not each log entry is immediately written to the log file or whether the log data is written out in large chunks containing multiple log entries. Flushing allows the log file to always contain the latest log entries. However, CPU time can be saved if flushing is not activated.')
sm6kProgramLogMask = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramLogMask.setDescription('The log mask field is used to indicate the type of information that is being logged. The log mask may contain the following literals: none logs nothing inform logs informational messages warning logs warning messages error logs error messages base logs Systems Monitor base information command logs command table information filter logs filter table information analysis logs analysis table information threshold logs threshold table information polling logs MIB variable polling information smux logs SMUX interface traffic binary logs packets sent/received in binary call logs all internal functions called all logs all information')
sm6kProgramDataCollectionFileName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramDataCollectionFileName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramDataCollectionFileName.setDescription("The data collection filename refers to the file used to store the data associated with the entries in the threshold table. The corresponding threshold table entry must have it's state set to enabledStoreOnly or enabledThresholdStore in order for data to be collected.")
sm6kProgramDataCollectionFileSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramDataCollectionFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramDataCollectionFileSize.setDescription('This field contains the current size of the collection file in bytes.')
sm6kProgramDataCollectionMaxFileSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramDataCollectionMaxFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramDataCollectionMaxFileSize.setDescription('Maximum size of the data collection file in kilobytes. The action taken when the collection file contains this MaxFileSize Kbytes is determined by the data collection FileBehavior MIB variable.')
sm6kProgramDataCollectionNumFiles = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramDataCollectionNumFiles.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramDataCollectionNumFiles.setDescription("This field refers to the number of collection files to keep. When the data collection file is full, <collFilename> is rolled up to <collFilename>1 (where <collFilename> refers to the file defined by the DataCollectionFileName MIB variable). Files are 'rolled up' until the number of files specified by this field exists (ie. <collFilename>1 becomes <collFilename>2, etc.).")
sm6kProgramDataCollectionFileBehavior = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wrapFlush", 1), ("wrapNoflush", 2), ("nowrapFlush", 3), ("nowrapNoflush", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramDataCollectionFileBehavior.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramDataCollectionFileBehavior.setDescription('This field determines what is done when the maximum file size is exceeded AND the number of collection files specified already exists. If wrap is specified, then the oldest collection file is removed, all other files are rolled up, and collection continues into a new file. If nowrap is specified, no more data will be collected until either the collection file name is changed or the existing files are renamed (or removed). Flushing refers to whether or not each collection entry is immediately written to the log file or whether the collection data is written out in large chunks containing multiple collection entries. Flushing allows the collection file to always contain the latest collection entries. However, CPU time can be saved if flushing is not activated.')
sm6kProgramControlSetableInteger = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlSetableInteger.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlSetableInteger.setDescription('A settable integer with no function.')
sm6kProgramControlSetableCounter = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlSetableCounter.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlSetableCounter.setDescription('A settable counter with no function.')
sm6kProgramControlSetableGauge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 5, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlSetableGauge.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlSetableGauge.setDescription('A settable gauge with no function.')
sm6kProgramControlSetableIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlSetableIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlSetableIpAddress.setDescription('A settable IP address with no function.')
sm6kProgramControlSetableTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 5, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlSetableTimeTicks.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlSetableTimeTicks.setDescription('A settable TimeTicks with no function.')
sm6kProgramControlSetableOctetString = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 1, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kProgramControlSetableOctetString.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramControlSetableOctetString.setDescription('A settable DisplayString with no function.')
sm6kResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1), )
if mibBuilder.loadTexts: sm6kResourceUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageTable.setDescription('AIX Systems Monitor/6000 resource utilization table.')
sm6kResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kResourceUsageName"))
if mibBuilder.loadTexts: sm6kResourceUsageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageEntry.setDescription('Each entry contains a different resource summary.')
sm6kResourceUsageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageName.setDescription('Self, child, and total.')
sm6kResourceUsageUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageUserTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageUserTime.setDescription('Amount of CPU time in user mode since start-up.')
sm6kResourceUsageSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageSystemTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageSystemTime.setDescription('Amount of CPU time in system mode since start-up.')
sm6kResourceUsageTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageTotalTime.setDescription('Total CPU time for process since start-up.')
sm6kResourceUsageMaxrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageMaxrss.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageMaxrss.setDescription('Maximum resident set size.')
sm6kResourceUsageIxrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageIxrss.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageIxrss.setDescription('Integral size (kilobyte-seconds).')
sm6kResourceUsageIdrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageIdrss.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageIdrss.setDescription('Unshared resident set size (kilobyte-seconds).')
sm6kResourceUsageIsrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageIsrss.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageIsrss.setDescription('Unshared stack set size (kilobyte-seconds).')
sm6kResourceUsageMinflt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageMinflt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageMinflt.setDescription('Page faults serviced without I/O activity.')
sm6kResourceUsageMajflt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageMajflt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageMajflt.setDescription('Page faults serviced with I/O activity.')
sm6kResourceUsageNSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageNSwap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageNSwap.setDescription('Number of times a process swapped.')
sm6kResourceUsageInBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageInBlock.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageInBlock.setDescription('Number of times a file system performed input.')
sm6kResourceUsageOutBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageOutBlock.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageOutBlock.setDescription('Number of times a file system performed output.')
sm6kResourceUsageMsgsnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageMsgsnd.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageMsgsnd.setDescription('Number of IPC messages sent.')
sm6kResourceUsageMsgrcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageMsgrcv.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageMsgrcv.setDescription('Number of IPC messages received.')
sm6kResourceUsageNSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageNSignals.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageNSignals.setDescription('Number of signals received.')
sm6kResourceUsageVcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageVcsw.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageVcsw.setDescription('Number of voluntary context switches.')
sm6kResourceUsageIcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kResourceUsageIcsw.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kResourceUsageIcsw.setDescription('Number of involuntary context switches.')
sm6kProgramMessagesTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 3, 1), )
if mibBuilder.loadTexts: sm6kProgramMessagesTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramMessagesTable.setDescription('AIX Systems Monitor/6000 information and error messages.')
sm6kProgramMessagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 3, 1, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kProgramMessagesRowNumber"))
if mibBuilder.loadTexts: sm6kProgramMessagesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramMessagesEntry.setDescription('Each entry contains a different message summary.')
sm6kProgramMessagesRowNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramMessagesRowNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramMessagesRowNumber.setDescription('Table index - no real meaning.')
sm6kProgramMessagesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramMessagesTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramMessagesTime.setDescription('Time at which the message was generated.')
sm6kProgramMessagesText = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramMessagesText.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramMessagesText.setDescription('Text of the message. Truncated after 80 bytes')
sm6kProgramMessagesTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kProgramMessagesTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kProgramMessagesTimeStamp.setDescription('Time (in seconds) at which message was generated.')
sm6kSystemDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1))
sm6kSystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2))
sm6kSystemDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3))
sm6kSystemPagingInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4))
sm6kSystemFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5))
sm6kSystemSubSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6))
sm6kSystemProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7))
sm6kSystemUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8))
sm6kSystemUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9))
sm6kSystemReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 10))
sm6kSystemMiscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11))
sm6kSystemNodeName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemNodeName.setDescription('Node name.')
sm6kSystemSysName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemSysName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSysName.setDescription('System name.')
sm6kSystemVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemVersion.setDescription('Operating System version.')
sm6kSystemRelease = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemRelease.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemRelease.setDescription('Operating System release.')
sm6kSystemMachine = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMachine.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMachine.setDescription('Hardware type.')
sm6kSystemFreePagingSpace = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFreePagingSpace.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFreePagingSpace.setDescription('Free paging space in system in kilobytes - returned by psdanger (-1).')
sm6kSystemFreePagingSpaceUntilKill = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFreePagingSpaceUntilKill.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFreePagingSpaceUntilKill.setDescription('Free paging space until kill threshold in kilobytes - returned by psdanger (SIGKILL).')
sm6kSystemFreePagingSpaceUntilKillPercent = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFreePagingSpaceUntilKillPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFreePagingSpaceUntilKillPercent.setDescription('Percent of kill threshold to free space.')
sm6kSystemPagingSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4))
sm6kSystemPagingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5))
sm6kSystemPagingSpaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpaceCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceCount.setDescription('The number of paging spaces.')
sm6kSystemPagingSpaceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2), )
if mibBuilder.loadTexts: sm6kSystemPagingSpaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceTable.setDescription('Paging space table.')
sm6kSystemPagingSpaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemPagingSpaceName"))
if mibBuilder.loadTexts: sm6kSystemPagingSpaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceEntry.setDescription('Each entry contains objects for a particular paging space. - same information as lsps -a')
sm6kSystemPagingSpaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpaceName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceName.setDescription('Paging space name.')
sm6kSystemPagingSpacePhysicalVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpacePhysicalVolume.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpacePhysicalVolume.setDescription('Physical volume on which paging space resides.')
sm6kSystemPagingSpaceVolumeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpaceVolumeGroup.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceVolumeGroup.setDescription('Volume group of paging space.')
sm6kSystemPagingSpaceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpaceSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceSize.setDescription('Size in megabytes.')
sm6kSystemPagingSpacePercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpacePercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpacePercentUsed.setDescription('Percent used.')
sm6kSystemPagingSpaceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpaceActive.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceActive.setDescription('Active indicator --- Yes or No')
sm6kSystemPagingSpaceAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpaceAuto.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceAuto.setDescription('Auto indicator --- Yes or No')
sm6kSystemPagingSpaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 4, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingSpaceType.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingSpaceType.setDescription('Paging space type.')
sm6kSystemPagingStatisticsPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPollingInterval.setDescription('Polling interval for paging statistics data.')
sm6kSystemPagingStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2), )
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsTable.setDescription('Input/Output statistics table.')
sm6kSystemPagingStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemPagingStatisticsName"))
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsEntry.setDescription('Each instance contains paging statistics over a different interval. - same information as vmstat')
sm6kSystemPagingStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsName.setDescription('Description of interval.')
sm6kSystemPagingStatisticsIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsIntervalStartTime.setDescription('Start time of interval.')
sm6kSystemPagingStatisticsIntervalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsIntervalLength.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsIntervalLength.setDescription('Length of interval during which paging statistics are computed.')
sm6kSystemPagingStatisticsPageFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageFaults.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageFaults.setDescription('Total number of page faults over the interval.')
sm6kSystemPagingStatisticsPageReclaims = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageReclaims.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageReclaims.setDescription('Total number of page reclaims over the interval.')
sm6kSystemPagingStatisticsPagesPagedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedIn.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedIn.setDescription('Total number of Pages Paged In over the interval')
sm6kSystemPagingStatisticsPagesPagedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedOut.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedOut.setDescription('Total number of Pages Paged Out over the interval')
sm6kSystemPagingStatisticsPageInsFromPagingSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageInsFromPagingSpace.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageInsFromPagingSpace.setDescription('Total number of Page Ins From Paging Space')
sm6kSystemPagingStatisticsPageOutsFromPagingSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageOutsFromPagingSpace.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageOutsFromPagingSpace.setDescription('Total number of Page Outs From Paging Space')
sm6kSystemPagingStatisticsStartIOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsStartIOs.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsStartIOs.setDescription('Total number of IO Starts')
sm6kSystemPagingStatisticsDoneIOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsDoneIOs.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsDoneIOs.setDescription('Total number of IOs Done')
sm6kSystemPagingStatisticsPageScans = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageScans.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageScans.setDescription('Total number of page scans')
sm6kSystemPagingStatisticsScanClockCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsScanClockCycles.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsScanClockCycles.setDescription('Total page scan clock cycles')
sm6kSystemPagingStatisticsPageSteals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageSteals.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageSteals.setDescription('Total number of page steals')
sm6kSystemPagingStatisticsFreeFrameWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsFreeFrameWaits.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsFreeFrameWaits.setDescription('Total number of free frame waits')
sm6kSystemPagingStatisticsExtendXPTWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsExtendXPTWaits.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsExtendXPTWaits.setDescription('Total number of extend XPT waits.')
sm6kSystemPagingStatisticsPendingIOWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPendingIOWaits.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPendingIOWaits.setDescription('Total number of Pending I/O waits')
sm6kSystemPagingStatisticsPageFaultsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageFaultsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageFaultsMinimum.setDescription('Minimum page faults')
sm6kSystemPagingStatisticsPageReclaimsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageReclaimsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageReclaimsMinimum.setDescription('Minimum page reclaims')
sm6kSystemPagingStatisticsPagesPagedInMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedInMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedInMinimum.setDescription('Minimum pages paged in')
sm6kSystemPagingStatisticsPagesPagedOutMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedOutMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedOutMinimum.setDescription('Minimum pages paged out')
sm6kSystemPagingStatisticsPageInsFromPagingSpaceMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageInsFromPagingSpaceMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageInsFromPagingSpaceMinimum.setDescription('Minimum Page Ins From Paging Space')
sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMinimum.setDescription('Minimum Page Outs From Paging Space')
sm6kSystemPagingStatisticsStartIOsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsStartIOsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsStartIOsMinimum.setDescription('Minimum IO Starts')
sm6kSystemPagingStatisticsDoneIOsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsDoneIOsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsDoneIOsMinimum.setDescription('Minimum IOs Done')
sm6kSystemPagingStatisticsPageScansMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageScansMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageScansMinimum.setDescription('Minimum number of page scans')
sm6kSystemPagingStatisticsScanClockCyclesMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsScanClockCyclesMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsScanClockCyclesMinimum.setDescription('Minimum page scan clock cycles')
sm6kSystemPagingStatisticsPageStealsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageStealsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageStealsMinimum.setDescription('Minimum page steals')
sm6kSystemPagingStatisticsFreeFrameWaitsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsFreeFrameWaitsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsFreeFrameWaitsMinimum.setDescription('Minimum free frame waits')
sm6kSystemPagingStatisticsExtendXPTWaitsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsExtendXPTWaitsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsExtendXPTWaitsMinimum.setDescription('Minimum Extend XPT waits.')
sm6kSystemPagingStatisticsPendingIOWaitsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPendingIOWaitsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPendingIOWaitsMinimum.setDescription('Minimum Pending I/O waits')
sm6kSystemPagingStatisticsPageFaultsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageFaultsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageFaultsMaximum.setDescription('Maximum page faults')
sm6kSystemPagingStatisticsPageReclaimsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageReclaimsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageReclaimsMaximum.setDescription('Maximum page reclaims')
sm6kSystemPagingStatisticsPagesPagedInMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedInMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedInMaximum.setDescription('Maximum Pages Paged In')
sm6kSystemPagingStatisticsPagesPagedOutMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedOutMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPagesPagedOutMaximum.setDescription('Maximum Pages Paged Out')
sm6kSystemPagingStatisticsPageInsFromPagingSpaceMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageInsFromPagingSpaceMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageInsFromPagingSpaceMaximum.setDescription('Maximum Page Ins From Paging Space')
sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMaximum.setDescription('Maximum Page Outs From Paging Space')
sm6kSystemPagingStatisticsStartIOsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsStartIOsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsStartIOsMaximum.setDescription('Maximum IO Starts')
sm6kSystemPagingStatisticsDoneIOsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsDoneIOsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsDoneIOsMaximum.setDescription('Maximum IOs Done')
sm6kSystemPagingStatisticsPageScansMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageScansMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageScansMaximum.setDescription('Maximum number of page scans')
sm6kSystemPagingStatisticsScanClockCyclesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsScanClockCyclesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsScanClockCyclesMaximum.setDescription('Maximum page scan clock cycles')
sm6kSystemPagingStatisticsPageStealsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageStealsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPageStealsMaximum.setDescription('Maximum page steals')
sm6kSystemPagingStatisticsFreeFrameWaitsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsFreeFrameWaitsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsFreeFrameWaitsMaximum.setDescription('Maximum free frame waits')
sm6kSystemPagingStatisticsExtendXPTWaitsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsExtendXPTWaitsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsExtendXPTWaitsMaximum.setDescription('Maximum Extend XPT waits.')
sm6kSystemPagingStatisticsPendingIOWaitsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 4, 5, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPendingIOWaitsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPagingStatisticsPendingIOWaitsMaximum.setDescription('Maximum Pending I/O waits')
sm6kSystemBufferPoolMark = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemBufferPoolMark.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemBufferPoolMark.setDescription('Buffer Pool High water mark')
sm6kSystemMaxMbufs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMaxMbufs.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMaxMbufs.setDescription('Max mbufs high-water mark')
sm6kSystemMaxUserProcesses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMaxUserProcesses.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMaxUserProcesses.setDescription('Maximum number of processes per user.')
sm6kSystemMaxSystemProcesses = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMaxSystemProcesses.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMaxSystemProcesses.setDescription('Maximum number of processes on the system.')
sm6kSystemRecordLockTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemRecordLockTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemRecordLockTableSize.setDescription('Number of entries in record lock table.')
sm6kSystemOpenFileTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemOpenFileTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemOpenFileTableSize.setDescription('Maximum number of entries in open file table.')
sm6kSystemCBlockArraySize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemCBlockArraySize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemCBlockArraySize.setDescription('Maximum number of cblocks in cblock array.')
sm6kSystemDiskIOHistory = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDiskIOHistory.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDiskIOHistory.setDescription('Disk I/O History enabled.')
sm6kSystemAutomaticBootAfterHalt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemAutomaticBootAfterHalt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemAutomaticBootAfterHalt.setDescription('Automatic boot after halt.')
sm6kSystemMemScrub = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMemScrub.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMemScrub.setDescription('Memory scrubbing enabled.')
sm6kSystemLeastPriv = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemLeastPriv.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemLeastPriv.setDescription('Least privilege enablement.')
sm6kSystemMaxPout = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMaxPout.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMaxPout.setDescription('Number of file pageouts at which waiting occurs.')
sm6kSystemMinPout = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMinPout.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMinPout.setDescription('Number of file pageouts at which ready occurs.')
sm6kSystemPageSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemPageSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemPageSize.setDescription('System page size (from getpagesize())')
sm6kSystemProcessMaxOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessMaxOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessMaxOpenFiles.setDescription('Maximum open files per process.')
sm6kSystemProcessMaxOpenStreams = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessMaxOpenStreams.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessMaxOpenStreams.setDescription('Maximum open streams per process.')
sm6kSystemProcessDescriptorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessDescriptorTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessDescriptorTableSize.setDescription('Descriptor table size for Systems Monitor.')
sm6kSystemDeviceList = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1))
sm6kSystemDeviceTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2))
sm6kSystemDeviceEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3))
sm6kSystemDeviceX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4))
sm6kSystemDeviceListInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceListInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListInstalled.setDescription('The number of devices installed.')
sm6kSystemDeviceListTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2), )
if mibBuilder.loadTexts: sm6kSystemDeviceListTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListTable.setDescription('File system table.')
sm6kSystemDeviceListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemDeviceListName"))
if mibBuilder.loadTexts: sm6kSystemDeviceListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListEntry.setDescription('Each entry contains objects for a particular device.')
sm6kSystemDeviceListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceListName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListName.setDescription('Name of device.')
sm6kSystemDeviceListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceListDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListDescription.setDescription('Location of device. Shows status, location and description')
sm6kSystemDeviceListLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceListLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListLocation.setDescription('Location of device.')
sm6kSystemDeviceListVPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceListVPD.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListVPD.setDescription('Vital Product Data.')
sm6kSystemDeviceListAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceListAttributes.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListAttributes.setDescription('Device Attributes.')
sm6kSystemDeviceListDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceListDiagnostics.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceListDiagnostics.setDescription('Results of diagnostic tests.')
sm6kSystemDeviceTokenRingInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingInstalled.setDescription('The number of devices installed.')
sm6kSystemDeviceTokenRingTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2), )
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTable.setDescription('Adapter table.')
sm6kSystemDeviceTokenRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemDeviceTokenRingNumber"))
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingEntry.setDescription('Each entry contains objects for a particular device.')
sm6kSystemDeviceTokenRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingNumber.setDescription('Token ring number.')
sm6kSystemDeviceTokenRingHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingHardwareAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingHardwareAddress.setDescription('Burned-in MAC Address.')
sm6kSystemDeviceTokenRingCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingCurrentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingCurrentAddress.setDescription('Current MAC Address.')
sm6kSystemDeviceTokenRingReceiveDataOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingReceiveDataOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingReceiveDataOffset.setDescription('Receive data transfer offset.')
sm6kSystemDeviceTokenRingBroadwrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBroadwrap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBroadwrap.setDescription('Supports broadcast wrap of data.')
sm6kSystemDeviceTokenRingTxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxByteMcnt.setDescription('Most significant bits of successfully transmitted byte count.')
sm6kSystemDeviceTokenRingTxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxByteLcnt.setDescription('Least significant bits of successfully transmitted byte count')
sm6kSystemDeviceTokenRingRxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxByteMcnt.setDescription('Most significant bits of successfully received byte count.')
sm6kSystemDeviceTokenRingRxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxByteLcnt.setDescription('Least significant bits of successfully received byte count')
sm6kSystemDeviceTokenRingTxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxFrameMcnt.setDescription('Most significant bits of successfully transmitted byte count')
sm6kSystemDeviceTokenRingTxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxFrameLcnt.setDescription('Least significant bits of successfully transmitted byte count')
sm6kSystemDeviceTokenRingRxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxFrameMcnt.setDescription('Most significant bits of successfully received byte count')
sm6kSystemDeviceTokenRingRxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxFrameLcnt.setDescription('Least significant bits of successfully received byte count')
sm6kSystemDeviceTokenRingTxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxErrCnt.setDescription('Frame transmit error count')
sm6kSystemDeviceTokenRingRxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxErrCnt.setDescription('Frame receive error count')
sm6kSystemDeviceTokenRingNidTblHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingNidTblHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingNidTblHigh.setDescription('Maximum netids in use')
sm6kSystemDeviceTokenRingTxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxQueHigh.setDescription('Maximum transmits ever queued for adapter')
sm6kSystemDeviceTokenRingRxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxQueHigh.setDescription('Maximum received ever queued for any open')
sm6kSystemDeviceTokenRingStaQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingStaQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingStaQueHigh.setDescription('Maximum status blocks queued for any open')
sm6kSystemDeviceTokenRingIntrLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingIntrLost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingIntrLost.setDescription('Interrupts lost')
sm6kSystemDeviceTokenRingWdtLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingWdtLost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingWdtLost.setDescription('Wdt Interrupts lost')
sm6kSystemDeviceTokenRingTimoLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTimoLost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTimoLost.setDescription('Timeout Interrupts lost')
sm6kSystemDeviceTokenRingStaQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingStaQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingStaQueOverflow.setDescription('Status lost due to queue overflow')
sm6kSystemDeviceTokenRingRxQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxQueOverflow.setDescription('Packet lost due to queue overflow')
sm6kSystemDeviceTokenRingRxQueNoMbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxQueNoMbuf.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxQueNoMbuf.setDescription('Packet lost due to no mbufs')
sm6kSystemDeviceTokenRingRxQueNoMbufExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxQueNoMbufExt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxQueNoMbufExt.setDescription('Packet lost due to no mbuf extensions')
sm6kSystemDeviceTokenRingTxIntrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxIntrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxIntrCnt.setDescription('Transmit interrupt count')
sm6kSystemDeviceTokenRingRxIntrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxIntrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRxIntrCnt.setDescription('Receive interrupt count')
sm6kSystemDeviceTokenRingPktRejCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingPktRejCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingPktRejCnt.setDescription('Packets rejected no NETID')
sm6kSystemDeviceTokenRingPktAccCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingPktAccCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingPktAccCnt.setDescription('Packets accepted - valid NETID')
sm6kSystemDeviceTokenRingPktTxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingPktTxCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingPktTxCnt.setDescription('Packet transmit counter')
sm6kSystemDeviceTokenRingOvfloPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingOvfloPktCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingOvfloPktCnt.setDescription('Overflow packets received')
sm6kSystemDeviceTokenRingPktTxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingPktTxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingPktTxErrCnt.setDescription('Packet transmission errors detected by adapter')
sm6kSystemDeviceTokenRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingSpeed.setDescription('Ring speed, megabits/second')
sm6kSystemDeviceTokenRingVPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingVPD.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingVPD.setDescription('Vital Product Data from adapter')
sm6kSystemDeviceTokenRingAdapPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 36), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingAdapPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingAdapPhysAddr.setDescription('Adapter Physical Address')
sm6kSystemDeviceTokenRingUpstreamNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 37), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingUpstreamNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingUpstreamNodeAddr.setDescription('Upstream node address')
sm6kSystemDeviceTokenRingUpstreamPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 38), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingUpstreamPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingUpstreamPhysAddr.setDescription('Upstream Physical Address')
sm6kSystemDeviceTokenRingLastPollAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 39), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastPollAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastPollAddr.setDescription('Last Poll address')
sm6kSystemDeviceTokenRingAuthorEnv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingAuthorEnv.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingAuthorEnv.setDescription('Authorized environment')
sm6kSystemDeviceTokenRingTxAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxAccessPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingTxAccessPriority.setDescription('Transmit priority')
sm6kSystemDeviceTokenRingSrcClassAuthor = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingSrcClassAuthor.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingSrcClassAuthor.setDescription('Source class authorization')
sm6kSystemDeviceTokenRingLastAttenCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastAttenCode.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastAttenCode.setDescription('Last attention code')
sm6kSystemDeviceTokenRingLastSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 44), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastSrcAddr.setDescription('Last source address')
sm6kSystemDeviceTokenRingLastBeaconType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastBeaconType.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastBeaconType.setDescription('Last beacon type')
sm6kSystemDeviceTokenRingLastMajorVector = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastMajorVector.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingLastMajorVector.setDescription('Last major vector')
sm6kSystemDeviceTokenRingRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingRingStatus.setDescription('Ring status - see /usr/include/sys/tokuser.h')
sm6kSystemDeviceTokenRingSoftErrorTimerVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingSoftErrorTimerVal.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingSoftErrorTimerVal.setDescription('Soft Error timer value')
sm6kSystemDeviceTokenRingFrontEndTimerVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingFrontEndTimerVal.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingFrontEndTimerVal.setDescription('Front end timer value')
sm6kSystemDeviceTokenRingMonitorErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingMonitorErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingMonitorErrorCode.setDescription('Monitor error code')
sm6kSystemDeviceTokenRingBeaconTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBeaconTxType.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBeaconTxType.setDescription('Beacon transmit type')
sm6kSystemDeviceTokenRingBeaconRxType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBeaconRxType.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBeaconRxType.setDescription('Beacon Receive type')
sm6kSystemDeviceTokenRingFrameCorrSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingFrameCorrSave.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingFrameCorrSave.setDescription('Frame Correlator save')
sm6kSystemDeviceTokenRingBeaconStationNAUN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 54), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBeaconStationNAUN.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBeaconStationNAUN.setDescription('Beaconing station NAUN')
sm6kSystemDeviceTokenRingBeaconStationPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 55), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBeaconStationPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingBeaconStationPhysAddr.setDescription('Beaconing station physical address')
sm6kSystemDeviceTokenRingClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingClear.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceTokenRingClear.setDescription('Set to clear to clear clearable statistics')
sm6kSystemDeviceEthernetInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetInstalled.setDescription('The number of devices installed.')
sm6kSystemDeviceEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2), )
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTable.setDescription('Adapter table.')
sm6kSystemDeviceEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemDeviceEthernetNumber"))
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetEntry.setDescription('Each entry contains objects for a particular device')
sm6kSystemDeviceEthernetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetNumber.setDescription('Adapter number')
sm6kSystemDeviceEthernetHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetHardwareAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetHardwareAddress.setDescription('Burned-in MAC Address')
sm6kSystemDeviceEthernetCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetCurrentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetCurrentAddress.setDescription('Current MAC Address')
sm6kSystemDeviceEthernetReceiveDataOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetReceiveDataOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetReceiveDataOffset.setDescription('Receive Data transfer Offset')
sm6kSystemDeviceEthernetBroadwrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetBroadwrap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetBroadwrap.setDescription('Supports broadcast wrap of data.')
sm6kSystemDeviceEthernetTxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxByteMcnt.setDescription('Most significant bits of successfully transmitted byte count')
sm6kSystemDeviceEthernetTxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxByteLcnt.setDescription('Least significant bits of successfully transmitted byte count')
sm6kSystemDeviceEthernetRxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxByteMcnt.setDescription('Most significant bits of successfully received byte count')
sm6kSystemDeviceEthernetRxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxByteLcnt.setDescription('Least significant bits of successfully received byte count')
sm6kSystemDeviceEthernetTxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxFrameMcnt.setDescription('Most significant bits of successfully transmitted byte count')
sm6kSystemDeviceEthernetTxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxFrameLcnt.setDescription('Least significant bits of successfully transmitted byte count')
sm6kSystemDeviceEthernetRxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxFrameMcnt.setDescription('Most significant bits of successfully received byte count')
sm6kSystemDeviceEthernetRxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxFrameLcnt.setDescription('Least significant bits of successfully received byte count')
sm6kSystemDeviceEthernetTxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxErrCnt.setDescription('Frame transmit error count')
sm6kSystemDeviceEthernetRxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxErrCnt.setDescription('Frame receive error count')
sm6kSystemDeviceEthernetNidTblHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetNidTblHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetNidTblHigh.setDescription('Maximum netids in use')
sm6kSystemDeviceEthernetTxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxQueHigh.setDescription('Maximum transmits ever queued for adapter')
sm6kSystemDeviceEthernetRxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxQueHigh.setDescription('Maximum received ever queued for any open')
sm6kSystemDeviceEthernetStaQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetStaQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetStaQueHigh.setDescription('Maximum status blocks queued for any open')
sm6kSystemDeviceEthernetIntrLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetIntrLost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetIntrLost.setDescription('Interrupts lost')
sm6kSystemDeviceEthernetWdtLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetWdtLost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetWdtLost.setDescription('Wdt Interrupts lost')
sm6kSystemDeviceEthernetTimoLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTimoLost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTimoLost.setDescription('Timeout Interrupts lost')
sm6kSystemDeviceEthernetStaQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetStaQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetStaQueOverflow.setDescription('Status lost due to queue overflow')
sm6kSystemDeviceEthernetRxQueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxQueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxQueOverflow.setDescription('Packet lost due to queue overflow')
sm6kSystemDeviceEthernetRxQueNoMbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxQueNoMbuf.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxQueNoMbuf.setDescription('Packet lost due to no mbufs')
sm6kSystemDeviceEthernetRxQueNoMbufExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxQueNoMbufExt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxQueNoMbufExt.setDescription('Packet lost due to no mbuf extensions')
sm6kSystemDeviceEthernetTxIntrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxIntrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxIntrCnt.setDescription('Transmit interrupt count')
sm6kSystemDeviceEthernetRxIntrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxIntrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetRxIntrCnt.setDescription('Receive interrupt count')
sm6kSystemDeviceEthernetCRCErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetCRCErr.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetCRCErr.setDescription('CRC Errors')
sm6kSystemDeviceEthernetAlignErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetAlignErr.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetAlignErr.setDescription('Alignment Errors')
sm6kSystemDeviceEthernetOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetOverrun.setDescription('Overrun Errors')
sm6kSystemDeviceEthernetTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTooShort.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTooShort.setDescription('Too short Errors')
sm6kSystemDeviceEthernetTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTooLong.setDescription('Too long Errors')
sm6kSystemDeviceEthernetNoResources = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetNoResources.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetNoResources.setDescription('Out of resource errors')
sm6kSystemDeviceEthernetPktDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetPktDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetPktDiscard.setDescription('Packets discarded')
sm6kSystemDeviceEthernetMaxCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetMaxCollision.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetMaxCollision.setDescription('Maximum collisions')
sm6kSystemDeviceEthernetLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetLateCollision.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetLateCollision.setDescription('Collisions after slot time elapsed')
sm6kSystemDeviceEthernetCarrierLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetCarrierLost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetCarrierLost.setDescription('Carrier lost errors')
sm6kSystemDeviceEthernetUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetUnderrun.setDescription('Underrun errors')
sm6kSystemDeviceEthernetCTSLost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetCTSLost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetCTSLost.setDescription('Clear to send lost errors')
sm6kSystemDeviceEthernetTxTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetTxTimeouts.setDescription('Transmit Timeouts')
sm6kSystemDeviceEthernetParErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetParErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetParErrCnt.setDescription('Parity errors')
sm6kSystemDeviceEthernetDiagOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetDiagOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetDiagOverflow.setDescription('Diagnostic overflow')
sm6kSystemDeviceEthernetExecOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetExecOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetExecOverflow.setDescription('Execute queue overflows')
sm6kSystemDeviceEthernetExecCmdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetExecCmdErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetExecCmdErrors.setDescription('Execute command errors')
sm6kSystemDeviceEthernetHostRecEol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetHostRecEol.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetHostRecEol.setDescription('Host received end of list')
sm6kSystemDeviceEthernetAdptRecEol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetAdptRecEol.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetAdptRecEol.setDescription('Adapter received end of list')
sm6kSystemDeviceEthernetHostRecPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetHostRecPkt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetHostRecPkt.setDescription('Packets host actually received from adapter')
sm6kSystemDeviceEthernetAdptRecPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetAdptRecPkt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetAdptRecPkt.setDescription('Packets to be delivered to host')
sm6kSystemDeviceEthernetStartRxCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetStartRxCmd.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetStartRxCmd.setDescription('Start receptions commands issued to adapter')
sm6kSystemDeviceEthernetStartRxDmaTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetStartRxDmaTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetStartRxDmaTimeouts.setDescription('DMA timeouts')
sm6kSystemDeviceEthernetVPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetVPD.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetVPD.setDescription('Vital Product Data from adapter')
sm6kSystemDeviceEthernetClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 3, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetClear.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceEthernetClear.setDescription('Set to clear to clear clearable statistics')
sm6kSystemDeviceX25Installed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Installed.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Installed.setDescription('The number of devices installed.')
sm6kSystemDeviceX25Table = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2), )
if mibBuilder.loadTexts: sm6kSystemDeviceX25Table.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Table.setDescription('Adapter table.')
sm6kSystemDeviceX25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemDeviceX25Number"))
if mibBuilder.loadTexts: sm6kSystemDeviceX25Entry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Entry.setDescription('Each entry contains objects for a particular device')
sm6kSystemDeviceX25Number = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Number.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Number.setDescription('sm6kSystemDeviceX25Number')
sm6kSystemDeviceX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Address.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Address.setDescription('sm6kSystemDeviceX25Address')
sm6kSystemDeviceX25SupportLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25SupportLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25SupportLevel.setDescription('sm6kSystemDeviceX25SupportLevel')
sm6kSystemDeviceX25SupportedFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25SupportedFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25SupportedFacilities.setDescription('sm6kSystemDeviceX25SupportedFacilities')
sm6kSystemDeviceX25NetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25NetworkId.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25NetworkId.setDescription('sm6kSystemDeviceX25NetworkId')
sm6kSystemDeviceX25MaxTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25MaxTxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25MaxTxPacketSize.setDescription('sm6kSystemDeviceX25MaxTxPacketSize')
sm6kSystemDeviceX25MaxRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25MaxRxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25MaxRxPacketSize.setDescription('sm6kSystemDeviceX25MaxRxPacketSize')
sm6kSystemDeviceX25DefaultSvcTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25DefaultSvcTxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25DefaultSvcTxPacketSize.setDescription('sm6kSystemDeviceX25DefaultSvcTxPacketSize')
sm6kSystemDeviceX25DefaultSvcRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25DefaultSvcRxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25DefaultSvcRxPacketSize.setDescription('sm6kSystemDeviceX25DefaultSvcRxPacketSize')
sm6kSystemDeviceX25ReceiveDataTransferOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ReceiveDataTransferOffset.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ReceiveDataTransferOffset.setDescription('sm6kSystemDeviceX25ReceiveDataTransferOffset')
sm6kSystemDeviceX25MemoryWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25MemoryWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25MemoryWindowSize.setDescription('sm6kSystemDeviceX25MemoryWindowSize')
sm6kSystemDeviceX25TxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxByteMcnt.setDescription('Most significant bits of successfully transmitted byte count')
sm6kSystemDeviceX25TxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxByteLcnt.setDescription('Least significant bits of successfully transmitted byte count')
sm6kSystemDeviceX25RxByteMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxByteMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxByteMcnt.setDescription('Most significant bits of successfully received byte count')
sm6kSystemDeviceX25RxByteLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxByteLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxByteLcnt.setDescription('Least significant bits of successfully received byte count')
sm6kSystemDeviceX25TxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxFrameMcnt.setDescription('Most significant bits of successfully transmitted byte count')
sm6kSystemDeviceX25TxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxFrameLcnt.setDescription('Least significant bits of successfully transmitted byte count')
sm6kSystemDeviceX25RxFrameMcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxFrameMcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxFrameMcnt.setDescription('Most significant bits of successfully received byte count')
sm6kSystemDeviceX25RxFrameLcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxFrameLcnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxFrameLcnt.setDescription('Least significant bits of successfully received byte count')
sm6kSystemDeviceX25TxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxErrCnt.setDescription('Frame transmit error count')
sm6kSystemDeviceX25RxErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxErrCnt.setDescription('Frame receive error count')
sm6kSystemDeviceX25NidTblHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25NidTblHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25NidTblHigh.setDescription('Maximum netids in use')
sm6kSystemDeviceX25TxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxQueHigh.setDescription('Maximum transmits ever queued for adapter')
sm6kSystemDeviceX25RxQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxQueHigh.setDescription('Maximum received ever queued for any open')
sm6kSystemDeviceX25StaQueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25StaQueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25StaQueHigh.setDescription('Maximum status blocks queued for any open')
sm6kSystemDeviceX25IgnoredFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25IgnoredFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25IgnoredFTx.setDescription('sm6kSystemDeviceX25IgnoredFTx')
sm6kSystemDeviceX25RrFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RrFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RrFTx.setDescription('sm6kSystemDeviceX25RrFTx')
sm6kSystemDeviceX25RnrFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RnrFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RnrFTx.setDescription('sm6kSystemDeviceX25RnrFTx')
sm6kSystemDeviceX25RejFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RejFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RejFTx.setDescription('sm6kSystemDeviceX25RejFTx')
sm6kSystemDeviceX25InfoFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25InfoFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25InfoFTx.setDescription('sm6kSystemDeviceX25InfoFTx')
sm6kSystemDeviceX25SabmFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25SabmFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25SabmFTx.setDescription('sm6kSystemDeviceX25SabmFTx')
sm6kSystemDeviceX25SarmDmFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25SarmDmFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25SarmDmFTx.setDescription('sm6kSystemDeviceX25SarmDmFTx')
sm6kSystemDeviceX25DiscFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25DiscFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25DiscFTx.setDescription('sm6kSystemDeviceX25DiscFTx')
sm6kSystemDeviceX25UaFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25UaFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25UaFTx.setDescription('sm6kSystemDeviceX25UaFTx')
sm6kSystemDeviceX25FrmrFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25FrmrFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25FrmrFTx.setDescription('sm6kSystemDeviceX25FrmrFTx')
sm6kSystemDeviceX25BadNrFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25BadNrFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25BadNrFTx.setDescription('sm6kSystemDeviceX25BadNrFTx')
sm6kSystemDeviceX25UnknownFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25UnknownFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25UnknownFTx.setDescription('sm6kSystemDeviceX25UnknownFTx')
sm6kSystemDeviceX25XidFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25XidFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25XidFTx.setDescription('sm6kSystemDeviceX25XidFTx')
sm6kSystemDeviceX25BadLengthFTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25BadLengthFTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25BadLengthFTx.setDescription('sm6kSystemDeviceX25BadLengthFTx')
sm6kSystemDeviceX25T1Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T1Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T1Expirations.setDescription('sm6kSystemDeviceX25T1Expirations')
sm6kSystemDeviceX25Lvl2Connects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Lvl2Connects.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Lvl2Connects.setDescription('sm6kSystemDeviceX25Lvl2Connects')
sm6kSystemDeviceX25Lvl2Disconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Lvl2Disconnects.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Lvl2Disconnects.setDescription('sm6kSystemDeviceX25Lvl2Disconnects')
sm6kSystemDeviceX25CarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25CarrierLoss.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25CarrierLoss.setDescription('sm6kSystemDeviceX25CarrierLoss')
sm6kSystemDeviceX25ConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 44), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ConnectTime.setDescription('sm6kSystemDeviceX25ConnectTime')
sm6kSystemDeviceX25T4Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T4Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T4Expirations.setDescription('sm6kSystemDeviceX25T4Expirations')
sm6kSystemDeviceX25T4N2Times = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T4N2Times.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T4N2Times.setDescription('sm6kSystemDeviceX25T4N2Times')
sm6kSystemDeviceX25IgnoredFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25IgnoredFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25IgnoredFRx.setDescription('sm6kSystemDeviceX25IgnoredFRx')
sm6kSystemDeviceX25RrFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RrFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RrFRx.setDescription('sm6kSystemDeviceX25RrFRx')
sm6kSystemDeviceX25RnrFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RnrFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RnrFRx.setDescription('sm6kSystemDeviceX25RnrFRx')
sm6kSystemDeviceX25RejFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RejFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RejFRx.setDescription('sm6kSystemDeviceX25RejFRx')
sm6kSystemDeviceX25InfoFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25InfoFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25InfoFRx.setDescription('sm6kSystemDeviceX25InfoFRx')
sm6kSystemDeviceX25SabmFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25SabmFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25SabmFRx.setDescription('sm6kSystemDeviceX25SabmFRx')
sm6kSystemDeviceX25SarmDmFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25SarmDmFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25SarmDmFRx.setDescription('sm6kSystemDeviceX25SarmDmFRx')
sm6kSystemDeviceX25DiscFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25DiscFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25DiscFRx.setDescription('sm6kSystemDeviceX25DiscFRx')
sm6kSystemDeviceX25UaFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25UaFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25UaFRx.setDescription('sm6kSystemDeviceX25UaFRx')
sm6kSystemDeviceX25FrmrFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25FrmrFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25FrmrFRx.setDescription('sm6kSystemDeviceX25FrmrFRx')
sm6kSystemDeviceX25BadNrFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25BadNrFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25BadNrFRx.setDescription('sm6kSystemDeviceX25BadNrFRx')
sm6kSystemDeviceX25UnknownFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25UnknownFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25UnknownFRx.setDescription('sm6kSystemDeviceX25UnknownFRx')
sm6kSystemDeviceX25XidFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25XidFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25XidFRx.setDescription('sm6kSystemDeviceX25XidFRx')
sm6kSystemDeviceX25BadLengthFRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25BadLengthFRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25BadLengthFRx.setDescription('sm6kSystemDeviceX25BadLengthFRx')
sm6kSystemDeviceX25DataPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25DataPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25DataPTx.setDescription('sm6kSystemDeviceX25DataPTx')
sm6kSystemDeviceX25RrPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RrPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RrPTx.setDescription('sm6kSystemDeviceX25RrPTx')
sm6kSystemDeviceX25RnrPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RnrPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RnrPTx.setDescription('sm6kSystemDeviceX25RnrPTx')
sm6kSystemDeviceX25InterruptPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25InterruptPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25InterruptPTx.setDescription('sm6kSystemDeviceX25InterruptPTx')
sm6kSystemDeviceX25InterruptConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25InterruptConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25InterruptConfirmPTx.setDescription('sm6kSystemDeviceX25InterruptConfirmPTx')
sm6kSystemDeviceX25CallRequestPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25CallRequestPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25CallRequestPTx.setDescription('sm6kSystemDeviceX25CallRequestPTx')
sm6kSystemDeviceX25CallAcceptPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25CallAcceptPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25CallAcceptPTx.setDescription('sm6kSystemDeviceX25CallAcceptPTx')
sm6kSystemDeviceX25ClearRequestPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ClearRequestPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ClearRequestPTx.setDescription('sm6kSystemDeviceX25ClearRequestPTx')
sm6kSystemDeviceX25ClearConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ClearConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ClearConfirmPTx.setDescription('sm6kSystemDeviceX25ClearConfirmPTx')
sm6kSystemDeviceX25ResetRequestPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ResetRequestPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ResetRequestPTx.setDescription('sm6kSystemDeviceX25ResetRequestPTx')
sm6kSystemDeviceX25ResetConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ResetConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ResetConfirmPTx.setDescription('sm6kSystemDeviceX25ResetConfirmPTx')
sm6kSystemDeviceX25DiagnosticPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25DiagnosticPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25DiagnosticPTx.setDescription('sm6kSystemDeviceX25DiagnosticPTx')
sm6kSystemDeviceX25RegistrationPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RegistrationPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RegistrationPTx.setDescription('sm6kSystemDeviceX25RegistrationPTx')
sm6kSystemDeviceX25RegistrationConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RegistrationConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RegistrationConfirmPTx.setDescription('sm6kSystemDeviceX25RegistrationConfirmPTx')
sm6kSystemDeviceX25RestartPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RestartPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RestartPTx.setDescription('sm6kSystemDeviceX25RestartPTx')
sm6kSystemDeviceX25RestartConfirmPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RestartConfirmPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RestartConfirmPTx.setDescription('sm6kSystemDeviceX25RestartConfirmPTx')
sm6kSystemDeviceX25ErrorPTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ErrorPTx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ErrorPTx.setDescription('sm6kSystemDeviceX25ErrorPTx')
sm6kSystemDeviceX25T20Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T20Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T20Expirations.setDescription('sm6kSystemDeviceX25T20Expirations')
sm6kSystemDeviceX25T21Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T21Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T21Expirations.setDescription('sm6kSystemDeviceX25T21Expirations')
sm6kSystemDeviceX25T22Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T22Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T22Expirations.setDescription('sm6kSystemDeviceX25T22Expirations')
sm6kSystemDeviceX25T23Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T23Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T23Expirations.setDescription('sm6kSystemDeviceX25T23Expirations')
sm6kSystemDeviceX25VcEstablishments = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25VcEstablishments.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25VcEstablishments.setDescription('sm6kSystemDeviceX25VcEstablishments')
sm6kSystemDeviceX25T24Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T24Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T24Expirations.setDescription('sm6kSystemDeviceX25T24Expirations')
sm6kSystemDeviceX25T25Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T25Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T25Expirations.setDescription('sm6kSystemDeviceX25T25Expirations')
sm6kSystemDeviceX25T26Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T26Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T26Expirations.setDescription('sm6kSystemDeviceX25T26Expirations')
sm6kSystemDeviceX25T28Expirations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25T28Expirations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25T28Expirations.setDescription('sm6kSystemDeviceX25T28Expirations')
sm6kSystemDeviceX25DataPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25DataPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25DataPRx.setDescription('sm6kSystemDeviceX25DataPRx')
sm6kSystemDeviceX25RrPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RrPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RrPRx.setDescription('sm6kSystemDeviceX25RrPRx')
sm6kSystemDeviceX25RnrPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RnrPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RnrPRx.setDescription('sm6kSystemDeviceX25RnrPRx')
sm6kSystemDeviceX25InterruptPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25InterruptPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25InterruptPRx.setDescription('sm6kSystemDeviceX25InterruptPRx')
sm6kSystemDeviceX25InterruptConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25InterruptConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25InterruptConfirmPRx.setDescription('sm6kSystemDeviceX25InterruptConfirmPRx')
sm6kSystemDeviceX25IncomingCallPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25IncomingCallPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25IncomingCallPRx.setDescription('sm6kSystemDeviceX25IncomingCallPRx')
sm6kSystemDeviceX25CallConnectedPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25CallConnectedPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25CallConnectedPRx.setDescription('sm6kSystemDeviceX25CallConnectedPRx')
sm6kSystemDeviceX25ClearIndicationPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ClearIndicationPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ClearIndicationPRx.setDescription('sm6kSystemDeviceX25ClearIndicationPRx')
sm6kSystemDeviceX25ClearConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ClearConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ClearConfirmPRx.setDescription('sm6kSystemDeviceX25ClearConfirmPRx')
sm6kSystemDeviceX25ResetIndicationPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ResetIndicationPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ResetIndicationPRx.setDescription('sm6kSystemDeviceX25ResetIndicationPRx')
sm6kSystemDeviceX25ResetConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25ResetConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25ResetConfirmPRx.setDescription('sm6kSystemDeviceX25ResetConfirmPRx')
sm6kSystemDeviceX25DiagnosticPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25DiagnosticPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25DiagnosticPRx.setDescription('sm6kSystemDeviceX25DiagnosticPRx')
sm6kSystemDeviceX25RegistrationPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RegistrationPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RegistrationPRx.setDescription('sm6kSystemDeviceX25RegistrationPRx')
sm6kSystemDeviceX25RegistrationConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RegistrationConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RegistrationConfirmPRx.setDescription('sm6kSystemDeviceX25RegistrationConfirmPRx')
sm6kSystemDeviceX25RestartPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RestartPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RestartPRx.setDescription('sm6kSystemDeviceX25RestartPRx')
sm6kSystemDeviceX25RestartConfirmPRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RestartConfirmPRx.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RestartConfirmPRx.setDescription('sm6kSystemDeviceX25RestartConfirmPRx')
sm6kSystemDeviceX25TxUnknownSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxUnknownSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxUnknownSize.setDescription('sm6kSystemDeviceX25TxUnknownSize')
sm6kSystemDeviceX25TxReserved1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved1.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved1.setDescription('sm6kSystemDeviceX25TxReserved1')
sm6kSystemDeviceX25TxReserved2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved2.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved2.setDescription('sm6kSystemDeviceX25TxReserved2')
sm6kSystemDeviceX25TxReserved3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved3.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved3.setDescription('sm6kSystemDeviceX25TxReserved3')
sm6kSystemDeviceX25Tx0x15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx0x15.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx0x15.setDescription('sm6kSystemDeviceX25Tx0x15')
sm6kSystemDeviceX25Tx16x31 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx16x31.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx16x31.setDescription('sm6kSystemDeviceX25Tx16x31')
sm6kSystemDeviceX25Tx32x63 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx32x63.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx32x63.setDescription('sm6kSystemDeviceX25Tx32x63')
sm6kSystemDeviceX25Tx64x127 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx64x127.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx64x127.setDescription('sm6kSystemDeviceX25Tx64x127')
sm6kSystemDeviceX25Tx128x255 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx128x255.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx128x255.setDescription('sm6kSystemDeviceX25Tx128x255')
sm6kSystemDeviceX25Tx256x511 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx256x511.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx256x511.setDescription('sm6kSystemDeviceX25Tx256x511')
sm6kSystemDeviceX25Tx512x1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx512x1023.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx512x1023.setDescription('sm6kSystemDeviceX25Tx512x1023')
sm6kSystemDeviceX25Tx1024x2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx1024x2047.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx1024x2047.setDescription('sm6kSystemDeviceX25Tx1024x2047')
sm6kSystemDeviceX25Tx2048x4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx2048x4095.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Tx2048x4095.setDescription('sm6kSystemDeviceX25Tx2048x4095')
sm6kSystemDeviceX25TxReserved13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved13.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved13.setDescription('sm6kSystemDeviceX25TxReserved13')
sm6kSystemDeviceX25TxReserved14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved14.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved14.setDescription('sm6kSystemDeviceX25TxReserved14')
sm6kSystemDeviceX25TxReserved15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved15.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxReserved15.setDescription('sm6kSystemDeviceX25TxReserved15')
sm6kSystemDeviceX25TxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxTotalPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25TxTotalPackets.setDescription('sm6kSystemDeviceX25TxTotalPackets')
sm6kSystemDeviceX25RxUnknownSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxUnknownSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxUnknownSize.setDescription('sm6kSystemDeviceX25RxUnknownSize')
sm6kSystemDeviceX25RxReserved1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved1.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved1.setDescription('sm6kSystemDeviceX25RxReserved1')
sm6kSystemDeviceX25RxReserved2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved2.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved2.setDescription('sm6kSystemDeviceX25RxReserved2')
sm6kSystemDeviceX25RxReserved3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved3.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved3.setDescription('sm6kSystemDeviceX25RxReserved3')
sm6kSystemDeviceX25Rx0x15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx0x15.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx0x15.setDescription('sm6kSystemDeviceX25Rx0x15')
sm6kSystemDeviceX25Rx16x31 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx16x31.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx16x31.setDescription('sm6kSystemDeviceX25Rx16x31')
sm6kSystemDeviceX25Rx32x63 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx32x63.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx32x63.setDescription('sm6kSystemDeviceX25Rx32x63')
sm6kSystemDeviceX25Rx64x127 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx64x127.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx64x127.setDescription('sm6kSystemDeviceX25Rx64x127')
sm6kSystemDeviceX25Rx128x255 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx128x255.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx128x255.setDescription('sm6kSystemDeviceX25Rx128x255')
sm6kSystemDeviceX25Rx256x511 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 129), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx256x511.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx256x511.setDescription('sm6kSystemDeviceX25Rx256x511')
sm6kSystemDeviceX25Rx512x1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 130), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx512x1023.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx512x1023.setDescription('sm6kSystemDeviceX25Rx512x1023')
sm6kSystemDeviceX25Rx1024x2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 131), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx1024x2047.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx1024x2047.setDescription('sm6kSystemDeviceX25Rx1024x2047')
sm6kSystemDeviceX25Rx2048x4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 132), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx2048x4095.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Rx2048x4095.setDescription('sm6kSystemDeviceX25Rx2048x4095')
sm6kSystemDeviceX25RxReserved13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 133), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved13.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved13.setDescription('sm6kSystemDeviceX25RxReserved13')
sm6kSystemDeviceX25RxReserved14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 134), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved14.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved14.setDescription('sm6kSystemDeviceX25RxReserved14')
sm6kSystemDeviceX25RxReserved15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 135), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved15.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxReserved15.setDescription('sm6kSystemDeviceX25RxReserved15')
sm6kSystemDeviceX25RxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 136), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxTotalPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RxTotalPackets.setDescription('sm6kSystemDeviceX25RxTotalPackets')
sm6kSystemDeviceX25Clear = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 2, 1, 137), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kSystemDeviceX25Clear.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25Clear.setDescription('Set to clear to clear clearable statistics')
sm6kSystemDeviceX25RouteCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCount.setDescription('The number of devices installed.')
sm6kSystemDeviceX25RouteTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4), )
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteTable.setDescription('Routing information')
sm6kSystemDeviceX25RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemDeviceX25RouteNumber"))
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteEntry.setDescription('Each entry contains objects for a particular route.')
sm6kSystemDeviceX25RouteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteNumber.setDescription('Route Entry number.')
sm6kSystemDeviceX25RouteEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteEntryName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteEntryName.setDescription('Route name.')
sm6kSystemDeviceX25RouteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteUserName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteUserName.setDescription('User name.')
sm6kSystemDeviceX25RoutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RoutePort.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RoutePort.setDescription('Port')
sm6kSystemDeviceX25RouteCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCallingAddress.setDescription('Calling address')
sm6kSystemDeviceX25RouteCalledSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCalledSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCalledSubaddress.setDescription('Called subaddress')
sm6kSystemDeviceX25RouteCallingAddressExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCallingAddressExt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCallingAddressExt.setDescription('Calling address extension')
sm6kSystemDeviceX25RouteCalledAddressExt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCalledAddressExt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCalledAddressExt.setDescription('Called address extension')
sm6kSystemDeviceX25RouteCalledUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCalledUserData.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteCalledUserData.setDescription('Called address extension')
sm6kSystemDeviceX25RoutePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RoutePriority.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RoutePriority.setDescription('Priority')
sm6kSystemDeviceX25RouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 3, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("reject", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteAction.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemDeviceX25RouteAction.setDescription('Action taken when no listening application is running')
sm6kSystemFileSystemMounted = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemMounted.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemMounted.setDescription('The number of file systems mounted.')
sm6kSystemFileSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2), )
if mibBuilder.loadTexts: sm6kSystemFileSystemTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemTable.setDescription('File system table.')
sm6kSystemFileSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemFileSystemName"))
if mibBuilder.loadTexts: sm6kSystemFileSystemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemEntry.setDescription('Each entry contains objects for a particular file system.')
sm6kSystemFileSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemName.setDescription('Name of mount point for a file system.')
sm6kSystemFileSystemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemSize.setDescription('Total kilobytes in file system.')
sm6kSystemFileSystemFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemFree.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemFree.setDescription('Free file system space in kilobytes.')
sm6kSystemFileSystemPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemPercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemPercentUsed.setDescription('Percent of file system used.')
sm6kSystemFileSystemInodesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemInodesUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemInodesUsed.setDescription('Used inodes in file system.')
sm6kSystemFileSystemInodesPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemInodesPercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemInodesPercentUsed.setDescription('Percent of file system used.')
sm6kSystemFileSystemInodeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemInodeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemInodeCount.setDescription('Percent of file system used.')
sm6kSystemFileSystemFileSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemFileSystem.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemFileSystem.setDescription('NFS File system.')
sm6kSystemFileSystemRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemFileSystemRemote.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemFileSystemRemote.setDescription('Remote node for remotely mounted filesystems.')
sm6kSystemSubSystemsCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemSubSystemsCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSubSystemsCount.setDescription('The number of subsystems in table.')
sm6kSystemSubSystemsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2), )
if mibBuilder.loadTexts: sm6kSystemSubSystemsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSubSystemsTable.setDescription('Subsystems table.')
sm6kSystemSubSystemsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemSubSystemsName"))
if mibBuilder.loadTexts: sm6kSystemSubSystemsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSubSystemsEntry.setDescription('Each entry contains objects for a particular file system.')
sm6kSystemSubSystemsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemSubSystemsName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSubSystemsName.setDescription('Name of sub system.')
sm6kSystemSubSystemsPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemSubSystemsPID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSubSystemsPID.setDescription('PID of subsystem, if active.')
sm6kSystemSubSystemsStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemSubSystemsStatusDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSubSystemsStatusDescription.setDescription('Process group')
sm6kSystemSubSystemsStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemSubSystemsStatusText.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSubSystemsStatusText.setDescription('Status text')
sm6kSystemSubSystemsStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemSubSystemsStatusCode.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemSubSystemsStatusCode.setDescription('Integer status code')
sm6kSystemProcessCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessCount.setDescription('The number of processes in table.')
sm6kSystemProcessTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2), )
if mibBuilder.loadTexts: sm6kSystemProcessTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessTable.setDescription('Process table.')
sm6kSystemProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemProcessCommand"), (0, "SYSMON6K-MIB", "sm6kSystemProcessPID"))
if mibBuilder.loadTexts: sm6kSystemProcessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessEntry.setDescription('Each entry contains objects for a particular file system.')
sm6kSystemProcessLoginUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessLoginUser.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessLoginUser.setDescription('Name of user to whom process belongs.')
sm6kSystemProcessPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessPID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessPID.setDescription('Process ID')
sm6kSystemProcessParentPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessParentPID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessParentPID.setDescription('Parent Process ID')
sm6kSystemProcessCPUTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessCPUTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessCPUTime.setDescription('Total CPU Time used since startup')
sm6kSystemProcessUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessUserTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessUserTime.setDescription('CPU Time used in user mode since startup.')
sm6kSystemProcessSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessSystemTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessSystemTime.setDescription('CPU Time used in system mode since startup.')
sm6kSystemProcessPageFaultsIO = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessPageFaultsIO.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessPageFaultsIO.setDescription('Number of Page faults requiring I/O.')
sm6kSystemProcessPageFaultsNoIO = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessPageFaultsNoIO.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessPageFaultsNoIO.setDescription('Number of Page faults not requiring I/O.')
sm6kSystemProcessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessPriority.setDescription('Process Priority')
sm6kSystemProcessNice = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessNice.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessNice.setDescription('Process Nice Value ')
sm6kSystemProcessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 666))).clone(namedValues=NamedValues(("sleep", 1), ("run", 3), ("iDL", 4), ("zombie", 5), ("stop", 6), ("none", 666)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessState.setDescription('Current Process state')
sm6kSystemProcessWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 666))).clone(namedValues=NamedValues(("event", 1), ("lock", 2), ("timer", 3), ("cpu", 4), ("pageIn", 5), ("pageOut", 6), ("pLock", 7), ("pageFree", 8), ("memory", 9), ("none", 666)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessWait.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessWait.setDescription('Process wait reason')
sm6kSystemProcessDataResidentSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessDataResidentSetSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessDataResidentSetSize.setDescription('Data resident set size in kilobytes.')
sm6kSystemProcessTextResidentSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessTextResidentSetSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessTextResidentSetSize.setDescription('Text resident set size in kilobytes.')
sm6kSystemProcessImageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessImageSize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessImageSize.setDescription('Data Virtual Memory size')
sm6kSystemProcessDataVirtualMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessDataVirtualMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessDataVirtualMemorySize.setDescription('Data Virtual Memory size')
sm6kSystemProcessPercentMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessPercentMemory.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessPercentMemory.setDescription('Percentage of real memory used.')
sm6kSystemProcessCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessCPU.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessCPU.setDescription('Some measure of CPU use.')
sm6kSystemProcessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessStartTime.setDescription('Process starting time.')
sm6kSystemProcessCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessCommand.setDescription('Process starting command.')
sm6kSystemProcessLoginUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessLoginUID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessLoginUID.setDescription('Login User ID')
sm6kSystemProcessEffectiveUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessEffectiveUID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessEffectiveUID.setDescription('Effective User ID')
sm6kSystemProcessEffectiveGID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessEffectiveGID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessEffectiveGID.setDescription('Effective Group ID')
sm6kSystemProcessEffectiveGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessEffectiveGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessEffectiveGroupName.setDescription('Effective Group Name')
sm6kSystemProcessSUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessSUID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessSUID.setDescription('Saved User ID')
sm6kSystemProcessPgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessPgrp.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessPgrp.setDescription('Process group')
sm6kSystemProcessPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessPFlags.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessPFlags.setDescription('Process flags - look in /usr/include/sys/proc.h')
sm6kSystemProcessAdspace = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessAdspace.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessAdspace.setDescription('Process Address space')
sm6kSystemProcessTTYp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessTTYp.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessTTYp.setDescription('Whether process has a controlling tty')
sm6kSystemProcessTTYd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessTTYd.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessTTYd.setDescription("Process's Controlling TTY")
sm6kSystemProcessNSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessNSwap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessNSwap.setDescription('Number of times process swapped out')
sm6kSystemProcessInblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessInblocks.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessInblocks.setDescription('File blocks input')
sm6kSystemProcessOutblocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessOutblocks.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessOutblocks.setDescription('File blocks output')
sm6kSystemProcessMsgsnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessMsgsnd.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessMsgsnd.setDescription('Number of IPC Messages sent')
sm6kSystemProcessMsgrcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessMsgrcv.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessMsgrcv.setDescription('Number of IPC Messages received')
sm6kSystemProcessNsignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessNsignals.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessNsignals.setDescription('Number of Signals delivered ')
sm6kSystemProcessNVcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessNVcsw.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessNVcsw.setDescription('Number of Voluntary context switches')
sm6kSystemProcessNIvcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessNIvcsw.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessNIvcsw.setDescription('Number of Involuntary context switches')
sm6kSystemProcessArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessArguments.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessArguments.setDescription('Process command syntax in full path')
sm6kSystemProcessSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 7, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 60, 61, 62, 63))).clone(namedValues=NamedValues(("sighup", 1), ("sigint", 2), ("sigquit", 3), ("sigill", 4), ("sigtrap", 5), ("sigabrt", 6), ("sigemt", 7), ("sigfpe", 8), ("sigkill", 9), ("sigbus", 10), ("sigsegv", 11), ("sigsys", 12), ("sigpipe", 13), ("sigalrm", 14), ("sigterm", 15), ("sigurg", 16), ("sigstop", 17), ("sigtstp", 18), ("sigcont", 19), ("sigchld", 20), ("sigttin", 21), ("sigttou", 22), ("sigio", 23), ("sigxcpu", 24), ("sigxfsz", 25), ("sigmsg", 27), ("sigwinch", 28), ("sigpwr", 29), ("sigusr1", 30), ("sigusr2", 31), ("sigprof", 32), ("sigdanger", 33), ("sigvtalrm", 34), ("sigmigrate", 35), ("sigpre", 36), ("sigvirt", 37), ("siggrant", 60), ("sigretract", 61), ("sigsound", 62), ("sigsak", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemProcessSignal.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemProcessSignal.setDescription('Sends a signal to process when set')
sm6kSystemUsersLoggedIn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUsersLoggedIn.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUsersLoggedIn.setDescription('The number of users logged in')
sm6kSystemUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2), )
if mibBuilder.loadTexts: sm6kSystemUsersTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUsersTable.setDescription('User table.')
sm6kSystemUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemUsersName"))
if mibBuilder.loadTexts: sm6kSystemUsersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUsersEntry.setDescription('Each entry contains objects for a particular user.')
sm6kSystemUsersName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUsersName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUsersName.setDescription('User name')
sm6kSystemUsersLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUsersLine.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUsersLine.setDescription('Device name')
sm6kSystemUsersTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUsersTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUsersTime.setDescription('Login time')
sm6kSystemUsersPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUsersPID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUsersPID.setDescription('Process ID')
sm6kSystemUsersRemoteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 8, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUsersRemoteHost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUsersRemoteHost.setDescription('Remote hostname')
sm6kSystemMiscellaneousTimeText = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMiscellaneousTimeText.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMiscellaneousTimeText.setDescription('Current System Time')
sm6kSystemMiscellaneousTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMiscellaneousTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMiscellaneousTime.setDescription('Current system time, seconds since reference time')
sm6kSystemMiscellaneousRandom = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMiscellaneousRandom.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMiscellaneousRandom.setDescription('A random number generated by the random() call')
sm6kSystemMiscellaneousFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMiscellaneousFreeSpace.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMiscellaneousFreeSpace.setDescription('Unallocated space in active volume groups, in kilobytes')
sm6kSystemMiscellaneousPublicKey = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kSystemMiscellaneousPublicKey.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMiscellaneousPublicKey.setDescription('Reserved.')
sm6kSystemMiscellaneousLocalSocket = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemMiscellaneousLocalSocket.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemMiscellaneousLocalSocket.setDescription('Reserved.')
sm6kSystemRebootTimer = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kSystemRebootTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemRebootTimer.setDescription('Setting this to n will cause a reboot in n seconds')
sm6kSystemUtilizationCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1))
sm6kSystemUtilizationKernel = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2))
sm6kSystemUtilizationIostat = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3))
sm6kSystemUtilizationCPUPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUPollingInterval.setDescription('Polling Interval for CPU data')
sm6kSystemUtilizationCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUCount.setDescription('Number of CPUs in system')
sm6kSystemUtilizationCPUTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3), )
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUTable.setDescription('CPU Utilization table.')
sm6kSystemUtilizationCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemUtilizationCPUIntervalName"))
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUEntry.setDescription('Each entry contains CPU over a different interval')
sm6kSystemUtilizationCPUIntervalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIntervalName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIntervalName.setDescription('Description of interval')
sm6kSystemUtilizationCPUIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIntervalStartTime.setDescription('Start time of interval')
sm6kSystemUtilizationCPUIntervalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIntervalLength.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIntervalLength.setDescription('Length of Interval over which CPU computed')
sm6kSystemUtilizationCPUUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUUser.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUUser.setDescription('Average Percent CPU in user mode over the interval')
sm6kSystemUtilizationCPUSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUSystem.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUSystem.setDescription('Average Percent CPU in system mode over the interval')
sm6kSystemUtilizationCPUIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIdle.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIdle.setDescription('Average Percent CPU in idle mode over the interval')
sm6kSystemUtilizationCPUWait = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUWait.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUWait.setDescription('Average Percent CPU in wait mode over the interval')
sm6kSystemUtilizationCPUBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUBusy.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUBusy.setDescription('Average Percent CPU in user and system mode over the interval')
sm6kSystemUtilizationCPUUserMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUUserMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUUserMinimum.setDescription('Minimum Percent CPU user mode')
sm6kSystemUtilizationCPUSystemMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUSystemMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUSystemMinimum.setDescription('Minimum Percent CPU system mode')
sm6kSystemUtilizationCPUIdleMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIdleMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIdleMinimum.setDescription('Minimum Percent CPU idle mode')
sm6kSystemUtilizationCPUWaitMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUWaitMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUWaitMinimum.setDescription('Minimum Percent CPU idle mode')
sm6kSystemUtilizationCPUBusyMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUBusyMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUBusyMinimum.setDescription('Minimum Percent CPU user and system mode')
sm6kSystemUtilizationCPUUserMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUUserMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUUserMaximum.setDescription('Maximum Percent CPU user mode')
sm6kSystemUtilizationCPUSystemMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUSystemMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUSystemMaximum.setDescription('Maximum Percent CPU system mode')
sm6kSystemUtilizationCPUIdleMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIdleMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUIdleMaximum.setDescription('Maximum Percent CPU idle mode')
sm6kSystemUtilizationCPUWaitMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUWaitMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUWaitMaximum.setDescription('Maximum Percent CPU idle mode')
sm6kSystemUtilizationCPUBusyMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUBusyMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUBusyMaximum.setDescription('Maximum Percent CPU user and system mode')
sm6kSystemUtilizationCPUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationCPUNumber.setDescription('CPU Number this row applies to ')
sm6kSystemUtilizationKernelPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelPollingInterval.setDescription('Polling Interval for Utilization kernel data')
sm6kSystemUtilizationKernelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2), )
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelTable.setDescription('Kernel statistics table.')
sm6kSystemUtilizationKernelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemUtilizationKernelName"))
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelEntry.setDescription('Each entry contains Utilization Kernel over a different interval')
sm6kSystemUtilizationKernelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelName.setDescription('Description of interval')
sm6kSystemUtilizationKernelIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelIntervalStartTime.setDescription('Start time of interval')
sm6kSystemUtilizationKernelIntervalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelIntervalLength.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelIntervalLength.setDescription('Length of Interval over which Utilization Kernel computed')
sm6kSystemUtilizationKernelContextSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelContextSwitches.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelContextSwitches.setDescription('Total number of context switches')
sm6kSystemUtilizationKernelSystemCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemCalls.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemCalls.setDescription('Total number of system calls')
sm6kSystemUtilizationKernelSystemReads = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemReads.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemReads.setDescription('Total number of system reads')
sm6kSystemUtilizationKernelSystemWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemWrites.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemWrites.setDescription('Total number of system writes')
sm6kSystemUtilizationKernelForks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelForks.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelForks.setDescription('Total number of forks system calls')
sm6kSystemUtilizationKernelExecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelExecs.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelExecs.setDescription('Total number of EXEC system calls')
sm6kSystemUtilizationKernelRunQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRunQueue.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRunQueue.setDescription('Number of jobs in the run queue')
sm6kSystemUtilizationKernelSwapQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSwapQueue.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSwapQueue.setDescription('Number of jobs in the swap queue')
sm6kSystemUtilizationKernelSemaphores = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSemaphores.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSemaphores.setDescription('Total number of semaphore operations')
sm6kSystemUtilizationKernelMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelMessages.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelMessages.setDescription('Total number of message operations')
sm6kSystemUtilizationKernelProcessOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelProcessOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelProcessOverflow.setDescription('Total number of process creation failures')
sm6kSystemUtilizationKernelBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesRead.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesRead.setDescription('Total bytes read')
sm6kSystemUtilizationKernelBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesWritten.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesWritten.setDescription('Total bytes written')
sm6kSystemUtilizationKernelRawTTYOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRawTTYOut.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRawTTYOut.setDescription('Total raw TTY out count')
sm6kSystemUtilizationKernelContextSwitchesMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelContextSwitchesMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelContextSwitchesMinimum.setDescription('Minimum context switches')
sm6kSystemUtilizationKernelSystemCallsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemCallsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemCallsMinimum.setDescription('Minimum system calls')
sm6kSystemUtilizationKernelSystemReadsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemReadsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemReadsMinimum.setDescription('Minimum system reads')
sm6kSystemUtilizationKernelSystemWritesMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemWritesMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemWritesMinimum.setDescription('Minimum system writes')
sm6kSystemUtilizationKernelForksMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelForksMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelForksMinimum.setDescription('Minimum forks')
sm6kSystemUtilizationKernelExecsMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelExecsMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelExecsMinimum.setDescription('Minimum execs')
sm6kSystemUtilizationKernelRunQueueMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRunQueueMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRunQueueMinimum.setDescription('Minimum run queue length')
sm6kSystemUtilizationKernelSwapQueueMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSwapQueueMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSwapQueueMinimum.setDescription('Minimum swap queue length')
sm6kSystemUtilizationKernelSemaphoresMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSemaphoresMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSemaphoresMinimum.setDescription('Minimum semaphore operations')
sm6kSystemUtilizationKernelMessagesMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelMessagesMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelMessagesMinimum.setDescription('Minimum message operations')
sm6kSystemUtilizationKernelProcessOverflowMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelProcessOverflowMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelProcessOverflowMinimum.setDescription('Minimum process creation failures')
sm6kSystemUtilizationKernelBytesReadMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesReadMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesReadMinimum.setDescription('Minimum bytes read')
sm6kSystemUtilizationKernelBytesWrittenMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesWrittenMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesWrittenMinimum.setDescription('Minimum bytes written')
sm6kSystemUtilizationKernelRawTTYOutMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRawTTYOutMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRawTTYOutMinimum.setDescription('Minimum raw TTY out count')
sm6kSystemUtilizationKernelContextSwitchesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelContextSwitchesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelContextSwitchesMaximum.setDescription('Maximum context switches')
sm6kSystemUtilizationKernelSystemCallsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemCallsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemCallsMaximum.setDescription('Maximum system calls')
sm6kSystemUtilizationKernelSystemReadsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemReadsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemReadsMaximum.setDescription('Maximum system reads')
sm6kSystemUtilizationKernelSystemWritesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemWritesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSystemWritesMaximum.setDescription('Maximum system writes')
sm6kSystemUtilizationKernelForksMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelForksMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelForksMaximum.setDescription('Maximum forks')
sm6kSystemUtilizationKernelExecsMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelExecsMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelExecsMaximum.setDescription('Maximum execs')
sm6kSystemUtilizationKernelRunQueueMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRunQueueMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRunQueueMaximum.setDescription('Maximum run queue length')
sm6kSystemUtilizationKernelSwapQueueMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSwapQueueMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSwapQueueMaximum.setDescription('Maximum swap queue length')
sm6kSystemUtilizationKernelSemaphoresMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSemaphoresMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelSemaphoresMaximum.setDescription('Maximum semaphore operations')
sm6kSystemUtilizationKernelMessagesMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelMessagesMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelMessagesMaximum.setDescription('Maximum message operations')
sm6kSystemUtilizationKernelProcessOverflowMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelProcessOverflowMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelProcessOverflowMaximum.setDescription('Maximum process creation failures')
sm6kSystemUtilizationKernelBytesReadMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesReadMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesReadMaximum.setDescription('Maximum bytes read')
sm6kSystemUtilizationKernelBytesWrittenMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesWrittenMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelBytesWrittenMaximum.setDescription('Maximum bytes written')
sm6kSystemUtilizationKernelRawTTYOutMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 2, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRawTTYOutMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationKernelRawTTYOutMaximum.setDescription('Maximum raw TTY out count')
sm6kSystemUtilizationIostatPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatPollingInterval.setDescription('Polling interval for IO statistics data')
sm6kSystemUtilizationIostatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2), )
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatTable.setDescription('Input/Output statistics table.')
sm6kSystemUtilizationIostatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kSystemUtilizationIostatName"))
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatEntry.setDescription('Each entry contains IO statistics over a different interval')
sm6kSystemUtilizationIostatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatName.setDescription('Description of interval - returns hard disk name and the interval length')
sm6kSystemUtilizationIostatIntervalStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatIntervalStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatIntervalStartTime.setDescription('Start time of interval')
sm6kSystemUtilizationIostatIntervalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatIntervalLength.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatIntervalLength.setDescription('Length of interval over which IO statistics were computed')
sm6kSystemUtilizationIostatPercentTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatPercentTimeActive.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatPercentTimeActive.setDescription('Average Percent Time when the hard disk was busy')
sm6kSystemUtilizationIostatKilobytesTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesTransferRate.setDescription('Average Transfer Rate')
sm6kSystemUtilizationIostatTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatTransfers.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatTransfers.setDescription('Average Number of Transfers')
sm6kSystemUtilizationIostatKilobytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesRead.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesRead.setDescription('Number of Kilobytes read over the interval')
sm6kSystemUtilizationIostatKilobytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesWritten.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesWritten.setDescription('Number of kilobytes written over the interval')
sm6kSystemUtilizationIostatPercentTimeActiveMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatPercentTimeActiveMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatPercentTimeActiveMinimum.setDescription('Minimum Percent Time Active')
sm6kSystemUtilizationIostatKilobytesTransferRateMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesTransferRateMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesTransferRateMinimum.setDescription('Minimum Transfer Rate')
sm6kSystemUtilizationIostatTransfersMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatTransfersMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatTransfersMinimum.setDescription('Minimum Number of Transfers')
sm6kSystemUtilizationIostatKilobytesReadMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesReadMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesReadMinimum.setDescription('Minimum kilobytes read')
sm6kSystemUtilizationIostatKilobytesWrittenMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesWrittenMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesWrittenMinimum.setDescription('Minimum kilobytes written')
sm6kSystemUtilizationIostatPercentTimeActiveMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatPercentTimeActiveMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatPercentTimeActiveMaximum.setDescription('Maximum percentage Time Active')
sm6kSystemUtilizationIostatKilobytesTransferRateMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesTransferRateMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesTransferRateMaximum.setDescription('Maximum Transfer Rate')
sm6kSystemUtilizationIostatTransfersMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatTransfersMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatTransfersMaximum.setDescription('Maximum Number of Transfers')
sm6kSystemUtilizationIostatKilobytesReadMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesReadMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesReadMaximum.setDescription('Maximum Number of Kilobytes read')
sm6kSystemUtilizationIostatKilobytesWrittenMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 2, 9, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesWrittenMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kSystemUtilizationIostatKilobytesWrittenMaximum.setDescription('Maximum Number of Kilobytes written')
sm6kNetworkSessionInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1))
sm6kNetworkSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionCount.setDescription('The number of open sessions.')
sm6kNetworkSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2), )
if mibBuilder.loadTexts: sm6kNetworkSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionTable.setDescription('Session table - list of nodes with which this agent is communicating.')
sm6kNetworkSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kNetworkSessionName"))
if mibBuilder.loadTexts: sm6kNetworkSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionEntry.setDescription('Each entry contains objects for a particular device')
sm6kNetworkSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionName.setDescription('Name or IP address of the node in Systems Monitor session')
sm6kNetworkSessionCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionCurrentState.setDescription('Last known state of session')
sm6kNetworkSessionLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionLastStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionLastStateChange.setDescription('Time at which session state last changed.')
sm6kNetworkSessionLastPollAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionLastPollAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionLastPollAttempt.setDescription('Time at which session was last polled.')
sm6kNetworkSessionAddressFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 65535))).clone(namedValues=NamedValues(("unix", 1), ("inet", 2), ("implink", 3), ("pup", 4), ("chaos", 5), ("ns", 6), ("osi", 7), ("ecma", 8), ("datakit", 9), ("ccitt", 10), ("sna", 11), ("decnet", 12), ("dli", 13), ("lat", 14), ("hylink", 15), ("appletalk", 16), ("route", 17), ("link", 18), ("xtpPseudo", 19), ("intf", 20), ("rif", 21), ("netware", 22), ("reserved23", 23), ("reserved24", 24), ("reserved25", 25), ("reserved26", 26), ("reserved27", 27), ("reserved28", 28), ("reserved29", 29), ("reserved30", 30), ("reserved31", 31), ("reserved32", 32), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionAddressFamily.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionAddressFamily.setDescription('Address family used to communicate with session')
sm6kNetworkSessionNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionNetAddress.setDescription('Remote Address of session.')
sm6kNetworkSessionTransmitAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionTransmitAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionTransmitAttempts.setDescription('Number of send transmit attempts made on session.')
sm6kNetworkSessionPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionPacketsReceived.setDescription('Number of packets received on session.')
sm6kNetworkSessionLastTransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionLastTransmitTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionLastTransmitTime.setDescription('Last Time at which a transmission was sent')
sm6kNetworkSessionLastReceiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionLastReceiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionLastReceiveTime.setDescription('Last Time at which a packet was received')
sm6kNetworkSessionMinimumResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionMinimumResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionMinimumResponseTime.setDescription('Minimum round-trip time to session since start-up.')
sm6kNetworkSessionRecentAverageResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionRecentAverageResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionRecentAverageResponseTime.setDescription('Average response time for the most recent queries.')
sm6kNetworkSessionLifeTimeAverageResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionLifeTimeAverageResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionLifeTimeAverageResponseTime.setDescription('Average response time since start-up.')
sm6kNetworkSessionMaximumResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 3, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kNetworkSessionMaximumResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kNetworkSessionMaximumResponseTime.setDescription('Maximum round-trip time to session since start-up.')
sm6kCommandTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1), )
if mibBuilder.loadTexts: sm6kCommandTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandTable.setDescription('Command table.')
sm6kCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kCommandName"))
if mibBuilder.loadTexts: sm6kCommandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandEntry.setDescription('Each entry contains objects for a particular command.')
sm6kCommandState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("enabled", 3), ("invalid", 2), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandState.setDescription('State of command for execution: disabled (1), invalid (2), or enabled (3).')
sm6kCommandName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandName.setDescription('Command name for use as a label and row instance. The selection of a row in the table uses the command name as the instance for the row selection. The command name is appended to the row object ID to uniquely identify the instance of this variable. For example, the instance of sm6kCommandState is sm6kCommandState.sm6kCommandName, where each octet in sm6kCommandName is a value in dot notation for the variable.')
sm6kCommandDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandDescription.setDescription('Command description for the command to execute.')
sm6kCommandOwnerID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandOwnerID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandOwnerID.setDescription('Owner ID (IP address or hostname) who generated the command entry. This must be initialized by the user.')
sm6kCommandGetStringAndParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandGetStringAndParameters.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandGetStringAndParameters.setDescription('Command string and parameters for execution on a GET request. The GET request must be issued to the sm6kCommandDisplayStringResult, sm6kCommandIntegerResult, sm6kCommandCounterResult, or sm6kCommandGaugeResult for the command to be executed. Environment variables which are available on execution are: SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_COMMAND_TIME_OUT_VALUE={value from TimeOutValue} SM6K_COMMAND_OWNERID={string from OwnerID} SM6K_COMMAND_RESULT_TYPE=DisplayString||Integer||Counter|| Gauge SM6K_COMMAND_SET_VALUE={value from get request} SM6K_EXECUTION_REASON=Command_Get')
sm6kCommandSetStringAndParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandSetStringAndParameters.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandSetStringAndParameters.setDescription('Command string and parameters for execution on a SET request. The SET request must be issued to the sm6kCommandDisplayStringResult, sm6kCommandIntegerResult, sm6kCommandCounterResult, or sm6kCommandGaugeResult for the command to be executed. The SM6K_COMMAND_SET_VALUE contains the value from the SET request. Environment variables which are available on command execution are: SM6K_COMMAND_SET_VALUE={value from set request} SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_COMMAND_TIME_OUT_VALUE={value from TimeOutValue} SM6K_COMMAND_OWNERID={string from OwnerID} SM6K_COMMAND_RESULT_TYPE=DisplayString||Integer||Counter|| Gauge SM6K_EXECUTION_REASON=Command_Set')
sm6kCommandTimeOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandTimeOutValue.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandTimeOutValue.setDescription('Time out value in seconds for command execution. The default is three seconds. Time outs over twenty seconds cause subagent performance degradation for multiple requests which may be queued.')
sm6kCommandCountToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kCommandCountToLive.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandCountToLive.setDescription('Count to live in seconds before the command to execute is executed again. This value is a count down from the time to live value. This allows multiple GET requests for parsing of the output from the command execution. It also allows a SET operation followed by a GET request so that the GET command is NOT executed on the GET request.')
sm6kCommandTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandTimeToLive.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandTimeToLive.setDescription('Time to live value in seconds before the GET or SET command is executed based on the last time the command was run. The CountToLive variable is set to this value at command execution.')
sm6kCommandOutputResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("displaystring", 1), ("integer", 2), ("counter", 3), ("gauge", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandOutputResultIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandOutputResultIndex.setDescription('Index to point to command output result type. The results of the command execution are converted to the type set, displaystring, integer, counter, or gauge.')
sm6kCommandOutputRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandOutputRowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandOutputRowIndex.setDescription('Index for the row to be returned. New line is the delimiter for row. A value of zero returns all rows. This allows the parsing of the output from the command execution by row.')
sm6kCommandOutputColumnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandOutputColumnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandOutputColumnIndex.setDescription('Index for the column to be returned. White space is the delimiter for the column. A value of zero returns all columns. This allows the parsing of the output from the command execution by column.')
sm6kCommandDisplayStringResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandDisplayStringResult.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandDisplayStringResult.setDescription('Command output for ASCII.')
sm6kCommandIntegerResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandIntegerResult.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandIntegerResult.setDescription('Command result for integer. For each get/set request the response is saved as a signed integer. The range is -2147483648 to 2147483647.')
sm6kCommandCounterResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandCounterResult.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandCounterResult.setDescription('Command result for counter. For each get/set request the command response is saved as an unsigned integer. The range is 0 to 4294967295.')
sm6kCommandGaugeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 16), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kCommandGaugeResult.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandGaugeResult.setDescription('Command result for gauge. For each get/set request the command response is saved as an unsigned integer. The range is 0 to 4294967295.')
sm6kCommandExecutionReturnCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kCommandExecutionReturnCode.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandExecutionReturnCode.setDescription('Command return code from the command execution.')
sm6kCommandStandardError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 4, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kCommandStandardError.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kCommandStandardError.setDescription('Standard error output from the command execution.')
sm6kThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1), )
if mibBuilder.loadTexts: sm6kThresholdTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdTable.setDescription('Threshold table.')
sm6kThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kThresholdName"))
if mibBuilder.loadTexts: sm6kThresholdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdEntry.setDescription('Each entry contains objects for a particular threshold.')
sm6kThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("invalid", 2), ("enabledThresholdOnly", 3), ("enabledStoreOnly", 4), ("enabledThresholdStore", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdState.setDescription('State for the threshold operation. The store operation allows the saving of the MIB variable data in a file during the threshold polling process. The threshold operation checks the value of retrieved variables against a threshold; these operations can be combined.')
sm6kThresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdName.setDescription('This field is used as a label and as the SNMP instance identifier for variables in this row. The threshold name is appended to the row variable to uniquely identify the instance variable. For example, the instance of sm6kThresholdState (object ID .1.3.6.1.4.1.2.6.12.5.1.1.1) for a threshold entry named A is 65, with the full object identifier being .1.3.6.1.4.1.2.6.12.5.1.1.1.65. Each octet in in sm6kThresholdName is a value in dot notation for the variable.')
sm6kThresholdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdDescription.setDescription('This is a description of the threshold being performed for the benefit of administrators only; it is not used by the agent.')
sm6kThresholdOwnerID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdOwnerID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdOwnerID.setDescription('Owner ID (IP address or hostname) who generated this entry (not currently used).')
sm6kThresholdLocalRemoteMIBVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdLocalRemoteMIBVariable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdLocalRemoteMIBVariable.setDescription('This field specifies the MIB variable on which thresholding is to be performed, in dotted numeric notation, followed by an instance identifier. For example, to perform threshold checking mib-2.interfaces.ifTable.ifEntry.ifInErrors (object ID .1.3.6.1.2.1.2.2.1.14) for interface 1, this field would contain .1.3.6.1.2.1.2.2.1.14.1. To perform threshold checking on all instances of a variable, an asterisk can be used. In the previous example, to perform threshold checking on all interfaces, the object ID .1.3.6.1.2.1.2.2.1.14.* would be entered. The instance ID can also be a non-numeric string, in which case each octet in the string is converted to an object identifier. For example, to threshold on the sm6kSystemFileSystemPercentUsed variable (object ID .1.3.6.1.4.1.2.6.12.2.5.2.1.4) for the /usr directory, .1.3.6.1.4.1.2.6.12.2.5.2.1.4./usr would be placed in this field since the Systems Monitor filesystem table uses the directory name as the index. Most of the tables supported by the Systems Monitor use a name as an index, so using the character form of the name provides a simple way to specify an instance identifier. If a name followed by a colon is prepended to the object identifier, it is taken to be an alias for a group of nodes (if defined in the Systems Monitor Alias Table) or the name of a remote node. For example, entering aixnm007:1.3.6.1.2.1.2.2.1.14.* will cause threshold checking to be performed on all instances of ifInErrors on machine aixnm007. If aixnm007 is defined in the Alias Table as an alias for a group of machines, threshold checking of these variables will be done for every machine in the group.')
sm6kThresholdCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdCondition.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdCondition.setDescription("Condition operation for threshold value. Allowed conditions are: =, >, >=, <, <=, !=, !, &, |, changes, doesNotChange, exists, doesNotExist. The change condition causes a watchdog operation to be performed. That is, if the value changes between consecutive polls, the condition is satisfied. (The threshold value is ignored in this case). Similarly, the exist/doesNotExist checks for the actual existence of the MIB variable; this is useful for checking for the existence of rows in a table. The & and | conditions cause the MIB variable value to be ANDed/Ored with threshold value; if the result is nonzero, the condition is met and the trap and/or command to execute is performed. NOTE: Thresholds for Counter variables are computed by calculating the change per second in the sampled values and comparing these against the threshold value. In the case of Gauge and INTEGER variables, the actual value of the variable is checked against the threshold value. The keywords 'delta' and 'value', if placed in front of the condition (and separated from it by a space) will override this default behavior. For example, a condition of 'value >' will cause threshold checking to be performed against the actual value rather than the change in the value even if the selected MIB variable is a Counter; a condition of 'delta >' causes the change in the variable (from the previous value) to be checked against the threshold, regardless of the type of the variable.")
sm6kThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdValue.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdValue.setDescription('This field specifies the value against which retrieved variables are checked. The type of check which is done depends on the type of the retrieved variable. If the variable is numeric (INTEGER, Counter, etc.) this field is presumed to be a number, and a numeric comparison is performed using the specified threshold condition. If the retrieved variable is a DisplayString (OCTET STRING) and both the retrieved variable and this field can be converted to a floating point number, a floating-point comparison is done; otherwise a string comparison is done.')
sm6kThresholdPollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdPollTime.setDescription('Threshold polling time. Polling units are in minutes.')
sm6kThresholdLastValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdLastValue.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdLastValue.setDescription('Last threshold value retrieved, in human-readable form. If more than one numeric value was retrieved for the threshold (because an alias was used or because multiple instances were retrieved), this field contains the average of all the retrieved values.')
sm6kThresholdIntegerDataMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdIntegerDataMax.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdIntegerDataMax.setDescription('Maximum data value collected for the threshold being monitored, for variables which are INTEGERs.')
sm6kThresholdIntegerDataMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdIntegerDataMin.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdIntegerDataMin.setDescription('Integer minimum data value collected for the threshold being monitored.')
sm6kThresholdIntegerDataAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdIntegerDataAvg.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdIntegerDataAvg.setDescription('Integer average data value collected for the threshold being calculated.')
sm6kThresholdCounterGaugeDataMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdCounterGaugeDataMax.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdCounterGaugeDataMax.setDescription('Counter/gauge maximum data value collected for the threshold being monitored.')
sm6kThresholdCounterGaugeDataMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdCounterGaugeDataMin.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdCounterGaugeDataMin.setDescription('Counter/gauge minimum data value collected for the threshold being monitored.')
sm6kThresholdCounterGaugeDataAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdCounterGaugeDataAvg.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdCounterGaugeDataAvg.setDescription('Counter/gauge average data value collected for the threshold being calculated.')
sm6kThresholdDataSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdDataSamples.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdDataSamples.setDescription('Numbers of data samples collected for the integer, counter, or gauge maximum, minimum, and average threshold data collected. A SET of any value to this variable causes the maximum, minimum, and average to clear.')
sm6kThresholdTrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdTrapDescription.setDescription('A human-readable description for the trap to be generated; this description is sent in the trap for operator use. The environment variables listed below, pre-appended with a $ sign, are allowed in the trap description field. SM6K_THRESHOLD_CONDITION={condition in the threshold} SM6K_THRESHOLD_VALUE={threshold value} SM6K_THRESHOLD_ARMSTATE={-1 for arm, 0 for re-arm} SM6K_THRESHOLD_NODE={node on which threshold condition was met} SM6K_THRESHOLD_VAR_OID={Object ID of variable for the threshold} SM6K_THRESHOLD_VAR_TYPE={Integer|Counter|Gauge} SM6K_THRESHOLD_VAR_VALUE={value of variable for the threshold} SM6K_THRESHOLD_VAR_OLDVALUE={previous value of variable}')
sm6kThresholdArmEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdArmEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdArmEnterprise.setDescription('This field specifies the SNMP enterprise id for the trap which is to be sent when a threshold condition is met. If this is not set, a default will be used.')
sm6kThresholdSpecificTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdSpecificTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdSpecificTrap.setDescription('This field specifies a specific trap number to be sent when a threshold condition is met. If this value is zero, no trap will be sent.')
sm6kThresholdCommandToExecute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdCommandToExecute.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdCommandToExecute.setDescription('Command to execute when threshold is met. A value of blank means no command is to be executed on a threshold met condition. Environment variables which are available on execution are: SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_EXECUTION_REASON=Threshold SM6K_THRESHOLD_CONDITION={condition in the threshold} SM6K_THRESHOLD_VALUE={threshold value} SM6K_THRESHOLD_ARMSTATE={-1 for arm, 0 for re-arm} SM6K_THRESHOLD_NODE={node on which threshold condition was met} SM6K_THRESHOLD_VAR_OID={Object ID of variable for the threshold} SM6K_THRESHOLD_VAR_TYPE={Integer|Counter|Gauge} SM6K_THRESHOLD_VAR_VALUE={value of variable for the threshold} SM6K_THRESHOLD_VAR_OLDVALUE={previous value of variable}')
sm6kThresholdReArmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdReArmCondition.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdReArmCondition.setDescription("Condition operation for the rearm threshold value. Allowed conditions are the same as for the threshold value. Checking against the rearm condition is started when a threshold is reached and is stopped when the rearm condition is met. Once the rearm condition is met, the threshold condition operation is restarted. NOTE: Thresholds for Counter variables are computed by calculating the change per second in the sampled values and comparing these against the threshold value. In the case of Gauge and INTEGER variables, the actual value of the variable is checked against the threshold value. The keywords 'delta' and 'value', if placed in front of the condition (and separated from it by a space) will override this default behavior. For example, a condition of 'value >' will cause threshold checking to be performed against the actual value rather than the change in the value even if the selected MIB variable is a Counter; a condition of 'delta >' causes the change in the variable (from the previous value) to be checked against the threshold, regardless of the type of the variable.")
sm6kThresholdReArmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdReArmValue.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdReArmValue.setDescription('This field specifies the value against which retrieved variables are checked. The type of check which is done depends on the type of the retrieved variable. If the variable is numeric (INTEGER, Counter, etc.) this field is presumed to be a number, and a numeric comparison is performed using the specified threshold condition. If the retrieved variable is a DisplayString (OCTET STRING) and both the retrieved variable and this field can be converted to a floating point number, a floating-point comparison is done; otherwise a string comparison is done.')
sm6kThresholdReArmTrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdReArmTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdReArmTrapDescription.setDescription('Trap description for the generated rearm trap. The environment variables listed below, pre-appended with a $ sign, are allowed in the trap description field. SM6K_THRESHOLD_CONDITION={condition in the threshold} SM6K_THRESHOLD_VALUE={threshold value} SM6K_THRESHOLD_ARMSTATE={-1 for arm, 0 for re-arm} SM6K_THRESHOLD_NODE={node on which threshold condition was met} SM6K_THRESHOLD_VAR_OID={Object ID of variable for the threshold} SM6K_THRESHOLD_VAR_TYPE={Integer|Counter|Gauge} SM6K_THRESHOLD_VAR_VALUE={value of variable for the threshold} SM6K_THRESHOLD_VAR_OLDVALUE={previous value of variable}')
sm6kThresholdReArmEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdReArmEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdReArmEnterprise.setDescription('This field specifies the SNMP enterprise id for the trap which is to be sent when a rearm condition is met. If this is not set, a default will be used.')
sm6kThresholdReArmSpecificTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdReArmSpecificTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdReArmSpecificTrap.setDescription('This field specifies a specific trap number to be sent when a rearm condition is met. If this value is zero, no trap will be sent.')
sm6kThresholdReArmCommandToExecute = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdReArmCommandToExecute.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdReArmCommandToExecute.setDescription('Command to execute when the rearm threshold is met. A value of blank means no command will be executed on a rearm threshold met condition. Environment variables which are available on execution are: SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_EXECUTION_REASON=Threshold SM6K_THRESHOLD_CONDITION={condition in the threshold} SM6K_THRESHOLD_VALUE={threshold value} SM6K_THRESHOLD_ARMSTATE={-1 for arm, 0 for re-arm} SM6K_THRESHOLD_NODE={node on which threshold condition was met} SM6K_THRESHOLD_VAR_OID={Object ID of variable for the threshold} SM6K_THRESHOLD_VAR_TYPE={integer|counter|gauge} SM6K_THRESHOLD_VAR_VALUE={value of variable for the threshold} SM6K_THRESHOLD_VAR_OLDVALUE={previous value of variable}')
sm6kThresholdLastChangedSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdLastChangedSession.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdLastChangedSession.setDescription('This field contains the name of the last node for which a threshold arm/rearm condition was met.')
sm6kThresholdStandardError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdStandardError.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdStandardError.setDescription('This field contains informational and error messages for this threshold entry.')
sm6kThresholdLastResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kThresholdLastResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdLastResponseTime.setDescription('This field contains the last time a (valid or invalid) response was received to a poll request.')
sm6kThresholdResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdResponseCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdResponseCount.setDescription('Number of responses received to date.')
sm6kThresholdTimeoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdTimeoutCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdTimeoutCount.setDescription('Number of timeout conditions, indicating no response or an overrun condition (polling speed faster than the response time from the node(s) being queried).')
sm6kThresholdNoValueCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kThresholdNoValueCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kThresholdNoValueCount.setDescription('Number of responses received containing no values. These responses may be caused by an invalid community name, by a remote SNMP subagent being down, or by a thresholding on a variable for which no instances exist.')
sm6kAnalysisTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1), )
if mibBuilder.loadTexts: sm6kAnalysisTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisTable.setDescription('Analysis table.')
sm6kAnalysisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kAnalysisName"))
if mibBuilder.loadTexts: sm6kAnalysisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisEntry.setDescription('Each entry contains objects for a particular analysis.')
sm6kAnalysisState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("invalid", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAnalysisState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisState.setDescription('State for the analysis operation: disabled (1), invalid (2), or enabled (3).')
sm6kAnalysisName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAnalysisName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisName.setDescription('Analysis name for use as a label and row instance. The selection of a row in the table uses the analysis name as the instance for row selection. The analysis name is appended to the row variable to uniquely identify the instance variable. For example, the instance of sm6kAnalysisState is sm6kAnalysisState.sm6kAnalysisName, where each octet in sm6kAnalysisName is a value in dot notation for the variable.')
sm6kAnalysisDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAnalysisDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisDescription.setDescription('Analysis description for the analysis operation.')
sm6kAnalysisOwnerID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAnalysisOwnerID.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisOwnerID.setDescription('Owner ID (IP address or hostname) who generated the command entry. This must be initialized by the user.')
sm6kAnalysisLocalRemoteMIBVariableExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAnalysisLocalRemoteMIBVariableExpression.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisLocalRemoteMIBVariableExpression.setDescription('Analysis MIB variable expression. The expression can be any expression comprised of local or remote node MIB variables with the following high to low precedence and left to right associativity of operators: () : grouping - : unary minus * : multiplication, / : division, % : remainder + : addition, - : subtraction << : bitwise left shift, >> : bitwise right shift & : bitwise AND ^ : bitwise exclusive OR | : bitwise inclusive OR Expression evaluation/operators are based on standard c program execution. Built-in functions available within expressions include: @sum(MIB variable, MIB variable, ...) - returns the sum of all values. @avg(MIB variable, MIB variable, ...) - returns the average of all values. @min(MIB variable, MIB variable, ...) - returns the minimum of all values. @max(MIB variable, MIB variable, ...) - returns the maximum of all values. @diff(MIB variable expression, MIB variable expression) - returns the positive difference in the two expressions. @abs(MIB variable expression) - returns the positive value of the expression. @rand() - returns a random number between 0 and 42949667295. To use remote MIB variables, the alias name, host name, or IP address can be pre-appended to the MIB variable binding. Also, the object ID can accept a wildcard value (*). When MIB variables resolve to multiple values or nodes outside of the built-in functions, all resolved values are averaged before use in the expression. For example, routers:.1.2.3.4.5.0/100, would result in the averaging of all values returned for this aliased MIB variable before the division by 100 operation is performed.')
sm6kAnalysisPollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAnalysisPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisPollTime.setDescription('Analysis polling time. Polling units are decimal values appended by the unit: d - day, h - hour, m - minute, s - second, u - millisecond. If no unit is appended, the value is minutes. Multiple values/units are allowed (i.e. 1h45m = 1 hour, 45 minutes). The default is 1 minute. This polling value is used only by the MIB variable polling center for retrieval of the local or remote MIB variable for caching. This is required so that the MIB variable values are cached and not requested with GET requests when the expression is evaluated.')
sm6kAnalysisResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("integer", 2), ("counter", 3), ("gauge", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAnalysisResultIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisResultIndex.setDescription('Index to point to command output result type. The index defines how the expression is evaluated, either using signed arithmetic for integer or unsigned arithmetic for counter and gauge. The result for counter wraps on overflow or underflow; the result for gauge latches at 0 for underflow or 4294967295 for overflow.')
sm6kAnalysisIntegerResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kAnalysisIntegerResult.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisIntegerResult.setDescription('Integer result based on signed arithmetic.')
sm6kAnalysisCounterResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kAnalysisCounterResult.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisCounterResult.setDescription('Counter result based on unsigned arithmetic; this wraps at the maximum or minimum value.')
sm6kAnalysisGaugeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kAnalysisGaugeResult.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisGaugeResult.setDescription('Gauge result based on unsigned arithmetic; this latches at the maximum or minimum value.')
sm6kAnalysisDisplayStringResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kAnalysisDisplayStringResult.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisDisplayStringResult.setDescription('Display result as a displayable string. This string is generated based on the ResultIndex for the type of the resultant expression: integer, counter, or gauge.')
sm6kAnalysisReturnCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kAnalysisReturnCode.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisReturnCode.setDescription('Return code from the evaluation of the expression.')
sm6kAnalysisStandardError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 6, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kAnalysisStandardError.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAnalysisStandardError.setDescription('Standard error output from the evaluation of the expression.')
sm6kFilterDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sendTraps", 1), ("blockTraps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterDefaultAction.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterDefaultAction.setDescription("Global default as to whether or not the traps received are to be sent or blocked. If the trap matches a filter entry, the action specified is taken. If the trap doesn't match a filter entry and sendTraps is specified, the trap destinations from the trap destination table are used.")
sm6kFilterTrapReception = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterTrapReception.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterTrapReception.setDescription('Indicator of whether or not the AIX Systems Monitor/6000 subagent should connect to the snmp trap socket. If enabled (1), the traps will be read from the socket. If disabled (2), only traps generated by AIX Systems Monitor/6000 will be filtered by AIX Systems Monitor/6000 (ie. thresholding traps). Note: This field cannot be set to enabled if another process on the host is already receiving traps (ie. the manager). Conversely, another process on the host (ie. the manager) will not be able to receive traps if this field is set to enabled. Therefore, if a manager is running on the same host as the AIX Systems Monitor/6000, this field should be set to disabled.')
sm6kFilterTotalTrapsReceived = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kFilterTotalTrapsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterTotalTrapsReceived.setDescription('Current count of the number of traps that have been received by the AIX Systems Monitor/6000 subagent. The count is reset to zero whenever the sm6kFilterTripReception MIB variable is set to enabled (from a disabled state).')
sm6kFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4), )
if mibBuilder.loadTexts: sm6kFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterTable.setDescription('Entries defining a particular filter. Each entry may be thought of as a single filter. Each filter is evaluated against each incoming trap. When the filter criteria matches the trap, the corresponding filter actions are taken. The table is indexed by the sm6kFilterName field.')
sm6kFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kFilterName"))
if mibBuilder.loadTexts: sm6kFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterEntry.setDescription('Each entry contains the components for a particular filter.')
sm6kFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("invalid", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterState.setDescription('State for the filter rule. When the state is set to invalid, the filter is deleted. When the filter entry is set to disabled, the filter is dormant. When the filter rule is enabled, it may participate in the filter rule base. The filter rule is participating if the sm6kFilterParticipationState is set to active.')
sm6kFilterParticipationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notEnabled", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kFilterParticipationState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterParticipationState.setDescription('This field indicates whether or not the rule is participating in the filter rule base. When the filter rule is active, it is participating. When the filter rule is inactive, it is not participating in the filter rule base, but will be participating when the activation time arrives. The participation state can be inactive only if activation/deactivation days are specified. Otherwise, the participation state is activated when the sm6kFilterState field is set to enabled. If this field is set to notEnabled, the sm6kFilterState field is not set to enabled.')
sm6kFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterName.setDescription('This field contains the name for a particular filter. The instance identifier associated with every field in the filter entry is derived from the name (dot separated ASCII codes). Therefore, this name must be unique among all other filter names.')
sm6kFilterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterDescription.setDescription('Description of the filter. This field should contain a general description of what the filter accomplishes. A user should be able to read this information and know what filtering is being done as well as why it is being done.')
sm6kFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sendTraps", 1), ("blockTraps", 2), ("throttleTraps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterAction.setDescription('This field is used to determine whether or not the matching trap is forwarded on to a manager station. If sendTraps is specified, then the trap destinations specified in the filter are included in the list of destinations to which the trap is forwarded. If blockTraps is specified, then the trap will not be forwarded unless another filter is matched that specifies the trap is to be sent. When this field is set to ThrottleTraps, the throttle expression needs to be evaluated in order to decide whether to send or block the received trap.')
sm6kFilterEntryEnterpriseExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterEntryEnterpriseExpression.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterEntryEnterpriseExpression.setDescription('This field is used to match the rule against the enterpriseID contained in the received trap. The entry may be an alias name (from the sm6kAlias table), an enterpriseID in dot notation, or an enterpriseID with a wildcard value (terminated by an asterisk). The enterpriseID in dot notation should be fully qualified. An enterpriseID with a wildcard value matches any enterpriseID with the same partial enterpriseID.')
sm6kFilterAgentAddrExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterAgentAddrExpression.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterAgentAddrExpression.setDescription("This field is used to match against the address of the agent that generated the trap. The agent address expression is a comma separated list of: 1) an sm6kAliasName (from the sm6kAlias table) 2) a resolvable hostname 3) an ipAddress expression. If the agent address expression contains an sm6kAliasName or hostname, the addresses to check the trap against are determined each time a trap is received. An ipAddress expression contains four dot separated sub-expressions that can be either: 1) a decimal number between 0 and 255 2) an inclusive range of numbers between 0 and 255 specified by [#-#] (ie. [0-127]) 3) an asterisk (which is simply interpreted as [0-255]). An example ipAddress expression is '9.67.[128-130].*'.")
sm6kFilterGenericExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterGenericExpression.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterGenericExpression.setDescription('This field is used to match against the generic trap number contained in the received trap. This field allows a comma separated list of generic trap numbers. If specific trap numbers are to be checked, a 6 (ie. enterprise-specific trap) must be encoded in the generic expression. The generic traps are: 0 - Cold Start 1 - Warm Start 2 - Link Down 3 - Link Up 4 - Authentication Failure 5 - EGP Neighbor Loss 6 - Enterprise Specific')
sm6kFilterSpecificExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterSpecificExpression.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterSpecificExpression.setDescription("This field is used to match against the specific trap number contained in the received trap. This field allows a comma separated list of specific trap numbers. A range of specific trap numbers may be specified by inserting a ':' between two specific trap numbers. This field will only be checked if a 6 (ie. enterprise-specific trap) is contained in the generic trap expression.")
sm6kFilterVariableExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterVariableExpression.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterVariableExpression.setDescription('Not implemented')
sm6kFilterTotalTrapsMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kFilterTotalTrapsMatched.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterTotalTrapsMatched.setDescription("This field contains the number of traps that have matched this filter. This count is reset to zero whenever the filter entry's state is set to enabled (from the disabled state).")
sm6kFilterActivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterActivationTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterActivationTime.setDescription('This field specifies the time to activate the filter (ie. change the participation state from inactive to active). The format should be HH:MM where HH represents the hour (integer between 0 and 23) and MM represents the minute (integer between 0 and 59) to activate the filter. A value all blanks will be interpreted as 00:00.')
sm6kFilterActivationDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterActivationDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterActivationDayOfWeek.setDescription("This field specifies the days of the week to activate the filter at the time specified in the ActivationTime field (ie. change the participation state from inactive to active). The day of the week may be one of three literals: weekdays - Activates filter entry on MTWThF all - Activates filter entry every day SuMTWThFS Alternatively, the days of the week may be specified as a list of numbers between 0 and 6 (Sunday = 0, Monday = 1, ..., Saturday = 6). The expression '1,3,5' would activate the filter entry at the specified time on MWF.")
sm6kFilterDeactivationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterDeactivationTime.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterDeactivationTime.setDescription('This field specifies the time to deactivate the filter (ie. change the participation state from active to inactive). The format should be HH:MM where HH represents the hour (integer between 0 and 23) and MM represents the minute (integer between 0 and 59) to deactivate the filter. A value all blanks will be interpreted as 00:00.')
sm6kFilterDeactivationDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterDeactivationDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterDeactivationDayOfWeek.setDescription("This field specifies the days of the week to deactivate the filter at the time specified in the DeactivationTime field (ie. change the participation state from active to inactive). The day of the week may be one of three literals: weekdays - Dectivates filter entry on MTWThF all - Deactivates filter entry every day SuMTWThFS Alternatively, the days of the week may be specified as a list of numbers between 0 and 6 (Sunday = 0, Monday = 1, ..., Saturday = 6). The expression '1,3,5' would deactivate the filter entry at the specified time on MWF.")
sm6kFilterTrapDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterTrapDestinations.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterTrapDestinations.setDescription('This field specifies the destinations for any traps that match the filter criteria specified. This field allows ip addresses, alias names (from the sm6kAlias table) or resolvable hostnames separated by commas. If this field is left blank, the trap will be sent to the trap destinations specified in the sm6kTrapDestination table.')
sm6kFilterMatchedCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterMatchedCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterMatchedCommand.setDescription("This field specifies the command to be executed when a received trap matches the filter. A set of environment variables are defined that contain information from the received trap. They may be used by the command that is executed. The following environment variables pertain to the AIX Systems Monitor/6000 filter: SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_EXECUTION_REASON=Filter_Matched|Filter_Armed| Filter_Disarmed The following environment variables pertain to the received trap: SM6K_TRAP_ENTERPRISE={enterprise ID from the trap} SM6K_TRAP_AGENT_ADDRESS={IP address of the sending agent} SM6K_TRAP_GENERIC_NUM={generic trap number of the trap} SM6K_TRAP_SPECIFIC_NUM={specific trap number of the trap} SM6K_TRAP_TIME_TICKS={time ticks since the sending agent was started} SM6K_NUM_TRAP_VARS={number of MIB variables in the trap} In addition, for each variable flowing in the trap: SM6K_TRAP_VAR_OBJ_ID#={Object ID for MIB variable in trap} SM6K_TRAP_VAR_TYPE#=INTEGER|Counter|Gauge|TimeTicks| IpAddress|OCTET_STRING|Opaque| OBJECT_IDENTIFIER|NULL|Unknown SM6K_TRAP_VAR_VALUE#={value of the MIB object} where the # is replaced by the trap variable's positional number in the trap (starting at 1) For more information see the accompanying documentation.")
sm6kFilterMatchedTrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterMatchedTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterMatchedTrapDescription.setDescription('Not implemented')
sm6kFilterMatchedTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterMatchedTrapEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterMatchedTrapEnterprise.setDescription('Not implemented')
sm6kFilterMatchedSpecificTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterMatchedSpecificTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterMatchedSpecificTrap.setDescription('Not implemented')
sm6kFilterThrottleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sendFirstN", 1), ("sendAfterN", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleType.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleType.setDescription('This field is used to indicate whether the throttle sends the first N matching traps (sendFirstN) or sends after receiving N matching traps (sendAfterN). The value of N is specified by the sm6kFilterThrottleArmTrapCount.')
sm6kFilterThrottleArmTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleArmTrapCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleArmTrapCount.setDescription('This field specifies the number of matching traps to receive before throttling is armed. This is the N referred to in the FilterThrottleType field.')
sm6kFilterThrottleArmedCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleArmedCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleArmedCommand.setDescription("This field specifies the command to execute when the ThrottleArmTrapCount number of traps have been received (ie. when the throttle is ARMED). A set of environment variables are defined that contain information from the received trap. They may be used by the command that is executed. The following environment variables pertain to the AIX Systems Monitor/6000 filter: SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_EXECUTION_REASON=Filter_Armed SM6K_THROTTLE_ARM_COUNT={value of ThrottleArmTrapCount} SM6K_THROTTLE_DISARM_COUNT={value of ThrottleDisarmTrapCount} SM6K_THROTTLE_DISARM_TIMER={value of ThrottleDisarmTimer} The following environment variables pertain to the received trap: SM6K_TRAP_ENTERPRISE={enterprise ID from the trap} SM6K_TRAP_AGENT_ADDRESS={IP address of the sending agent} SM6K_TRAP_GENERIC_NUM={generic trap number of the trap} SM6K_TRAP_SPECIFIC_NUM={specific trap number of the trap} SM6K_TRAP_TIME_TICKS={time ticks since the sending agent was started} SM6K_NUM_TRAP_VARS={number of MIB variables in the trap} In addition, for each variable flowing in the trap: SM6K_TRAP_VAR_OBJ_ID#={Object ID for MIB variable in trap} SM6K_TRAP_VAR_TYPE#=INTEGER|Counter|Gauge|TimeTicks| IpAddress|OCTET_STRING|Opaque| OBJECT_IDENTIFIER|NULL|Unknown SM6K_TRAP_VAR_VALUE#={value of the MIB object} where the # is replaced by the trap variable's positional number in the trap (starting at 1).")
sm6kFilterThrottleArmedTrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleArmedTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleArmedTrapDescription.setDescription('Not implemented')
sm6kFilterThrottleArmedTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleArmedTrapEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleArmedTrapEnterprise.setDescription('Not implemented')
sm6kFilterThrottleArmedSpecificTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleArmedSpecificTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleArmedSpecificTrap.setDescription('Not implemented')
sm6kFilterThrottleDisarmTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmTimer.setDescription('This field specifies the time period to elapse before the throttle is disarmed (reset). It is important to note that if sm6kThrottleDisarmTrapCount is set to a value greater than 0, the amount of time specified may not elapse before the throttle is disarmed. This time period is from the time the throttle is started (ie. from the time the first matching trap is received), not from the time the throttle is armed. Therefore, it is possible that the throttle will not be armed before the throttle is disarmed (reset). In this case, the disarm command is NOT executed.')
sm6kFilterThrottleDisarmTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmTrapCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmTrapCount.setDescription('This field specifies the delta number of traps to receive before the throttle is disarmed. This field value is a delta and only refers to the number of matching traps received AFTER the throttle has been armed. It is important to note that if the sm6kThrottleDisarmTimer is set, the number of matching traps specified may not occur before the throttle is disarmed.')
sm6kFilterThrottleDisarmedCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmedCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmedCommand.setDescription("This field specifies the command to execute when the throttle is DISARMED. The throttle is disarmed when either 1) the sm6kThrottleDisarmTrapCount matching traps have occurred after the throttle was armed, or 2) the sm6kFilterThrottleDisarmTimer has expired. NOTE: If the above mentioned timer expires and the throttle is NOT currently ARMED, the throttle is reset, but this disarm command is NOT executed. So, the disarm command is only executed if the throttle is armed before being disarmed. A set of environment variables are defined that contain information from the received trap. They may be used by the command that is executed. The following environment variables pertain to the AIX Systems Monitor/6000 filter: SM6K_HOSTNAME={hostname running subagent} SM6K_DOMAIN_NAME={fully qualified hostname} SM6K_HOST_ADDRESS={ip address} SM6K_INSTANCE_NAME={instance string of row} SM6K_INSTANCE_ID={instance ASCII octet value of row} SM6K_EXECUTION_REASON=Filter_Disarmed SM6K_THROTTLE_ARM_COUNT={value of ThrottleArmTrapCount} SM6K_THROTTLE_DISARM_COUNT={value of ThrottleDisarmTrapCount} SM6K_THROTTLE_DISARM_TIMER={value of ThrottleDisarmTimer} The following environment variables pertain to the received trap: SM6K_TRAP_ENTERPRISE={enterprise ID from the trap} SM6K_TRAP_AGENT_ADDRESS={IP address of the sending agent} SM6K_TRAP_GENERIC_NUM={generic trap number of the trap} SM6K_TRAP_SPECIFIC_NUM={specific trap number of the trap} SM6K_TRAP_TIME_TICKS={time ticks since the sending agent was started} SM6K_NUM_TRAP_VARS={number of MIB variables in the trap} In addition, for each variable flowing in the trap: SM6K_TRAP_VAR_OBJ_ID#={Object ID for MIB variable in trap} SM6K_TRAP_VAR_TYPE#=INTEGER|Counter|Gauge|TimeTicks| IpAddress|OCTET_STRING|Opaque| OBJECT_IDENTIFIER|NULL|Unknown SM6K_TRAP_VAR_VALUE#={value of the MIB object} where the # is replaced by the trap variable's positional number in the trap (starting at 1).")
sm6kFilterThrottleDisarmedTrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmedTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmedTrapDescription.setDescription('Not implemented')
sm6kFilterThrottleDisarmedTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmedTrapEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmedTrapEnterprise.setDescription('Not implemented')
sm6kFilterThrottleDisarmedSpecificTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmedSpecificTrap.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleDisarmedSpecificTrap.setDescription('Not implemented')
sm6kFilterThrottleState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disarmed", 1), ("armed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kFilterThrottleState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleState.setDescription('This field contains the current state of the throttle. The current state can be either disarmed (1) or armed (2). This field is for informational purposes only and cannot be set.')
sm6kFilterThrottleTimeStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kFilterThrottleTimeStarted.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleTimeStarted.setDescription('This filed contains the time when the throttle was started. This field will contain either the time the first matching trap was received or the time when the throttle was disarmed due to the expiration of the disarm timer.')
sm6kFilterThrottleTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 7, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kFilterThrottleTrapCount.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kFilterThrottleTrapCount.setDescription('This field contains the current count of traps received since the throttle was disarmed.')
sm6kAliasTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 8, 1), )
if mibBuilder.loadTexts: sm6kAliasTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAliasTable.setDescription('Alias table.')
sm6kAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 8, 1, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kAliasName"))
if mibBuilder.loadTexts: sm6kAliasEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAliasEntry.setDescription('Each entry contains objects for a particular alias.')
sm6kAliasState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("enabled", 3), ("invalid", 2), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAliasState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAliasState.setDescription('State of the alias entry: disabled (1), invalid (2), or enabled (3).')
sm6kAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 8, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAliasName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAliasName.setDescription('Name that can be used in the threshold and analysis MIB variable definitions to allow multiple remote node retrieval of the MIB variable value.')
sm6kAliasList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 8, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAliasList.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAliasList.setDescription('List of alias names, host names, or IP addresses separated by white space or commas.')
sm6kAliasResolvedList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sm6kAliasResolvedList.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAliasResolvedList.setDescription('Expanded alias.')
sm6kTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 9, 1), )
if mibBuilder.loadTexts: sm6kTrapDestinationTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kTrapDestinationTable.setDescription('Trap destination table. This table is used to define the trap destinations for traps to be forwarded by the filtering piece of the subagent. It does not replace or update filtering entries in the snmpd.conf file. If filtering is being used, the snmpd.conf file should be setup to send traps to loopback.')
sm6kTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 9, 1, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kTrapDestinationName"))
if mibBuilder.loadTexts: sm6kTrapDestinationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kTrapDestinationEntry.setDescription('Each entry contains objects for a particular trap destination.')
sm6kTrapDestinationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("invalid", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kTrapDestinationState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kTrapDestinationState.setDescription('State for the trap destination entry. Enabling this trap destination causes the traps being filtered to use this destination as a default destination (ie. the filtering entry may override where traps are to be sent).')
sm6kTrapDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 9, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kTrapDestinationName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kTrapDestinationName.setDescription('This field is simply used as the name of this entry.')
sm6kTrapDestinationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 9, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kTrapDestinationHost.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kTrapDestinationHost.setDescription('This field specifies the hosts to which filtered traps are forwarded. It may be a list containing alias names (contained in the sm6kAlias table), resolvable hostnames, or IP Addresses. Each name in the list should be separated by a comma or white space.')
sm6kTrapDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 9, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kTrapDestinationMask.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kTrapDestinationMask.setDescription('This mask is used as a global filtering mechanism. The mask is used to indicate which traps are to be sent to the Destination Host. Bits 0 through 6, when read from LEFT to RIGHT, correspond to generic trap numbers 0 through 6. The generic traps are as follows: 0 - Cold Start 1 - Warm Start 2 - Link Down 3 - Link Up 4 - Authentication Failure 5 - EGP Neighbor Loss 6 - Enterprise Specific This field should be set to 254 to send all traps that the filter passes to the trap destination table. To send only linkDown (2) and linkUp (3) traps, the mask could be set to 48 (ie. 0011 0000).')
sm6kAdministrationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 12, 10, 1), )
if mibBuilder.loadTexts: sm6kAdministrationTable.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAdministrationTable.setDescription('Table of user information.')
sm6kAdministrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 12, 10, 1, 1), ).setIndexNames((0, "SYSMON6K-MIB", "sm6kAdministrationFieldName"))
if mibBuilder.loadTexts: sm6kAdministrationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAdministrationEntry.setDescription('Each entry contains objects for a particular administrative community.')
sm6kAdministrationFieldState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("outDated", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAdministrationFieldState.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAdministrationFieldState.setDescription('Indication that administrative information is either valid (1), invalid (2), or outdated (3). Note: Setting state to invalid will delete the row.')
sm6kAdministrationFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAdministrationFieldName.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAdministrationFieldName.setDescription('Name of administrative information. There should be a corporate-wide policy on naming information in order to avoid possible naming conflicts.')
sm6kAdministrationFieldOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 10, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAdministrationFieldOwner.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAdministrationFieldOwner.setDescription('Owner of this piece of administrative information.')
sm6kAdministrationFieldDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 10, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAdministrationFieldDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAdministrationFieldDescription.setDescription('Description of the administrative information.')
sm6kAdministrationFieldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 12, 10, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sm6kAdministrationFieldValue.setStatus('mandatory')
if mibBuilder.loadTexts: sm6kAdministrationFieldValue.setDescription('The actual administrative information.')
mibBuilder.exportSymbols("SYSMON6K-MIB", sm6kFilterTable=sm6kFilterTable, sm6kSystemDeviceTokenRingBeaconTxType=sm6kSystemDeviceTokenRingBeaconTxType, sm6kProgramDataCollectionNumFiles=sm6kProgramDataCollectionNumFiles, sm6kSystemUtilizationIostatTable=sm6kSystemUtilizationIostatTable, sm6kAnalysisIntegerResult=sm6kAnalysisIntegerResult, sm6kSystemUtilizationKernelSwapQueueMinimum=sm6kSystemUtilizationKernelSwapQueueMinimum, sm6kSystemDeviceX25RegistrationConfirmPTx=sm6kSystemDeviceX25RegistrationConfirmPTx, sm6kThresholdCounterGaugeDataMin=sm6kThresholdCounterGaugeDataMin, sm6kSystemMiscellaneous=sm6kSystemMiscellaneous, sm6kSystemUtilizationCPUWaitMaximum=sm6kSystemUtilizationCPUWaitMaximum, sm6kSystemPagingStatisticsName=sm6kSystemPagingStatisticsName, sm6kSystemDeviceTokenRingIntrLost=sm6kSystemDeviceTokenRingIntrLost, sm6kSystemDeviceTokenRingRxFrameLcnt=sm6kSystemDeviceTokenRingRxFrameLcnt, sm6kSystemDeviceTokenRingLastPollAddr=sm6kSystemDeviceTokenRingLastPollAddr, sm6kCommand=sm6kCommand, sm6kSystemUtilizationKernelMessagesMinimum=sm6kSystemUtilizationKernelMessagesMinimum, sm6kSystemUtilizationCPUUser=sm6kSystemUtilizationCPUUser, sm6kThresholdReArmCondition=sm6kThresholdReArmCondition, sm6kSystemDeviceEthernetAdptRecEol=sm6kSystemDeviceEthernetAdptRecEol, sm6kSystemDeviceX25RnrPRx=sm6kSystemDeviceX25RnrPRx, sm6kAnalysis=sm6kAnalysis, sm6kSystemUtilizationKernelMessagesMaximum=sm6kSystemUtilizationKernelMessagesMaximum, sm6kSystemDiskIOHistory=sm6kSystemDiskIOHistory, sm6kFilterState=sm6kFilterState, sm6kSystemDeviceTokenRingTxErrCnt=sm6kSystemDeviceTokenRingTxErrCnt, sm6kCommandState=sm6kCommandState, sm6kSystemDeviceX25ResetIndicationPRx=sm6kSystemDeviceX25ResetIndicationPRx, sm6kSystemMaxUserProcesses=sm6kSystemMaxUserProcesses, sm6kSystemDeviceX25BadLengthFRx=sm6kSystemDeviceX25BadLengthFRx, sm6kSystemProcessDataResidentSetSize=sm6kSystemProcessDataResidentSetSize, sm6kThresholdLastChangedSession=sm6kThresholdLastChangedSession, sm6kProgramLogFileName=sm6kProgramLogFileName, sm6kSystemDeviceEthernet=sm6kSystemDeviceEthernet, sm6kSystemDeviceEthernetStartRxDmaTimeouts=sm6kSystemDeviceEthernetStartRxDmaTimeouts, sm6kSystemDeviceEthernetStaQueOverflow=sm6kSystemDeviceEthernetStaQueOverflow, sm6kSystemDeviceTokenRingClear=sm6kSystemDeviceTokenRingClear, sm6kSystemDeviceEthernetUnderrun=sm6kSystemDeviceEthernetUnderrun, sm6kSystemFileSystemFileSystem=sm6kSystemFileSystemFileSystem, sm6kSystemDeviceEthernetTxTimeouts=sm6kSystemDeviceEthernetTxTimeouts, sm6kSystemUtilizationCPUSystemMinimum=sm6kSystemUtilizationCPUSystemMinimum, sm6kSystemUtilizationKernelRawTTYOutMinimum=sm6kSystemUtilizationKernelRawTTYOutMinimum, sm6kNetworkSessionMaximumResponseTime=sm6kNetworkSessionMaximumResponseTime, sm6kProgramLogMaxFileSize=sm6kProgramLogMaxFileSize, sm6kAnalysisOwnerID=sm6kAnalysisOwnerID, sm6kSystemDeviceTokenRingBroadwrap=sm6kSystemDeviceTokenRingBroadwrap, sm6kSystemPagingSpaceName=sm6kSystemPagingSpaceName, sm6kTrapDestinationTable=sm6kTrapDestinationTable, sm6kResourceUsageMsgsnd=sm6kResourceUsageMsgsnd, sm6kNetworkInformation=sm6kNetworkInformation, sm6kSystemSubSystems=sm6kSystemSubSystems, sm6kSystemDeviceListAttributes=sm6kSystemDeviceListAttributes, sm6kSystemDeviceTokenRingPktAccCnt=sm6kSystemDeviceTokenRingPktAccCnt, sm6kSystemUtilizationKernelBytesWritten=sm6kSystemUtilizationKernelBytesWritten, sm6kThresholdOwnerID=sm6kThresholdOwnerID, sm6kSystemDeviceX25RouteCalledSubaddress=sm6kSystemDeviceX25RouteCalledSubaddress, sm6kSystemDeviceEthernetTooShort=sm6kSystemDeviceEthernetTooShort, sm6kSystemProcessSystemTime=sm6kSystemProcessSystemTime, sm6kSystemUtilizationKernelExecs=sm6kSystemUtilizationKernelExecs, sm6kSystemUtilizationKernelSemaphoresMaximum=sm6kSystemUtilizationKernelSemaphoresMaximum, sm6kProgramControlFlags=sm6kProgramControlFlags, sm6kSystemDeviceTokenRingInstalled=sm6kSystemDeviceTokenRingInstalled, sm6kSystemPagingStatisticsPageFaults=sm6kSystemPagingStatisticsPageFaults, sm6kSystemUtilizationIostatKilobytesWrittenMaximum=sm6kSystemUtilizationIostatKilobytesWrittenMaximum, sm6kSystemMiscellaneousFreeSpace=sm6kSystemMiscellaneousFreeSpace, sm6kSystemMiscellaneousTime=sm6kSystemMiscellaneousTime, sm6kSystemUtilizationIostatIntervalStartTime=sm6kSystemUtilizationIostatIntervalStartTime, sm6kSystemProcessDataVirtualMemorySize=sm6kSystemProcessDataVirtualMemorySize, sm6kSystemUtilizationCPUIntervalStartTime=sm6kSystemUtilizationCPUIntervalStartTime, sm6kSystemDeviceX25T4Expirations=sm6kSystemDeviceX25T4Expirations, sm6kSystemDeviceX25RoutePort=sm6kSystemDeviceX25RoutePort, sm6kCommandName=sm6kCommandName, sm6kSystemDeviceTokenRingStaQueOverflow=sm6kSystemDeviceTokenRingStaQueOverflow, sm6kSystemDeviceX25SarmDmFTx=sm6kSystemDeviceX25SarmDmFTx, sm6kSystemUtilizationCPUIdleMaximum=sm6kSystemUtilizationCPUIdleMaximum, sm6kSystemProcessNVcsw=sm6kSystemProcessNVcsw, sm6kSystemDeviceX25RestartPTx=sm6kSystemDeviceX25RestartPTx, sm6kSystemDeviceTokenRingLastMajorVector=sm6kSystemDeviceTokenRingLastMajorVector, sm6kFilterTrapReception=sm6kFilterTrapReception, sm6kProgramControlSetableInteger=sm6kProgramControlSetableInteger, sm6kSystemPagingSpaceSize=sm6kSystemPagingSpaceSize, sm6kSystemDeviceTokenRingAuthorEnv=sm6kSystemDeviceTokenRingAuthorEnv, sm6kSystemFileSystemInodesUsed=sm6kSystemFileSystemInodesUsed, sm6kThresholdIntegerDataAvg=sm6kThresholdIntegerDataAvg, sm6kThresholdState=sm6kThresholdState, sm6kSystemDeviceX25Rx0x15=sm6kSystemDeviceX25Rx0x15, sm6kSystemDeviceX25T20Expirations=sm6kSystemDeviceX25T20Expirations, sm6kSystemOpenFileTableSize=sm6kSystemOpenFileTableSize, sm6kSystemSubSystemsStatusDescription=sm6kSystemSubSystemsStatusDescription, sm6kSystemMiscellaneousRandom=sm6kSystemMiscellaneousRandom, sm6kSystemPagingStatisticsEntry=sm6kSystemPagingStatisticsEntry, sm6kSystemUtilizationKernelSystemWritesMinimum=sm6kSystemUtilizationKernelSystemWritesMinimum, sm6kSystemUtilizationCPUNumber=sm6kSystemUtilizationCPUNumber, sm6kAliasName=sm6kAliasName, sm6kSystemDeviceX25RxFrameLcnt=sm6kSystemDeviceX25RxFrameLcnt, sm6kSystemDeviceTokenRingMonitorErrorCode=sm6kSystemDeviceTokenRingMonitorErrorCode, sm6kSystemSubSystemsName=sm6kSystemSubSystemsName, sm6kSystemDeviceX25SarmDmFRx=sm6kSystemDeviceX25SarmDmFRx, sm6kThresholdReArmTrapDescription=sm6kThresholdReArmTrapDescription, sm6kSystemDeviceX25RouteTable=sm6kSystemDeviceX25RouteTable, sm6kSystemDeviceEthernetIntrLost=sm6kSystemDeviceEthernetIntrLost, sm6kSystemPagingStatisticsFreeFrameWaits=sm6kSystemPagingStatisticsFreeFrameWaits, sm6kProgramMessagesEntry=sm6kProgramMessagesEntry, sm6kCommandOutputRowIndex=sm6kCommandOutputRowIndex, sm6kSystemDeviceEthernetTxFrameLcnt=sm6kSystemDeviceEthernetTxFrameLcnt, sm6kSystemUtilization=sm6kSystemUtilization, sm6kNetworkSessionMinimumResponseTime=sm6kNetworkSessionMinimumResponseTime, sm6kSystemDeviceTokenRingVPD=sm6kSystemDeviceTokenRingVPD, sm6kSystemLeastPriv=sm6kSystemLeastPriv, sm6kSystemProcessWait=sm6kSystemProcessWait, sm6kSystemPagingStatisticsPageReclaimsMinimum=sm6kSystemPagingStatisticsPageReclaimsMinimum, sm6kSystemDeviceEthernetParErrCnt=sm6kSystemDeviceEthernetParErrCnt, sm6kSystemDeviceX25RxReserved2=sm6kSystemDeviceX25RxReserved2, sm6kAnalysisLocalRemoteMIBVariableExpression=sm6kAnalysisLocalRemoteMIBVariableExpression, sm6kAliasState=sm6kAliasState, sm6kSystemUtilizationCPUWait=sm6kSystemUtilizationCPUWait, sm6kSystemDeviceX25Table=sm6kSystemDeviceX25Table, sm6kSystemDeviceEthernetTxByteLcnt=sm6kSystemDeviceEthernetTxByteLcnt, sm6kFilterEntryEnterpriseExpression=sm6kFilterEntryEnterpriseExpression, sm6kCommandSetStringAndParameters=sm6kCommandSetStringAndParameters, sm6kSystemProcessTTYp=sm6kSystemProcessTTYp, sm6kFilterAction=sm6kFilterAction, sm6kSystemPagingStatisticsScanClockCycles=sm6kSystemPagingStatisticsScanClockCycles, sm6kSystemDeviceX25RnrFRx=sm6kSystemDeviceX25RnrFRx, sm6kFilterTotalTrapsMatched=sm6kFilterTotalTrapsMatched, sm6kSystemDeviceX25RegistrationPTx=sm6kSystemDeviceX25RegistrationPTx, sm6kSystemProcess=sm6kSystemProcess, sm6kSystemUtilizationKernelMessages=sm6kSystemUtilizationKernelMessages, sm6kSystemUsers=sm6kSystemUsers, sm6kSystemUtilizationKernelSystemCallsMaximum=sm6kSystemUtilizationKernelSystemCallsMaximum, sm6kSystemUtilizationKernelName=sm6kSystemUtilizationKernelName, sm6kSystemDeviceListVPD=sm6kSystemDeviceListVPD, sm6kSystemDeviceX25UaFRx=sm6kSystemDeviceX25UaFRx, sm6kSystemFileSystemInodeCount=sm6kSystemFileSystemInodeCount, sm6kFilterMatchedTrapEnterprise=sm6kFilterMatchedTrapEnterprise, sm6kProgramDataCollection=sm6kProgramDataCollection, sm6kSystemPagingStatisticsDoneIOsMaximum=sm6kSystemPagingStatisticsDoneIOsMaximum, sm6kThresholdReArmValue=sm6kThresholdReArmValue, sm6kSystemDeviceX25T25Expirations=sm6kSystemDeviceX25T25Expirations, sm6kSystemProcessSUID=sm6kSystemProcessSUID, sm6kSystemDeviceEthernetTxFrameMcnt=sm6kSystemDeviceEthernetTxFrameMcnt, sm6kSystemDeviceX25Number=sm6kSystemDeviceX25Number, sm6kSystemUtilizationCPUBusy=sm6kSystemUtilizationCPUBusy, sm6kSystemDeviceEthernetTooLong=sm6kSystemDeviceEthernetTooLong, sm6kSystemPagingStatisticsFreeFrameWaitsMaximum=sm6kSystemPagingStatisticsFreeFrameWaitsMaximum, sm6kSystemUtilizationKernelProcessOverflowMinimum=sm6kSystemUtilizationKernelProcessOverflowMinimum, sm6kSystemDeviceX25Address=sm6kSystemDeviceX25Address, sm6kSystemUtilizationIostatKilobytesRead=sm6kSystemUtilizationIostatKilobytesRead, sm6kSystemDeviceTokenRingFrameCorrSave=sm6kSystemDeviceTokenRingFrameCorrSave, sm6kSystemDeviceTokenRingTable=sm6kSystemDeviceTokenRingTable, sm6kSystemPagingStatisticsExtendXPTWaits=sm6kSystemPagingStatisticsExtendXPTWaits, sm6kSystemFreePagingSpaceUntilKillPercent=sm6kSystemFreePagingSpaceUntilKillPercent, sm6kSystemDeviceX25UaFTx=sm6kSystemDeviceX25UaFTx, sm6kSystemDeviceX25Tx512x1023=sm6kSystemDeviceX25Tx512x1023, sm6kSystemUtilizationIostatPercentTimeActiveMinimum=sm6kSystemUtilizationIostatPercentTimeActiveMinimum, sm6kResourceUsageIsrss=sm6kResourceUsageIsrss, sm6kSystemDeviceX25XidFTx=sm6kSystemDeviceX25XidFTx, sm6kAnalysisState=sm6kAnalysisState, sm6kResourceUsageSystemTime=sm6kResourceUsageSystemTime, sm6kSystemPagingStatisticsPendingIOWaitsMaximum=sm6kSystemPagingStatisticsPendingIOWaitsMaximum, sm6kCommandCountToLive=sm6kCommandCountToLive, sm6kThresholdLastResponseTime=sm6kThresholdLastResponseTime, sm6kFilterName=sm6kFilterName, sm6kSystemDeviceX25BadLengthFTx=sm6kSystemDeviceX25BadLengthFTx, sm6kSystemDeviceX25DiagnosticPRx=sm6kSystemDeviceX25DiagnosticPRx, sm6kSystemUtilizationCPUTable=sm6kSystemUtilizationCPUTable, sm6kSystemSubSystemsStatusText=sm6kSystemSubSystemsStatusText, sm6kSystemDescription=sm6kSystemDescription, sm6kSystemPagingStatisticsDoneIOs=sm6kSystemPagingStatisticsDoneIOs, sm6kSystemDeviceEthernetAlignErr=sm6kSystemDeviceEthernetAlignErr, sm6kSystemDeviceTokenRingRxByteLcnt=sm6kSystemDeviceTokenRingRxByteLcnt, sm6kSystemDevice=sm6kSystemDevice, sm6kResourceUsageIxrss=sm6kResourceUsageIxrss, sm6kSystemDeviceX25Tx16x31=sm6kSystemDeviceX25Tx16x31, sm6kSystemDeviceX25ClearConfirmPRx=sm6kSystemDeviceX25ClearConfirmPRx, sm6kAnalysisReturnCode=sm6kAnalysisReturnCode, sm6kSystemDeviceX25ErrorPTx=sm6kSystemDeviceX25ErrorPTx, sm6kSystemDeviceTokenRingTimoLost=sm6kSystemDeviceTokenRingTimoLost, sm6kSystemDeviceEthernetHostRecPkt=sm6kSystemDeviceEthernetHostRecPkt, sm6kSystemFileSystemRemote=sm6kSystemFileSystemRemote, sm6kSystemAutomaticBootAfterHalt=sm6kSystemAutomaticBootAfterHalt, sm6kSystemMiscellaneousPublicKey=sm6kSystemMiscellaneousPublicKey, sm6kSystemPagingStatisticsStartIOsMinimum=sm6kSystemPagingStatisticsStartIOsMinimum, sm6kSystemProcessTTYd=sm6kSystemProcessTTYd, sm6kThresholdValue=sm6kThresholdValue, sm6kProgramTimeout=sm6kProgramTimeout, sm6kSystemDeviceX25Rx32x63=sm6kSystemDeviceX25Rx32x63, sm6kSystemUtilizationKernelForksMaximum=sm6kSystemUtilizationKernelForksMaximum, sm6kSystemPagingStatisticsPagesPagedInMaximum=sm6kSystemPagingStatisticsPagesPagedInMaximum, sm6kSystemPagingStatisticsPagesPagedOutMinimum=sm6kSystemPagingStatisticsPagesPagedOutMinimum, sm6kAliasEntry=sm6kAliasEntry, sm6kSystemMaxSystemProcesses=sm6kSystemMaxSystemProcesses, sm6kSystemDeviceEthernetTxByteMcnt=sm6kSystemDeviceEthernetTxByteMcnt, sm6kSystemDeviceEthernetRxByteLcnt=sm6kSystemDeviceEthernetRxByteLcnt, sm6kSystemUsersTime=sm6kSystemUsersTime, sm6kSystemDeviceTokenRingOvfloPktCnt=sm6kSystemDeviceTokenRingOvfloPktCnt, sm6kSystemPagingSpacePercentUsed=sm6kSystemPagingSpacePercentUsed, sm6kProgramControlForkCacheTime=sm6kProgramControlForkCacheTime, sm6kSystemDeviceX25Rx1024x2047=sm6kSystemDeviceX25Rx1024x2047, sm6kSystemDeviceEthernetEntry=sm6kSystemDeviceEthernetEntry, sm6kProgramControlSetableGauge=sm6kProgramControlSetableGauge, sm6kSystemDeviceEthernetCarrierLost=sm6kSystemDeviceEthernetCarrierLost, sm6kSystemUtilizationKernelPollingInterval=sm6kSystemUtilizationKernelPollingInterval, sm6kCommandTable=sm6kCommandTable, sm6kSystemProcessPercentMemory=sm6kSystemProcessPercentMemory, sm6kResourceUsageIdrss=sm6kResourceUsageIdrss, sm6kFilterEntry=sm6kFilterEntry, sm6kSystemDeviceEthernetExecCmdErrors=sm6kSystemDeviceEthernetExecCmdErrors, sm6kSystemDeviceEthernetStartRxCmd=sm6kSystemDeviceEthernetStartRxCmd, sm6kSystemSubSystemsPID=sm6kSystemSubSystemsPID, sm6kSystemDeviceX25Rx128x255=sm6kSystemDeviceX25Rx128x255, sm6kThresholdName=sm6kThresholdName, sm6kFilterThrottleDisarmTrapCount=sm6kFilterThrottleDisarmTrapCount, sm6kSystemUtilizationKernelExecsMinimum=sm6kSystemUtilizationKernelExecsMinimum, sm6kSystemUtilizationIostatKilobytesWritten=sm6kSystemUtilizationIostatKilobytesWritten, sm6kSystemProcessUserTime=sm6kSystemProcessUserTime, sm6kSystemDeviceX25TxFrameMcnt=sm6kSystemDeviceX25TxFrameMcnt, sm6kSystemPagingStatisticsScanClockCyclesMaximum=sm6kSystemPagingStatisticsScanClockCyclesMaximum, sm6kSystemProcessLoginUser=sm6kSystemProcessLoginUser, sm6kSystemSubSystemsStatusCode=sm6kSystemSubSystemsStatusCode, sm6kProgramInformation=sm6kProgramInformation, sm6kSystemPagingSpaceType=sm6kSystemPagingSpaceType, sm6kSystemProcessImageSize=sm6kSystemProcessImageSize, sm6kCommandOutputColumnIndex=sm6kCommandOutputColumnIndex, sm6kSystemMiscellaneousTimeText=sm6kSystemMiscellaneousTimeText, sm6kFilterDescription=sm6kFilterDescription, sm6kSystemDeviceTokenRingFrontEndTimerVal=sm6kSystemDeviceTokenRingFrontEndTimerVal, sm6kSystemUtilizationKernelProcessOverflow=sm6kSystemUtilizationKernelProcessOverflow, sm6kResourceUsageOutBlock=sm6kResourceUsageOutBlock, sm6kSystemDeviceEthernetTimoLost=sm6kSystemDeviceEthernetTimoLost, sm6kSystemDeviceTokenRingUpstreamNodeAddr=sm6kSystemDeviceTokenRingUpstreamNodeAddr, sm6kSystemUtilizationKernelBytesReadMinimum=sm6kSystemUtilizationKernelBytesReadMinimum, sm6kThresholdIntegerDataMin=sm6kThresholdIntegerDataMin, sm6kSystemPagingStatisticsStartIOsMaximum=sm6kSystemPagingStatisticsStartIOsMaximum, sm6kSystemDeviceTokenRingTxFrameLcnt=sm6kSystemDeviceTokenRingTxFrameLcnt, sm6kAnalysisName=sm6kAnalysisName, sm6kThresholdCommandToExecute=sm6kThresholdCommandToExecute, sm6kProgramControlPollTime=sm6kProgramControlPollTime, sm6kSystemPagingStatisticsDoneIOsMinimum=sm6kSystemPagingStatisticsDoneIOsMinimum, sm6kSystemNodeName=sm6kSystemNodeName, sm6kProgramControlLocalConfigurationFile=sm6kProgramControlLocalConfigurationFile, sm6kSystemSubSystemsCount=sm6kSystemSubSystemsCount, sm6kNetworkSessionLastTransmitTime=sm6kNetworkSessionLastTransmitTime, sm6kSystemPagingStatisticsPageReclaims=sm6kSystemPagingStatisticsPageReclaims, sm6kSystemDeviceTokenRingSoftErrorTimerVal=sm6kSystemDeviceTokenRingSoftErrorTimerVal, sm6kSystemDeviceX25RxReserved1=sm6kSystemDeviceX25RxReserved1, sm6kSystemDeviceX25IgnoredFRx=sm6kSystemDeviceX25IgnoredFRx, sm6kProgramDataCollectionFileSize=sm6kProgramDataCollectionFileSize, sm6kSystemProcessPriority=sm6kSystemProcessPriority, sm6kFilterDefaultAction=sm6kFilterDefaultAction, sm6kProgramLog=sm6kProgramLog, sm6kSystemProcessNsignals=sm6kSystemProcessNsignals, sm6kSystemDeviceX25InterruptPTx=sm6kSystemDeviceX25InterruptPTx, sm6kSystemDeviceEthernetRxByteMcnt=sm6kSystemDeviceEthernetRxByteMcnt, sm6kSystemDeviceX25RouteCalledAddressExt=sm6kSystemDeviceX25RouteCalledAddressExt)
mibBuilder.exportSymbols("SYSMON6K-MIB", sm6kSystemDeviceTokenRingPktTxErrCnt=sm6kSystemDeviceTokenRingPktTxErrCnt, sm6kSystemDeviceX25BadNrFTx=sm6kSystemDeviceX25BadNrFTx, sm6kProgramMessagesTable=sm6kProgramMessagesTable, sm6kSystemFileSystemEntry=sm6kSystemFileSystemEntry, sm6kProgramControlSetableTimeTicks=sm6kProgramControlSetableTimeTicks, sm6kFilterAgentAddrExpression=sm6kFilterAgentAddrExpression, sm6kSystemDeviceX25Installed=sm6kSystemDeviceX25Installed, sm6kSystemPagingStatisticsPageFaultsMinimum=sm6kSystemPagingStatisticsPageFaultsMinimum, sm6kSystemUsersTable=sm6kSystemUsersTable, sm6kSystemUtilizationIostatPercentTimeActive=sm6kSystemUtilizationIostatPercentTimeActive, sm6kSystemMinPout=sm6kSystemMinPout, sm6kSystemDeviceEthernetAdptRecPkt=sm6kSystemDeviceEthernetAdptRecPkt, sm6kSystemUtilizationKernelSystemCallsMinimum=sm6kSystemUtilizationKernelSystemCallsMinimum, sm6kSystemDeviceEthernetLateCollision=sm6kSystemDeviceEthernetLateCollision, sm6kSystemUsersLine=sm6kSystemUsersLine, sm6kResourceUsage=sm6kResourceUsage, sm6kSystemUtilizationKernelRunQueue=sm6kSystemUtilizationKernelRunQueue, sm6kCommandEntry=sm6kCommandEntry, sm6kSystemDeviceX25DataPTx=sm6kSystemDeviceX25DataPTx, sm6kSystemDeviceX25DiscFRx=sm6kSystemDeviceX25DiscFRx, sm6kProgramDescription=sm6kProgramDescription, sm6kSystemDeviceX25TxErrCnt=sm6kSystemDeviceX25TxErrCnt, sm6kSystemDeviceX25UnknownFRx=sm6kSystemDeviceX25UnknownFRx, sm6kSystemDeviceX25Lvl2Disconnects=sm6kSystemDeviceX25Lvl2Disconnects, sm6kNetworkSessionPacketsReceived=sm6kNetworkSessionPacketsReceived, sm6kAdministration=sm6kAdministration, sm6kProgramUpTime=sm6kProgramUpTime, sm6kSystemDeviceEthernetTxIntrCnt=sm6kSystemDeviceEthernetTxIntrCnt, sm6kFilterDeactivationDayOfWeek=sm6kFilterDeactivationDayOfWeek, sm6kSystemDeviceEthernetTable=sm6kSystemDeviceEthernetTable, sm6kSystemProcessEffectiveGID=sm6kSystemProcessEffectiveGID, sm6kSystemDeviceEthernetExecOverflow=sm6kSystemDeviceEthernetExecOverflow, sm6kTrapDestinationEntry=sm6kTrapDestinationEntry, sm6kSystemDeviceTokenRingAdapPhysAddr=sm6kSystemDeviceTokenRingAdapPhysAddr, sm6kSystemUtilizationKernelSystemCalls=sm6kSystemUtilizationKernelSystemCalls, sm6kResourceUsageVcsw=sm6kResourceUsageVcsw, sm6kSystemDeviceEthernetCTSLost=sm6kSystemDeviceEthernetCTSLost, sm6kAdministrationFieldDescription=sm6kAdministrationFieldDescription, sm6kAnalysisTable=sm6kAnalysisTable, sm6kThresholdPollTime=sm6kThresholdPollTime, sm6kAnalysisDescription=sm6kAnalysisDescription, sm6kSystemUtilizationKernelTable=sm6kSystemUtilizationKernelTable, sm6kAdministrationFieldName=sm6kAdministrationFieldName, sm6kSystemDeviceX25InfoFTx=sm6kSystemDeviceX25InfoFTx, sm6kSystemProcessDescriptorTableSize=sm6kSystemProcessDescriptorTableSize, sm6kSystemDeviceX25Tx64x127=sm6kSystemDeviceX25Tx64x127, sm6kSystemVersion=sm6kSystemVersion, sm6kCommandGetStringAndParameters=sm6kCommandGetStringAndParameters, sm6kCommandIntegerResult=sm6kCommandIntegerResult, sm6kSystemDeviceX25TxByteLcnt=sm6kSystemDeviceX25TxByteLcnt, sm6kFilterSpecificExpression=sm6kFilterSpecificExpression, sm6kSystemDeviceTokenRingTxAccessPriority=sm6kSystemDeviceTokenRingTxAccessPriority, sm6kSystemFileSystemName=sm6kSystemFileSystemName, sm6kSystemDeviceTokenRingTxFrameMcnt=sm6kSystemDeviceTokenRingTxFrameMcnt, sm6kSystemUtilizationIostatKilobytesTransferRateMaximum=sm6kSystemUtilizationIostatKilobytesTransferRateMaximum, sm6kSystemDeviceX25Clear=sm6kSystemDeviceX25Clear, sm6kProgramLogMask=sm6kProgramLogMask, sm6kNetworkSessionLastStateChange=sm6kNetworkSessionLastStateChange, sm6kFilterThrottleDisarmedSpecificTrap=sm6kFilterThrottleDisarmedSpecificTrap, sm6kSystemDeviceEthernetRxQueOverflow=sm6kSystemDeviceEthernetRxQueOverflow, sm6kSystemDeviceEthernetReceiveDataOffset=sm6kSystemDeviceEthernetReceiveDataOffset, sm6kSystemDeviceX25T22Expirations=sm6kSystemDeviceX25T22Expirations, sm6kSystemUtilizationIostatKilobytesTransferRateMinimum=sm6kSystemUtilizationIostatKilobytesTransferRateMinimum, sm6kSystemDeviceX25Tx32x63=sm6kSystemDeviceX25Tx32x63, sm6kSystemPagingStatistics=sm6kSystemPagingStatistics, sm6kSystemUtilizationCPUUserMaximum=sm6kSystemUtilizationCPUUserMaximum, sm6kSystemUtilizationCPUSystemMaximum=sm6kSystemUtilizationCPUSystemMaximum, sm6kFilterTotalTrapsReceived=sm6kFilterTotalTrapsReceived, sm6kAnalysisResultIndex=sm6kAnalysisResultIndex, sm6kAdministrationEntry=sm6kAdministrationEntry, sm6kSystemDeviceEthernetPktDiscard=sm6kSystemDeviceEthernetPktDiscard, sm6kAdministrationFieldState=sm6kAdministrationFieldState, sm6kSystemPagingStatisticsExtendXPTWaitsMinimum=sm6kSystemPagingStatisticsExtendXPTWaitsMinimum, sm6kSystemUtilizationIostatName=sm6kSystemUtilizationIostatName, sm6kSystemDeviceX25TxByteMcnt=sm6kSystemDeviceX25TxByteMcnt, sm6kResourceUsageName=sm6kResourceUsageName, sm6kSystemDeviceEthernetClear=sm6kSystemDeviceEthernetClear, sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMaximum=sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMaximum, sm6kSystemDeviceX25DefaultSvcTxPacketSize=sm6kSystemDeviceX25DefaultSvcTxPacketSize, sm6kCommandGaugeResult=sm6kCommandGaugeResult, sm6kFilterThrottleTimeStarted=sm6kFilterThrottleTimeStarted, sm6kSystemDeviceEthernetCRCErr=sm6kSystemDeviceEthernetCRCErr, sm6kSystemUtilizationIostatTransfersMinimum=sm6kSystemUtilizationIostatTransfersMinimum, sm6kSystemDeviceX25Rx256x511=sm6kSystemDeviceX25Rx256x511, sm6kThresholdEntry=sm6kThresholdEntry, sm6kSystemProcessCommand=sm6kSystemProcessCommand, sm6kSystemDeviceTokenRingRingStatus=sm6kSystemDeviceTokenRingRingStatus, sm6kSystemUtilizationKernelBytesWrittenMaximum=sm6kSystemUtilizationKernelBytesWrittenMaximum, sm6kSystemDeviceTokenRingRxByteMcnt=sm6kSystemDeviceTokenRingRxByteMcnt, sm6kProgramLogFileBehavior=sm6kProgramLogFileBehavior, sm6kSystemUtilizationKernelContextSwitches=sm6kSystemUtilizationKernelContextSwitches, sm6kAliasTable=sm6kAliasTable, sm6kSystemDeviceX25RegistrationConfirmPRx=sm6kSystemDeviceX25RegistrationConfirmPRx, sm6kSystemProcessPageFaultsIO=sm6kSystemProcessPageFaultsIO, sm6kSystemPagingStatisticsIntervalStartTime=sm6kSystemPagingStatisticsIntervalStartTime, sm6kSystemUtilizationCPUIntervalName=sm6kSystemUtilizationCPUIntervalName, sm6kNetworkSessionCurrentState=sm6kNetworkSessionCurrentState, sm6kSystemDeviceX25Tx2048x4095=sm6kSystemDeviceX25Tx2048x4095, sm6kSystemProcessMaxOpenFiles=sm6kSystemProcessMaxOpenFiles, sm6kSystemPagingStatisticsPageInsFromPagingSpaceMinimum=sm6kSystemPagingStatisticsPageInsFromPagingSpaceMinimum, sm6kSystemFileSystemSize=sm6kSystemFileSystemSize, sm6kProgramCompilationDate=sm6kProgramCompilationDate, sm6kSystemUtilizationKernelForksMinimum=sm6kSystemUtilizationKernelForksMinimum, sm6kSystemDeviceX25RouteEntry=sm6kSystemDeviceX25RouteEntry, sm6kSystemProcessTextResidentSetSize=sm6kSystemProcessTextResidentSetSize, sm6kSystemDeviceEthernetTxErrCnt=sm6kSystemDeviceEthernetTxErrCnt, sm6kSystemDeviceX25Rx2048x4095=sm6kSystemDeviceX25Rx2048x4095, sm6kSystemUsersRemoteHost=sm6kSystemUsersRemoteHost, sm6kThresholdIntegerDataMax=sm6kThresholdIntegerDataMax, sm6kSystemDeviceX25RestartConfirmPRx=sm6kSystemDeviceX25RestartConfirmPRx, sm6kSystemUtilizationIostatKilobytesWrittenMinimum=sm6kSystemUtilizationIostatKilobytesWrittenMinimum, sm6kThresholdDataSamples=sm6kThresholdDataSamples, sm6kSystemDeviceX25CallConnectedPRx=sm6kSystemDeviceX25CallConnectedPRx, sm6kSystemUtilizationCPUBusyMaximum=sm6kSystemUtilizationCPUBusyMaximum, sm6kSystemPagingStatisticsPageStealsMaximum=sm6kSystemPagingStatisticsPageStealsMaximum, sm6kSystemUtilizationIostatTransfersMaximum=sm6kSystemUtilizationIostatTransfersMaximum, sm6kAliasList=sm6kAliasList, systemsMonitor6000=systemsMonitor6000, sm6kCommandTimeToLive=sm6kCommandTimeToLive, sm6kSystemDeviceX25Tx256x511=sm6kSystemDeviceX25Tx256x511, sm6kSystemUtilizationKernel=sm6kSystemUtilizationKernel, sm6kSystemPagingStatisticsPageInsFromPagingSpaceMaximum=sm6kSystemPagingStatisticsPageInsFromPagingSpaceMaximum, sm6kFilterMatchedCommand=sm6kFilterMatchedCommand, sm6kProgramContact=sm6kProgramContact, sm6kThresholdSpecificTrap=sm6kThresholdSpecificTrap, sm6kSystemDeviceX25SabmFRx=sm6kSystemDeviceX25SabmFRx, sm6kSystemDeviceListDiagnostics=sm6kSystemDeviceListDiagnostics, sm6kSystemUtilizationKernelIntervalLength=sm6kSystemUtilizationKernelIntervalLength, sm6kSystemDeviceX25RxReserved14=sm6kSystemDeviceX25RxReserved14, sm6kSystemDeviceX25ConnectTime=sm6kSystemDeviceX25ConnectTime, ibmProd=ibmProd, sm6kTrapDestinationState=sm6kTrapDestinationState, sm6kSystemDeviceX25RouteNumber=sm6kSystemDeviceX25RouteNumber, sm6kSystemDeviceEthernetNoResources=sm6kSystemDeviceEthernetNoResources, sm6kSystemDeviceX25ResetConfirmPTx=sm6kSystemDeviceX25ResetConfirmPTx, sm6kSystemDeviceTokenRingRxQueOverflow=sm6kSystemDeviceTokenRingRxQueOverflow, sm6kSystemDeviceX25ReceiveDataTransferOffset=sm6kSystemDeviceX25ReceiveDataTransferOffset, sm6kSystemFileSystemTable=sm6kSystemFileSystemTable, sm6kSystemProcessNSwap=sm6kSystemProcessNSwap, sm6kSystemDeviceEthernetHostRecEol=sm6kSystemDeviceEthernetHostRecEol, sm6kCommandOwnerID=sm6kCommandOwnerID, sm6kSystemUsersName=sm6kSystemUsersName, sm6kSystemPagingStatisticsFreeFrameWaitsMinimum=sm6kSystemPagingStatisticsFreeFrameWaitsMinimum, sm6kSystemPagingStatisticsPendingIOWaits=sm6kSystemPagingStatisticsPendingIOWaits, sm6kSystemDeviceX25RouteCallingAddress=sm6kSystemDeviceX25RouteCallingAddress, sm6kSystemDeviceX25RegistrationPRx=sm6kSystemDeviceX25RegistrationPRx, sm6kCommandExecutionReturnCode=sm6kCommandExecutionReturnCode, sm6kSystemUtilizationKernelSystemWritesMaximum=sm6kSystemUtilizationKernelSystemWritesMaximum, sm6kSystemPagingStatisticsPageScansMinimum=sm6kSystemPagingStatisticsPageScansMinimum, sm6kSystemPagingSpaceTable=sm6kSystemPagingSpaceTable, sm6kSystemDeviceX25TxQueHigh=sm6kSystemDeviceX25TxQueHigh, sm6kSystemUtilizationIostat=sm6kSystemUtilizationIostat, sm6kSystemDeviceX25MemoryWindowSize=sm6kSystemDeviceX25MemoryWindowSize, sm6kFilterThrottleTrapCount=sm6kFilterThrottleTrapCount, sm6kFilterThrottleDisarmedTrapDescription=sm6kFilterThrottleDisarmedTrapDescription, sm6kThresholdLocalRemoteMIBVariable=sm6kThresholdLocalRemoteMIBVariable, sm6kSystemDeviceEthernetTxQueHigh=sm6kSystemDeviceEthernetTxQueHigh, sm6kProgramNumber=sm6kProgramNumber, sm6kSystemFreePagingSpace=sm6kSystemFreePagingSpace, sm6kSystemDeviceX25SupportLevel=sm6kSystemDeviceX25SupportLevel, sm6kSystemDeviceX25TxReserved15=sm6kSystemDeviceX25TxReserved15, sm6kSystemUsersEntry=sm6kSystemUsersEntry, sm6kSystemDeviceEthernetHardwareAddress=sm6kSystemDeviceEthernetHardwareAddress, sm6kSystemDeviceX25Tx128x255=sm6kSystemDeviceX25Tx128x255, sm6kSystemDeviceTokenRingBeaconStationNAUN=sm6kSystemDeviceTokenRingBeaconStationNAUN, sm6kSystemDeviceX25RxByteLcnt=sm6kSystemDeviceX25RxByteLcnt, sm6kResourceUsageUserTime=sm6kResourceUsageUserTime, sm6kFilterTrapDestinations=sm6kFilterTrapDestinations, sm6kSystemPagingStatisticsExtendXPTWaitsMaximum=sm6kSystemPagingStatisticsExtendXPTWaitsMaximum, sm6kSystemDeviceX25ClearConfirmPTx=sm6kSystemDeviceX25ClearConfirmPTx, sm6kSystemDeviceListInstalled=sm6kSystemDeviceListInstalled, sm6kSystemDeviceX25RoutePriority=sm6kSystemDeviceX25RoutePriority, sm6kSystemDeviceX25RxReserved15=sm6kSystemDeviceX25RxReserved15, sm6kSystemProcessPageFaultsNoIO=sm6kSystemProcessPageFaultsNoIO, sm6kSystemUtilizationKernelSystemReads=sm6kSystemUtilizationKernelSystemReads, sm6kSystemDeviceTokenRingWdtLost=sm6kSystemDeviceTokenRingWdtLost, sm6kSystemDeviceX25RxErrCnt=sm6kSystemDeviceX25RxErrCnt, sm6kSystemDeviceListTable=sm6kSystemDeviceListTable, sm6kSystemDeviceEthernetRxFrameLcnt=sm6kSystemDeviceEthernetRxFrameLcnt, sm6kSystemDeviceX25Tx1024x2047=sm6kSystemDeviceX25Tx1024x2047, sm6kSystemUtilizationKernelContextSwitchesMaximum=sm6kSystemUtilizationKernelContextSwitchesMaximum, sm6kSystemDeviceX25TxFrameLcnt=sm6kSystemDeviceX25TxFrameLcnt, sm6kSystemUtilizationIostatKilobytesTransferRate=sm6kSystemUtilizationIostatKilobytesTransferRate, sm6kSystemDeviceX25T24Expirations=sm6kSystemDeviceX25T24Expirations, sm6kSystemDeviceX25T28Expirations=sm6kSystemDeviceX25T28Expirations, sm6kThresholdCondition=sm6kThresholdCondition, sm6kSystemInformation=sm6kSystemInformation, sm6kSystemDeviceTokenRingRxQueNoMbuf=sm6kSystemDeviceTokenRingRxQueNoMbuf, sm6kSystemDeviceX25ResetRequestPTx=sm6kSystemDeviceX25ResetRequestPTx, sm6kThresholdArmEnterprise=sm6kThresholdArmEnterprise, sm6kSystemUtilizationKernelRunQueueMinimum=sm6kSystemUtilizationKernelRunQueueMinimum, sm6kSystemDeviceX25RrFTx=sm6kSystemDeviceX25RrFTx, sm6kSystemPagingStatisticsPagesPagedOut=sm6kSystemPagingStatisticsPagesPagedOut, sm6kSystemPagingStatisticsPagesPagedInMinimum=sm6kSystemPagingStatisticsPagesPagedInMinimum, sm6kSystemUtilizationKernelSemaphores=sm6kSystemUtilizationKernelSemaphores, sm6kSystemUtilizationIostatEntry=sm6kSystemUtilizationIostatEntry, sm6kFilterVariableExpression=sm6kFilterVariableExpression, sm6kSystemDeviceEthernetBroadwrap=sm6kSystemDeviceEthernetBroadwrap, sm6kSystemDeviceX25RxQueHigh=sm6kSystemDeviceX25RxQueHigh, sm6kAliasResolvedList=sm6kAliasResolvedList, sm6kSystemDeviceEthernetDiagOverflow=sm6kSystemDeviceEthernetDiagOverflow, sm6kSystemDeviceX25RrFRx=sm6kSystemDeviceX25RrFRx, sm6kSystemUtilizationKernelEntry=sm6kSystemUtilizationKernelEntry, sm6kSystemDeviceEthernetCurrentAddress=sm6kSystemDeviceEthernetCurrentAddress, sm6kSystemDeviceX25CallRequestPTx=sm6kSystemDeviceX25CallRequestPTx, sm6kSystemDeviceX25DiscFTx=sm6kSystemDeviceX25DiscFTx, sm6kSystemDeviceX25Rx64x127=sm6kSystemDeviceX25Rx64x127, sm6kSystemDeviceTokenRingTxQueHigh=sm6kSystemDeviceTokenRingTxQueHigh, sm6kSystemPagingStatisticsPageFaultsMaximum=sm6kSystemPagingStatisticsPageFaultsMaximum, sm6kSystemDeviceX25VcEstablishments=sm6kSystemDeviceX25VcEstablishments, sm6kFilterActivationDayOfWeek=sm6kFilterActivationDayOfWeek, sm6kProgramName=sm6kProgramName, sm6kSystemUtilizationKernelSystemReadsMaximum=sm6kSystemUtilizationKernelSystemReadsMaximum, sm6kSystemProcessAdspace=sm6kSystemProcessAdspace, sm6kSystemDeviceX25MaxRxPacketSize=sm6kSystemDeviceX25MaxRxPacketSize, sm6kSystemDeviceEthernetRxQueNoMbuf=sm6kSystemDeviceEthernetRxQueNoMbuf, sm6kSystemDeviceX25RejFTx=sm6kSystemDeviceX25RejFTx, sm6kProgramControlSetableCounter=sm6kProgramControlSetableCounter, sm6kSystemPagingSpace=sm6kSystemPagingSpace, sm6kFilterThrottleArmedTrapEnterprise=sm6kFilterThrottleArmedTrapEnterprise, sm6kSystemUtilizationIostatPercentTimeActiveMaximum=sm6kSystemUtilizationIostatPercentTimeActiveMaximum, sm6kSystemPagingStatisticsPageScansMaximum=sm6kSystemPagingStatisticsPageScansMaximum, sm6kSystemFileSystemFree=sm6kSystemFileSystemFree, sm6kSystemDeviceListDescription=sm6kSystemDeviceListDescription, sm6kProgramControlReInitializeMonitor=sm6kProgramControlReInitializeMonitor, sm6kResourceUsageInBlock=sm6kResourceUsageInBlock, sm6kFilter=sm6kFilter, sm6kSystemDeviceX25XidFRx=sm6kSystemDeviceX25XidFRx, sm6kSystemPagingStatisticsPollingInterval=sm6kSystemPagingStatisticsPollingInterval, sm6kSystemCBlockArraySize=sm6kSystemCBlockArraySize, sm6kSystemRecordLockTableSize=sm6kSystemRecordLockTableSize, sm6kSystemDeviceX25Tx0x15=sm6kSystemDeviceX25Tx0x15, sm6kSystemDeviceX25UnknownFTx=sm6kSystemDeviceX25UnknownFTx, sm6kSystemUtilizationKernelRawTTYOut=sm6kSystemUtilizationKernelRawTTYOut, sm6kNetworkSessionCount=sm6kNetworkSessionCount, sm6kSystemMaxMbufs=sm6kSystemMaxMbufs, sm6kSystemDeviceEthernetVPD=sm6kSystemDeviceEthernetVPD, sm6kSystemProcessEffectiveGroupName=sm6kSystemProcessEffectiveGroupName, sm6kSystemUtilizationCPUEntry=sm6kSystemUtilizationCPUEntry, sm6kSystemProcessMsgsnd=sm6kSystemProcessMsgsnd, sm6kProgramData=sm6kProgramData, sm6kSystemFileSystemPercentUsed=sm6kSystemFileSystemPercentUsed, sm6kSystemProcessMaxOpenStreams=sm6kSystemProcessMaxOpenStreams, sm6kFilterParticipationState=sm6kFilterParticipationState, sm6kThresholdReArmSpecificTrap=sm6kThresholdReArmSpecificTrap, sm6kSystemPagingInformation=sm6kSystemPagingInformation, sm6kSystemUtilizationKernelExecsMaximum=sm6kSystemUtilizationKernelExecsMaximum, sm6kSystemPagingSpacePhysicalVolume=sm6kSystemPagingSpacePhysicalVolume, sm6kFilterThrottleDisarmedCommand=sm6kFilterThrottleDisarmedCommand, sm6kSystemDeviceTokenRingStaQueHigh=sm6kSystemDeviceTokenRingStaQueHigh, sm6kResourceUsageTable=sm6kResourceUsageTable, sm6kSystemProcessOutblocks=sm6kSystemProcessOutblocks, sm6kSystemFileSystemInodesPercentUsed=sm6kSystemFileSystemInodesPercentUsed, sm6kSystemUsersPID=sm6kSystemUsersPID)
mibBuilder.exportSymbols("SYSMON6K-MIB", sm6kSystemDeviceTokenRingTxByteMcnt=sm6kSystemDeviceTokenRingTxByteMcnt, sm6kNetworkSessionLastPollAttempt=sm6kNetworkSessionLastPollAttempt, sm6kProgramDataCollectionFileName=sm6kProgramDataCollectionFileName, sm6kSystemDeviceX25T21Expirations=sm6kSystemDeviceX25T21Expirations, sm6kSystemUtilizationCPUSystem=sm6kSystemUtilizationCPUSystem, sm6kSystemUtilizationKernelContextSwitchesMinimum=sm6kSystemUtilizationKernelContextSwitchesMinimum, sm6kAdministrationFieldValue=sm6kAdministrationFieldValue, sm6kProgramMessagesTimeStamp=sm6kProgramMessagesTimeStamp, sm6kSystemDeviceTokenRingPktRejCnt=sm6kSystemDeviceTokenRingPktRejCnt, sm6kSystemUtilizationKernelRawTTYOutMaximum=sm6kSystemUtilizationKernelRawTTYOutMaximum, sm6kProgramControlSetableOctetString=sm6kProgramControlSetableOctetString, sm6kSystemDeviceX25RouteAction=sm6kSystemDeviceX25RouteAction, sm6kFilterThrottleArmedTrapDescription=sm6kFilterThrottleArmedTrapDescription, sm6kSystemProcessPFlags=sm6kSystemProcessPFlags, sm6kSystemDeviceX25TxReserved3=sm6kSystemDeviceX25TxReserved3, sm6kSystemUtilizationKernelRunQueueMaximum=sm6kSystemUtilizationKernelRunQueueMaximum, sm6kSystemPagingStatisticsPagesPagedIn=sm6kSystemPagingStatisticsPagesPagedIn, sm6kSystemMaxPout=sm6kSystemMaxPout, sm6kSystemDeviceX25RnrPTx=sm6kSystemDeviceX25RnrPTx, sm6kFilterThrottleArmedSpecificTrap=sm6kFilterThrottleArmedSpecificTrap, sm6kResourceUsageTotalTime=sm6kResourceUsageTotalTime, sm6kResourceUsageNSignals=sm6kResourceUsageNSignals, sm6kSystemDeviceX25RrPTx=sm6kSystemDeviceX25RrPTx, sm6kSystemDeviceTokenRingRxIntrCnt=sm6kSystemDeviceTokenRingRxIntrCnt, sm6kSystemDeviceX25RxByteMcnt=sm6kSystemDeviceX25RxByteMcnt, sm6kSystemPagingStatisticsPageSteals=sm6kSystemPagingStatisticsPageSteals, sm6kSystemProcessState=sm6kSystemProcessState, sm6kSystemProcessLoginUID=sm6kSystemProcessLoginUID, sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMinimum=sm6kSystemPagingStatisticsPageOutsFromPagingSpaceMinimum, sm6kNetworkSessionLifeTimeAverageResponseTime=sm6kNetworkSessionLifeTimeAverageResponseTime, sm6kSystemDeviceX25RnrFTx=sm6kSystemDeviceX25RnrFTx, sm6kSystemDeviceX25DefaultSvcRxPacketSize=sm6kSystemDeviceX25DefaultSvcRxPacketSize, sm6kSystemUtilizationKernelProcessOverflowMaximum=sm6kSystemUtilizationKernelProcessOverflowMaximum, sm6kSystemPagingStatisticsPageOutsFromPagingSpace=sm6kSystemPagingStatisticsPageOutsFromPagingSpace, sm6kSystemDeviceEthernetInstalled=sm6kSystemDeviceEthernetInstalled, sm6kSystemUtilizationCPU=sm6kSystemUtilizationCPU, sm6kSystemSysName=sm6kSystemSysName, sm6kSystemDeviceX25TxUnknownSize=sm6kSystemDeviceX25TxUnknownSize, sm6kSystemDeviceEthernetRxQueNoMbufExt=sm6kSystemDeviceEthernetRxQueNoMbufExt, sm6kSystemDeviceX25RxReserved3=sm6kSystemDeviceX25RxReserved3, sm6kSystemDeviceEthernetRxIntrCnt=sm6kSystemDeviceEthernetRxIntrCnt, sm6kSystemDeviceX25IncomingCallPRx=sm6kSystemDeviceX25IncomingCallPRx, sm6kFilterGenericExpression=sm6kFilterGenericExpression, sm6kResourceUsageMsgrcv=sm6kResourceUsageMsgrcv, sm6kSystemProcessCPU=sm6kSystemProcessCPU, sm6kSystemDeviceX25IgnoredFTx=sm6kSystemDeviceX25IgnoredFTx, sm6kSystemUtilizationIostatKilobytesReadMaximum=sm6kSystemUtilizationIostatKilobytesReadMaximum, sm6kResourceUsageNSwap=sm6kResourceUsageNSwap, sm6kThresholdCounterGaugeDataMax=sm6kThresholdCounterGaugeDataMax, sm6kCommandTimeOutValue=sm6kCommandTimeOutValue, sm6kSystemPagingStatisticsScanClockCyclesMinimum=sm6kSystemPagingStatisticsScanClockCyclesMinimum, sm6kSystemDeviceX25T26Expirations=sm6kSystemDeviceX25T26Expirations, sm6kSystemUtilizationCPUIdleMinimum=sm6kSystemUtilizationCPUIdleMinimum, sm6kSystemDeviceX25FrmrFTx=sm6kSystemDeviceX25FrmrFTx, sm6kSystemProcessNice=sm6kSystemProcessNice, sm6kSystemUtilizationCPUIntervalLength=sm6kSystemUtilizationCPUIntervalLength, sm6kSystemDeviceTokenRingHardwareAddress=sm6kSystemDeviceTokenRingHardwareAddress, sm6kNetworkSessionName=sm6kNetworkSessionName, sm6kSystemDeviceX25RestartPRx=sm6kSystemDeviceX25RestartPRx, sm6kSystemDeviceTokenRingEntry=sm6kSystemDeviceTokenRingEntry, sm6kSystemDeviceX25RxTotalPackets=sm6kSystemDeviceX25RxTotalPackets, sm6kThresholdStandardError=sm6kThresholdStandardError, sm6kSystemUtilizationKernelBytesReadMaximum=sm6kSystemUtilizationKernelBytesReadMaximum, sm6kSystemDeviceX25=sm6kSystemDeviceX25, sm6kSystemUtilizationIostatKilobytesReadMinimum=sm6kSystemUtilizationIostatKilobytesReadMinimum, sm6kSystemDeviceX25T4N2Times=sm6kSystemDeviceX25T4N2Times, sm6kSystemProcessPgrp=sm6kSystemProcessPgrp, sm6kThresholdDescription=sm6kThresholdDescription, sm6kSystemPagingStatisticsPagesPagedOutMaximum=sm6kSystemPagingStatisticsPagesPagedOutMaximum, sm6kSystemProcessMsgrcv=sm6kSystemProcessMsgrcv, sm6kSystemUtilizationIostatPollingInterval=sm6kSystemUtilizationIostatPollingInterval, sm6kResourceUsageEntry=sm6kResourceUsageEntry, sm6kSystemProcessEntry=sm6kSystemProcessEntry, sm6kResourceUsageMajflt=sm6kResourceUsageMajflt, sm6kSystemUtilizationKernelBytesRead=sm6kSystemUtilizationKernelBytesRead, sm6kThresholdTrapDescription=sm6kThresholdTrapDescription, sm6kThresholdReArmCommandToExecute=sm6kThresholdReArmCommandToExecute, sm6kSystemSubSystemsEntry=sm6kSystemSubSystemsEntry, sm6kNetworkSessionAddressFamily=sm6kNetworkSessionAddressFamily, sm6kProgramMessagesRowNumber=sm6kProgramMessagesRowNumber, sm6kSystemDeviceX25RouteCallingAddressExt=sm6kSystemDeviceX25RouteCallingAddressExt, sm6kSystemDeviceX25FrmrFRx=sm6kSystemDeviceX25FrmrFRx, sm6kSystemProcessPID=sm6kSystemProcessPID, sm6kSystemDeviceX25Rx512x1023=sm6kSystemDeviceX25Rx512x1023, sm6kSystemPagingSpaceActive=sm6kSystemPagingSpaceActive, sm6kFilterDeactivationTime=sm6kFilterDeactivationTime, sm6kProgramLogFileSize=sm6kProgramLogFileSize, ibm=ibm, sm6kSystemDeviceX25MaxTxPacketSize=sm6kSystemDeviceX25MaxTxPacketSize, sm6kSystemDeviceX25RxFrameMcnt=sm6kSystemDeviceX25RxFrameMcnt, sm6kSystemProcessParentPID=sm6kSystemProcessParentPID, sm6kTrapDestinationHost=sm6kTrapDestinationHost, sm6kSystemDeviceTokenRingRxFrameMcnt=sm6kSystemDeviceTokenRingRxFrameMcnt, sm6kResourceUsageMaxrss=sm6kResourceUsageMaxrss, sm6kFilterThrottleArmTrapCount=sm6kFilterThrottleArmTrapCount, sm6kSystemProcessStartTime=sm6kSystemProcessStartTime, sm6kThresholdTimeoutCount=sm6kThresholdTimeoutCount, sm6kSystemFreePagingSpaceUntilKill=sm6kSystemFreePagingSpaceUntilKill, sm6kSystemUtilizationCPUWaitMinimum=sm6kSystemUtilizationCPUWaitMinimum, sm6kNetworkSessionNetAddress=sm6kNetworkSessionNetAddress, sm6kSystemDeviceX25TxReserved13=sm6kSystemDeviceX25TxReserved13, sm6kFilterThrottleType=sm6kFilterThrottleType, sm6kSystemDeviceTokenRingRxQueNoMbufExt=sm6kSystemDeviceTokenRingRxQueNoMbufExt, sm6kSystemProcessInblocks=sm6kSystemProcessInblocks, sm6kSystemDeviceEthernetRxErrCnt=sm6kSystemDeviceEthernetRxErrCnt, sm6kSystemConfiguration=sm6kSystemConfiguration, sm6kProgramDataCollectionFileBehavior=sm6kProgramDataCollectionFileBehavior, sm6kSystemPagingSpaceVolumeGroup=sm6kSystemPagingSpaceVolumeGroup, sm6kProgramControlPercentMultiplier=sm6kProgramControlPercentMultiplier, sm6kSystemUtilizationIostatTransfers=sm6kSystemUtilizationIostatTransfers, sm6kSystemDeviceEthernetNidTblHigh=sm6kSystemDeviceEthernetNidTblHigh, sm6kSystemProcessNIvcsw=sm6kSystemProcessNIvcsw, sm6kSystemUtilizationCPUCount=sm6kSystemUtilizationCPUCount, sm6kSystemUtilizationKernelIntervalStartTime=sm6kSystemUtilizationKernelIntervalStartTime, sm6kCommandOutputResultIndex=sm6kCommandOutputResultIndex, sm6kSystemDeviceTokenRingNidTblHigh=sm6kSystemDeviceTokenRingNidTblHigh, sm6kSystemSubSystemsTable=sm6kSystemSubSystemsTable, sm6kSystemDeviceListEntry=sm6kSystemDeviceListEntry, sm6kSystemRelease=sm6kSystemRelease, sm6kSystemPagingStatisticsStartIOs=sm6kSystemPagingStatisticsStartIOs, sm6kSystemProcessTable=sm6kSystemProcessTable, sm6kNetworkSessionEntry=sm6kNetworkSessionEntry, sm6kResourceUsageMinflt=sm6kResourceUsageMinflt, sm6kNetworkSessionLastReceiveTime=sm6kNetworkSessionLastReceiveTime, sm6kSystemProcessCPUTime=sm6kSystemProcessCPUTime, sm6kSystemDeviceTokenRingRxQueHigh=sm6kSystemDeviceTokenRingRxQueHigh, sm6kProgramMessagesText=sm6kProgramMessagesText, sm6kSystemDeviceTokenRingSpeed=sm6kSystemDeviceTokenRingSpeed, sm6kSystemProcessEffectiveUID=sm6kSystemProcessEffectiveUID, sm6kSystemDeviceX25RrPRx=sm6kSystemDeviceX25RrPRx, sm6kProgramVersion=sm6kProgramVersion, sm6kSystemDeviceX25CallAcceptPTx=sm6kSystemDeviceX25CallAcceptPTx, sm6kSystemPagingSpaceAuto=sm6kSystemPagingSpaceAuto, sm6kProgramRetryCount=sm6kProgramRetryCount, sm6kSystemDeviceX25StaQueHigh=sm6kSystemDeviceX25StaQueHigh, sm6kSystemDeviceEthernetStaQueHigh=sm6kSystemDeviceEthernetStaQueHigh, sm6kThreshold=sm6kThreshold, sm6kAnalysisCounterResult=sm6kAnalysisCounterResult, sm6kProgramSetableTestObjects=sm6kProgramSetableTestObjects, sm6kSystemMiscellaneousLocalSocket=sm6kSystemMiscellaneousLocalSocket, sm6kSystemDeviceTokenRingCurrentAddress=sm6kSystemDeviceTokenRingCurrentAddress, sm6kProgramControl=sm6kProgramControl, sm6kSystemDeviceTokenRingRxErrCnt=sm6kSystemDeviceTokenRingRxErrCnt, sm6kSystemDeviceListName=sm6kSystemDeviceListName, sm6kSystemDeviceX25TxTotalPackets=sm6kSystemDeviceX25TxTotalPackets, sm6kSystemPagingStatisticsPageStealsMinimum=sm6kSystemPagingStatisticsPageStealsMinimum, sm6kSystemDeviceTokenRingPktTxCnt=sm6kSystemDeviceTokenRingPktTxCnt, sm6kSystemDeviceX25InterruptConfirmPRx=sm6kSystemDeviceX25InterruptConfirmPRx, sm6kSystemDeviceX25RouteCalledUserData=sm6kSystemDeviceX25RouteCalledUserData, sm6kProgramMessages=sm6kProgramMessages, sm6kTrapDestination=sm6kTrapDestination, sm6kSystemDeviceX25RouteEntryName=sm6kSystemDeviceX25RouteEntryName, sm6kNetworkSessionRecentAverageResponseTime=sm6kNetworkSessionRecentAverageResponseTime, sm6kSystemDeviceEthernetOverrun=sm6kSystemDeviceEthernetOverrun, sm6kSystemDeviceX25TxReserved2=sm6kSystemDeviceX25TxReserved2, sm6kSystemDeviceTokenRingSrcClassAuthor=sm6kSystemDeviceTokenRingSrcClassAuthor, sm6kSystemPagingStatisticsPageScans=sm6kSystemPagingStatisticsPageScans, sm6kSystemDeviceX25ResetConfirmPRx=sm6kSystemDeviceX25ResetConfirmPRx, sm6kSystemDeviceEthernetNumber=sm6kSystemDeviceEthernetNumber, sm6kSystemDeviceTokenRingLastAttenCode=sm6kSystemDeviceTokenRingLastAttenCode, sm6kSystemPageSize=sm6kSystemPageSize, sm6kSystemFileSystemMounted=sm6kSystemFileSystemMounted, sm6kAnalysisEntry=sm6kAnalysisEntry, sm6kSystemMachine=sm6kSystemMachine, sm6kSystemDeviceX25InterruptPRx=sm6kSystemDeviceX25InterruptPRx, sm6kThresholdTable=sm6kThresholdTable, sm6kSystemUtilizationKernelSwapQueueMaximum=sm6kSystemUtilizationKernelSwapQueueMaximum, sm6kSystemReboot=sm6kSystemReboot, sm6kSystemDeviceX25ClearIndicationPRx=sm6kSystemDeviceX25ClearIndicationPRx, sm6kSystemUtilizationCPUBusyMinimum=sm6kSystemUtilizationCPUBusyMinimum, sm6kProgramControlNonForkCacheTime=sm6kProgramControlNonForkCacheTime, sm6kSystemDeviceTokenRing=sm6kSystemDeviceTokenRing, sm6kSystemDeviceX25TxReserved1=sm6kSystemDeviceX25TxReserved1, sm6kSystemPagingSpaceEntry=sm6kSystemPagingSpaceEntry, sm6kFilterMatchedSpecificTrap=sm6kFilterMatchedSpecificTrap, sm6kSystemDeviceX25RouteUserName=sm6kSystemDeviceX25RouteUserName, sm6kSystemDeviceEthernetWdtLost=sm6kSystemDeviceEthernetWdtLost, sm6kSystemBufferPoolMark=sm6kSystemBufferPoolMark, sm6kSystemDeviceX25Lvl2Connects=sm6kSystemDeviceX25Lvl2Connects, sm6kSystemUtilizationKernelSystemWrites=sm6kSystemUtilizationKernelSystemWrites, sm6kFilterThrottleState=sm6kFilterThrottleState, sm6kSystemDeviceX25CarrierLoss=sm6kSystemDeviceX25CarrierLoss, sm6kSystemDeviceX25BadNrFRx=sm6kSystemDeviceX25BadNrFRx, sm6kSystemDeviceX25Rx16x31=sm6kSystemDeviceX25Rx16x31, sm6kSystemFileSystem=sm6kSystemFileSystem, sm6kSystemDeviceX25TxReserved14=sm6kSystemDeviceX25TxReserved14, sm6kSystemDeviceTokenRingTxByteLcnt=sm6kSystemDeviceTokenRingTxByteLcnt, sm6kSystemDeviceEthernetRxFrameMcnt=sm6kSystemDeviceEthernetRxFrameMcnt, sm6kSystemDeviceListLocation=sm6kSystemDeviceListLocation, sm6kSystemDeviceX25SabmFTx=sm6kSystemDeviceX25SabmFTx, sm6kProgramLogNumFiles=sm6kProgramLogNumFiles, sm6kThresholdCounterGaugeDataAvg=sm6kThresholdCounterGaugeDataAvg, sm6kSystemDeviceTokenRingLastBeaconType=sm6kSystemDeviceTokenRingLastBeaconType, sm6kSystemDeviceX25RxReserved13=sm6kSystemDeviceX25RxReserved13, sm6kAnalysisStandardError=sm6kAnalysisStandardError, sm6kFilterMatchedTrapDescription=sm6kFilterMatchedTrapDescription, sm6kProgramMessagesTime=sm6kProgramMessagesTime, sm6kSystemDeviceX25Entry=sm6kSystemDeviceX25Entry, sm6kSystemRebootTimer=sm6kSystemRebootTimer, sm6kSystemDeviceTokenRingUpstreamPhysAddr=sm6kSystemDeviceTokenRingUpstreamPhysAddr, sm6kSystemDeviceTokenRingNumber=sm6kSystemDeviceTokenRingNumber, sm6kTrapDestinationMask=sm6kTrapDestinationMask, sm6kSystemPagingStatisticsTable=sm6kSystemPagingStatisticsTable, sm6kSystemPagingStatisticsPageInsFromPagingSpace=sm6kSystemPagingStatisticsPageInsFromPagingSpace, sm6kSystemUtilizationKernelSwapQueue=sm6kSystemUtilizationKernelSwapQueue, sm6kAdministrationFieldOwner=sm6kAdministrationFieldOwner, sm6kAnalysisPollTime=sm6kAnalysisPollTime, sm6kProgramDataCollectionMaxFileSize=sm6kProgramDataCollectionMaxFileSize, sm6kSystemPagingSpaceCount=sm6kSystemPagingSpaceCount, sm6kSystemDeviceX25RejFRx=sm6kSystemDeviceX25RejFRx, sm6kSystemMemScrub=sm6kSystemMemScrub, sm6kThresholdReArmEnterprise=sm6kThresholdReArmEnterprise, sm6kThresholdResponseCount=sm6kThresholdResponseCount, sm6kSystemDeviceX25SupportedFacilities=sm6kSystemDeviceX25SupportedFacilities, sm6kSystemDeviceTokenRingReceiveDataOffset=sm6kSystemDeviceTokenRingReceiveDataOffset, sm6kSystemDeviceX25NetworkId=sm6kSystemDeviceX25NetworkId, sm6kAlias=sm6kAlias, sm6kSystemDeviceX25InterruptConfirmPTx=sm6kSystemDeviceX25InterruptConfirmPTx, sm6kCommandStandardError=sm6kCommandStandardError, sm6kSystemUtilizationCPUIdle=sm6kSystemUtilizationCPUIdle, sm6kCommandDescription=sm6kCommandDescription, sm6kTrapDestinationName=sm6kTrapDestinationName, sm6kSystemDeviceTokenRingBeaconRxType=sm6kSystemDeviceTokenRingBeaconRxType, sm6kSystemProcessCount=sm6kSystemProcessCount, sm6kSystemDeviceList=sm6kSystemDeviceList, sm6kSystemDeviceTokenRingTxIntrCnt=sm6kSystemDeviceTokenRingTxIntrCnt, sm6kSystemProcessArguments=sm6kSystemProcessArguments, sm6kNetworkSessionTable=sm6kNetworkSessionTable, sm6kSystemDeviceX25NidTblHigh=sm6kSystemDeviceX25NidTblHigh, sm6kSystemUsersLoggedIn=sm6kSystemUsersLoggedIn, sm6kSystemUtilizationCPUUserMinimum=sm6kSystemUtilizationCPUUserMinimum, sm6kSystemDeviceX25DiagnosticPTx=sm6kSystemDeviceX25DiagnosticPTx, sm6kSystemDeviceX25T1Expirations=sm6kSystemDeviceX25T1Expirations, sm6kThresholdLastValue=sm6kThresholdLastValue, sm6kResourceUsageIcsw=sm6kResourceUsageIcsw, sm6kSystemUtilizationKernelSemaphoresMinimum=sm6kSystemUtilizationKernelSemaphoresMinimum, sm6kSystemDeviceX25RxUnknownSize=sm6kSystemDeviceX25RxUnknownSize, sm6kCommandDisplayStringResult=sm6kCommandDisplayStringResult, sm6kSystemPagingStatisticsPendingIOWaitsMinimum=sm6kSystemPagingStatisticsPendingIOWaitsMinimum, sm6kSystemDeviceX25DataPRx=sm6kSystemDeviceX25DataPRx, sm6kSystemDeviceX25T23Expirations=sm6kSystemDeviceX25T23Expirations, sm6kFilterThrottleDisarmTimer=sm6kFilterThrottleDisarmTimer, sm6kSystemUtilizationKernelForks=sm6kSystemUtilizationKernelForks, sm6kNetworkSessionInformation=sm6kNetworkSessionInformation, sm6kSystemPagingStatisticsIntervalLength=sm6kSystemPagingStatisticsIntervalLength, sm6kCommandCounterResult=sm6kCommandCounterResult, sm6kProgramControlSetableIpAddress=sm6kProgramControlSetableIpAddress, sm6kAdministrationTable=sm6kAdministrationTable, sm6kSystemProcessSignal=sm6kSystemProcessSignal, sm6kSystemDeviceX25InfoFRx=sm6kSystemDeviceX25InfoFRx, sm6kThresholdNoValueCount=sm6kThresholdNoValueCount, sm6kSystemDeviceEthernetRxQueHigh=sm6kSystemDeviceEthernetRxQueHigh, sm6kSystemDeviceEthernetMaxCollision=sm6kSystemDeviceEthernetMaxCollision, sm6kSystemUtilizationKernelSystemReadsMinimum=sm6kSystemUtilizationKernelSystemReadsMinimum)
mibBuilder.exportSymbols("SYSMON6K-MIB", sm6kSystemUtilizationIostatIntervalLength=sm6kSystemUtilizationIostatIntervalLength, sm6kSystemDeviceX25RestartConfirmPTx=sm6kSystemDeviceX25RestartConfirmPTx, sm6kSystemUtilizationCPUPollingInterval=sm6kSystemUtilizationCPUPollingInterval, sm6kAnalysisGaugeResult=sm6kAnalysisGaugeResult, sm6kNetworkSessionTransmitAttempts=sm6kNetworkSessionTransmitAttempts, sm6kSystemDeviceX25RouteCount=sm6kSystemDeviceX25RouteCount, sm6kFilterThrottleDisarmedTrapEnterprise=sm6kFilterThrottleDisarmedTrapEnterprise, sm6kSystemDeviceX25ClearRequestPTx=sm6kSystemDeviceX25ClearRequestPTx, sm6kFilterThrottleArmedCommand=sm6kFilterThrottleArmedCommand, sm6kSystemUtilizationKernelBytesWrittenMinimum=sm6kSystemUtilizationKernelBytesWrittenMinimum, sm6kSystemDeviceTokenRingBeaconStationPhysAddr=sm6kSystemDeviceTokenRingBeaconStationPhysAddr, sm6kAnalysisDisplayStringResult=sm6kAnalysisDisplayStringResult, sm6kFilterActivationTime=sm6kFilterActivationTime, sm6kSystemDeviceTokenRingLastSrcAddr=sm6kSystemDeviceTokenRingLastSrcAddr, sm6kSystemPagingStatisticsPageReclaimsMaximum=sm6kSystemPagingStatisticsPageReclaimsMaximum)
