#
# PySNMP MIB module ASCEND-MIBDMTALNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBDMTALNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, Counter64, MibIdentifier, ObjectIdentity, Bits, ModuleIdentity, NotificationType, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Counter64", "MibIdentifier", "ObjectIdentity", "Bits", "ModuleIdentity", "NotificationType", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibdmtAlDslNetworkProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 10))
mibdmtAlDslNetworkProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 10, 1), )
if mibBuilder.loadTexts: mibdmtAlDslNetworkProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibdmtAlDslNetworkProfileTable.setDescription('A list of mibdmtAlDslNetworkProfile profile entries.')
mibdmtAlDslNetworkProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1), ).setIndexNames((0, "ASCEND-MIBDMTALNET-MIB", "dmtAlDslNetworkProfile-Shelf-o"), (0, "ASCEND-MIBDMTALNET-MIB", "dmtAlDslNetworkProfile-Slot-o"), (0, "ASCEND-MIBDMTALNET-MIB", "dmtAlDslNetworkProfile-Item-o"))
if mibBuilder.loadTexts: mibdmtAlDslNetworkProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibdmtAlDslNetworkProfileEntry.setDescription('A mibdmtAlDslNetworkProfile entry containing objects that maps to the parameters of mibdmtAlDslNetworkProfile profile.')
dmtAlDslNetworkProfile_Shelf_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 1), Integer32()).setLabel("dmtAlDslNetworkProfile-Shelf-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Shelf_o.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Shelf_o.setDescription('')
dmtAlDslNetworkProfile_Slot_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 2), Integer32()).setLabel("dmtAlDslNetworkProfile-Slot-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Slot_o.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Slot_o.setDescription('')
dmtAlDslNetworkProfile_Item_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 3), Integer32()).setLabel("dmtAlDslNetworkProfile-Item-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Item_o.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Item_o.setDescription('')
dmtAlDslNetworkProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 4), DisplayString()).setLabel("dmtAlDslNetworkProfile-Name").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Name.setDescription('For future use. The current design does not use the name field but instead references Cell Based Dmt Adsl lines by the physical address; we may in the future support referencing Cell Based Dmt Adsl lines by name as well as by address. The name consists of a null terminated ascii string supplied by the user; it defaults to the ascii form of the Cell Based Dmt Adsl line physical address.')
dmtAlDslNetworkProfile_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("dmtAlDslNetworkProfile-PhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_PhysicalAddress_Shelf.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_PhysicalAddress_Shelf.setDescription('The number of the shelf that the addressed physical device resides on.')
dmtAlDslNetworkProfile_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("dmtAlDslNetworkProfile-PhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_PhysicalAddress_Slot.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_PhysicalAddress_Slot.setDescription('The number of the slot that the addressed physical device resides on.')
dmtAlDslNetworkProfile_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 7), Integer32()).setLabel("dmtAlDslNetworkProfile-PhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_PhysicalAddress_ItemNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_PhysicalAddress_ItemNumber.setDescription('A number that specifies an addressable entity within the context of shelf and slot.')
dmtAlDslNetworkProfile_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("dmtAlDslNetworkProfile-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Enabled.setDescription('TRUE if the line is enabled, otherwise FALSE.')
dmtAlDslNetworkProfile_SparingMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("manual", 2), ("automatic", 3)))).setLabel("dmtAlDslNetworkProfile-SparingMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_SparingMode.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_SparingMode.setDescription('Port sparing operational mode for this port.')
dmtAlDslNetworkProfile_ProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 9), Integer32()).setLabel("dmtAlDslNetworkProfile-ProfileNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_ProfileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_ProfileNumber.setDescription('For potential backwards compatibility. The current design consists of one line profile numbered 0.')
dmtAlDslNetworkProfile_IgnoreLineup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("systemDefined", 1), ("no", 2), ("yes", 3)))).setLabel("dmtAlDslNetworkProfile-IgnoreLineup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_IgnoreLineup.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_IgnoreLineup.setDescription('Ignore line up value for this port.')
dmtAlDslNetworkProfile_LineConfig_NailedGroup = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 11), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-NailedGroup").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_NailedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_NailedGroup.setDescription('A number that identifies the set of lines that makes up a nailed group. 0 means this line is not part of a nailed group.')
dmtAlDslNetworkProfile_LineConfig_VpSwitchingVpi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 55), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-VpSwitchingVpi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_VpSwitchingVpi.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_VpSwitchingVpi.setDescription('The Vpi to be used for the VP switching. Rest of the VPIs within valid vpi-vci-range will be used for the VC switching. Changes in this range will take effect immediately. THE USER SHOULD BE VERY CAREFUL WHILE CHANGING THIS VALUE BECAUSE ALL CONNECTIONS ON THE LIM WHERE THIS PORT BELONGS WILL BE DROPPED IN ORDER TO MAKE THIS NEW VALUE EFFECTIVE IMMEDIATELY.')
dmtAlDslNetworkProfile_LineConfig_RateAdaptModeUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operator", 1), ("automaticAtStartup", 2), ("dynamic", 3)))).setLabel("dmtAlDslNetworkProfile-LineConfig-RateAdaptModeUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_RateAdaptModeUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_RateAdaptModeUp.setDescription('The up stream rate adaptive mode of operation. ONLY OPERATOR_CONTROLLED and AUTOMATIC_AT_STARTUP are currently supported. ')
dmtAlDslNetworkProfile_LineConfig_RateAdaptModeDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operator", 1), ("automaticAtStartup", 2), ("dynamic", 3)))).setLabel("dmtAlDslNetworkProfile-LineConfig-RateAdaptModeDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_RateAdaptModeDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_RateAdaptModeDown.setDescription('The down stream rate adaptive mode of operation. ONLY OPERATOR_CONTROLLED and AUTOMATIC_AT_STARTUP are currently supported. ')
dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 21), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-RateAdaptRatioUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioUp.setDescription('The ratio in percent of excess bitrate distribution over the up stream fast and interleaved latencies. 100% - fast path , 0% - interleaved path. Valid ONLY in rate-adapt-mode = AUTOMATIC_AT_STARTUP or DYNAMIC . ')
dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 22), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-RateAdaptRatioDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioDown.setDescription('The ratio in percent of excess bitrate distribution over the down stream fast and interleaved latencies. 100% - fast path , 0% - interleaved path. Valid ONLY in rate-adapt-mode = AUTOMATIC_AT_STARTUP or DYNAMIC . ')
dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 56), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-MaxAggrPowerLevelUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelUp.setDescription('The maximum aggregate output power in dBm allowed on the line in the up stream direction. Increasing value may result in capacity boosting. ')
dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 57), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-MaxAggrPowerLevelDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelDown.setDescription('The maximum aggregate output power in dBm allowed on the line in the down stream direction. Increasing value may result in capacity boosting. ')
dmtAlDslNetworkProfile_LineConfig_MaxPowerSpectralDensity = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 25), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-MaxPowerSpectralDensity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_MaxPowerSpectralDensity.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_MaxPowerSpectralDensity.setDescription('The power spectral density in dBm/Hz allowed on the line. Decreasing the value may reduce capacity. Defined for downstream only. Actual value is negative.')
dmtAlDslNetworkProfile_LineConfig_LineCode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("autoSelect", 3), ("gLite", 2), ("ansiDmt", 4), ("gDmt", 5), ("legacyMode", 6), ("etsiAnnexB", 7)))).setLabel("dmtAlDslNetworkProfile-LineConfig-LineCode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_LineCode.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_LineCode.setDescription('The DMT line code is used for the training. NOTE: for the ADSL 12-ports LIM card only (which uses the ALCATEL chipset), setting the line code to ansi-dmt will provide better line rate than auto-select for an ansi-dmt link. Therefore, set the line code to ansi-dmt for an ansi-dmt link to obtain optimal rate.')
dmtAlDslNetworkProfile_LineConfig_LineLatencyDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("fast", 2), ("interleave", 3), ("both", 4)))).setLabel("dmtAlDslNetworkProfile-LineConfig-LineLatencyDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_LineLatencyDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_LineLatencyDown.setDescription('The DMT line latency to be used for the downstream data transport.')
dmtAlDslNetworkProfile_LineConfig_LineLatencyUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("fast", 2), ("interleave", 3), ("both", 4)))).setLabel("dmtAlDslNetworkProfile-LineConfig-LineLatencyUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_LineLatencyUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_LineLatencyUp.setDescription('The DMT line latency to be used for the upstream data transport.')
dmtAlDslNetworkProfile_LineConfig_TrellisEncoding = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("dmtAlDslNetworkProfile-LineConfig-TrellisEncoding").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_TrellisEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_TrellisEncoding.setDescription('TRUE if trellis encoding is to be enabled, FALSE otherwise.')
dmtAlDslNetworkProfile_LineConfig_GainDefault = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("n-20Db", 2), ("n-16Db", 1)))).setLabel("dmtAlDslNetworkProfile-LineConfig-GainDefault").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_GainDefault.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_GainDefault.setDescription('The default gain value in db to be used for the AGC.')
dmtAlDslNetworkProfile_LineConfig_UpstreamStartBin = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 64), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-UpstreamStartBin").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_UpstreamStartBin.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_UpstreamStartBin.setDescription('The starting upstream frequency bin.')
dmtAlDslNetworkProfile_LineConfig_UpstreamEndBin = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 65), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-UpstreamEndBin").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_UpstreamEndBin.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_UpstreamEndBin.setDescription('The ending upstream frequency bin.')
dmtAlDslNetworkProfile_LineConfig_DownstreamStartBin = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 66), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-DownstreamStartBin").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_DownstreamStartBin.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_DownstreamStartBin.setDescription('The starting downstream frequency bin.')
dmtAlDslNetworkProfile_LineConfig_DownstreamEndBin = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 67), Integer32()).setLabel("dmtAlDslNetworkProfile-LineConfig-DownstreamEndBin").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_DownstreamEndBin.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_DownstreamEndBin.setDescription('The ending downstream frequency bin.')
dmtAlDslNetworkProfile_LineConfig_LoopBack = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("analog", 2), ("digital", 3)))).setLabel("dmtAlDslNetworkProfile-LineConfig-LoopBack").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_LoopBack.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_LoopBack.setDescription('Configuration of different modem loopbacks.')
dmtAlDslNetworkProfile_LineConfig_BitSwapping = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("dmtAlDslNetworkProfile-LineConfig-BitSwapping").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_BitSwapping.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_BitSwapping.setDescription('Controls wether Bit-Swapping is enabled or no. On 12 port DMT card and 48 port G.lite card has not effect.')
dmtAlDslNetworkProfile_LineConfig_FbmDbmMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fbm", 1), ("dbm", 2)))).setLabel("dmtAlDslNetworkProfile-LineConfig-FbmDbmMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_FbmDbmMode.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_FbmDbmMode.setDescription('Controls wether the line is in Fixed-Bit-Map or Dual-Bit-Map mode. Only relevant for Annex-C cards.')
dmtAlDslNetworkProfile_LineConfig_AlcatelUs413Boost = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("new", 1), ("old", 2), ("unknown", 3)))).setLabel("dmtAlDslNetworkProfile-LineConfig-AlcatelUs413Boost").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_AlcatelUs413Boost.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_LineConfig_AlcatelUs413Boost.setDescription('Provides an increase in upstream rate in T1.413 mode for 24/48 Port Annex A boards based on the Globespan chip set when connected to an Alcatel CPE. Irrelevant for any other situtation. Use with extreme caution.')
dmtAlDslNetworkProfile_FastPathConfig_MinBitrateUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 26), Integer32()).setLabel("dmtAlDslNetworkProfile-FastPathConfig-MinBitrateUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_MinBitrateUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_MinBitrateUp.setDescription('The up stream minimum requested bitrate, in Kbps. NOT valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_FastPathConfig_MinBitrateDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 27), Integer32()).setLabel("dmtAlDslNetworkProfile-FastPathConfig-MinBitrateDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_MinBitrateDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_MinBitrateDown.setDescription('The down stream minimum requested bitrate, in Kbps. NOT valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 28), Integer32()).setLabel("dmtAlDslNetworkProfile-FastPathConfig-MaxBitrateUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateUp.setDescription('The up stream maximum requested bitrate, in Kbps. NOT valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 29), Integer32()).setLabel("dmtAlDslNetworkProfile-FastPathConfig-MaxBitrateDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateDown.setDescription('The down stream maximum requested bitrate, in Kbps. NOT valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 30), Integer32()).setLabel("dmtAlDslNetworkProfile-FastPathConfig-PlannedBitrateUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateUp.setDescription('The up stream rate that will be used, in Kbps. ONLY valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 31), Integer32()).setLabel("dmtAlDslNetworkProfile-FastPathConfig-PlannedBitrateDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateDown.setDescription('The down stream rate that will be used, in Kbps. ONLY valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 32), Integer32()).setLabel("dmtAlDslNetworkProfile-InterleavePathConfig-MinBitrateUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateUp.setDescription('The up stream minimum requested bitrate, in Kbps. NOT valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 33), Integer32()).setLabel("dmtAlDslNetworkProfile-InterleavePathConfig-MinBitrateDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateDown.setDescription('The down stream minimum requested bitrate, in Kbps. NOT valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 34), Integer32()).setLabel("dmtAlDslNetworkProfile-InterleavePathConfig-MaxBitrateUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateUp.setDescription('The up stream maximum requested bitrate, in Kbps. NOT valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 35), Integer32()).setLabel("dmtAlDslNetworkProfile-InterleavePathConfig-MaxBitrateDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateDown.setDescription('The down stream maximum requested bitrate, in Kbps. NOT valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 36), Integer32()).setLabel("dmtAlDslNetworkProfile-InterleavePathConfig-PlannedBitrateUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateUp.setDescription('The up stream rate that will be used, in Kbps. ONLY valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 37), Integer32()).setLabel("dmtAlDslNetworkProfile-InterleavePathConfig-PlannedBitrateDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateDown.setDescription('The down stream rate that will be used, in Kbps. ONLY valid in rate-adapt-mode = OPERATOR_CONTROLLED. ')
dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 38), Integer32()).setLabel("dmtAlDslNetworkProfile-InterleavePathConfig-MaxDelayUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayUp.setDescription('The maximum allowed up stream interleaver induced delay, in msec. ')
dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 39), Integer32()).setLabel("dmtAlDslNetworkProfile-InterleavePathConfig-MaxDelayDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayDown.setDescription('The maximum allowed down stream interleaver induced delay, in msec. ')
dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 40), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-TargetNoiseMarginUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginUp.setDescription('The up stream noise margin in dB that the modem shall achieve relative to BER 10^-7. ')
dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 41), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-TargetNoiseMarginDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginDown.setDescription('The down stream noise margin in dB that the modem shall achieve relative to BER 10^-7. ')
dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 42), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-MinNoiseMarginUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginUp.setDescription('The up stream minimum noise margin in dB that the modem shall tolerate relative to BER 10^-7. If current noise margin falls below this level the ATU shall attempt to increase far-end output power to get margin above this limit, by means of bit swapping. ')
dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 43), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-MinNoiseMarginDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginDown.setDescription('The down stream minimum noise margin in dB that the modem shall tolerate relative to BER 10^-7. If current noise margin falls below this level the ATU shall attempt to increase far-end output power to get margin above this limit, by means of bit swapping. ')
dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 44), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-MaxAddNoiseMarginUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginUp.setDescription('The up stream maximum noise margin in dB on top of the target-noise-margin that the modem shall tolerate relative to BER 10^-7. If current noise margin is above this level the ATU shall attempt to reduce far-end output power to get margin below this limit, by means of bit swapping. ')
dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 45), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-MaxAddNoiseMarginDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginDown.setDescription('The down stream maximum noise margin in dB on top of the target-noise-margin that the modem shall tolerate relative to BER 10^-7. If current noise margin is above this level the ATU shall attempt to reduce far-end output power to get margin below this limit, by means of bit swapping. ')
dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 46), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-RaDownshiftMarginUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginUp.setDescription('Valid ONLY in rate-adapt-mode = DYNAMIC. In dB. If current up stream noise margin is below this parameter for more than ra-downshift-int-up sec, modem shall attemp to rate adapt (bitrate down). ')
dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 47), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-RaDownshiftIntUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntUp.setDescription('Valid ONLY in rate-adapt-mode = DYNAMIC. In seconds. If current up stream noise margin is below ra-downshift-margin-up for more than this, modem shall attemp to rate adapt (bitrate down). ')
dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 48), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-RaDownshiftMarginDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginDown.setDescription('Valid ONLY in rate-adapt-mode = DYNAMIC. In dB. If current down stream noise margin is below this parameter for more than ra-downshift-int-down sec, modem shall attemp to rate adapt (bitrate down). ')
dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 49), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-RaDownshiftIntDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntDown.setDescription('Valid ONLY in rate-adapt-mode = DYNAMIC. In seconds. If current down stream noise margin is below ra-downshift-margin-down for more than this, modem shall attemp to rate adapt (bitrate down). ')
dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 50), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-RaUpshiftMarginUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginUp.setDescription('Valid ONLY in rate-adapt-mode = DYNAMIC. In dB. If current up stream noise margin is above this parameter for more than ra-downshift-int-up sec, modem shall attemp to rate adapt (bitrate up). ')
dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntUp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 51), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-RaUpshiftIntUp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntUp.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntUp.setDescription('Valid ONLY in rate-adapt-mode = DYNAMIC. In seconds. If current up stream noise margin is above ra-downshift-margin-up for more than this, modem shall attemp to rate adapt (bitrate up). ')
dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 52), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-RaUpshiftMarginDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginDown.setDescription('Valid ONLY in rate-adapt-mode = DYNAMIC. In dB. If current down stream noise margin is above this parameter for more than ra-downshift-int-down sec, modem shall attemp to rate adapt (bitrate up). ')
dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntDown = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 53), Integer32()).setLabel("dmtAlDslNetworkProfile-MarginConfig-RaUpshiftIntDown").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntDown.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntDown.setDescription('Valid ONLY in rate-adapt-mode = DYNAMIC. In seconds. If current down stream noise margin is above ra-downshift-margin-down for more than this, modem shall attemp to rate adapt (bitrate up). ')
dmtAlDslNetworkProfile_ThreshProfile = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 72), DisplayString()).setLabel("dmtAlDslNetworkProfile-ThreshProfile").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_ThreshProfile.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_ThreshProfile.setDescription('The name of the DSL-THRESHOLD profile which applies to this ADSL line. ')
dmtAlDslNetworkProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 10, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("dmtAlDslNetworkProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: dmtAlDslNetworkProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBDMTALNET-MIB", dmtAlDslNetworkProfile_PhysicalAddress_Shelf=dmtAlDslNetworkProfile_PhysicalAddress_Shelf, dmtAlDslNetworkProfile_LineConfig_LoopBack=dmtAlDslNetworkProfile_LineConfig_LoopBack, dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginUp=dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginUp, dmtAlDslNetworkProfile_LineConfig_RateAdaptModeDown=dmtAlDslNetworkProfile_LineConfig_RateAdaptModeDown, DisplayString=DisplayString, dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntDown=dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntDown, dmtAlDslNetworkProfile_LineConfig_VpSwitchingVpi=dmtAlDslNetworkProfile_LineConfig_VpSwitchingVpi, mibdmtAlDslNetworkProfileTable=mibdmtAlDslNetworkProfileTable, dmtAlDslNetworkProfile_ProfileNumber=dmtAlDslNetworkProfile_ProfileNumber, dmtAlDslNetworkProfile_LineConfig_FbmDbmMode=dmtAlDslNetworkProfile_LineConfig_FbmDbmMode, dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateDown=dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateDown, dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginDown=dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginDown, dmtAlDslNetworkProfile_Enabled=dmtAlDslNetworkProfile_Enabled, dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelUp=dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelUp, dmtAlDslNetworkProfile_Shelf_o=dmtAlDslNetworkProfile_Shelf_o, dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateDown=dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateDown, dmtAlDslNetworkProfile_ThreshProfile=dmtAlDslNetworkProfile_ThreshProfile, dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginDown=dmtAlDslNetworkProfile_MarginConfig_RaUpshiftMarginDown, dmtAlDslNetworkProfile_PhysicalAddress_Slot=dmtAlDslNetworkProfile_PhysicalAddress_Slot, dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayUp=dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayUp, dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayDown=dmtAlDslNetworkProfile_InterleavePathConfig_MaxDelayDown, dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginDown=dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginDown, dmtAlDslNetworkProfile_FastPathConfig_MinBitrateDown=dmtAlDslNetworkProfile_FastPathConfig_MinBitrateDown, dmtAlDslNetworkProfile_LineConfig_RateAdaptModeUp=dmtAlDslNetworkProfile_LineConfig_RateAdaptModeUp, mibdmtAlDslNetworkProfile=mibdmtAlDslNetworkProfile, dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginUp=dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginUp, dmtAlDslNetworkProfile_LineConfig_MaxPowerSpectralDensity=dmtAlDslNetworkProfile_LineConfig_MaxPowerSpectralDensity, dmtAlDslNetworkProfile_LineConfig_GainDefault=dmtAlDslNetworkProfile_LineConfig_GainDefault, dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginDown=dmtAlDslNetworkProfile_MarginConfig_TargetNoiseMarginDown, dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateUp=dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateUp, dmtAlDslNetworkProfile_FastPathConfig_MinBitrateUp=dmtAlDslNetworkProfile_FastPathConfig_MinBitrateUp, dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateDown=dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateDown, dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateDown=dmtAlDslNetworkProfile_FastPathConfig_PlannedBitrateDown, dmtAlDslNetworkProfile_PhysicalAddress_ItemNumber=dmtAlDslNetworkProfile_PhysicalAddress_ItemNumber, dmtAlDslNetworkProfile_LineConfig_LineLatencyUp=dmtAlDslNetworkProfile_LineConfig_LineLatencyUp, dmtAlDslNetworkProfile_IgnoreLineup=dmtAlDslNetworkProfile_IgnoreLineup, dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateUp=dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateUp, dmtAlDslNetworkProfile_LineConfig_DownstreamEndBin=dmtAlDslNetworkProfile_LineConfig_DownstreamEndBin, dmtAlDslNetworkProfile_LineConfig_LineCode=dmtAlDslNetworkProfile_LineConfig_LineCode, dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntUp=dmtAlDslNetworkProfile_MarginConfig_RaUpshiftIntUp, dmtAlDslNetworkProfile_LineConfig_UpstreamStartBin=dmtAlDslNetworkProfile_LineConfig_UpstreamStartBin, dmtAlDslNetworkProfile_Name=dmtAlDslNetworkProfile_Name, dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioUp=dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioUp, dmtAlDslNetworkProfile_LineConfig_DownstreamStartBin=dmtAlDslNetworkProfile_LineConfig_DownstreamStartBin, dmtAlDslNetworkProfile_Action_o=dmtAlDslNetworkProfile_Action_o, mibdmtAlDslNetworkProfileEntry=mibdmtAlDslNetworkProfileEntry, dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelDown=dmtAlDslNetworkProfile_LineConfig_MaxAggrPowerLevelDown, dmtAlDslNetworkProfile_LineConfig_LineLatencyDown=dmtAlDslNetworkProfile_LineConfig_LineLatencyDown, dmtAlDslNetworkProfile_LineConfig_TrellisEncoding=dmtAlDslNetworkProfile_LineConfig_TrellisEncoding, dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginDown=dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginDown, dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginUp=dmtAlDslNetworkProfile_MarginConfig_MaxAddNoiseMarginUp, dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioDown=dmtAlDslNetworkProfile_LineConfig_RateAdaptRatioDown, dmtAlDslNetworkProfile_Slot_o=dmtAlDslNetworkProfile_Slot_o, dmtAlDslNetworkProfile_Item_o=dmtAlDslNetworkProfile_Item_o, dmtAlDslNetworkProfile_SparingMode=dmtAlDslNetworkProfile_SparingMode, dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateUp=dmtAlDslNetworkProfile_FastPathConfig_MaxBitrateUp, dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateUp=dmtAlDslNetworkProfile_InterleavePathConfig_MinBitrateUp, dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateDown=dmtAlDslNetworkProfile_InterleavePathConfig_PlannedBitrateDown, dmtAlDslNetworkProfile_LineConfig_BitSwapping=dmtAlDslNetworkProfile_LineConfig_BitSwapping, dmtAlDslNetworkProfile_LineConfig_NailedGroup=dmtAlDslNetworkProfile_LineConfig_NailedGroup, dmtAlDslNetworkProfile_LineConfig_AlcatelUs413Boost=dmtAlDslNetworkProfile_LineConfig_AlcatelUs413Boost, dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateUp=dmtAlDslNetworkProfile_InterleavePathConfig_MaxBitrateUp, dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginUp=dmtAlDslNetworkProfile_MarginConfig_MinNoiseMarginUp, dmtAlDslNetworkProfile_LineConfig_UpstreamEndBin=dmtAlDslNetworkProfile_LineConfig_UpstreamEndBin, dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginUp=dmtAlDslNetworkProfile_MarginConfig_RaDownshiftMarginUp, dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntDown=dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntDown, dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntUp=dmtAlDslNetworkProfile_MarginConfig_RaDownshiftIntUp)
