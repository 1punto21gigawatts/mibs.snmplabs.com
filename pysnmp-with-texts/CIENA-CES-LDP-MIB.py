#
# PySNMP MIB module CIENA-CES-LDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-LDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
cienaCesNotifications, cienaCesConfig = mibBuilder.importSymbols("CIENA-SMI", "cienaCesNotifications", "cienaCesConfig")
CienaGlobalState, = mibBuilder.importSymbols("CIENA-TC", "CienaGlobalState")
MplsLdpIdentifier, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLdpIdentifier")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, NotificationType, Integer32, MibIdentifier, Gauge32, iso, Counter64, Bits, ObjectIdentity, IpAddress, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "NotificationType", "Integer32", "MibIdentifier", "Gauge32", "iso", "Counter64", "Bits", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, MacAddress, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TextualConvention", "TruthValue", "DisplayString")
cienaCesLdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17))
cienaCesLdpMIB.setRevisions(('2016-07-15 00:00', '2016-07-11 00:00', '2013-04-18 00:00', '2011-02-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesLdpMIB.setRevisionsDescriptions(('Modified attribute cienaCesLdpGROperStatus to cienaCesLdpGRMode under cienaCesLdpObjects.', 'Added support for LDP Graceful Restart functionality.', 'Fixed miscellaneous typos and descriptions.', 'Initial version.',))
if mibBuilder.loadTexts: cienaCesLdpMIB.setLastUpdated('201607150000Z')
if mibBuilder.loadTexts: cienaCesLdpMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: cienaCesLdpMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesLdpMIB.setDescription('This MIB module is for the Extension of the LDP MIB for CIENA Products')
cienaCesLdpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1))
cienaCesLdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1))
cienaCesLdp = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2))
cienaCesLdpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 1), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpAdminStatus.setDescription('Globally enable or disable LDP.')
cienaCesLdpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpOperStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpOperStatus.setDescription('Current operational state of LDP.')
cienaCesLdpHelloHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpHelloHoldTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpHelloHoldTime.setDescription('The 16-bit integer value which is the proposed global hello hold timer (in seconds) for LDP. An LSR maintains a record of Hellos received from potential peers. This object represents the Hold Time in the Common Hello Parameters TLV of the Hello Message. A value of 65535 means infinite (i.e., wait forever). All other values represent the amount of time in seconds to wait for a Hello Message. Setting the hold time to a value smaller than 15 is not recommended, although not forbidden according to RFC3036.')
cienaCesLdpKeepAliveHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpKeepAliveHoldTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpKeepAliveHoldTime.setDescription('The 16-bit integer value which is the proposed global keep alive hold timer for LDP.')
cienaCesLdpGRAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 5), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpGRAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpGRAdminStatus.setDescription('LDP Graceful restart Admin status (Enabled/Disabled).')
cienaCesLdpGRMode = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("helpNeighbor", 1), ("restartCapable", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpGRMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpGRMode.setDescription('LDP Graceful restart Operational status.')
cienaCesLdpReconnectTime = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600000)).clone(60000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpReconnectTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpReconnectTime.setDescription('The period of time that the local node takes to restart LDP and bring up the LDP sessions.This is advertised to neighbors in the FT Session TLV in Initialization messages. The value chosen should be large enough for LDP to be terminated and restarted. For devices which only act as the Helper node, this timer is unused and will return value 0.')
cienaCesLdpRecoveryTime = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600000)).clone(180000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpRecoveryTime.setDescription('The period of time that the local node is willing to retain its MPLS forwarding state, if any,that it preserved across the restart. This field is used to calculate the Recovery Time for both Control Plane and Control Channel restarts. It is used to calculate the Recovery Time advertised in the FT Session TLV in the Initialization message sent to the neighbor. For devices which only act as the Helper node, this timer is unused and will return value 0.')
cienaCesLdpMaxPeerReconnect = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600000)).clone(180000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpMaxPeerReconnect.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpMaxPeerReconnect.setDescription('The maximum period of time that LDP should wait for a restart capable neighbor to restore an LDP session. LDP waits for the minimum of this time and the Reconnect Timeout advertised in the FT Session TLV in the Initialization message from the neighbor.')
cienaCesLdpMaxPeerRecovery = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600000)).clone(240000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpMaxPeerRecovery.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpMaxPeerRecovery.setDescription('The maximum period of time that LDP should wait for a restart capable neighbor to refresh Label Mappings previously received from that neighbor before deleting the stale bindings. LDP waits for the minimum of this time and the Recovery Time advertised in the FT Session TLV in the Initialization message from the neighbor. This value is not used to set the Recovery Time advertised in the FT Session TLV in the Initialization message sent to the neighbor.')
cienaCesLdpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 1), )
if mibBuilder.loadTexts: cienaCesLdpSessionTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpSessionTable.setDescription('A table of Sessions between the LDP Entities and LDP Peers. Each row in this table represents a single session.')
cienaCesLdpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 1, 1), ).setIndexNames((0, "CIENA-CES-LDP-MIB", "cienaCesLdpEntityLdpId"), (0, "CIENA-CES-LDP-MIB", "cienaCesLdpEntityIndex"), (0, "CIENA-CES-LDP-MIB", "cienaCesLdpPeerLdpId"))
if mibBuilder.loadTexts: cienaCesLdpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpSessionEntry.setDescription("An entry in this table represents information on a single session between an LDP Entity and LDP Peer. The information contained in a row is read-only. Note: The Path Vector Limit for the Session is the value that is configured in the corresponding mplsLdpEntityEntry. The Peer's Path Vector Limit is in the mplsLdpPeerPathVectorLimit object in the mplsLdpPeerTable. Values that may differ from those configured are noted in the objects of this table, the mplsLdpAtmSessionTable and the mplsLdpFrameRelaySessionTable. A value differs if it was negotiated between the Entity and the Peer. Values may or may not be negotiated. For example, if the values are the same then no negotiation takes place. If they are negotiated, then they may differ.")
cienaCesLdpEntityLdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 1, 1, 1), MplsLdpIdentifier())
if mibBuilder.loadTexts: cienaCesLdpEntityLdpId.setReference('RFC3036, LDP Specification, Section on LDP Identifiers.')
if mibBuilder.loadTexts: cienaCesLdpEntityLdpId.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpEntityLdpId.setDescription('The LDP identifier. The first four octets encode an IP address assigned to the LSR, and the last two octets identify a specific label space within the LSR.')
cienaCesLdpEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cienaCesLdpEntityIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpEntityIndex.setDescription('This index is used as a secondary index to uniquely identify this row. A secondary index (this object) is meaningful to some but not all, LDP implementations. For example, an LDP implementation that uses PPP would use this index to differentiate PPP sub-links. Another way to use this index is to assign it the value of ifIndex.')
cienaCesLdpPeerLdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 1, 1, 3), MplsLdpIdentifier())
if mibBuilder.loadTexts: cienaCesLdpPeerLdpId.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpPeerLdpId.setDescription('The LDP identifier of this LDP Peer.')
cienaCesLdpSessionConfiguredHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpSessionConfiguredHoldTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpSessionConfiguredHoldTime.setDescription('The locally configured keepalive hold time for this session, in seconds. Note that the value of this field reflects configuration at the time of session initialization; this may differ from the configuration that would apply to a new session, if configuration has changed since this session was initialized.')
cienaCesLdpSessionPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpSessionPeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpSessionPeerHoldTime.setDescription("The peer's advertised keepalive hold time for this session in seconds. Note that the value of this field reflects the peer's configuration at the time of session initialization; this may differ from the configuration that would apply to a new session, if the peer's configuration has changed since this session was initialized.")
cienaCesLdpSessionHoldTimeInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpSessionHoldTimeInUse.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpSessionHoldTimeInUse.setDescription('The keepalive hold time that is currently in use for this session, in seconds.')
cienaCesLdpHelloAdjacencyTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 2), )
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyTable.setDescription('A table of Hello Adjacencies for Sessions.')
cienaCesLdpHelloAdjacencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 2, 1), ).setIndexNames((0, "CIENA-CES-LDP-MIB", "cienaCesLdpEntityLdpId"), (0, "CIENA-CES-LDP-MIB", "cienaCesLdpEntityIndex"), (0, "CIENA-CES-LDP-MIB", "cienaCesLdpPeerLdpId"), (0, "CIENA-CES-LDP-MIB", "cienaCesLdpHelloAdjacencyIndex"))
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyEntry.setDescription('Each row represents a single LDP Hello Adjacency. An LDP Session can have one or more Hello Adjacencies.')
cienaCesLdpHelloAdjacencyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyIndex.setDescription('An identifier for this specific adjacency.')
cienaCesLdpHelloAdjacencyConfiguredHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyConfiguredHoldTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyConfiguredHoldTime.setDescription('The locally configured hello hold time for this adjacency, in seconds.')
cienaCesLdpHelloAdjacencyPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 17, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyPeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesLdpHelloAdjacencyPeerHoldTime.setDescription("The peer's advertised hello hold time for this adjacency, in seconds.")
mibBuilder.exportSymbols("CIENA-CES-LDP-MIB", cienaCesLdpHelloAdjacencyPeerHoldTime=cienaCesLdpHelloAdjacencyPeerHoldTime, cienaCesLdp=cienaCesLdp, cienaCesLdpMaxPeerRecovery=cienaCesLdpMaxPeerRecovery, PYSNMP_MODULE_ID=cienaCesLdpMIB, cienaCesLdpSessionPeerHoldTime=cienaCesLdpSessionPeerHoldTime, cienaCesLdpOperStatus=cienaCesLdpOperStatus, cienaCesLdpHelloAdjacencyEntry=cienaCesLdpHelloAdjacencyEntry, cienaCesLdpReconnectTime=cienaCesLdpReconnectTime, cienaCesLdpPeerLdpId=cienaCesLdpPeerLdpId, cienaCesLdpObjects=cienaCesLdpObjects, cienaCesLdpSessionConfiguredHoldTime=cienaCesLdpSessionConfiguredHoldTime, cienaCesLdpSessionTable=cienaCesLdpSessionTable, cienaCesLdpHelloAdjacencyTable=cienaCesLdpHelloAdjacencyTable, cienaCesLdpMIBObjects=cienaCesLdpMIBObjects, cienaCesLdpHelloHoldTime=cienaCesLdpHelloHoldTime, cienaCesLdpKeepAliveHoldTime=cienaCesLdpKeepAliveHoldTime, cienaCesLdpHelloAdjacencyIndex=cienaCesLdpHelloAdjacencyIndex, cienaCesLdpHelloAdjacencyConfiguredHoldTime=cienaCesLdpHelloAdjacencyConfiguredHoldTime, cienaCesLdpEntityLdpId=cienaCesLdpEntityLdpId, cienaCesLdpEntityIndex=cienaCesLdpEntityIndex, cienaCesLdpSessionHoldTimeInUse=cienaCesLdpSessionHoldTimeInUse, cienaCesLdpMIB=cienaCesLdpMIB, cienaCesLdpAdminStatus=cienaCesLdpAdminStatus, cienaCesLdpGRMode=cienaCesLdpGRMode, cienaCesLdpSessionEntry=cienaCesLdpSessionEntry, cienaCesLdpMaxPeerReconnect=cienaCesLdpMaxPeerReconnect, cienaCesLdpGRAdminStatus=cienaCesLdpGRAdminStatus, cienaCesLdpRecoveryTime=cienaCesLdpRecoveryTime)
