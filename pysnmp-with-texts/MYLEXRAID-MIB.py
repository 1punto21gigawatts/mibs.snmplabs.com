#
# PySNMP MIB module MYLEXRAID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MYLEXRAID-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, ObjectIdentity, Unsigned32, ModuleIdentity, iso, TimeTicks, Bits, Counter32, Gauge32, MibIdentifier, NotificationType, NotificationType, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "iso", "TimeTicks", "Bits", "Counter32", "Gauge32", "MibIdentifier", "NotificationType", "NotificationType", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDate(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

mylex = MibIdentifier((1, 3, 6, 1, 4, 1, 1608))
dmtfStd = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1))
dmtfComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1, 1))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1))
tControllerInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2), )
if mibBuilder.loadTexts: tControllerInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tControllerInformation.setDescription('This group provides Controller Information.')
eControllerInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a2ControllerNumber"))
if mibBuilder.loadTexts: eControllerInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eControllerInformation.setDescription('')
a2ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2ControllerNumber.setDescription('Controller Number assigned to this controller by the device driver.')
a2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 128))).clone(namedValues=NamedValues(("vFunctional", 1), ("vNon-functional", 2), ("vNotPresent", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: a2OperationalState.setDescription('Operational state of this controller as seen by the device driver.')
a2FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2FirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a2FirmwareRevision.setDescription('Controller Firmware Revision.')
a2ConfiguredChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ConfiguredChannels.setStatus('mandatory')
if mibBuilder.loadTexts: a2ConfiguredChannels.setDescription('Number of Channels that are part of controller configuration.')
a2ActualChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ActualChannels.setStatus('mandatory')
if mibBuilder.loadTexts: a2ActualChannels.setDescription('Number of Channels that are physically present on-board the controller.')
a2MaximumLogicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumLogicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumLogicalDrives.setDescription('Maximum number of logical drives that can be configured on this controller.')
a2MaximumTargetsPerChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumTargetsPerChannel.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumTargetsPerChannel.setDescription('Maximum Number of Physical Target IDs supported per Channel')
a2MaximumTaggedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumTaggedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumTaggedRequests.setDescription('Maximum Number of Tagged requests that may be sent to a Hard disk device by Controller Firmware.')
a2MaximumDataTransferSizePerIoRequestInK = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumDataTransferSizePerIoRequestInK.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumDataTransferSizePerIoRequestInK.setDescription('Maximum amount of data that can be transferred per a single IO request - in KB.')
a2MaximumConcurrentCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumConcurrentCommands.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumConcurrentCommands.setDescription('Maximum number of requests that can be sent to the controller simultaneouly.')
a2RebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2RebuildRate.setStatus('mandatory')
if mibBuilder.loadTexts: a2RebuildRate.setDescription('Value of Rebuild Rate.')
a2LogicalSectorSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalSectorSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: a2LogicalSectorSizeInBytes.setDescription('Logical Sector Size in Bytes (Default: 512 bytes).')
a2PhysicalSectorSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PhysicalSectorSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: a2PhysicalSectorSizeInBytes.setDescription('Physical Sector Size in Bytes (Default: 512 bytes).')
a2CacheLineSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2CacheLineSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: a2CacheLineSizeInBytes.setDescription('Cache Line Size in Bytes.')
a2CacheSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2CacheSizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a2CacheSizeInMb.setDescription('Size of Controller Cache Module - in MB.')
a2CacheMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 65, 66, 67, 68, 129, 130, 131, 132, 255))).clone(namedValues=NamedValues(("vDram", 1), ("vEdram", 2), ("vEdo", 3), ("vSdram", 4), ("vDram-parity", 65), ("vEdram-parity", 66), ("vEdo-parity", 67), ("vSdram-parity", 68), ("vDram-ecc", 129), ("vEdram-ecc", 130), ("vEdo-ecc", 131), ("vSdram-ecc", 132), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2CacheMemoryType.setStatus('mandatory')
if mibBuilder.loadTexts: a2CacheMemoryType.setDescription('Controller Cache Memory Type.')
a2EpromSizeInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2EpromSizeInKb.setStatus('mandatory')
if mibBuilder.loadTexts: a2EpromSizeInKb.setDescription('Size of Controller EPROM Module - in KB.')
a2BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("vEisa", 1), ("vMca", 2), ("vPci", 3), ("vVesa", 4), ("vIsa", 5), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2BusType.setStatus('mandatory')
if mibBuilder.loadTexts: a2BusType.setDescription('Controller - System Bus Interface Type.')
a2ControllerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 128, 255))).clone(namedValues=NamedValues(("vRaid", 1), ("vHba", 128), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ControllerClass.setStatus('mandatory')
if mibBuilder.loadTexts: a2ControllerClass.setDescription('Controller Class Type.')
a2ControllerModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 255))).clone(namedValues=NamedValues(("vDac960e", 1), ("vDac960m", 8), ("vDac960pd", 16), ("vDac960pl", 17), ("vDac960pdu", 18), ("vDac960pe", 19), ("vDac960pg", 20), ("vDac960pj", 21), ("vDac960ptl0", 22), ("vDac960pr", 23), ("vDac960prl", 24), ("vDac960pt", 25), ("vDac1164p", 26), ("vDac960ptl1", 27), ("vExtremeraid2000", 28), ("vExtremeraid3000", 29), ("vAcceleraid352", 30), ("vAcceleraid170", 31), ("vAcceleraid160", 32), ("vExtremeraid4000", 35), ("vExtremeraid5000", 36), ("vAcceleraid500", 37), ("vAcceleraid400", 38), ("vDac960s", 96), ("vDac960su", 97), ("vDac960sx", 98), ("vDac960sf", 99), ("vDac960ss", 100), ("vDac960fl", 101), ("vDac960ll", 102), ("vDac960ff", 103), ("vFcarray", 104), ("vDac960mfl", 105), ("vDac960mff", 106), ("vDacffx", 107), ("vDacffx2", 109), ("vBt-440", 129), ("vBt-440c", 130), ("vBt-445", 131), ("vBt-445c", 132), ("vBt-44xc", 133), ("vBt-445s", 134), ("vBt-640", 136), ("vBt-640a", 137), ("vBt-646", 138), ("vBt-646d", 139), ("vBt-646s", 140), ("vBt-742", 144), ("vBt-742a", 145), ("vBt-747", 146), ("vBt-747d", 147), ("vBt-747s", 148), ("vBt-74xc", 149), ("vBt-757", 150), ("vBt-757d", 151), ("vBt-757s", 152), ("vBt-757cd", 153), ("vBt-75xc", 154), ("vBt-747c", 155), ("vBt-757c", 156), ("vBt-540", 160), ("vBt-540c", 161), ("vBt-542", 162), ("vBt-542b", 163), ("vBt-542c", 164), ("vBt-542d", 165), ("vBt-545", 166), ("vBt-545c", 167), ("vBt-545s", 168), ("vBt-54xc", 169), ("vBt-946", 176), ("vBt-946c", 177), ("vBt-948", 178), ("vBt-948c", 179), ("vBt-956", 180), ("vBt-956c", 181), ("vBt-958", 182), ("vBt-958c", 183), ("vBt-958d", 184), ("vBt-956cd", 185), ("vBt-958cd", 186), ("vBt930", 192), ("vBt932", 193), ("vBt950", 194), ("vBt952", 195), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ControllerModel.setStatus('mandatory')
if mibBuilder.loadTexts: a2ControllerModel.setDescription('Controller Model Type.')
a2SystemBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemBusNumber.setDescription('System Bus Number, for the bus the controller is interfacing with. This value is supplied by the Operating system and may not be defined for all operating systems.')
a2SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 22), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2SlotNumber.setDescription('Slot Number where the controller is physically present. Defined for EISA and MCA controller only. ')
a2InterruptVectorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 23), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterruptVectorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2InterruptVectorNumber.setDescription('Interrupt Vector Number being used by the controller. This value is a mapped IRQ supplied by Operating System and may not be same as the actual Interrupt Vector.')
a2InterruptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("vEdge", 0), ("vLevel", 1), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterruptMode.setStatus('mandatory')
if mibBuilder.loadTexts: a2InterruptMode.setDescription('Interrupt Mode - Edge/Level.')
a2NumberOfPhysicalDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 25), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfPhysicalDevices.setStatus('mandatory')
if mibBuilder.loadTexts: a2NumberOfPhysicalDevices.setDescription('Number Of Physical Devices detected on this controller.')
a2NumberOfPhysicalDevicesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 26), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfPhysicalDevicesOffline.setStatus('mandatory')
if mibBuilder.loadTexts: a2NumberOfPhysicalDevicesOffline.setDescription('Number of Physical Devices, whose operational state is Offline.')
a2NumberOfLogicalDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 27), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfLogicalDevices.setStatus('mandatory')
if mibBuilder.loadTexts: a2NumberOfLogicalDevices.setDescription('Number of Logical Devices currently configured.')
a2NumberOfLogicalDevicesCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 28), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfLogicalDevicesCritical.setStatus('mandatory')
if mibBuilder.loadTexts: a2NumberOfLogicalDevicesCritical.setDescription('Number of Logical Devices, whose operational state is Critical.')
a2NumberOfLogicalDevicesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 29), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2NumberOfLogicalDevicesOffline.setStatus('mandatory')
if mibBuilder.loadTexts: a2NumberOfLogicalDevicesOffline.setDescription('Number of Logical Devices, whose operational state is Offline.')
a2FaultManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("vNotPresent", 0), ("vAemi", 1), ("vOem1", 2), ("vOem2", 4), ("vOem3", 8), ("vConner", 16), ("vSafte", 32), ("vSes", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2FaultManagementType.setStatus('mandatory')
if mibBuilder.loadTexts: a2FaultManagementType.setDescription('Controller Fault Management Type.')
a2ArrayInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 31), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ArrayInformation.setStatus('mandatory')
if mibBuilder.loadTexts: a2ArrayInformation.setDescription('Information about Array(s) definition. The information is provided in Channel-Target combination form.')
a2LogicalDriveReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 32), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalDriveReadRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a2LogicalDriveReadRequests.setDescription('Number of Read Requests to Logical Drives.')
a2DataReadFromLogicalDrivesInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 33), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DataReadFromLogicalDrivesInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a2DataReadFromLogicalDrivesInMb.setDescription('Amount of Data Read from all Logical Drives - in MB.')
a2LogicalDriveWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 34), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalDriveWriteRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a2LogicalDriveWriteRequests.setDescription('Number of Write Requests to Logical Drives.')
a2DataWrittenToLogicalDrivesInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 35), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DataWrittenToLogicalDrivesInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a2DataWrittenToLogicalDrivesInMb.setDescription('Amount of data written to all Logical Drives - in MB.')
a2LogicalDrivesReadCacheHitPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 36), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalDrivesReadCacheHitPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: a2LogicalDrivesReadCacheHitPercentage.setDescription('Logical Drives Read Data Cache Hit Rate.')
a2PhysicalDriveReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 37), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PhysicalDriveReadRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a2PhysicalDriveReadRequests.setDescription('Number of Read Requests to all physical drives.')
a2DataReadFromPhysicalDrivesInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 38), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DataReadFromPhysicalDrivesInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a2DataReadFromPhysicalDrivesInMb.setDescription('Amount of Data Read from all physical drives - in MB.')
a2PhysicalDriveWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 39), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PhysicalDriveWriteRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a2PhysicalDriveWriteRequests.setDescription('Number of Write Requests to all physical drives on this controll r.')
a2DataWrittenToPhysicalDrivesInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 40), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DataWrittenToPhysicalDrivesInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a2DataWrittenToPhysicalDrivesInMb.setDescription('Amount of data written all physical drives on this controller- in MB.')
a2StorageworksCabinetStatusOnChannel0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOk", 1), ("vNotOk", 2), ("vNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel0.setStatus('mandatory')
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel0.setDescription('StorageWorks Cabinet Status on Channel 0')
a2StorageworksCabinetStatusOnChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOk", 1), ("vNotOk", 2), ("vNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel1.setStatus('mandatory')
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel1.setDescription('StorageWorks Cabinet Status on Channel 1')
a2StorageworksCabinetStatusOnChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOk", 1), ("vNotOk", 2), ("vNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel2.setStatus('mandatory')
if mibBuilder.loadTexts: a2StorageworksCabinetStatusOnChannel2.setDescription('StorageWorks Cabinet Status on Channel 2')
a2BatteryBackupUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vNotPresent", 0), ("vPresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2BatteryBackupUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a2BatteryBackupUnitStatus.setDescription('Battery Backup Unit Status.')
a2PartnerControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 45), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PartnerControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2PartnerControllerNumber.setDescription('Controller Number of the Partner Controller.')
a2WwName = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 46), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2WwName.setStatus('mandatory')
if mibBuilder.loadTexts: a2WwName.setDescription('Controller World Wide Name.')
a2HostControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 47), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2HostControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2HostControllerNumber.setDescription('Host Controller Number.')
a2HostChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 48), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2HostChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2HostChannelNumber.setDescription('Host Channel Number.')
a2HostTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 2, 1, 49), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2HostTargetId.setStatus('mandatory')
if mibBuilder.loadTexts: a2HostTargetId.setDescription('Host Target ID.')
tLogicalDriveInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3), )
if mibBuilder.loadTexts: tLogicalDriveInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tLogicalDriveInformation.setDescription('Provides information about Logical Drive Configuration.')
eLogicalDriveInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a3ControllerNumber"), (0, "MYLEXRAID-MIB", "a3LogicalDriveNumber"))
if mibBuilder.loadTexts: eLogicalDriveInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eLogicalDriveInformation.setDescription('')
a3ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ControllerNumber.setDescription('Controller Number - used as a key.')
a3LogicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3LogicalDriveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3LogicalDriveNumber.setDescription('Logical Drive Number - used as a Key.')
a3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 128, 255))).clone(namedValues=NamedValues(("vOnline", 3), ("vCritical", 4), ("vNotPresent", 128), ("vOffline", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperationalState.setDescription('Logical Drive Operational State.')
a3RaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3RaidLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a3RaidLevel.setDescription('RAID Level associated with Logical Drive.')
a3WritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 128))).clone(namedValues=NamedValues(("vWriteThru", 0), ("vWriteBack", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WritePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a3WritePolicy.setDescription('Write Cache Policy associated with Logical Drive.')
a3SizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3SizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a3SizeInMb.setDescription('Logical Drive Size - in MB.')
a3PhysicalSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3PhysicalSizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a3PhysicalSizeInMb.setDescription('Total physical capacity used by this Logical Drive - in MB.')
a3StripeSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3StripeSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: a3StripeSizeInBytes.setDescription('Stripe size associated with Logical Drive. Valid for RAID Levels 0, 5 and 6 only. Value is specifed in bytes.')
a3PhysicalDriveMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3PhysicalDriveMap.setStatus('mandatory')
if mibBuilder.loadTexts: a3PhysicalDriveMap.setDescription('List of all physical drives that make up this Logical Drive. The information is provided in Channel-Target combination form.')
a3ArrayList = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ArrayList.setStatus('mandatory')
if mibBuilder.loadTexts: a3ArrayList.setDescription('List of Arrays, this logical drive spans across. ')
a3RaidLevelString = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 3, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3RaidLevelString.setStatus('mandatory')
if mibBuilder.loadTexts: a3RaidLevelString.setDescription('Raid Level String.')
tPhysicalDeviceInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4), )
if mibBuilder.loadTexts: tPhysicalDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalDeviceInformation.setDescription('SCSI Physical Device Information.')
ePhysicalDeviceInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a4ControllerNumber"), (0, "MYLEXRAID-MIB", "a4ChannelNumber"), (0, "MYLEXRAID-MIB", "a4TargetId"))
if mibBuilder.loadTexts: ePhysicalDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalDeviceInformation.setDescription('')
a4ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4ControllerNumber.setDescription('Controller Number - used as a key')
a4ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4ChannelNumber.setDescription('Channel Number - used as a key')
a4TargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4TargetId.setStatus('mandatory')
if mibBuilder.loadTexts: a4TargetId.setDescription('Physical Device Target Id - used as a key')
a4Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Lun.setStatus('mandatory')
if mibBuilder.loadTexts: a4Lun.setDescription('LUN of the Physical Device.')
a4OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 16, 130))).clone(namedValues=NamedValues(("vDead", 0), ("vRebuilding", 2), ("vOnline", 3), ("vInstallationAbort", 4), ("vPresent", 5), ("vNotPresent", 6), ("vHotspare", 16), ("vRebuildCancelled", 130)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: a4OperationalState.setDescription('Physical Device State.')
a4VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4VendorId.setStatus('mandatory')
if mibBuilder.loadTexts: a4VendorId.setDescription('Physical Device Vendor Id.')
a4ProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ProductId.setStatus('mandatory')
if mibBuilder.loadTexts: a4ProductId.setDescription('Physical Device Product Id.')
a4ProductRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ProductRevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a4ProductRevisionLevel.setDescription('Physical Device Product Revision Level.')
a4SizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a4SizeInMb.setDescription('Physcical Capacity in MB, valid for physical drive only.')
a4DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 199, 204))).clone(namedValues=NamedValues(("vFixedDrive", 0), ("vTape", 1), ("vPrinter", 2), ("vProcessor", 3), ("vWorm", 4), ("vCdrom", 5), ("vScanner", 6), ("vMo", 7), ("vChanger", 8), ("vCommunications", 9), ("vGraphics-0", 10), ("vGraphics-1", 11), ("vReserved-0", 12), ("vReserved-1", 13), ("vReserved-2", 14), ("vReserved-3", 15), ("vReserved-4", 16), ("vReserved-5", 17), ("vReserved-6", 18), ("vReserved-7", 19), ("vReserved-8", 20), ("vReserved-9", 21), ("vReserved-10", 22), ("vReserved-11", 23), ("vReserved-12", 24), ("vReserved-13", 25), ("vReserved-14", 26), ("vReserved-15", 27), ("vReserved-16", 28), ("vReserved-17", 29), ("vReserved-18", 30), ("vUnknown", 31), ("vScsiHostBusAdapter", 199), ("vCtrlChannel", 204)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: a4DeviceType.setDescription('Device Type.')
a4SoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 11), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SoftErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4SoftErrors.setDescription('Number of Soft Errors, valid for physical drive only.')
a4HardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 12), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4HardErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4HardErrors.setDescription('Number of Hard Errors, valid for physical drive only.')
a4ParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 13), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4ParityErrors.setDescription('Number of Parity Errors, valid for physical drive only.')
a4MiscErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 14), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4MiscErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4MiscErrors.setDescription('Number of Misc Errors, valid for physical drive only.')
a4ArrayList = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 15), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ArrayList.setStatus('mandatory')
if mibBuilder.loadTexts: a4ArrayList.setDescription('List Of Arrays of which this physical drive is part, if applicab e.')
a4LogicalDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 16), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LogicalDriveList.setStatus('mandatory')
if mibBuilder.loadTexts: a4LogicalDriveList.setDescription('List of Logical Drives that depend on this physical drive, if applicable.')
a4BusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 17), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BusSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a4BusSpeed.setDescription('Bus Transfer Speed')
a4BusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 18), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4BusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a4BusWidth.setDescription('Bus Width')
a4CommandQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4CommandQueuing.setStatus('mandatory')
if mibBuilder.loadTexts: a4CommandQueuing.setDescription('Command Tagged Queuing Enabled')
a4PfaErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 4, 1, 20), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PfaErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4PfaErrors.setDescription('SMART PFA Error Count, valid for physical drive only.')
tMylexDacManagementSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5))
eMylexDacManagementSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1))
a5ManagementSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5ManagementSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a5ManagementSoftwareRevision.setDescription('Mylex DAC Management Software Revision Information.')
a5ManagementSoftwareBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5ManagementSoftwareBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: a5ManagementSoftwareBuildDate.setDescription('Mylex DAC Management Software Build Date Information - month/dat /year format.')
a5MylexDacDeviceDriverRevision = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MylexDacDeviceDriverRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a5MylexDacDeviceDriverRevision.setDescription('Mylex DAC Device driver Revision Information.')
a5MylexDacDeviceDriverBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MylexDacDeviceDriverBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: a5MylexDacDeviceDriverBuildDate.setDescription('Mylex DAC Device Driver Build Date Information - month/date/year format.')
a5GamDriverRevision = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5GamDriverRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a5GamDriverRevision.setDescription('Mylex GAM Driver Revision Information.')
a5GamDriverBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 5, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5GamDriverBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: a5GamDriverBuildDate.setDescription('Mylex GAM Driver Build Date Information - date/month/year format.')
tLogicalDriveStatistics = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6), )
if mibBuilder.loadTexts: tLogicalDriveStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: tLogicalDriveStatistics.setDescription('Logical Drive Performance Statistics')
eLogicalDriveStatistics = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a6ControllerNumber"), (0, "MYLEXRAID-MIB", "a6LogicalDriveNumber"))
if mibBuilder.loadTexts: eLogicalDriveStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: eLogicalDriveStatistics.setDescription('')
a6ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a6ControllerNumber.setDescription('Controller Number - used as a key.')
a6LogicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6LogicalDriveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a6LogicalDriveNumber.setDescription('Logical Drive Number - used as a key.')
a6ReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ReadRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a6ReadRequests.setDescription('Number of Read Requests.')
a6DataReadInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DataReadInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a6DataReadInMb.setDescription('Amount of Data Read from this logical drive - in MB.')
a6WriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 5), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6WriteRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a6WriteRequests.setDescription('Number of Write Requests.')
a6DataWrittenInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6DataWrittenInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a6DataWrittenInMb.setDescription('Amount of data written - in MB.')
a6ReadCacheHitPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 6, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ReadCacheHitPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: a6ReadCacheHitPercentage.setDescription('Read Cache Hit Rate.')
tPhysicalDriveStatistics = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7), )
if mibBuilder.loadTexts: tPhysicalDriveStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalDriveStatistics.setDescription('Physical Drive Performance Statistics')
ePhysicalDriveStatistics = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a7ControllerNumber"), (0, "MYLEXRAID-MIB", "a7ChannelNumber"), (0, "MYLEXRAID-MIB", "a7TargetId"))
if mibBuilder.loadTexts: ePhysicalDriveStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalDriveStatistics.setDescription('')
a7ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a7ControllerNumber.setDescription('Controller Number - used as a key.')
a7ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a7ChannelNumber.setDescription('Channel Number - used as a key.')
a7TargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7TargetId.setStatus('mandatory')
if mibBuilder.loadTexts: a7TargetId.setDescription('Physical Device Target Id - used as a key.')
a7Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Lun.setStatus('mandatory')
if mibBuilder.loadTexts: a7Lun.setDescription('LUN of the Physical Device.')
a7ReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 5), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ReadRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a7ReadRequests.setDescription('Number of Read Requests.')
a7DataReadInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7DataReadInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a7DataReadInMb.setDescription('Amount of Data Read - in MB.')
a7WriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7WriteRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a7WriteRequests.setDescription('Number of Write Requests.')
a7DataWrittenInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 7, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7DataWrittenInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a7DataWrittenInMb.setDescription('Amount of data written - in MB.')
tFaultManagementCabinetInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8), )
if mibBuilder.loadTexts: tFaultManagementCabinetInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tFaultManagementCabinetInformation.setDescription('Fault Management Cabinet Information.')
eFaultManagementCabinetInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a8ControllerNumber"), (0, "MYLEXRAID-MIB", "a8ChannelNumber"), (0, "MYLEXRAID-MIB", "a8CabinetNumber"))
if mibBuilder.loadTexts: eFaultManagementCabinetInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eFaultManagementCabinetInformation.setDescription('')
a8ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a8ControllerNumber.setDescription('Controller Number - used as a key.')
a8ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8ChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a8ChannelNumber.setDescription('Channel Number of the Channel to which the Cabinet is connected - used as a key.')
a8CabinetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8CabinetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a8CabinetNumber.setDescription('Cabinet Number - used as a key.')
a8TargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8TargetId.setStatus('mandatory')
if mibBuilder.loadTexts: a8TargetId.setDescription('Target Id of the Cabinet.')
a8Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8Lun.setStatus('mandatory')
if mibBuilder.loadTexts: a8Lun.setDescription('LUN of the Cabinet.')
a8CabinetType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 32, 64, 255))).clone(namedValues=NamedValues(("vConnerCr-6", 1), ("vConnerSmartCabinet", 2), ("vSafte1", 3), ("vSafte", 32), ("vSes", 64), ("vUnknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8CabinetType.setStatus('mandatory')
if mibBuilder.loadTexts: a8CabinetType.setDescription('Fault Management Cabinet Type, such as Conner CR6, Conner Smart and SAFTE etc.')
a8NumberOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfFans.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfFans.setDescription('Number of Fans in the cabinet.')
a8NumberOfPowerSupplyUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnits.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnits.setDescription('Number of Power Supply Units in the cabinet.')
a8NumberOfHeatSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfHeatSensors.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfHeatSensors.setDescription('Number of Heat Sensors in the cabinet.')
a8NumberOfDriveSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfDriveSlots.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfDriveSlots.setDescription('Number of Drive Slots in the cabinet.')
a8NumberOfDoorLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfDoorLocks.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfDoorLocks.setDescription('Number of Door Locks in the cabinet.')
a8NumberOfSpeakers = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfSpeakers.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfSpeakers.setDescription('Number of Speakers in the cabinet.')
a8NumberOfFansCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfFansCritical.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfFansCritical.setDescription('Number of Fans in Critical State in the cabinet.')
a8NumberOfPowerSupplyUnitsCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnitsCritical.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnitsCritical.setDescription('Number of Power Supply Units in Critical state in the cabinet.')
a8NumberOfHeatSensorsCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfHeatSensorsCritical.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfHeatSensorsCritical.setDescription('Number of Heat Sensors in Critical state in the cabinet.')
a8NumberOfFansFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfFansFailed.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfFansFailed.setDescription('Number of Fans in Failed State in the cabinet.')
a8NumberOfPowerSupplyUnitsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnitsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfPowerSupplyUnitsFailed.setDescription('Number of Power Supply Units in Failed state in the cabinet.')
a8NumberOfHeatSensorsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 8, 1, 18), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8NumberOfHeatSensorsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: a8NumberOfHeatSensorsFailed.setDescription('Number of Heat Sensors in Failed state in the cabinet.')
tMylexRaidEventInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9), )
if mibBuilder.loadTexts: tMylexRaidEventInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tMylexRaidEventInformation.setDescription('Event Information for Mylex RAID events.')
eMylexRaidEventInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a9EventTableIndex"))
if mibBuilder.loadTexts: eMylexRaidEventInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eMylexRaidEventInformation.setDescription('')
a9EventTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9EventTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9EventTableIndex.setDescription('Index to the event table, Used as a key. A total number of 256 events can be stored in the event table. However, the Event Table Index can be greater than 256')
a9EventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 96, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 176, 177, 178, 179, 180, 181, 182, 256, 257, 258, 259, 272, 273, 274, 275, 288, 289, 290, 291, 292, 304, 305, 306, 307, 308, 309, 310, 311, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 640, 641, 642, 643, 644, 645, 700, 701, 702, 703, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 896, 897, 912, 928, 944, 268435455))).clone(namedValues=NamedValues(("vPhysdev-online", 1), ("vPhysdev-hotspare", 2), ("vPhysdev-hard-error", 3), ("vPhysdev-pfa", 4), ("vPhysdev-auto-rebuild-start", 5), ("vPhysdev-manual-rebuild-start", 6), ("vPhysdev-rebuild-done", 7), ("vPhysdev-rebuild-canceled", 8), ("vPhysdev-rebuild-error", 9), ("vPhysdev-rebuild-newdev-failed", 10), ("vPhysdev-rebuild-sysdev-failed", 11), ("vPhysdev-dead", 12), ("vPhysdev-found", 13), ("vPhysdev-gone", 14), ("vPhysdev-unconfigured", 15), ("vPhysdev-expandcapacity-start", 16), ("vPhysdev-expandcapacity-done", 17), ("vPhysdev-expandcapacity-error", 18), ("vPhysdev-command-timeout", 19), ("vPhysdev-command-abort", 20), ("vPhysdev-command-retried", 21), ("vPhysdev-parity-error", 22), ("vPhysdev-soft-error", 23), ("vPhysdev-misc-error", 24), ("vPhysdev-reset", 25), ("vPhysdev-activespare", 26), ("vPhysdev-warmspare", 27), ("vPhysdev-reqsense", 28), ("vPhysdev-init-started", 29), ("vPhysdev-init-done", 30), ("vPhysdev-init-failed", 31), ("vPhysdev-init-canceled", 32), ("vPhysdev-writerec-dead", 33), ("vPhysdev-reset-dead", 34), ("vPhysdev-dblcc-dead", 35), ("vPhysdev-removed-dead", 36), ("vPhysdev-grosserr-dead", 37), ("vPhysdev-badtag-dead", 38), ("vPhysdev-scsitmo-dead", 39), ("vPhysdev-sysreset-dead", 40), ("vPhysdev-bsypar-dead", 41), ("vPhysdev-bycmd-dead", 42), ("vPhysdev-seltmo-dead", 43), ("vPhysdev-seqerr-dead", 44), ("vPhysdev-unknownsts-dead", 45), ("vPhysdev-notrdy-dead", 46), ("vPhysdev-missing-dead", 47), ("vPhysdev-codwrfail-dead", 48), ("vPhysdev-bdtwrfail-dead", 49), ("vPhysdev-offline", 50), ("vPhysdev-standby", 51), ("vPhysdev-rebuild", 52), ("vPhysdev-id-mismatch", 53), ("vPhysdev-failed-start", 54), ("vPhysdev-offset-set", 55), ("vPhysdev-set-bus-width", 56), ("vPhysdev-missing-onstartup", 57), ("vPhysdev-rebuild-start-failed", 58), ("vPhysdev-moving-to-other-chn", 59), ("vPhysdev-offline-device-made-online", 60), ("vPhysdev-standby-rebuild-start", 61), ("vPhysdev-hot-spare-smaller", 62), ("vPpilot-logical-disk-online", 63), ("vPpilot-logical-disk-offline", 64), ("vPpilot-logical-disk-path-failover", 65), ("vPpilot-logical-disk-path-failback", 66), ("vPhysdev-non-redundant-access", 67), ("vPhysdev-type-invalid", 68), ("vPhysdev-soft-id", 69), ("vPhysdev-port-failed", 70), ("vCtldev-mirror-race-entry-failed", 71), ("vCtldev-ctrl-params-checksum-failed", 72), ("vFirmware-upgrade-started", 73), ("vFirmware-upgrade-complete", 74), ("vFirmware-upgrade-failed", 75), ("vFibredev-loopid-softaddr-occurred", 96), ("vSysdev-check-start", 128), ("vSysdev-check-done", 129), ("vSysdev-check-canceled", 130), ("vSysdev-check-error", 131), ("vSysdev-check-sysdev-failed", 132), ("vSysdev-check-physdev-failed", 133), ("vSysdev-offline", 134), ("vSysdev-critical", 135), ("vSysdev-online", 136), ("vSysdev-auto-rebuild-start", 137), ("vSysdev-manual-rebuild-start", 138), ("vSysdev-rebuild-done", 139), ("vSysdev-rebuild-canceled", 140), ("vSysdev-rebuild-error", 141), ("vSysdev-rebuild-newdev-failed", 142), ("vSysdev-rebuild-sysdev-failed", 143), ("vSysdev-init-started", 144), ("vSysdev-init-done", 145), ("vSysdev-init-canceled", 146), ("vSysdev-init-failed", 147), ("vSysdev-found", 148), ("vSysdev-gone", 149), ("vSysdev-expandcapacity-start", 150), ("vSysdev-expandcapacity-done", 151), ("vSysdev-expandcapacity-error", 152), ("vSysdev-badblock", 153), ("vSysdev-sizechanged", 154), ("vSysdev-typechanged", 155), ("vSysdev-baddatablock", 156), ("vSysdev-wr-lun-map", 157), ("vSysdev-dataread-from-block-in-bdt", 158), ("vSysdev-data-for-block-lost", 159), ("vSysdev-offline-device-made-available-wi", 160), ("vSysdev-offline-device-made-available", 161), ("vSysdev-standby-rebuild-start", 162), ("vSysdev-bg-init-started", 176), ("vSysdev-bg-init-stopped", 177), ("vSysdev-bg-init-paused", 178), ("vSysdev-bg-init-restarted", 179), ("vSysdev-bg-init-failed", 180), ("vSysdev-bg-init-completed", 181), ("vSysdev-data-loss-low-bbu-charge", 182), ("vFmtfan-failed", 256), ("vFmtfan-ok", 257), ("vAemi-fan-failed", 258), ("vFmtfan-notpresent", 259), ("vFmtpower-failed", 272), ("vFmtpower-ok", 273), ("vAemi-pwr-supply-failed", 274), ("vFmtpower-notpresent", 275), ("vFmtheat-bad", 288), ("vFmtheat-critical", 289), ("vFmtheat-ok", 290), ("vAemi-over-temperature", 291), ("vFmtheat-notpresent", 292), ("vFmtstwk-failed", 304), ("vFmtstwk-critical", 305), ("vFmtstwk-ok", 306), ("vFmt-ups-disabled", 307), ("vFmt-ups-ac-fail", 308), ("vFmt-ups-bat-low", 309), ("vFmt-ups-failed", 310), ("vFmt-ups-ok", 311), ("vEnclfan-failed", 320), ("vEnclfan-ok", 321), ("vEnclfan-notpresent", 322), ("vEnclpower-failed", 323), ("vEnclpower-ok", 324), ("vEnclpower-notpresent", 325), ("vEnclheat-bad", 326), ("vEnclheat-critical", 327), ("vEnclheat-ok", 328), ("vEnclheat-notpresent", 329), ("vEnclaccess-critical", 330), ("vEnclaccess-ok", 331), ("vEnclaccess-offline", 332), ("vEnclses-softaddr-occurred", 333), ("vEnclaccess-ready", 334), ("vEnclheat-unknown", 335), ("vEnclpower-unknown", 336), ("vEnclfan-unknown", 337), ("vEnclosure-shutdown", 338), ("vEnclcold-warn", 339), ("vEnclcold-fail", 340), ("vSystem-started", 384), ("vCtldev-writeback-error", 385), ("vCtldev-state-table-full", 386), ("vCtldev-dead", 388), ("vCtldev-reset", 389), ("vCtldev-found", 390), ("vCtldev-gone", 391), ("vCtldev-bbu-found", 392), ("vCtldev-bbu-power-low", 393), ("vCtldev-bbu-power-ok", 394), ("vCtldev-power-off", 395), ("vCtldev-power-on", 396), ("vCtldev-online", 397), ("vCtldev-offline", 398), ("vCtldev-critical", 399), ("vCtldev-bbu-recond-start", 400), ("vCtldev-bbu-recond-done", 401), ("vCtldev-bbu-recond-abort", 402), ("vCtldev-installation-aborted", 403), ("vCtldev-firmware-mismatch", 404), ("vCtldev-bbu-noresponse", 405), ("vCtldev-warm-boot-error", 406), ("vCtldev-bbu-calibrate-start", 407), ("vCtldev-bbu-calibrate-done", 408), ("vCtldev-bbu-calibrate-abort", 409), ("vCtldev-bbu-no-battery", 410), ("vCtldev-conserv-cache-mode", 411), ("vCtldev-normal-cache-mode", 412), ("vCtldev-dev-start-cmplt", 413), ("vCtldev-soft-ecc-corrected", 414), ("vCtldev-hard-ecc-corrected", 415), ("vCtldev-bbu-recond-needed", 416), ("vCtldev-removed-ptnr", 417), ("vCtldev-bbu-out-of-service", 418), ("vCtldev-update-ptnr-status", 419), ("vCtldev-relinquish-ptnr", 420), ("vCtldev-inserted-ptnr", 421), ("vCtldev-dual-enabled", 422), ("vCtldev-kill-ptnr", 423), ("vCtldev-nexus", 424), ("vCtldev-bad-bootrom-image", 425), ("vCtldev-bad-mac-address", 426), ("vCtldev-mirror-race-recovery-failed", 427), ("vCtldev-mirror-critical-drive", 428), ("vCtldev-in-cluster", 429), ("vCtldev-not-in-cluster", 430), ("vSysdev-data-loss-improper-shutdown", 431), ("vCtldev-automatic-flash-started", 432), ("vCtldev-negotiation-failed-jumpers", 433), ("vCtldev-negotiation-same-id", 434), ("vCtldev-negotiation-board-type", 435), ("vCtldev-negotiation-disk-channels", 436), ("vCtldev-negotiation-host-channels", 437), ("vCtldev-negotiation-memory-size", 438), ("vCtldev-negotiation-cache-size", 439), ("vCtldev-mirror-race-table-error", 440), ("vCtldev-stop-rejected", 441), ("vSystem-started-new", 512), ("vSystem-size-table-full", 513), ("vSystem-user-logged-in", 514), ("vSystem-user-logged-out", 515), ("vSystem-alive", 516), ("vSystem-dead", 517), ("vAutoboot-changed", 518), ("vCtldev-bbu-batt-test-start", 519), ("vCtldev-bbu-batt-test-complete", 520), ("vCtldev-bbu-batt-test-canceled", 521), ("vCtldev-bbu-batt-test-failed", 522), ("vChannel-failed", 640), ("vChannel-ok", 641), ("vChannel-scsi-bus-dead", 642), ("vChannel-scsi-bus-alive", 643), ("vChannel-fiber-dead", 644), ("vChannel-fiber-alive", 645), ("vLog-empty", 700), ("vLog-out-sync", 701), ("vLog-request-sense", 702), ("vLog-set-rtc", 703), ("vCfg-new", 800), ("vCfg-clear", 801), ("vCfg-invalid", 802), ("vCfg-cod-access-error", 803), ("vCfg-cod-converted", 804), ("vCfg-cod-import-failed", 805), ("vDebug-dump-generated", 806), ("vDebug-dump-generated-partner", 807), ("vCfg-cod-not-found", 808), ("vCfg-cod-lun-map-not-found", 809), ("vFatal-hang", 896), ("vFatal-brkp", 897), ("vI960-hw-err", 912), ("vSarm-hw-err", 928), ("vScsi-hw-err", 944), ("vUnknown", 268435455)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9EventCode.setStatus('mandatory')
if mibBuilder.loadTexts: a9EventCode.setDescription('Mylex RAID event code.')
a9EventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9EventTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: a9EventTimeStamp.setDescription("Time Stamp associated with this event. It's the number of seconds since midnight(00:00:00) January 1, 1970 GMT.")
a9ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9ControllerNumber.setDescription('Controller Number of the controller, which causes the event, if applicable')
a9ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9ChannelNumber.setDescription('Channel Number of the device, which causes the event, if applicable')
a9TargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9TargetId.setStatus('mandatory')
if mibBuilder.loadTexts: a9TargetId.setDescription('Target Id of the physical device, which causes the event, if applicable')
a9Lun = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Lun.setStatus('mandatory')
if mibBuilder.loadTexts: a9Lun.setDescription('LUN of the device, which causes the event, if applicable')
a9LogicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9LogicalDriveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9LogicalDriveNumber.setDescription('Drive Number of the Logical Drive, which causes the event, if applicable')
a9FmtCabinetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FmtCabinetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9FmtCabinetNumber.setDescription('Fault Management Cabinet Number of the cabinet, which causes the event, if applicable')
a9FanUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9FanUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9FanUnitNumber.setDescription('Unit Number of the fan which, causes the event, if applicable')
a9PowerSupplyUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9PowerSupplyUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9PowerSupplyUnitNumber.setDescription('Unit Nubmer of the PSU which, causes the event, if applicable')
a9HeatSensorUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9HeatSensorUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9HeatSensorUnitNumber.setDescription('Unit Number of the Heat Sensor, which causes the event, if applicable')
a9EnclosureUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9EnclosureUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a9EnclosureUnitNumber.setDescription('Unit Number of the Enclosure Unit, which causes the event, if applicable')
tBatteryBackupUnitInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10), )
if mibBuilder.loadTexts: tBatteryBackupUnitInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tBatteryBackupUnitInformation.setDescription('This group provides Battery Backup Unit Information.')
eBatteryBackupUnitInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1), ).setIndexNames((0, "MYLEXRAID-MIB", "a10ControllerNumber"))
if mibBuilder.loadTexts: eBatteryBackupUnitInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eBatteryBackupUnitInformation.setDescription('')
a10ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a10ControllerNumber.setDescription('Controller Number of the controller to which this BBU is connected.')
a10OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: a10OperationalState.setDescription('Operational state of Battery Backup Unit.')
a10BatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 254))).clone(namedValues=NamedValues(("vUnknown", 0), ("vNickelCadmium", 1), ("vNimh", 2), ("vLithiumion", 3), ("vNoBatterBackupPresent", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BatteryType.setStatus('mandatory')
if mibBuilder.loadTexts: a10BatteryType.setDescription('Battery Type.')
a10CurrentPowerInHours = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10CurrentPowerInHours.setStatus('mandatory')
if mibBuilder.loadTexts: a10CurrentPowerInHours.setDescription('Current Power in Hours.')
a10MaximumPowerInHours = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10MaximumPowerInHours.setStatus('mandatory')
if mibBuilder.loadTexts: a10MaximumPowerInHours.setDescription('Maximum Power in Hours.')
a10ThresholdValueInHours = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10ThresholdValueInHours.setStatus('mandatory')
if mibBuilder.loadTexts: a10ThresholdValueInHours.setDescription('Threshold Value in Hours.')
a10ChargeLevelInPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10ChargeLevelInPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: a10ChargeLevelInPercentage.setDescription('Battery Charge Level (in percentage).')
a10Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10Version.setStatus('mandatory')
if mibBuilder.loadTexts: a10Version.setDescription('BBU Hardware Version Number.')
a10OperationalStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 10, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10OperationalStateString.setStatus('mandatory')
if mibBuilder.loadTexts: a10OperationalStateString.setDescription('BBU Operational State String.')
physdevOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,1)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevOnline.setDescription('A physical disk has been placed online.')
physdevHotspare = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,2)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevHotspare.setDescription('A physical disk has been added as hot spare.')
physdevHardError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,3)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevHardError.setDescription('Physical disk error found.')
physdevPfa = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,4)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevPfa.setDescription('Physical disk PFA condition found; this disk may fail soon.')
physdevAutoRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,5)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevAutoRebuildStart.setDescription('An automatic rebuild has started.')
physdevManualRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,6)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevManualRebuildStart.setDescription('A rebuild has started.')
physdevRebuildDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,7)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevRebuildDone.setDescription('Rebuild is over.')
physdevRebuildCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,8)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevRebuildCanceled.setDescription('Rebuild is cancelled.')
physdevRebuildError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,9)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevRebuildError.setDescription('Rebuild stopped with error.')
physdevRebuildNewdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,10)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevRebuildNewdevFailed.setDescription('Rebuild stopped with error. New physical disk failed.')
physdevRebuildSysdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,11)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevRebuildSysdevFailed.setDescription('Rebuild stopped because logical drive failed.')
physdevDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,12)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevDead.setDescription('A physical disk has failed.')
physdevFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,13)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevFound.setDescription('A new physical disk has been found.')
physdevGone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,14)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevGone.setDescription('A physical disk has been removed.')
physdevUnconfigured = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,15)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevUnconfigured.setDescription('A previously configured physical disk is now available.')
physdevExpandcapacityStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,16)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevExpandcapacityStart.setDescription('Expand Capacity Started.')
physdevExpandcapacityDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,17)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevExpandcapacityDone.setDescription('Expand Capacity Completed.')
physdevExpandcapacityError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,18)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevExpandcapacityError.setDescription('Expand Capacity Stopped with error.')
physdevCommandTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,19)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevCommandTimeout.setDescription('SCSI command timeout on physical device.')
physdevCommandAbort = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,20)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevCommandAbort.setDescription('SCSI command abort on physical disk.')
physdevCommandRetried = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,21)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevCommandRetried.setDescription('SCSI command retried on physical disk.')
physdevParityError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,22)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevParityError.setDescription('Parity error found.')
physdevSoftError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,23)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevSoftError.setDescription('Soft error found.')
physdevMiscError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,24)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevMiscError.setDescription('Misc error found.')
physdevReset = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,25)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevReset.setDescription('SCSI device reset.')
physdevActivespare = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,26)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevActivespare.setDescription('Active spare found.')
physdevWarmspare = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,27)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevWarmspare.setDescription('Warm spare found.')
physdevReqsense = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,28)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevReqsense.setDescription('Request Sense Data available.')
physdevInitStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,29)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevInitStarted.setDescription('Initialization started.')
physdevInitDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,30)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevInitDone.setDescription('Initialization completed.')
physdevInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,31)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevInitFailed.setDescription('Initialization failed.')
physdevInitCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,32)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevInitCanceled.setDescription('Initialization canceled.')
physdevWriterecDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,33)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevWriterecDead.setDescription('A physical disk failed because write recovery failed.')
physdevResetDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,34)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevResetDead.setDescription('A physical disk failed because SCSI bus reset failed.')
physdevDblccDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,35)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevDblccDead.setDescription('A physical disk failed because double check condition occured.')
physdevRemovedDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,36)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevRemovedDead.setDescription('A physical disk failed because device is missing.')
physdevGrosserrDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,37)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevGrosserrDead.setDescription('A physical disk failed because of gross error on SCSI processor.')
physdevBadtagDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,38)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevBadtagDead.setDescription('A physical disk failed because of invalid tag.')
physdevScsitmoDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,39)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevScsitmoDead.setDescription('A physical disk failed because a command timed out.')
physdevSysresetDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,40)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevSysresetDead.setDescription('A physical disk failed because of the system reset.')
physdevBsyparDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,41)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevBsyparDead.setDescription('A physical disk failed because of busy status or parity error.')
physdevBycmdDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,42)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevBycmdDead.setDescription('A physical disk set to failed state by host.')
physdevSeltmoDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,43)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevSeltmoDead.setDescription('A physical disk failed because access to the device met with a selection time out.')
physdevSeqerrDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,44)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevSeqerrDead.setDescription('A physical disk failed because of a sequence error in the SCSI bus phase handling.')
physdevUnknownstsDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,45)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevUnknownstsDead.setDescription('A physical disk failed because device returned an unknown status.')
physdevNotrdyDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,46)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevNotrdyDead.setDescription('A physical disk failed because device is not ready.')
physdevMissingDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,47)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevMissingDead.setDescription('A physical disk failed because device was not found on start up.')
physdevCodwrfailDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,48)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevCodwrfailDead.setDescription("A physical disk failed because write operation of the 'Configuration On Disk' failed.")
physdevBdtwrfailDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,49)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevBdtwrfailDead.setDescription("A physical disk failed because write operation of 'Bad Data Table' failed.")
physdevOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,50)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevOffline.setDescription('Physical disk status changed to offline.')
physdevStandby = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,51)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevStandby.setDescription('Physical disk status changed to hot spare.')
physdevRebuild = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,52)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevRebuild.setDescription('Physical disk status changed to rebuild.')
physdevIdMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,53)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevIdMismatch.setDescription('Physical device ID did not match.')
physdevFailedStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,54)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevFailedStart.setDescription('Physical disk failed to start.')
physdevOffsetSet = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,55)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevOffsetSet.setDescription('Physical disk negotiated different offset than config.')
physdevSetBusWidth = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,56)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevSetBusWidth.setDescription('Physical disk negotiated different bus width than config.')
physdevMissingOnstartup = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,57)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevMissingOnstartup.setDescription('Physical disk missing on startup.')
physdevRebuildStartFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,58)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevRebuildStartFailed.setDescription('Rebuild startup failed due to lower physical disk capacity.')
physdevMovingToOtherChn = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,59)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevMovingToOtherChn.setDescription('Physical disk is switching from one channel to the other channel.')
physdevOfflineDeviceMadeOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,60)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevOfflineDeviceMadeOnline.setDescription('Temporary-Dead physical disk is automatically made online.')
physdevStandbyRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,61)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevStandbyRebuildStart.setDescription('A standby rebuild has started.')
physdevHotSpareSmaller = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,62)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevHotSpareSmaller.setDescription('Hot spare replaced with a smaller capacity physical disk.')
ppilotLogicalDiskOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,63)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ppilotLogicalDiskOnline.setDescription('A storage access path has come online.')
ppilotLogicalDiskOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,64)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ppilotLogicalDiskOffline.setDescription('A storage access path has been lost.')
ppilotLogicalDiskPathFailover = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,65)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ppilotLogicalDiskPathFailover.setDescription('A storage access path has shifted to the alternate path.')
ppilotLogicalDiskPathFailback = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,66)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ppilotLogicalDiskPathFailback.setDescription('A storage access path has shifted to the primary path.')
physdevNonRedundantAccess = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,67)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevNonRedundantAccess.setDescription('Physical Disk found on only one disk channel.')
physdevTypeInvalid = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,68)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevTypeInvalid.setDescription('Physical disk type is not approved by vendor.')
physdevSoftId = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,69)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevSoftId.setDescription('Physical disk has acquired an inappropriate loop ID. Enclosure disk-slot operations are disabled while this condition persists.')
physdevPortFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,70)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: physdevPortFailed.setDescription('Physical disk port has failed or cannot operate at the configured channel speed.')
ctldevMirrorRaceEntryFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,71)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevMirrorRaceEntryFailed.setDescription('Mirror Race recovery failed for logical drive.')
ctldevCtrlParamsChecksumFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,72)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevCtrlParamsChecksumFailed.setDescription('Controller parameters checksum verification failed -- restored default.')
firmwareUpgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,73)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: firmwareUpgradeStarted.setDescription('Online controller firmware upgrade has started.')
firmwareUpgradeComplete = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,74)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: firmwareUpgradeComplete.setDescription('Online firmware upgrade has completed successfully.')
firmwareUpgradeFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,75)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: firmwareUpgradeFailed.setDescription('Online firmware upgrade has failed.')
fibredevLoopidSoftaddrOccurred = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,96)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fibredevLoopidSoftaddrOccurred.setDescription('Device loop ID conflict (soft addressing) detected.')
sysdevCheckStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,128)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevCheckStart.setDescription('Consistency check is started.')
sysdevCheckDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,129)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevCheckDone.setDescription('Consistency check is finished.')
sysdevCheckCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,130)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevCheckCanceled.setDescription('Consistency check is cancelled.')
sysdevCheckError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,131)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevCheckError.setDescription('Consistency check on logical drive error.')
sysdevCheckSysdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,132)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevCheckSysdevFailed.setDescription('Consistency check on logical drive failed.')
sysdevCheckPhysdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,133)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevCheckPhysdevFailed.setDescription('Consistency check failed due to physical disk failure.')
sysdevOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,134)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevOffline.setDescription('Logical drive has been made offline.')
sysdevCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,135)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevCritical.setDescription('Logical drive is critical.')
sysdevOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,136)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevOnline.setDescription('Logical drive has been placed online.')
sysdevAutoRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,137)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevAutoRebuildStart.setDescription('An automatic rebuild has started on logical drive.')
sysdevManualRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,138)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevManualRebuildStart.setDescription('A manual rebuild has started on logical drive.')
sysdevRebuildDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,139)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevRebuildDone.setDescription('Rebuild on logical drive is over.')
sysdevRebuildCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,140)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevRebuildCanceled.setDescription('Rebuild on logical drive is cancelled.')
sysdevRebuildError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,141)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevRebuildError.setDescription('Rebuild stopped with error.')
sysdevRebuildNewdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,142)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevRebuildNewdevFailed.setDescription('Rebuild stopped with error. New physical disk failed.')
sysdevRebuildSysdevFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,143)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevRebuildSysdevFailed.setDescription('Rebuild stopped because logical drive failed.')
sysdevInitStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,144)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevInitStarted.setDescription('Logical drive initialization started.')
sysdevInitDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,145)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevInitDone.setDescription('Logical drive initialization done.')
sysdevInitCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,146)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevInitCanceled.setDescription('Logical drive initialization cancelled.')
sysdevInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,147)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevInitFailed.setDescription('Logical drive initialization failed.')
sysdevFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,148)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevFound.setDescription('A logical drive has been found.')
sysdevGone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,149)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevGone.setDescription('A logical drive has been deleted.')
sysdevExpandcapacityStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,150)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevExpandcapacityStart.setDescription('Expand capacity started.')
sysdevExpandcapacityDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,151)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevExpandcapacityDone.setDescription('Expand capacity completed.')
sysdevExpandcapacityError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,152)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevExpandcapacityError.setDescription('Expand capacity stopped with error.')
sysdevBadblock = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,153)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevBadblock.setDescription('Bad Blocks found.')
sysdevSizechanged = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,154)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevSizechanged.setDescription('Logical drive size changed.')
sysdevTypechanged = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,155)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevTypechanged.setDescription('Logical drive type changed.')
sysdevBaddatablock = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,156)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevBaddatablock.setDescription('Bad data blocks found. Possible data loss.')
sysdevWrLunMap = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,157)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevWrLunMap.setDescription('Logical drive LUN mapping has been written to config.')
sysdevDatareadFromBlockInBdt = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,158)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevDatareadFromBlockInBdt.setDescription('Attempt to read data from block that is marked in Bad Data Table.')
sysdevDataForBlockLost = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,159)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevDataForBlockLost.setDescription('Data for Disk Block has been lost due to Logical Drive problem.')
sysdevOfflineDeviceMadeAvailableWithDataloss = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,160)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevOfflineDeviceMadeAvailableWithDataloss.setDescription('Temporary-Offline RAID5/RAID3 array is available to the user again with the possibility of data loss in the array.')
sysdevOfflineDeviceMadeAvailable = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,161)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevOfflineDeviceMadeAvailable.setDescription('Temporary-Offline RAID0+1/RAID1/RAID0/JBOD array is available to the user again.')
sysdevStandbyRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,162)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevStandbyRebuildStart.setDescription('A standby rebuild has started on a logical drive.')
sysdevBgInitStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,176)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevBgInitStarted.setDescription('Logical drive background initialization started.')
sysdevBgInitStopped = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,177)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevBgInitStopped.setDescription('Logical drive background initialization stopped.')
sysdevBgInitPaused = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,178)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevBgInitPaused.setDescription('Logical drive background initialization paused.')
sysdevBgInitRestarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,179)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevBgInitRestarted.setDescription('Logical drive background initialization restarted.')
sysdevBgInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,180)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevBgInitFailed.setDescription('Logical drive background initialization failed.')
sysdevBgInitCompleted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,181)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevBgInitCompleted.setDescription('Logical drive background initialization completed.')
sysdevDataLossLowBbuCharge = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,182)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevDataLossLowBbuCharge.setDescription('Low battery charge level. Logical drive may have lost data.')
fmtfanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,256)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtfanFailed.setDescription('Fan failure.')
fmtfanOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,257)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtfanOk.setDescription('Fan has been restored.')
aemiFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,258)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9FanUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: aemiFanFailed.setDescription('Fan failure.')
fmtfanNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,259)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtfanNotpresent.setDescription('Storage cabinet fan is not present.')
fmtpowerFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,272)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtpowerFailed.setDescription('Power supply failure.')
fmtpowerOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,273)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtpowerOk.setDescription('Power supply has been restored.')
aemiPwrSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,274)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9PowerSupplyUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: aemiPwrSupplyFailed.setDescription('Power supply failure.')
fmtpowerNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,275)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtpowerNotpresent.setDescription('Storage cabinet power supply is not present.')
fmtheatBad = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,288)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9HeatSensorUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtheatBad.setDescription('Over temperature. Temperature is above 70 degrees Celsius.')
fmtheatCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,289)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtheatCritical.setDescription('Temperature is above 50 degrees Celsius.')
fmtheatOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,290)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtheatOk.setDescription('Normal temperature has been restored.')
aemiOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,291)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9HeatSensorUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: aemiOverTemperature.setDescription('Over temperature.')
fmtheatNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,292)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtheatNotpresent.setDescription('Storage cabinet temperature sensor is not present.')
fmtstwkFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,304)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtstwkFailed.setDescription('Storage Works enclosure reported failure state.')
fmtstwkCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,305)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtstwkCritical.setDescription('Storage Works enclosure reported critical state.')
fmtstwkOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,306)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtstwkOk.setDescription('Storage Works enclosure reported normal state.')
fmtUpsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,307)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtUpsDisabled.setDescription('Uninterruptible power supply disabled.')
fmtUpsAcFail = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,308)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtUpsAcFail.setDescription('Uninterruptible power supply ac failed.')
fmtUpsBatLow = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,309)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtUpsBatLow.setDescription('Uninterruptible power supply battery low.')
fmtUpsFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,310)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtUpsFailed.setDescription('Uninterruptible power supply failed.')
fmtUpsOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,311)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fmtUpsOk.setDescription('Uninterruptible power supply normal.')
enclfanFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,320)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclfanFailed.setDescription('Fan failure.')
enclfanOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,321)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclfanOk.setDescription('Fan has been restored.')
enclfanNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,322)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclfanNotpresent.setDescription('Fan is not present.')
enclpowerFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,323)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclpowerFailed.setDescription('Power supply failure.')
enclpowerOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,324)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclpowerOk.setDescription('Power supply has been restored.')
enclpowerNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,325)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclpowerNotpresent.setDescription('Power supply is not present.')
enclheatBad = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,326)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclheatBad.setDescription('Temperature is over safe limit. Failure imminent.')
enclheatCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,327)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclheatCritical.setDescription('Temperature is above working limit.')
enclheatOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,328)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclheatOk.setDescription('Normal temperature has been restored.')
enclheatNotpresent = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,329)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclheatNotpresent.setDescription('Temperature sensor is not present.')
enclaccessCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,330)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclaccessCritical.setDescription('Enclosure access critical.')
enclaccessOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,331)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclaccessOk.setDescription('Enclosure access has been restored.')
enclaccessOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,332)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclaccessOffline.setDescription('Enclosure access is offline.')
enclsesSoftaddrOccurred = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,333)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclsesSoftaddrOccurred.setDescription('Enclosure soft addressing detected.')
enclaccessReady = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,334)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclaccessReady.setDescription('Enclosure services ready.')
enclheatUnknown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,335)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclheatUnknown.setDescription('Access to temperature sensor has been lost.')
enclpowerUnknown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,336)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclpowerUnknown.setDescription('Access to power supply status information has been lost.')
enclfanUnknown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,337)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclfanUnknown.setDescription('Access to fan status information has been lost.')
enclosureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,338)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EnclosureUnitNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclosureShutdown.setDescription('Physical disks in enclosure being spundown.')
enclcoldWarn = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,339)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclcoldWarn.setDescription('Temperature is below working limit.')
enclcoldFail = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,340)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9FmtCabinetNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: enclcoldFail.setDescription('Temperature is under safe limit. Failure imminent.')
systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,384)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: systemStarted.setDescription('Array management server software started successfully.')
ctldevWritebackError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,385)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevWritebackError.setDescription('Write back error.')
ctldevStateTableFull = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,386)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevStateTableFull.setDescription('Internal log structures getting full,PLEASE SHUTDOWN AND RESET THE SYSTEM IN THE NEAR FUTURE.')
ctldevDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,388)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevDead.setDescription('Controller is dead. System is disconnecting from this controller.')
ctldevReset = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,389)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevReset.setDescription('Controller has been reset.')
ctldevFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,390)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevFound.setDescription('Controller is found.')
ctldevGone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,391)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevGone.setDescription('Controller is gone. System is disconnecting from this controller.')
ctldevBbuFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,392)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuFound.setDescription('Battery present.')
ctldevBbuPowerLow = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,393)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuPowerLow.setDescription('Battery power low.')
ctldevBbuPowerOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,394)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuPowerOk.setDescription('Battery power OK.')
ctldevPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,395)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevPowerOff.setDescription('Controller is gone. System is disconnecting from this controller.')
ctldevPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,396)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevPowerOn.setDescription('Controller powered on')
ctldevOnline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,397)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevOnline.setDescription('Controller is online.')
ctldevOffline = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,398)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevOffline.setDescription('Controller is gone. System is disconnecting from this controller.')
ctldevCritical = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,399)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevCritical.setDescription("Controller's partner is gone, controller is in failover mode now.")
ctldevBbuRecondStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,400)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuRecondStart.setDescription('Battery reconditioning is started.')
ctldevBbuRecondDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,401)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuRecondDone.setDescription('Battery reconditioning is finished.')
ctldevBbuRecondAbort = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,402)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuRecondAbort.setDescription('Battery reconditioning is canceled.')
ctldevInstallationAborted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,403)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevInstallationAborted.setDescription('Installation aborted.')
ctldevFirmwareMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,404)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevFirmwareMismatch.setDescription('Controller firmware mismatch.')
ctldevBbuNoresponse = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,405)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuNoresponse.setDescription('The Battery Backup Unit is removed.')
ctldevWarmBootError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,406)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevWarmBootError.setDescription('WARM BOOT failed.')
ctldevBbuCalibrateStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,407)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuCalibrateStart.setDescription('Battery calibration cycle started.')
ctldevBbuCalibrateDone = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,408)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuCalibrateDone.setDescription('Battery calibration cycle finished.')
ctldevBbuCalibrateAbort = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,409)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuCalibrateAbort.setDescription('Battery calibration cycle was cancelled.')
ctldevBbuNoBattery = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,410)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuNoBattery.setDescription('Battery is not present.')
ctldevConservCacheMode = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,411)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevConservCacheMode.setDescription('Controller entered conservative cache mode.')
ctldevNormalCacheMode = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,412)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNormalCacheMode.setDescription('Controller entered normal cache mode.')
ctldevDevStartCmplt = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,413)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevDevStartCmplt.setDescription('Controller device start complete.')
ctldevSoftEccCorrected = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,414)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevSoftEccCorrected.setDescription('Soft ECC error corrected.')
ctldevHardEccCorrected = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,415)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevHardEccCorrected.setDescription('Hard ECC error corrected.')
ctldevBbuRecondNeeded = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,416)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuRecondNeeded.setDescription('Battery recondition suggested.')
ctldevRemovedPtnr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,417)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevRemovedPtnr.setDescription("Controller's partner has been removed.")
ctldevBbuOutOfService = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,418)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuOutOfService.setDescription('BBU out of service.')
ctldevUpdatePtnrStatus = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,419)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevUpdatePtnrStatus.setDescription("Updated partner's status.")
ctldevRelinquishPtnr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,420)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevRelinquishPtnr.setDescription('Relinquished partner.')
ctldevInsertedPtnr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,421)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevInsertedPtnr.setDescription('Inserted partner.')
ctldevDualEnabled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,422)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevDualEnabled.setDescription('Dual controllers enabled.')
ctldevKillPtnr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,423)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevKillPtnr.setDescription('Disabled partner.')
ctldevNexus = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,424)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNexus.setDescription('Dual controllers entered nexus.')
ctldevBadBootromImage = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,425)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBadBootromImage.setDescription('Controller boot ROM image needs to be reloaded.')
ctldevBadMacAddress = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,426)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBadMacAddress.setDescription('Controller is using default non-unique world-wide name.')
ctldevMirrorRaceRecoveryFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,427)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevMirrorRaceRecoveryFailed.setDescription('Mirror Race recovery failed.')
ctldevMirrorCriticalDrive = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,428)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevMirrorCriticalDrive.setDescription('Mirror Race on critical logical drive.')
ctldevInCluster = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,429)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevInCluster.setDescription('Controller connected to cluster.')
ctldevNotInCluster = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,430)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNotInCluster.setDescription('Controller disconnected from cluster.')
sysdevDataLossImproperShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,431)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sysdevDataLossImproperShutdown.setDescription('Controller improperly shutdown! Data may have been lost.')
ctldevAutomaticFlashStarted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,432)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevAutomaticFlashStarted.setDescription('Dual-active automatic flash of replacement controller.')
ctldevNegotiationFailedJumpers = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,433)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNegotiationFailedJumpers.setDescription('Dual-active negotiation failed jumpers.')
ctldevNegotiationSameId = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,434)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNegotiationSameId.setDescription('Dual-active negotiation failed IDs.')
ctldevNegotiationBoardType = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,435)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNegotiationBoardType.setDescription('Dual-active negotiation failed board types.')
ctldevNegotiationDiskChannels = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,436)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNegotiationDiskChannels.setDescription('Dual-active negotiation failed disk channels.')
ctldevNegotiationHostChannels = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,437)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNegotiationHostChannels.setDescription('Dual-active negotiation failed host ports.')
ctldevNegotiationMemorySize = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,438)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNegotiationMemorySize.setDescription('Dual-active negotiation failed memory size.')
ctldevNegotiationCacheSize = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,439)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevNegotiationCacheSize.setDescription('Dual-active negotiation failed cache memory size.')
ctldevMirrorRaceTableError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,440)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9LogicalDriveNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevMirrorRaceTableError.setDescription('Error in Mirror Race Table.')
ctldevStopRejected = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,441)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevStopRejected.setDescription('A replacement controller attempted to stop the surviving')
systemStartedNew = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,512)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: systemStartedNew.setDescription('System started.')
systemSizeTableFull = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,513)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: systemSizeTableFull.setDescription('Size table full.')
systemUserLoggedIn = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,514)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: systemUserLoggedIn.setDescription('User logged in.')
systemUserLoggedOut = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,515)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: systemUserLoggedOut.setDescription('User logged out.')
systemAlive = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,516)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: systemAlive.setDescription('Server alive.')
systemDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,517)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: systemDead.setDescription('Lost connection to server, or server is down.')
autobootChanged = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,518)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: autobootChanged.setDescription('Automatic reboot count has changed.')
ctldevBbuBattTestStart = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,519)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuBattTestStart.setDescription('Battery test has started')
ctldevBbuBattTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,520)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuBattTestComplete.setDescription('Battery test complete')
ctldevBbuBattTestCanceled = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,521)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuBattTestCanceled.setDescription('Battery test canceled')
ctldevBbuBattTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,522)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: ctldevBbuBattTestFailed.setDescription('Battery test failed - battery bad')
channelFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,640)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: channelFailed.setDescription('Channel Failed.')
channelOk = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,641)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: channelOk.setDescription('Channel Online.')
channelScsiBusDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,642)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: channelScsiBusDead.setDescription('Back end SCSI bus dead.')
channelScsiBusAlive = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,643)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: channelScsiBusAlive.setDescription('Back end SCSI bus alive.')
channelFiberDead = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,644)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: channelFiberDead.setDescription('Back end fibre dead.')
channelFiberAlive = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,645)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: channelFiberAlive.setDescription('Back end fibre alive.')
logEmpty = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,700)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: logEmpty.setDescription('Event log empty.')
logOutSync = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,701)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: logOutSync.setDescription('Event log entries lost.')
logRequestSense = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,702)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: logRequestSense.setDescription('Request Sense')
logSetRtc = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,703)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: logSetRtc.setDescription('Set real time clock.')
cfgNew = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,800)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: cfgNew.setDescription('New configuration received.')
cfgClear = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,801)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: cfgClear.setDescription('Configuration cleared.')
cfgInvalid = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,802)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: cfgInvalid.setDescription('Configuration invalid.')
cfgCodAccessError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,803)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: cfgCodAccessError.setDescription('Configuration on disk access error.')
cfgCodConverted = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,804)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: cfgCodConverted.setDescription('Configuration on disk converted.')
cfgCodImportFailed = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,805)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: cfgCodImportFailed.setDescription('Configuration on disk import failed.')
debugDumpGenerated = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,806)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: debugDumpGenerated.setDescription('A debug dump exists on this system.')
debugDumpGeneratedPartner = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,807)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: debugDumpGeneratedPartner.setDescription('A debug dump exists on this system.')
cfgCodNotFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,808)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: cfgCodNotFound.setDescription('No valid Configuration On Disk (COD) found.')
cfgCodLunMapNotFound = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,809)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: cfgCodLunMapNotFound.setDescription('No valid SAN map found in Configuration On Disk (COD) found.')
fatalHang = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,896)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fatalHang.setDescription('Internal controller hung.')
fatalBrkp = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,897)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: fatalBrkp.setDescription('Internal controller firmware breakpoint.')
i960HwErr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,912)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: i960HwErr.setDescription('Internal controller i960 processor error.')
sarmHwErr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,928)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: sarmHwErr.setDescription('Internal controller Strong-ARM processor error.')
scsiHwErr = NotificationType((1, 3, 6, 1, 4, 1, 1608, 1, 1, 1, 9, 1) + (0,944)).setObjects(("MYLEXRAID-MIB", "a9EventCode"), ("MYLEXRAID-MIB", "a9ControllerNumber"), ("MYLEXRAID-MIB", "a9ChannelNumber"), ("MYLEXRAID-MIB", "a9TargetId"), ("MYLEXRAID-MIB", "a9Lun"), ("MYLEXRAID-MIB", "a9EventTimeStamp"))
if mibBuilder.loadTexts: scsiHwErr.setDescription('Internal Controller Backend Hardware Error.')
mibBuilder.exportSymbols("MYLEXRAID-MIB", a6LogicalDriveNumber=a6LogicalDriveNumber, firmwareUpgradeFailed=firmwareUpgradeFailed, a10CurrentPowerInHours=a10CurrentPowerInHours, sysdevBgInitRestarted=sysdevBgInitRestarted, enclheatBad=enclheatBad, ctldevBbuCalibrateAbort=ctldevBbuCalibrateAbort, a3PhysicalDriveMap=a3PhysicalDriveMap, a2HostControllerNumber=a2HostControllerNumber, a4HardErrors=a4HardErrors, physdevRemovedDead=physdevRemovedDead, aemiFanFailed=aemiFanFailed, a6DataReadInMb=a6DataReadInMb, a9FanUnitNumber=a9FanUnitNumber, DmiInteger=DmiInteger, channelScsiBusDead=channelScsiBusDead, enclcoldFail=enclcoldFail, fmtstwkFailed=fmtstwkFailed, a9ChannelNumber=a9ChannelNumber, ctldevCritical=ctldevCritical, a3ArrayList=a3ArrayList, a2NumberOfLogicalDevicesOffline=a2NumberOfLogicalDevicesOffline, a7Lun=a7Lun, ctldevNegotiationFailedJumpers=ctldevNegotiationFailedJumpers, physdevStandbyRebuildStart=physdevStandbyRebuildStart, dmtfStd=dmtfStd, a2HostChannelNumber=a2HostChannelNumber, DmiComponentIndex=DmiComponentIndex, tBatteryBackupUnitInformation=tBatteryBackupUnitInformation, physdevCommandAbort=physdevCommandAbort, systemSizeTableFull=systemSizeTableFull, ctldevNegotiationCacheSize=ctldevNegotiationCacheSize, physdevRebuildDone=physdevRebuildDone, a4ProductId=a4ProductId, ctldevGone=ctldevGone, a8NumberOfHeatSensors=a8NumberOfHeatSensors, a2LogicalDrivesReadCacheHitPercentage=a2LogicalDrivesReadCacheHitPercentage, physdevRebuildNewdevFailed=physdevRebuildNewdevFailed, eMylexDacManagementSoftware=eMylexDacManagementSoftware, physdevFound=physdevFound, physdevDblccDead=physdevDblccDead, logRequestSense=logRequestSense, sysdevCheckSysdevFailed=sysdevCheckSysdevFailed, ctldevPowerOn=ctldevPowerOn, ctldevNegotiationMemorySize=ctldevNegotiationMemorySize, logOutSync=logOutSync, sysdevCheckStart=sysdevCheckStart, fmtUpsDisabled=fmtUpsDisabled, sysdevCheckPhysdevFailed=sysdevCheckPhysdevFailed, a4TargetId=a4TargetId, sysdevBgInitFailed=sysdevBgInitFailed, tLogicalDriveStatistics=tLogicalDriveStatistics, eBatteryBackupUnitInformation=eBatteryBackupUnitInformation, sysdevGone=sysdevGone, ctldevBbuCalibrateStart=ctldevBbuCalibrateStart, fmtstwkOk=fmtstwkOk, debugDumpGeneratedPartner=debugDumpGeneratedPartner, physdevExpandcapacityError=physdevExpandcapacityError, a2BatteryBackupUnitStatus=a2BatteryBackupUnitStatus, a8NumberOfSpeakers=a8NumberOfSpeakers, a2LogicalDriveReadRequests=a2LogicalDriveReadRequests, ePhysicalDriveStatistics=ePhysicalDriveStatistics, physdevUnknownstsDead=physdevUnknownstsDead, physdevBadtagDead=physdevBadtagDead, ePhysicalDeviceInformation=ePhysicalDeviceInformation, a2LogicalSectorSizeInBytes=a2LogicalSectorSizeInBytes, physdevIdMismatch=physdevIdMismatch, physdevPfa=physdevPfa, a9FmtCabinetNumber=a9FmtCabinetNumber, scsiHwErr=scsiHwErr, physdevWarmspare=physdevWarmspare, DmiCounter=DmiCounter, ctldevOffline=ctldevOffline, sysdevCheckDone=sysdevCheckDone, a8ControllerNumber=a8ControllerNumber, physdevExpandcapacityDone=physdevExpandcapacityDone, enclpowerFailed=enclpowerFailed, a2SystemBusNumber=a2SystemBusNumber, physdevMovingToOtherChn=physdevMovingToOtherChn, ctldevStateTableFull=ctldevStateTableFull, fmtfanFailed=fmtfanFailed, a6DataWrittenInMb=a6DataWrittenInMb, a10BatteryType=a10BatteryType, a4OperationalState=a4OperationalState, a6WriteRequests=a6WriteRequests, a5ManagementSoftwareRevision=a5ManagementSoftwareRevision, fmtUpsFailed=fmtUpsFailed, tMylexRaidEventInformation=tMylexRaidEventInformation, fatalBrkp=fatalBrkp, physdevInitStarted=physdevInitStarted, ctldevWritebackError=ctldevWritebackError, ctldevMirrorCriticalDrive=ctldevMirrorCriticalDrive, a7DataWrittenInMb=a7DataWrittenInMb, physdevReset=physdevReset, cfgCodImportFailed=cfgCodImportFailed, a8ChannelNumber=a8ChannelNumber, ctldevWarmBootError=ctldevWarmBootError, dmtfGroups=dmtfGroups, sysdevCheckError=sysdevCheckError, a2ArrayInformation=a2ArrayInformation, sysdevBgInitStopped=sysdevBgInitStopped, a8NumberOfHeatSensorsFailed=a8NumberOfHeatSensorsFailed, systemStarted=systemStarted, sysdevOnline=sysdevOnline, physdevBsyparDead=physdevBsyparDead, ctldevDevStartCmplt=ctldevDevStartCmplt, a4CommandQueuing=a4CommandQueuing, sysdevRebuildSysdevFailed=sysdevRebuildSysdevFailed, a2DataWrittenToLogicalDrivesInMb=a2DataWrittenToLogicalDrivesInMb, fmtheatBad=fmtheatBad, logEmpty=logEmpty, a8NumberOfDoorLocks=a8NumberOfDoorLocks, cfgCodLunMapNotFound=cfgCodLunMapNotFound, sysdevRebuildDone=sysdevRebuildDone, enclcoldWarn=enclcoldWarn, physdevMissingOnstartup=physdevMissingOnstartup, sysdevBgInitPaused=sysdevBgInitPaused, channelOk=channelOk, ctldevKillPtnr=ctldevKillPtnr, ctldevFirmwareMismatch=ctldevFirmwareMismatch, a8TargetId=a8TargetId, a8Lun=a8Lun, ppilotLogicalDiskOffline=ppilotLogicalDiskOffline, a4ParityErrors=a4ParityErrors, systemDead=systemDead, a10ControllerNumber=a10ControllerNumber, a8NumberOfHeatSensorsCritical=a8NumberOfHeatSensorsCritical, ctldevMirrorRaceEntryFailed=ctldevMirrorRaceEntryFailed, physdevCodwrfailDead=physdevCodwrfailDead, a3SizeInMb=a3SizeInMb, ctldevNegotiationBoardType=ctldevNegotiationBoardType, a4SoftErrors=a4SoftErrors, cfgNew=cfgNew, a2DataWrittenToPhysicalDrivesInMb=a2DataWrittenToPhysicalDrivesInMb, physdevFailedStart=physdevFailedStart, a9Lun=a9Lun, physdevExpandcapacityStart=physdevExpandcapacityStart, sysdevDataLossLowBbuCharge=sysdevDataLossLowBbuCharge, cfgInvalid=cfgInvalid, fibredevLoopidSoftaddrOccurred=fibredevLoopidSoftaddrOccurred, DmiDate=DmiDate, physdevNonRedundantAccess=physdevNonRedundantAccess, a5ManagementSoftwareBuildDate=a5ManagementSoftwareBuildDate, a2HostTargetId=a2HostTargetId, a8NumberOfPowerSupplyUnitsCritical=a8NumberOfPowerSupplyUnitsCritical, enclpowerOk=enclpowerOk, a3PhysicalSizeInMb=a3PhysicalSizeInMb, sysdevOffline=sysdevOffline, sysdevBadblock=sysdevBadblock, a2NumberOfPhysicalDevices=a2NumberOfPhysicalDevices, cfgCodConverted=cfgCodConverted, a4ControllerNumber=a4ControllerNumber, debugDumpGenerated=debugDumpGenerated, sysdevStandbyRebuildStart=sysdevStandbyRebuildStart, physdevSeqerrDead=physdevSeqerrDead, ctldevNexus=ctldevNexus, systemUserLoggedIn=systemUserLoggedIn, a9EnclosureUnitNumber=a9EnclosureUnitNumber, a2EpromSizeInKb=a2EpromSizeInKb, a10ThresholdValueInHours=a10ThresholdValueInHours, a9PowerSupplyUnitNumber=a9PowerSupplyUnitNumber, systemUserLoggedOut=systemUserLoggedOut, cfgCodAccessError=cfgCodAccessError, aemiOverTemperature=aemiOverTemperature, enclpowerUnknown=enclpowerUnknown, a2RebuildRate=a2RebuildRate, enclsesSoftaddrOccurred=enclsesSoftaddrOccurred, ctldevBbuNoBattery=ctldevBbuNoBattery, enclpowerNotpresent=enclpowerNotpresent, logSetRtc=logSetRtc, physdevHotSpareSmaller=physdevHotSpareSmaller, physdevSysresetDead=physdevSysresetDead, cfgClear=cfgClear, a2ControllerNumber=a2ControllerNumber, systemAlive=systemAlive, a2PhysicalSectorSizeInBytes=a2PhysicalSectorSizeInBytes, sysdevBgInitCompleted=sysdevBgInitCompleted, physdevMissingDead=physdevMissingDead, eLogicalDriveStatistics=eLogicalDriveStatistics, physdevOnline=physdevOnline, ctldevNegotiationSameId=ctldevNegotiationSameId, a2OperationalState=a2OperationalState, sysdevExpandcapacityDone=sysdevExpandcapacityDone, physdevInitDone=physdevInitDone, systemStartedNew=systemStartedNew, sysdevInitFailed=sysdevInitFailed, channelFiberDead=channelFiberDead, enclfanFailed=enclfanFailed, physdevWriterecDead=physdevWriterecDead, physdevParityError=physdevParityError, a2StorageworksCabinetStatusOnChannel2=a2StorageworksCabinetStatusOnChannel2, sysdevExpandcapacityStart=sysdevExpandcapacityStart, a10Version=a10Version, a8NumberOfPowerSupplyUnitsFailed=a8NumberOfPowerSupplyUnitsFailed, physdevGone=physdevGone, a2MaximumDataTransferSizePerIoRequestInK=a2MaximumDataTransferSizePerIoRequestInK, a4ProductRevisionLevel=a4ProductRevisionLevel, a2DataReadFromLogicalDrivesInMb=a2DataReadFromLogicalDrivesInMb, a2PhysicalDriveReadRequests=a2PhysicalDriveReadRequests, ctldevBbuRecondNeeded=ctldevBbuRecondNeeded, a4ArrayList=a4ArrayList, a5MylexDacDeviceDriverRevision=a5MylexDacDeviceDriverRevision, a3WritePolicy=a3WritePolicy, fmtUpsOk=fmtUpsOk, ctldevMirrorRaceRecoveryFailed=ctldevMirrorRaceRecoveryFailed, sysdevRebuildCanceled=sysdevRebuildCanceled, sysdevBaddatablock=sysdevBaddatablock, a4ChannelNumber=a4ChannelNumber, sysdevInitDone=sysdevInitDone, physdevPortFailed=physdevPortFailed, tPhysicalDriveStatistics=tPhysicalDriveStatistics, sysdevRebuildNewdevFailed=sysdevRebuildNewdevFailed, physdevOffline=physdevOffline, physdevAutoRebuildStart=physdevAutoRebuildStart, a9EventTimeStamp=a9EventTimeStamp, enclaccessCritical=enclaccessCritical, fmtfanNotpresent=fmtfanNotpresent, ctldevNormalCacheMode=ctldevNormalCacheMode, fmtpowerOk=fmtpowerOk, enclheatOk=enclheatOk, ctldevBbuRecondDone=ctldevBbuRecondDone, ctldevBbuCalibrateDone=ctldevBbuCalibrateDone, physdevRebuildError=physdevRebuildError, ctldevCtrlParamsChecksumFailed=ctldevCtrlParamsChecksumFailed, sysdevWrLunMap=sysdevWrLunMap, ctldevFound=ctldevFound, sysdevInitCanceled=sysdevInitCanceled, physdevBycmdDead=physdevBycmdDead, fatalHang=fatalHang, i960HwErr=i960HwErr, enclheatUnknown=enclheatUnknown, ctldevUpdatePtnrStatus=ctldevUpdatePtnrStatus, a2StorageworksCabinetStatusOnChannel0=a2StorageworksCabinetStatusOnChannel0, fmtfanOk=fmtfanOk, a3OperationalState=a3OperationalState, physdevSeltmoDead=physdevSeltmoDead, physdevOffsetSet=physdevOffsetSet, a2NumberOfPhysicalDevicesOffline=a2NumberOfPhysicalDevicesOffline, mylex=mylex, a9HeatSensorUnitNumber=a9HeatSensorUnitNumber, a9LogicalDriveNumber=a9LogicalDriveNumber, sysdevSizechanged=sysdevSizechanged, ctldevMirrorRaceTableError=ctldevMirrorRaceTableError, ctldevSoftEccCorrected=ctldevSoftEccCorrected, ctldevInstallationAborted=ctldevInstallationAborted, ctldevBbuBattTestComplete=ctldevBbuBattTestComplete, channelScsiBusAlive=channelScsiBusAlive, a4SizeInMb=a4SizeInMb, ctldevBbuBattTestCanceled=ctldevBbuBattTestCanceled, physdevSoftError=physdevSoftError, ppilotLogicalDiskOnline=ppilotLogicalDiskOnline, fmtUpsBatLow=fmtUpsBatLow, a4Lun=a4Lun, a3LogicalDriveNumber=a3LogicalDriveNumber, fmtpowerNotpresent=fmtpowerNotpresent)
mibBuilder.exportSymbols("MYLEXRAID-MIB", enclfanNotpresent=enclfanNotpresent, physdevReqsense=physdevReqsense, sysdevManualRebuildStart=sysdevManualRebuildStart, a8NumberOfPowerSupplyUnits=a8NumberOfPowerSupplyUnits, enclosureShutdown=enclosureShutdown, aemiPwrSupplyFailed=aemiPwrSupplyFailed, enclfanUnknown=enclfanUnknown, sysdevDataForBlockLost=sysdevDataForBlockLost, a6ReadCacheHitPercentage=a6ReadCacheHitPercentage, ctldevBbuBattTestStart=ctldevBbuBattTestStart, eLogicalDriveInformation=eLogicalDriveInformation, physdevRebuildStartFailed=physdevRebuildStartFailed, a2MaximumTaggedRequests=a2MaximumTaggedRequests, ctldevBbuPowerLow=ctldevBbuPowerLow, a2MaximumLogicalDrives=a2MaximumLogicalDrives, a2CacheSizeInMb=a2CacheSizeInMb, cfgCodNotFound=cfgCodNotFound, a9EventTableIndex=a9EventTableIndex, sysdevOfflineDeviceMadeAvailable=sysdevOfflineDeviceMadeAvailable, physdevInitCanceled=physdevInitCanceled, physdevActivespare=physdevActivespare, ctldevRemovedPtnr=ctldevRemovedPtnr, fmtheatNotpresent=fmtheatNotpresent, a10OperationalStateString=a10OperationalStateString, sysdevCheckCanceled=sysdevCheckCanceled, ctldevBbuRecondAbort=ctldevBbuRecondAbort, ctldevInCluster=ctldevInCluster, a9EventCode=a9EventCode, a10MaximumPowerInHours=a10MaximumPowerInHours, fmtheatOk=fmtheatOk, a2NumberOfLogicalDevices=a2NumberOfLogicalDevices, ppilotLogicalDiskPathFailover=ppilotLogicalDiskPathFailover, a7WriteRequests=a7WriteRequests, ctldevBbuFound=ctldevBbuFound, a2MaximumConcurrentCommands=a2MaximumConcurrentCommands, a9ControllerNumber=a9ControllerNumber, a10OperationalState=a10OperationalState, a2CacheLineSizeInBytes=a2CacheLineSizeInBytes, a3RaidLevelString=a3RaidLevelString, DmiDisplaystring=DmiDisplaystring, ctldevInsertedPtnr=ctldevInsertedPtnr, ctldevBbuRecondStart=ctldevBbuRecondStart, ctldevNotInCluster=ctldevNotInCluster, sysdevCritical=sysdevCritical, sysdevOfflineDeviceMadeAvailableWithDataloss=sysdevOfflineDeviceMadeAvailableWithDataloss, a4BusWidth=a4BusWidth, sysdevDatareadFromBlockInBdt=sysdevDatareadFromBlockInBdt, tLogicalDriveInformation=tLogicalDriveInformation, a2CacheMemoryType=a2CacheMemoryType, a2SlotNumber=a2SlotNumber, physdevRebuildSysdevFailed=physdevRebuildSysdevFailed, channelFailed=channelFailed, a8NumberOfFansFailed=a8NumberOfFansFailed, sysdevBgInitStarted=sysdevBgInitStarted, enclaccessOffline=enclaccessOffline, eControllerInformation=eControllerInformation, a6ReadRequests=a6ReadRequests, a8CabinetNumber=a8CabinetNumber, ctldevAutomaticFlashStarted=ctldevAutomaticFlashStarted, physdevOfflineDeviceMadeOnline=physdevOfflineDeviceMadeOnline, physdevInitFailed=physdevInitFailed, ctldevPowerOff=ctldevPowerOff, ctldevConservCacheMode=ctldevConservCacheMode, a8NumberOfFans=a8NumberOfFans, a8NumberOfFansCritical=a8NumberOfFansCritical, sarmHwErr=sarmHwErr, a2PartnerControllerNumber=a2PartnerControllerNumber, a10ChargeLevelInPercentage=a10ChargeLevelInPercentage, a3RaidLevel=a3RaidLevel, sysdevTypechanged=sysdevTypechanged, ctldevBadMacAddress=ctldevBadMacAddress, physdevUnconfigured=physdevUnconfigured, a2FirmwareRevision=a2FirmwareRevision, physdevSoftId=physdevSoftId, physdevHotspare=physdevHotspare, sysdevInitStarted=sysdevInitStarted, physdevCommandRetried=physdevCommandRetried, ctldevBbuPowerOk=ctldevBbuPowerOk, ctldevDead=ctldevDead, ctldevStopRejected=ctldevStopRejected, sysdevExpandcapacityError=sysdevExpandcapacityError, sysdevFound=sysdevFound, a2ControllerModel=a2ControllerModel, physdevNotrdyDead=physdevNotrdyDead, a2PhysicalDriveWriteRequests=a2PhysicalDriveWriteRequests, a2InterruptVectorNumber=a2InterruptVectorNumber, sysdevRebuildError=sysdevRebuildError, ctldevNegotiationDiskChannels=ctldevNegotiationDiskChannels, a5GamDriverRevision=a5GamDriverRevision, physdevGrosserrDead=physdevGrosserrDead, ctldevHardEccCorrected=ctldevHardEccCorrected, ppilotLogicalDiskPathFailback=ppilotLogicalDiskPathFailback, physdevManualRebuildStart=physdevManualRebuildStart, physdevResetDead=physdevResetDead, physdevScsitmoDead=physdevScsitmoDead, dmtfComponents=dmtfComponents, a3ControllerNumber=a3ControllerNumber, ctldevBbuNoresponse=ctldevBbuNoresponse, enclheatCritical=enclheatCritical, a2StorageworksCabinetStatusOnChannel1=a2StorageworksCabinetStatusOnChannel1, a7ReadRequests=a7ReadRequests, a3StripeSizeInBytes=a3StripeSizeInBytes, tControllerInformation=tControllerInformation, ctldevDualEnabled=ctldevDualEnabled, physdevSetBusWidth=physdevSetBusWidth, eMylexRaidEventInformation=eMylexRaidEventInformation, enclaccessReady=enclaccessReady, eFaultManagementCabinetInformation=eFaultManagementCabinetInformation, physdevRebuildCanceled=physdevRebuildCanceled, sysdevAutoRebuildStart=sysdevAutoRebuildStart, firmwareUpgradeStarted=firmwareUpgradeStarted, a2ConfiguredChannels=a2ConfiguredChannels, firmwareUpgradeComplete=firmwareUpgradeComplete, a2FaultManagementType=a2FaultManagementType, a2NumberOfLogicalDevicesCritical=a2NumberOfLogicalDevicesCritical, a7ControllerNumber=a7ControllerNumber, a9TargetId=a9TargetId, a4VendorId=a4VendorId, fmtUpsAcFail=fmtUpsAcFail, ctldevOnline=ctldevOnline, a4DeviceType=a4DeviceType, ctldevBbuBattTestFailed=ctldevBbuBattTestFailed, a7TargetId=a7TargetId, a7DataReadInMb=a7DataReadInMb, physdevBdtwrfailDead=physdevBdtwrfailDead, a8NumberOfDriveSlots=a8NumberOfDriveSlots, a2BusType=a2BusType, ctldevReset=ctldevReset, fmtheatCritical=fmtheatCritical, a5GamDriverBuildDate=a5GamDriverBuildDate, a2WwName=a2WwName, physdevMiscError=physdevMiscError, ctldevBbuOutOfService=ctldevBbuOutOfService, a2DataReadFromPhysicalDrivesInMb=a2DataReadFromPhysicalDrivesInMb, enclheatNotpresent=enclheatNotpresent, a8CabinetType=a8CabinetType, a2ActualChannels=a2ActualChannels, a4BusSpeed=a4BusSpeed, physdevStandby=physdevStandby, enclaccessOk=enclaccessOk, autobootChanged=autobootChanged, a7ChannelNumber=a7ChannelNumber, enclfanOk=enclfanOk, ctldevRelinquishPtnr=ctldevRelinquishPtnr, fmtpowerFailed=fmtpowerFailed, a4LogicalDriveList=a4LogicalDriveList, ctldevNegotiationHostChannels=ctldevNegotiationHostChannels, tFaultManagementCabinetInformation=tFaultManagementCabinetInformation, a2MaximumTargetsPerChannel=a2MaximumTargetsPerChannel, a2LogicalDriveWriteRequests=a2LogicalDriveWriteRequests, fmtstwkCritical=fmtstwkCritical, physdevDead=physdevDead, a4MiscErrors=a4MiscErrors, physdevTypeInvalid=physdevTypeInvalid, tMylexDacManagementSoftware=tMylexDacManagementSoftware, a2ControllerClass=a2ControllerClass, physdevCommandTimeout=physdevCommandTimeout, a4PfaErrors=a4PfaErrors, a6ControllerNumber=a6ControllerNumber, a2InterruptMode=a2InterruptMode, tPhysicalDeviceInformation=tPhysicalDeviceInformation, physdevHardError=physdevHardError, sysdevDataLossImproperShutdown=sysdevDataLossImproperShutdown, physdevRebuild=physdevRebuild, a5MylexDacDeviceDriverBuildDate=a5MylexDacDeviceDriverBuildDate, channelFiberAlive=channelFiberAlive, ctldevBadBootromImage=ctldevBadBootromImage)
