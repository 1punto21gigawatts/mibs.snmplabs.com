#
# PySNMP MIB module USHA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/USHA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, NotificationType, ObjectIdentity, MibIdentifier, TimeTicks, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Unsigned32, Bits, IpAddress, Integer32, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "NotificationType", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Unsigned32", "Bits", "IpAddress", "Integer32", "Counter32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
PositiveInteger, NonNegativeInteger = mibBuilder.importSymbols("UPS-MIB", "PositiveInteger", "NonNegativeInteger")
ingrasys = MibIdentifier((1, 3, 6, 1, 4, 1, 2468))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1))
upsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2))
ushap = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1))
upsObjectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1))
upsTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2))
upsIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1))
upsBatteryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2))
upsInputGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3))
upsOutputGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4))
upsBypassGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5))
upsTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6))
upsControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7))
upsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8))
upsClients = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9))
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10))
emdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11))
emdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12))
upsIdentGroupManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentGroupManufacturer.setDescription('The name of the UPS manufacturer.')
upsIdentGroupModel = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentGroupModel.setDescription('The UPS Model designation.')
upsIdentGroupUPSFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupUPSFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentGroupUPSFirmwareVersion.setDescription('The UPS firmware/software version(s). This variable may or may not have the same value as upsIdentGroupAgentSoftwareVersion in some implementations.')
upsIdentGroupAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentGroupAgentSoftwareVersion.setDescription('The USHA software/firmware version. This variable may or may not have the same value as upsIdentGroupUPSSoftwareVersion in some implementations.')
upsIdentGroupName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentGroupName.setDescription('A string identifying the UPS. This object should be set by the administrator.')
upsIdentGroupAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentGroupAttachedDevices.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentGroupAttachedDevices.setDescription('A string identifying the devices attached to the output(s) of the UPS. This object should be set by the administrator.')
upsIdentGroupUpsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentGroupUpsSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentGroupUpsSerialNumber.setDescription('The UPS serial no.')
upsBatteryGroupStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4), ("batteryDischarging", 5), ("batteryFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryGroupStatus.setDescription("The indication of the status in the UPS system's batteries.")
upsBatteryGroupSecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupSecondsOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryGroupSecondsOnBattery.setDescription('If the unit is on battery power, the elapsed time since the UPS last switched to battery power, or the time since the network management subsystem was last restarted, whichever is less. 0 shall be returned if the unit is not on battery power.')
upsBatteryGroupEstimatedMinutesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupEstimatedMinutesRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryGroupEstimatedMinutesRemaining.setDescription('An estimate of the time to battery charge depletion under the present load conditions if the utility power is off and remains off, or if it were to be lost and remain off.')
upsBatteryGroupEstimatedChargeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupEstimatedChargeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryGroupEstimatedChargeRemaining.setDescription('An estimate of the battery charge remaining expressed as a percent of full charge.')
upsBatteryGroupVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryGroupVoltage.setDescription('The magnitude of the present battery voltage in 0.1 Volt DC.')
upsBatteryGroupMandatory = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupMandatory.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryGroupMandatory.setDescription('The present battery mandatory.')
upsBatteryGroupTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryGroupTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryGroupTemperature.setDescription('The ambient temperature at or near the UPS Battery casing.')
upsInputGroupLineBads = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupLineBads.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupLineBads.setDescription('A count of the number of times the input entered an out-of-tolerance condition as defined by the manufacturer. This count is incremented by one each time the input transitions from zero out-of-tolerance lines to one or more input lines out-of-tolerance.')
upsInputGroupNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupNumLines.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupNumLines.setDescription('The number of input lines utilized in this device. This variable indicates the number of rows in the input table.')
upsInputGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3), )
if mibBuilder.loadTexts: upsInputGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupTable.setDescription('A list of input table entries. The number of entries is given by the value of upsInputGroupNumLines.')
upsInputGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1), ).setIndexNames((0, "USHA-MIB", "upsInputGroupLineIndex"))
if mibBuilder.loadTexts: upsInputGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupEntry.setDescription('An entry containing information applicable to a particular input line.')
upsInputGroupLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupLineIndex.setDescription('The index of UpsInputGroupEntry.')
upsInputGroupFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupFrequency.setDescription('The present input frequency.')
upsInputGroupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupVoltage.setDescription('The input utility line voltage in 0.1 volts.')
upsInputGroupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupCurrent.setDescription('The magnitude of the present input current in 0.1 A.')
upsInputGroupTruePower = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupTruePower.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupTruePower.setDescription('The magnitude of the present input true power.')
upsInputGroupVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupVoltageMax.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupVoltageMax.setDescription('The maximum utility line voltage in 0.1 VAC for last 1 minute.')
upsInputGroupVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 3, 3, 1, 7), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputGroupVoltageMin.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputGroupVoltageMin.setDescription('The minimum utility line voltage in 0.1 VAC for last 1 minute.')
upsOutputGroupSource = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupSource.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupSource.setDescription('The present source of output power. The enumeration none(2) indicates that there is no source of output power (and therefore no output power), for example, the system has opened the output breaker.')
upsOutputGroupFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupFrequency.setDescription('The current output frequency of the UPS system in 0.1 of HZ.')
upsOutputGroupNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupNumLines.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupNumLines.setDescription('The number of output lines utilized in this device. This variable indicates the number of rows in the output table.')
upsOutputGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4), )
if mibBuilder.loadTexts: upsOutputGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupTable.setDescription('A list of output table entries. The number of entries is given by the value of upsOutputGroupNumLines.')
upsOutputGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1), ).setIndexNames((0, "USHA-MIB", "upsOutputGroupLineIndex"))
if mibBuilder.loadTexts: upsOutputGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupEntry.setDescription('An entry containing information applicable to a particular output line.')
upsOutputGroupLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupLineIndex.setDescription('The output line identifier.')
upsOutputGroupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupVoltage.setDescription('The output voltage of the UPS system in 0.1 volts.')
upsOutputGroupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupCurrent.setDescription('The output current of the UPS system in 0.1 Amps.')
upsOutputGroupPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupPower.setDescription('The present output true power.')
upsOutputGroupPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputGroupPercentLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputGroupPercentLoad.setDescription('The percentage of the UPS power capacity presently being used on this output line, i.e., the greater of the percent load of true power capacity and the percent load of VA.')
upsBypassGroupFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassGroupFrequency.setDescription('The present bypass frequency.')
upsBypassGroupNumLines = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupNumLines.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassGroupNumLines.setDescription('The number of bypass lines utilized in this device. This entry indicates the number of rows in the bypass table.')
upsBypassGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3), )
if mibBuilder.loadTexts: upsBypassGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassGroupTable.setDescription('A list of bypass table entries. The number of entries is given by the value of upsBypassGroupNumLines.')
upsBypassGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1), ).setIndexNames((0, "USHA-MIB", "upsBypassGroupLineIndex"))
if mibBuilder.loadTexts: upsBypassGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassGroupEntry.setDescription('An entry containing information applicable to a particular bypass input.')
upsBypassGroupLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1, 1), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassGroupLineIndex.setDescription('The bypass line identifier.')
upsBypassGroupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1, 2), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassGroupVoltage.setDescription('The present bypass voltage.')
upsBypassGroupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1, 3), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassGroupCurrent.setDescription('The present bypass current.')
upsBypassGroupPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 5, 3, 1, 4), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassGroupPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassGroupPower.setDescription('The present true power conveyed by the bypass.')
upsTestBatteryTestSettingTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTestBatteryTestSettingTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestBatteryTestSettingTime.setDescription('The object specify the test time for battery test.')
upsBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("battTest10sec", 2), ("battTestUntilLow", 3), ("battTestWithTime", 4), ("battTestCancelTest", 5), ("battTestClearInfo", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTest.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTest.setDescription('This object specify the battery test type and initiate battery test. If battTestWithTime selected, the test time is refer to upsTestBatteryTestTime.')
upsTestBatteryTestResult = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("donePassed", 1), ("doneWarning", 2), ("doneError", 3), ("aborted", 4), ("inProgress", 5), ("noTestsInitiated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestBatteryTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestBatteryTestResult.setDescription('The results of the current or last UPS diagnostics test performed. The values for donePassed(1), doneWarning(2), and doneError(3) indicate that the test completed either successfully, with a warning, or with an error, respectively. The value aborted(4) is returned for tests which are aborted by setting the value of upsTestId to upsTestAbortTestInProgress. Tests which have not yet concluded are indicated by inProgress(5). The value noTestsInitiated(6) indicates that no previous test results are available, such as is the case when no tests have been run since the last reinitialization of the network management subsystem and the system has no provision for non- volatile storage of test results.')
upsTestBatteryTestStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestBatteryTestStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestBatteryTestStartTime.setDescription('The value of the time the test in progress was initiated, or, if no test is in progress, the time the previous test was initiated. If the value of upsTestBatteryTestResult is noTestsInitiated(6), upsTestStartTime has the value 01/01/1970 00:00:00.')
upsTestBatteryTestElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestBatteryTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestBatteryTestElapsedTime.setDescription('The amount of time, in TimeTicks, since the test in progress was initiated, or, if no test is in progress, the previous test took to complete. If the value of upsTestResultsSummary is noTestsInitiated(6), upsTestElapsedTime has the value 00:00:00.00.')
upsBatteryTestScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6), )
if mibBuilder.loadTexts: upsBatteryTestScheduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestScheduleTable.setDescription('Table which describes the schedule for automatically battery test.')
upsBatteryTestScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1), ).setIndexNames((0, "USHA-MIB", "upsBatteryTestScheduleIndex"))
if mibBuilder.loadTexts: upsBatteryTestScheduleEntry.setStatus('mandatory')
upsBatteryTestScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTestScheduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestScheduleIndex.setDescription('The index of battery test scheduled.')
upsBatteryTestScheduleDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("specialDay", 8), ("none", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestScheduleDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestScheduleDay.setDescription('The weekday on which the UPS should start battery test.')
upsBatteryTestScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestScheduleTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestScheduleTime.setDescription('The time that the battery test will be initiated in hh:mm format.')
upsBatteryTestScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("battTest10sec", 2), ("battTestUntilLow", 3), ("battTestWithTime", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestScheduleType.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestScheduleType.setDescription('The type of battery test.')
upsBatteryTestScheduleTestWithTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTestScheduleTestWithTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestScheduleTestWithTime.setDescription('The battTestWithTime of battery test is supported or not.')
upsBatteryTestScheduleSpecialDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 6, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBatteryTestScheduleSpecialDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTestScheduleSpecialDay.setDescription('The special day that the battery test will be initiated in dd/mm/yyyy format.')
upsControlUpsShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlUpsShutdownDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlUpsShutdownDelay.setDescription('The delay in seconds the UPS remains on after being told to turn off.')
upsControlUpsSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlUpsSleepTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlUpsSleepTime.setDescription('The time in minutes for the UPS to go to sleep when instructed. When in sleep mode, the UPS will not provide output power regardless of the input line state. Once the specified time has elapsed, output power will be restored. This is a configuration setting. The UPS will not go to sleep until told to do so by the manager from a management station. Any input value is allowed, however the UPS only recognizes 0 - 9999 minutes in one minute increments. If the provided value is higher than the highest acceptable value, the highest acceptable value is used.')
upsControlUpsOnOffControl = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("turnUpsOff", 1), ("putUpsToSleep", 2), ("turnOnUpsOrCancelShutdown", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlUpsOnOffControl.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlUpsOnOffControl.setDescription('Setting this variable to control UPS output status. turnUpsOff(1) will set UPS turn off output after upsControlUpsShutdownDelay period expired. putUpsToSleep(2) will set UPS turn off output after upsControlUpsShutdownDelay period expired, UPS output will stay off with the period defined by upsControlUpsSleepTime, then turn output on. turnOnUpsOrCancelShutdown(3) can used to turn on UPS output, or cancel any shutdown process.')
upsControlShutdownParametersTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4), )
if mibBuilder.loadTexts: upsControlShutdownParametersTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlShutdownParametersTable.setDescription('Table which describes the parametes for shutdown process when shutdown event occurs')
upsControlShutdownParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1), ).setIndexNames((0, "USHA-MIB", "upsControlEvent"))
if mibBuilder.loadTexts: upsControlShutdownParametersEntry.setStatus('mandatory')
upsControlEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("acFail", 1), ("batteryLow", 2), ("upsOverload", 3), ("upsOverTempeature", 4), ("weeklySchedule", 5), ("specialDaySchedule", 6), ("emdTemperatureOverThreshold", 7), ("emdAlarm1", 8), ("emdAlarm2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsControlEvent.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlEvent.setDescription(' The shutdown event identification ')
upsControlEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("warning", 2), ("clientShutdown", 3), ("upsTurnOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlEventStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlEventStatus.setDescription('Status of the corresponding shutdown Event. When set to disable(), shutdown process will not start when corresponding event occured.')
upsControlDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlDelay.setDescription('The Delay after the occurance of the curresponding shutdown event that USHA should issue shutdown request to connected clients. For WeeklyScheduledShutdown and SpecialScheduledShutdown, this is the time before the configured Shutdowntime when USHA will start sending the warning message to the connected clients. The value is in units of minutes.')
upsControlFirstWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlFirstWarning.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlFirstWarning.setDescription('The delay after the occurance of the curresponding shutdown event that the USHA will start sending the warning message to the connected clients. The value is in units of seconds')
upsControlWarningInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWarningInterval.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlWarningInterval.setDescription('The frequency of sending warning messages to the connected clients when the curresponding shutdown event occurs. The value is in units of seconds.')
upsControlWeeklyScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5), )
if mibBuilder.loadTexts: upsControlWeeklyScheduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlWeeklyScheduleTable.setDescription('The table to schedule shutting down the ups by weekly.')
upsControlWeeklyScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1), ).setIndexNames((0, "USHA-MIB", "upsControlWeeklyIndex"))
if mibBuilder.loadTexts: upsControlWeeklyScheduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlWeeklyScheduleEntry.setDescription('The entries for each day.')
upsControlWeeklyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsControlWeeklyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlWeeklyIndex.setDescription('The index of scheduled events.')
upsControlWeeklyShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWeeklyShutdownDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlWeeklyShutdownDay.setDescription('The weekday on which the UPS should shut down.')
upsControlWeeklyShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWeeklyShutdownTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlWeeklyShutdownTime.setDescription('The time that the process of shutting down the UPS will be initiated in hh:mm format.')
upsControlWeeklyRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWeeklyRestartDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlWeeklyRestartDay.setDescription('The weekday on which the UPS should restart')
upsControlWeeklyRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlWeeklyRestartTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlWeeklyRestartTime.setDescription('The time the UPS will restart in hh:mm format.')
upsControlSpecialScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6), )
if mibBuilder.loadTexts: upsControlSpecialScheduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlSpecialScheduleTable.setDescription('The table to schedule shutting down the ups.')
upsControlSpecialScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1), ).setIndexNames((0, "USHA-MIB", "upsControlSpecialIndex"))
if mibBuilder.loadTexts: upsControlSpecialScheduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlSpecialScheduleEntry.setDescription('The entries for each day.')
upsControlSpecialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsControlSpecialIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlSpecialIndex.setDescription('The index of scheduled events.')
upsControlSpecialShutdownDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlSpecialShutdownDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlSpecialShutdownDay.setDescription('The date on which the UPS should shut down in dd/mm/yyyy format.')
upsControlSpecialShutdownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlSpecialShutdownTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlSpecialShutdownTime.setDescription('The time that the process of shutting down the UPS will be initiated in hh:mm format')
upsControlSpecialRestartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlSpecialRestartDay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlSpecialRestartDay.setDescription('The date on which the UPS should restart in dd/mm/yyyy format')
upsControlSpecialRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 7, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlSpecialRestartTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlSpecialRestartTime.setDescription('The time the UPS will restart in hh:mm format.')
upsConfigGroupInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigGroupInputVoltage.setDescription('The magnitude of the nominal input voltage. On those systems which support read-write access to this object, if there is an attempt to set this variable to a value that is not supported, the request must be rejected and the agent shall respond with an appropriate error message, i.e., badValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsConfigGroupInputFreq = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupInputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigGroupInputFreq.setDescription('The nominal input frequency. On those systems which support read-write access to this object, if there is an attempt to set this variable to a value that is not supported, the request must be rejected and the agent shall respond with an appropriate error message, i.e., badValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsConfigGroupOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigGroupOutputVoltage.setDescription('The magnitude of the nominal output voltage. On those systems which support read-write access to this object, if there is an attempt to set this variable to a value that is not supported, the request must be rejected and the agent shall respond with an appropriate error message, i.e., badValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsConfigGroupOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupOutputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigGroupOutputFreq.setDescription('The nominal output frequency. On those systems which support read-write access to this object, if there is an attempt to set this variable to a value that is not supported, the request must be rejected and the agent shall respond with an appropriate error message, i.e., badValue for SNMPv1, or inconsistentValue for SNMPv2.')
upsConfigGroupOutputVA = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 5), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupOutputVA.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigGroupOutputVA.setDescription('The magnitude of the nominal Volt-Amp rating.')
upsConfigGroupOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigGroupOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigGroupOutputPower.setDescription('The magnitude of the nominal true power rating.')
upsConfigGroupOverTemperatureSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 7), NonNegativeInteger().subtype(subtypeSpec=ValueRangeConstraint(10, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigGroupOverTemperatureSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigGroupOverTemperatureSetPoint.setDescription('The maximum temperature allowed before the UPS operation temperature is too high.')
upsConfigGroupOverLoadSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 8, 8), NonNegativeInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigGroupOverLoadSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigGroupOverLoadSetPoint.setDescription('The maximum output load allowed before the load is too high for UPS operation.')
upsClientsConnectedNum = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsClientsConnectedNum.setStatus('mandatory')
if mibBuilder.loadTexts: upsClientsConnectedNum.setDescription('The count of clients which have resgistered for UPS shutdown control.')
upsDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2), )
if mibBuilder.loadTexts: upsDevicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsDevicesTable.setDescription('The devices powered by UPS and registered to USHA')
upsDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1), ).setIndexNames((0, "USHA-MIB", "indexOfDevice"))
if mibBuilder.loadTexts: upsDevicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsDevicesEntry.setDescription('The devices protected by USHA')
indexOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indexOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: indexOfDevice.setDescription('The index of the device that is plugged into the UPS.')
addrOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: addrOfDevice.setDescription('The ip address of the device.')
nameOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: nameOfDevice.setDescription('The name/description of the device plugged into the UPS.')
timeOfConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeOfConnection.setStatus('mandatory')
if mibBuilder.loadTexts: timeOfConnection.setDescription('The device registered to USHA')
timeOfConnectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeOfConnectionTime.setStatus('mandatory')
if mibBuilder.loadTexts: timeOfConnectionTime.setDescription('The device registered time to USHA.')
timeOfConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeOfConnectionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: timeOfConnectionTimeout.setDescription('The device timeout counter. Unit: 10 seconds')
agentConfigIpaddress = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigIpaddress.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigIpaddress.setDescription(' The ip address that NMS can identify the managed device')
agentConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigGateway.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigGateway.setDescription(' The default gateway that allow device managed through routers ')
agentConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigSubnetMask.setDescription(' Internet address subnet mask')
agentConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDate.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigDate.setDescription('The date in agent, format is (dd/mm/yyyy)')
agentConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTime.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTime.setDescription('The time in agent, format is (hh:mm:ss)')
agentConfigPrimaryTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigPrimaryTimeServer.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigPrimaryTimeServer.setDescription('The primary time server is responsible for sending the correct time to the agent.')
agentConfigSecondaryTimeServer = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigSecondaryTimeServer.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigSecondaryTimeServer.setDescription('The secondary time server is responsible for sending the correct time to the agent.')
agentConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 28800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigHistoryLogFrequency.setDescription('The frequency of the updation of the history log. The value is in seconds')
agentConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigExtHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigExtHistoryLogFrequency.setDescription('The ups parameters are sampled at the rate governed by the mconfigHistroyLogFrequency. These sampled values are further conslidated over period of time which is determined by this object.')
agentConfigPollRate = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigPollRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigPollRate.setDescription(' The frequency that proxy agent polls the connected UPS in JBUS protocol. (unit : second)')
agentConfigBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigBaudRate.setDescription('The serial port communication speed. only 9600 allowed')
agentConfigDhcpStatue = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDhcpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigDhcpStatue.setDescription('Enable or disable DHCP/BootP capability')
agentConfigTelnetStatue = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTelnetStatue.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTelnetStatue.setDescription('Enable or disable telnet access')
agentConfigTftpStatue = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTftpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTftpStatue.setDescription('Enable or disable network upgrade capability')
agentConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigResetToDefault.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigResetToDefault.setDescription('Reset all parameters of USHA to default value')
agentConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigRestart.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigRestart.setDescription('Restart USHA')
agentConfigClearAgentLog = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearAgentLog.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigClearAgentLog.setDescription('Clear agent log data')
agentConfigClearEventLog = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigClearEventLog.setDescription('Clear event log data')
agentConfigClearExtHistoryLog = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearExtHistoryLog.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigClearExtHistoryLog.setDescription('Clear extented history log data')
agentConfigClearHistoryLog = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigClearHistoryLog.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigClearHistoryLog.setDescription('Clear history log data')
agentConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapRetryCount.setDescription('The count of repeat traps to send to NMS before trap acknowledge received.')
agentConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapRetryTime.setDescription('The time between retry traps sned to NMS.')
agentConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigTrapAckSignature.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapAckSignature.setDescription('The signature of trap acknowledge.')
agentConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentConfigMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigMibVersion.setDescription('The version of MIB spec.')
agentConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25), )
if mibBuilder.loadTexts: agentConfigTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapsReceiversTable.setDescription('A list of managers to send traps to. The number of entries is given by the value of agentConfigNumTrapReceivers')
agentConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1), ).setIndexNames((0, "USHA-MIB", "trapsIndex"))
if mibBuilder.loadTexts: agentConfigTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigTrapsReceiversEntry.setDescription('The managers to send traps to.')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapsIndex.setDescription('The index to a trap receiver entry.')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: receiverCommunityString.setDescription('The community name to use in the trap when sent to the manager.')
receiverNmsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rfc1628-trap", 2), ("usha-trap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverNmsType.setStatus('mandatory')
if mibBuilder.loadTexts: receiverNmsType.setDescription('The trap group that NMS desired.')
receiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: receiverSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 25, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: receiverDescription.setDescription('Description of trap receivers')
agentConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26), )
if mibBuilder.loadTexts: agentConfigAccessControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigAccessControlTable.setDescription('A list of managers which can access USHA with private community string.')
agentConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1), ).setIndexNames((0, "USHA-MIB", "trapsIndex"))
if mibBuilder.loadTexts: agentConfigAccessControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigAccessControlEntry.setDescription('The managers.')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: accessIndex.setDescription('The index to a access control entry.')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlAddr.setDescription('The IP address of the manager to access USHA')
accessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: accessCommunityString.setDescription('The community name to use in the manager when access USHA')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("notAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlMode.setDescription('Access type, only read/Write access type can change parameter of USHA')
agentConfigDefaultLanguage = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 10, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("english", 2), ("traditionalChinese", 3), ("simplifiedChinese", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigDefaultLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: agentConfigDefaultLanguage.setDescription('The default languauge for browser, when set to auto(1) USHA will send page in the language depends on the request language of browser.')
emdSatatusEmdType = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("emdHT", 3), ("emdT", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusEmdType.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusEmdType.setDescription('The type of EMD plugged into the port.')
emdSatatusTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusTemperature.setDescription('The measurement of EMD temperature, in 0.1 degree')
emdSatatusHumidity = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusHumidity.setDescription('The measurement of EMD humidity, in 0.1 degree')
emdSatatusAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusAlarm1.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusAlarm1.setDescription('The EMD alarm-1 status')
emdSatatusAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emdSatatusAlarm2.setStatus('mandatory')
if mibBuilder.loadTexts: emdSatatusAlarm2.setDescription('The EMD alarm-2 status')
usahEmdConfigEmdConfig = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usahEmdConfigEmdConfig.setStatus('mandatory')
if mibBuilder.loadTexts: usahEmdConfigEmdConfig.setDescription('Enable or disable to detect presence of EMD')
emdConfigEmdName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigEmdName.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigEmdName.setDescription('Description of EMD')
emdConfigTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3))
emdConfigTempName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempName.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempName.setDescription('Description of EMD temperature sensor')
emdConfigTempHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempHighSetPoint.setDescription('The set point for high temperature warning, in degrees')
emdConfigTempHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempHighStatus.setDescription('To enable/disable high set point check with emd temperature.')
emdConfigTempLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempLowSetPoint.setDescription('The set point for low temperature warning, in degrees')
emdConfigTempLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempLowStatus.setDescription('To enable/disable low set point check with emd temperature.')
emdConfigTempOffset = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigTempOffset.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigTempOffset.setDescription('The offset to calibrate temperature of EMD, in degrees')
emdConfigHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4))
emdConfigHumidityName = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityName.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityName.setDescription('Description of EMD humidity sensor')
emdConfigHumidityHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityHighSetPoint.setDescription('The set point for high humidity warning, in %')
emdConfigHumidityLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityLowStatus.setDescription('To enable/disable high set point check with emd humidity.')
emdConfigHumidityLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityLowSetPoint.setDescription('The set point for low humidity warning, in %')
emdConfigHumidityHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityHighStatus.setDescription('To enable/disable low set point check with emd humidity.')
emdConfigHumidityOffset = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigHumidityOffset.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigHumidityOffset.setDescription('The offset to calibrate humidity of EMD, in %')
emdConfigAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 5))
emdConfigAlarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm1Name.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigAlarm1Name.setDescription('Description of EMD alarm-1')
emdConfigAlarm1Type = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("nomralOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm1Type.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigAlarm1Type.setDescription('The alarm-1 operation type')
emdConfigAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 6))
emdConfigAlarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm2Name.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigAlarm2Name.setDescription('Description of EMD alarm-2')
emdConfigAlarm2Type = MibScalar((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 1, 12, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("nomralOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emdConfigAlarm2Type.setStatus('mandatory')
if mibBuilder.loadTexts: emdConfigAlarm2Type.setDescription('The alarm-1 operation type')
ushaPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,1))
if mibBuilder.loadTexts: ushaPowerRestored.setDescription('INFORMATION: Utility power has been restore.')
ushaPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,2))
if mibBuilder.loadTexts: ushaPowerFail.setDescription('WARNING: Utility power not available.')
ushaReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,3))
if mibBuilder.loadTexts: ushaReturnFromLowBattery.setDescription('INFORMATION: The UPS has return from a low battery condition.')
ushaLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,4))
if mibBuilder.loadTexts: ushaLowBattery.setDescription('SEVERE: The UPS batteries are low and will soon be exhausted.')
ushaUpsOk = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,5))
if mibBuilder.loadTexts: ushaUpsOk.setDescription('INFORMATION: The ups is working fine.')
ushaUpsFailed = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,6))
if mibBuilder.loadTexts: ushaUpsFailed.setDescription('SEVERE: The ups is not working fine.')
ushaUpsNotOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,7))
if mibBuilder.loadTexts: ushaUpsNotOnBattery.setDescription('INFORMATION: The UPS is not on battery power.')
ushaUpsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,8)).setObjects(("USHA-MIB", "upsBatteryGroupEstimatedChargeRemaining"), ("USHA-MIB", "upsBatteryGroupVoltage"), ("USHA-MIB", "upsBatteryGroupSecondsOnBattery"))
if mibBuilder.loadTexts: ushaUpsOnBattery.setDescription('WARNING: The UPS has switched to battery backup power.')
ushaTestOver = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,9)).setObjects(("USHA-MIB", "upsBatteryTest"), ("USHA-MIB", "upsTestBatteryTestSettingTime"), ("USHA-MIB", "upsTestBatteryTestResult"), ("USHA-MIB", "upsTestBatteryTestStartTime"), ("USHA-MIB", "upsTestBatteryTestElapsedTime"))
if mibBuilder.loadTexts: ushaTestOver.setDescription('INFORMATION: The testing of UPS is completed.')
ushaTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,10))
if mibBuilder.loadTexts: ushaTestInProgress.setDescription('INFORMATION: The testing is going on ups.')
ushaBypassOn = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,11))
if mibBuilder.loadTexts: ushaBypassOn.setDescription('INFORMATION: The UPS has enabled bypass.')
ushaUpsOnline = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,12))
if mibBuilder.loadTexts: ushaUpsOnline.setDescription('INFORMATION: The UPS is not on Bypass and return to normal status.')
ushaCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,13))
if mibBuilder.loadTexts: ushaCommunicationLost.setDescription('SEVERE: Communication to the UPS has been lost.')
ushaCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,14))
if mibBuilder.loadTexts: ushaCommunicationEstablished.setDescription('INFORMATION: Communication with the UPS has been established.')
ushaUpsGoingDown = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,15))
if mibBuilder.loadTexts: ushaUpsGoingDown.setDescription('WARNING: The ups has been given shutdown command.')
ushaUpsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,16))
if mibBuilder.loadTexts: ushaUpsTurnedOff.setDescription('INFORMATION: UPS turn off.')
ushaUpsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,17)).setObjects(("USHA-MIB", "upsControlUpsSleepTime"))
if mibBuilder.loadTexts: ushaUpsSleeping.setDescription('INFORMATION: UPS has entered sleep mode.')
ushaUpsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,18))
if mibBuilder.loadTexts: ushaUpsWokeUp.setDescription('INFORMATION: The UPS woke up from sleep mode.')
ushaUpsRebooted = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,19))
if mibBuilder.loadTexts: ushaUpsRebooted.setDescription('INFORMATION: The UPS is reboot.')
ushaUpsShutdownCancelled = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,20))
if mibBuilder.loadTexts: ushaUpsShutdownCancelled.setDescription('INFORMATION: The UPS shutdown process had been cancelled.')
ushaUpsNotOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,21)).setObjects(("USHA-MIB", "upsBatteryGroupTemperature"), ("USHA-MIB", "upsConfigGroupOverTemperatureSetPoint"))
if mibBuilder.loadTexts: ushaUpsNotOverTemperature.setDescription('INFORMATION: The UPS internal temperature return to normal.')
ushaUpsOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,22)).setObjects(("USHA-MIB", "upsBatteryGroupTemperature"), ("USHA-MIB", "upsConfigGroupOverTemperatureSetPoint"))
if mibBuilder.loadTexts: ushaUpsOverTemperature.setDescription('SEVERE: The UPS temperature is too high.')
ushaUpsNotOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,23)).setObjects(("USHA-MIB", "upsOutputGroupPercentLoad"), ("USHA-MIB", "upsConfigGroupOverLoadSetPoint"))
if mibBuilder.loadTexts: ushaUpsNotOverLoad.setDescription('INFORMATION: The UPS load return from overload.')
ushaUpsOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,24)).setObjects(("USHA-MIB", "upsOutputGroupPercentLoad"), ("USHA-MIB", "upsConfigGroupOverLoadSetPoint"))
if mibBuilder.loadTexts: ushaUpsOverLoad.setDescription('SEVERE: The UPS is overload.')
ushaUpsModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,25))
if mibBuilder.loadTexts: ushaUpsModuleInserted.setDescription('WARNING: UPS Battery Module plug-in.')
ushaUpsModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,26))
if mibBuilder.loadTexts: ushaUpsModuleRemoved.setDescription('WARNING: UPS Battery Module unplug.')
emdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,27)).setObjects(("USHA-MIB", "emdSatatusTemperature"), ("USHA-MIB", "emdConfigTempHighSetPoint"), ("USHA-MIB", "emdConfigTempName"))
if mibBuilder.loadTexts: emdTemperatureNotHigh.setDescription('INFORMATION: EMD Temperature not over high Set point.')
emdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,28)).setObjects(("USHA-MIB", "emdSatatusTemperature"), ("USHA-MIB", "emdConfigTempHighSetPoint"), ("USHA-MIB", "emdConfigTempName"))
if mibBuilder.loadTexts: emdTemperatureTooHigh.setDescription('WARNING: EMD Temperature over high Set point.')
emdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,29)).setObjects(("USHA-MIB", "emdSatatusTemperature"), ("USHA-MIB", "emdConfigTempLowSetPoint"), ("USHA-MIB", "emdConfigTempName"))
if mibBuilder.loadTexts: emdTemperatureNotLow.setDescription('INFORMATION: EMD Temperature not under low Set point.')
emdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,30)).setObjects(("USHA-MIB", "emdSatatusTemperature"), ("USHA-MIB", "emdConfigTempLowSetPoint"), ("USHA-MIB", "emdConfigTempName"))
if mibBuilder.loadTexts: emdTemperatureTooLow.setDescription('WARNING: EMD Temperature under low Set point.')
emdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,31)).setObjects(("USHA-MIB", "emdSatatusHumidity"), ("USHA-MIB", "emdConfigHumidityHighSetPoint"), ("USHA-MIB", "emdConfigHumidityName"))
if mibBuilder.loadTexts: emdHumidityNotHigh.setDescription('INFORMATION: EMD Humidity not over high Set point.')
emdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,32)).setObjects(("USHA-MIB", "emdSatatusHumidity"), ("USHA-MIB", "emdConfigHumidityHighSetPoint"), ("USHA-MIB", "emdConfigHumidityName"))
if mibBuilder.loadTexts: emdHumidityTooHigh.setDescription('WARNING: EMD Humidity over high Set point.')
emdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,33)).setObjects(("USHA-MIB", "emdSatatusHumidity"), ("USHA-MIB", "emdConfigHumidityLowSetPoint"), ("USHA-MIB", "emdConfigHumidityName"))
if mibBuilder.loadTexts: emdHumidityNotLow.setDescription('INFORMATION: EMD Humidity not under low Set point.')
emdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,34)).setObjects(("USHA-MIB", "emdSatatusHumidity"), ("USHA-MIB", "emdConfigHumidityLowSetPoint"), ("USHA-MIB", "emdConfigHumidityName"))
if mibBuilder.loadTexts: emdHumidityTooLow.setDescription('WARNING: EMD Humidity under low Set point.')
emdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,35)).setObjects(("USHA-MIB", "emdConfigAlarm1Type"), ("USHA-MIB", "emdConfigAlarm1Name"))
if mibBuilder.loadTexts: emdAlarm1Normal.setDescription('INFORMATION: EMD Alarm-1 not active.')
emdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,36)).setObjects(("USHA-MIB", "emdConfigAlarm1Type"), ("USHA-MIB", "emdConfigAlarm1Name"))
if mibBuilder.loadTexts: emdAlarm1Active.setDescription('WARNING: EMD Alarm-1 activated.')
emdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,37)).setObjects(("USHA-MIB", "emdConfigAlarm2Type"), ("USHA-MIB", "emdConfigAlarm2Name"))
if mibBuilder.loadTexts: emdAlarm2Normal.setDescription('INFORMATION: EMD Alarm-2 not active.')
emdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,38)).setObjects(("USHA-MIB", "emdConfigAlarm2Type"), ("USHA-MIB", "emdConfigAlarm2Name"))
if mibBuilder.loadTexts: emdAlarm2Active.setDescription('WARNING: EMD Alarm-2 activated.')
ushaUpsInternalwarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,39))
if mibBuilder.loadTexts: ushaUpsInternalwarning.setDescription('WARNING: Internal warning.')
ushaUpsReturnFromInternalwarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,40))
if mibBuilder.loadTexts: ushaUpsReturnFromInternalwarning.setDescription('INFORMATION: Return from Internal warning.')
ushaUpsEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,41))
if mibBuilder.loadTexts: ushaUpsEPOActive.setDescription('WARNING: EPO Active.')
ushaUpsReturnFromEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,42))
if mibBuilder.loadTexts: ushaUpsReturnFromEPOActive.setDescription('INFORMATION: Return from EPO Active.')
ushaUpsModuleUnlock = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,43))
if mibBuilder.loadTexts: ushaUpsModuleUnlock.setDescription('WARNING: Module Unlock.')
ushaUpsReturnFromModuleUnlock = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,44))
if mibBuilder.loadTexts: ushaUpsReturnFromModuleUnlock.setDescription('INFORMATION: Return from Module Unlock.')
ushaUpsMain1Neutralloss = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,45))
if mibBuilder.loadTexts: ushaUpsMain1Neutralloss.setDescription('WARNING: Main 1 Neutral loss.')
ushaUpsReturnFromMain1Neutralloss = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,46))
if mibBuilder.loadTexts: ushaUpsReturnFromMain1Neutralloss.setDescription('INFORMATION: Return from Main 1 Neutral loss.')
ushaUpsMain1phaseerror = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,47))
if mibBuilder.loadTexts: ushaUpsMain1phaseerror.setDescription('WARNING: Main 1 phase error.')
ushaUpsReturnFromMain1phaseerror = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,48))
if mibBuilder.loadTexts: ushaUpsReturnFromMain1phaseerror.setDescription('INFORMATION: Return from Main 1 phase error.')
ushaUpsSitefault = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,49))
if mibBuilder.loadTexts: ushaUpsSitefault.setDescription('WARNING: Site fault.')
ushaUpsReturnFromSitefault = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,50))
if mibBuilder.loadTexts: ushaUpsReturnFromSitefault.setDescription('INFORMATION: Return from Site fault.')
ushaUpsBypassAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,51))
if mibBuilder.loadTexts: ushaUpsBypassAbnormal.setDescription('WARNING: Bypass Abnormal.')
ushaUpsReturnFromBypassAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,52))
if mibBuilder.loadTexts: ushaUpsReturnFromBypassAbnormal.setDescription('INFORMATION: Return from Bypass Abnormal.')
ushaUpsBypassPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,53))
if mibBuilder.loadTexts: ushaUpsBypassPhaseError.setDescription('WARNING: Bypass Phase Error.')
ushaUpsReturnFromBypassPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,54))
if mibBuilder.loadTexts: ushaUpsReturnFromBypassPhaseError.setDescription('INFORMATION: Return from Bypass Phase Error.')
ushaUpsBatteryOpen = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,55))
if mibBuilder.loadTexts: ushaUpsBatteryOpen.setDescription('WARNING: Battery Open.')
ushaUpsReturnFromBatteryOpen = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,56))
if mibBuilder.loadTexts: ushaUpsReturnFromBatteryOpen.setDescription('INFORMATION: Return from Battery Open.')
ushaUpsBatteryOverCharge = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,57))
if mibBuilder.loadTexts: ushaUpsBatteryOverCharge.setDescription('WARNING: Battery Over Charge.')
ushaUpsReturnFromBatteryOverCharge = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,58))
if mibBuilder.loadTexts: ushaUpsReturnFromBatteryOverCharge.setDescription('INFORMATION: Return from Battery Over Charge.')
ushaUpsBatteryReverse = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,59))
if mibBuilder.loadTexts: ushaUpsBatteryReverse.setDescription('WARNING: Battery Reverse.')
ushaUpsReturnFromBatteryReverse = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,60))
if mibBuilder.loadTexts: ushaUpsReturnFromBatteryReverse.setDescription('INFORMATION: Return from Battery Reverse.')
ushaUpsOverloadforewarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,61))
if mibBuilder.loadTexts: ushaUpsOverloadforewarning.setDescription('WARNING: Overload forewarning.')
ushaUpsReturnFromOverloadforewarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,62))
if mibBuilder.loadTexts: ushaUpsReturnFromOverloadforewarning.setDescription('INFORMATION: Return from Overload forewarning.')
ushaUpsOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,63))
if mibBuilder.loadTexts: ushaUpsOverloadWarning.setDescription('WARNING: Overload Warning.')
ushaUpsReturnFromOverloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,64))
if mibBuilder.loadTexts: ushaUpsReturnFromOverloadWarning.setDescription('INFORMATION: Return from Overload Warning.')
ushaUpsFanLock = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,65))
if mibBuilder.loadTexts: ushaUpsFanLock.setDescription('WARNING: Fan Lock.')
ushaUpsReturnFromFanLock = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,66))
if mibBuilder.loadTexts: ushaUpsReturnFromFanLock.setDescription('INFORMATION: Return from Fan Lock.')
ushaUpsMaintaincoverisopen = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,67))
if mibBuilder.loadTexts: ushaUpsMaintaincoverisopen.setDescription('WARNING: Maintain cover is open.')
ushaUpsReturnFromMaintaincoverisopen = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,68))
if mibBuilder.loadTexts: ushaUpsReturnFromMaintaincoverisopen.setDescription('INFORMATION: Return from Maintain cover is open.')
ushaUpsChargerfault = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,69))
if mibBuilder.loadTexts: ushaUpsChargerfault.setDescription('WARNING: Charger fault.')
ushaUpsReturnFromChargerfault = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,70))
if mibBuilder.loadTexts: ushaUpsReturnFromChargerfault.setDescription('INFORMATION: Return from Charger fault.')
ushaUpsModulelocationerror = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,71))
if mibBuilder.loadTexts: ushaUpsModulelocationerror.setDescription('WARNING: Module location error.')
ushaUpsReturnFromModulelocationerror = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,72))
if mibBuilder.loadTexts: ushaUpsReturnFromModulelocationerror.setDescription('INFORMATION: Return from Module location error.')
ushaUpsTurnonabnormal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,73))
if mibBuilder.loadTexts: ushaUpsTurnonabnormal.setDescription('WARNING: Turn on abnormal.')
ushaUpsReturnFromTurnonabnormal = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,74))
if mibBuilder.loadTexts: ushaUpsReturnFromTurnonabnormal.setDescription('INFORMATION: Return from Turn on abnormal.')
ushaUpsRedundancyloss = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,75))
if mibBuilder.loadTexts: ushaUpsRedundancyloss.setDescription('WARNING: Redundancy loss.')
ushaUpsReturnFromRedundancyloss = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,76))
if mibBuilder.loadTexts: ushaUpsReturnFromRedundancyloss.setDescription('INFORMATION: Return from Redundancy loss.')
ushaUpsHotSwapActived = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,77))
if mibBuilder.loadTexts: ushaUpsHotSwapActived.setDescription('WARNING: Hot Swap Actived.')
ushaUpsReturnFromHotSwapActived = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,78))
if mibBuilder.loadTexts: ushaUpsReturnFromHotSwapActived.setDescription('INFORMATION: Return from Hot Swap Actived.')
ushaUpsBatteryInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,79))
if mibBuilder.loadTexts: ushaUpsBatteryInform.setDescription('WARNING: Battery Inform.')
ushaUpsReturnFromBatteryInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,80))
if mibBuilder.loadTexts: ushaUpsReturnFromBatteryInform.setDescription('INFORMATION: Return from Battery Inform.')
ushaUpsInspectionInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,81))
if mibBuilder.loadTexts: ushaUpsInspectionInform.setDescription('WARNING: Inspection Inform.')
ushaUpsReturnFromInspectionInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,82))
if mibBuilder.loadTexts: ushaUpsReturnFromInspectionInform.setDescription('INFORMATION: Return from Inspection Inform.')
ushaUpsGuaranteeInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,83))
if mibBuilder.loadTexts: ushaUpsGuaranteeInform.setDescription('WARNING: Guarantee Inform.')
ushaUpsReturnFromGuaranteeInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,84))
if mibBuilder.loadTexts: ushaUpsReturnFromGuaranteeInform.setDescription('INFORMATION: Return from Guarantee Inform.')
ushaUpsTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,85))
if mibBuilder.loadTexts: ushaUpsTemperatureLow.setDescription('WARNING: Temperature Low.')
ushaUpsReturnFromTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,86))
if mibBuilder.loadTexts: ushaUpsReturnFromTemperatureLow.setDescription('INFORMATION: Return from Temperature Low.')
ushaUpsTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,87))
if mibBuilder.loadTexts: ushaUpsTemperatureHigh.setDescription('WARNING: Temperature High.')
ushaUpsReturnFromTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,88))
if mibBuilder.loadTexts: ushaUpsReturnFromTemperatureHigh.setDescription('INFORMATION: Return from Temperature High.')
ushaUpsBatteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,89))
if mibBuilder.loadTexts: ushaUpsBatteryOverTemperature.setDescription('WARNING: Battery Over Temperature.')
ushaUpsReturnFromBatteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,90))
if mibBuilder.loadTexts: ushaUpsReturnFromBatteryOverTemperature.setDescription('INFORMATION: Return from Battery Over Temperature.')
ushaUpsFanMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,91))
if mibBuilder.loadTexts: ushaUpsFanMaintainInform.setDescription('WARNING: Fan Maintain Inform.')
ushaUpsReturnFromFanMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,92))
if mibBuilder.loadTexts: ushaUpsReturnFromFanMaintainInform.setDescription('INFORMATION: Return from Fan Maintain Inform.')
ushaUpsBusCapacitanceMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,93))
if mibBuilder.loadTexts: ushaUpsBusCapacitanceMaintainInform.setDescription('WARNING: Bus Capacitance Maintain Inform.')
ushaUpsReturnFromBusCapacitanceMaintainInform = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,94))
if mibBuilder.loadTexts: ushaUpsReturnFromBusCapacitanceMaintainInform.setDescription('INFORMATION: Return from Bus Capacitance Maintain Inform.')
ushaUpsSystemOverCapacity = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,95))
if mibBuilder.loadTexts: ushaUpsSystemOverCapacity.setDescription('WARNING: System Over Capacity.')
ushaUpsReturnFromSystemOverCapacity = NotificationType((1, 3, 6, 1, 4, 1, 2468, 1, 2, 1, 2) + (0,96))
if mibBuilder.loadTexts: ushaUpsReturnFromSystemOverCapacity.setDescription('INFORMATION: Return from System Over Capacity.')
mibBuilder.exportSymbols("USHA-MIB", upsOutputGroup=upsOutputGroup, ushaUpsRebooted=ushaUpsRebooted, ushaUpsModuleUnlock=ushaUpsModuleUnlock, upsTestBatteryTestStartTime=upsTestBatteryTestStartTime, ingrasys=ingrasys, timeOfConnectionTime=timeOfConnectionTime, emdConfigHumidity=emdConfigHumidity, emdConfigHumidityHighStatus=emdConfigHumidityHighStatus, upsBypassGroupFrequency=upsBypassGroupFrequency, receiverSeverityLevel=receiverSeverityLevel, upsAgent=upsAgent, ushaUpsModulelocationerror=ushaUpsModulelocationerror, upsControlShutdownParametersTable=upsControlShutdownParametersTable, emdTemperatureNotLow=emdTemperatureNotLow, ushaUpsModuleRemoved=ushaUpsModuleRemoved, ushaUpsOverloadWarning=ushaUpsOverloadWarning, indexOfDevice=indexOfDevice, accessControlMode=accessControlMode, ushaUpsSystemOverCapacity=ushaUpsSystemOverCapacity, upsDevicesTable=upsDevicesTable, ushaUpsReturnFromGuaranteeInform=ushaUpsReturnFromGuaranteeInform, upsBatteryGroupEstimatedMinutesRemaining=upsBatteryGroupEstimatedMinutesRemaining, upsBypassGroupPower=upsBypassGroupPower, upsOutputGroupTable=upsOutputGroupTable, emdSatatusHumidity=emdSatatusHumidity, upsOutputGroupPower=upsOutputGroupPower, emdConfigAlarm1Name=emdConfigAlarm1Name, emdConfigTemperature=emdConfigTemperature, emdConfigHumidityHighSetPoint=emdConfigHumidityHighSetPoint, ushaLowBattery=ushaLowBattery, upsInputGroupTruePower=upsInputGroupTruePower, upsOutputGroupPercentLoad=upsOutputGroupPercentLoad, upsControlUpsOnOffControl=upsControlUpsOnOffControl, upsIdentGroupAttachedDevices=upsIdentGroupAttachedDevices, upsControlEvent=upsControlEvent, agentConfigExtHistoryLogFrequency=agentConfigExtHistoryLogFrequency, upsBatteryTestScheduleEntry=upsBatteryTestScheduleEntry, upsBatteryTestScheduleIndex=upsBatteryTestScheduleIndex, agentConfigTelnetStatue=agentConfigTelnetStatue, agentConfigAccessControlEntry=agentConfigAccessControlEntry, upsTestGroup=upsTestGroup, emdTemperatureTooLow=emdTemperatureTooLow, ushaUpsReturnFromFanLock=ushaUpsReturnFromFanLock, ushaUpsReturnFromChargerfault=ushaUpsReturnFromChargerfault, emdAlarm1Normal=emdAlarm1Normal, upsBypassGroupNumLines=upsBypassGroupNumLines, agentConfigPollRate=agentConfigPollRate, upsConfigGroupOutputVoltage=upsConfigGroupOutputVoltage, upsControlUpsSleepTime=upsControlUpsSleepTime, ushaUpsReturnFromTurnonabnormal=ushaUpsReturnFromTurnonabnormal, upsBypassGroupTable=upsBypassGroupTable, upsBypassGroupVoltage=upsBypassGroupVoltage, upsInputGroupVoltageMax=upsInputGroupVoltageMax, ushaUpsReturnFromBatteryReverse=ushaUpsReturnFromBatteryReverse, upsBatteryTestScheduleType=upsBatteryTestScheduleType, ushaUpsGoingDown=ushaUpsGoingDown, ushaUpsReturnFromSitefault=ushaUpsReturnFromSitefault, emdConfigHumidityLowStatus=emdConfigHumidityLowStatus, addrOfDevice=addrOfDevice, emdTemperatureTooHigh=emdTemperatureTooHigh, upsControlSpecialScheduleEntry=upsControlSpecialScheduleEntry, ushaUpsReturnFromOverloadWarning=ushaUpsReturnFromOverloadWarning, timeOfConnection=timeOfConnection, emdConfigTempHighStatus=emdConfigTempHighStatus, ushaUpsReturnFromBatteryInform=ushaUpsReturnFromBatteryInform, ushaUpsFanMaintainInform=ushaUpsFanMaintainInform, upsControlWeeklyRestartTime=upsControlWeeklyRestartTime, upsControlSpecialScheduleTable=upsControlSpecialScheduleTable, emdConfigTempName=emdConfigTempName, emdConfigHumidityOffset=emdConfigHumidityOffset, upsConfigGroupOverLoadSetPoint=upsConfigGroupOverLoadSetPoint, upsTestBatteryTestSettingTime=upsTestBatteryTestSettingTime, upsControlSpecialRestartDay=upsControlSpecialRestartDay, ushaUpsOnBattery=ushaUpsOnBattery, upsControlSpecialRestartTime=upsControlSpecialRestartTime, upsOutputGroupSource=upsOutputGroupSource, upsBatteryTestScheduleSpecialDay=upsBatteryTestScheduleSpecialDay, upsBatteryGroupMandatory=upsBatteryGroupMandatory, trapsReceiverAddr=trapsReceiverAddr, ushaUpsOnline=ushaUpsOnline, emdConfigAlarm1Type=emdConfigAlarm1Type, ushaUpsNotOverLoad=ushaUpsNotOverLoad, ushaUpsOverLoad=ushaUpsOverLoad, upsBatteryGroupTemperature=upsBatteryGroupTemperature, ushaUpsMain1phaseerror=ushaUpsMain1phaseerror, upsInputGroupVoltageMin=upsInputGroupVoltageMin, ushaUpsBatteryReverse=ushaUpsBatteryReverse, ushaUpsReturnFromBatteryOverTemperature=ushaUpsReturnFromBatteryOverTemperature, emdSatatusTemperature=emdSatatusTemperature, ushaCommunicationEstablished=ushaCommunicationEstablished, upsControlDelay=upsControlDelay, accessIndex=accessIndex, upsConfigGroup=upsConfigGroup, emdHumidityNotLow=emdHumidityNotLow, upsInputGroupLineIndex=upsInputGroupLineIndex, upsTestBatteryTestElapsedTime=upsTestBatteryTestElapsedTime, emdConfigAlarm1=emdConfigAlarm1, ushaUpsInternalwarning=ushaUpsInternalwarning, emdConfigTempLowStatus=emdConfigTempLowStatus, ushaPowerFail=ushaPowerFail, upsBypassGroupEntry=upsBypassGroupEntry, ushaUpsFailed=ushaUpsFailed, agentConfigBaudRate=agentConfigBaudRate, emdAlarm2Active=emdAlarm2Active, agentConfigSubnetMask=agentConfigSubnetMask, upsIdentGroupModel=upsIdentGroupModel, ushaUpsReturnFromModuleUnlock=ushaUpsReturnFromModuleUnlock, ushaUpsSitefault=ushaUpsSitefault, emdConfigTempHighSetPoint=emdConfigTempHighSetPoint, upsBatteryGroupStatus=upsBatteryGroupStatus, emdConfigAlarm2Type=emdConfigAlarm2Type, agentConfigClearHistoryLog=agentConfigClearHistoryLog, receiverNmsType=receiverNmsType, ushaUpsReturnFromMaintaincoverisopen=ushaUpsReturnFromMaintaincoverisopen, upsInputGroupTable=upsInputGroupTable, ushaUpsReturnFromBypassPhaseError=ushaUpsReturnFromBypassPhaseError, upsOutputGroupNumLines=upsOutputGroupNumLines, upsTrapGroup=upsTrapGroup, agentConfigIpaddress=agentConfigIpaddress, agentConfigTrapRetryTime=agentConfigTrapRetryTime, ushaUpsGuaranteeInform=ushaUpsGuaranteeInform, upsConfigGroupOutputVA=upsConfigGroupOutputVA, ushaUpsOverTemperature=ushaUpsOverTemperature, ushaUpsNotOnBattery=ushaUpsNotOnBattery, ushaUpsBusCapacitanceMaintainInform=ushaUpsBusCapacitanceMaintainInform, upsControlFirstWarning=upsControlFirstWarning, emdAlarm2Normal=emdAlarm2Normal, upsBatteryTestScheduleTime=upsBatteryTestScheduleTime, ushaUpsReturnFromTemperatureHigh=ushaUpsReturnFromTemperatureHigh, emdAlarm1Active=emdAlarm1Active, upsControlSpecialShutdownDay=upsControlSpecialShutdownDay, emdHumidityNotHigh=emdHumidityNotHigh, ushaUpsTurnonabnormal=ushaUpsTurnonabnormal, ushaUpsReturnFromTemperatureLow=ushaUpsReturnFromTemperatureLow, ushaPowerRestored=ushaPowerRestored, accessCommunityString=accessCommunityString, upsBypassGroupCurrent=upsBypassGroupCurrent, upsBatteryTestScheduleTable=upsBatteryTestScheduleTable, upsConfigGroupInputVoltage=upsConfigGroupInputVoltage, agentConfigDefaultLanguage=agentConfigDefaultLanguage, upsInputGroup=upsInputGroup, ushaUpsReturnFromEPOActive=ushaUpsReturnFromEPOActive, upsConfigGroupOutputFreq=upsConfigGroupOutputFreq, emdConfigTempOffset=emdConfigTempOffset, ushaUpsRedundancyloss=ushaUpsRedundancyloss, upsControlGroup=upsControlGroup, upsControlEventStatus=upsControlEventStatus, agentConfigTftpStatue=agentConfigTftpStatue, upsInputGroupCurrent=upsInputGroupCurrent, ushaUpsReturnFromMain1Neutralloss=ushaUpsReturnFromMain1Neutralloss, ushaUpsReturnFromModulelocationerror=ushaUpsReturnFromModulelocationerror, ushaUpsWokeUp=ushaUpsWokeUp, upsControlWarningInterval=upsControlWarningInterval, upsControlWeeklyShutdownDay=upsControlWeeklyShutdownDay, upsTestBatteryTestResult=upsTestBatteryTestResult, usahEmdConfigEmdConfig=usahEmdConfigEmdConfig, upsOutputGroupEntry=upsOutputGroupEntry, upsBatteryGroupVoltage=upsBatteryGroupVoltage, receiverCommunityString=receiverCommunityString, agentConfigClearExtHistoryLog=agentConfigClearExtHistoryLog, agentConfigTime=agentConfigTime, ushaUpsShutdownCancelled=ushaUpsShutdownCancelled, emdHumidityTooLow=emdHumidityTooLow, agentConfigDate=agentConfigDate, ushaUpsOk=ushaUpsOk, emdStatus=emdStatus, upsControlWeeklyRestartDay=upsControlWeeklyRestartDay, upsControlWeeklyScheduleEntry=upsControlWeeklyScheduleEntry, accessControlAddr=accessControlAddr, agentConfigGateway=agentConfigGateway, upsConfigGroupOverTemperatureSetPoint=upsConfigGroupOverTemperatureSetPoint, agentConfigSecondaryTimeServer=agentConfigSecondaryTimeServer, ushaUpsTemperatureHigh=ushaUpsTemperatureHigh, upsBatteryTestScheduleTestWithTime=upsBatteryTestScheduleTestWithTime, ushaUpsMaintaincoverisopen=ushaUpsMaintaincoverisopen, ushaUpsInspectionInform=ushaUpsInspectionInform, upsObjectGroup=upsObjectGroup, agentConfig=agentConfig, ushaUpsBatteryOverCharge=ushaUpsBatteryOverCharge, upsInputGroupNumLines=upsInputGroupNumLines, ushaUpsReturnFromFanMaintainInform=ushaUpsReturnFromFanMaintainInform, ushaUpsBypassPhaseError=ushaUpsBypassPhaseError, ushaUpsReturnFromMain1phaseerror=ushaUpsReturnFromMain1phaseerror, emdSatatusEmdType=emdSatatusEmdType, agentConfigRestart=agentConfigRestart, upsIdentGroup=upsIdentGroup, emdConfigHumidityLowSetPoint=emdConfigHumidityLowSetPoint, upsBypassGroup=upsBypassGroup, emdConfigAlarm2=emdConfigAlarm2, ushaUpsNotOverTemperature=ushaUpsNotOverTemperature, ushaUpsModuleInserted=ushaUpsModuleInserted, upsInputGroupVoltage=upsInputGroupVoltage, upsControlSpecialShutdownTime=upsControlSpecialShutdownTime, ushaUpsReturnFromHotSwapActived=ushaUpsReturnFromHotSwapActived, ushaUpsBatteryInform=ushaUpsBatteryInform, upsIdentGroupUpsSerialNumber=upsIdentGroupUpsSerialNumber, ushaUpsReturnFromBatteryOverCharge=ushaUpsReturnFromBatteryOverCharge, agentConfigTrapRetryCount=agentConfigTrapRetryCount, agentConfigHistoryLogFrequency=agentConfigHistoryLogFrequency, upsDevicesEntry=upsDevicesEntry, upsControlWeeklyScheduleTable=upsControlWeeklyScheduleTable, ushaUpsOverloadforewarning=ushaUpsOverloadforewarning, ushaUpsBatteryOpen=ushaUpsBatteryOpen, upsClients=upsClients, upsBatteryTestScheduleDay=upsBatteryTestScheduleDay, receiverDescription=receiverDescription, ushaReturnFromLowBattery=ushaReturnFromLowBattery, ushaBypassOn=ushaBypassOn, upsConfigGroupInputFreq=upsConfigGroupInputFreq, agentConfigResetToDefault=agentConfigResetToDefault, agentConfigMibVersion=agentConfigMibVersion, ushaUpsEPOActive=ushaUpsEPOActive, upsBypassGroupLineIndex=upsBypassGroupLineIndex, upsControlUpsShutdownDelay=upsControlUpsShutdownDelay, upsInputGroupLineBads=upsInputGroupLineBads, trapsIndex=trapsIndex, upsBatteryGroupEstimatedChargeRemaining=upsBatteryGroupEstimatedChargeRemaining, upsOutputGroupVoltage=upsOutputGroupVoltage, ushaTestOver=ushaTestOver, ushaUpsTurnedOff=ushaUpsTurnedOff, upsConfigGroupOutputPower=upsConfigGroupOutputPower, emdTemperatureNotHigh=emdTemperatureNotHigh, upsOutputGroupLineIndex=upsOutputGroupLineIndex, upsBatteryGroup=upsBatteryGroup, emdHumidityTooHigh=emdHumidityTooHigh, ushaUpsChargerfault=ushaUpsChargerfault, ushaUpsReturnFromBatteryOpen=ushaUpsReturnFromBatteryOpen, ushaUpsTemperatureLow=ushaUpsTemperatureLow, nameOfDevice=nameOfDevice, agentConfigClearEventLog=agentConfigClearEventLog, agentConfigTrapsReceiversTable=agentConfigTrapsReceiversTable, emdConfigHumidityName=emdConfigHumidityName, timeOfConnectionTimeout=timeOfConnectionTimeout, ushaUpsReturnFromSystemOverCapacity=ushaUpsReturnFromSystemOverCapacity, agentConfigClearAgentLog=agentConfigClearAgentLog, agentConfigTrapsReceiversEntry=agentConfigTrapsReceiversEntry, product=product, upsOutputGroupCurrent=upsOutputGroupCurrent, upsInputGroupEntry=upsInputGroupEntry, agentConfigTrapAckSignature=agentConfigTrapAckSignature, upsInputGroupFrequency=upsInputGroupFrequency, ushaUpsReturnFromOverloadforewarning=ushaUpsReturnFromOverloadforewarning, upsIdentGroupAgentSoftwareVersion=upsIdentGroupAgentSoftwareVersion, emdConfigAlarm2Name=emdConfigAlarm2Name, ushaUpsMain1Neutralloss=ushaUpsMain1Neutralloss, upsControlShutdownParametersEntry=upsControlShutdownParametersEntry, agentConfigDhcpStatue=agentConfigDhcpStatue, agentConfigAccessControlTable=agentConfigAccessControlTable, ushaCommunicationLost=ushaCommunicationLost, upsBatteryTest=upsBatteryTest, ushaUpsReturnFromBusCapacitanceMaintainInform=ushaUpsReturnFromBusCapacitanceMaintainInform, upsOutputGroupFrequency=upsOutputGroupFrequency, ushaUpsReturnFromBypassAbnormal=ushaUpsReturnFromBypassAbnormal, emdConfigTempLowSetPoint=emdConfigTempLowSetPoint)
mibBuilder.exportSymbols("USHA-MIB", ushaUpsReturnFromRedundancyloss=ushaUpsReturnFromRedundancyloss, upsControlWeeklyIndex=upsControlWeeklyIndex, emdConfig=emdConfig, ushaUpsBypassAbnormal=ushaUpsBypassAbnormal, upsClientsConnectedNum=upsClientsConnectedNum, emdSatatusAlarm2=emdSatatusAlarm2, ushaUpsBatteryOverTemperature=ushaUpsBatteryOverTemperature, ushaUpsReturnFromInspectionInform=ushaUpsReturnFromInspectionInform, agentConfigPrimaryTimeServer=agentConfigPrimaryTimeServer, emdConfigEmdName=emdConfigEmdName, upsBatteryGroupSecondsOnBattery=upsBatteryGroupSecondsOnBattery, ushaUpsReturnFromInternalwarning=ushaUpsReturnFromInternalwarning, upsControlWeeklyShutdownTime=upsControlWeeklyShutdownTime, ushaUpsSleeping=ushaUpsSleeping, upsIdentGroupUPSFirmwareVersion=upsIdentGroupUPSFirmwareVersion, ushaTestInProgress=ushaTestInProgress, ushaUpsHotSwapActived=ushaUpsHotSwapActived, emdSatatusAlarm1=emdSatatusAlarm1, upsControlSpecialIndex=upsControlSpecialIndex, ushaUpsFanLock=ushaUpsFanLock, ushap=ushap, upsIdentGroupName=upsIdentGroupName, upsIdentGroupManufacturer=upsIdentGroupManufacturer)
