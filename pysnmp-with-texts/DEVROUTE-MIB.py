#
# PySNMP MIB module DEVROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEVROUTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
device, = mibBuilder.importSymbols("ANIROOT-MIB", "device")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, ModuleIdentity, Bits, Counter32, Counter64, Integer32, IpAddress, MibIdentifier, TimeTicks, ObjectIdentity, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "ModuleIdentity", "Bits", "Counter32", "Counter64", "Integer32", "IpAddress", "MibIdentifier", "TimeTicks", "ObjectIdentity", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aniDevRoute = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 2, 9))
if mibBuilder.loadTexts: aniDevRoute.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniDevRoute.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniDevRoute.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniDevRoute.setDescription('The aniDevRoutingTable allows the user to view and configure routes. It is similar to the ipRouteTable in RFC1213 except that the table is indexed on 3 objects (aniDevRouteDest, aniDevRouteNextHop, aniDevRouteMask instead of just one). Also, some of the objects are read-only since our software does not allow their configuration. Routes can be added and deleted using this table. The aniDevRouteNextHop field for existing routes can be modified. To add an entry, send a set request with all the index fields set appropriately. It is required to specify aniDevRouteFlag while adding a new route. To delete an entry, select the row with the correct index fields and set the parameter aniDevRouteType to invalid(2). Note, aniDevRouteType cannot be set as anything else other than invalid(2). When the device (BSU or SU) is in Bridge mode, the routing table will not be displayed. ')
aniDevRouteTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1), )
if mibBuilder.loadTexts: aniDevRouteTable.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteTable.setDescription("This entity's IP Routing table.")
aniDevRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1), ).setIndexNames((0, "DEVROUTE-MIB", "aniDevRouteDest"), (0, "DEVROUTE-MIB", "aniDevRouteNextHop"), (0, "DEVROUTE-MIB", "aniDevRouteMask"))
if mibBuilder.loadTexts: aniDevRouteEntry.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteEntry.setDescription('A route to a particular destination.')
aniDevRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aniDevRouteDest.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteDest.setDescription('The destination IP address of this route. An entry with a value of 0.0.0.0 is considered a default route. Multiple routes to a single destination can appear in the table.')
aniDevRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
aniDevRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteMetric1.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's aniDevRouteProto value. If this metric is not used, its value should be set to -1.")
aniDevRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteMetric2.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's aniDevRouteProto value. If this metric is not used, its value should be set to -1.")
aniDevRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteMetric3.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's aniDevRouteProto value. If this metric is not used, its value should be set to -1.")
aniDevRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteMetric4.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's aniDevRouteProto value. If this metric is not used, its value should be set to -1.")
aniDevRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aniDevRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteNextHop.setDescription("The IP address of the next hop of this route. (In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's IP address on that interface.)")
aniDevRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aniDevRouteType.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteType.setDescription('The type of route. Currently, aniDevRouteType cannot be set to anything other than invalid(2). Setting this object to the value invalid(2) has the effect of deleting/invalidating the corresponding entry in the aniDevRouteTable object. That is, it effectively dissasociates the destination identified with said entry from the route identified with said entry.')
aniDevRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteProto.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
aniDevRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteAge.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
aniDevRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aniDevRouteMask.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the aniDevRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the aniDevRouteMask by determining whether the value of the correspondent aniDevRouteDest field belong to a class-A, B, or C network, and then using one of: mask network 255.0.0.0 class-A 255.255.0.0 class-B 255.255.255.0 class-C If the value of the aniDevRouteDest is 0.0.0.0 (a default route), then the mask value is also 0.0.0.0. It should be noted that all IP routing subsystems implicitly use this mechanism. In case of any other aniDevRouteDest (other than the default route), 0.0.0.0 subnet mask is considered an invalid mask. Subnet mask 255.255.255.255 indicates that the route is a Host route. A Network route cannot have subnet mask as 255.255.255.255.')
aniDevRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteMetric5.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's aniDevRouteProto value. If this metric is not used, its value should be set to -1.")
aniDevRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniDevRouteInfo.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's aniDevRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.")
aniDevRouteFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 2, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("host", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aniDevRouteFlag.setStatus('current')
if mibBuilder.loadTexts: aniDevRouteFlag.setDescription('The flag to be associated with this particular route entry. While adding a network route, set this value to network(1). When a host route is being added, this value is set to host(2). Also, for host route, the subnet mask aniDevRouteMask has to be 255.255.255.255.')
mibBuilder.exportSymbols("DEVROUTE-MIB", aniDevRouteMetric1=aniDevRouteMetric1, aniDevRouteType=aniDevRouteType, aniDevRouteNextHop=aniDevRouteNextHop, aniDevRouteMetric5=aniDevRouteMetric5, aniDevRouteAge=aniDevRouteAge, aniDevRoute=aniDevRoute, aniDevRouteMetric2=aniDevRouteMetric2, aniDevRouteMetric3=aniDevRouteMetric3, aniDevRouteMetric4=aniDevRouteMetric4, aniDevRouteInfo=aniDevRouteInfo, aniDevRouteDest=aniDevRouteDest, aniDevRouteMask=aniDevRouteMask, aniDevRouteFlag=aniDevRouteFlag, aniDevRouteEntry=aniDevRouteEntry, aniDevRouteProto=aniDevRouteProto, aniDevRouteIfIndex=aniDevRouteIfIndex, aniDevRouteTable=aniDevRouteTable, PYSNMP_MODULE_ID=aniDevRoute)
