#
# PySNMP MIB module INFORMANT-PERF-CITRIX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-PERF-CITRIX
# Produced by pysmi-0.3.4 at Wed May  1 13:53:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks, IpAddress, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks", "IpAddress", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Unsigned32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
InstanceName, informant = mibBuilder.importSymbols("WTCS", "InstanceName", "informant")
citrixPerformance = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 41))
citrixPerformance.setRevisions(('2008-06-13 22:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: citrixPerformance.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: citrixPerformance.setLastUpdated('200806132254Z')
if mibBuilder.loadTexts: citrixPerformance.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: citrixPerformance.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: citrixPerformance.setDescription('The MIB module for informant Citrix performance entities.')
ctxCPUUtilizationMgmtUserTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1), )
if mibBuilder.loadTexts: ctxCPUUtilizationMgmtUserTable.setStatus('current')
if mibBuilder.loadTexts: ctxCPUUtilizationMgmtUserTable.setDescription("A table containing performance information for instances of 'Citrix CPU Utilization Mgmt User' objects.")
ctxCPUUtilizationMgmtUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1), ).setIndexNames((0, "INFORMANT-PERF-CITRIX", "ctxcumuInstance"))
if mibBuilder.loadTexts: ctxCPUUtilizationMgmtUserEntry.setStatus('current')
if mibBuilder.loadTexts: ctxCPUUtilizationMgmtUserEntry.setDescription("Performance information for one particular instance of 'Citrix CPU Utilization Mgmt User' object.")
ctxcumuInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuInstance.setStatus('current')
if mibBuilder.loadTexts: ctxcumuInstance.setDescription('Instance name.')
ctxcumuCPUEntitlement = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuCPUEntitlement.setStatus('current')
if mibBuilder.loadTexts: ctxcumuCPUEntitlement.setDescription('CPU Entitlement is the percentage CPU resource Citrix CPU Utilization Mgmt makes available to a user at a given time. When the CPU resource is fully utilized, Citrix CPU Utilization Mgmt uses the share/reservation assignment and recent CPU consumption of each contending user to determine the CPU entitlement of that user. On multi-processor machines the maximum value of the counter is 100% times the number of logical processors.')
ctxcumuCPUReservation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuCPUReservation.setStatus('current')
if mibBuilder.loadTexts: ctxcumuCPUReservation.setDescription('CPU Reservation is a percentage of the total machine CPU resource reserved for a user, should that user require it. A value in the range 1-99 indicates that a CPU reservation is applied. Zero indicates that no CPU reservation is being used. When the CPU resource is fully utilized, Citrix CPU Utilization Mgmt uses the reservation when calculating the CPU entitlement of a user.')
ctxcumuCPUShares = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuCPUShares.setStatus('current')
if mibBuilder.loadTexts: ctxcumuCPUShares.setDescription('CPU Shares represents the proportion of CPU resource assigned to a user. The value is an integer in the range 1-64. Zero indicates that no CPU shares value is being used. When the CPU resource is fully utilized, Citrix CPU Utilization Mgmt uses the shares value when calculating the CPU entitlement of a user.')
ctxcumuCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuCPUUsage.setStatus('current')
if mibBuilder.loadTexts: ctxcumuCPUUsage.setDescription('CPU Usage is the percentage of CPU resource consumed by a user at a given time, averaged over a few seconds. Used to identify significant consumers of CPU resource and to provide CPU usage accounting data. On multi-processor machines the maximum value of the counter is 100% times the number of logical processors.')
ctxcumuLongTermCPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxcumuLongTermCPUUsage.setStatus('current')
if mibBuilder.loadTexts: ctxcumuLongTermCPUUsage.setDescription('Long-term CPU Usage is the percentage of CPU resource consumed by a user, averaged over a longer period than the CPU Usage counter. On multi-processor machines the maximum value of the counter is 100% times the number of logical processors.')
ctxDataLayerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2), )
if mibBuilder.loadTexts: ctxDataLayerTable.setStatus('current')
if mibBuilder.loadTexts: ctxDataLayerTable.setDescription("A table containing performance information for instances of 'Citrix Data Layer V0.1' objects.")
ctxDataLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1), ).setIndexNames((0, "INFORMANT-PERF-CITRIX", "ctxdlInstance"))
if mibBuilder.loadTexts: ctxDataLayerEntry.setStatus('current')
if mibBuilder.loadTexts: ctxDataLayerEntry.setDescription("Performance information for one particular instance of 'Citrix Data Layer V0.1' object.")
ctxdlInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlInstance.setStatus('current')
if mibBuilder.loadTexts: ctxdlInstance.setDescription('Instance name.')
ctxdlCommitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlCommitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlCommitsPerSec.setDescription('Commits/sec')
ctxdlContextsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlContextsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlContextsPerSec.setDescription('Contexts/sec')
ctxdlDeletesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlDeletesPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlDeletesPerSec.setDescription('Deletes/sec')
ctxdlInsertsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlInsertsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlInsertsPerSec.setDescription('Inserts/sec')
ctxdlNumberOfContextsInThePool = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlNumberOfContextsInThePool.setStatus('current')
if mibBuilder.loadTexts: ctxdlNumberOfContextsInThePool.setDescription('Number of Contexts in the pool')
ctxdlNumOfCntxtRequestsWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlNumOfCntxtRequestsWaiting.setStatus('current')
if mibBuilder.loadTexts: ctxdlNumOfCntxtRequestsWaiting.setDescription('Number of context requests waiting')
ctxdlReadStreamsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlReadStreamsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlReadStreamsCreatedPerSec.setDescription('Read streams created/sec')
ctxdlStreamBytesReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlStreamBytesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlStreamBytesReadPerSec.setDescription('Stream bytes read/sec')
ctxdlStreamBytesWrittenPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlStreamBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlStreamBytesWrittenPerSec.setDescription('Stream bytes written/sec')
ctxdlStreamsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlStreamsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlStreamsCreatedPerSec.setDescription('Streams created/sec')
ctxdlUpdatesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlUpdatesPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlUpdatesPerSec.setDescription('Updates/sec')
ctxdlWriteStreamsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdlWriteStreamsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxdlWriteStreamsCreatedPerSec.setDescription('Write streams created/sec')
ctxIMANetworkingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3), )
if mibBuilder.loadTexts: ctxIMANetworkingTable.setStatus('current')
if mibBuilder.loadTexts: ctxIMANetworkingTable.setDescription("A table containing performance information for instances of 'Citrix IMA Networking' objects.")
ctxIMANetworkingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1), ).setIndexNames((0, "INFORMANT-PERF-CITRIX", "ctximanInstance"))
if mibBuilder.loadTexts: ctxIMANetworkingEntry.setStatus('current')
if mibBuilder.loadTexts: ctxIMANetworkingEntry.setDescription("Performance information for one particular instance of 'Citrix IMA Networking' object.")
ctximanInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctximanInstance.setStatus('current')
if mibBuilder.loadTexts: ctximanInstance.setDescription('Instance name.')
ctximanBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctximanBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ctximanBytesReceivedPerSec.setDescription('This Counter is for Inbound bytes/sec')
ctximanBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctximanBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ctximanBytesSentPerSec.setDescription('This Counter is for Outbound bytes/sec')
ctximanNetworkConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctximanNetworkConnections.setStatus('current')
if mibBuilder.loadTexts: ctximanNetworkConnections.setDescription('Number of Active IMA network connections other IMA Servers')
citrixLicensing = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4))
ctxlAverageCheckInRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlAverageCheckInRspTimeMs.setStatus('current')
if mibBuilder.loadTexts: ctxlAverageCheckInRspTimeMs.setDescription('This Counter displays the average license check-in response time in milliseconds.')
ctxlAverageCheckOutRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlAverageCheckOutRspTimeMs.setStatus('current')
if mibBuilder.loadTexts: ctxlAverageCheckOutRspTimeMs.setDescription('This Counter displays the average license check-out response time in milliseconds.')
ctxlLastRecordCheckInRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlLastRecordCheckInRspTimeMs.setStatus('current')
if mibBuilder.loadTexts: ctxlLastRecordCheckInRspTimeMs.setDescription('Ce compteur affiche le dernier temps de rponse enregistr de libration de licence en millisecondes.')
ctxlLastRecordCheckOutRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlLastRecordCheckOutRspTimeMs.setStatus('current')
if mibBuilder.loadTexts: ctxlLastRecordCheckOutRspTimeMs.setDescription('This Counter displays the last recorded license check-out response time in milliseconds.')
ctxlServerConnectionFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlServerConnectionFailure.setStatus('current')
if mibBuilder.loadTexts: ctxlServerConnectionFailure.setDescription('This Counter displays the number of minutes that the Citrix MetaFrame Presentation Server has been disconnected from the License Server.')
ctxlMaximumCheckInRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlMaximumCheckInRspTimeMs.setStatus('current')
if mibBuilder.loadTexts: ctxlMaximumCheckInRspTimeMs.setDescription('This Counter displays the maximum license check-in response time in milliseconds.')
ctxlMaximumCheckOutRspTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxlMaximumCheckOutRspTimeMs.setStatus('current')
if mibBuilder.loadTexts: ctxlMaximumCheckOutRspTimeMs.setDescription('This Counter displays the maximum license check-out response time in milliseconds.')
citrixMetaFramePresentationSvr = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5))
if mibBuilder.loadTexts: citrixMetaFramePresentationSvr.setStatus('current')
if mibBuilder.loadTexts: citrixMetaFramePresentationSvr.setDescription('This object monitors various MetaFrame XP functions')
ctxmpsApplEnumerationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsApplEnumerationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsApplEnumerationsPerSec.setDescription('This Counter is for Application Enumeration/sec')
ctxmpsApplResolutionTimeMs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsApplResolutionTimeMs.setStatus('current')
if mibBuilder.loadTexts: ctxmpsApplResolutionTimeMs.setDescription('Shows the time in milliseconds that a resolution took to complete')
ctxmpsApplResolutionFailedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsApplResolutionFailedPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsApplResolutionFailedPerSec.setDescription('This counter is for Application Resolutions Failed/sec')
ctxmpsApplResolutionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsApplResolutionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsApplResolutionsPerSec.setDescription('This Counter is for Application Resolutions/sec')
ctxmpsDataStoreConnectionFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreConnectionFailure.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDataStoreConnectionFailure.setDescription('This Counter displays the number of minutes that the Citrix MetaFrame Presentation Server has been disconnected from the Data Store.')
ctxmpsDataStoreBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreBytesRead.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDataStoreBytesRead.setDescription('This Counter displays Number of Bytes read from the IMA DataStore.')
ctxmpsDataStoreBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreBytesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDataStoreBytesReadPerSec.setDescription('This Counter displays Number of Bytes of IMA Data Store data read/sec')
ctxmpsDataStoreBytesWritePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreBytesWritePerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDataStoreBytesWritePerSec.setDescription('This Counter displays Number of Bytes of IMA Data Store data written/sec')
ctxmpsDataStoreReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreReads.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDataStoreReads.setDescription('This Counter displays number of times data was read from the IMA DataStore.')
ctxmpsDataStoreReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDataStoreReadsPerSec.setDescription('This Counter displays number of times data was read from the IMA DataStore')
ctxmpsDataStoreWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDataStoreWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDataStoreWritesPerSec.setDescription('This Counter displays number of times data was written to the IMA Data Store')
ctxmpsDSGatewayUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSGatewayUpdateCount.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSGatewayUpdateCount.setDescription('This Counter displays the number of dynamic store update packets sent to remote data collectors.')
ctxmpsDSGatewayUpdateBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSGatewayUpdateBytesSent.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSGatewayUpdateBytesSent.setDescription('This Counter displays the number of bytes of data sent across gateways to remote data collectors.')
ctxmpsDSQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSQueryCount.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSQueryCount.setDescription('This Counter displays the number of dynamic store queries that have been performed.')
ctxmpsDSQueryRequestBytesReceive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSQueryRequestBytesReceive.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSQueryRequestBytesReceive.setDescription('This Counter displays the number of bytes of data received in dynamic store query request packets.')
ctxmpsDSQueryResponseBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSQueryResponseBytesSent.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSQueryResponseBytesSent.setDescription('This Counter displays the number of bytes of data sent in response to dynamic store queries.')
ctxmpsDSUpdateBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSUpdateBytesReceived.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSUpdateBytesReceived.setDescription('This Counter displays the number of bytes of data received in dynamic store update packets.')
ctxmpsDSUpdatePacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSUpdatePacketsReceived.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSUpdatePacketsReceived.setDescription('This Counter displays the number of update packets received by the dynamic store.')
ctxmpsDSUpdateResponseBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSUpdateResponseBytesSent.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSUpdateResponseBytesSent.setDescription('This Counter displays the number of bytes of data sent in response to dynamic store update packets.')
ctxmpsDSBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSBytesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSBytesReadPerSec.setDescription('This Counter displays Number of Bytes of IMA Dynamic Store data read/sec')
ctxmpsDSBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSBytesWrittenPerSec.setDescription('This Counter displays Number of Bytes of IMA Dynamic Store data written/sec')
ctxmpsDSReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSReadsPerSec.setDescription('This Counter displays number of times data was read from the IMA Dynamic Store')
ctxmpsDSWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsDSWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsDSWritesPerSec.setDescription('This Counter displays number of times data was written to the IMA Dynamic Store')
ctxmpsFilteredApplEnumsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsFilteredApplEnumsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsFilteredApplEnumsPerSec.setDescription('This Counter is for Filtered Application Enumeration/sec')
ctxmpsLCCacheBytesReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsLCCacheBytesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsLCCacheBytesReadPerSec.setDescription('This Counter displays Number of Bytes of IMA Local Host Cache data read/sec')
ctxmpsLCCacheBytesWrittenPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsLCCacheBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsLCCacheBytesWrittenPerSec.setDescription('This Counter displays Number of Bytes of IMA Local Host Cache data written/sec')
ctxmpsLCCacheReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsLCCacheReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsLCCacheReadsPerSec.setDescription('This Counter displays number of times data was read from the IMA Local Host Cache')
ctxmpsLCCacheWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsLCCacheWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxmpsLCCacheWritesPerSec.setDescription('This Counter displays number of times data was written to the IMA Local Host Cache')
ctxmpsMaximumNumberOfXMLThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsMaximumNumberOfXMLThreads.setStatus('current')
if mibBuilder.loadTexts: ctxmpsMaximumNumberOfXMLThreads.setDescription('This Counter displays the maximum number of XML threads.')
ctxmpsNumberOfXMLThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsNumberOfXMLThreads.setStatus('current')
if mibBuilder.loadTexts: ctxmpsNumberOfXMLThreads.setDescription('This Counter displays the number of XML threads.')
ctxmpsNumberOfBusyXMLThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsNumberOfBusyXMLThreads.setStatus('current')
if mibBuilder.loadTexts: ctxmpsNumberOfBusyXMLThreads.setDescription('This Counter displays the number of busy XML threads.')
ctxmpsResWorkItemQueueExecuteCnt = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsResWorkItemQueueExecuteCnt.setStatus('current')
if mibBuilder.loadTexts: ctxmpsResWorkItemQueueExecuteCnt.setDescription('This Counter displays the number of work items that are currently being executed.')
ctxmpsResWorkItemQueueReadyCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsResWorkItemQueueReadyCount.setStatus('current')
if mibBuilder.loadTexts: ctxmpsResWorkItemQueueReadyCount.setDescription('This Counter displays the number of work items that are ready to be executed.')
ctxmpsWorkItemQueueExecuteCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsWorkItemQueueExecuteCount.setStatus('current')
if mibBuilder.loadTexts: ctxmpsWorkItemQueueExecuteCount.setDescription('This Counter displays the number of work items that are currently being executed.')
ctxmpsWorkItemQueuePendingCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsWorkItemQueuePendingCount.setStatus('current')
if mibBuilder.loadTexts: ctxmpsWorkItemQueuePendingCount.setDescription('This Counter displays the number of work items that are not yet ready to be executed.')
ctxmpsWorkItemQueueReadyCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsWorkItemQueueReadyCount.setStatus('current')
if mibBuilder.loadTexts: ctxmpsWorkItemQueueReadyCount.setDescription('This Counter displays the number of work items that are ready to be executed.')
ctxmpsZoneElections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsZoneElections.setStatus('current')
if mibBuilder.loadTexts: ctxmpsZoneElections.setDescription('This Counter displays number of zone elections that have occurred.')
ctxmpsZoneElectionsWon = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 5, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxmpsZoneElectionsWon.setStatus('current')
if mibBuilder.loadTexts: ctxmpsZoneElectionsWon.setDescription('This Counter displays number of times this server has won a zone election.')
ctxSmartAuditorAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 41, 6))
ctxsaaActiveRecordingCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsaaActiveRecordingCount.setStatus('current')
if mibBuilder.loadTexts: ctxsaaActiveRecordingCount.setDescription('The number of sessions presently being recorded.')
ctxsaaReadSmartAuditorDriverSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsaaReadSmartAuditorDriverSec.setStatus('current')
if mibBuilder.loadTexts: ctxsaaReadSmartAuditorDriverSec.setDescription('The average bytes/sec read from the SmartAuditor Driver.')
ctxSmartAuditorStorageManager = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 41, 7))
ctxsasmActiveRecordingCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsasmActiveRecordingCount.setStatus('current')
if mibBuilder.loadTexts: ctxsasmActiveRecordingCount.setDescription('Number of currently active session recordings.')
ctxsasmMessageBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsasmMessageBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxsasmMessageBytesPerSec.setDescription('The SmartAuditor Storage Manager throughput rate expressed as number of message bytes received per second.')
ctxsasmMessagesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxsasmMessagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ctxsasmMessagesPerSec.setDescription('The SmartAuditor Storage Manager throughput rate expressed as number of messages received per second.')
ctxDesktopBrokerDatabaseService = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 41, 8))
ctxdbdsHostedDesktopReleasesSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdbdsHostedDesktopReleasesSec.setStatus('current')
if mibBuilder.loadTexts: ctxdbdsHostedDesktopReleasesSec.setDescription('The rate at which virtual machines are being released from execution by clients shutting down Presentation Server sessions.')
ctxdbdsHostedDesktopRequestsSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdbdsHostedDesktopRequestsSec.setStatus('current')
if mibBuilder.loadTexts: ctxdbdsHostedDesktopRequestsSec.setDescription('The rate at which virtual machines are being requested for execution by clients running Presentation Server sessions.')
ctxdbdsHostedDesktopStateUpdSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxdbdsHostedDesktopStateUpdSec.setStatus('current')
if mibBuilder.loadTexts: ctxdbdsHostedDesktopStateUpdSec.setDescription('The rate at which state updates for virtual machines running in Presentation Server sessions are being received.')
ctxICASessionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9), )
if mibBuilder.loadTexts: ctxICASessionTable.setStatus('current')
if mibBuilder.loadTexts: ctxICASessionTable.setDescription('This object has several counters that can be used to monitor the performance in ICA sessions')
ctxICASessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1), ).setIndexNames((0, "INFORMANT-PERF-CITRIX", "ctxisInstance"))
if mibBuilder.loadTexts: ctxICASessionEntry.setStatus('current')
if mibBuilder.loadTexts: ctxICASessionEntry.setDescription("Performance information for one particular instance of 'ICA Session' object.")
ctxisInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInstance.setStatus('current')
if mibBuilder.loadTexts: ctxisInstance.setDescription('Instance name.')
ctxisInputAudioBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputAudioBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputAudioBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputCOM1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputCOM1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputCOM1Bandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputCOM2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputCOM2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputCOM2Bandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputCOMBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputCOMBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputCOMBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputClipboardBandwidt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputClipboardBandwidt.setStatus('current')
if mibBuilder.loadTexts: ctxisInputClipboardBandwidt.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputControlChanBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputControlChanBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputControlChanBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputDriveBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputDriveBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputDriveBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputFontDataBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputFontDataBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputFontDataBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputLPT1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputLPT1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputLPT1Bandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputLPT2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputLPT2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputLPT2Bandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputLicensingBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputLicensingBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputLicensingBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputManagementBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputManagementBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputManagementBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputPNBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputPNBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputPNBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputPrinterBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputPrinterBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputPrinterBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputSeamlessBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSeamlessBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputSeamlessBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputSessionBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSessionBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputSessionBandwidth.setDescription('This value represents the bandwidth from client to server traffic for a session in bps')
ctxisInputSessionCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSessionCompression.setStatus('current')
if mibBuilder.loadTexts: ctxisInputSessionCompression.setDescription('This value represents the compression ratio for client to server traffic for a session')
ctxisInputSessionLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSessionLineSpeed.setStatus('current')
if mibBuilder.loadTexts: ctxisInputSessionLineSpeed.setDescription('This value represents the line speed from client to server for a session in bps')
ctxisInputSpeedScreenDataChanBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputSpeedScreenDataChanBW.setStatus('current')
if mibBuilder.loadTexts: ctxisInputSpeedScreenDataChanBW.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputTextEchoBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputTextEchoBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputTextEchoBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputThinWireBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputThinWireBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputThinWireBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisInputVideoFrameBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisInputVideoFrameBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisInputVideoFrameBandwidth.setDescription('This value represents the bandwidth from client to server traffic on this virtual channel. This is measured in bps')
ctxisLatencyLastRecorded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisLatencyLastRecorded.setStatus('current')
if mibBuilder.loadTexts: ctxisLatencyLastRecorded.setDescription('This value represents the last recorded latency measurement for this session.')
ctxisLatencySessionAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisLatencySessionAverage.setStatus('current')
if mibBuilder.loadTexts: ctxisLatencySessionAverage.setDescription('This value represents the average client latency over the life of a session.')
ctxisLatencySessionDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisLatencySessionDeviation.setStatus('current')
if mibBuilder.loadTexts: ctxisLatencySessionDeviation.setDescription('This value represents the difference between the minimum and maximum measured latency values for a session.')
ctxisOutputAudioBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputAudioBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputAudioBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputCOM1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputCOM1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputCOM1Bandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputCOM2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputCOM2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputCOM2Bandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputCOMBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputCOMBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputCOMBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputClipboardBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputClipboardBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputClipboardBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputControlChannBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputControlChannBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputControlChannBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputDriveBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputDriveBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputDriveBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputFontDataBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputFontDataBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputFontDataBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputLPT1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputLPT1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputLPT1Bandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputLPT2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputLPT2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputLPT2Bandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputLicensingBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputLicensingBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputLicensingBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputManagementBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputManagementBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputManagementBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputPNBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputPNBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputPNBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputPrinterBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputPrinterBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputPrinterBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputSeamlessBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSeamlessBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputSeamlessBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputSessionBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSessionBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputSessionBandwidth.setDescription('This value represents the bandwidth from server to client traffic for a session in bps')
ctxisOutputSessionCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSessionCompression.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputSessionCompression.setDescription('This value represents the compression ratio for server to client traffic for a session')
ctxisOutputSessionLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSessionLineSpeed.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputSessionLineSpeed.setDescription('This value represents the line speed from server to client for a session in bps')
ctxisOutputSpeedScreenDataChanBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputSpeedScreenDataChanBW.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputSpeedScreenDataChanBW.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputTextEchoBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputTextEchoBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputTextEchoBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputThinWireBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputThinWireBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputThinWireBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxisOutputVideoFrameBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 41, 9, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxisOutputVideoFrameBandwidth.setStatus('current')
if mibBuilder.loadTexts: ctxisOutputVideoFrameBandwidth.setDescription('This value represents the bandwidth from server to client traffic on this virtual channel. This is measured in bps')
ctxSecureTicketAuthority = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10))
if mibBuilder.loadTexts: ctxSecureTicketAuthority.setStatus('current')
if mibBuilder.loadTexts: ctxSecureTicketAuthority.setDescription('The Secure Ticket Authority Service object includes those counters that apply to the Secure Ticket Authority service.')
ctxstaSTABadDataRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTABadDataRequestCount.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTABadDataRequestCount.setDescription('The total number of unsuccessful ticket validation and data retrieval requests during the lifetime of the STA.')
ctxstaSTABadRefreshRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTABadRefreshRequestCount.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTABadRefreshRequestCount.setDescription('The total number of unsuccessful ticket refresh requests received during the lifetime of the STA.')
ctxstaSTABadTicketRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTABadTicketRequestCount.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTABadTicketRequestCount.setDescription('The total number of unsuccessful ticket generation requests received during the lifetime of the STA.')
ctxstaSTACountOfActiveTickets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTACountOfActiveTickets.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTACountOfActiveTickets.setDescription('Total count of active tickets currently held in the STA.')
ctxstaSTAGoodDataRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAGoodDataRequestCount.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTAGoodDataRequestCount.setDescription('The total number of successful ticket validation and data retrieval requests received during the lifetime of the STA.')
ctxstaSTAGoodRefreshRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAGoodRefreshRequestCount.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTAGoodRefreshRequestCount.setDescription('The total number of successful ticket refresh requests received during the lifetime of the STA.')
ctxstaSTAGoodTicketRequestCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAGoodTicketRequestCount.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTAGoodTicketRequestCount.setDescription('The total number of successful ticket generation requests received during the lifetime of the STA.')
ctxstaSTAPeakAllRequestRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAPeakAllRequestRate.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTAPeakAllRequestRate.setDescription('The maximum rate of all monitored activities per second.')
ctxstaSTAPeakDataRequestRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAPeakDataRequestRate.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTAPeakDataRequestRate.setDescription('The maximum rate of data requests per second during the lifetime of the STA.')
ctxstaSTAPeakTicketRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAPeakTicketRefreshRate.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTAPeakTicketRefreshRate.setDescription('The maximum rate of refresh requests per second during the lifetime of the STA.')
ctxstaSTAPeakTicketRequestRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTAPeakTicketRequestRate.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTAPeakTicketRequestRate.setDescription('The maximum rate of ticket generation requests per second during the lifetime of the STA.')
ctxstaSTATicketTimeoutCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 41, 10, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxstaSTATicketTimeoutCount.setStatus('current')
if mibBuilder.loadTexts: ctxstaSTATicketTimeoutCount.setDescription('The total number of ticket timeouts that occurred during the lifetime of the STA.')
mibBuilder.exportSymbols("INFORMANT-PERF-CITRIX", ctxICASessionTable=ctxICASessionTable, ctxisOutputPrinterBandwidth=ctxisOutputPrinterBandwidth, ctxisInputFontDataBandwidth=ctxisInputFontDataBandwidth, ctxlMaximumCheckOutRspTimeMs=ctxlMaximumCheckOutRspTimeMs, ctxIMANetworkingTable=ctxIMANetworkingTable, citrixMetaFramePresentationSvr=citrixMetaFramePresentationSvr, ctxsaaReadSmartAuditorDriverSec=ctxsaaReadSmartAuditorDriverSec, ctxmpsDataStoreWritesPerSec=ctxmpsDataStoreWritesPerSec, ctxmpsDataStoreConnectionFailure=ctxmpsDataStoreConnectionFailure, ctxmpsDSQueryRequestBytesReceive=ctxmpsDSQueryRequestBytesReceive, ctxmpsDSUpdateBytesReceived=ctxmpsDSUpdateBytesReceived, ctxisOutputSessionBandwidth=ctxisOutputSessionBandwidth, ctxCPUUtilizationMgmtUserTable=ctxCPUUtilizationMgmtUserTable, ctxmpsNumberOfXMLThreads=ctxmpsNumberOfXMLThreads, ctxisInputCOM2Bandwidth=ctxisInputCOM2Bandwidth, ctxisOutputPNBandwidth=ctxisOutputPNBandwidth, ctxcumuInstance=ctxcumuInstance, ctxisInputLPT2Bandwidth=ctxisInputLPT2Bandwidth, ctxdlStreamBytesReadPerSec=ctxdlStreamBytesReadPerSec, ctxisInputPrinterBandwidth=ctxisInputPrinterBandwidth, ctxmpsDataStoreBytesReadPerSec=ctxmpsDataStoreBytesReadPerSec, ctxstaSTAGoodTicketRequestCount=ctxstaSTAGoodTicketRequestCount, ctxstaSTAPeakTicketRequestRate=ctxstaSTAPeakTicketRequestRate, ctxlLastRecordCheckOutRspTimeMs=ctxlLastRecordCheckOutRspTimeMs, ctxisLatencySessionAverage=ctxisLatencySessionAverage, ctxmpsApplEnumerationsPerSec=ctxmpsApplEnumerationsPerSec, ctxmpsWorkItemQueuePendingCount=ctxmpsWorkItemQueuePendingCount, ctxdlUpdatesPerSec=ctxdlUpdatesPerSec, ctxmpsResWorkItemQueueExecuteCnt=ctxmpsResWorkItemQueueExecuteCnt, ctxisInputCOMBandwidth=ctxisInputCOMBandwidth, ctxdlCommitsPerSec=ctxdlCommitsPerSec, ctxmpsDSReadsPerSec=ctxmpsDSReadsPerSec, ctxisInputSeamlessBandwidth=ctxisInputSeamlessBandwidth, ctxisOutputSpeedScreenDataChanBW=ctxisOutputSpeedScreenDataChanBW, ctxisOutputCOMBandwidth=ctxisOutputCOMBandwidth, ctxisInputLPT1Bandwidth=ctxisInputLPT1Bandwidth, ctxmpsApplResolutionTimeMs=ctxmpsApplResolutionTimeMs, ctxlLastRecordCheckInRspTimeMs=ctxlLastRecordCheckInRspTimeMs, ctxisInputLicensingBandwidth=ctxisInputLicensingBandwidth, ctxlAverageCheckOutRspTimeMs=ctxlAverageCheckOutRspTimeMs, ctxisOutputAudioBandwidth=ctxisOutputAudioBandwidth, ctxdlNumOfCntxtRequestsWaiting=ctxdlNumOfCntxtRequestsWaiting, ctxmpsDataStoreReadsPerSec=ctxmpsDataStoreReadsPerSec, citrixPerformance=citrixPerformance, ctxmpsApplResolutionFailedPerSec=ctxmpsApplResolutionFailedPerSec, ctxisOutputSessionLineSpeed=ctxisOutputSessionLineSpeed, ctxmpsDSBytesReadPerSec=ctxmpsDSBytesReadPerSec, ctxmpsDSGatewayUpdateBytesSent=ctxmpsDSGatewayUpdateBytesSent, ctxstaSTABadDataRequestCount=ctxstaSTABadDataRequestCount, ctxisLatencyLastRecorded=ctxisLatencyLastRecorded, ctximanInstance=ctximanInstance, ctxisInputSessionCompression=ctxisInputSessionCompression, ctxisInputSpeedScreenDataChanBW=ctxisInputSpeedScreenDataChanBW, ctxSmartAuditorStorageManager=ctxSmartAuditorStorageManager, ctxmpsDataStoreBytesWritePerSec=ctxmpsDataStoreBytesWritePerSec, ctxisInputSessionBandwidth=ctxisInputSessionBandwidth, ctxcumuCPUReservation=ctxcumuCPUReservation, ctxmpsWorkItemQueueReadyCount=ctxmpsWorkItemQueueReadyCount, ctxstaSTABadTicketRequestCount=ctxstaSTABadTicketRequestCount, ctxdlInstance=ctxdlInstance, ctxisOutputCOM1Bandwidth=ctxisOutputCOM1Bandwidth, ctxcumuLongTermCPUUsage=ctxcumuLongTermCPUUsage, ctxstaSTAPeakTicketRefreshRate=ctxstaSTAPeakTicketRefreshRate, ctxstaSTABadRefreshRequestCount=ctxstaSTABadRefreshRequestCount, ctxstaSTAPeakDataRequestRate=ctxstaSTAPeakDataRequestRate, ctxmpsDSWritesPerSec=ctxmpsDSWritesPerSec, ctxisInputSessionLineSpeed=ctxisInputSessionLineSpeed, ctximanBytesSentPerSec=ctximanBytesSentPerSec, ctxdlContextsPerSec=ctxdlContextsPerSec, ctxisInputVideoFrameBandwidth=ctxisInputVideoFrameBandwidth, ctxisOutputControlChannBandwidth=ctxisOutputControlChannBandwidth, ctxmpsDSBytesWrittenPerSec=ctxmpsDSBytesWrittenPerSec, ctxmpsDSGatewayUpdateCount=ctxmpsDSGatewayUpdateCount, ctxisOutputCOM2Bandwidth=ctxisOutputCOM2Bandwidth, ctxisOutputLPT2Bandwidth=ctxisOutputLPT2Bandwidth, ctxisOutputLPT1Bandwidth=ctxisOutputLPT1Bandwidth, ctxmpsMaximumNumberOfXMLThreads=ctxmpsMaximumNumberOfXMLThreads, ctxisOutputTextEchoBandwidth=ctxisOutputTextEchoBandwidth, ctxisOutputFontDataBandwidth=ctxisOutputFontDataBandwidth, ctxmpsWorkItemQueueExecuteCount=ctxmpsWorkItemQueueExecuteCount, ctxmpsFilteredApplEnumsPerSec=ctxmpsFilteredApplEnumsPerSec, ctxisOutputThinWireBandwidth=ctxisOutputThinWireBandwidth, ctxmpsLCCacheWritesPerSec=ctxmpsLCCacheWritesPerSec, ctxstaSTAGoodDataRequestCount=ctxstaSTAGoodDataRequestCount, ctxisInputCOM1Bandwidth=ctxisInputCOM1Bandwidth, ctxmpsDSUpdateResponseBytesSent=ctxmpsDSUpdateResponseBytesSent, ctxisInputManagementBandwidth=ctxisInputManagementBandwidth, ctxICASessionEntry=ctxICASessionEntry, ctximanBytesReceivedPerSec=ctximanBytesReceivedPerSec, ctxdbdsHostedDesktopReleasesSec=ctxdbdsHostedDesktopReleasesSec, ctxcumuCPUEntitlement=ctxcumuCPUEntitlement, ctxmpsResWorkItemQueueReadyCount=ctxmpsResWorkItemQueueReadyCount, ctxCPUUtilizationMgmtUserEntry=ctxCPUUtilizationMgmtUserEntry, ctxmpsDataStoreReads=ctxmpsDataStoreReads, ctxlMaximumCheckInRspTimeMs=ctxlMaximumCheckInRspTimeMs, ctxmpsDSQueryCount=ctxmpsDSQueryCount, ctxisInstance=ctxisInstance, ctxDataLayerEntry=ctxDataLayerEntry, ctxstaSTACountOfActiveTickets=ctxstaSTACountOfActiveTickets, ctxdlStreamsCreatedPerSec=ctxdlStreamsCreatedPerSec, ctxmpsLCCacheBytesReadPerSec=ctxmpsLCCacheBytesReadPerSec, ctxDataLayerTable=ctxDataLayerTable, ctxisOutputLicensingBandwidth=ctxisOutputLicensingBandwidth, ctxdlWriteStreamsCreatedPerSec=ctxdlWriteStreamsCreatedPerSec, ctxSecureTicketAuthority=ctxSecureTicketAuthority, ctxdlNumberOfContextsInThePool=ctxdlNumberOfContextsInThePool, ctxmpsDataStoreBytesRead=ctxmpsDataStoreBytesRead, citrixLicensing=citrixLicensing, ctxdbdsHostedDesktopRequestsSec=ctxdbdsHostedDesktopRequestsSec, ctxdlStreamBytesWrittenPerSec=ctxdlStreamBytesWrittenPerSec, ctxsasmMessagesPerSec=ctxsasmMessagesPerSec, PYSNMP_MODULE_ID=citrixPerformance, ctxsasmActiveRecordingCount=ctxsasmActiveRecordingCount, ctxmpsDSQueryResponseBytesSent=ctxmpsDSQueryResponseBytesSent, ctxsasmMessageBytesPerSec=ctxsasmMessageBytesPerSec, ctxisOutputSeamlessBandwidth=ctxisOutputSeamlessBandwidth, ctxisOutputVideoFrameBandwidth=ctxisOutputVideoFrameBandwidth, ctxSmartAuditorAgent=ctxSmartAuditorAgent, ctxisOutputSessionCompression=ctxisOutputSessionCompression, ctxmpsApplResolutionsPerSec=ctxmpsApplResolutionsPerSec, ctxlServerConnectionFailure=ctxlServerConnectionFailure, ctxIMANetworkingEntry=ctxIMANetworkingEntry, ctxisOutputManagementBandwidth=ctxisOutputManagementBandwidth, ctxmpsZoneElections=ctxmpsZoneElections, ctxisInputDriveBandwidth=ctxisInputDriveBandwidth, ctxisInputThinWireBandwidth=ctxisInputThinWireBandwidth, ctxstaSTATicketTimeoutCount=ctxstaSTATicketTimeoutCount, ctxcumuCPUUsage=ctxcumuCPUUsage, ctxcumuCPUShares=ctxcumuCPUShares, ctxisLatencySessionDeviation=ctxisLatencySessionDeviation, ctxdlInsertsPerSec=ctxdlInsertsPerSec, ctxisInputAudioBandwidth=ctxisInputAudioBandwidth, ctxisInputPNBandwidth=ctxisInputPNBandwidth, ctxisInputControlChanBandwidth=ctxisInputControlChanBandwidth, ctxisInputClipboardBandwidt=ctxisInputClipboardBandwidt, ctxdbdsHostedDesktopStateUpdSec=ctxdbdsHostedDesktopStateUpdSec, ctxlAverageCheckInRspTimeMs=ctxlAverageCheckInRspTimeMs, ctxmpsZoneElectionsWon=ctxmpsZoneElectionsWon, ctxstaSTAGoodRefreshRequestCount=ctxstaSTAGoodRefreshRequestCount, ctxdlDeletesPerSec=ctxdlDeletesPerSec, ctximanNetworkConnections=ctximanNetworkConnections, ctxDesktopBrokerDatabaseService=ctxDesktopBrokerDatabaseService, ctxisInputTextEchoBandwidth=ctxisInputTextEchoBandwidth, ctxmpsDSUpdatePacketsReceived=ctxmpsDSUpdatePacketsReceived, ctxisOutputClipboardBandwidth=ctxisOutputClipboardBandwidth, ctxisOutputDriveBandwidth=ctxisOutputDriveBandwidth, ctxmpsLCCacheReadsPerSec=ctxmpsLCCacheReadsPerSec, ctxdlReadStreamsCreatedPerSec=ctxdlReadStreamsCreatedPerSec, ctxmpsLCCacheBytesWrittenPerSec=ctxmpsLCCacheBytesWrittenPerSec, ctxsaaActiveRecordingCount=ctxsaaActiveRecordingCount, ctxstaSTAPeakAllRequestRate=ctxstaSTAPeakAllRequestRate, ctxmpsNumberOfBusyXMLThreads=ctxmpsNumberOfBusyXMLThreads)
