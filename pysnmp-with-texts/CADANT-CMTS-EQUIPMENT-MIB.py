#
# PySNMP MIB module CADANT-CMTS-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-EQUIPMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
cadEquipment, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadEquipment")
CardId, FirmwareSource, PortType, CerCardType, PortMode, PicType, PortDetectedMode, DuplexStatus, SecondaryState, PortId, CerPortType, CerCardSubType, FlowControlMode, EqActionType, CerPicType, AdminState, DiskVolumeUsageLevel, PrimaryState = mibBuilder.importSymbols("CADANT-TC", "CardId", "FirmwareSource", "PortType", "CerCardType", "PortMode", "PicType", "PortDetectedMode", "DuplexStatus", "SecondaryState", "PortId", "CerPortType", "CerCardSubType", "FlowControlMode", "EqActionType", "CerPicType", "AdminState", "DiskVolumeUsageLevel", "PrimaryState")
TenthdBmV, = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdBmV")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, Integer32, iso, MibIdentifier, TimeTicks, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Counter64, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Integer32", "iso", "MibIdentifier", "TimeTicks", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Counter64", "ObjectIdentity", "Counter32")
MacAddress, TextualConvention, RowStatus, TimeStamp, DisplayString, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "TimeStamp", "DisplayString", "TruthValue", "DateAndTime")
cadEquipmentMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1))
cadEquipmentMib.setRevisions(('2015-10-06 00:00', '2015-08-26 00:00', '2015-08-12 00:00', '2015-07-21 00:00', '2015-07-12 00:00', '2015-07-07 00:00', '2015-06-03 00:00', '2015-06-01 00:00', '2014-12-01 00:00', '2014-10-14 00:00', '2014-08-01 00:00', '2014-03-16 00:00', '2013-05-16 00:00', '2013-04-12 00:00', '2013-02-19 00:00', '2013-01-08 00:00', '2013-01-07 00:00', '2012-09-07 00:00', '2012-07-10 00:00', '2012-07-03 00:00', '2012-05-21 00:00', '2012-05-08 00:00', '2012-05-03 00:00', '2012-05-02 00:00', '2012-04-25 00:00', '2012-04-11 00:00', '2012-03-22 00:00', '2012-01-05 00:00', '2011-09-13 00:00', '2011-08-05 00:00', '2011-07-19 00:00', '2011-07-18 00:00', '2011-07-08 00:00', '2011-06-28 00:00', '2011-06-14 00:00', '2011-03-18 00:00', '2011-03-17 00:00', '2011-01-27 00:00', '2009-07-10 00:00', '2009-03-03 00:00', '2009-01-05 00:00', '2008-10-14 00:00', '2008-10-01 00:00', '2008-07-03 00:00', '2008-06-18 00:00', '2008-04-28 00:00', '2008-04-02 00:00', '2008-02-25 00:00', '2007-11-05 00:00', '2007-01-10 00:00', '2006-11-13 00:00', '2006-09-12 00:00', '2006-08-23 00:00', '2006-02-14 00:00', '2005-08-30 00:00', '2005-04-06 00:00', '2005-02-04 00:00', '2005-01-24 00:00', '2004-12-01 00:00', '2004-11-18 00:00', '2004-11-11 00:00', '2004-09-07 00:00', '2004-07-23 00:00', '2004-03-22 00:00', '2004-03-18 00:00', '2004-02-04 00:00', '2003-12-18 00:00', '2003-03-31 00:00', '2003-03-17 00:00', '2003-03-05 00:00', '2003-03-02 00:00', '2003-01-29 00:00', '2002-12-14 00:00', '2002-11-07 00:00', '2002-09-25 00:00', '2002-09-01 00:00', '2002-05-01 00:00', '2001-12-28 16:30', '2001-12-21 16:30', '2001-10-03 00:00', '2001-07-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadEquipmentMib.setRevisionsDescriptions(('Add cerCamFaultNotification.', 'Add cerLicenseTypeStr to the noLicenseNotification trap.', 'Modify list of allowed FPGA faults.', 'Change upper limit of cerCardDataAllowedPorts and cerCardDataLicensePorts from 1000 to 5000 and updated the range to all values between 0 and 5000.', 'Change cerCardDataRamSize units from bytes to megabytes.', 'Add cerSpareModeExtTable', 'Change upper limit of cerCardDataAllowedPorts and cerCardDataLicensePorts from 256 to 1000.', 'Remove CerCardSubType dcamOfdmAnnexB', 'rename dchannelVod to dchannelVideo in PortType', 'Support 384 downstream channels per DCAM-B', 'PortType change: remove dchannelSdv(13) and dchannelBroadcast(14)', 'Add new video channel types.', 'Add new SFP types.', 'Change units of Pem sensors to decivolts and deciamps', 'Change OID of cardTempOutOfRangeNotification to equipmentTraps.19', 'Remove patch control support.', 'Add cerCardDataPicModelName, cerCardDataPicMfgRevision, cerCardDataPicMfg, and cerCardDataPicMfgDateTime.', 'Modify no license notification to include additional information.', 'Set valid defaults for cerCardDataEntry.', 'Change syntax of cerCardDataMfgDateTime to DateAndTime.', 'Add additional patch control support.', 'Add initial patch support.', 'Add cerFanAmbientTemperature.', 'Remove cerPortMacIfIndex and change cerPortDocsIfIndex to ifIndex for noLicenseNotification.', 'Add noLicenseNotification.', 'Change cerCardTemperature, cerCardTemperatureHighWarn, cerCardTemperatureHighError from Celsius to value from 1 to 10', 'Add cerCardDataAllowedPorts.', 'Add cerCardDataFeedAPresent and cerCardDataFeedBPresent.', 'Add cerPemStatusEntry', 'Replace cerCardId with errEvCardId as the index in fpgaErrorEventEntry.', 'Move RSM admin ports.', 'Remove cardEntry, portEntry and diskVolumeEntry', 'Add more support for fans.', 'Add support for committed software versions.', 'Add initial fan support.', 'Add trap inhibit for card overload.', 'Incorporate new chassis structure.', 'Move card version information into a separate table.', 'Initial changes for E6.', 'Change syntax of cmIpAddress from IpAddress to OCTET STRING to handle IPv4 and v6.', 'Add restrictions on the size of some strings in card table.', 'Add shelf id back into trap messages.', 'Add ranges for allowable card temperatures.', 'Remove portGroupId since cable-mac replaced this MIB object. Add shelfNumber to portPrStateChange, portSecStateChange and portDplxStatusChange to match the variable binding list seen on trap monitor.', 'Additional support for disk sizes.', 'Initial support for MPM carrier cards.', 'Support various levels of temperature warnings.', 'Allowed Event Ids to range 0x00000000 to 0xFFFFFFFF for fpgaErrorEvent Table.', 'Add port flow control parameters and remove gbic support.', 'Remove cardSwBuildTime', 'Remove portMacPortId', 'Change syntax of portMacPortId from MacPortId to MacPortIdWithInvalid (65536 is invalid)', 'Add portMacPortId', 'Add additional variable-binding cmIpAddress cmRegistrationNotification', 'Add support for RCM module.', 'Add support for CM registration notification', 'Add downstream power loss notification.', 'Add last card reset reason to card table.', 'Add downstream power visibility to port table.', '(1) Add 2 additional variable-bindings to cmResetClearNotification. (2) Add 1 additional variable-binding to cmResetNotification.', 'Add preliminary support for customized FPGA error event handling.', 'Add cardSubType, portGroupId and portDocsIfIndex to C4 Port Primary and Secondary Trap.', '(1) Modify the TEXTUAL-CONVENTION of TestId. (2) Add diagTestId for cardTestResultNotification.', 'Added portDescription.', '(1) Add support for card temperature trap control. (2) Fix smidump error by changing diskVolumeFileName object mibtree', 'Add CmResetClear notification.', 'Add support for logical uchannel port type and preliminary support for extended gbic information.', 'Add preliminary pic support.', 'Add card detail support.', 'Replacing portGroupId with portCardSubType and renaming portDPortId to portGroupId.', 'Add card temperature monitoring.', 'Adding portDPortId and portConnectorId objects to portTable to support 2D12U CAM.', 'Revise audit entries. Add auditAutoScheduling and auditLogOutput control. Remove auditResultNotification', 'Add support for diskVolume', 'Undo previous change.', 'Make cardsubtype backward compatible.', 'Add support for cardFpgaToCpuSendRate.', 'Add support for cardSwBuildTime.', 'Add support for cardUpTime.', 'Add support for card detected trap.', 'Add support for card sparing.',))
if mibBuilder.loadTexts: cadEquipmentMib.setLastUpdated('201510060000Z')
if mibBuilder.loadTexts: cadEquipmentMib.setOrganization('ARRIS Group, Inc.')
if mibBuilder.loadTexts: cadEquipmentMib.setContactInfo('Arris Technical Support Phone: +1 630 281 3000 E-Mail: support@arris.com')
if mibBuilder.loadTexts: cadEquipmentMib.setDescription('This MIB is intended to describe all objects which are used to control and report on the state of an Arris E6 CMTS. These objects are used to perform the following functions on an Arris E6 CMTS: a) provision the cards, ports, and the CMTS itself b) run dianostic tests c) configure auditing parameters d) receive equipment-related traps ')
class TestId(TextualConvention, Integer32):
    description = ' Used as index to Test Tables. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100)

class TestType(TextualConvention, Integer32):
    description = " Indicates whether this is a 'Test', a 'Diagnostic', or unknown. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("test", 1), ("diagnostic", 2), ("unknown", 3))

class TestCommand(TextualConvention, Integer32):
    description = ' A set of commands applicable to this test. A value of noop will do nothing. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("noop", 1), ("stop", 2), ("disable", 3), ("enable", 4), ("runNow", 5))

class TestScheduleCommand(TextualConvention, Integer32):
    description = ' A set of periodic schedule command applicable to this test. This is used in conjunction with the TestSchedule and TestTime to specify the start time of the test. If the TestSchedule value is 0, then the test will be executed once at the time specified by the TestTime. For any other TestSchedule value, the test will be executed at time specified by the TestTime and repeated periodically base on the value specified by TestSchedule. A value of noop will do nothing. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noop", 1), ("disable", 2), ("enable", 3))

class TestSchedule(TextualConvention, Integer32):
    description = ' A set of scheduling interval option applicable to this test only if Schedule is selected. This is recommended for hardware routine exercise (REX). The value expresses in multiple of hours. For example: 1 hour interval, 24 hour interval, 48 hour interval. A value of 0 indicate no scheduling option for this test.'
    status = 'current'

class TestResult(TextualConvention, Integer32):
    description = ' Test Result. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("notRun", 1), ("inProgress", 2), ("pass", 3), ("fail", 4), ("inconclusive", 5), ("timeOut", 6), ("abort", 7))

class TestTransactionId(TextualConvention, Integer32):
    description = ' Transaction Id associated with a test or diagnostic. The EMS must populate the value of this object to be able to correlate the test sent and the result coming back. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class CerCamFaultTrapType(TextualConvention, Integer32):
    description = 'The types of CAM faults that will be logged and a trap sent.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(12))
    namedValues = NamedValues(("fpgaFatalError", 12))

equipmentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0))
systemGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1))
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: systemClock.setStatus('current')
if mibBuilder.loadTexts: systemClock.setDescription('CMTS local date and time displayed as yyyy-mm-dd,hh:mm:ss.d,+/-hh:mm, where the date is yyyy-mmmm-dd and time in deci-seconds is hh:mm:ss.d, adn teh current offset from GMT is +/-hh:mm. This object is adjusted by teh TZ and DST rules. E.g. 2002-5-26,13;30:15.0,-4:0')
trapCounter = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCounter.setStatus('current')
if mibBuilder.loadTexts: trapCounter.setDescription(' This is the trap sequence number that increments each time a trap is sent. It is persistent across resets. ')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("informational", 7))).clone('cleared')).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('current')
if mibBuilder.loadTexts: trapSeverity.setDescription(' Severity level of a Cadant trap. ')
systemKey = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemKey.setStatus('current')
if mibBuilder.loadTexts: systemKey.setDescription(" The systemKey is a unique string used for Candant's CMTS identification. The EMS uses this key string as well as the sysOid in the MIB-II system group MIB to identify Candant's CMTS's. ")
cardNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 98), CardId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cardNumber.setStatus('current')
if mibBuilder.loadTexts: cardNumber.setDescription(' Card Id used in traps. A value 99 indicates an invalid cardNumber. ')
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 99), PortId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: portNumber.setStatus('current')
if mibBuilder.loadTexts: portNumber.setDescription(' Port Id used in traps. A value of 99 indicates an invalid portNumber. ')
diskDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskDriveNumber.setStatus('current')
if mibBuilder.loadTexts: diskDriveNumber.setDescription(' Disk drive ID use in a Cadant trap. A value of 99 indicates an invalid diskDriveNumber')
diskVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(99)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diskVolumeNumber.setStatus('current')
if mibBuilder.loadTexts: diskVolumeNumber.setDescription(' Disk volume ID use in a Cadant trap. A value of 99 indicates an invalid diskVolumeNumber')
cerCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 200), CardId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCardNumber.setStatus('current')
if mibBuilder.loadTexts: cerCardNumber.setDescription(' Card Id used in traps. A value 0 indicates an invalid cardNumber. ')
cerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 201), PortId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerPortNumber.setStatus('current')
if mibBuilder.loadTexts: cerPortNumber.setDescription(' Port Id used in traps. A value of 0 indicates an invalid portNumber. ')
cerDiskDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 202), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerDiskDriveNumber.setStatus('current')
if mibBuilder.loadTexts: cerDiskDriveNumber.setDescription(' Disk drive ID use in a Cadant trap. A value of 0 indicates an invalid diskDriveNumber')
cerDiskVolumeNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 1, 203), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerDiskVolumeNumber.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeNumber.setDescription(' Disk volume ID use in a Cadant trap. A value of 0 indicates an invalid diskVolumeNumber')
shelfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2))
shelfName = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 2), DisplayString().clone('Arris CER CMTS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shelfName.setStatus('current')
if mibBuilder.loadTexts: shelfName.setDescription(' A string that represents the name of this machine and may uniquely identify it from other network devices. ')
shelfSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSwVersion.setStatus('current')
if mibBuilder.loadTexts: shelfSwVersion.setDescription('The software version currently executing.')
equipmentState = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3))
cardLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: cardLastChangeTime.setDescription('The value of sysUpTime at the time any of the objects in cardTable last changed. ')
portLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: portLastChangeTime.setDescription('The value of sysUpTime at the time any of the objects in portTable last changed. ')
equipmentTbl = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4))
cerCardTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12), )
if mibBuilder.loadTexts: cerCardTable.setStatus('current')
if mibBuilder.loadTexts: cerCardTable.setDescription('A table of card or circuit pack information.')
cerCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerCardId"))
if mibBuilder.loadTexts: cerCardEntry.setStatus('current')
if mibBuilder.loadTexts: cerCardEntry.setDescription('A conceptual row containing pertinent information about a card or a circuit pack. ')
cerCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 2), CardId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCardId.setStatus('current')
if mibBuilder.loadTexts: cerCardId.setDescription('The unique id of this card within the shelf. The convention of cardId is as follows: - Indices from 1 to 50 [1 - 50] are reserved for Circuit Packs. In this case, the cardId is 1 plus the 0-based slot number. - Indices from 51 to 98 [51 - 98] are reserved for Auxilliary Devices in within a shelf. Auxilliary Devices or Modules could be Fan Module, Power Module. In this case, the cerCardName and cerCardType indentify the Auxilliary Devices. Not all of row attributes are applicable for Auxilliary Devices. ')
cerCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardName.setStatus('current')
if mibBuilder.loadTexts: cerCardName.setDescription(' This is the name of the card, if it has one. ')
cerCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 4), CerCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardType.setStatus('current')
if mibBuilder.loadTexts: cerCardType.setDescription(" The type of card, if any. For example Ecard, Fcard, Dcard or Ucard If the slot is empty, the value would be 'empty'. ")
cerCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 5), CerCardSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardSubType.setStatus('current')
if mibBuilder.loadTexts: cerCardSubType.setDescription(" The cardType alone may not be specific enough to fully describe the type of card that is in this slot. For example, a card type of Dcard might have a more specific type of 1D8U with integrated upconverter. If the card needs no further specificication that the cardType, then the value of cardSubType is 'none'. Not yet implemented. ")
cerCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 12), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardAdminState.setStatus('current')
if mibBuilder.loadTexts: cerCardAdminState.setDescription(' This is the administrative state of this card. ')
cerCardPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 13), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardPrState.setStatus('current')
if mibBuilder.loadTexts: cerCardPrState.setDescription(' This is the primary state of this card. ')
cerCardSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 14), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardSecState.setStatus('current')
if mibBuilder.loadTexts: cerCardSecState.setDescription(' This is the secondary state of this card. ')
cerCardDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 15), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDplxStatus.setStatus('current')
if mibBuilder.loadTexts: cerCardDplxStatus.setDescription(' This is the duplexing status of this card. ')
cerCardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 17), EqActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardAction.setStatus('current')
if mibBuilder.loadTexts: cerCardAction.setDescription(' Write-only action performed on this card. ')
cerCardTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 18), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("detected", 3), ("tempoutofrange", 4), ("tempnoreport", 5), ("tempoverheat", 6), ("overload", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardTrapInh.setStatus('current')
if mibBuilder.loadTexts: cerCardTrapInh.setDescription(' If a bit is set, the corresponding state change trap will not be sent. ')
cerCardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardNumPorts.setStatus('current')
if mibBuilder.loadTexts: cerCardNumPorts.setDescription(' Number of ports this card contains. ')
cerCardDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 20), CerCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDetected.setStatus('current')
if mibBuilder.loadTexts: cerCardDetected.setDescription(' CardType dectected automatically by the CMTS. ')
cerCardSubDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 21), CerCardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardSubDetected.setStatus('current')
if mibBuilder.loadTexts: cerCardSubDetected.setDescription(' CardSubType dectected automatically by the CMTS. ')
cerCardFwUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 23), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardFwUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cerCardFwUpdateStatus.setDescription(' Set to TRUE if a firmware update is in progress or has been done, else set to FALSE. ')
cerCardSpareGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 24), CardId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardSpareGroupId.setStatus('current')
if mibBuilder.loadTexts: cerCardSpareGroupId.setDescription(' The cardId of the spare group leader for this sparing group. This value will be set to the invalid card id for all cards not associated with a sparing group. ')
cerCardSpareGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardSpareGroupMode.setStatus('current')
if mibBuilder.loadTexts: cerCardSpareGroupMode.setDescription(' The admin mode of the spare group leader for this sparing group. This value will be set to the invalid card id for all cards not associated with a sparing group. ')
cerCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 26), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardUpTime.setStatus('current')
if mibBuilder.loadTexts: cerCardUpTime.setDescription(' The value of sysUpTime when the primary state for this card made a transition from OOS to IS. ')
cerCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(999, 999), )).clone(999)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardTemperature.setStatus('current')
if mibBuilder.loadTexts: cerCardTemperature.setDescription(' The current relative temperature of the card. (1=coolest, 10=hottest)')
cerCardPicDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 40), CerPicType().clone('invalid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardPicDetected.setStatus('current')
if mibBuilder.loadTexts: cerCardPicDetected.setDescription(' The type of PIC detected in this slot. ')
cerCardLastResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardLastResetReason.setStatus('current')
if mibBuilder.loadTexts: cerCardLastResetReason.setDescription(' The reason for the latest card recovery. ')
cerCardTemperatureHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 44), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardTemperatureHighWarn.setStatus('current')
if mibBuilder.loadTexts: cerCardTemperatureHighWarn.setDescription(' The relative temperature of the card at which warnings are generated. ')
cerCardTemperatureHighError = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 45), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerCardTemperatureHighError.setStatus('current')
if mibBuilder.loadTexts: cerCardTemperatureHighError.setDescription(' The relative temperature of the card at which recoveries are initiated. ')
cerCardAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardAnnex.setStatus('current')
if mibBuilder.loadTexts: cerCardAnnex.setDescription(' The annex of the downstream channels associated with the card.')
cerCardNumRfConnectors = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 12, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardNumRfConnectors.setStatus('current')
if mibBuilder.loadTexts: cerCardNumRfConnectors.setDescription(' Number of RF ports this card contains. ')
cerCardDataTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16), )
if mibBuilder.loadTexts: cerCardDataTable.setStatus('current')
if mibBuilder.loadTexts: cerCardDataTable.setDescription('This table shows the contains version information for the modules installed.')
cerCardDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1), )
cerCardEntry.registerAugmentions(("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataEntry"))
cerCardDataEntry.setIndexNames(*cerCardEntry.getIndexNames())
if mibBuilder.loadTexts: cerCardDataEntry.setStatus('current')
if mibBuilder.loadTexts: cerCardDataEntry.setDescription('A conceptual row containing pertinent information about a card or a circuit pack. ')
cerCardDataSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataSerialNum.setStatus('current')
if mibBuilder.loadTexts: cerCardDataSerialNum.setDescription(' This is the serial number of the card. ')
cerCardDataFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataFwVersion.setStatus('current')
if mibBuilder.loadTexts: cerCardDataFwVersion.setDescription(' This is the firmware or FPGA version number of the card. ')
cerCardDataHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataHwVersion.setStatus('current')
if mibBuilder.loadTexts: cerCardDataHwVersion.setDescription(' This is the hardware version of the card. ')
cerCardDataHwDeviations = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataHwDeviations.setStatus('current')
if mibBuilder.loadTexts: cerCardDataHwDeviations.setDescription(' This is the set of hardware deviations for the card. ')
cerCardDataSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataSwVersion.setStatus('current')
if mibBuilder.loadTexts: cerCardDataSwVersion.setDescription(' This is the software version of the card. ')
cerCardDataCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataCpuType.setStatus('current')
if mibBuilder.loadTexts: cerCardDataCpuType.setDescription(' The current CPU type of the card. ')
cerCardDataCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 7), Unsigned32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataCpuSpeed.setStatus('current')
if mibBuilder.loadTexts: cerCardDataCpuSpeed.setDescription(' The current CPU speed of the card. ')
cerCardDataBusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 8), Unsigned32()).setUnits('hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataBusSpeed.setStatus('current')
if mibBuilder.loadTexts: cerCardDataBusSpeed.setDescription(' The current bus speed of the card. ')
cerCardDataRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 9), Unsigned32()).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataRamSize.setStatus('current')
if mibBuilder.loadTexts: cerCardDataRamSize.setDescription(' The current size of installed RAM of the card. ')
cerCardDataNorFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 10), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataNorFlashSize.setStatus('current')
if mibBuilder.loadTexts: cerCardDataNorFlashSize.setDescription(' The current size of installed FLASH of the card. ')
cerCardDataNandFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 11), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataNandFlashSize.setStatus('current')
if mibBuilder.loadTexts: cerCardDataNandFlashSize.setDescription(' The current size of installed FLASH of the card. ')
cerCardDataFpgaSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 12), FirmwareSource().clone('committed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataFpgaSource.setStatus('current')
if mibBuilder.loadTexts: cerCardDataFpgaSource.setDescription(' The source of the running version of the FPGAs on the card. ')
cerCardDataBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataBootVersion.setStatus('current')
if mibBuilder.loadTexts: cerCardDataBootVersion.setDescription(' The current versions of the boot loaders installed on the card. ')
cerCardDataLastBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLastBootVersion.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLastBootVersion.setDescription(' The last version of the boot loader used on the card. ')
cerCardDataLastBootSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 15), FirmwareSource().clone('boot1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLastBootSource.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLastBootSource.setDescription(' The source of the version of the bootloader last used on the card. ')
cerCardDataPicSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicSerialNum.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPicSerialNum.setDescription(' This is the serial number of the PIC. ')
cerCardDataPicHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicHwVersion.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPicHwVersion.setDescription(' This is the hardware version of the PIC. ')
cerCardDataPicHwDeviations = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicHwDeviations.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPicHwDeviations.setDescription(' This is the set of hardware deviations for the PIC. ')
cerCardDataPicModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicModelNum.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPicModelNum.setDescription(' This is the model number of the PIC. ')
cerCardDataMfgDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 20), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataMfgDateTime.setStatus('current')
if mibBuilder.loadTexts: cerCardDataMfgDateTime.setDescription(" Date of the module's manufacture (FRU). ")
cerCardDataMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataMfg.setStatus('current')
if mibBuilder.loadTexts: cerCardDataMfg.setDescription(' Name of the manufacturer (FRU). ')
cerCardDataProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataProductName.setStatus('current')
if mibBuilder.loadTexts: cerCardDataProductName.setDescription(' Name of the product (FRU). ')
cerCardDataPartModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPartModelNum.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPartModelNum.setDescription(' Name of the model of this product (FRU). ')
cerCardDataProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataProductVersion.setStatus('current')
if mibBuilder.loadTexts: cerCardDataProductVersion.setDescription(' Version of the model of this product (FRU). ')
cerCardDataAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataAssetTag.setStatus('current')
if mibBuilder.loadTexts: cerCardDataAssetTag.setDescription(' Asset tag of this part (FRU). ')
cerCardDataCommittedSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataCommittedSwVersion.setStatus('current')
if mibBuilder.loadTexts: cerCardDataCommittedSwVersion.setDescription(' This is the software version of the card. ')
cerCardDataFeedAPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 27), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataFeedAPresent.setStatus('current')
if mibBuilder.loadTexts: cerCardDataFeedAPresent.setDescription(' This object indicates whether power feed A is present or not. ')
cerCardDataFeedBPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 28), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataFeedBPresent.setStatus('current')
if mibBuilder.loadTexts: cerCardDataFeedBPresent.setDescription(' This object indicates whether power feed B is present or not. ')
cerCardDataAllowedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataAllowedPorts.setStatus('current')
if mibBuilder.loadTexts: cerCardDataAllowedPorts.setDescription(' This object indicates the allowed number of licensed ports.')
cerCardDataLicenseAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLicenseAnnex.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicenseAnnex.setDescription(' This object shows the annex associated with the license.')
cerCardDataLicensePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLicensePorts.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicensePorts.setDescription(' This object indicates the number of ports associated with the license.')
cerCardDataLicenseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 32), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataLicenseDate.setStatus('current')
if mibBuilder.loadTexts: cerCardDataLicenseDate.setDescription(' This object indicates the date associated with the license.')
cerCardDataPatchVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 33), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPatchVersions.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPatchVersions.setDescription(' This is the patch version(s) running on the card. ')
cerCardDataPicModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 34), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicModelName.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPicModelName.setDescription(' This is the model name of the PIC. ')
cerCardDataPicMfgRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicMfgRevision.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPicMfgRevision.setDescription(' This is the manufacture revision of the PIC. ')
cerCardDataPicMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicMfg.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPicMfg.setDescription(' This is the manufacturer of the PIC. ')
cerCardDataPicMfgDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 16, 1, 37), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerCardDataPicMfgDateTime.setStatus('current')
if mibBuilder.loadTexts: cerCardDataPicMfgDateTime.setDescription(' This object indicates the date associated with the PIC.')
cerPortTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13), )
if mibBuilder.loadTexts: cerPortTable.setStatus('current')
if mibBuilder.loadTexts: cerPortTable.setDescription('A table of Port information.')
cerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cerPortId"))
if mibBuilder.loadTexts: cerPortEntry.setStatus('current')
if mibBuilder.loadTexts: cerPortEntry.setDescription('A conceptual row containing pertinent information about a cerPort owned by a card.')
cerPortCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 2), CardId())
if mibBuilder.loadTexts: cerPortCardId.setStatus('current')
if mibBuilder.loadTexts: cerPortCardId.setDescription('The unique id of the card this cerPort belongs to.')
cerPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 3), PortId())
if mibBuilder.loadTexts: cerPortId.setStatus('current')
if mibBuilder.loadTexts: cerPortId.setDescription('The unique id of this cerPort within a card. the the cardId and cerPortId uniquely identify a port ')
cerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 4), CerPortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortType.setStatus('current')
if mibBuilder.loadTexts: cerPortType.setDescription(' Type of this cerPort. ')
cerPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 6), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortAdminState.setStatus('current')
if mibBuilder.loadTexts: cerPortAdminState.setDescription('The Admin state of this cerPort')
cerPortPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 7), PrimaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortPrState.setStatus('current')
if mibBuilder.loadTexts: cerPortPrState.setDescription('The primary state of this cerPort')
cerPortSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 8), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortSecState.setStatus('current')
if mibBuilder.loadTexts: cerPortSecState.setDescription('The secondary state of this cerPort')
cerPortDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 9), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortDplxStatus.setStatus('current')
if mibBuilder.loadTexts: cerPortDplxStatus.setDescription('The port Duplexing status.')
cerPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 11), EqActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortAction.setStatus('current')
if mibBuilder.loadTexts: cerPortAction.setDescription(' Write-only action performed on a Port. ')
cerPortTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 12), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("linkUpLinkDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortTrapInh.setStatus('current')
if mibBuilder.loadTexts: cerPortTrapInh.setDescription(' If a bit is set, the corresponding state change trap will not be sent. ')
cerPortNumChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortNumChans.setStatus('current')
if mibBuilder.loadTexts: cerPortNumChans.setDescription(' Number of channels this cerPort contains. ')
cerPortDocsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 14), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortDocsIfIndex.setStatus('current')
if mibBuilder.loadTexts: cerPortDocsIfIndex.setDescription(' This object indicates the location of an interface in the cerPort table that represents this port. A value of 0 indicates that this cerPort does not have an association in the Iftable. ')
cerPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: cerPortMacAddress.setDescription(' The physical address value for this card. This value is used to populate the ifPhysAddress field in the IfTable and other Tables in docsis RFC MIBs.')
cerPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 16), PortMode().clone('autoNegotiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortMode.setStatus('current')
if mibBuilder.loadTexts: cerPortMode.setDescription(' The desired operating mode of an ethernet cerPort. Not yet implemented. ')
cerPortDetectedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 17), PortDetectedMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortDetectedMode.setStatus('current')
if mibBuilder.loadTexts: cerPortDetectedMode.setDescription(' The current operating mode of an ethernet cerPort. ')
cerPortBgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortBgpId.setStatus('current')
if mibBuilder.loadTexts: cerPortBgpId.setDescription(' The bridge group cerPort id for this port. ')
cerPortConnectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 20), PortId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortConnectorId.setStatus('current')
if mibBuilder.loadTexts: cerPortConnectorId.setDescription(' For a DOCSIS or EQAM type port, this is the rear PIC connector. Otherwise, the value of this object is invalid.')
cerPortCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 21), CerCardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortCardSubType.setStatus('current')
if mibBuilder.loadTexts: cerPortCardSubType.setDescription(' The CardSubType of the card this cerPort belongs to.')
cerPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortDescription.setStatus('current')
if mibBuilder.loadTexts: cerPortDescription.setDescription(' A persistent copy of ifAlias for this interface.')
cerPortCurrDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 28), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortCurrDsPower.setStatus('current')
if mibBuilder.loadTexts: cerPortCurrDsPower.setDescription(' The latest downstream power level reported by the port. This is valid on for ports of type dport.')
cerPortMinDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 29), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortMinDsPower.setStatus('current')
if mibBuilder.loadTexts: cerPortMinDsPower.setDescription(' The latest downstream power level recerPorted by the port. This is valid only for downstream ports.')
cerPortMaxDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 30), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortMaxDsPower.setStatus('current')
if mibBuilder.loadTexts: cerPortMaxDsPower.setDescription(' The latest downstream power level recerPorted by the port. This is valid only for downstream ports.')
cerPortTxFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 31), FlowControlMode().clone('desired')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortTxFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: cerPortTxFlowControlMode.setDescription(' The transmit flow control settings for this port (network ports only).')
cerPortRxFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 32), FlowControlMode().clone('desired')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerPortRxFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: cerPortRxFlowControlMode.setDescription(' The receive flow control settings for this port (network ports only).')
cerPortTxFlowControlDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 33), FlowControlMode().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortTxFlowControlDetected.setStatus('current')
if mibBuilder.loadTexts: cerPortTxFlowControlDetected.setDescription(' The recerPorted transmit flow control settings for this port (network ports only).')
cerPortRxFlowControlDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 34), FlowControlMode().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortRxFlowControlDetected.setStatus('current')
if mibBuilder.loadTexts: cerPortRxFlowControlDetected.setDescription(' The recerPorted receive flow control settings for this port (network ports only).')
cerPortMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 35), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: cerPortMacIfIndex.setDescription(' The MAC IfIndex currently associcated with the upstream or downstream port.')
cerPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 36), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortGroupId.setStatus('current')
if mibBuilder.loadTexts: cerPortGroupId.setDescription('The unique id of port group associated with this port.')
cerPortGroupPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 13, 1, 37), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPortGroupPortId.setStatus('current')
if mibBuilder.loadTexts: cerPortGroupPortId.setDescription('The unique id of this port in the port group.')
cerDiskVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14), )
if mibBuilder.loadTexts: cerDiskVolumeTable.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeTable.setDescription('A table of disk volume information.')
cerDiskVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeDriveId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeId"))
if mibBuilder.loadTexts: cerDiskVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeEntry.setDescription('A conceptual row containing pertinent information about a disk volume ')
cerDiskVolumeCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 2), CardId())
if mibBuilder.loadTexts: cerDiskVolumeCardId.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeCardId.setDescription('The unique id of the card this disk volume belongs to.')
cerDiskVolumeDriveId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: cerDiskVolumeDriveId.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeDriveId.setDescription('The unique id of the disk drive this disk volume belongs to. A value of 99 indicates an invalid disk drive')
cerDiskVolumeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: cerDiskVolumeId.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeId.setDescription('The unique id of this disk volume. the cerDiskVolumeCardId, the diskVolumeDiskId, and the. A value of 99 indicate an invalid volume ')
cerDiskVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeName.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeName.setDescription('The name of the disk volume.')
cerDiskVolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 6), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeSize.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeSize.setDescription('The disk volume size in units of 2048 bytes.')
cerDiskVolumeUsageLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 7), DiskVolumeUsageLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeUsageLevel.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeUsageLevel.setDescription('The disk volume usage level.')
cerDiskVolumeUsagePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeUsagePercentage.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeUsagePercentage.setDescription('The disk volume usage percentage.')
cerDiskVolumeUsageCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeUsageCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeUsageCriticalThreshold.setDescription('Usage percentage level when exceed will cause a cerDiskVolumeUsageNotification trap to be sent with cerDiskVolumeUsageLevel of diskVolumeUsageCritical.')
cerDiskVolumeUsageMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeUsageMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeUsageMajorThreshold.setDescription('Usage percentage level when exceed will cause a cerDiskVolumeUsageNotification trap to be sent with cerDiskVolumeUsageLevel of diskVolumeUsageMajor.')
cerDiskVolumeUsageMinorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeUsageMinorThreshold.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeUsageMinorThreshold.setDescription('Usage percentage level when exceed will cause a cerDiskVolumeUsageNotification trap to be sent with cerDiskVolumeUsageLevel of diskVolumeUsageMinor.')
cerDiskVolumeAutoDeleteUnusedFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeAutoDeleteUnusedFile.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeAutoDeleteUnusedFile.setDescription('When set to TRUE to the system will automatically delete unused files when cerDiskVolumeUsage exceed the cerDiskVolumeUsageCriticalThreshold value.')
cerDiskVolumeTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 13), Bits().clone(namedValues=NamedValues(("criticalUsageLevel", 0), ("majorUsageLevel", 1), ("minorUsageLevel", 2), ("autoDeleteFiles", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerDiskVolumeTrapInh.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeTrapInh.setDescription('If a bit is set, the corresponding trap will not be sent. ')
cerDiskVolumeDiskSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 14, 1, 14), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerDiskVolumeDiskSize.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeDiskSize.setDescription('Total physical disk capacity in bytes.')
cerDiskVolumeFileName = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerDiskVolumeFileName.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeFileName.setDescription('The name of a file on the disk volume use for trap notification.')
cerFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17), )
if mibBuilder.loadTexts: cerFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: cerFanStatusTable.setDescription('Status information for the E6 fans.')
cerFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerCardId"))
if mibBuilder.loadTexts: cerFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cerFanStatusEntry.setDescription('A conceptual row containing information about one of the fans.')
cerFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFan1Speed.setStatus('current')
if mibBuilder.loadTexts: cerFan1Speed.setDescription('The last measured speed of fan1.')
cerFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFan2Speed.setStatus('current')
if mibBuilder.loadTexts: cerFan2Speed.setDescription('The last measured speed of fan2.')
cerFan3Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFan3Speed.setStatus('current')
if mibBuilder.loadTexts: cerFan3Speed.setDescription('The last measured speed of fan3.')
cerFanLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFanLevel.setStatus('current')
if mibBuilder.loadTexts: cerFanLevel.setDescription('The last measured speed level of fans.')
cerFanAmbientTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 17, 1, 5), Integer32()).setUnits('degrees C').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerFanAmbientTemperature.setStatus('current')
if mibBuilder.loadTexts: cerFanAmbientTemperature.setDescription('The last measured ambient temperature of fans.')
cerPemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18), )
if mibBuilder.loadTexts: cerPemStatusTable.setStatus('current')
if mibBuilder.loadTexts: cerPemStatusTable.setDescription('PEM Status information for the E6 power modules.')
cerPemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerCardId"))
if mibBuilder.loadTexts: cerPemStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cerPemStatusEntry.setDescription('A conceptual row containing information about one of the power modules.')
cerPemLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemLedStatus.setStatus('current')
if mibBuilder.loadTexts: cerPemLedStatus.setDescription('LED status of the PEM')
cerPemFeed1Voltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 2), Integer32()).setUnits('decivolt').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed1Voltage.setStatus('current')
if mibBuilder.loadTexts: cerPemFeed1Voltage.setDescription('Feed 1 voltage')
cerPemFeed1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 3), Integer32()).setUnits('deciiamp').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed1Current.setStatus('current')
if mibBuilder.loadTexts: cerPemFeed1Current.setDescription('Feed 1 current')
cerPemFeed2Voltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 4), Integer32()).setUnits('decivolt').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed2Voltage.setStatus('current')
if mibBuilder.loadTexts: cerPemFeed2Voltage.setDescription('Feed 2 voltage')
cerPemFeed2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 5), Integer32()).setUnits('deciamp').setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed2Current.setStatus('current')
if mibBuilder.loadTexts: cerPemFeed2Current.setDescription('Feed 2 current')
cerPemFeed1Present = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed1Present.setStatus('current')
if mibBuilder.loadTexts: cerPemFeed1Present.setDescription('Feed 1 presence')
cerPemFeed2Present = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemFeed2Present.setStatus('current')
if mibBuilder.loadTexts: cerPemFeed2Present.setDescription('Feed 2 presence')
cerPemCircuitBreaker1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemCircuitBreaker1Enable.setStatus('current')
if mibBuilder.loadTexts: cerPemCircuitBreaker1Enable.setDescription('circuit breaker 1 presence')
cerPemCircuitBreaker2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemCircuitBreaker2Enable.setStatus('current')
if mibBuilder.loadTexts: cerPemCircuitBreaker2Enable.setDescription('circuit breaker 2 presence')
cerPemBranchPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 4, 18, 1, 10), Bits().clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3), ("e", 4), ("f", 5), ("g", 6), ("h", 7), ("i", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerPemBranchPresent.setStatus('current')
if mibBuilder.loadTexts: cerPemBranchPresent.setDescription('brach A through I presence')
equipmentDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5))
eqDiagConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1))
remainInDiagMode = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remainInDiagMode.setStatus('current')
if mibBuilder.loadTexts: remainInDiagMode.setDescription('When set to TRUE, the device being diagnosed will remain in diagnostic state when the diagnostic test is completed. When set to FALSE, the device will revert to its original state when the diagnostic test is completed.')
consoleOutput = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 2), TruthValue().clone('false'))
if mibBuilder.loadTexts: consoleOutput.setStatus('obsolete')
if mibBuilder.loadTexts: consoleOutput.setDescription('If true then the diagnostic result will be displayed on the system console. ')
verboseLevel = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verboseLevel.setStatus('current')
if mibBuilder.loadTexts: verboseLevel.setDescription('Verbose output level for diagnostic console output display. Higher number indicate more detailed output.')
diagTestId = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 2), TestId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: diagTestId.setStatus('current')
if mibBuilder.loadTexts: diagTestId.setDescription(' Test Identification Number. Used in cardTestResultNotification variable-binding')
cardTestTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3), )
if mibBuilder.loadTexts: cardTestTable.setStatus('current')
if mibBuilder.loadTexts: cardTestTable.setDescription('A table of test available for a card. ')
cardTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cardTestIndex"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cardTestId"))
if mibBuilder.loadTexts: cardTestEntry.setStatus('current')
if mibBuilder.loadTexts: cardTestEntry.setDescription('A conceptual row containing information about tests or dignostics available for a card. ')
cardTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 2), CardId())
if mibBuilder.loadTexts: cardTestIndex.setStatus('current')
if mibBuilder.loadTexts: cardTestIndex.setDescription(' Card Identification Number taken from the CardTable. Used as index. ')
cardTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 3), TestId())
if mibBuilder.loadTexts: cardTestId.setStatus('current')
if mibBuilder.loadTexts: cardTestId.setDescription(' Test Identification Number. Used as index to test table ')
cardTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestName.setStatus('current')
if mibBuilder.loadTexts: cardTestName.setDescription(' A unique name for this test.')
cardTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 5), TestType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestType.setStatus('current')
if mibBuilder.loadTexts: cardTestType.setDescription(' Test Type.')
cardTestDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestDescription.setStatus('current')
if mibBuilder.loadTexts: cardTestDescription.setDescription(' A short description of the test. ')
cardTestCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 7), TestCommand().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestCommand.setStatus('current')
if mibBuilder.loadTexts: cardTestCommand.setDescription(' Command to be execute this test on this shelf ')
cardTestScheduleCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 8), TestScheduleCommand().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestScheduleCommand.setStatus('current')
if mibBuilder.loadTexts: cardTestScheduleCommand.setDescription(' Schedule Command to be execute this test on this shelf ')
cardTestSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 9), TestSchedule()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestSchedule.setStatus('current')
if mibBuilder.loadTexts: cardTestSchedule.setDescription(' Test Scheduling. ')
cardTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 10), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestTime.setStatus('current')
if mibBuilder.loadTexts: cardTestTime.setDescription(' Test start time. ')
cardTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 11), TestResult().clone('notRun')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestResult.setStatus('current')
if mibBuilder.loadTexts: cardTestResult.setDescription(' Result of the test. ')
cardTestResultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardTestResultDesc.setStatus('current')
if mibBuilder.loadTexts: cardTestResultDesc.setDescription('Additional information of the test result. ')
cardTestTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 5, 3, 1, 13), TestTransactionId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardTestTransId.setStatus('current')
if mibBuilder.loadTexts: cardTestTransId.setDescription(' Test transaction Id. ')
equipmentAudit = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6))
auditAutoScheduling = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditAutoScheduling.setStatus('current')
if mibBuilder.loadTexts: auditAutoScheduling.setDescription(' Enable or disable automatic audit execution. ')
auditLogOutput = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogOutput.setStatus('current')
if mibBuilder.loadTexts: auditLogOutput.setDescription(' Enable or disable logging of error entries to system log. ')
auditLogThrottle = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditLogThrottle.setStatus('current')
if mibBuilder.loadTexts: auditLogThrottle.setDescription(' Enable or disable audit log output throttling to prevent audit errors from flooding the log. ')
auditTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4), )
if mibBuilder.loadTexts: auditTable.setStatus('current')
if mibBuilder.loadTexts: auditTable.setDescription('A table of test available for a card. ')
auditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "auditCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "auditId"))
if mibBuilder.loadTexts: auditEntry.setStatus('current')
if mibBuilder.loadTexts: auditEntry.setDescription(' A conceptual row contains information about Audits. ')
auditCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 2), CardId())
if mibBuilder.loadTexts: auditCardId.setStatus('current')
if mibBuilder.loadTexts: auditCardId.setDescription(' Card Identification Number taken from the CardTable. Used as index. ')
auditId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: auditId.setStatus('current')
if mibBuilder.loadTexts: auditId.setDescription(' Unique ID of the internal Audit ')
auditName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditName.setStatus('current')
if mibBuilder.loadTexts: auditName.setDescription(' Name of the internal Audit ')
auditDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditDescription.setStatus('current')
if mibBuilder.loadTexts: auditDescription.setDescription('Description of the Audit ')
auditTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTime.setStatus('current')
if mibBuilder.loadTexts: auditTime.setDescription(' Start time of the audit. ')
auditCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("runnow", 4))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditCommand.setStatus('current')
if mibBuilder.loadTexts: auditCommand.setDescription(' Audit Commands. The runnow command will stop the currently running audit sequence and start executing requested audit immediated. If enabled, automatic audit schedule will be restarted.')
auditStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditStatus.setStatus('current')
if mibBuilder.loadTexts: auditStatus.setDescription(' Audit status. ')
auditResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("abort", 4), ("notRun", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditResult.setStatus('current')
if mibBuilder.loadTexts: auditResult.setDescription(' Audit Result. ')
auditPassedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditPassedCount.setStatus('current')
if mibBuilder.loadTexts: auditPassedCount.setDescription(' Number of passed entry during previous audit run. ')
auditFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditFailedCount.setStatus('current')
if mibBuilder.loadTexts: auditFailedCount.setDescription(' Number of failed entry during previous audit run. ')
auditCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditCycleCount.setStatus('current')
if mibBuilder.loadTexts: auditCycleCount.setDescription(' Number of audit run completed. ')
auditTotalPassedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTotalPassedCount.setStatus('current')
if mibBuilder.loadTexts: auditTotalPassedCount.setDescription(' Number of cumulative passed entry of all audit runs. ')
auditTotalFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 6, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTotalFailedCount.setStatus('current')
if mibBuilder.loadTexts: auditTotalFailedCount.setDescription(' Number of cumulative failed entry of all audit runs. ')
cmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8))
cmMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmMacAddress.setDescription('The MAC address for the cable modem')
cmVendor = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmVendor.setStatus('current')
if mibBuilder.loadTexts: cmVendor.setDescription('The vendor name of the cable modem')
cmResetReason = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetReason.setStatus('current')
if mibBuilder.loadTexts: cmResetReason.setDescription('The reason for the cable modem to reset')
cmUChannelID = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmUChannelID.setStatus('current')
if mibBuilder.loadTexts: cmUChannelID.setDescription('The CMTS upstream channel ID which is connected to the cable modem')
cmPrimarySID = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmPrimarySID.setStatus('current')
if mibBuilder.loadTexts: cmPrimarySID.setDescription('The primary Service Identifier (SID) assigned by the CMTS associated with the cable modem')
cmResetStatus = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetStatus.setStatus('current')
if mibBuilder.loadTexts: cmResetStatus.setDescription('The cable modem status before it resets')
cmResetUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 7), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetUpTime.setStatus('current')
if mibBuilder.loadTexts: cmResetUpTime.setDescription('This value indicates how long in hundreds of seconds the cable modem is up since it is initial ranged')
cmResetInfo = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmResetInfo.setStatus('current')
if mibBuilder.loadTexts: cmResetInfo.setDescription('The additional information for the cable modem to reset')
cmIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 8, 9), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmIpAddress.setDescription('The IP Address of the cable modem')
equipmentError = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9))
fpgaErrorEventTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1), )
if mibBuilder.loadTexts: fpgaErrorEventTable.setStatus('current')
if mibBuilder.loadTexts: fpgaErrorEventTable.setDescription('Overrides default handling of FPGA error events.')
fpgaErrorEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "errEvCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "errEventId"))
if mibBuilder.loadTexts: fpgaErrorEventEntry.setStatus('current')
if mibBuilder.loadTexts: fpgaErrorEventEntry.setDescription('A conceptual row containing information about FPGA error event handling.')
errEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: errEventId.setStatus('current')
if mibBuilder.loadTexts: errEventId.setDescription(' Event ID associated with the FPGA error. A row in this table defines behavior for a specific FPGA error that overrides the default behavior of the system. ')
errEvRecoveryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvRecoveryEnabled.setStatus('current')
if mibBuilder.loadTexts: errEvRecoveryEnabled.setDescription(' If true, the card can be recovered when this FPGA error is detected. When the card is recovered depends on the setting of errEvRecoveryThreshold. If this value is false, the card will not be recovered when this error is detected. ')
errEvLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvLoggingEnabled.setStatus('current')
if mibBuilder.loadTexts: errEvLoggingEnabled.setDescription(' If true, the card will provide notification of the occurance of the this error. When the notification occurs is dependent on the setting of errEvLogThrottleThreshold. The severity of the notification is determined by the setting of errEvLogLevel. ')
errEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvLogLevel.setStatus('current')
if mibBuilder.loadTexts: errEvLogLevel.setDescription(' If errEvLoggingEnabled is true, this setting sets the severity level of the generated notification. In general, higher values indicate lower severity. ')
errEvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: errEvRowStatus.setStatus('current')
if mibBuilder.loadTexts: errEvRowStatus.setDescription(' The only set actions supported on this table are createAndGo(4) and destroy(6). ')
errEvCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 9, 1, 1, 6), CardId())
if mibBuilder.loadTexts: errEvCardId.setStatus('current')
if mibBuilder.loadTexts: errEvCardId.setDescription('The unique id of this card within the shelf. ')
cerSpareModeExt = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11))
cerSpareModeExtTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1), )
if mibBuilder.loadTexts: cerSpareModeExtTable.setStatus('current')
if mibBuilder.loadTexts: cerSpareModeExtTable.setDescription('Allows overriding the configured sparing mode for a spare group based on the fault type that caused the sparing event.')
cerSpareModeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1), ).setIndexNames((0, "CADANT-CMTS-EQUIPMENT-MIB", "cerSpareModeCardId"), (0, "CADANT-CMTS-EQUIPMENT-MIB", "cerSpareModeFaultId"))
if mibBuilder.loadTexts: cerSpareModeExtEntry.setStatus('current')
if mibBuilder.loadTexts: cerSpareModeExtEntry.setDescription('A conceptual row containing information about sparing overrides for a spare group.')
cerSpareModeCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1, 1), CardId())
if mibBuilder.loadTexts: cerSpareModeCardId.setStatus('current')
if mibBuilder.loadTexts: cerSpareModeCardId.setDescription('The cardId of the spare group leader for this override.')
cerSpareModeFaultId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("pingFault", 1), ("initTimeout", 2), ("ersmFault", 3), ("swException", 4), ("bcm3142Err", 5), ("dulFailure", 6), ("dataplaneFailure", 7), ("dsUnderPower", 8), ("dsOverPower", 9), ("sbecOverflow", 10), ("deviceFatal", 11), ("fpgaFatalError", 12), ("clockLost", 13), ("pwrSensorHighFault", 14), ("pwrSensorLowFault", 15), ("fpgaBufferPoolFault", 16), ("dataplaneLinkFault", 17), ("monitoredTaskFailure", 18))))
if mibBuilder.loadTexts: cerSpareModeFaultId.setStatus('current')
if mibBuilder.loadTexts: cerSpareModeFaultId.setDescription('The fault group associated with the override behavior. When an event occurs that would normally trigger a card reset and a sparing event and that event is in the configured fault group, the mode configured in the cerCard table is overriden. pingFault - Communications failure with active controller initTimeout - Timeout during card initialization ersmFault - Card ERSM failure swException - Software exception failure bcm3142Err - Upstream CAM PHY device fatal fault condition dulFailure - Upstream CAM periodic packet loop detected uncorrectable fault dataplaneFailrue - Fatal errors originating in dataplane processor dsUnderPower - Downstream CAM detected power on a connector is below operational threshold dsOverPower - Downstream CAM detected power on a connector is above operational threshold sbecOverflow - Excessive number of single bit ECC errors deviceFatal - General device fatal error. For example in internal datapaths or pci controller. fpgaFatalError - Fatal CRC errors detected in FPGA device clockLost - Loss of clock or loss of clock lock pwrSensorHighFault - Detected voltage is above operational threshold pwrSensorLowFault - Detected voltage is below operational threshold fpgaBufferPoolFault - Number of available buffers in MAC fpga is below threshold dataplaneLinkFault - Card has lost dataplane connectivity monitoredTaskFailure - Monitored software task has failed')
cerSpareModeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("manual", 1), ("auto", 2))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cerSpareModeMode.setStatus('current')
if mibBuilder.loadTexts: cerSpareModeMode.setDescription(' The sparing mode that should be enforced when an error in the configured catagory occurs that results in a sparing event.')
cerSpareModeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 11, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cerSpareModeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cerSpareModeRowStatus.setDescription(' The only set actions supported on this table are createAndGo(4) and destroy(6). ')
cadEquipmentMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10))
cadEquipmentMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 1))
cadEquipmentMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2))
licenseError = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 12))
cerLicenseTypeStr = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 12, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerLicenseTypeStr.setStatus('current')
if mibBuilder.loadTexts: cerLicenseTypeStr.setDescription('The license type that caused the notification.')
cerCardPrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 25)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardPrState"))
if mibBuilder.loadTexts: cerCardPrStateChange.setStatus('current')
if mibBuilder.loadTexts: cerCardPrStateChange.setDescription(" This trap is sent whenever the card's Primary state changes. ")
cerCardSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 26)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSecState"))
if mibBuilder.loadTexts: cerCardSecStateChange.setStatus('current')
if mibBuilder.loadTexts: cerCardSecStateChange.setDescription(" This trap is sent whenever the card's Secondary state changes. ")
cerCardDetectedChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 27)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubDetected"))
if mibBuilder.loadTexts: cerCardDetectedChange.setStatus('current')
if mibBuilder.loadTexts: cerCardDetectedChange.setDescription(' This trap is sent whenever a new card is detected. ')
cerCardDplxStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 28)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDplxStatus"))
if mibBuilder.loadTexts: cerCardDplxStatusChange.setStatus('current')
if mibBuilder.loadTexts: cerCardDplxStatusChange.setDescription(" This trap is sent whenever the card's Duplex status changes. ")
cerPortPrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 29)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDocsIfIndex"))
if mibBuilder.loadTexts: cerPortPrStateChange.setStatus('current')
if mibBuilder.loadTexts: cerPortPrStateChange.setDescription(" This trap is sent whenever the port's Primary state changes. ")
cerPortSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 30)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDocsIfIndex"))
if mibBuilder.loadTexts: cerPortSecStateChange.setStatus('current')
if mibBuilder.loadTexts: cerPortSecStateChange.setDescription(" This trap is sent whenever the port's Secondary state changes. ")
cerPortDplxStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 31)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDplxStatus"))
if mibBuilder.loadTexts: cerPortDplxStatusChange.setStatus('current')
if mibBuilder.loadTexts: cerPortDplxStatusChange.setDescription(" This trap is sent whenever the port's Duplex status changes. ")
cardTestResultNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 33)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "diagTestId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResultDesc"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTransId"))
if mibBuilder.loadTexts: cardTestResultNotification.setStatus('current')
if mibBuilder.loadTexts: cardTestResultNotification.setDescription(' This trap is sent when a test or diagnostic completed on a card. ')
cmResetClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 15)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"))
if mibBuilder.loadTexts: cmResetClearNotification.setStatus('current')
if mibBuilder.loadTexts: cmResetClearNotification.setDescription(' This trap is sent when a CM is on-line from previous flap.')
cmResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 16)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmVendor"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetReason"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmPrimarySID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetUpTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmResetInfo"))
if mibBuilder.loadTexts: cmResetNotification.setStatus('current')
if mibBuilder.loadTexts: cmResetNotification.setDescription(' This trap is sent when a CM is reset.')
cerDiskVolumeUsageNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 35)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskDriveNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageLevel"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeName"))
if mibBuilder.loadTexts: cerDiskVolumeUsageNotification.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeUsageNotification.setDescription('This trap is sent when a disk volume usage level exceed a disk usage threshold.')
cerDiskVolumeAutoDeleteFileNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 36)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskDriveNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeFileName"))
if mibBuilder.loadTexts: cerDiskVolumeAutoDeleteFileNotification.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeAutoDeleteFileNotification.setDescription('This trap is sent when a file is automatically deleted by the system in respond to disk volume usage exceed critical thresholh.')
cardTempOutOfRangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 19)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempOutOfRangeNotification.setStatus('current')
if mibBuilder.loadTexts: cardTempOutOfRangeNotification.setDescription('This trap is sent when the card temperature is out of range.')
cardTempNoReportNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 20)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempNoReportNotification.setStatus('current')
if mibBuilder.loadTexts: cardTempNoReportNotification.setDescription('This trap is sent when there is no reporting on card temperature.')
cardTempOverHeatNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 21)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"))
if mibBuilder.loadTexts: cardTempOverHeatNotification.setStatus('current')
if mibBuilder.loadTexts: cardTempOverHeatNotification.setDescription('This trap is sent when the card is overheat, card is being shut down.')
downstreamPowerLoss = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 22)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "portNumber"))
if mibBuilder.loadTexts: downstreamPowerLoss.setStatus('current')
if mibBuilder.loadTexts: downstreamPowerLoss.setDescription(' This trap is sent when c4 detects the loss of downstream power.')
cmRegistrationNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 23)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmVendor"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmUChannelID"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cmIpAddress"))
if mibBuilder.loadTexts: cmRegistrationNotification.setStatus('current')
if mibBuilder.loadTexts: cmRegistrationNotification.setDescription(' This trap is sent when a CM is registered.')
noLicenseNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 24)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDocsIfIndex"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerLicenseTypeStr"))
if mibBuilder.loadTexts: noLicenseNotification.setStatus('current')
if mibBuilder.loadTexts: noLicenseNotification.setDescription(' This trap is sent when a channel cannot be activated due to insufficient license level.')
cerCamFaultInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40))
cerCamFaultId = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40, 1), CerCamFaultTrapType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCamFaultId.setStatus('current')
if mibBuilder.loadTexts: cerCamFaultId.setDescription('Type of CAM fault trigging the trap.')
cerCamFaultRecovery = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCamFaultRecovery.setStatus('current')
if mibBuilder.loadTexts: cerCamFaultRecovery.setDescription('True if recovery for this event is enabled.')
cerCamFaultAutoFailback = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40, 3), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCamFaultAutoFailback.setStatus('current')
if mibBuilder.loadTexts: cerCamFaultAutoFailback.setDescription('True if autofailback is enabled and the maximum failbacks have not occurred.')
cerCamFaultErrorStr = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 40, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cerCamFaultErrorStr.setStatus('current')
if mibBuilder.loadTexts: cerCamFaultErrorStr.setDescription('Extra information about this error. Null string if no extra info.')
cerCamFaultNotification = NotificationType((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 0, 41)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCamFaultId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCamFaultRecovery"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCamFaultAutoFailback"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumber"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCamFaultErrorStr"))
if mibBuilder.loadTexts: cerCamFaultNotification.setStatus('current')
if mibBuilder.loadTexts: cerCamFaultNotification.setDescription('This trap is sent when a CAM has a fault of the specified type, even if fault recovery is inhibited for that fault type.')
systemGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 1)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "systemClock"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapCounter"), ("CADANT-CMTS-EQUIPMENT-MIB", "trapSeverity"), ("CADANT-CMTS-EQUIPMENT-MIB", "systemKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemGeneralGroup = systemGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: systemGeneralGroup.setDescription(' This group contains a collection of objects general to the overall system. ')
equipmentStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 2)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardLastChangeTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "portLastChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentStateGroup = equipmentStateGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentStateGroup.setDescription(' This group contains a collection of objects general to the state of the equipments. ')
equipmentShelfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 3)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "shelfName"), ("CADANT-CMTS-EQUIPMENT-MIB", "shelfSwVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentShelfGroup = equipmentShelfGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentShelfGroup.setDescription(' This group contains a collection of objects general specific to shelf objects. ')
equipmentCerCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 14)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cerCardName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardAdminState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDplxStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardAction"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumPorts"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSubDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardFwUpdateStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSpareGroupId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardSpareGroupMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardUpTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardTemperature"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardTemperatureHighWarn"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardTemperatureHighError"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardAnnex"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardNumRfConnectors"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataSerialNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataFwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataHwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataHwDeviations"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataSwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataCpuType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataCpuSpeed"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataBusSpeed"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataRamSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataNorFlashSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataNandFlashSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataFpgaSource"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataBootVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataLastBootVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataLastBootSource"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPicSerialNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPicHwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPicHwDeviations"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPicModelNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataMfgDateTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataMfg"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataProductName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataPartModelNum"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataProductVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataAssetTag"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataCommittedSwVersion"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataFeedAPresent"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataFeedBPresent"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerCardDataAllowedPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCerCardGroup = equipmentCerCardGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentCerCardGroup.setDescription(' This group contains a collection of objects general specific to Card tables. ')
equipmentCerPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 15)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cerPortType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortAdminState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortPrState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortSecState"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDplxStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortAction"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortNumChans"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortMacAddress"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDetectedMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDocsIfIndex"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortBgpId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortConnectorId"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCardSubType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortCurrDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortMinDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortMaxDsPower"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortTxFlowControlMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortRxFlowControlMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortTxFlowControlDetected"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerPortRxFlowControlDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCerPortGroup = equipmentCerPortGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentCerPortGroup.setDescription(' This group contains a collection of objects specific to Port table. ')
equipmentDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 6)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "remainInDiagMode"), ("CADANT-CMTS-EQUIPMENT-MIB", "verboseLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentDiagGroup = equipmentDiagGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentDiagGroup.setDescription(' This group contains a collection of objects specific to equipment diagnostics. ')
equipmentCardTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 8)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cardTestName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestType"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestScheduleCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestSchedule"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestResultDesc"), ("CADANT-CMTS-EQUIPMENT-MIB", "cardTestTransId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentCardTestGroup = equipmentCardTestGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentCardTestGroup.setDescription(' This group contains a collection of objects specific to card Test group ')
equipmentAuditGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 10)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "auditAutoScheduling"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditLogOutput"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditLogThrottle"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditName"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditDescription"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTime"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditCommand"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditStatus"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditResult"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditPassedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditFailedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditCycleCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTotalPassedCount"), ("CADANT-CMTS-EQUIPMENT-MIB", "auditTotalFailedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    equipmentAuditGroup = equipmentAuditGroup.setStatus('current')
if mibBuilder.loadTexts: equipmentAuditGroup.setDescription(' This group contains a collection of objects specific audit group. ')
cerDiskVolumeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 21)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeName"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeSize"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageLevel"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsagePercentage"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageCriticalThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageMajorThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeUsageMinorThreshold"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeAutoDeleteUnusedFile"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeTrapInh"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerDiskVolumeGroup = cerDiskVolumeGroup.setStatus('current')
if mibBuilder.loadTexts: cerDiskVolumeGroup.setDescription(' This group contains a collection of objects specific to disk volume objects. ')
fpgaErrorEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 2, 12)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "errEvRecoveryEnabled"), ("CADANT-CMTS-EQUIPMENT-MIB", "errEvLoggingEnabled"), ("CADANT-CMTS-EQUIPMENT-MIB", "errEvLogLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fpgaErrorEventGroup = fpgaErrorEventGroup.setStatus('current')
if mibBuilder.loadTexts: fpgaErrorEventGroup.setDescription(' This group contains a collection of objects dealing with FPGA errors. ')
cadEquipmentMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4998, 1, 1, 10, 1, 10, 1, 1)).setObjects(("CADANT-CMTS-EQUIPMENT-MIB", "systemGeneralGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentStateGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentShelfGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCerCardGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCerPortGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentDiagGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentCardTestGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "cerDiskVolumeGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "equipmentAuditGroup"), ("CADANT-CMTS-EQUIPMENT-MIB", "fpgaErrorEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadEquipmentMibCompliance = cadEquipmentMibCompliance.setStatus('current')
if mibBuilder.loadTexts: cadEquipmentMibCompliance.setDescription('The compliance statement for entities which implement the Equipment MIB. ')
mibBuilder.exportSymbols("CADANT-CMTS-EQUIPMENT-MIB", cmPrimarySID=cmPrimarySID, cerDiskVolumeNumber=cerDiskVolumeNumber, cerCardDataPicSerialNum=cerCardDataPicSerialNum, cmResetClearNotification=cmResetClearNotification, cerCardDataPicMfgRevision=cerCardDataPicMfgRevision, cerCamFaultInfo=cerCamFaultInfo, cerPortSecState=cerPortSecState, cerCardDataPicHwDeviations=cerCardDataPicHwDeviations, cerPemCircuitBreaker2Enable=cerPemCircuitBreaker2Enable, cerPortDescription=cerPortDescription, cardTestType=cardTestType, equipmentCardTestGroup=equipmentCardTestGroup, cerPortDocsIfIndex=cerPortDocsIfIndex, cerPemFeed2Current=cerPemFeed2Current, auditCardId=auditCardId, errEvLogLevel=errEvLogLevel, shelfSwVersion=shelfSwVersion, cerCardUpTime=cerCardUpTime, cerPortAdminState=cerPortAdminState, errEvRowStatus=errEvRowStatus, cerPortTable=cerPortTable, auditLogThrottle=auditLogThrottle, cerCardSpareGroupMode=cerCardSpareGroupMode, equipmentStateGroup=equipmentStateGroup, cerCardTemperatureHighError=cerCardTemperatureHighError, errEventId=errEventId, cardLastChangeTime=cardLastChangeTime, cerPortCardId=cerPortCardId, cerCardDataBusSpeed=cerCardDataBusSpeed, equipmentCerPortGroup=equipmentCerPortGroup, cardTestCommand=cardTestCommand, cadEquipmentMibConformance=cadEquipmentMibConformance, cerCardId=cerCardId, cerDiskVolumeUsageNotification=cerDiskVolumeUsageNotification, cerCardTable=cerCardTable, cerDiskVolumeId=cerDiskVolumeId, systemKey=systemKey, cerCardFwUpdateStatus=cerCardFwUpdateStatus, cerCardDataPicModelNum=cerCardDataPicModelNum, cerPortMacIfIndex=cerPortMacIfIndex, cerPortMacAddress=cerPortMacAddress, cerCardDataNandFlashSize=cerCardDataNandFlashSize, trapCounter=trapCounter, cmResetStatus=cmResetStatus, TestScheduleCommand=TestScheduleCommand, cerDiskVolumeDiskSize=cerDiskVolumeDiskSize, cerPortMaxDsPower=cerPortMaxDsPower, cerDiskVolumeTable=cerDiskVolumeTable, cerDiskVolumeUsageCriticalThreshold=cerDiskVolumeUsageCriticalThreshold, cerCardPrStateChange=cerCardPrStateChange, cerPortEntry=cerPortEntry, cerDiskDriveNumber=cerDiskDriveNumber, cardTestResultDesc=cardTestResultDesc, cadEquipmentMib=cadEquipmentMib, cardTestSchedule=cardTestSchedule, systemClock=systemClock, diskDriveNumber=diskDriveNumber, cerCardNumRfConnectors=cerCardNumRfConnectors, cardTestName=cardTestName, equipmentCerCardGroup=equipmentCerCardGroup, cerCardDataPicModelName=cerCardDataPicModelName, cerSpareModeExtTable=cerSpareModeExtTable, cerPortBgpId=cerPortBgpId, systemGeneralGroup=systemGeneralGroup, licenseError=licenseError, cardTempNoReportNotification=cardTempNoReportNotification, cmResetUpTime=cmResetUpTime, equipmentDiagGroup=equipmentDiagGroup, cerCardSecState=cerCardSecState, cerPortGroupPortId=cerPortGroupPortId, cerPemLedStatus=cerPemLedStatus, cmDevice=cmDevice, errEvLoggingEnabled=errEvLoggingEnabled, cerCardName=cerCardName, shelfName=shelfName, cerCamFaultAutoFailback=cerCamFaultAutoFailback, cerLicenseTypeStr=cerLicenseTypeStr, TestResult=TestResult, auditLogOutput=auditLogOutput, PYSNMP_MODULE_ID=cadEquipmentMib, cerPemFeed1Present=cerPemFeed1Present, auditTotalFailedCount=auditTotalFailedCount, remainInDiagMode=remainInDiagMode, cerCardDataAssetTag=cerCardDataAssetTag, cardTestResultNotification=cardTestResultNotification, cardNumber=cardNumber, cardTestTransId=cardTestTransId, errEvCardId=errEvCardId, cerPortSecStateChange=cerPortSecStateChange, cerFan1Speed=cerFan1Speed, auditTotalPassedCount=auditTotalPassedCount, cardTempOutOfRangeNotification=cardTempOutOfRangeNotification, equipmentAuditGroup=equipmentAuditGroup, equipmentTbl=equipmentTbl, cerCardDataFpgaSource=cerCardDataFpgaSource, cerCardDataLastBootSource=cerCardDataLastBootSource, cerPortRxFlowControlDetected=cerPortRxFlowControlDetected, systemGeneral=systemGeneral, cerCardDataSerialNum=cerCardDataSerialNum, cardTempOverHeatNotification=cardTempOverHeatNotification, auditDescription=auditDescription, cerCardDataFeedBPresent=cerCardDataFeedBPresent, cerCardSecStateChange=cerCardSecStateChange, cerPortDplxStatusChange=cerPortDplxStatusChange, cerCardDataLastBootVersion=cerCardDataLastBootVersion, cerDiskVolumeName=cerDiskVolumeName, cardTestId=cardTestId, auditCommand=auditCommand, cmVendor=cmVendor, cerPortConnectorId=cerPortConnectorId, cerDiskVolumeUsagePercentage=cerDiskVolumeUsagePercentage, shelfObjects=shelfObjects, fpgaErrorEventEntry=fpgaErrorEventEntry, cerCardDetectedChange=cerCardDetectedChange, cmRegistrationNotification=cmRegistrationNotification, cerCardDataHwDeviations=cerCardDataHwDeviations, cerPortGroupId=cerPortGroupId, auditStatus=auditStatus, cerCardEntry=cerCardEntry, cerDiskVolumeAutoDeleteFileNotification=cerDiskVolumeAutoDeleteFileNotification, consoleOutput=consoleOutput, cardTestResult=cardTestResult, cerPortNumber=cerPortNumber, cerDiskVolumeUsageMajorThreshold=cerDiskVolumeUsageMajorThreshold, cerCardDataPartModelNum=cerCardDataPartModelNum, cerCardDataPatchVersions=cerCardDataPatchVersions, cerFanStatusEntry=cerFanStatusEntry, cerSpareModeMode=cerSpareModeMode, cerCardDataPicMfgDateTime=cerCardDataPicMfgDateTime, downstreamPowerLoss=downstreamPowerLoss, cerDiskVolumeEntry=cerDiskVolumeEntry, cardTestIndex=cardTestIndex, cerPortDplxStatus=cerPortDplxStatus, cerDiskVolumeGroup=cerDiskVolumeGroup, cerCardDataCpuSpeed=cerCardDataCpuSpeed, cardTestTime=cardTestTime, noLicenseNotification=noLicenseNotification, verboseLevel=verboseLevel, TestTransactionId=TestTransactionId, cerPortTxFlowControlMode=cerPortTxFlowControlMode, cerDiskVolumeDriveId=cerDiskVolumeDriveId, cerPortId=cerPortId, cerCardDataProductVersion=cerCardDataProductVersion, cerSpareModeRowStatus=cerSpareModeRowStatus, cerCamFaultRecovery=cerCamFaultRecovery, auditFailedCount=auditFailedCount, cerCardDataFwVersion=cerCardDataFwVersion, cardTestScheduleCommand=cardTestScheduleCommand, cerCardDataSwVersion=cerCardDataSwVersion, cerPortNumChans=cerPortNumChans, cerCardDataRamSize=cerCardDataRamSize, auditTable=auditTable, cerCardDataNorFlashSize=cerCardDataNorFlashSize, cerCardDataTable=cerCardDataTable, cerSpareModeExtEntry=cerSpareModeExtEntry, cerSpareModeCardId=cerSpareModeCardId, cerCardAnnex=cerCardAnnex, cerPortAction=cerPortAction, cerSpareModeFaultId=cerSpareModeFaultId, cerPortMinDsPower=cerPortMinDsPower, cmIpAddress=cmIpAddress, cerPemBranchPresent=cerPemBranchPresent, cerCardDataCommittedSwVersion=cerCardDataCommittedSwVersion, cerCamFaultNotification=cerCamFaultNotification, cerCardDataHwVersion=cerCardDataHwVersion, cerCardDetected=cerCardDetected, portLastChangeTime=portLastChangeTime, cerCardDataFeedAPresent=cerCardDataFeedAPresent, cerPemStatusTable=cerPemStatusTable, cardTestDescription=cardTestDescription, cerCardDataLicensePorts=cerCardDataLicensePorts, TestSchedule=TestSchedule, cadEquipmentMibGroup=cadEquipmentMibGroup, fpgaErrorEventGroup=fpgaErrorEventGroup, cerPortDetectedMode=cerPortDetectedMode, equipmentDiag=equipmentDiag, cardTestTable=cardTestTable, equipmentAudit=equipmentAudit, equipmentError=equipmentError, fpgaErrorEventTable=fpgaErrorEventTable, cerPortPrState=cerPortPrState, auditAutoScheduling=auditAutoScheduling, cerSpareModeExt=cerSpareModeExt, TestId=TestId, cerCardTrapInh=cerCardTrapInh, cerCardLastResetReason=cerCardLastResetReason, cerDiskVolumeFileName=cerDiskVolumeFileName, cerCardSubDetected=cerCardSubDetected, cerCardSpareGroupId=cerCardSpareGroupId, cerPortTxFlowControlDetected=cerPortTxFlowControlDetected, cerFanStatusTable=cerFanStatusTable, cerPemStatusEntry=cerPemStatusEntry, auditResult=auditResult, cerCamFaultErrorStr=cerCamFaultErrorStr, cerCardTemperatureHighWarn=cerCardTemperatureHighWarn, cerCardDataLicenseDate=cerCardDataLicenseDate, cerCardNumber=cerCardNumber, cerDiskVolumeUsageLevel=cerDiskVolumeUsageLevel, cerDiskVolumeSize=cerDiskVolumeSize, cerFan2Speed=cerFan2Speed, CerCamFaultTrapType=CerCamFaultTrapType, TestCommand=TestCommand, cerFanAmbientTemperature=cerFanAmbientTemperature, cerPemFeed2Present=cerPemFeed2Present, cmResetNotification=cmResetNotification, equipmentTraps=equipmentTraps, cerPemFeed1Voltage=cerPemFeed1Voltage, cerDiskVolumeAutoDeleteUnusedFile=cerDiskVolumeAutoDeleteUnusedFile, auditTime=auditTime, cerCamFaultId=cerCamFaultId, diagTestId=diagTestId, TestType=TestType, cerCardPicDetected=cerCardPicDetected, cerDiskVolumeUsageMinorThreshold=cerDiskVolumeUsageMinorThreshold, cardTestEntry=cardTestEntry, cerCardDplxStatusChange=cerCardDplxStatusChange, cerCardDataMfg=cerCardDataMfg, cadEquipmentMibCompliance=cadEquipmentMibCompliance, cmResetInfo=cmResetInfo, cerCardDataMfgDateTime=cerCardDataMfgDateTime, errEvRecoveryEnabled=errEvRecoveryEnabled, cerPemFeed2Voltage=cerPemFeed2Voltage, cerCardDataProductName=cerCardDataProductName, cerCardTemperature=cerCardTemperature, cerPemFeed1Current=cerPemFeed1Current, cerPemCircuitBreaker1Enable=cerPemCircuitBreaker1Enable, equipmentState=equipmentState, cerCardDplxStatus=cerCardDplxStatus, cerPortCardSubType=cerPortCardSubType, cmMacAddress=cmMacAddress, auditEntry=auditEntry, cerPortMode=cerPortMode, auditPassedCount=auditPassedCount, cerCardAction=cerCardAction, cerFan3Speed=cerFan3Speed, cerCardDataPicHwVersion=cerCardDataPicHwVersion, cerPortRxFlowControlMode=cerPortRxFlowControlMode, auditName=auditName, auditId=auditId, cerCardDataEntry=cerCardDataEntry, cerPortTrapInh=cerPortTrapInh, cerDiskVolumeTrapInh=cerDiskVolumeTrapInh, cerPortPrStateChange=cerPortPrStateChange, cerCardSubType=cerCardSubType, cerFanLevel=cerFanLevel, cerDiskVolumeCardId=cerDiskVolumeCardId, portNumber=portNumber, equipmentShelfGroup=equipmentShelfGroup, cadEquipmentMibCompliances=cadEquipmentMibCompliances, cerPortCurrDsPower=cerPortCurrDsPower, cerPortType=cerPortType, cerCardType=cerCardType, diskVolumeNumber=diskVolumeNumber, cerCardDataPicMfg=cerCardDataPicMfg)
mibBuilder.exportSymbols("CADANT-CMTS-EQUIPMENT-MIB", auditCycleCount=auditCycleCount, cerCardPrState=cerCardPrState, cerCardDataCpuType=cerCardDataCpuType, eqDiagConfig=eqDiagConfig, cerCardAdminState=cerCardAdminState, cerCardDataBootVersion=cerCardDataBootVersion, cerCardNumPorts=cerCardNumPorts, cmResetReason=cmResetReason, trapSeverity=trapSeverity, cerCardDataAllowedPorts=cerCardDataAllowedPorts, cerCardDataLicenseAnnex=cerCardDataLicenseAnnex, cmUChannelID=cmUChannelID)
