#
# PySNMP MIB module Unisphere-Data-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-DHCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Unsigned32, Gauge32, Counter32, TimeTicks, IpAddress, MibIdentifier, Integer32, NotificationType, Bits, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "Gauge32", "Counter32", "TimeTicks", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "Bits", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TruthValue, PhysAddress, TimeInterval, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "PhysAddress", "TimeInterval", "RowStatus", "DisplayString", "TextualConvention")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdEnable, = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdEnable")
usdDhcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22))
usdDhcpMIB.setRevisions(('2002-05-10 19:27', '2001-03-30 18:09', '2000-02-03 19:50', '1999-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdDhcpMIB.setRevisionsDescriptions(('Added local server reservation and cable modem support. Refined agent info enable into agent circuit ID enable and agent remote ID enable.', 'Added Local Server support.', 'Added support for DHCP Proxy Client under usdDhcpProxyClient node. Added additional error/discard statistics for DHCP Relay.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdDhcpMIB.setLastUpdated('200205101927Z')
if mibBuilder.loadTexts: usdDhcpMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdDhcpMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdDhcpMIB.setDescription('The DHCP MIB for the Unisphere Networks enterprise.')
class UsdDhcpLocalServerPoolName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'DHCP Local Server Pool name. Represents textual information taken from the NVT ASCII character set.'
    status = 'current'
    displayHint = '64a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class UsdDhcpLocalServerPoolDomainName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'DHCP Local Server Pool domain name. Represents textual information taken from the NVT ASCII character set.'
    status = 'current'
    displayHint = '64a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class UsdDhcpLocalServerPoolNetBiosNodeType(TextualConvention, Integer32):
    description = 'The set of netbios node types that may be assigned to the DHCP local server pool.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("netBiosNodeTypeNone", 1), ("netBiosNodeTypeBroadcast", 2), ("netBiosNodeTypePeerToPeer", 3), ("netBiosNodeTypeMixed", 4), ("netBiosNodeTypeHybrid", 5))

class UsdDhcpLocalServerModeType(TextualConvention, Integer32):
    description = 'The set of DHCP Local Server operational Mode types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("localServerModeTypeEqualAccess", 1), ("localServerModeTypeStandalone", 2))

class UsdDhcpLocalServerPhysAddressString(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'DHCP local server MAC address. Represents the physical address in textual form, eg. 00-d0-b7-09-e0-00-00-00-00-00-00-00-00-00-00-00. Only hexidecimal digits (0-9, a-f) and the dash (-) from the NVT ASCII character set are valid.'
    status = 'current'
    displayHint = '48a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 48)

usdDhcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1))
usdDhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1))
usdDhcpProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2))
usdDhcpLocalServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3))
usdDhcpRelayScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 1))
usdDhcpRelayAgentInfoEnable = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 1, 1), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdDhcpRelayAgentInfoEnable.setStatus('deprecated')
if mibBuilder.loadTexts: usdDhcpRelayAgentInfoEnable.setDescription('Enable/disable use of the DHCP relay agent information option.')
usdDhcpRelayBadMessages = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpRelayBadMessages.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayBadMessages.setDescription('Number of DHCP relay messages received by this agent, that were discarded because of apparent corruption.')
usdDhcpRelayUnknownMessages = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpRelayUnknownMessages.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayUnknownMessages.setDescription('Number of DHCP relay messages received by this agent, that were discarded because they contained information or options not recognized by this agent.')
usdDhcpRelayAgentInfoAlreadyPresents = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpRelayAgentInfoAlreadyPresents.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayAgentInfoAlreadyPresents.setDescription('Number of DHCP requests discarded because they already contained the Agent Info option when this agent expected to insert it.')
usdDhcpRelayGatewayAddrSpoofs = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpRelayGatewayAddrSpoofs.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayGatewayAddrSpoofs.setDescription("Number of DHCP requests discarded because the gateway IP address field already contained this agent's address.")
usdDhcpRelayAgentCircuitIdEnable = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 1, 6), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdDhcpRelayAgentCircuitIdEnable.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayAgentCircuitIdEnable.setDescription('Enable/disable use of the DHCP Relay Agent Circuit Id suboption.')
usdDhcpRelayAgentRemoteIdEnable = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 1, 7), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdDhcpRelayAgentRemoteIdEnable.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayAgentRemoteIdEnable.setDescription('Enable/disable use of the DHCP Relay Agent Remote Id suboption.')
usdDhcpRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 2), )
if mibBuilder.loadTexts: usdDhcpRelayServerTable.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayServerTable.setDescription('The (conceptual) table listing the DHCP Relay servers.')
usdDhcpRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-DHCP-MIB", "usdDhcpRelayServerAddress"))
if mibBuilder.loadTexts: usdDhcpRelayServerEntry.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayServerEntry.setDescription('An entry (conceptual row) representing a DHCP Relay server.')
usdDhcpRelayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdDhcpRelayServerAddress.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayServerAddress.setDescription('The IP address of the DHCP server to which DHCP requests received from attached DHCP clients are forwarded.')
usdDhcpRelayServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpRelayServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayServerRowStatus.setDescription("Supports 'createAndGo' and 'destroy' only.")
usdDhcpProxyClient = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1))
usdDhcpProxyServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 2))
usdDhcpProxyClientScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 1))
usdDhcpProxyClientUnknownServers = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientUnknownServers.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientUnknownServers.setDescription('Total number of DHCP Proxy messages received from servers not listed in the usdDhcpProxyClientServerTable.')
usdDhcpProxyClientServerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2), )
if mibBuilder.loadTexts: usdDhcpProxyClientServerTable.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerTable.setDescription('The (conceptual) table listing the DHCP Proxy servers known to the client.')
usdDhcpProxyClientServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerAddress"))
if mibBuilder.loadTexts: usdDhcpProxyClientServerEntry.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerEntry.setDescription('An entry (conceptual row) representing a DHCP Proxy server known to the client.')
usdDhcpProxyClientServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdDhcpProxyClientServerAddress.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerAddress.setDescription('The IP address of a DHCP server with which DHCP transactions are conducted by this client.')
usdDhcpProxyClientServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpProxyClientServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerRowStatus.setDescription("Supports 'createAndGo' and 'destroy' only.")
usdDhcpProxyClientServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("drain", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpProxyClientServerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerAdminStatus.setDescription("Permits configuration of the client's operation status with respect to this server: disable Bar the client from using this server to obtain new address leases; and cause any leases from that server, that are currently in use by the client, to be released. drain Bar the client from using this server to obtain new address leases; but permit any leases from that server, that are currently in use by the client, to remain in use until they expire naturally. enabled Allow the client to use the server to obtain new address leases. Implementations that don't support administrative control of the server always report the value of enable(2), and disallow setting this object to any other value.")
usdDhcpProxyClientServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("draining", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerOperStatus.setDescription("Reports the client's current operation status with respect to this server: disabled The client is barred from using this server to obtain new address leases; and any leases from that server, that were in use by the client, have been released. draining The client is barred from using this server to obtain new address leases, but one or more leases from that server, that are in use by the client, will remain in use until they expire naturally. enabled The client may use the server to obtain new address leases, and may have one or more leases currently in use. Implementations that don't support administrative control of the server always report the value enabled(2).")
usdDhcpProxyClientServerLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerLeases.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerLeases.setDescription('Total number of address leases granted to the client by this server (including those that have expired). The number of active leases from this server is determined by subtracting the value of usdDhcpProxyClientServerReleases from the value of this object.')
usdDhcpProxyClientServerDiscovers = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerDiscovers.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerDiscovers.setDescription('Number of DHCP Discovers directed (i.e. nonbroadcast) by the client to this server.')
usdDhcpProxyClientServerOffers = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerOffers.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerOffers.setDescription('Number of DHCP Offers received by the client from this server.')
usdDhcpProxyClientServerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerRequests.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerRequests.setDescription('Number of DHCP Requests sent by the client to this server.')
usdDhcpProxyClientServerAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerAcks.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerAcks.setDescription('Number of DHCP ACKS received by the client from this server.')
usdDhcpProxyClientServerNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerNaks.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerNaks.setDescription('Number of DHCP NAKS received by the client from this server.')
usdDhcpProxyClientServerDeclines = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerDeclines.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerDeclines.setDescription('Number of DHCP Declines sent by the client to this server.')
usdDhcpProxyClientServerReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerReleases.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerReleases.setDescription('Number of DHCP Releases sent by the client to this server.')
usdDhcpProxyClientServerInforms = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerInforms.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerInforms.setDescription('Number of DHCP Informs sent by the client to this server.')
usdDhcpProxyClientServerBadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerBadMessages.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerBadMessages.setDescription('Number of DHCP Proxy messages received by the client from this server, that were discarded because of apparent corruption.')
usdDhcpProxyClientServerUnknownMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 2, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpProxyClientServerUnknownMessages.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyClientServerUnknownMessages.setDescription('Number of DHCP Proxy messages received by the client from this server, that were discarded because they contained information or options not recognized by the client.')
usdDhcpLocalServerStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1))
usdDhcpLocalServerBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 2))
usdDhcpLocalServerPool = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3))
usdDhcpLocalServerAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 4))
usdDhcpLocalServerReserves = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 5))
usdDhcpLocalServerCableModemServers = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 6))
usdDhcpLocalServerCableModemStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7))
usdDhcpLocalServerMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerMemUsage.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerMemUsage.setDescription('The amount (in bytes) of memory currently allocated to this local server.')
usdDhcpLocalServerNumBindings = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerNumBindings.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerNumBindings.setDescription('The number of address bindings maintained by this local server.')
usdDhcpLocalServerRxDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerRxDiscovers.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerRxDiscovers.setDescription('The number of discover messages received by this local server.')
usdDhcpLocalServerRxAccepts = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerRxAccepts.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerRxAccepts.setDescription('The number of accept messages received by this local server.')
usdDhcpLocalServerRxRenews = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerRxRenews.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerRxRenews.setDescription('The number of renew messages received by this local server.')
usdDhcpLocalServerRxDeclines = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerRxDeclines.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerRxDeclines.setDescription('The number of decline messages received by this local server.')
usdDhcpLocalServerRxReleases = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerRxReleases.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerRxReleases.setDescription('The number of release messages received by this local server.')
usdDhcpLocalServerRxInforms = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerRxInforms.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerRxInforms.setDescription('The number of inform messages received by this local server.')
usdDhcpLocalServerTxOffers = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerTxOffers.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerTxOffers.setDescription('The number of offer messages sent by this local server.')
usdDhcpLocalServerTxAcks = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerTxAcks.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerTxAcks.setDescription('The number of ack messages sent by this local server.')
usdDhcpLocalServerTxNaks = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerTxNaks.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerTxNaks.setDescription('The number of nak messages sent by this local server.')
usdDhcpLocalServerUnknownMessages = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerUnknownMessages.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerUnknownMessages.setDescription('The number of unknown messages processed by this local server.')
usdDhcpLocalServerBadMessages = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerBadMessages.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerBadMessages.setDescription('The number of bad messages processed by this local server.')
usdDhcpLocalServerPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerPacketsIn.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPacketsIn.setDescription('The number of input packets processed by this local server.')
usdDhcpLocalServerPacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerPacketsOut.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPacketsOut.setDescription('The number of output packets processed by this local server.')
usdDhcpLocalServerBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 2, 1), )
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsTable.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsTable.setDescription('A table of address bindings maintained by this DHCP Local Server.')
usdDhcpLocalServerBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBindingsIpAddress"))
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsEntry.setDescription('An entry (conceptual row) representing an address binding maintained by this DHCP Local Server.')
usdDhcpLocalServerBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsIpAddress.setDescription('The IP Address associated with this entry in the bindings table.')
usdDhcpLocalServerBindingsPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 2, 1, 1, 2), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsPhysAddress.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsPhysAddress.setDescription('The Physical (MAC) Address associated with this entry in the bindings table and corresponding to the IP Address denoted by the table index.')
usdDhcpLocalServerBindingsInfinite = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsInfinite.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsInfinite.setDescription('If true, then this binding will be maintained indefinitely. If false, then this binding will expire in accordance with the value of usdDhcpLocalServerBindingsExpireTime.')
usdDhcpLocalServerBindingsExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 2, 1, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsExpireTime.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerBindingsExpireTime.setDescription('If usdDhcpLocalServerBindingsInfinite is false, then this is the time remaining prior to expiration of the address binding associated with this entry.')
usdDhcpLocalServerPoolTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1), )
if mibBuilder.loadTexts: usdDhcpLocalServerPoolTable.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolTable.setDescription("A table of address pools associated this DHCP Local Server. A DHCP Local Server may have multiple uniquely-named pools configured; however, only a single pool (with the name 'default') may have a network address and mask assigned.")
usdDhcpLocalServerPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolName"))
if mibBuilder.loadTexts: usdDhcpLocalServerPoolEntry.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolEntry.setDescription('An entry (conceptual row) representing an address pool associated this DHCP Local Server.')
usdDhcpLocalServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 1), UsdDhcpLocalServerPoolName())
if mibBuilder.loadTexts: usdDhcpLocalServerPoolName.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolName.setDescription("The name of the local server pool to which this entry belongs. Only an entry with the name 'default' may have a network address and mask assigned.")
usdDhcpLocalServerPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 2), UsdDhcpLocalServerPoolDomainName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolDomainName.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolDomainName.setDescription('The domain name assigned to this local server pool. Modification of extant values for this object require that it first be cleared (via set to null string) and then modified (via set to new string).')
usdDhcpLocalServerPoolNetworkIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolNetworkIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolNetworkIpAddress.setDescription("The IP Address assigned to this local server pool. This object must be set in conjunction with usdDhcpLocalServerPoolNetworkMask. Modification of extant values for this object require that it first be cleared (via set to null IP address) and then modified (via set to new IP address). Only configurable/valid for entries with the index name (usdDhcpLocalServerPoolName) 'default'.")
usdDhcpLocalServerPoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolNetworkMask.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolNetworkMask.setDescription("The network mask assigned to this local server pool. This object must be set in conjunction with usdDhcpLocalServerPoolNetworkIpAddress. Modification of extant values for this object require that it first be cleared (via set to null IP mask) and then modified (via set to new IP mask). Only configurable/valid for entries with the index name (usdDhcpLocalServerPoolName) 'default'.")
usdDhcpLocalServerPoolNetBiosNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 5), UsdDhcpLocalServerPoolNetBiosNodeType().clone('netBiosNodeTypeHybrid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolNetBiosNodeType.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolNetBiosNodeType.setDescription('The NetBios node type assigned to this local server pool.')
usdDhcpLocalServerPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 6), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolLeaseTime.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolLeaseTime.setDescription('The time interval for address renewal required of a client using the address associated with this local server pool entry. Setting a zero value will effect an infinite lease, which in turn is indicated by the value -1 returned via a get.')
usdDhcpLocalServerPoolPrimaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolPrimaryDnsServer.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolPrimaryDnsServer.setDescription('The address of the primary DNS Server associated with this local server pool. This object must be set in conjunction with usdDhcpLocalServerPoolSecondaryDnsServer. Modification of extant values for this object require that it first be cleared (via set to null IP address) and then modified (via set to new IP address).')
usdDhcpLocalServerPoolSecondaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolSecondaryDnsServer.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolSecondaryDnsServer.setDescription('The address of the secondary DNS Server associated with this local server pool. This object must be set in conjunction with usdDhcpLocalServerPoolPrimaryDnsServer. Modification of extant values for this object require that it first be cleared (via set to null IP address) and then modified (via set to new IP address).')
usdDhcpLocalServerPoolPrimaryNetBiosNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolPrimaryNetBiosNameServer.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolPrimaryNetBiosNameServer.setDescription('The address of the primary NetBios Name Server associated with this local server pool. This object must be set in conjunction with usdDhcpLocalServerPoolSecondaryNetBiosNameServer. Modification of extant values for this object require that it first be cleared (via set to null IP address) and then modified (via set to new IP address).')
usdDhcpLocalServerPoolSecondaryNetBiosNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 10), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolSecondaryNetBiosNameServer.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolSecondaryNetBiosNameServer.setDescription('The address of the secondary NetBios Name Server associated with this local server pool. This object must be set in conjunction with usdDhcpLocalServerPoolPrimaryNetBiosNameServer. Modification of extant values for this object require that it first be cleared (via set to null IP address) and then modified (via set to new IP address).')
usdDhcpLocalServerPoolPrimaryDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolPrimaryDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolPrimaryDefaultRouter.setDescription('The address of the primary Default Router associated with this local server pool. This object must be set in conjunction with usdDhcpLocalServerPoolSecondaryDefaultRouter. Modification of extant values for this object require that it first be cleared (via set to null IP address) and then modified (via set to new IP address).')
usdDhcpLocalServerPoolSecondaryDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 12), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolSecondaryDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolSecondaryDefaultRouter.setDescription('The address of the secondary Default Router associated with this local server pool. This object must be set in conjunction with usdDhcpLocalServerPoolPrimaryDefaultRouter. Modification of extant values for this object require that it first be cleared (via set to null IP address) and then modified (via set to new IP address).')
usdDhcpLocalServerPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolRowStatus.setDescription("Supports 'createAndGo' and 'destroy' only.")
usdDhcpLocalServerPoolLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 3, 1, 1, 14), UsdDhcpLocalServerPoolName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerPoolLinkName.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerPoolLinkName.setDescription("The name of this local server pool's backup pool.")
usdDhcpLocalServerAttributesMode = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 4, 1), UsdDhcpLocalServerModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerAttributesMode.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerAttributesMode.setDescription('An object representing the mode in which the DHCP Local Server is operating.')
usdDhcpLocalServerReservesTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 5, 1), )
if mibBuilder.loadTexts: usdDhcpLocalServerReservesTable.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerReservesTable.setDescription('A table of pool name, MAC address, and IP address reservation groups that are maintained by this DHCP Local Server.')
usdDhcpLocalServerReservesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 5, 1, 1), ).setIndexNames((0, "Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerReservesEntryIpAddress"))
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntry.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntry.setDescription('An entry (conceptual row) representing an MAC address, IP address, pool name reservation maintained by this DHCP Local Server.')
usdDhcpLocalServerReservesEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 5, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntryIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntryIpAddress.setDescription('The IP Address associated with this entry in reserves table.')
usdDhcpLocalServerReservesEntryPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 5, 1, 1, 2), UsdDhcpLocalServerPoolName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntryPoolName.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntryPoolName.setDescription('The name of the local server pool associated with this entry in the reserves table and corresponding to the IP Address denoted by the table index.')
usdDhcpLocalServerReservesEntryPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 5, 1, 1, 3), UsdDhcpLocalServerPhysAddressString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntryPhysAddress.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntryPhysAddress.setDescription('The physical (MAC) address string associated with this entry in the reserves table and corresponding to the IP Address denoted by the table index.')
usdDhcpLocalServerReservesEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 5, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerReservesEntryRowStatus.setDescription("Supports 'createAndGo' and 'destroy' only.")
usdDhcpLocalServerCableModemServerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 6, 1), )
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemServerTable.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemServerTable.setDescription('The (conceptual) table listing the DHCP Cable Modem Relay servers.')
usdDhcpLocalServerCableModemServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 6, 1, 1), ).setIndexNames((0, "Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemServerEntryAddress"))
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemServerEntry.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemServerEntry.setDescription('An entry (conceptual row) representing a DHCP Cable Modem DHCP server.')
usdDhcpLocalServerCableModemServerEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 6, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemServerEntryAddress.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemServerEntryAddress.setDescription('The IP address of the DHCP server to which DHCP requests received from attached Cable Modem DHCP clients are forwarded.')
usdDhcpLocalServerCableModemServerEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemServerEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemServerEntryRowStatus.setDescription("Supports 'createAndGo' and 'destroy' only.")
usdDhcpLocalServerCableModemRequestIn = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestIn.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestIn.setDescription('The number of Cable Modem DHCP Client Requests that are received.')
usdDhcpLocalServerCableModemResponseIn = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemResponseIn.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemResponseIn.setDescription('The number of Cable Modem DHCP Server Responses that are received.')
usdDhcpLocalServerCableModemRequestOut = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestOut.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestOut.setDescription('The number of Cable Modem DHCP Client Request that are transmitted.')
usdDhcpLocalServerCableModemResponseOut = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemResponseOut.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemResponseOut.setDescription('The number of Cable Modem DHCP Server Responses that are transmitted.')
usdDhcpLocalServerCableModemRequestDropped = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestDropped.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestDropped.setDescription('The number of Cable Modem DHCP Client Request that are dropped.')
usdDhcpLocalServerCableModemResponseDropped = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemResponseDropped.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemResponseDropped.setDescription('The number of Cable Modem DHCP Server Responses that are dropped.')
usdDhcpLocalServerCableModemRequestBad = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestBad.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestBad.setDescription('The number of Cable Modem DHCP Client Request that are bad.')
usdDhcpLocalServerCableModemResponseBad = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemResponseBad.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemResponseBad.setDescription('The number of Cable Modem DHCP Server Responses that are bad.')
usdDhcpLocalServerCableModemRequestDeleted = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestDeleted.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemRequestDeleted.setDescription('The number of Cable Modem DHCP Requests that were deleted because they were stale.')
usdDhcpLocalServerCableModemPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemPacketsIn.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemPacketsIn.setDescription('The number of Cable Modem DHCP Packets received.')
usdDhcpLocalServerCableModemPacketsOut = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemPacketsOut.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemPacketsOut.setDescription('The number of Cable Modem DHCP Packets transmitted.')
usdDhcpLocalServerCableModemPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 1, 3, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerCableModemPacketsDropped.setDescription('The number of Cable Modem DHCP Packets dropped.')
usdDhcpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4))
usdDhcpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 1))
usdDhcpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 2))
usdDhcpRelayCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 1, 1)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpRelayGroup"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpRelayCompliance = usdDhcpRelayCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdDhcpRelayCompliance.setDescription('Obsolete compliance statement for systems supporting DHCP Relay. This statement became obsolete when Local Server support objects were added.')
usdDhcpProxyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 1, 2)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpProxyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpProxyCompliance = usdDhcpProxyCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdDhcpProxyCompliance.setDescription('Obsolete compliance statement for systems supporting DHCP Proxy. This statement became obsolete when Local Server support objects were added.')
usdDhcpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 1, 3)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpRelayGroup"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyGroup"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpCompliance = usdDhcpCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdDhcpCompliance.setDescription('Obsolete compliance statement for systems supporting DHCP. This compliance statement became obsolete when support was added for reservations and cable modem servers.')
usdDhcpCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 1, 4)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpRelayGroup2"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyGroup"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpCompliance2 = usdDhcpCompliance2.setStatus('current')
if mibBuilder.loadTexts: usdDhcpCompliance2.setDescription('The compliance statement for systems supporting DHCP.')
usdDhcpRelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 2, 1)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpRelayAgentInfoEnable"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayBadMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayUnknownMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayAgentInfoAlreadyPresents"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayGatewayAddrSpoofs"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpRelayGroup = usdDhcpRelayGroup.setStatus('deprecated')
if mibBuilder.loadTexts: usdDhcpRelayGroup.setDescription('Deprecated basic collection of objects providing management of DHCP Relay functionality. This group became deprecated when the agent info enable was divided into agent circuit ID enable and agent remote ID enable.')
usdDhcpProxyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 2, 2)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientUnknownServers"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerRowStatus"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerAdminStatus"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerOperStatus"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerLeases"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerDiscovers"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerOffers"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerRequests"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerAcks"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerNaks"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerDeclines"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerReleases"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerInforms"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerBadMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpProxyClientServerUnknownMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpProxyGroup = usdDhcpProxyGroup.setStatus('current')
if mibBuilder.loadTexts: usdDhcpProxyGroup.setDescription('The basic collection of objects providing management of DHCP Proxy functionality.')
usdDhcpLocalServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 2, 3)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerMemUsage"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerNumBindings"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxDiscovers"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxAccepts"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxRenews"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxDeclines"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxReleases"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxInforms"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerTxOffers"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerTxAcks"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerTxNaks"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerUnknownMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBadMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPacketsIn"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPacketsOut"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBindingsPhysAddress"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBindingsInfinite"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBindingsExpireTime"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolDomainName"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolNetworkIpAddress"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolNetworkMask"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolNetBiosNodeType"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolLeaseTime"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolPrimaryDnsServer"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolSecondaryDnsServer"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolPrimaryNetBiosNameServer"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolSecondaryNetBiosNameServer"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolPrimaryDefaultRouter"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolSecondaryDefaultRouter"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpLocalServerGroup = usdDhcpLocalServerGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdDhcpLocalServerGroup.setDescription('Obsolete basic collection of objects providing management of DHCP Local Server functionality. This group became obsolete when support was added for reservations and cable modem servers.')
usdDhcpLocalServerGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 2, 4)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerMemUsage"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerNumBindings"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxDiscovers"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxAccepts"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxRenews"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxDeclines"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxReleases"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerRxInforms"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerTxOffers"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerTxAcks"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerTxNaks"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerUnknownMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBadMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPacketsIn"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPacketsOut"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBindingsPhysAddress"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBindingsInfinite"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerBindingsExpireTime"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolDomainName"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolNetworkIpAddress"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolNetworkMask"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolNetBiosNodeType"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolLeaseTime"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolPrimaryDnsServer"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolSecondaryDnsServer"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolPrimaryNetBiosNameServer"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolSecondaryNetBiosNameServer"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolPrimaryDefaultRouter"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolSecondaryDefaultRouter"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolRowStatus"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerPoolLinkName"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerAttributesMode"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerReservesEntryPoolName"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerReservesEntryPhysAddress"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerReservesEntryRowStatus"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemServerEntryRowStatus"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemRequestIn"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemResponseIn"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemRequestOut"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemResponseOut"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemRequestDropped"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemResponseDropped"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemRequestBad"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemResponseBad"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemRequestDeleted"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemPacketsIn"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemPacketsOut"), ("Unisphere-Data-DHCP-MIB", "usdDhcpLocalServerCableModemPacketsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpLocalServerGroup2 = usdDhcpLocalServerGroup2.setStatus('current')
if mibBuilder.loadTexts: usdDhcpLocalServerGroup2.setDescription('The basic collection of objects providing management of DHCP Local Server functionality.')
usdDhcpRelayGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 22, 4, 2, 5)).setObjects(("Unisphere-Data-DHCP-MIB", "usdDhcpRelayBadMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayUnknownMessages"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayAgentInfoAlreadyPresents"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayGatewayAddrSpoofs"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayAgentCircuitIdEnable"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayAgentRemoteIdEnable"), ("Unisphere-Data-DHCP-MIB", "usdDhcpRelayServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDhcpRelayGroup2 = usdDhcpRelayGroup2.setStatus('current')
if mibBuilder.loadTexts: usdDhcpRelayGroup2.setDescription('The basic collection of objects providing management of DHCP Relay functionality.')
mibBuilder.exportSymbols("Unisphere-Data-DHCP-MIB", usdDhcpProxyCompliance=usdDhcpProxyCompliance, usdDhcpMIBGroups=usdDhcpMIBGroups, usdDhcpLocalServerCableModemServerEntryAddress=usdDhcpLocalServerCableModemServerEntryAddress, usdDhcpLocalServerReservesEntryRowStatus=usdDhcpLocalServerReservesEntryRowStatus, usdDhcpRelayUnknownMessages=usdDhcpRelayUnknownMessages, usdDhcpLocalServerCableModemResponseBad=usdDhcpLocalServerCableModemResponseBad, usdDhcpLocalServerTxNaks=usdDhcpLocalServerTxNaks, usdDhcpLocalServerCableModemServerTable=usdDhcpLocalServerCableModemServerTable, usdDhcpProxyClientServerOperStatus=usdDhcpProxyClientServerOperStatus, usdDhcpLocalServerReservesEntryPhysAddress=usdDhcpLocalServerReservesEntryPhysAddress, usdDhcpLocalServerPoolEntry=usdDhcpLocalServerPoolEntry, usdDhcpProxyClientServerDeclines=usdDhcpProxyClientServerDeclines, usdDhcpProxyClientServerUnknownMessages=usdDhcpProxyClientServerUnknownMessages, usdDhcpLocalServerCableModemStatistics=usdDhcpLocalServerCableModemStatistics, usdDhcpProxyClientServerEntry=usdDhcpProxyClientServerEntry, usdDhcpLocalServerTxOffers=usdDhcpLocalServerTxOffers, usdDhcpLocalServerPoolPrimaryDefaultRouter=usdDhcpLocalServerPoolPrimaryDefaultRouter, UsdDhcpLocalServerPoolName=UsdDhcpLocalServerPoolName, usdDhcpRelayServerEntry=usdDhcpRelayServerEntry, usdDhcpLocalServerBindingsExpireTime=usdDhcpLocalServerBindingsExpireTime, usdDhcpLocalServerCableModemPacketsDropped=usdDhcpLocalServerCableModemPacketsDropped, usdDhcpProxyClientServerAddress=usdDhcpProxyClientServerAddress, usdDhcpProxyClientServerOffers=usdDhcpProxyClientServerOffers, usdDhcpProxyClientServerDiscovers=usdDhcpProxyClientServerDiscovers, usdDhcpRelayBadMessages=usdDhcpRelayBadMessages, usdDhcpLocalServerPoolSecondaryNetBiosNameServer=usdDhcpLocalServerPoolSecondaryNetBiosNameServer, usdDhcpLocalServerBindingsInfinite=usdDhcpLocalServerBindingsInfinite, usdDhcpLocalServerReservesEntryIpAddress=usdDhcpLocalServerReservesEntryIpAddress, usdDhcpLocalServerPacketsOut=usdDhcpLocalServerPacketsOut, usdDhcpLocalServerRxDeclines=usdDhcpLocalServerRxDeclines, usdDhcpLocalServerRxRenews=usdDhcpLocalServerRxRenews, usdDhcpLocalServerPoolPrimaryNetBiosNameServer=usdDhcpLocalServerPoolPrimaryNetBiosNameServer, usdDhcpLocalServerCableModemResponseIn=usdDhcpLocalServerCableModemResponseIn, usdDhcpLocalServerAttributes=usdDhcpLocalServerAttributes, usdDhcpLocalServerPoolRowStatus=usdDhcpLocalServerPoolRowStatus, usdDhcpLocalServerCableModemRequestIn=usdDhcpLocalServerCableModemRequestIn, usdDhcpLocalServerCableModemPacketsIn=usdDhcpLocalServerCableModemPacketsIn, usdDhcpLocalServerMemUsage=usdDhcpLocalServerMemUsage, usdDhcpLocalServerPoolSecondaryDefaultRouter=usdDhcpLocalServerPoolSecondaryDefaultRouter, usdDhcpMIB=usdDhcpMIB, usdDhcpLocalServerBindings=usdDhcpLocalServerBindings, usdDhcpRelayGatewayAddrSpoofs=usdDhcpRelayGatewayAddrSpoofs, usdDhcpLocalServerCableModemServerEntry=usdDhcpLocalServerCableModemServerEntry, usdDhcpLocalServerCableModemServers=usdDhcpLocalServerCableModemServers, usdDhcpRelayScalars=usdDhcpRelayScalars, usdDhcpProxyClientServerAcks=usdDhcpProxyClientServerAcks, usdDhcpProxyClientServerTable=usdDhcpProxyClientServerTable, usdDhcpObjects=usdDhcpObjects, usdDhcpMIBConformance=usdDhcpMIBConformance, usdDhcpLocalServerUnknownMessages=usdDhcpLocalServerUnknownMessages, usdDhcpProxyServer=usdDhcpProxyServer, usdDhcpLocalServerPoolSecondaryDnsServer=usdDhcpLocalServerPoolSecondaryDnsServer, usdDhcpLocalServerReservesTable=usdDhcpLocalServerReservesTable, usdDhcpLocalServerPacketsIn=usdDhcpLocalServerPacketsIn, usdDhcpLocalServerCableModemResponseOut=usdDhcpLocalServerCableModemResponseOut, UsdDhcpLocalServerPoolDomainName=UsdDhcpLocalServerPoolDomainName, usdDhcpLocalServerRxDiscovers=usdDhcpLocalServerRxDiscovers, usdDhcpRelayServerRowStatus=usdDhcpRelayServerRowStatus, usdDhcpProxyClientServerNaks=usdDhcpProxyClientServerNaks, usdDhcpLocalServerStatistics=usdDhcpLocalServerStatistics, usdDhcpLocalServerGroup=usdDhcpLocalServerGroup, usdDhcpLocalServerBindingsTable=usdDhcpLocalServerBindingsTable, usdDhcpCompliance=usdDhcpCompliance, usdDhcpProxyClientServerInforms=usdDhcpProxyClientServerInforms, usdDhcpProxyClient=usdDhcpProxyClient, usdDhcpRelayGroup=usdDhcpRelayGroup, usdDhcpLocalServerReservesEntry=usdDhcpLocalServerReservesEntry, usdDhcpProxyClientUnknownServers=usdDhcpProxyClientUnknownServers, usdDhcpLocalServerCableModemRequestDropped=usdDhcpLocalServerCableModemRequestDropped, PYSNMP_MODULE_ID=usdDhcpMIB, usdDhcpLocalServerRxAccepts=usdDhcpLocalServerRxAccepts, usdDhcpLocalServerTxAcks=usdDhcpLocalServerTxAcks, UsdDhcpLocalServerModeType=UsdDhcpLocalServerModeType, usdDhcpLocalServerNumBindings=usdDhcpLocalServerNumBindings, usdDhcpProxyClientServerRowStatus=usdDhcpProxyClientServerRowStatus, usdDhcpLocalServerCableModemRequestOut=usdDhcpLocalServerCableModemRequestOut, usdDhcpLocalServerObjects=usdDhcpLocalServerObjects, usdDhcpProxy=usdDhcpProxy, usdDhcpProxyClientServerAdminStatus=usdDhcpProxyClientServerAdminStatus, usdDhcpLocalServerCableModemServerEntryRowStatus=usdDhcpLocalServerCableModemServerEntryRowStatus, usdDhcpLocalServerPoolNetBiosNodeType=usdDhcpLocalServerPoolNetBiosNodeType, usdDhcpLocalServerBindingsPhysAddress=usdDhcpLocalServerBindingsPhysAddress, usdDhcpLocalServerBindingsIpAddress=usdDhcpLocalServerBindingsIpAddress, usdDhcpMIBCompliances=usdDhcpMIBCompliances, usdDhcpLocalServerPool=usdDhcpLocalServerPool, usdDhcpLocalServerRxReleases=usdDhcpLocalServerRxReleases, usdDhcpLocalServerPoolTable=usdDhcpLocalServerPoolTable, usdDhcpLocalServerBindingsEntry=usdDhcpLocalServerBindingsEntry, usdDhcpLocalServerRxInforms=usdDhcpLocalServerRxInforms, usdDhcpProxyClientServerRequests=usdDhcpProxyClientServerRequests, usdDhcpLocalServerPoolLeaseTime=usdDhcpLocalServerPoolLeaseTime, usdDhcpLocalServerPoolNetworkIpAddress=usdDhcpLocalServerPoolNetworkIpAddress, usdDhcpLocalServerCableModemPacketsOut=usdDhcpLocalServerCableModemPacketsOut, usdDhcpProxyClientServerReleases=usdDhcpProxyClientServerReleases, usdDhcpProxyClientServerBadMessages=usdDhcpProxyClientServerBadMessages, usdDhcpLocalServerPoolName=usdDhcpLocalServerPoolName, usdDhcpLocalServerCableModemRequestBad=usdDhcpLocalServerCableModemRequestBad, usdDhcpProxyGroup=usdDhcpProxyGroup, usdDhcpLocalServerPoolDomainName=usdDhcpLocalServerPoolDomainName, usdDhcpProxyClientServerLeases=usdDhcpProxyClientServerLeases, usdDhcpRelayServerAddress=usdDhcpRelayServerAddress, usdDhcpRelayAgentInfoEnable=usdDhcpRelayAgentInfoEnable, usdDhcpLocalServerReservesEntryPoolName=usdDhcpLocalServerReservesEntryPoolName, usdDhcpLocalServerGroup2=usdDhcpLocalServerGroup2, usdDhcpLocalServerAttributesMode=usdDhcpLocalServerAttributesMode, usdDhcpLocalServerBadMessages=usdDhcpLocalServerBadMessages, usdDhcpCompliance2=usdDhcpCompliance2, UsdDhcpLocalServerPoolNetBiosNodeType=UsdDhcpLocalServerPoolNetBiosNodeType, usdDhcpLocalServerPoolNetworkMask=usdDhcpLocalServerPoolNetworkMask, usdDhcpLocalServerCableModemRequestDeleted=usdDhcpLocalServerCableModemRequestDeleted, usdDhcpRelayGroup2=usdDhcpRelayGroup2, usdDhcpRelay=usdDhcpRelay, usdDhcpRelayAgentInfoAlreadyPresents=usdDhcpRelayAgentInfoAlreadyPresents, usdDhcpProxyClientScalars=usdDhcpProxyClientScalars, usdDhcpLocalServerPoolPrimaryDnsServer=usdDhcpLocalServerPoolPrimaryDnsServer, UsdDhcpLocalServerPhysAddressString=UsdDhcpLocalServerPhysAddressString, usdDhcpLocalServerReserves=usdDhcpLocalServerReserves, usdDhcpRelayCompliance=usdDhcpRelayCompliance, usdDhcpRelayAgentRemoteIdEnable=usdDhcpRelayAgentRemoteIdEnable, usdDhcpRelayServerTable=usdDhcpRelayServerTable, usdDhcpLocalServerPoolLinkName=usdDhcpLocalServerPoolLinkName, usdDhcpRelayAgentCircuitIdEnable=usdDhcpRelayAgentCircuitIdEnable, usdDhcpLocalServerCableModemResponseDropped=usdDhcpLocalServerCableModemResponseDropped)
