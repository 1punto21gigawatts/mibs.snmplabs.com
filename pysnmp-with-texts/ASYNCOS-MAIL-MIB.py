#
# PySNMP MIB module ASYNCOS-MAIL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASYNCOS-MAIL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
asyncOSMail, = mibBuilder.importSymbols("IRONPORT-SMI", "asyncOSMail")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, Bits, Counter64, Gauge32, TimeTicks, Unsigned32, MibIdentifier, ModuleIdentity, ObjectIdentity, Integer32, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Bits", "Counter64", "Gauge32", "TimeTicks", "Unsigned32", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Integer32", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
asyncOSMailObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1))
asyncOSMailObjects.setRevisions(('2011-03-07 00:00', '2010-07-01 00:00', '2009-04-07 00:00', '2009-01-15 00:00', '2005-03-07 00:00', '2005-01-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: asyncOSMailObjects.setRevisionsDescriptions(('Disambiguate requirements for legacy OIDs and improve overall MIB documentation to better match Cisco MIB style.', 'Adding new traps: - hsmInitializationFailure - hsmResetLoginFailure', 'Fixing various MIB parsing errors.', 'Adding new traps: - connectivityFailure - memoryUtilizationExceeded - cpuUtilizationExceeded', 'SNMP v1/2c/3 support for mail appliances', 'Intial Release.',))
if mibBuilder.loadTexts: asyncOSMailObjects.setLastUpdated('201103070000Z')
if mibBuilder.loadTexts: asyncOSMailObjects.setOrganization('IronPort Systems')
if mibBuilder.loadTexts: asyncOSMailObjects.setContactInfo(' Cisco IronPort Email and Web Security Customer Service Postal: 950 Elm Avenue San Bruno, CA 94066 USA Tel: +1 (650) 989-6533 E-mail: customercare@ironport.com')
if mibBuilder.loadTexts: asyncOSMailObjects.setDescription('MIB for Cisco IronPort Mail Gateway/Email Security Appliances')
asyncOSMailNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2))
perCentMemoryUtilization = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perCentMemoryUtilization.setStatus('current')
if mibBuilder.loadTexts: perCentMemoryUtilization.setDescription('This object provides a general idea of how much memory is being consumed by the appliance software.')
perCentCPUUtilization = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perCentCPUUtilization.setStatus('current')
if mibBuilder.loadTexts: perCentCPUUtilization.setDescription('This object provides a general idea of how busy the CPU is according to the appliance software, within the last 5 seconds of utilization. This measurement may or may not reflect the overall CPU utilization of the appliance, and may or may not be a per-process or a per-thread CPU utilization value.')
perCentDiskIOUtilization = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perCentDiskIOUtilization.setStatus('current')
if mibBuilder.loadTexts: perCentDiskIOUtilization.setDescription('This object provides a general idea of how much disk I/O has been generated within the last 5-15 seconds.')
perCentQueueUtilization = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perCentQueueUtilization.setStatus('current')
if mibBuilder.loadTexts: perCentQueueUtilization.setDescription('Percent of total queue capacity used.')
queueAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("queueSpaceAvailable", 1), ("queueSpaceShortage", 2), ("queueFull", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueAvailabilityStatus.setStatus('current')
if mibBuilder.loadTexts: queueAvailabilityStatus.setDescription('Queue space status: enough space, queue near full or queue full.')
resourceConservationReason = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noResourceConservation", 1), ("memoryShortage", 2), ("queueSpaceShortage", 3), ("queueFull", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceConservationReason.setStatus('current')
if mibBuilder.loadTexts: resourceConservationReason.setDescription('Reason system is in Resource Conservation Mode.')
memoryAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("memoryAvailable", 1), ("memoryShortage", 2), ("memoryFull", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAvailabilityStatus.setStatus('current')
if mibBuilder.loadTexts: memoryAvailabilityStatus.setDescription("Mail Transfer process's memory availability status.")
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 8), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('A table of one or power supply entries.')
powerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 8, 1), ).setIndexNames((0, "ASYNCOS-MAIL-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: powerSupplyEntry.setDescription('Entry containing the status of a power supply and the corresponding power supply configuration redundancy state.')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: powerSupplyIndex.setDescription('Unique index for a power supply source. This index is for SNMP purposes only; it has no intrinsic value.')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("powerSupplyNotInstalled", 1), ("powerSupplyHealthy", 2), ("powerSupplyNoAC", 3), ("powerSupplyFaulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatus.setDescription('Represents the status of a power supply. powerSupplyNotInstalled - The power supply is not detected by the chassis as being physically present. powerSupplyHealthy - The power supply is physically present and is actively servicing the appliance with power. powerSupplyNoAC - The power supply is physically present but is not actively servicing the appliance with power. powerSupplyFaulty - The power supply is failed per the vendor defined operating specifications for the power supply. ')
powerSupplyRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerSupplyRedundancyOK", 1), ("powerSupplyRedundancyLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRedundancy.setStatus('current')
if mibBuilder.loadTexts: powerSupplyRedundancy.setDescription('Represents the status of a collection of one or more power supplies. powerSupplyRedundancyOK - All power supplies are in a powerSupplyHealthy state. powerSupplyRedundancyLost - One or more power supplies are in a powerSupplyNotInstalled, powerSupplyNoAC, or powerSupplyFaulty state. ')
powerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyName.setStatus('current')
if mibBuilder.loadTexts: powerSupplyName.setDescription('A textual name for a power supply.')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 9), )
if mibBuilder.loadTexts: temperatureTable.setStatus('current')
if mibBuilder.loadTexts: temperatureTable.setDescription('A table of chassis temperature sensor states.')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 9, 1), ).setIndexNames((0, "ASYNCOS-MAIL-MIB", "temperatureIndex"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('current')
if mibBuilder.loadTexts: temperatureEntry.setDescription('An entry in the temperature sensor table representing the status of the corresponding sensor in or on the appliance.')
temperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: temperatureIndex.setStatus('current')
if mibBuilder.loadTexts: temperatureIndex.setDescription('Unique index for the temperature sensor being instrumented. This index is for SNMP purposes only; it has no intrinsic value.')
degreesCelsius = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: degreesCelsius.setStatus('current')
if mibBuilder.loadTexts: degreesCelsius.setDescription('Temperature reading for the sensor being instrumented in Centrigrade units. This is correct according to the relative accuracy of the sensor being instrumented.')
temperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureName.setStatus('current')
if mibBuilder.loadTexts: temperatureName.setDescription('Textual description for sensor being instrumented. This description is a short textual label, suitable as a human-sensible identification for the rest of the information in the entry.')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 10), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
if mibBuilder.loadTexts: fanTable.setDescription('A table of chassis fan entries.')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 10, 1), ).setIndexNames((0, "ASYNCOS-MAIL-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
if mibBuilder.loadTexts: fanEntry.setDescription('An entry in the chassis fan table with the speed of a fan in the chassis, as well as the name of the corresponding fan.')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: fanIndex.setStatus('current')
if mibBuilder.loadTexts: fanIndex.setDescription('Unique index of the chassis fan being instrumented. This index is for SNMP purposes only; it has no intrinsic value.')
fanRPMs = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRPMs.setStatus('current')
if mibBuilder.loadTexts: fanRPMs.setDescription("Speed in RPMs of a chassis fan being instrumented. The speed that corresponds to a fan failure varies depending on the vendor specification and airflow requirements for the appliance it's instrumented in, but in general when fanRPMs reports 0 RPMs the respective fan has failed.")
fanName = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanName.setStatus('current')
if mibBuilder.loadTexts: fanName.setDescription('A textual name of the chassis fan being instrumented.')
workQueueMessages = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: workQueueMessages.setStatus('current')
if mibBuilder.loadTexts: workQueueMessages.setDescription('Number of messages in the work queue.')
keyExpirationTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 12), )
if mibBuilder.loadTexts: keyExpirationTable.setStatus('current')
if mibBuilder.loadTexts: keyExpirationTable.setDescription('A table of Feature Key expiration entries.')
keyExpirationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 12, 1), ).setIndexNames((0, "ASYNCOS-MAIL-MIB", "keyExpirationIndex"))
if mibBuilder.loadTexts: keyExpirationEntry.setStatus('current')
if mibBuilder.loadTexts: keyExpirationEntry.setDescription('Entry containing a Feature Key, its expiration status, and whether or not the Feature Key is perpetual.')
keyExpirationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyExpirationIndex.setStatus('current')
if mibBuilder.loadTexts: keyExpirationIndex.setDescription('Unique index for a Feature Key applicable to the appliance. This index is for SNMP purposes only; it has no intrinsic value.')
keyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyDescription.setStatus('current')
if mibBuilder.loadTexts: keyDescription.setDescription('Textual description for a Feature Key applicable to the appliance.')
keyIsPerpetual = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 12, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keyIsPerpetual.setStatus('current')
if mibBuilder.loadTexts: keyIsPerpetual.setDescription('Boolean value represented by True if Feature Key is perpetual, or False if the Feature Key is normal or expired.')
keySecondsUntilExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keySecondsUntilExpire.setStatus('current')
if mibBuilder.loadTexts: keySecondsUntilExpire.setDescription('Seconds until the valid Feature Key expires. Only applies to non-perpetual Feature Keys, and is 0 when the Feature Key has expired.')
updateTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 13), )
if mibBuilder.loadTexts: updateTable.setStatus('current')
if mibBuilder.loadTexts: updateTable.setDescription('A table of one or more update entries.')
updateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 13, 1), ).setIndexNames((0, "ASYNCOS-MAIL-MIB", "updateIndex"))
if mibBuilder.loadTexts: updateEntry.setStatus('current')
if mibBuilder.loadTexts: updateEntry.setDescription('Entry containing a name and number of successful and failed updates for a service, including but not limited to: spam or virus definitions and timezone updates.')
updateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateIndex.setStatus('current')
if mibBuilder.loadTexts: updateIndex.setDescription('Unique index for an update service. This index is for SNMP purposes only; it has no intrinsic value.')
updateServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateServiceName.setStatus('current')
if mibBuilder.loadTexts: updateServiceName.setDescription('A textual name for an update entry.')
updates = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updates.setStatus('current')
if mibBuilder.loadTexts: updates.setDescription('The number of successful attempts that have occurred when updating a service.')
updateFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateFailures.setStatus('current')
if mibBuilder.loadTexts: updateFailures.setDescription('The number of failed attempts that have occurred when updating a service.')
oldestMessageAge = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldestMessageAge.setStatus('current')
if mibBuilder.loadTexts: oldestMessageAge.setDescription('The number of seconds the oldest message has been in queue')
outstandingDNSRequests = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outstandingDNSRequests.setStatus('current')
if mibBuilder.loadTexts: outstandingDNSRequests.setDescription('Number of DNS requests that have been sent but for which no reply has been received.')
pendingDNSRequests = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pendingDNSRequests.setStatus('current')
if mibBuilder.loadTexts: pendingDNSRequests.setDescription('Number of DNS requests waiting to be sent.')
raidEvents = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidEvents.setStatus('current')
if mibBuilder.loadTexts: raidEvents.setDescription('The total number of RAID events that have occurred since the last appliance power on event.')
raidTable = MibTable((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 18), )
if mibBuilder.loadTexts: raidTable.setStatus('current')
if mibBuilder.loadTexts: raidTable.setDescription('Unique index for a drive being instrumented in the appliance. This index is for SNMP purposes only; it has no intrinsic value.')
raidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 18, 1), ).setIndexNames((0, "ASYNCOS-MAIL-MIB", "raidIndex"))
if mibBuilder.loadTexts: raidEntry.setStatus('current')
if mibBuilder.loadTexts: raidEntry.setDescription('An entry in the RAID table representing the status of a drive attached to a RAID controller in the appliance.')
raidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidIndex.setStatus('current')
if mibBuilder.loadTexts: raidIndex.setDescription('Unique index for a drive attached to a RAID controller in the appliance. This index is for SNMP purposes only; it has no intrinsic value.')
raidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("driveHealthy", 1), ("driveFailure", 2), ("driveRebuild", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidStatus.setStatus('current')
if mibBuilder.loadTexts: raidStatus.setDescription('Represents the status of a a drive attached to a RAID controller in the appliance. driveHealthy - The corresponding drive is connected to the RAID controller and functioning as a healthy member in the RAID volume. driveFailure - The drive is either disconnected from the RAID controller, or has failed to operate within thresholds defined in vendor specifications for the drive and the controller. driveRebuild - The corresponding drive is connected to the RAID controller. It is being rebuilt according to the RAID controller specific rebuild algorithm for the current operating mode of the RAID volume. ')
raidID = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 18, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidID.setStatus('current')
if mibBuilder.loadTexts: raidID.setDescription('A textual name for a drive attached to a RAID controller in the appliance.')
raidLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 18, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidLastError.setStatus('current')
if mibBuilder.loadTexts: raidLastError.setDescription("The textual description of the last error message reported by the RAID controller or corresponding driver if one has occurred. This is 'No Error' if the corresponding drive's state is driveHealthy, or a controller or driver defined specific textual description if the drive's state is not driveHealthy.")
openFilesOrSockets = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openFilesOrSockets.setStatus('current')
if mibBuilder.loadTexts: openFilesOrSockets.setDescription('This object notes how many files or sockets are open on the appliance. In normal operating conditions, the measurement is taken at least once every 5-15 seconds.')
mailTransferThreads = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mailTransferThreads.setStatus('current')
if mibBuilder.loadTexts: mailTransferThreads.setDescription('Number of threads that perform some task related to transferring mail.')
connectionURL = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: connectionURL.setStatus('current')
if mibBuilder.loadTexts: connectionURL.setDescription('The URL which will be used to test HTTP URL connectivity.')
hsmErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 15497, 1, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hsmErrorReason.setStatus('current')
if mibBuilder.loadTexts: hsmErrorReason.setDescription('A textual reason describing the last HSM authentication error.')
resourceConservationMode = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 1)).setObjects(("ASYNCOS-MAIL-MIB", "resourceConservationReason"))
if mibBuilder.loadTexts: resourceConservationMode.setStatus('current')
if mibBuilder.loadTexts: resourceConservationMode.setDescription('Memory or queue utilization caused system to enter resource conservation mode.')
powerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 2)).setObjects(("ASYNCOS-MAIL-MIB", "powerSupplyStatus"))
if mibBuilder.loadTexts: powerSupplyStatusChange.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatusChange.setDescription('A powerSupplyStatusChange notification is sent when power supply with powerSupplyName changes states, as per one of the states available in powerSupplyStatus. This notification contains the opaque type for powerSupplyName of the power supply which has changed state.')
highTemperature = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 3)).setObjects(("ASYNCOS-MAIL-MIB", "temperatureName"))
if mibBuilder.loadTexts: highTemperature.setStatus('current')
if mibBuilder.loadTexts: highTemperature.setDescription('A highTemperature notification is sent when the temperature of an instrumented sensor in the chassis has exceeded vendor defined specifications. This notification contains the opaque type for the temperatureName of the sensor which has failed.')
fanFailure = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 4)).setObjects(("ASYNCOS-MAIL-MIB", "fanName"))
if mibBuilder.loadTexts: fanFailure.setStatus('current')
if mibBuilder.loadTexts: fanFailure.setDescription('A fanFailure notification is sent when the speed of the fan is not operating per the vendor defined specifications, as discussed in fanRPMs. This notification contains the opaque type for the fanName of the fan which has failed.')
keyExpiration = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 5)).setObjects(("ASYNCOS-MAIL-MIB", "keyDescription"))
if mibBuilder.loadTexts: keyExpiration.setStatus('current')
if mibBuilder.loadTexts: keyExpiration.setDescription('A keyExpiration notification is sent when the corresponding Feature Key is pending expiration or has expired. This notification contains the opaque type for the keyDescription of the Feature Key that is pending expiration or has expired.')
updateFailure = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 6)).setObjects(("ASYNCOS-MAIL-MIB", "updateServiceName"))
if mibBuilder.loadTexts: updateFailure.setStatus('current')
if mibBuilder.loadTexts: updateFailure.setDescription('An updateFailure notification is sent when a service fails to update properly. This notification contains the opaque type for the updateServiceName of the update service that has failed.')
raidStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 7)).setObjects(("ASYNCOS-MAIL-MIB", "raidID"))
if mibBuilder.loadTexts: raidStatusChange.setStatus('current')
if mibBuilder.loadTexts: raidStatusChange.setDescription('A raidStatusChange notification is sent when drive with raidID changes states, as per one of the states available in raidStatus. This notification contains the opaque type for raidID of the drive which has changed state.')
connectivityFailure = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 8)).setObjects(("ASYNCOS-MAIL-MIB", "connectionURL"))
if mibBuilder.loadTexts: connectivityFailure.setStatus('current')
if mibBuilder.loadTexts: connectivityFailure.setDescription('A connectivityFailure notification is sent when the URL denoted by configured connectionURL is unreachable, or the request returned an HTTP code was not between 200, inclusive, and 300, exclusive. The connectionURL configured is returned when the notification is triggered.')
memoryUtilizationExceeded = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 9)).setObjects(("ASYNCOS-MAIL-MIB", "perCentMemoryUtilization"))
if mibBuilder.loadTexts: memoryUtilizationExceeded.setStatus('current')
if mibBuilder.loadTexts: memoryUtilizationExceeded.setDescription('A memoryUtilizationExceeded notification is sent when the value in perCentMemoryUtilization has exceeded the configured memory usage threshold. The percentage that exceeded the threshold in perCentMemoryUtilization is returned via the notification.')
cpuUtilizationExceeded = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 10)).setObjects(("ASYNCOS-MAIL-MIB", "perCentCPUUtilization"))
if mibBuilder.loadTexts: cpuUtilizationExceeded.setStatus('current')
if mibBuilder.loadTexts: cpuUtilizationExceeded.setDescription('A cpuUtilizationExceeded notification is sent when the value in perCentCPUUtilization has exceeded the configured CPU usage threshold. The percentage that exceeded the threshold in perCentCPUUtilization is returned via the notification.')
hsmInitializationFailure = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 11)).setObjects(("ASYNCOS-MAIL-MIB", "hsmErrorReason"))
if mibBuilder.loadTexts: hsmInitializationFailure.setStatus('current')
if mibBuilder.loadTexts: hsmInitializationFailure.setDescription('A hsmInitializationFailure notification is sent when the Hardware Security Module card cannot be initialized. The initialization error in hsmErrorReason is returned via the notification.')
hsmResetLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 15497, 1, 1, 2, 12)).setObjects(("ASYNCOS-MAIL-MIB", "hsmErrorReason"))
if mibBuilder.loadTexts: hsmResetLoginFailure.setStatus('current')
if mibBuilder.loadTexts: hsmResetLoginFailure.setDescription('A hsmResetLoginFailure notification is sent when the Hardware Security Module card is reset due to multiple Crypto Officer login failures. The reset login error in hsmErrorReason is returned via the notification.')
mibBuilder.exportSymbols("ASYNCOS-MAIL-MIB", keyExpirationEntry=keyExpirationEntry, fanFailure=fanFailure, updateServiceName=updateServiceName, updateIndex=updateIndex, temperatureIndex=temperatureIndex, hsmResetLoginFailure=hsmResetLoginFailure, memoryAvailabilityStatus=memoryAvailabilityStatus, powerSupplyStatus=powerSupplyStatus, memoryUtilizationExceeded=memoryUtilizationExceeded, fanName=fanName, powerSupplyRedundancy=powerSupplyRedundancy, powerSupplyName=powerSupplyName, powerSupplyEntry=powerSupplyEntry, fanIndex=fanIndex, keyDescription=keyDescription, updateFailure=updateFailure, raidStatus=raidStatus, degreesCelsius=degreesCelsius, raidEvents=raidEvents, keyIsPerpetual=keyIsPerpetual, perCentCPUUtilization=perCentCPUUtilization, mailTransferThreads=mailTransferThreads, resourceConservationMode=resourceConservationMode, fanRPMs=fanRPMs, keyExpiration=keyExpiration, raidStatusChange=raidStatusChange, connectionURL=connectionURL, temperatureTable=temperatureTable, openFilesOrSockets=openFilesOrSockets, raidEntry=raidEntry, perCentDiskIOUtilization=perCentDiskIOUtilization, powerSupplyTable=powerSupplyTable, updateEntry=updateEntry, fanTable=fanTable, fanEntry=fanEntry, keyExpirationTable=keyExpirationTable, hsmErrorReason=hsmErrorReason, oldestMessageAge=oldestMessageAge, keyExpirationIndex=keyExpirationIndex, raidID=raidID, temperatureName=temperatureName, powerSupplyIndex=powerSupplyIndex, highTemperature=highTemperature, powerSupplyStatusChange=powerSupplyStatusChange, raidIndex=raidIndex, raidLastError=raidLastError, PYSNMP_MODULE_ID=asyncOSMailObjects, asyncOSMailObjects=asyncOSMailObjects, perCentMemoryUtilization=perCentMemoryUtilization, temperatureEntry=temperatureEntry, workQueueMessages=workQueueMessages, raidTable=raidTable, keySecondsUntilExpire=keySecondsUntilExpire, pendingDNSRequests=pendingDNSRequests, updates=updates, asyncOSMailNotifications=asyncOSMailNotifications, connectivityFailure=connectivityFailure, cpuUtilizationExceeded=cpuUtilizationExceeded, outstandingDNSRequests=outstandingDNSRequests, hsmInitializationFailure=hsmInitializationFailure, queueAvailabilityStatus=queueAvailabilityStatus, perCentQueueUtilization=perCentQueueUtilization, updateTable=updateTable, resourceConservationReason=resourceConservationReason, updateFailures=updateFailures)
