#
# PySNMP MIB module IPV6-STATIC-ROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPV6-STATIC-ROUTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:56:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, Gauge32, NotificationType, ObjectIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Integer32, iso, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Gauge32", "NotificationType", "ObjectIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Integer32", "iso", "Counter32", "MibIdentifier")
RowStatus, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "MacAddress")
swIPv6StaticRouteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 26))
if mibBuilder.loadTexts: swIPv6StaticRouteMIB.setLastUpdated('0706150000Z')
if mibBuilder.loadTexts: swIPv6StaticRouteMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swIPv6StaticRouteMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swIPv6StaticRouteMIB.setDescription('The structure of the IPv6 static Route and ARP table management for the proprietary enterprise.')
class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses. This is a binary string of 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

swIPv6StaticRouteCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 26, 1))
swIPv6StaticRouteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 26, 2))
swIPv6StaticRouteMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 26, 3))
swIPv6NeighborCacheMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 26, 4))
swIPv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1), )
if mibBuilder.loadTexts: swIPv6StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteTable.setDescription("This entity's IPv6 static Routing table.")
swIPv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1), ).setIndexNames((0, "IPV6-STATIC-ROUTE-MIB", "swIPv6StaticRouteDest"), (0, "IPV6-STATIC-ROUTE-MIB", "swIPv6StaticRoutePrefixLen"), (0, "IPV6-STATIC-ROUTE-MIB", "swIPv6StaticRouteInterfaceName"), (0, "IPV6-STATIC-ROUTE-MIB", "swIPv6StaticRouteNextHop"))
if mibBuilder.loadTexts: swIPv6StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteEntry.setDescription('A particular route to a particular destination, under a particular policy. Once an entry is built, it cannot be modified. That is, it just supports create and delete actions.')
swIPv6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6StaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteDest.setDescription('Specify the destination network IPv6 address for the route. If swIPv6StaticRouteDest and swIPv6StaticRoutePrefixLen are both 0, it means the default route.')
swIPv6StaticRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6StaticRoutePrefixLen.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRoutePrefixLen.setDescription('The prefix length for this IPv6 address. If swIPv6StaticRouteDest and swIPv6StaticRoutePrefixLen are both 0, it means the default route.')
swIPv6StaticRouteInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6StaticRouteInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteInterfaceName.setDescription('This object indicates the name of the interface.')
swIPv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteNextHop.setDescription('Specify the next hop address for this route.')
swIPv6StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIPv6StaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteMetric.setDescription('The routing metric for this route.')
swIPv6StaticRouteWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIPv6StaticRouteWeight.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteWeight.setDescription('Specified weight value. Used for weighted multipath. The default setting is 1.')
swIPv6StaticProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6StaticProtocol.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticProtocol.setDescription('The protocol state for this route.')
swIPv6StaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIPv6StaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteStatus.setDescription('This object indicates the status of this entry.')
swIPv6StaticRouteBkupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIPv6StaticRouteBkupState.setStatus('current')
if mibBuilder.loadTexts: swIPv6StaticRouteBkupState.setDescription('primary: Specifies the route as the primary route to the destination. backup: Specifies the route as the backup route to the destination. none: The route is not specified. If the route is not specified as the primary route or the backup route, then it will be auto-assigned by the system. The first created is the primary, the second created is the backup.')
swIPv6NeighborCacheTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 26, 4, 1), )
if mibBuilder.loadTexts: swIPv6NeighborCacheTable.setStatus('current')
if mibBuilder.loadTexts: swIPv6NeighborCacheTable.setDescription("This entity's IPv6 NeighborCache table.")
swIPv6NeighborCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 26, 4, 1, 1), ).setIndexNames((0, "IPV6-STATIC-ROUTE-MIB", "swIPv6NeighborCacheIPv6Address"), (0, "IPV6-STATIC-ROUTE-MIB", "swIPv6NeighborCacheMacAddress"), (0, "IPV6-STATIC-ROUTE-MIB", "swIPv6NeighborCacheInterfaceName"))
if mibBuilder.loadTexts: swIPv6NeighborCacheEntry.setStatus('current')
if mibBuilder.loadTexts: swIPv6NeighborCacheEntry.setDescription('A particular route to a particular destination, under a particular policy. Once an entry is built, it cannot be modified. That is, it just supports create and delete actions.')
swIPv6NeighborCacheIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 4, 1, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6NeighborCacheIPv6Address.setStatus('current')
if mibBuilder.loadTexts: swIPv6NeighborCacheIPv6Address.setDescription('The destination IPv6 address of this neighbor.')
swIPv6NeighborCacheMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6NeighborCacheMacAddress.setStatus('current')
if mibBuilder.loadTexts: swIPv6NeighborCacheMacAddress.setDescription('The MAC address of this neighbor .')
swIPv6NeighborCacheInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6NeighborCacheInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swIPv6NeighborCacheInterfaceName.setDescription('This object indicates the name of the IP interface.')
swIPv6NeighborCacheReachState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("incomplete", 1), ("reachable", 2), ("stale", 3), ("delay", 4), ("probe", 5), ("static", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIPv6NeighborCacheReachState.setStatus('current')
if mibBuilder.loadTexts: swIPv6NeighborCacheReachState.setDescription('This object indicates the reachability state of this neighbor.')
swIPv6NeighborCacheRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 26, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIPv6NeighborCacheRouteStatus.setStatus('current')
if mibBuilder.loadTexts: swIPv6NeighborCacheRouteStatus.setDescription('This object indicates the status of this entry.')
swIPv6NeighborCacheDeleteAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 26, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("static", 2), ("dynamic", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIPv6NeighborCacheDeleteAction.setStatus('current')
if mibBuilder.loadTexts: swIPv6NeighborCacheDeleteAction.setDescription('This object will delete the cached neighbor entries. all: Deletes all cached neighbor entries include static and dynamic entries. static: Deletes all the cached static neighbor entries. dynamic: Deletes all the cached dynamic neighbor entries. ')
mibBuilder.exportSymbols("IPV6-STATIC-ROUTE-MIB", swIPv6StaticRouteWeight=swIPv6StaticRouteWeight, swIPv6NeighborCacheInterfaceName=swIPv6NeighborCacheInterfaceName, swIPv6StaticRouteInterfaceName=swIPv6StaticRouteInterfaceName, swIPv6StaticRouteStatus=swIPv6StaticRouteStatus, swIPv6StaticRouteMgmt=swIPv6StaticRouteMgmt, swIPv6NeighborCacheMgmt=swIPv6NeighborCacheMgmt, swIPv6StaticRouteDest=swIPv6StaticRouteDest, swIPv6NeighborCacheIPv6Address=swIPv6NeighborCacheIPv6Address, swIPv6StaticRouteTable=swIPv6StaticRouteTable, swIPv6NeighborCacheRouteStatus=swIPv6NeighborCacheRouteStatus, swIPv6StaticRouteCtrl=swIPv6StaticRouteCtrl, swIPv6NeighborCacheTable=swIPv6NeighborCacheTable, swIPv6StaticRouteInfo=swIPv6StaticRouteInfo, swIPv6StaticRouteNextHop=swIPv6StaticRouteNextHop, swIPv6StaticRouteMetric=swIPv6StaticRouteMetric, swIPv6StaticRouteBkupState=swIPv6StaticRouteBkupState, swIPv6StaticRoutePrefixLen=swIPv6StaticRoutePrefixLen, PYSNMP_MODULE_ID=swIPv6StaticRouteMIB, swIPv6NeighborCacheEntry=swIPv6NeighborCacheEntry, swIPv6NeighborCacheMacAddress=swIPv6NeighborCacheMacAddress, Ipv6Address=Ipv6Address, swIPv6NeighborCacheReachState=swIPv6NeighborCacheReachState, swIPv6StaticRouteEntry=swIPv6StaticRouteEntry, swIPv6StaticProtocol=swIPv6StaticProtocol, swIPv6StaticRouteMIB=swIPv6StaticRouteMIB, swIPv6NeighborCacheDeleteAction=swIPv6NeighborCacheDeleteAction)
