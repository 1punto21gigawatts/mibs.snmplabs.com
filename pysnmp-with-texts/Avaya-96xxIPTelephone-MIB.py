#
# PySNMP MIB module Avaya-96xxIPTelephone-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Avaya-96xxIPTelephone-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, iso, NotificationType, ObjectIdentity, Counter64, Counter32, Gauge32, Unsigned32, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "iso", "NotificationType", "ObjectIdentity", "Counter64", "Counter32", "Gauge32", "Unsigned32", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Bits", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
avaya96xxMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2))
if mibBuilder.loadTexts: avaya96xxMIB.setLastUpdated('0908052000Z')
if mibBuilder.loadTexts: avaya96xxMIB.setOrganization('avaya')
if mibBuilder.loadTexts: avaya96xxMIB.setContactInfo('Avaya Customer Services Avaya, Inc. 211 Mt. Airy Road Basking Ridge, NJ 07920 US (A WWW: www.avaya.com Tel: +1 908 953 6000')
if mibBuilder.loadTexts: avaya96xxMIB.setDescription('MIB Module for 96xx IP Telephones as of Release S3.1 in accordance with 96xx IP RFS 110716, Issue 3.1. Copyright 2009 by Avaya Inc. All rights reserved.')
avaya = MibIdentifier((1, 3, 6, 1, 4, 1, 6889))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1))
avayaMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2))
avayaipEndpointProd = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 69))
ipEndpointMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69))
endptID = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1))
endptAGCHAND = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAGCHAND.setStatus('current')
if mibBuilder.loadTexts: endptAGCHAND.setDescription("Handset AGC status. This variable returns 1 if the endpoint's handset Automatic Gain Control capability is currently enabled, else 0.")
endptAGCHEAD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAGCHEAD.setStatus('current')
if mibBuilder.loadTexts: endptAGCHEAD.setDescription("Headset AGC status. This variable returns 1 if the endpoint's headset Automatic Gain Control capability is currently enabled, else 0.")
endptAGCSPKR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAGCSPKR.setStatus('current')
if mibBuilder.loadTexts: endptAGCSPKR.setDescription("Speakerphone AGC status. This variable returns 1 if the endpoint's speakerphone Automatic Gain Control capability is currently enabled, else 0.")
endptAPPINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAPPINUSE.setStatus('current')
if mibBuilder.loadTexts: endptAPPINUSE.setDescription('Application file name. This variable returns the name of the application file in the endpoint.')
endptAPPNAME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAPPNAME.setStatus('current')
if mibBuilder.loadTexts: endptAPPNAME.setDescription('Application file ID. This variable returns a string specifying the system-specific application file that should be used for telephone operation.')
endptBAKLIGHTOFF = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBAKLIGHTOFF.setStatus('current')
if mibBuilder.loadTexts: endptBAKLIGHTOFF.setDescription('Backlight idle timer setting. This variable returns the number of minutes of idle time, after which the telephone backlightis turned off. Range is 0-999, with a default of 120. Used in phones with backlit displays.')
endptBOOTNAME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBOOTNAME.setStatus('current')
if mibBuilder.loadTexts: endptBOOTNAME.setDescription('Boot code file ID. This variable returns a string specifying the boot code file used to initiate telephone operation.')
endptBRURI = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBRURI.setStatus('current')
if mibBuilder.loadTexts: endptBRURI.setDescription('Backup and restore URI. This variable returns a string specifying the URI used for backup and restore files.')
endptCNAPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCNAPORT.setStatus('current')
if mibBuilder.loadTexts: endptCNAPORT.setDescription('Chatter server port. This variable returns the Chatter server registration transport-layer port number (from 0 to 65535; default is 8888).')
endptCNASRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCNASRVR.setStatus('current')
if mibBuilder.loadTexts: endptCNASRVR.setDescription('CNA server addresses. This variable returns zero or more Chatter server addresses for network analysis, in dotted decimal or DNS format.')
endptCODECR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCODECR.setStatus('current')
if mibBuilder.loadTexts: endptCODECR.setDescription('Receive codec. This variable returns the designation of the Receive codec currently in use.')
endptCODECT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCODECT.setStatus('current')
if mibBuilder.loadTexts: endptCODECT.setDescription('Transmit codec. This variable returns the designation of the Transmit codec currently in use.')
endptDHCPLEASEREBIND = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPLEASEREBIND.setStatus('current')
if mibBuilder.loadTexts: endptDHCPLEASEREBIND.setDescription('Rebind time of IPADD lease. This variable returns an unsigned integer specifying the length of time at which to rebind the IPADD lease, in seconds as received by DHCP option 59 or as computed from the lease time if option 59 is is not received.')
endptDHCPLEASERENEW = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPLEASERENEW.setStatus('current')
if mibBuilder.loadTexts: endptDHCPLEASERENEW.setDescription('Renewal time of IPADD lease. This variable returns an unsigned integer specifying the length of time at which to renew the IPADD lease, in seconds as received by DHCP option 58 or as computed from the lease time if option 58 is is not received.')
endptDHCPLEASETIME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPLEASETIME.setStatus('current')
if mibBuilder.loadTexts: endptDHCPLEASETIME.setDescription('Duration of IPADD lease. This variable returns an unsigned integer specifying the length of time of the IPADD lease, in seconds as received by DHCP option 51.')
endptDNSSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDNSSRVR.setStatus('current')
if mibBuilder.loadTexts: endptDNSSRVR.setDescription('List of DNS server addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of DNS servers available for use.')
endptDOMAIN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDOMAIN.setStatus('current')
if mibBuilder.loadTexts: endptDOMAIN.setDescription('List of DNS domain labels. This variable returns a sequence of labels, separated by periods, for use as the highest-level domain in resolving DNS names in system values.')
endptDOT1X = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDOT1X.setStatus('current')
if mibBuilder.loadTexts: endptDOT1X.setDescription('Current value for 802.1X handling. This variable returns 0 if Supplicant operation is Enabled, 1 if Supplicant operation is Enabled with proxy Logoff, and 2 if Supplicant operation is Disabled. The default is 0.')
endptDSCPAUD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSCPAUD.setStatus('current')
if mibBuilder.loadTexts: endptDSCPAUD.setDescription('DSCP for audio. This variable specifies the Differentiated Services Code Point for audio currently in use (between 0 and 63 inclusive).')
endptDSCPBBE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSCPBBE.setStatus('current')
if mibBuilder.loadTexts: endptDSCPBBE.setDescription("DSCP BBE priority value. This variable returns an integer between 0 and 7 inclusive specifying the far-end endpoint's DiffServ Better than Best Effort audio priority value.")
endptDSCPSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSCPSIG.setStatus('current')
if mibBuilder.loadTexts: endptDSCPSIG.setDescription(' DSCP for signaling. This variable specifies the Differentiated Services Code Point for signaling currently in use (between 0 and 63 inclusive).')
endptDSPVERSION = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSPVERSION.setStatus('current')
if mibBuilder.loadTexts: endptDSPVERSION.setDescription('DSP Version. This variable returns a string of up to 10 characters, that identifies the version of the DSP firmware in the endpoint.')
endptFEIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFEIPADD.setStatus('current')
if mibBuilder.loadTexts: endptFEIPADD.setDescription('Audio endpoint address. This variable returns a 4-octet string specifying the address of the far-end audio endpoint currently in use.')
endptFEPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFEPORT.setStatus('current')
if mibBuilder.loadTexts: endptFEPORT.setDescription("Audio endpoint port number. This variable returns the far-end endpoint's transport layer port number for audio, currently in use.")
endptGIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGIPADD.setStatus('current')
if mibBuilder.loadTexts: endptGIPADD.setDescription('List of router addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of routers available for use.')
endptGIPINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGIPINUSE.setStatus('current')
if mibBuilder.loadTexts: endptGIPINUSE.setDescription('Router address. This variable returns a 4-octet string specifying the IP address of the router currently in use.')
endptGROUP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGROUP.setStatus('current')
if mibBuilder.loadTexts: endptGROUP.setDescription('Group identifier. This variable returns the integer corresponding to the current group identifier.')
endptHTTPDIR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHTTPDIR.setStatus('current')
if mibBuilder.loadTexts: endptHTTPDIR.setDescription('HTTP server Directory. This variable returns the path used in formation of the URI for HTTP GET operations.')
endptHTTPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHTTPSRVR.setStatus('current')
if mibBuilder.loadTexts: endptHTTPSRVR.setDescription('HTTP server IP addresses. This variable returns a comma-separated list of HTTP server IP addresses available for use, in dotted-decimal or DNS format.')
endptHTTPUSED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHTTPUSED.setStatus('current')
if mibBuilder.loadTexts: endptHTTPUSED.setDescription('HTTP initialization server IP address. This variable returns a 4-octet IP address for the HTTP server used during initialization (all zeroes if no server successfully used during initialization).')
endptICMPDU = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptICMPDU.setStatus('current')
if mibBuilder.loadTexts: endptICMPDU.setDescription('Current value for ICMP Destination message handling. This variable returns 0 if the telephone does not transmit ICMP Destination Unreachable messages are not transmitted; 1 if such messages are transmitted only in response to datagrams that designate closed UDP ports or if the designated transport protocol is not supported, and 2 if such such messages are sent only in response to datagrams that designate closed UDP or TCP ports or if the designated transport protocol is not supported. The default is 1.')
endptICMPRED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptICMPRED.setStatus('current')
if mibBuilder.loadTexts: endptICMPRED.setDescription('Current value for ICMP Redirect message handling. This variable returns 1 if received Redict messages are handled as specified in RFC 1122, Sections 3.2.2.2 and 3.3.1.2, else 0. The default is 0.')
endptIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 33), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIPADD.setStatus('current')
if mibBuilder.loadTexts: endptIPADD.setDescription("Endpoint IP address. This variable returns a 4-octet string specifying the endpoint's current IP address.")
endptJMSEC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptJMSEC.setStatus('current')
if mibBuilder.loadTexts: endptJMSEC.setDescription('Jitter buffer size. This variable returns the number of milliseconds of delay added to compensate for network jitter, from 0-300 milliseconds. The default is 10.')
endptL2Q = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2Q.setStatus('current')
if mibBuilder.loadTexts: endptL2Q.setDescription("802.1Q framing flag. This variable returns 0 if the Layer 2 802.1Q framing parameter is set to 'auto', 1 if it is set to on/enabled, else 2 for off/disabled.")
endptL2QAUD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QAUD.setStatus('current')
if mibBuilder.loadTexts: endptL2QAUD.setDescription('Audio priority. This variable returns an integer between 0 and 7 inclusive specifying the current Layer 2 802.1Q audio priority value.')
endptL2QSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QSIG.setStatus('current')
if mibBuilder.loadTexts: endptL2QSIG.setDescription('Signaling priority. This variable returns an integer between 0 and 7 inclusive specifying the current Layer 2 802.1Q signaling priority value.')
endptL2QSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QSTAT.setStatus('current')
if mibBuilder.loadTexts: endptL2QSTAT.setDescription('802.1Q tagging flag. This variable returns 0 if the Layer 2 802.1Q tagging parameter is currently OFF, else 1.')
endptL2QVLAN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QVLAN.setStatus('current')
if mibBuilder.loadTexts: endptL2QVLAN.setDescription('Administered Telephone VLAN Identifier. This variable returns an integer between 0 and 4094 inclusive specifying the administered Layer 2 802.1Q VLAN Identifier value.')
endptL2QVLANINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QVLANINUSE.setStatus('current')
if mibBuilder.loadTexts: endptL2QVLANINUSE.setDescription('Telephone VLAN Identifier in use. This variable returns an integer between 0 and 4094 inclusive specifying the current Layer 2 802.1Q VLAN Identifier value.')
endptLOGSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptLOGSRVR.setStatus('current')
if mibBuilder.loadTexts: endptLOGSRVR.setDescription('Event Log server address. This variable returns at most one IP address, in dotted-decimal or DNS format, of the server to be used for event logging. This function is intended for Avaya use, in debugging if necessary.')
endptMACADDR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMACADDR.setStatus('current')
if mibBuilder.loadTexts: endptMACADDR.setDescription("MAC address. This variable returns a 6-octet string specifying the endpoint's MAC address.")
endptMODEL = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMODEL.setStatus('current')
if mibBuilder.loadTexts: endptMODEL.setDescription('Model identifier. This variable returns a string of up to 8 ASCII characters.')
endptNETMASK = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 44), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNETMASK.setStatus('current')
if mibBuilder.loadTexts: endptNETMASK.setDescription('Subnet mask. This variable returns a 4-octet string specifying the subnet mask currently in use.')
endptPHONECC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHONECC.setStatus('current')
if mibBuilder.loadTexts: endptPHONECC.setDescription('Phone comcode. This variable returns a string of up to 9 numerical characters, specifying the comcode of the endpoint itself.')
endptPHONESN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHONESN.setStatus('current')
if mibBuilder.loadTexts: endptPHONESN.setDescription("Housing serial number. This variable returns a string of up to 18 ASCII characters, specifying the serial number on the outside of the endpoint's housing.")
endptPHY1DUPLEX = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY1DUPLEX.setStatus('current')
if mibBuilder.loadTexts: endptPHY1DUPLEX.setDescription('Ethernet line interface duplex setting. This variable returns 1 if the interface is half-duplex and 2 if the interface is full duplex.')
endptPHY1SPEED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY1SPEED.setStatus('current')
if mibBuilder.loadTexts: endptPHY1SPEED.setDescription("Ethernet interface speed. This variable returns a string specifying the endpoint's Ethernet interface speed in Mbps: '100' or '10'.")
endptPHY1STAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY1STAT.setStatus('current')
if mibBuilder.loadTexts: endptPHY1STAT.setDescription("Ethernet line interface status. This variable returns 0 if the endpoint's Ethernet line interface is currently NOT enabled, 1 if the Ethernet line interface is currently for auto-negotiation, 2 for 10Mbps half-duplex, 3 for 10Mbps full-duplex, 4 for 100Mbps half-duplex, and 5 for 100Mbps full-duplex.")
endptPHY2DUPLEX = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY2DUPLEX.setStatus('current')
if mibBuilder.loadTexts: endptPHY2DUPLEX.setDescription('Secondary Ethernet interface duplex setting. This variable returns 0 if no link is established, 1 if the interface is half-duplex,and 2 if the interface is full duplex.')
endptPHY2PRIO = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY2PRIO.setStatus('current')
if mibBuilder.loadTexts: endptPHY2PRIO.setDescription('Secondary Ethernet interface Layer 2 priority. This variable returns 0 through 7, and is used with endptVLANSEP. The default is 0.')
endptPHY2SPEED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY2SPEED.setStatus('current')
if mibBuilder.loadTexts: endptPHY2SPEED.setDescription("Secondary Ethernet speed. This variable returns a string specifying the endpoint's Ethernet interface speed in Mbps: '100' or '10' or '0'.")
endptPHY2STAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY2STAT.setStatus('current')
if mibBuilder.loadTexts: endptPHY2STAT.setDescription("Secondary Ethernet interface status. This variable returns 0 if the endpoint's Secondary Ethernet interface is currently NOT enabled, 1 if the Secondary Ethernet interface is currently for auto-negotiation, 2 for 10Mbps half-duplex, 3 for 10Mbps full-duplex, 4 for 100Mbps half-duplex, and 5 for 100Mbps full-duplex.")
endptPHY2VLAN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY2VLAN.setStatus('current')
if mibBuilder.loadTexts: endptPHY2VLAN.setDescription('Secondary Ethernet interface VLAN ID. This variable returns an integer between 0 and 4094 inclusive specifying the current Layer 2 802.1Q VLAN Identifier value for tagged frames received on the secondary Ethernet interface while VLAN separation is enabled.')
endptPORTAUD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPORTAUD.setStatus('current')
if mibBuilder.loadTexts: endptPORTAUD.setDescription("Transport-layer audio port. This variable returns the endpoint's transport layer port number for audio, currently in use.")
endptPROCPSWD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPROCPSWD.setStatus('current')
if mibBuilder.loadTexts: endptPROCPSWD.setDescription('Local Procedure Password. This variable returns 0 if the Local Procedure Password is null, else 1.')
endptPROCSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPROCSTAT.setStatus('current')
if mibBuilder.loadTexts: endptPROCSTAT.setDescription('Local Procedure flag. This variable returns 0 if Local Procedures are currently allowed for this telephone, else 1.')
endptPWBCC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 58), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPWBCC.setStatus('current')
if mibBuilder.loadTexts: endptPWBCC.setDescription('PWB comcode. This variable returns a string of up to 9 numerical characters, specifying the comcode or version number of the printed wiring board of the endpoint.')
endptPWBSN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPWBSN.setStatus('current')
if mibBuilder.loadTexts: endptPWBSN.setDescription("PWB serial number. This variable returns a string of up to 18 ASCII characters, specifying the serial number on the endpoint's printed wiring board, or N/A if the board has no serial number.")
endptRTCPCONT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRTCPCONT.setStatus('current')
if mibBuilder.loadTexts: endptRTCPCONT.setDescription('RTCP Control flag. This variable returns 0 if the RTCP control status is off/disabled, else 1.')
endptRTCPFLOW = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRTCPFLOW.setStatus('current')
if mibBuilder.loadTexts: endptRTCPFLOW.setDescription('RTCP Flowrate. This variable returns an integer between 5 and 30 inclusive specifying the RTCP flowrate in milliseconds.')
endptRTCPMON = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 62), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRTCPMON.setStatus('current')
if mibBuilder.loadTexts: endptRTCPMON.setDescription('RTCP Monitor address. This variable returns a 4-octet string specifying the IP address of the RTCP monitor currently in use.')
endptRSVPCONT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRSVPCONT.setStatus('current')
if mibBuilder.loadTexts: endptRSVPCONT.setDescription('RSVP Control flag. This variable returns 0 if the RSVP control status is off/disabled, else 1.')
endptRSVPRFRSH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRSVPRFRSH.setStatus('current')
if mibBuilder.loadTexts: endptRSVPRFRSH.setDescription('RSVP Refresh rate. This variable returns an integer between 1 and 3600 inclusive specifying the RSVP refresh rate in milliseconds.')
endptRSVPRTRY = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRSVPRTRY.setStatus('current')
if mibBuilder.loadTexts: endptRSVPRTRY.setDescription('RSVP Failed Retry flag. This variable returns 0 if the RSVP Failed Retry Reservation control status is off/disabled, else 1.')
endptRSVPPROF = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRSVPPROF.setStatus('current')
if mibBuilder.loadTexts: endptRSVPPROF.setDescription('RSVP profile flag. This variable returns 0 if the RSVP profile is guaranteed, else 1 for controlled load.')
endptSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSIG.setStatus('current')
if mibBuilder.loadTexts: endptSIG.setDescription('Signaling protocol download flag. This variable returns the integer corresponding to the current signaling protocol.')
endptSNMPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 68), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSNMPADD.setStatus('current')
if mibBuilder.loadTexts: endptSNMPADD.setDescription('SNMP source addresses. This variable returns one or more allowable source IP addresses for SNMP queries, in dotted decimal or DNS format.')
endptSTATIC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSTATIC.setStatus('current')
if mibBuilder.loadTexts: endptSTATIC.setDescription('Static programming override flag. This variable returns the integer corresponding to the current level of override permissions for static programming.')
endptTLSSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTLSSRVR.setStatus('current')
if mibBuilder.loadTexts: endptTLSSRVR.setDescription('TLS server addresses. This variable returns zero or more Transport Layer Security server addresses for software download, in dotted decimal or DNS format.')
endptTLSUSED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 71), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTLSUSED.setStatus('current')
if mibBuilder.loadTexts: endptTLSUSED.setDescription('TLS server address used. This variable returns the TLS server address from TLSSRVR used, if any, during initialization, or all zeroes if no TLS server was used.')
endptTMSEC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTMSEC.setStatus('current')
if mibBuilder.loadTexts: endptTMSEC.setDescription('Transmit buffer fill level. This variable returns the transmit buffer minimum fill level, in msec, currently in use.')
endptVLANLIST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVLANLIST.setStatus('current')
if mibBuilder.loadTexts: endptVLANLIST.setDescription('VLAN ID list. This variable returns a list of zero or more VLAN IDs.')
endptVLANSEP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVLANSEP.setStatus('current')
if mibBuilder.loadTexts: endptVLANSEP.setDescription('VLAN separation value. This variable returns 0 if frames received on the secondary Ethernet interface are unchanged before forwarding; else 1, which is the default.')
endptFONT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFONT.setStatus('current')
if mibBuilder.loadTexts: endptFONT.setDescription('Font file identifier. This variable returns a text string with the name of the font file stored in the phone, if any.')
endptLANGFILES = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 76), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptLANGFILES.setStatus('current')
if mibBuilder.loadTexts: endptLANGFILES.setDescription('Language file list. This variable returns a comma-separated text string listing the language files stored in the phone, if any.')
endptPHNEMERGNUM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNEMERGNUM.setStatus('current')
if mibBuilder.loadTexts: endptPHNEMERGNUM.setDescription('Emergency Number. This variable returns a telephone number to be dialed when an Emergency softkey is pressed.')
endptAUDIOENV = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAUDIOENV.setStatus('current')
if mibBuilder.loadTexts: endptAUDIOENV.setDescription('Audio Environment parameter. This variable returns the current value of AUDIOENV.')
endptAUDIOSTHD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAUDIOSTHD.setStatus('current')
if mibBuilder.loadTexts: endptAUDIOSTHD.setDescription('Audio Handset Sidetone parameter. This variable returns the current value of AUDIOSTHD.')
endptAUDIOSTHS = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAUDIOSTHS.setStatus('current')
if mibBuilder.loadTexts: endptAUDIOSTHS.setDescription('Audio Headset Sidetone parameter. This variable returns the current value of AUDIOSTHS.')
endptBRAUTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBRAUTH.setStatus('current')
if mibBuilder.loadTexts: endptBRAUTH.setDescription("Backup/Restore authentication control. This variable returns 0 if the call server IP address and telephone's registration password is NOT not included as credentials in an Authentication request-header; 1 (the default) if that data is included and the telephone will accept the server's digital certificate if signed by Avaya, or 2 if that data is included and the telephone will accept the server's digital certificate if signed by Avaya or a trusted certificate based on TRUSTCERTS.")
endptDHCPINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 82), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPINUSE.setStatus('current')
if mibBuilder.loadTexts: endptDHCPINUSE.setDescription("IP address of DHCP server from which phone's IP address was obtained. This variable returns four zeroes by default or when the telephone is manually programmed.")
endptDHCPLEASEEXP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPLEASEEXP.setStatus('current')
if mibBuilder.loadTexts: endptDHCPLEASEEXP.setDescription('DHCP lease expiration. This variable returns the time (in seconds) remaining until the expiration of the current DHCP lease; or 0 if the lease has expired.')
endptDHCPSTD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPSTD.setStatus('current')
if mibBuilder.loadTexts: endptDHCPSTD.setDescription('DHCP compliance flag. This variable returns 0 (the default) if the telephone ignores the DHCP standard and continues using its IP address after its lease has expired, assuming the DHCP server cannot be reached. The value 1 is returned if the DHCP standard is followed and the telephone stops using its IP address (IPADD).')
endptDHCPT1REM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPT1REM.setStatus('current')
if mibBuilder.loadTexts: endptDHCPT1REM.setDescription('DHCP lease renewal expiration. This variable returns the time (in seconds) until the start of IP address lease renewal, -1 if the lease is infinite, or 0 if the timer has expired.')
endptDHCPT2REM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPT2REM.setStatus('current')
if mibBuilder.loadTexts: endptDHCPT2REM.setDescription('DHCP lease rebinding expiration. This variable returns the time (in seconds) remaining until the start of IP address lease renewal, -1 if the lease is infinite, or 0 if the timer has expired.')
endptDOT1XSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDOT1XSTAT.setStatus('current')
if mibBuilder.loadTexts: endptDOT1XSTAT.setDescription('802.1X Supplicant status. This variable returns 0 if 802.1X Supplicant mode is Disabled; 1 (the default) if the supplicant mode is set to Unicast-only, and 2 if the supplicant mode is set to Unicast/Multicast.')
endptHTTPPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHTTPPORT.setStatus('current')
if mibBuilder.loadTexts: endptHTTPPORT.setDescription('HTTP port number. This variable returns the TCP port number used for HTTP file downloading.')
endptTLSDIR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 89), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTLSDIR.setStatus('current')
if mibBuilder.loadTexts: endptTLSDIR.setDescription('TLS Server Directory. This variable returns the path that is prepended to all file names used in HTTPS GET operations.')
endptTLSPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 90), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTLSPORT.setStatus('current')
if mibBuilder.loadTexts: endptTLSPORT.setDescription('TLS server port number. This variable returns the TCP port number used for HTTPS file downloading.')
endptMEMHEAPFREE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMEMHEAPFREE.setStatus('current')
if mibBuilder.loadTexts: endptMEMHEAPFREE.setDescription('Heap allocation. This variable returns the number of bytes of volatile memory currently allocated for, but unused by, the Heap.')
endptSSONCONTENT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 92), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSSONCONTENT.setStatus('current')
if mibBuilder.loadTexts: endptSSONCONTENT.setDescription('SSON Content. This variable returns the data portion of the DHCP site-specific option designated by NVSSON, exactly as received.')
endptTLSSRVRID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTLSSRVRID.setStatus('current')
if mibBuilder.loadTexts: endptTLSSRVRID.setDescription('TLS server ID flag. This variable returns 1 if the TLS server identity is to be checked against its certificate, otherwise 0.')
endptTRUSTCERTS = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 94), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTRUSTCERTS.setStatus('current')
if mibBuilder.loadTexts: endptTRUSTCERTS.setDescription('Trusted Certificates list. This variable returns the current trusted certificates to be downloaded; 0-255 ASCII characters, 0 or more filenames or URLs separated by commas.')
endptVOXFILES = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 95), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVOXFILES.setStatus('current')
if mibBuilder.loadTexts: endptVOXFILES.setDescription('Voice language files list. This variable returns the current list of voice langauge files to be downloaded; 0-255 ASCII characters, 0 or more filenames separated by commas.')
endptGRATARP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGRATARP.setStatus('current')
if mibBuilder.loadTexts: endptGRATARP.setDescription('Gratuitous ARP flag. This variable returns 1 oif gratuitous ARP messages are to be process; else 0.')
endptNVM = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2))
endptNVAGCHAND = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVAGCHAND.setStatus('current')
if mibBuilder.loadTexts: endptNVAGCHAND.setDescription("Non-Volatile Memory (NVM)Handset AGC status. This variable returns 1 if the endpoint's handset Automatic Gain Control capability in NVM is currently enabled, else 0.")
endptNVAGCHEAD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVAGCHEAD.setStatus('current')
if mibBuilder.loadTexts: endptNVAGCHEAD.setDescription("NVM Headset AGC status. This variable returns 1 if the endpoint's headset Automatic Gain Control capability in NVM is currently enabled, else 0.")
endptNVAGCSPKR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVAGCSPKR.setStatus('current')
if mibBuilder.loadTexts: endptNVAGCSPKR.setDescription("Speakerphone AGC status. This variable returns 1 if the endpoint's speakerphone Automatic Gain Control capability in NVM is currently enabled, else 0.")
endptNVALERT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVALERT.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVALERT.setDescription('Alerting Mode flag. This variable returns 1 if the alerting mode setting in non-volatile memory is enabled, else 0.')
endptNVAUTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVAUTH.setStatus('current')
if mibBuilder.loadTexts: endptNVAUTH.setDescription('Script file authentication flag. This variable returns 1 if the endpoint must authenticate script files, else 0.')
endptNVBRIGHTNESS = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVBRIGHTNESS.setStatus('current')
if mibBuilder.loadTexts: endptNVBRIGHTNESS.setDescription('Display Brightness setting. This variable returns the value of the display contrast setting in non-volatile memory. Range is 0-5, with 4 the default.')
endptNVCALLSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVCALLSRVR.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVCALLSRVR.setDescription('NVM IP address of call server if manually entered. Default is four zeroes.')
endptNVCHADDR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVCHADDR.setStatus('current')
if mibBuilder.loadTexts: endptNVCHADDR.setDescription('Manually-entered DHCP chaddr value. This variable returns a manually-entered value for the DHCP chaddr field as stored in non-volatile memory, if any. A Hexadecimal value with range of 0 (the default) to 999999.')
endptNVCONTRAST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVCONTRAST.setStatus('current')
if mibBuilder.loadTexts: endptNVCONTRAST.setDescription('Display Contrast setting. This variable returns the value of the display contrast setting in non-volatile memory. Range is 0-15, with 8 the default.')
endptNVFILESRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVFILESRVR.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVFILESRVR.setDescription('NVM File server address. This variable returns a 4-octet string specifying the IP address of the file server as stored in NVM.')
endptNVGIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVGIPADD.setStatus('current')
if mibBuilder.loadTexts: endptNVGIPADD.setDescription('NVM Router address. This variable returns a 4- octet string specifying the IP address of the router as stored in NVM.')
endptNVIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVIPADD.setStatus('current')
if mibBuilder.loadTexts: endptNVIPADD.setDescription("NVM IP address. This variable returns a 4-octet string specifying the endpoint's IP address stored in NVM.")
endptNVL2Q = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVL2Q.setStatus('current')
if mibBuilder.loadTexts: endptNVL2Q.setDescription("NVM 802.1Q flag. This variable returns 0 if the Layer 2 802.1Q framing parameter in NVM is set to 'auto', 1 if it is set to on/enabled, else 2 for off/disabled.")
endptNVL2QVLAN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVL2QVLAN.setStatus('current')
if mibBuilder.loadTexts: endptNVL2QVLAN.setDescription('NVM VLAN Identifier. This variable returns an integer between 0 and 4094 inclusive specifying the Layer 2 802.1Q VLAN Identifier value stored in NVM.')
endptNVLOGSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVLOGSTAT.setStatus('current')
if mibBuilder.loadTexts: endptNVLOGSTAT.setDescription("NVM Event Log flag. This variable returns 0 if the endpoint's event logging capability in NVM is currently NOT enabled, else 1.")
endptNVNETMASK = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVNETMASK.setStatus('current')
if mibBuilder.loadTexts: endptNVNETMASK.setDescription('NVM Subnet mask. This variable returns a 4-octet string specifying the subnet mask as stored in NVM.')
endptNVPHY1STAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVPHY1STAT.setStatus('current')
if mibBuilder.loadTexts: endptNVPHY1STAT.setDescription("NVM Ethernet line interface status. This variable returns 0 if the endpoint's Ethernet line interface in NVM iscurrently NOT enabled, 1 if the Ethernet line interface in NVM is currently for auto-negotiation, 2 for 10Mbps half-duplex, 3 for 10Mbps full-duplex, 4 for 100Mbps half-duplex, and 5 for 100Mbps full-duplex.")
endptNVPHY2STAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVPHY2STAT.setStatus('current')
if mibBuilder.loadTexts: endptNVPHY2STAT.setDescription("NVM Secondary Ethernet interface setting. This variable returns 0 if the endpoint's secondary Ethernet interface in NVM is currently NOT enabled(or none exists), 1 if the hub is set for auto-negotiation, 2 for 10Mbps half-duplex, 3 for 10Mbps full-duplex, 4 for 100Mbps half-duplex, and 5 for 100Mbps full-duplex.")
endptNVSSON = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVSSON.setStatus('current')
if mibBuilder.loadTexts: endptNVSSON.setDescription('NVM Site-specific option number. This variable returns an integer between 128 and 254 inclusive, specifying the SSON stored in NVM. The default is 176.')
endptNVVLANTEST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVVLANTEST.setStatus('current')
if mibBuilder.loadTexts: endptNVVLANTEST.setDescription('NVM VLAN pause parameter. This variable returns the number of seconds stored in NVM for the endppoint to wait for a DHCPOFFER message when using a non-zero VLAN ID. Valid values are integers from 0 to 999 inclusive.')
endptNVLANGFILE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVLANGFILE.setStatus('current')
if mibBuilder.loadTexts: endptNVLANGFILE.setDescription('Language file. This variable returns the name of the language file in non-volatile memory.')
endptNVTRUSTLIST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVTRUSTLIST.setStatus('current')
if mibBuilder.loadTexts: endptNVTRUSTLIST.setDescription('List of trusted certificates. This variable returns 0-255 ASCII characters: 0 or more filenames or URLs separated by commas and without intervening spaces, containing the list of downloaded trusted certificates in non-volatile memory.')
endptNVVOXFILE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVVOXFILE.setStatus('current')
if mibBuilder.loadTexts: endptNVVOXFILE.setDescription('Voice language file. This variable returns 0-32 ASCII characters: 0 or 1filename, identifying the voice language file, if any, in non-volatile memory.')
endptNVRINGTONESTYLE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVRINGTONESTYLE.setStatus('current')
if mibBuilder.loadTexts: endptNVRINGTONESTYLE.setDescription('Ringing style identifier. This variable returns the number of seconds stored in NVM for the endppoint to wait for a DHCPOFFER message when using a non-zero VLAN ID. Valid values are integers from 0 to 999 inclusive.')
endptNVSBM24BRIGHTNESS1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVSBM24BRIGHTNESS1.setStatus('current')
if mibBuilder.loadTexts: endptNVSBM24BRIGHTNESS1.setDescription('SBM24 backlight level. This variable returns the value of the backlight brightness for the first SBM24 attached, to the telephone, if any. Valid values are integers from 1 to 5 inclusive.')
endptNVSBM24BRIGHTNESS2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVSBM24BRIGHTNESS2.setStatus('current')
if mibBuilder.loadTexts: endptNVSBM24BRIGHTNESS2.setDescription('SBM24 backlight level. This variable returns the value of the backlight brightness for the second SBM24 attached, to the telephone, if any. Valid values are integers from 1 to 5 inclusive.')
endptNVSBM24BRIGHTNESS3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVSBM24BRIGHTNESS3.setStatus('current')
if mibBuilder.loadTexts: endptNVSBM24BRIGHTNESS3.setDescription('SBM24 backlight level. This variable returns the value of the backlight brightness for the third SBM24 attached, to the telephone, if any. Valid values are integers from 1 to 5 inclusive.')
endptMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3))
endptAPPSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAPPSTAT.setStatus('current')
if mibBuilder.loadTexts: endptAPPSTAT.setDescription("Application download flag. This variable returns '0' if the most recent attempt to download and store an application file was successful. This variable returns '1' if the most recent attempt to download an application file was successful but the file was not successfully stored in NVM. This variable returns '2' if the most recent attempt to download an application file was NOT successful.")
endptUPGRADESTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptUPGRADESTAT.setStatus('current')
if mibBuilder.loadTexts: endptUPGRADESTAT.setDescription("Script loading status flag. This variable returns '0' if a 96xxupgrade.txt file was successfully obtained and interpreted since the last power-up or reset. This variable returns '1' if the file was successfully obtained but NOT successfully interpreted since the last power-up or reset. This variable returns '2' if the file was NOT successfully obtained since the last power-up or reset.")
endptRecentLog = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3, 3), )
if mibBuilder.loadTexts: endptRecentLog.setStatus('current')
if mibBuilder.loadTexts: endptRecentLog.setDescription('Each entry is one of up to 75 syslog event messages added since last reset or power-up, each of which has severity code less than the value of NVLOGLOCAL. Entries are in chronological order, oldest first.')
endptRecentLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3, 3, 1), ).setIndexNames((0, "Avaya-96xxIPTelephone-MIB", "endptRecentLogText"))
if mibBuilder.loadTexts: endptRecentLogEntry.setStatus('current')
if mibBuilder.loadTexts: endptRecentLogEntry.setDescription('Each entry is one of up to 75 syslog event messages added since last reset or power-up, each of which has severity code less than the value of NVLOGLOCAL. Entries are in chronological order, oldest first.')
endptRecentLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRecentLogText.setStatus('current')
if mibBuilder.loadTexts: endptRecentLogText.setDescription('Syslog event message.')
endptResetLog = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3, 4), )
if mibBuilder.loadTexts: endptResetLog.setStatus('current')
if mibBuilder.loadTexts: endptResetLog.setDescription('Each entry is one of up to 75 syslog event messages added before the last reset or power-up, each of which has severity code less than the value of NVLOGLOCAL. Entries are in chronological order, oldest first.')
endptResetLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3, 4, 1), ).setIndexNames((0, "Avaya-96xxIPTelephone-MIB", "endptResetLogText"))
if mibBuilder.loadTexts: endptResetLogEntry.setStatus('current')
if mibBuilder.loadTexts: endptResetLogEntry.setDescription('Each entry is one of up to 75 syslog event messages added before the last reset or power-up, each of which has severity code less than the value of NVLOGLOCAL. Entries are in chronological order, oldest first.')
endptResetLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptResetLogText.setStatus('current')
if mibBuilder.loadTexts: endptResetLogText.setDescription('Syslog event message.')
endptApps = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4))
endptAUDIOPATH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAUDIOPATH.setStatus('current')
if mibBuilder.loadTexts: endptAUDIOPATH.setDescription('User audio path. This variable returns 0 if the telephone does not support a 2-way speaker or does not have a headset jack; 1 if the user audio path is with the speakerphone, and 2 if the user audio path is with the headset.')
endptENHDIALSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptENHDIALSTAT.setStatus('current')
if mibBuilder.loadTexts: endptENHDIALSTAT.setDescription('Enhanced Local Dialing status. This variable returns 0 if the Enhanced Local Dialing status is off/disabled, else 1.')
endptSUBSCRIBELIST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSUBSCRIBELIST.setStatus('current')
if mibBuilder.loadTexts: endptSUBSCRIBELIST.setDescription("96xx Web push subscription list. This variable returns a string containing one or more fully qualified URLs to which the phone's Browser application subscribes for potential pushed content.")
endptTPSLIST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTPSLIST.setStatus('current')
if mibBuilder.loadTexts: endptTPSLIST.setDescription('96xxWeb Trusted Push Server list. This variable returns a string containing one or more domains and paths in DNS format, used to determine for validation of push requests.')
endptWMLEXCEPT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLEXCEPT.setStatus('current')
if mibBuilder.loadTexts: endptWMLEXCEPT.setDescription('96xx Web Proxy Server Exception List. This variable returns a string specifying a list of one or more HTTP proxy server Exception domains, separated by commas with no intervening spaces, up to 127 total characters. Used by the 96xx Browser application.')
endptWMLHOME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLHOME.setStatus('current')
if mibBuilder.loadTexts: endptWMLHOME.setDescription('96xx Web application URL. This variable returns a URL of the Home page for the 96xx Browser application.')
endptWMLIDLETIME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLIDLETIME.setStatus('current')
if mibBuilder.loadTexts: endptWMLIDLETIME.setDescription('Web Idle Timer. This variable returns the number of minutes, from 1 to 60 inclusive, of idle activity on the telephone before the Web Idle Timer URI is displayed.')
endptWMLIDLEURI = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLIDLEURI.setStatus('current')
if mibBuilder.loadTexts: endptWMLIDLEURI.setDescription('Web Idle Timer URI. This variable returns the URI of the WML page displayed after the 96xxWeb Idle Timer expires.')
endptWMLPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLPORT.setStatus('current')
if mibBuilder.loadTexts: endptWMLPORT.setDescription('96xx Browser application TCP port. This variable returns an integer specifying the TCP port most recently used for the HTTP proxy server. Used by the 96xx Browser application.')
endptWMLPROXY = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLPROXY.setStatus('current')
if mibBuilder.loadTexts: endptWMLPROXY.setDescription('96xx Web Proxy Server. This variable returns an IP addresses, in dotted-decimal or DNS format, of an HTTP proxy server. Used by the 96xx Browser application.')
endptGUESTDURATION = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGUESTDURATION.setStatus('current')
if mibBuilder.loadTexts: endptGUESTDURATION.setDescription('96xx Guest Login Duration. This variable returns an integer specifying the number of hours from 1-12 for the Guest Login duration. The default is 2.')
endptGUESTLOGINSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGUESTLOGINSTAT.setStatus('current')
if mibBuilder.loadTexts: endptGUESTLOGINSTAT.setDescription('96xx Guest Login permission flag. This variable returns 1 if the user is allowed to initiate a Guest Login, otherwise 0.')
endptGUESTWARNING = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGUESTWARNING.setStatus('current')
if mibBuilder.loadTexts: endptGUESTWARNING.setDescription('96xx Guest Login Warning interval. This variable returns an integer specifying the number of minutes from 1-15 before the expiration of a Guest Login that a warnign screen is displayed. The default is 5.')
endptPUSHCAP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPUSHCAP.setStatus('current')
if mibBuilder.loadTexts: endptPUSHCAP.setDescription('Push capabilities. This variable returns a 4-digit integer specifying the phone administration for audio transmit, audi receive, display (web), and Top Line pushes, respectively. The valid digits are 0 (Disabled), 1 (barge-in onl ypushes of the given type Enabled) and 2 (both barge-in and normal pushes of the given type Enabled). The default is 2222.')
endptPUSHPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPUSHPORT.setStatus('current')
if mibBuilder.loadTexts: endptPUSHPORT.setDescription('Push listening port. This variable returns an integer specifying the TCP listening port most recently used for the HTTP server..')
endptQKLOGINSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptQKLOGINSTAT.setStatus('current')
if mibBuilder.loadTexts: endptQKLOGINSTAT.setDescription('Quick Login permission flag. This variable returns 1 (the default) if users are permitted to use the # button to use a previous login and password during registration, else 0.')
endptSCREENSAVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSCREENSAVER.setStatus('current')
if mibBuilder.loadTexts: endptSCREENSAVER.setDescription('Custom screen saver URL. This variable returns a filename from 0-32 characters that specifies an image displayed in lieu of the Avaya screen saver.')
endptWMLSMALL = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLSMALL.setStatus('current')
if mibBuilder.loadTexts: endptWMLSMALL.setDescription('9610 Web application URL. This variable returns a URL of the Home page for the 9610 Browser application.')
endptCLDELCALLBK = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCLDELCALLBK.setStatus('current')
if mibBuilder.loadTexts: endptCLDELCALLBK.setDescription('Call Log Callback Deletion flag. This variable returns 1 if a Missed Call Log entry is deleted from the Call Log if the user Calls that entry from the Call Log, else 0 (the default) .')
endptFBONCASCREEN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFBONCASCREEN.setStatus('current')
if mibBuilder.loadTexts: endptFBONCASCREEN.setDescription('Feature Buttons on Call Appearance List flag. This variable returns 1 if administered feature buttons are allowed to be listed on the Call Appearance Screen, else 0 (the default) .')
endptLOGBACKUP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptLOGBACKUP.setStatus('current')
if mibBuilder.loadTexts: endptLOGBACKUP.setDescription('Call Log backup permission flag. This variable returns 1 (the default) if the telephone is to automatically store and retrieve a file of Call Log entries, else 0.')
endptLOGMISSEDONCE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptLOGMISSEDONCE.setStatus('current')
if mibBuilder.loadTexts: endptLOGMISSEDONCE.setDescription('Missed Call Log Counter flag. This variable returns 1 if the telephone keeps only one Missed Call Log record for a given Name and Number, as well as a counter of Missed calls from that Name and Number, else 0 (the default).')
endptLOGUNSEEN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptLOGUNSEEN.setStatus('current')
if mibBuilder.loadTexts: endptLOGUNSEEN.setDescription('Log redirected calls permission flag. This variable returns 1 if the telephone is to create Call Log entries for calls that are redirected from the physical telephone, else 0 (the default).')
endptAPPSTATVALUE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAPPSTATVALUE.setStatus('current')
if mibBuilder.loadTexts: endptAPPSTATVALUE.setDescription('Applications permission status. This variable returns the current value of the APPSTAT parameter, which can restrict the availability of some of the telephone applications, as documented in the 9600 Series Admin Guide.')
endptOPSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptOPSTAT.setStatus('current')
if mibBuilder.loadTexts: endptOPSTAT.setDescription('Options permission status. This variable returns the current value of the OPSTAT parameter, which can restrict the availability of some of the telephone options, as documented in the 9600 Series Admin Guide.')
endptOPSTAT2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptOPSTAT2.setStatus('current')
if mibBuilder.loadTexts: endptOPSTAT2.setDescription('Options permission override parameter. This variable returns the current value of the OPSTAT2 parameter, which can override specific functionality of the OPSTAT parameter, as documented in the 9600 Series Admin Guide.')
endptAdjuncts = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5))
endptBMODS = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBMODS.setStatus('current')
if mibBuilder.loadTexts: endptBMODS.setDescription('Button Module interface usage. This variable returns the number of devicess attached (or daisy-chained) to the endpoint through the button module interface.')
endptBTADHWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBTADHWVER.setStatus('current')
if mibBuilder.loadTexts: endptBTADHWVER.setDescription('Bluetooth adapter hardware version. This variable returns the hardware version of an attached Bluetooth Adapter, if any. If none, null is returned.')
endptBTADSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBTADSTAT.setStatus('current')
if mibBuilder.loadTexts: endptBTADSTAT.setDescription('Bluetooth adapter presence. This variable returns 1 if the presence. of a Bluetooth adapter is detected, else 0.')
endptBTADSWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBTADSWVER.setStatus('current')
if mibBuilder.loadTexts: endptBTADSWVER.setDescription('Bluetooth adapter software version. This variable returns the software version of an attached Bluetooth Adapter, if any. If none, null is returned.')
endptGIGEHWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGIGEHWVER.setStatus('current')
if mibBuilder.loadTexts: endptGIGEHWVER.setDescription('GigE adapter hardware version. This variable returns the hardware version of an attached GigE Adapter, if any. If none, null is returned.')
endptGIGESTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGIGESTAT.setStatus('current')
if mibBuilder.loadTexts: endptGIGESTAT.setDescription('GigE adapter presence. This variable returns 1 if the presence. of a GigE adapter is detected, else 0.')
endptGIGESWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGIGESWVER.setStatus('current')
if mibBuilder.loadTexts: endptGIGESWVER.setDescription('GigE adapter software version. This variable returns the software version of an attached GigE Adapter, if any. If none, null is returned.')
endptSBM1HWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSBM1HWVER.setStatus('current')
if mibBuilder.loadTexts: endptSBM1HWVER.setDescription('SBM #1 hardware version. This variable returns the hardware version of the first button module, if any. If none, null is returned.')
endptSBM1SWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSBM1SWVER.setStatus('current')
if mibBuilder.loadTexts: endptSBM1SWVER.setDescription('SBM #1 software version. This variable returns the software version of the first button module, if any. If none, null is returned.')
endptSBM2HWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSBM2HWVER.setStatus('current')
if mibBuilder.loadTexts: endptSBM2HWVER.setDescription('SBM #2 hardware version. This variable returns the hardware version of the second button module, if any. If none, null is returned.')
endptSBM2SWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSBM2SWVER.setStatus('current')
if mibBuilder.loadTexts: endptSBM2SWVER.setDescription('SBM #2 software version. This variable returns the software version of the second button module, if any.')
endptSBM3HWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSBM3HWVER.setStatus('current')
if mibBuilder.loadTexts: endptSBM3HWVER.setDescription('SBM #3 hardware version. This variable returns the hardware version of the third button module, if any. If none, null is returned.')
endptSBM3SWVER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSBM3SWVER.setStatus('current')
if mibBuilder.loadTexts: endptSBM3SWVER.setDescription('SBM #3 software version. This variable returns the software version of the third button module, if any.')
endptSBMSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSBMSTAT.setStatus('current')
if mibBuilder.loadTexts: endptSBMSTAT.setDescription('Button Modules attached. This variable returns the number of Button Modules attached (or daisy-chained) to the endpoint.')
endptUSBPOWER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptUSBPOWER.setStatus('current')
if mibBuilder.loadTexts: endptUSBPOWER.setDescription('USB Power Provision. This variable returns 0 if the telephone is to disable USB power, 1 if USB power is enabled only if the telephone is Aux powered, 2 if USB power is enabled regardless of the power source, or 3 if USB power is enabled if the telephone is Aux powered or PoE Class 3.')
endptH323 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6))
endptMCIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMCIPADD.setStatus('current')
if mibBuilder.loadTexts: endptMCIPADD.setDescription('List of call server addresses. This variable returns a sequence of IP addresses, in dotted-decimal or DNS format and separated by commas, of call server IP addresses available for use.')
endptGKINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGKINUSE.setStatus('current')
if mibBuilder.loadTexts: endptGKINUSE.setDescription('Gatekeeper in use address. This variable returns a 4-octet string specifying the IP address of the gatekeeper currently in use.')
endptNVPHONEXT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVPHONEXT.setStatus('current')
if mibBuilder.loadTexts: endptNVPHONEXT.setDescription("Endpoint's phone extension. This variable returns a text string identifying the endpoint's extension, in free text format. The default value is NULL. ")
endptRASGkList = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 4), )
if mibBuilder.loadTexts: endptRASGkList.setStatus('current')
if mibBuilder.loadTexts: endptRASGkList.setDescription('Each entry is one of up to 75 gatekeeper addresses in dotted-decimal or DNS format, as downloaded from the call server during RAS. Entries are listed in the order received.')
endptRASGkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 4, 1), ).setIndexNames((0, "Avaya-96xxIPTelephone-MIB", "endptRASGkEntryData"))
if mibBuilder.loadTexts: endptRASGkEntry.setStatus('current')
if mibBuilder.loadTexts: endptRASGkEntry.setDescription('Each entry is one of up to 75 gatekeeper addresses in dotted-decimal or DNS format, as downloaded from the call server during RAS. Entries are listed in the order received.')
endptRASGkEntryData = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRASGkEntryData.setStatus('current')
if mibBuilder.loadTexts: endptRASGkEntryData.setDescription('Data for an individual RAS-provided Gatekeeper.')
endptREREGISTER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptREREGISTER.setStatus('current')
if mibBuilder.loadTexts: endptREREGISTER.setDescription('Reregistration Timer value. This variable returns the number of minutes from 1 to 120 inclusive the telephone waits between re-registration attempts if unnamed registration is not in effect. The default is 20 minutes.')
endptSERVICESTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSERVICESTAT.setStatus('current')
if mibBuilder.loadTexts: endptSERVICESTAT.setDescription('Status of phone in service. This variable returns 0 if the phone is not in service nor is attempting to register, 1 if the telephone has failed Gatekeeper Discovery, 2 if the telephone has successfully completed Gatekeeper Discovery but has not successfully completed registration, 3 if the telephone has successfully registered but does not have a TCP connection, and 4 if the telephone is registered and has a TCP connection.')
endptGKTCPPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGKTCPPORT.setStatus('current')
if mibBuilder.loadTexts: endptGKTCPPORT.setDescription('Gatekeeper Port. This variable returns 0 if the telephone is not currently registered, otherwise it returns the TCP port number on the gatekeeper with which the telephone has a signaling connection established.')
endptCERT = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 8))
endptMYCERTCAID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMYCERTCAID.setStatus('current')
if mibBuilder.loadTexts: endptMYCERTCAID.setDescription('Certificate Authority ID. This variable returns the Certificate Authority Identifier to be used in a certificate request.')
endptMYCERTCN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMYCERTCN.setStatus('current')
if mibBuilder.loadTexts: endptMYCERTCN.setDescription('Certificate Common Name. This variable returns the Common Name of the Subject of a certificate request.')
endptMYCERTDN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMYCERTDN.setStatus('current')
if mibBuilder.loadTexts: endptMYCERTDN.setDescription('Certificate Distinguished Name. This variable returns additional information (sometimes common country and organizational information) that, together with the Common Name, is used to create a Distinguished Name.')
endptMYCERTKEYLEN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMYCERTKEYLEN.setStatus('current')
if mibBuilder.loadTexts: endptMYCERTKEYLEN.setDescription('Key length. This variable returns the bit length of the public and private keys generated for a certificate request')
endptMYCERTRENEW = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMYCERTRENEW.setStatus('current')
if mibBuilder.loadTexts: endptMYCERTRENEW.setDescription('Certificate Renewal interval. This variable returns the percentage of a certificate Validity interval after which renewal procedures will be initiated.')
endptMYCERTURL = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMYCERTURL.setStatus('current')
if mibBuilder.loadTexts: endptMYCERTURL.setDescription('SCEP URL. This variable returns the URL to be used to contact an SCEP server.')
endptMYCERTWAIT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMYCERTWAIT.setStatus('current')
if mibBuilder.loadTexts: endptMYCERTWAIT.setDescription('Certificate wait flag. This variable returns 0 if the telephone will wait until a pending certificate request is complete, else 1 if it will periodically check in the background.')
endptVPN = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9))
endptALWCLRNOTIFY = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptALWCLRNOTIFY.setStatus('current')
if mibBuilder.loadTexts: endptALWCLRNOTIFY.setDescription('ISAKP Notification flag. This variable returns 1 if unencrypted ISAKMP Notification Payloads will be accepted, else 0.')
endptAUTHTYPE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAUTHTYPE.setStatus('current')
if mibBuilder.loadTexts: endptAUTHTYPE.setDescription('VPN Authentication Method. This variable returns 3 if the VPN authentication method is Pre-Shared Key (PSK); 4 if the method is PSK with XAUTH, 5 if the method is RSA signatures with XAUTH, 6 if the method is Hybrid XAUTH, and 7 if the method is RSA signatures.')
endptCFGPROF = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCFGPROF.setStatus('current')
if mibBuilder.loadTexts: endptCFGPROF.setDescription('VPN Configuration Profile. This variable returns 2 if the VPN Configuration Profile is based on Checkpoint Security Gateway, 3 if the profile is based on Cisco PSK with XAUTH, 5 if the profile is based on Juniper PSK with XAUTH, 6 if the profile is based on Generic PSK, 8 if the profile is based on Cisco Cert. with XAUTH, 9 if the profile is based on Juniper Cert. with XAUTH, or 11 if the profile is based on Nortel Contivity.')
endptCOPYTOS = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCOPYTOS.setStatus('current')
if mibBuilder.loadTexts: endptCOPYTOS.setDescription('TOS Copy flag. This variable returns 1 if the value of the TOS bits will be copied from the inner IP header to the outer IP header, else this variable returns 2 and the TOS bits of the outer IP header will be set to 0.')
endptDHCPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPSRVR.setStatus('current')
if mibBuilder.loadTexts: endptDHCPSRVR.setDescription('List of DHCP server addresses. This variable returns a sequence of zero or more IP addresses, in dotted-decimal format and separated by commas, of enterprise DHCP servers from which configuration parameters may be requested through a VPN tunnel via a DHCPINFORM message.')
endptDROPCLEAR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDROPCLEAR.setStatus('current')
if mibBuilder.loadTexts: endptDROPCLEAR.setDescription('Clear IPSec packet treatment. This variable returns 1 if received unencrypted (clear) IPsec packets are to be dropped, else 0')
endptENCAPS = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptENCAPS.setStatus('current')
if mibBuilder.loadTexts: endptENCAPS.setDescription('Encapsulation Port Numbers. This variable returns 0 if negotiation of NAT traversal is as specified in IETF RFC 3947 (except that IKE negotiation begins with a source port of 2070 and that source port continues to be used unless the source and destination port numbers are changed to 4500, 1 if UDP encapsulation of the inner IP layer will not be provided and negotiation of NAT traversal as specified in IETF RFC 3947 is not supported, 2 if negotiation of NAT traversal is as specified in IETF RFC 3947 (except IKE uses source port 2070 and the source and destination port numbers are not subsequently changed), or 4 if negotiation of NAT traversal is as specified in IETF RFC 3947.')
endptEXTDNSSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptEXTDNSSRVR.setStatus('current')
if mibBuilder.loadTexts: endptEXTDNSSRVR.setDescription('List of external DNS server addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of DNS servers available for use outside of the VPN tunnel when in VPN mode.')
endptEXTGIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptEXTGIPADD.setStatus('current')
if mibBuilder.loadTexts: endptEXTGIPADD.setDescription('List of external router addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of routers available for use outside of the VPN tunnel when in VPN mode.')
endptEXTIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptEXTIPADD.setStatus('current')
if mibBuilder.loadTexts: endptEXTIPADD.setDescription("Endpoint External IP address. This variable returns a 4-octet string specifying the endpoint's current outer IP address when in VPN mode.")
endptEXTNETMASK = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptEXTNETMASK.setStatus('current')
if mibBuilder.loadTexts: endptEXTNETMASK.setDescription('External Subnet mask. This variable returns a 4-octet string specifying the subnet mask to be used outside of the VPN tunnel when in VPN mode.')
endptIKECONFIGMODE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKECONFIGMODE.setStatus('current')
if mibBuilder.loadTexts: endptIKECONFIGMODE.setDescription('IKE Configuration flag. This variable returns 1 if the ISAKMP configuration method to be used, else 2..')
endptIKEDH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEDH.setStatus('current')
if mibBuilder.loadTexts: endptIKEDH.setDescription('In-Use Diffie-Hellman Group for IKE SA. This variable returns the negotiated IKE Phase 1 DH Group number.')
endptIKEDHGRP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEDHGRP.setStatus('current')
if mibBuilder.loadTexts: endptIKEDHGRP.setDescription('Proposed Diffie-Hellman Group for IKE SA. This variable returns 1 if the DH Group Description proposed for IKE Phase 1 is the First Oakley Group, 2 if the proposal is for the Second Oakley Group, 5 if the proposal is for the 1536-bit MODP Group, 14 if the proposal is for the 2048-bit MODP Group, and 15 if the proposal is for the 3072-bit MODP Group, else 0.')
endptIKEID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEID.setStatus('current')
if mibBuilder.loadTexts: endptIKEID.setDescription('IKE Phase 1 identity, This variable returns the identity (also known as in XAUTH as group name) used during IKE Phase 1 negotiation.')
endptIKEIDTYPE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEIDTYPE.setStatus('current')
if mibBuilder.loadTexts: endptIKEIDTYPE.setDescription('IKE SA identification type. This varable returns 1 if the Identification Type used for IKE Phase 1 is ID_IPV4_ADDR, 2 if the ID Type is ID_FQDN, 3 if the ID Type is ID_USER_FQDN, 9 if the ID Type is ID_DER_ASN1_DN, and 11 if the ID Type is ID_KEY_ID.')
endptIKEOVERTCP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEOVERTCP.setStatus('current')
if mibBuilder.loadTexts: endptIKEOVERTCP.setDescription('IKE TCP usage policy. This variable returns 0 if IKE is only to use UDP, 1 if TCP is to be tried after an IKE times out using UDP, or 2 if only TCP is to be used.')
endptIKEP1AUTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP1AUTH.setStatus('current')
if mibBuilder.loadTexts: endptIKEP1AUTH.setDescription('In-Use IKE Phase 1 authentication algorithm. This variable returns 1 if MD5 was negotiated, and 2 if SHA was negotiated.')
endptIKEP1AUTHALG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP1AUTHALG.setStatus('current')
if mibBuilder.loadTexts: endptIKEP1AUTHALG.setDescription('Proposed IKE Phase 1 authentication algorithm. This variable returns 0 if if either hash algorithm is acceptable for IKE Phase 1, 1 if MD5 is proposed, or 2 if SHA is proposed:.')
endptIKEP1ENC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP1ENC.setStatus('current')
if mibBuilder.loadTexts: endptIKEP1ENC.setDescription('In-Use IKE Phase 1 encryption algorithm. This variable returns 1 if AES-CBC-128 was negotiated, 2 if 3DES-CBC was negotiated, 3 if DES-CBC was negotiated, 4 if AES-CBC-192 was negotiated, or 5 if AES-CBC-256 was negotiated.')
endptIKEP1ENCALG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP1ENCALG.setStatus('current')
if mibBuilder.loadTexts: endptIKEP1ENCALG.setDescription('IKE Phase 1 encryption algorithm. This variable returns.0 if any encryption algoithm is acceptable for IKE Phase 1, 1 if AES-CBC-128 is proposed, 2 if 3DES-CBC is proposed, 3 if DES-CBC is proposed, 4 if AES-CBC-192 is proposed, and 5 if AES-CBC-256 is proposed.')
endptIKEP1LIFESEC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP1LIFESEC.setStatus('current')
if mibBuilder.loadTexts: endptIKEP1LIFESEC.setDescription('IKE Security Association lifetime. This variable returns the proposed number of seconds for the SA Life Duration for IKE Phase 1.')
endptIKEP2AUTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP2AUTH.setStatus('current')
if mibBuilder.loadTexts: endptIKEP2AUTH.setDescription('In-Use IKE Phase 2 authentication algorithm. This variable returns 1 if MD5 was negotiated, and 2 if SHA was negotiated.')
endptIKEP2AUTHALG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP2AUTHALG.setStatus('current')
if mibBuilder.loadTexts: endptIKEP2AUTHALG.setDescription('IKE Phase 2 authentication algorithm. This variable returns 0 if either hash algorithm is acceptable for IKE Phase 1, 1 if MD5 is proposed, or 2 if SHA is proposed:.')
endptIKEP2ENC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP2ENC.setStatus('current')
if mibBuilder.loadTexts: endptIKEP2ENC.setDescription('In-Use IKE Phase 2 encryption algorithm. This variable returns 1 if AES-CBC-128 was negotiated, 2 if 3DES-CBC was negotiated, 3 if DES-CBC was negotiated, 4 if AES-CBC-192 was negotiated, 5 if AES-CBC-256 was negotiated, or 6 if NULL encryption was negotiated.')
endptIKEP2ENCALG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP2ENCALG.setStatus('current')
if mibBuilder.loadTexts: endptIKEP2ENCALG.setDescription('IKE Phase 1 encryption algorithm. This variable returns.0 if any encryption algoithm is acceptable for IKE Phase 1, 1 if AES-CBC-128 is proposed, 2 if 3DES-CBC is proposed, 3 if DES-CBC is proposed, 4 if AES-CBC-192 is proposed, 5 if AES-CBC-256 is proposed, and 6 if NULLencryption is proposed.')
endptIKEP2LIFESEC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEP2LIFESEC.setStatus('current')
if mibBuilder.loadTexts: endptIKEP2LIFESEC.setDescription('IPsec Security Association lifetime. This variable returns the proposed number of seconds for the SA Life Duration for IKE Phase 2.')
endptIKESALIFEKB = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKESALIFEKB.setStatus('current')
if mibBuilder.loadTexts: endptIKESALIFEKB.setDescription('IKE Security Association KB Lifetime. This variable returns the IKE SA lifetime in kilobytes.')
endptIKESALIFESEC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKESALIFESEC.setStatus('current')
if mibBuilder.loadTexts: endptIKESALIFESEC.setDescription('IKE Security Association time Lifetime. This variable returns the IKE SA lifetime in seconds.')
endptIKETRANSPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKETRANSPORT.setStatus('current')
if mibBuilder.loadTexts: endptIKETRANSPORT.setDescription('In-Use IKE transport protocol. This variable returns 0 if IKE is not in use, 1 if UDP is being used for IKE transport, or 2 if TCP is being used for IKE transport.')
endptIKEXCHGMODE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIKEXCHGMODE.setStatus('current')
if mibBuilder.loadTexts: endptIKEXCHGMODE.setDescription('IKE Phase 1 negotiation mode. This variable returns 1 if the IKE Phase 1 exchange usesd is Aggressive Mode, else 2 for Main Mode. ')
endptIPSECSALIFEKB = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIPSECSALIFEKB.setStatus('current')
if mibBuilder.loadTexts: endptIPSECSALIFEKB.setDescription('IPsec Security Association KB Lifetime. This variable returns the IPsec SA lifetime in kilobytes.')
endptIPSECSALIFESEC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIPSECSALIFESEC.setStatus('current')
if mibBuilder.loadTexts: endptIPSECSALIFESEC.setDescription('IPsec Security Association time Lifetime. This variable returns the IPsec SA lifetime in seconds.')
endptIPSECSUBNET = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIPSECSUBNET.setStatus('current')
if mibBuilder.loadTexts: endptIPSECSUBNET.setDescription('VPN Tunnel IP Address ranges. This variable returns the IP address ranges that will use the VPN tunnel, with 0.0.0.0/0 meaning all IP addresses.')
endptNORTELAUTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNORTELAUTH.setStatus('current')
if mibBuilder.loadTexts: endptNORTELAUTH.setDescription('Nortel gateway authentication method. If Nortel gateway user authentication is to be used, this variable returns 1 if a local username and password are to be used; 2 if a RADIUS username and password are to be used, 3 if RADIUS SecurID is to be used, and 4 if RADIUS Axent is to be used..')
endptPFSDH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPFSDH.setStatus('current')
if mibBuilder.loadTexts: endptPFSDH.setDescription('In-Use Diffie-Hellman Group for IPsec SA. This variable returns the negotiated IKE PFS DH Group number.')
endptPFSDHGRP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPFSDHGRP.setStatus('current')
if mibBuilder.loadTexts: endptPFSDHGRP.setDescription('Diffie-Hellman Group for IPsec SA. This variable returns 1 if the DH Group Description proposed for IPSec SA is the First Oakley Group, 2 if the proposal is for the Second Oakley Group, 5 if the proposal is for the 1536-bit MODP Group, 14 if the proposal is for the 2048-bit MODP Group, and 15 if the proposal is for the 3072-bit MODP Group, else 0.')
endptPSWDTYPE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPSWDTYPE.setStatus('current')
if mibBuilder.loadTexts: endptPSWDTYPE.setDescription('VPN Password Permissions. This variable returns 1 if the password may be alphanumeric and is to be stored in non-volatile memory as the value of NVVPNPSWD, 2 if the password may be alphanumeric and is to be stored in volatile memory that will be cleared when the telephone resets, 3 if the password may be numeric-only and is to be stored in volatile memory that will be cleared mmediately after the first time the password is used (this is for use with numeric-only one-time token devices), 4 if the password may be alphanumeric and is to be stored in volatile memory that will be cleared immediately after the first time the password is used, and 5 if the password may be alphanumeric and is to be stored in volatile memory that is cleared when the user invokes VPN Sleep Mode and when the telephone resets.')
endptSGINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSGINUSE.setStatus('current')
if mibBuilder.loadTexts: endptSGINUSE.setDescription('VPN Security Gateway address. This variable returns a 4-octet string specifying the IP address of the VPN Security Gateway in use, else 0.0.0.0.')
endptSGIP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSGIP.setStatus('current')
if mibBuilder.loadTexts: endptSGIP.setDescription('VPN Security Gateway list. This variable returns the list of VPN security gateway IP addresses available to the telephone.')
endptSGVENDOR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSGVENDOR.setStatus('current')
if mibBuilder.loadTexts: endptSGVENDOR.setDescription('VPN Security Gateway Vendor. This variable returns 1 if the IKE implementation matches Juniper/NetScreen, 2 if it matches Cisco, 3 if it matches Check Point/Nokia, 5 if it matches Nortel, otherwise 4.')
endptSGVERSION = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSGVERSION.setStatus('current')
if mibBuilder.loadTexts: endptSGVERSION.setDescription('Security Gateway Version. This variable returns the version information, if any, of the Security Gateway with wich the telephone has a VPN tunnel established, else NULL.')
endptVPNMODE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVPNMODE.setStatus('current')
if mibBuilder.loadTexts: endptVPNMODE.setDescription('VPN Support Specification. This variable returns 1 if VPN functionality is enabled, else 0.')
endptVPNUSER = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVPNUSER.setStatus('current')
if mibBuilder.loadTexts: endptVPNUSER.setDescription('VPN User Name. This variable returns the user name to be used during authentication. ')
endptVPNUSERTYPE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVPNUSERTYPE.setStatus('current')
if mibBuilder.loadTexts: endptVPNUSERTYPE.setDescription('VPN User Name Permissions. This variable returns 1 if the user can change the VPN username, else 0.')
endptXAUTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 2, 9, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptXAUTH.setStatus('current')
if mibBuilder.loadTexts: endptXAUTH.setDescription('XAUTH status. This variable returns 2 if XAUTH is disabled, else 1.')
mibBuilder.exportSymbols("Avaya-96xxIPTelephone-MIB", endptSGVENDOR=endptSGVENDOR, endptNVVLANTEST=endptNVVLANTEST, endptWMLIDLEURI=endptWMLIDLEURI, endptMYCERTDN=endptMYCERTDN, endptNVNETMASK=endptNVNETMASK, endptMYCERTCAID=endptMYCERTCAID, endptPFSDHGRP=endptPFSDHGRP, endptDHCPT1REM=endptDHCPT1REM, endptResetLogEntry=endptResetLogEntry, endptICMPDU=endptICMPDU, endptDHCPT2REM=endptDHCPT2REM, endptDSCPBBE=endptDSCPBBE, endptVOXFILES=endptVOXFILES, endptRSVPCONT=endptRSVPCONT, endptL2QSIG=endptL2QSIG, endptIKEP1AUTHALG=endptIKEP1AUTHALG, endptWMLPORT=endptWMLPORT, endptIKEID=endptIKEID, endptAGCHAND=endptAGCHAND, endptBAKLIGHTOFF=endptBAKLIGHTOFF, endptDOMAIN=endptDOMAIN, endptPHY2SPEED=endptPHY2SPEED, endptTPSLIST=endptTPSLIST, endptIKEIDTYPE=endptIKEIDTYPE, endptNVLANGFILE=endptNVLANGFILE, endptALWCLRNOTIFY=endptALWCLRNOTIFY, endptRecentLogEntry=endptRecentLogEntry, endptMODEL=endptMODEL, endptHTTPPORT=endptHTTPPORT, endptCNAPORT=endptCNAPORT, endptUSBPOWER=endptUSBPOWER, endptPWBCC=endptPWBCC, endptNVSBM24BRIGHTNESS1=endptNVSBM24BRIGHTNESS1, products=products, endptDOT1XSTAT=endptDOT1XSTAT, avayaMibs=avayaMibs, endptDNSSRVR=endptDNSSRVR, endptFEPORT=endptFEPORT, endptGIGESWVER=endptGIGESWVER, endptAPPNAME=endptAPPNAME, endptSIG=endptSIG, endptMYCERTKEYLEN=endptMYCERTKEYLEN, endptIKEDHGRP=endptIKEDHGRP, endptSBM2HWVER=endptSBM2HWVER, endptIKEXCHGMODE=endptIKEXCHGMODE, endptPSWDTYPE=endptPSWDTYPE, endptJMSEC=endptJMSEC, endptEXTNETMASK=endptEXTNETMASK, endptIKESALIFESEC=endptIKESALIFESEC, endptNVCONTRAST=endptNVCONTRAST, endptPHONESN=endptPHONESN, endptRTCPCONT=endptRTCPCONT, endptRSVPPROF=endptRSVPPROF, endptXAUTH=endptXAUTH, endptNVCHADDR=endptNVCHADDR, endptENHDIALSTAT=endptENHDIALSTAT, endptPHY2DUPLEX=endptPHY2DUPLEX, endptL2Q=endptL2Q, endptFONT=endptFONT, endptBTADSTAT=endptBTADSTAT, endptSTATIC=endptSTATIC, endptEXTDNSSRVR=endptEXTDNSSRVR, endptTLSSRVRID=endptTLSSRVRID, endptWMLHOME=endptWMLHOME, endptTLSSRVR=endptTLSSRVR, endptID=endptID, endptLOGBACKUP=endptLOGBACKUP, endptNVLOGSTAT=endptNVLOGSTAT, endptSBM3HWVER=endptSBM3HWVER, endptBRAUTH=endptBRAUTH, endptNVBRIGHTNESS=endptNVBRIGHTNESS, endptTLSPORT=endptTLSPORT, endptHTTPDIR=endptHTTPDIR, endptSCREENSAVER=endptSCREENSAVER, endptBMODS=endptBMODS, endptDSCPSIG=endptDSCPSIG, endptIPADD=endptIPADD, endptWMLPROXY=endptWMLPROXY, endptOPSTAT2=endptOPSTAT2, endptBTADHWVER=endptBTADHWVER, endptBTADSWVER=endptBTADSWVER, endptTMSEC=endptTMSEC, endptAUDIOSTHS=endptAUDIOSTHS, endptMYCERTURL=endptMYCERTURL, endptLOGMISSEDONCE=endptLOGMISSEDONCE, endptPUSHCAP=endptPUSHCAP, endptMYCERTRENEW=endptMYCERTRENEW, endptICMPRED=endptICMPRED, endptNORTELAUTH=endptNORTELAUTH, endptWMLEXCEPT=endptWMLEXCEPT, endptVPNMODE=endptVPNMODE, endptCERT=endptCERT, endptTLSDIR=endptTLSDIR, endptNVAGCHEAD=endptNVAGCHEAD, endptNVAGCSPKR=endptNVAGCSPKR, endptVPNUSER=endptVPNUSER, endptAUDIOENV=endptAUDIOENV, endptPHY1SPEED=endptPHY1SPEED, endptMYCERTCN=endptMYCERTCN, endptDHCPLEASEREBIND=endptDHCPLEASEREBIND, endptGIPINUSE=endptGIPINUSE, endptGUESTDURATION=endptGUESTDURATION, endptVLANSEP=endptVLANSEP, avaya=avaya, endptAGCSPKR=endptAGCSPKR, endptIKETRANSPORT=endptIKETRANSPORT, endptL2QVLANINUSE=endptL2QVLANINUSE, endptVPNUSERTYPE=endptVPNUSERTYPE, endptIKEDH=endptIKEDH, endptNVM=endptNVM, endptEXTIPADD=endptEXTIPADD, endptApps=endptApps, endptMaintenance=endptMaintenance, endptUPGRADESTAT=endptUPGRADESTAT, endptRASGkEntryData=endptRASGkEntryData, endptIKEP1LIFESEC=endptIKEP1LIFESEC, endptIPSECSUBNET=endptIPSECSUBNET, endptL2QAUD=endptL2QAUD, endptGKINUSE=endptGKINUSE, endptRSVPRTRY=endptRSVPRTRY, PYSNMP_MODULE_ID=avaya96xxMIB, endptIKEP1ENC=endptIKEP1ENC, endptTRUSTCERTS=endptTRUSTCERTS, endptPHONECC=endptPHONECC, endptPHY2VLAN=endptPHY2VLAN, endptResetLogText=endptResetLogText, endptIPSECSALIFESEC=endptIPSECSALIFESEC, endptSERVICESTAT=endptSERVICESTAT, endptAPPSTATVALUE=endptAPPSTATVALUE, endptIKEP1AUTH=endptIKEP1AUTH, endptNVIPADD=endptNVIPADD, endptMYCERTWAIT=endptMYCERTWAIT, endptNVL2Q=endptNVL2Q, endptCODECT=endptCODECT, endptL2QSTAT=endptL2QSTAT, endptRSVPRFRSH=endptRSVPRFRSH, endptNVAUTH=endptNVAUTH, endptNVALERT=endptNVALERT, endptPORTAUD=endptPORTAUD, endptNVSBM24BRIGHTNESS3=endptNVSBM24BRIGHTNESS3, endptNVCALLSRVR=endptNVCALLSRVR, endptIKEP2AUTH=endptIKEP2AUTH, endptPHNEMERGNUM=endptPHNEMERGNUM, endptSBM1SWVER=endptSBM1SWVER, endptDHCPLEASEEXP=endptDHCPLEASEEXP, endptWMLIDLETIME=endptWMLIDLETIME, endptENCAPS=endptENCAPS, endptPHY2PRIO=endptPHY2PRIO, endptNVL2QVLAN=endptNVL2QVLAN, endptLOGSRVR=endptLOGSRVR, endptNVAGCHAND=endptNVAGCHAND, endptBRURI=endptBRURI, endptNVRINGTONESTYLE=endptNVRINGTONESTYLE, endptIKEOVERTCP=endptIKEOVERTCP, endptResetLog=endptResetLog, endptPHY2STAT=endptPHY2STAT, endptNETMASK=endptNETMASK, endptNVVOXFILE=endptNVVOXFILE, endptIKEP2AUTHALG=endptIKEP2AUTHALG, endptDROPCLEAR=endptDROPCLEAR, endptAUTHTYPE=endptAUTHTYPE, endptDOT1X=endptDOT1X, endptIKEP2LIFESEC=endptIKEP2LIFESEC, endptGIPADD=endptGIPADD, endptAdjuncts=endptAdjuncts, endptNVFILESRVR=endptNVFILESRVR, endptHTTPUSED=endptHTTPUSED, endptGRATARP=endptGRATARP, endptGROUP=endptGROUP, endptSGIP=endptSGIP, endptPROCPSWD=endptPROCPSWD, endptVLANLIST=endptVLANLIST, endptNVSBM24BRIGHTNESS2=endptNVSBM24BRIGHTNESS2, endptIKEP2ENCALG=endptIKEP2ENCALG, endptIKEP2ENC=endptIKEP2ENC, endptIKEP1ENCALG=endptIKEP1ENCALG, endptGUESTLOGINSTAT=endptGUESTLOGINSTAT, endptRASGkList=endptRASGkList, endptFBONCASCREEN=endptFBONCASCREEN, endptAPPINUSE=endptAPPINUSE, endptDSPVERSION=endptDSPVERSION, endptRecentLog=endptRecentLog, endptGKTCPPORT=endptGKTCPPORT, endptIKECONFIGMODE=endptIKECONFIGMODE, endptLOGUNSEEN=endptLOGUNSEEN, endptIPSECSALIFEKB=endptIPSECSALIFEKB, endptAPPSTAT=endptAPPSTAT, endptVPN=endptVPN, endptFEIPADD=endptFEIPADD, avaya96xxMIB=avaya96xxMIB, endptDSCPAUD=endptDSCPAUD, endptCODECR=endptCODECR, endptPHY1DUPLEX=endptPHY1DUPLEX, endptGIGESTAT=endptGIGESTAT, endptMEMHEAPFREE=endptMEMHEAPFREE, endptH323=endptH323, endptHTTPSRVR=endptHTTPSRVR, endptDHCPLEASERENEW=endptDHCPLEASERENEW, endptPROCSTAT=endptPROCSTAT, endptRecentLogText=endptRecentLogText, endptCLDELCALLBK=endptCLDELCALLBK, endptSUBSCRIBELIST=endptSUBSCRIBELIST, endptQKLOGINSTAT=endptQKLOGINSTAT, endptAUDIOPATH=endptAUDIOPATH, endptRASGkEntry=endptRASGkEntry, endptSGVERSION=endptSGVERSION, endptPWBSN=endptPWBSN, endptNVTRUSTLIST=endptNVTRUSTLIST, endptBOOTNAME=endptBOOTNAME, endptMACADDR=endptMACADDR, endptPUSHPORT=endptPUSHPORT, endptNVSSON=endptNVSSON, endptCOPYTOS=endptCOPYTOS, endptDHCPLEASETIME=endptDHCPLEASETIME, endptTLSUSED=endptTLSUSED, endptRTCPFLOW=endptRTCPFLOW, endptGUESTWARNING=endptGUESTWARNING, endptIKESALIFEKB=endptIKESALIFEKB, endptWMLSMALL=endptWMLSMALL, endptPFSDH=endptPFSDH, endptEXTGIPADD=endptEXTGIPADD, ipEndpointMIBs=ipEndpointMIBs, endptNVGIPADD=endptNVGIPADD, endptNVPHY1STAT=endptNVPHY1STAT, endptSBM1HWVER=endptSBM1HWVER, endptSSONCONTENT=endptSSONCONTENT, endptOPSTAT=endptOPSTAT, endptSBM3SWVER=endptSBM3SWVER, endptSNMPADD=endptSNMPADD, endptSBMSTAT=endptSBMSTAT, endptLANGFILES=endptLANGFILES, endptSBM2SWVER=endptSBM2SWVER, endptNVPHONEXT=endptNVPHONEXT, endptDHCPSRVR=endptDHCPSRVR, endptSGINUSE=endptSGINUSE, endptRTCPMON=endptRTCPMON, endptL2QVLAN=endptL2QVLAN, endptAUDIOSTHD=endptAUDIOSTHD, endptMCIPADD=endptMCIPADD, endptDHCPINUSE=endptDHCPINUSE, endptCFGPROF=endptCFGPROF, endptCNASRVR=endptCNASRVR, endptPHY1STAT=endptPHY1STAT, avayaipEndpointProd=avayaipEndpointProd, endptAGCHEAD=endptAGCHEAD, endptNVPHY2STAT=endptNVPHY2STAT, endptDHCPSTD=endptDHCPSTD, endptREREGISTER=endptREREGISTER, endptGIGEHWVER=endptGIGEHWVER)
