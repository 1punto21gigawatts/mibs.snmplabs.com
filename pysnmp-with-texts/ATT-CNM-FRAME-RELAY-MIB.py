#
# PySNMP MIB module ATT-CNM-FRAME-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATT-CNM-FRAME-RELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, IpAddress, MibIdentifier, Integer32, NotificationType, iso, ModuleIdentity, Unsigned32, Counter64, Bits, ObjectIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "IpAddress", "MibIdentifier", "Integer32", "NotificationType", "iso", "ModuleIdentity", "Unsigned32", "Counter64", "Bits", "ObjectIdentity", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
att_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 74)).setLabel("att-2")
att_products = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1)).setLabel("att-products")
att_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2)).setLabel("att-mgmt")
att_cnmAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1, 9)).setLabel("att-cnmAgent")
att_cnm = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 15)).setLabel("att-cnm")
att_cnm_fr = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 15, 7)).setLabel("att-cnm-fr")
attCNMfrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 1), )
if mibBuilder.loadTexts: attCNMfrConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrConfigTable.setDescription('A list of entries containing configuration information for all Frame Relay interfaces managed by this system.')
attCNMfrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 1, 1), ).setIndexNames((0, "ATT-CNM-FRAME-RELAY-MIB", "attCNMfrConfigIndex"))
if mibBuilder.loadTexts: attCNMfrConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrConfigEntry.setDescription('An entry containing configuration information for a particular Frame Relay interface.')
attCNMfrConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrConfigIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMfrMeasMaxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrMeasMaxIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrMeasMaxIntervals.setDescription('This variable identifies the maximum number of measurement intervals supported for the measurements maintained by this Frame Relay interface in the attCNMfrMeasTable.')
attCNMfrMeasIntervalLen = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrMeasIntervalLen.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrMeasIntervalLen.setDescription('This variable identifies the number of seconds that make up one complete measurement interval for for the measurements maintained by this Frame Relay interface in the attCNMfrMeasTable.')
attCNMfrPVCMeasMaxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCMeasMaxIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasMaxIntervals.setDescription('This variable identifies the maximum number of measurement intervals supported for the measurements maintained by this Frame Relay interface in the attCNMfrPVCMeasTable.')
attCNMfrPVCMeasIntervalLen = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCMeasIntervalLen.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasIntervalLen.setDescription('This variable identifies the number of seconds that make up one complete measurement interval for for the measurements maintained by this Frame Relay interface in the attCNMfrPVCMeasTable.')
attCNMfrMeasTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2), )
if mibBuilder.loadTexts: attCNMfrMeasTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrMeasTable.setDescription('A list of entries containing measurement counts, maintained during the specified measurement interval, for all Frame Relay interfaces managed by this system.')
attCNMfrMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1), ).setIndexNames((0, "ATT-CNM-FRAME-RELAY-MIB", "attCNMfrMeasIndex"), (0, "ATT-CNM-FRAME-RELAY-MIB", "attCNMfrMeasInterval"))
if mibBuilder.loadTexts: attCNMfrMeasEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrMeasEntry.setDescription('An entry containing measurement counts, maintained during the specified measurement interval, for a particular Frame Relay interface.')
attCNMfrMeasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrMeasIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrMeasIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMfrMeasInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrMeasInterval.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrMeasInterval.setDescription('This variable identifies the measurement interval number for which measurement is provided. It is a number between 1 and XX, where 1 identifies the most recently completed measurement interval and XX is the least recently completed measurement interval. The value of XX is specified by the attCNMfrMeasMaxIntervals object given in the attCNMfrConfigTable. The maximum length of each measurement interval is specified by the attCNMfrMeasIntervalLen object given in the attCNMfrConfigTable.')
attCNMfrMeasTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrMeasTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrMeasTimeStamp.setDescription('The time stamp corresponding to the end of the specified measurement interval, as measured in seconds from 00:00:00 UTC (Coordinated Universal Time) January 1, 1970. Any fraction is rounded up.')
attCNMfrMeasLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrMeasLocalTime.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrMeasLocalTime.setDescription('The time stamp corresponding to the end of the specified measurement interval. Any fraction is rounded up. It is given as a printable ASCII string showing the local time at the end of the interval.')
attCNMfrReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrReceivedOctets.setDescription('The counter associated with the number of bytes received by this Frame Relay interface during the specified measurement interval.')
attCNMfrSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrSentOctets.setDescription('The counter associated with the number of bytes sent by this Frame Relay interface during the specified measurement interval.')
attCNMfrReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrReceivedFrames.setDescription('The counter associated with the number of frames received by this Frame Relay interface during the specified measurement interval.')
attCNMfrSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrSentFrames.setDescription('The counter associated with the number of frames received by this Frame Relay interface during the specified measurement interval.')
attCNMfrBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrBadFrames.setDescription('The counter associated with the number of frames received by this interface that are faulty. A bad frame could be a frame with a non-integral number of octets, or an aborted frame, or a frame with a bad Frame Check Sequence (FCS).')
attCNMfrReceiverOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrReceiverOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrReceiverOverruns.setDescription('The counter associated with the number of receiver overruns occurred at this interface during the specified measurement interval. A receiver overrun occurs when frames are received faster than they can be stored and forwarded.')
attCNMfrPVCMeasTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3), )
if mibBuilder.loadTexts: attCNMfrPVCMeasTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasTable.setDescription('A list of entries containing PVC-level measurement counts, maintained during the specified measurement interval, for all the Frame Relay interfaces managed by this system.')
attCNMfrPVCMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3, 1), ).setIndexNames((0, "ATT-CNM-FRAME-RELAY-MIB", "attCNMfrPVCMeasIfIndex"), (0, "ATT-CNM-FRAME-RELAY-MIB", "attCNMfrPVCMeasIndex"), (0, "ATT-CNM-FRAME-RELAY-MIB", "attCNMfrPVCMeasInterval"))
if mibBuilder.loadTexts: attCNMfrPVCMeasEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasEntry.setDescription('An entry containing measurement counts, maintained during the specified measurement interval, for a particular PVC on a specific Frame Relay interface.')
attCNMfrPVCMeasIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCMeasIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasIfIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMfrPVCMeasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCMeasIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasIndex.setDescription('The DLCI number on a Frame Relay interface that identifies a unique Data Link Connection.')
attCNMfrPVCMeasInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCMeasInterval.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasInterval.setDescription('This variable identifies the measurement interval number for which measurement is provided. It is a number between 1 and XX, where 1 identifies the most recently completed measurement interval and XX is the least recently completed measurement interval.')
attCNMfrPVCMeasTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCMeasTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasTimeStamp.setDescription('The time stamp corresponding to the end of the specified measurement interval, as measured in seconds from 00:00:00 UTC (Coordinated Universal Time) January 1, 1970. Any fraction is rounded up.')
attCNMfrPVCMeasLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCMeasLocalTime.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCMeasLocalTime.setDescription('The time stamp corresponding to the end of the specified measurement interval. Any fraction is rounded up. It is given as a printable ASCII string showing the local time at the end of the interval.')
attCNMfrCongestionAtIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrCongestionAtIngress.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrCongestionAtIngress.setDescription('The counter associated with the number of times frames received by this PVC had to be discarded because buffers were unavailable or congestion control was being enforced during the specified measurement interval.')
attCNMfrCongestionAtEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrCongestionAtEgress.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrCongestionAtEgress.setDescription('The counter associated with the number of times frames sent by this PVC had to be discarded because buffers were unavailable or congestion control was being enforced during the specified measurement interval.')
attCNMfrPVCStatusTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 4), )
if mibBuilder.loadTexts: attCNMfrPVCStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCStatusTable.setDescription('A list of entries containing status information about Data Link Connections on Frame Relay interfaces managed by this system.')
attCNMfrPVCStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 4, 1), ).setIndexNames((0, "ATT-CNM-FRAME-RELAY-MIB", "attCNMfrPVCStatusIfIndex"), (0, "ATT-CNM-FRAME-RELAY-MIB", "attCNMfrPVCStatusIndex"))
if mibBuilder.loadTexts: attCNMfrPVCStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCStatusEntry.setDescription('An entry containing status information about a particular Data Link Connection on a specific Frame Relay interface.')
attCNMfrPVCStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCStatusIfIndex.setDescription('A unique value for each Frame Relay interface. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMfrPVCStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCStatusIndex.setDescription('The DLCI number on a Frame Relay interface that identifies a unique Data Link Connection.')
attCNMfrPVCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCAdminStatus.setDescription('The desired state of this Data Link Connection.')
attCNMfrPVCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMfrPVCOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMfrPVCOperStatus.setDescription('The current operational state of this Data Link Connection.')
mibBuilder.exportSymbols("ATT-CNM-FRAME-RELAY-MIB", attCNMfrPVCMeasIfIndex=attCNMfrPVCMeasIfIndex, attCNMfrReceivedOctets=attCNMfrReceivedOctets, attCNMfrMeasTimeStamp=attCNMfrMeasTimeStamp, attCNMfrCongestionAtEgress=attCNMfrCongestionAtEgress, attCNMfrPVCMeasIntervalLen=attCNMfrPVCMeasIntervalLen, att_cnmAgent=att_cnmAgent, attCNMfrPVCMeasEntry=attCNMfrPVCMeasEntry, attCNMfrMeasIndex=attCNMfrMeasIndex, attCNMfrSentFrames=attCNMfrSentFrames, att_products=att_products, attCNMfrCongestionAtIngress=attCNMfrCongestionAtIngress, attCNMfrPVCAdminStatus=attCNMfrPVCAdminStatus, attCNMfrPVCStatusIfIndex=attCNMfrPVCStatusIfIndex, attCNMfrMeasInterval=attCNMfrMeasInterval, attCNMfrReceivedFrames=attCNMfrReceivedFrames, attCNMfrBadFrames=attCNMfrBadFrames, attCNMfrConfigTable=attCNMfrConfigTable, attCNMfrMeasEntry=attCNMfrMeasEntry, attCNMfrReceiverOverruns=attCNMfrReceiverOverruns, attCNMfrPVCMeasInterval=attCNMfrPVCMeasInterval, attCNMfrConfigIndex=attCNMfrConfigIndex, attCNMfrPVCStatusEntry=attCNMfrPVCStatusEntry, attCNMfrMeasMaxIntervals=attCNMfrMeasMaxIntervals, att_mgmt=att_mgmt, attCNMfrSentOctets=attCNMfrSentOctets, attCNMfrPVCMeasMaxIntervals=attCNMfrPVCMeasMaxIntervals, attCNMfrPVCMeasTable=attCNMfrPVCMeasTable, att_cnm=att_cnm, attCNMfrPVCMeasLocalTime=attCNMfrPVCMeasLocalTime, attCNMfrConfigEntry=attCNMfrConfigEntry, attCNMfrMeasLocalTime=attCNMfrMeasLocalTime, attCNMfrPVCMeasIndex=attCNMfrPVCMeasIndex, att_2=att_2, attCNMfrPVCStatusTable=attCNMfrPVCStatusTable, att_cnm_fr=att_cnm_fr, attCNMfrMeasTable=attCNMfrMeasTable, attCNMfrPVCStatusIndex=attCNMfrPVCStatusIndex, attCNMfrPVCMeasTimeStamp=attCNMfrPVCMeasTimeStamp, attCNMfrPVCOperStatus=attCNMfrPVCOperStatus, attCNMfrMeasIntervalLen=attCNMfrMeasIntervalLen)
