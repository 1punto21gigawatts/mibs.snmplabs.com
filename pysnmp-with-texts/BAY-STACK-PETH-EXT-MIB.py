#
# PySNMP MIB module BAY-STACK-PETH-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-PETH-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:36:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Counter64, Counter32, Unsigned32, Bits, iso, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Counter64", "Counter32", "Unsigned32", "Bits", "iso", "MibIdentifier", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackPethExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 8))
bayStackPethExtMib.setRevisions(('2012-01-25 00:00', '2011-07-20 00:00', '2011-01-10 00:00', '2004-11-11 00:00', '2004-10-18 00:00', '2004-09-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackPethExtMib.setRevisionsDescriptions(('v6: Added bspePoEPowerMode (bspeScalars 3).', 'v5: Changed range of some objects: bspePethPsePortExtPowerLimit, bspePethPsePortExtMeasuredCurrent, bspePethPsePortExtMeasuredPower, bspeIpPhonePowerLimit.', 'v4: Expanded range of some objects.', 'v3: Fixed typo, bspePethMainPseExtPowerPresent should be read-only.', 'v2: Removed bspePethPsePortExtForcePower. Added bspePethPsePortExtCurrentStatus/CurrentStatusClear. Added bspePethPsePortCurrentStatusNotification.', 'v1: Initial version.',))
if mibBuilder.loadTexts: bayStackPethExtMib.setLastUpdated('201107200000Z')
if mibBuilder.loadTexts: bayStackPethExtMib.setOrganization('Avaya')
if mibBuilder.loadTexts: bayStackPethExtMib.setContactInfo('Avaya')
if mibBuilder.loadTexts: bayStackPethExtMib.setDescription("BayStack Power Over Ethernet Extension MIB Copyright 2004-2011 Avaya All rights reserved. This Avaya SNMP Management Information Base Specification embodies Avaya's confidential and proprietary intellectual property. Avaya retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Avaya makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
bspeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 8, 0))
bspeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 8, 1))
bspePethPsePortExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1), )
if mibBuilder.loadTexts: bspePethPsePortExtTable.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtTable.setDescription('This table extends the pethPsePortTable.')
bspePethPsePortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1), ).setIndexNames((0, "BAY-STACK-PETH-EXT-MIB", "bspePethPsePortExtGroupIndex"), (0, "BAY-STACK-PETH-EXT-MIB", "bspePethPsePortExtIndex"))
if mibBuilder.loadTexts: bspePethPsePortExtEntry.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtEntry.setDescription('An entry that extends pethPsePortEntry.')
bspePethPsePortExtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: bspePethPsePortExtGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtGroupIndex.setDescription('This object is equal to the value of pethPsePortGroupIndex of the entry in the pethPsePortTable extended by this entry.')
bspePethPsePortExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: bspePethPsePortExtIndex.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtIndex.setDescription('This object is equal to the value of pethPsePortIndex of the entry in the pethPsePortTable extended by this entry.')
bspePethPsePortExtPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 32))).setUnits('watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspePethPsePortExtPowerLimit.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtPowerLimit.setDescription('DTE Power limit per port.')
bspePethPsePortExtDetailedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("poweredResistiveDiscovery", 1), ("poweredCapacitiveDiscovery", 2), ("poweredCiscoLegacyDiscovery", 3), ("invalidPD", 4), ("overloadFault", 5), ("underloadFault", 6), ("uvovFault", 7), ("powerManaged", 8), ("limitOverloadFault", 9), ("discoveryDisabled", 10), ("unableToResetTps", 11), ("unableToInitializeTps", 12), ("uninitialized", 13), ("nonexistent", 14), ("otherFault", 15), ("detectionStatus", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtDetailedStatus.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtDetailedStatus.setDescription("Port Status. Valid values for Harrier: 4,8,9,16. Valid values for CondorPoE: 1-16. The object bspePsePortExtDetailedStatus details the status of the port when pethPsePortDetectionStatus is either deliveringPower(3), fault(4), or otherFault(6). - When the value of pethPsePortDetectionStatus is deliveringPower(3), the value of bspePethPsePortExtDetailedStatus should be a value in the range 1-3 (detailes the discovery scheme that was used to detect the PD that is currently powered). - When the value of pethPsePortDetectionStatus is fault(4) or otherFault(6), the value of bspePethPsePortExtDetailedStatus should be some fault value in the range: 4-15. - When the value of pethPsePortDetectionStatus is *not* deliveringPower(3), fault(4), nor otherFault(6), then the value of bspePethPsePortExtDetailedStatus should be detectionStatus(16). A value of poweredResistiveDiscovery(1) indicates that a PD device was detected on this port using the IEEE 802.3af standard compliant Resistor signature discovery scheme. A value of poweredCapacitiveDiscovery(2) indicates that a PD device was detected on this port using the Capacitive detection scheme. A value of poweredCiscoLegacyDiscovery(3) indicates that a PD device was detected on this port using the CiscoIP detection scheme. A value of invalidPd(4) indicates that a non-PoE device has been detected; no power will be supplied. A value of overloadFault(5) indicates that the port has exceeded its port power limit. A value of underloadFault(6) indicates that the connected PD device needs less power than the port lower power limit. A value of uvovFault(7) indicates that an under-voltage / over-voltage fault has occured. A value of powerManaged(8) indicates that the port is discovered and ready to power up, except that the power manager has not decided to power it up yet. This could be because of a power up delay, or it could be because there is no power available. Port does not supply power in order to keep active higher priority ports. A value of limitOverloadFault(9) indicates that the connected PD device needs more power than the port power limit; no power will be supplied. A value of discoveryDisabled(10) indicates that the port is enabled, but no discovery method has been enabled. A value of unableToResetTps(11) indicates that the TPS2384 (PoE Subsystem) could not be reset. A value of unableToInitializeTps(12) indicates that the TPS2384 (PoE Subsystem) could not be initialized. A value of unitialized(13) indicates that port PoE settings have not beed initialized. A value of nonexistent(14) indicates the port doesn't exist. This is used for the last 24 ports on 24 port systems. A value of otherFault(15) indicates that other fault has occured. A value of detectionStatus(16) indicates that the value of pethPsePortDetectionStatus should be disabled(1), searching(2), or test(5).")
bspePethPsePortExtMeasuredVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 5), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(400, 580), ))).setUnits('decivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredVoltage.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredVoltage.setDescription('Measured Port Voltage. When the port is not supplying power, the value will be 0.')
bspePethPsePortExtMeasuredCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 660))).setUnits('milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredCurrent.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredCurrent.setDescription('Measured Port Current.')
bspePethPsePortExtMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredPower.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtMeasuredPower.setDescription('Measured Port Power. This value may not exceed 1000 times the current value of bspePethPsePortExtPowerLimit.')
bspePethPsePortExtCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("underCurrent", 2), ("overCurrent", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethPsePortExtCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtCurrentStatus.setDescription('Describes a current port status related to the power generation. The value ok(1) indicates neither an undercurrent nor an overcurrent condition was detected since the attribute was last cleared. The value underCurrent(2) indicates that the port current is below the minimal value. The value overCurrent(3) indicates that the port current exceeds the maximal value. The value both(4) indicates both underCurrent and overCurrent. This attribute is cleared through the bspePethPsePortExtCurrentStatusClear action.')
bspePethPsePortExtCurrentStatusClear = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspePethPsePortExtCurrentStatusClear.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortExtCurrentStatusClear.setDescription('Setting the value of this object to clear(1) clears the value of bspePethPsePortExtCurrentStatus, and enables the agent to update it. Read operation this value will be off(2).')
bspePethMainPseExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2), )
if mibBuilder.loadTexts: bspePethMainPseExtTable.setStatus('current')
if mibBuilder.loadTexts: bspePethMainPseExtTable.setDescription('This table extends the pethMainPseTable.')
bspePethMainPseExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-PETH-EXT-MIB", "bspePethMainPseExtGroupIndex"))
if mibBuilder.loadTexts: bspePethMainPseExtEntry.setStatus('current')
if mibBuilder.loadTexts: bspePethMainPseExtEntry.setDescription('An entry that extends pethMainPseEntry. ')
bspePethMainPseExtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: bspePethMainPseExtGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bspePethMainPseExtGroupIndex.setDescription('This object is equal to the value of pethMainPseGroupIndex of the entry in the pethMainPseTable extended by this entry.')
bspePethMainPseExtPowerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acOnly", 1), ("dcOnly", 2), ("acDc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bspePethMainPseExtPowerPresent.setStatus('current')
if mibBuilder.loadTexts: bspePethMainPseExtPowerPresent.setDescription('Current Power Source Present. Available power sources are AC and DC. A value of acOnly(1) indicates that the only power supply is AC. A value of dcOnly(2) indicates that the only power supply is DC. A value of acDc(3) indicates that there are two power supplies; both AC and DC are supplying power.')
bspePethMainPseExtDisconnectScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acDisconnect", 1), ("dcDisconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspePethMainPseExtDisconnectScheme.setStatus('current')
if mibBuilder.loadTexts: bspePethMainPseExtDisconnectScheme.setDescription('When a low power draw is detected on a port, power will be turned off on that port. As a detection mechanism it can be used either AC Disconnect or DC Disconnect. A value of acDisconnect(1): AC impedance is monitored on each port; DC supply will be turned off on a port with a too high value of AC impedance. A value of dcDisconnect(2): DC current is monitored on each port; DC supply will be turned off on a port with a too low value of DC current.')
bspeScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 3))
bspeIpPhonePowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 32), ))).setUnits('watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspeIpPhonePowerLimit.setStatus('current')
if mibBuilder.loadTexts: bspeIpPhonePowerLimit.setDescription('Global power limit for IP phones. This value, if valid, applies for an IP phone discovered on a port. A value of 0 means not applicable; bspePethPsePortExtPowerLimit object should be used instead.')
bspeIpPhonePowerPriority = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3), ("notApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspeIpPhonePowerPriority.setStatus('current')
if mibBuilder.loadTexts: bspeIpPhonePowerPriority.setDescription('Global power priority for IP phones. This object controls the priority of a port that connects an IP phone device. If the value is notApplicable(4), pethPsePortPowerPriority object should be used instead.')
bspePoEPowerMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 8, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowPowerBudget", 1), ("highPowerBudget", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bspePoEPowerMode.setStatus('current')
if mibBuilder.loadTexts: bspePoEPowerMode.setDescription('Power over Ethernet Power Mode comfiguration: lowPowerBudget (1) Set PoE Low power budget and fanless mode. highPowerBudget (2) Set PoE High power budget and normal fans Mode.')
bspePethPsePortCurrentStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 8, 0, 1)).setObjects(("BAY-STACK-PETH-EXT-MIB", "bspePethPsePortExtCurrentStatus"))
if mibBuilder.loadTexts: bspePethPsePortCurrentStatusNotification.setStatus('current')
if mibBuilder.loadTexts: bspePethPsePortCurrentStatusNotification.setDescription('This notification indicate Port Change Status and it will be sent on every status change.')
bspeIpPhonePowerLimitNotification = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 8, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("BAY-STACK-PETH-EXT-MIB", "bspeIpPhonePowerLimit"))
if mibBuilder.loadTexts: bspeIpPhonePowerLimitNotification.setStatus('current')
if mibBuilder.loadTexts: bspeIpPhonePowerLimitNotification.setDescription('This notification indicates the dynamic change of the power limit for a port, due to the discovering of an IP phone. This notification type is generating only if bspeIpPhonePowerLimit object is applicable.')
bspeIpPhonePowerPriorityNotification = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 8, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("BAY-STACK-PETH-EXT-MIB", "bspeIpPhonePowerPriority"))
if mibBuilder.loadTexts: bspeIpPhonePowerPriorityNotification.setStatus('current')
if mibBuilder.loadTexts: bspeIpPhonePowerPriorityNotification.setDescription('This notification indicates the dynamic change of the power priority for a port, due to the discovering of an IP phone. This notification type is generating only if bspeIpPhonePowerPriority object is applicable.')
mibBuilder.exportSymbols("BAY-STACK-PETH-EXT-MIB", bspePethPsePortExtMeasuredVoltage=bspePethPsePortExtMeasuredVoltage, bspePethPsePortExtTable=bspePethPsePortExtTable, bspeIpPhonePowerLimit=bspeIpPhonePowerLimit, bspeIpPhonePowerLimitNotification=bspeIpPhonePowerLimitNotification, bspePethPsePortExtCurrentStatus=bspePethPsePortExtCurrentStatus, bspePethMainPseExtTable=bspePethMainPseExtTable, bspeIpPhonePowerPriority=bspeIpPhonePowerPriority, PYSNMP_MODULE_ID=bayStackPethExtMib, bayStackPethExtMib=bayStackPethExtMib, bspePethPsePortExtGroupIndex=bspePethPsePortExtGroupIndex, bspePethMainPseExtPowerPresent=bspePethMainPseExtPowerPresent, bspeIpPhonePowerPriorityNotification=bspeIpPhonePowerPriorityNotification, bspePethMainPseExtGroupIndex=bspePethMainPseExtGroupIndex, bspeScalars=bspeScalars, bspePethMainPseExtEntry=bspePethMainPseExtEntry, bspeNotifications=bspeNotifications, bspePoEPowerMode=bspePoEPowerMode, bspeObjects=bspeObjects, bspePethPsePortExtDetailedStatus=bspePethPsePortExtDetailedStatus, bspePethPsePortExtEntry=bspePethPsePortExtEntry, bspePethPsePortCurrentStatusNotification=bspePethPsePortCurrentStatusNotification, bspePethPsePortExtIndex=bspePethPsePortExtIndex, bspePethPsePortExtMeasuredPower=bspePethPsePortExtMeasuredPower, bspePethMainPseExtDisconnectScheme=bspePethMainPseExtDisconnectScheme, bspePethPsePortExtMeasuredCurrent=bspePethPsePortExtMeasuredCurrent, bspePethPsePortExtCurrentStatusClear=bspePethPsePortExtCurrentStatusClear, bspePethPsePortExtPowerLimit=bspePethPsePortExtPowerLimit)
