#
# PySNMP MIB module EXTREME-STP-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
BridgeId, dot1dStpPort, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "dot1dStpPort", "Timeout")
extremeAgent, PortList = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent", "PortList")
extremeVlanIfIndex, = mibBuilder.importSymbols("EXTREME-VLAN-MIB", "extremeVlanIfIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
extremeStp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 17))
if mibBuilder.loadTexts: extremeStp.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremeStp.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeStp.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeStp.setDescription('Extreme STP extensions')
extremeStpDomainTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1), )
if mibBuilder.loadTexts: extremeStpDomainTable.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainTable.setDescription('This table contains STP information per STP domain.')
extremeStpDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1), ).setIndexNames((0, "EXTREME-STP-EXTENSIONS-MIB", "extremeStpDomainStpdInstance"))
if mibBuilder.loadTexts: extremeStpDomainEntry.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainEntry.setDescription('An entry in the extremeStpDomain Table.')
extremeStpDomainStpdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeStpDomainStpdInstance.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainStpdInstance.setDescription('The unique identifier of this STP domain.')
extremeStpDomainStpdName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainStpdName.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainStpdName.setDescription('The name associated with this STP domain.')
extremeStpDomainStpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainStpEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainStpEnabled.setDescription('The Enabled/Disabled state of STP on this STP domain.')
extremeStpDomainRstpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainRstpEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainRstpEnabled.setDescription('The Enabled/Disabled state of Rapid STP on this STP domain.')
extremeStpDomainStpdTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainStpdTag.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainStpdTag.setDescription('The StpdId of this STP domain which appears as the 802.1Q tag. Therefore, it must be the VLAN tag of one of the wholly-contained VLANs of this STP domain.')
extremeStpDomainNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainNumPorts.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainNumPorts.setDescription('The number of physical ports belonging to this STP domain.')
extremeStpDomainBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainBridgeId.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainBridgeId.setDescription('The bridge identifier of this bridge for this STP domain.')
extremeStpDomainBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainBridgePriority.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainBridgePriority.setDescription('The bridge priority of this bridge for this STP domain.')
extremeStpDomainDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainDesignatedRoot.setDescription('The root bridge identifier for this STP domain as determined by the STP running on this bridge for this STP domain')
extremeStpDomainRootPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainRootPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainRootPortIfIndex.setDescription('The port ifIndex of the root port of this bridge for this STP domain.')
extremeStpDomainRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainRootCost.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainRootCost.setDescription('The cost of the path from this bridge to the root bridge of this STP domain')
extremeStpDomainRRFailoverEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainRRFailoverEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainRRFailoverEnabled.setDescription('The Enabled/Disabled state of Rapid Root Failover for this bridge on this STP domain.')
extremeStpDomainMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainMaxAge.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainMaxAge.setDescription('The maximum allowable age, in units of hundredths of a second, of STP information learned by this bridge for this STP domain, after which it is discarded. This is the value currently being used by the bridge.')
extremeStpDomainHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainHelloTime.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainHelloTime.setDescription('The time, in hundredths of a second, between successive transmissions of Configuration BPDUs when this bridge is(or is trying to become) the root bridge for this STP domain. This is the value currently being used by this bridge.')
extremeStpDomainForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 15), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainForwardDelay.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainForwardDelay.setDescription('The forward delay time, in hundredths of a second, currently being used by this bridge on this STP domain.')
extremeStpDomainBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainBridgeMaxAge.setDescription('This is the value of MaxAge used by all other bridges in this STP domain when this bridge is the root bridge.')
extremeStpDomainBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainBridgeHelloTime.setDescription('This is the value of HelloTime used by all other bridges in this STP domain when this bridge is the root bridge.')
extremeStpDomainBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 18), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainBridgeForwardDelay.setDescription('This is the value of ForwardDelay used by all other bridges in this STP domain when this bridge is the root bridge.')
extremeStpDomainHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 19), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainHoldTime.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainHoldTime.setDescription('This is the Hold Time, in hundredths of a second, for this STP domain.')
extremeStpDomainTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainTopChanges.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainTopChanges.setDescription('The number of topology changes detected by this bridge for this STP domain since the management entity was initialized or reset.')
extremeStpDomainTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainTimeSinceTopologyChange.setDescription('The time, in hundredths of a second, since a topology change was last detected by this bridge for this STP domain.')
extremeStpDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 1, 1, 22), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremeStpDomainRowStatus.setDescription('The status of this entry, as per standard RowStatus conventions.')
extremeStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2), )
if mibBuilder.loadTexts: extremeStpPortTable.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortTable.setDescription('This table contains port-specific information per STP domain.')
extremeStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1), ).setIndexNames((0, "EXTREME-STP-EXTENSIONS-MIB", "extremeStpDomainStpdInstance"), (0, "EXTREME-STP-EXTENSIONS-MIB", "extremeStpPortPortIfIndex"))
if mibBuilder.loadTexts: extremeStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortEntry.setDescription('An entry in the extremeStpPort table.')
extremeStpPortPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: extremeStpPortPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortPortIfIndex.setDescription('The ifIndex of the physical port for which this entry contains STP information.')
extremeStpPortStpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortStpEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortStpEnabled.setDescription('The enabled/disabled state of this STP instance on this port.')
extremeStpPortPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot1d", 1), ("emistp", 2), ("pvstp", 3), ("dot1w", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortPortMode.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortPortMode.setDescription('The port mode of this port in this STP domain.')
extremeStpPortPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortPortState.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortPortState.setDescription('The port state of this port in this STP domain.')
extremeStpPortPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortPortPriority.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortPortPriority.setDescription('The port priority of this port in this STP domain.')
extremeStpPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortPortId.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortPortId.setDescription('The port identifier of this port in this STP domain.')
extremeStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortPathCost.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortPathCost.setDescription('The path cost of this port for this STP domain.')
extremeStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortDesignatedCost.setDescription('The path cost, for this STP domain, of the Designated Port of the segment connected to this port.')
extremeStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortDesignatedRoot.setDescription('The root bridge identifier, for this STP domain, that is sent in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which this port is attached.')
extremeStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortDesignatedBridge.setDescription('The bridge identifier for the bridge considered to be the Designated Bridge, in this STP domain, for the segment connected to this port.')
extremeStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortDesignatedPort.setDescription("The port identifier of the Designated Port on this port's segment, for this STP domain.")
extremeStpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 2, 1, 12), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremeStpPortRowStatus.setDescription('The status of this entry, as per standard RowStatus conventions.')
extremeStpVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 17, 3), )
if mibBuilder.loadTexts: extremeStpVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: extremeStpVlanPortTable.setDescription('This table contains information of the ports belonging to a STP domain on a per VLAN basis.')
extremeStpVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 17, 3, 1), ).setIndexNames((0, "EXTREME-VLAN-MIB", "extremeVlanIfIndex"), (0, "EXTREME-STP-EXTENSIONS-MIB", "extremeStpDomainStpdInstance"))
if mibBuilder.loadTexts: extremeStpVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: extremeStpVlanPortEntry.setDescription('An entry in the extremeStpVlanPort table.')
extremeStpVlanPortPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 3, 1, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpVlanPortPortMask.setStatus('current')
if mibBuilder.loadTexts: extremeStpVlanPortPortMask.setDescription('The list of ports in this STP domain and in this VLAN.')
extremeStpVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 17, 3, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStpVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremeStpVlanPortRowStatus.setDescription('The status of this entry, as per standard RowStatus conventions.')
extremeStpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 17, 4))
extremeStpTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 17, 4, 0))
extremeStpEdgePortBlocked = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 17, 4, 0, 1)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: extremeStpEdgePortBlocked.setStatus('current')
if mibBuilder.loadTexts: extremeStpEdgePortBlocked.setDescription("The extremeStpEdgePortBlocked notification is generated when the STP's edge port is Blocked due to the misconfiguration")
mibBuilder.exportSymbols("EXTREME-STP-EXTENSIONS-MIB", extremeStpPortPortPriority=extremeStpPortPortPriority, extremeStpDomainEntry=extremeStpDomainEntry, extremeStpDomainNumPorts=extremeStpDomainNumPorts, extremeStpDomainHoldTime=extremeStpDomainHoldTime, extremeStpDomainStpdTag=extremeStpDomainStpdTag, extremeStpPortDesignatedBridge=extremeStpPortDesignatedBridge, extremeStpDomainRRFailoverEnabled=extremeStpDomainRRFailoverEnabled, extremeStpDomainBridgeForwardDelay=extremeStpDomainBridgeForwardDelay, extremeStpDomainTable=extremeStpDomainTable, extremeStpDomainRowStatus=extremeStpDomainRowStatus, extremeStpVlanPortTable=extremeStpVlanPortTable, extremeStpDomainStpdInstance=extremeStpDomainStpdInstance, extremeStpDomainRootCost=extremeStpDomainRootCost, extremeStpPortPortMode=extremeStpPortPortMode, extremeStpDomainForwardDelay=extremeStpDomainForwardDelay, extremeStpDomainBridgePriority=extremeStpDomainBridgePriority, extremeStpDomainDesignatedRoot=extremeStpDomainDesignatedRoot, extremeStp=extremeStp, extremeStpVlanPortRowStatus=extremeStpVlanPortRowStatus, extremeStpEdgePortBlocked=extremeStpEdgePortBlocked, extremeStpPortPortIfIndex=extremeStpPortPortIfIndex, extremeStpDomainStpdName=extremeStpDomainStpdName, extremeStpPortPathCost=extremeStpPortPathCost, extremeStpDomainStpEnabled=extremeStpDomainStpEnabled, extremeStpDomainRstpEnabled=extremeStpDomainRstpEnabled, extremeStpPortTable=extremeStpPortTable, extremeStpVlanPortEntry=extremeStpVlanPortEntry, extremeStpDomainBridgeId=extremeStpDomainBridgeId, extremeStpDomainTimeSinceTopologyChange=extremeStpDomainTimeSinceTopologyChange, extremeStpPortDesignatedRoot=extremeStpPortDesignatedRoot, extremeStpPortRowStatus=extremeStpPortRowStatus, extremeStpDomainBridgeMaxAge=extremeStpDomainBridgeMaxAge, extremeStpDomainHelloTime=extremeStpDomainHelloTime, extremeStpDomainTopChanges=extremeStpDomainTopChanges, extremeStpPortDesignatedPort=extremeStpPortDesignatedPort, extremeStpTraps=extremeStpTraps, extremeStpPortPortId=extremeStpPortPortId, extremeStpDomainMaxAge=extremeStpDomainMaxAge, extremeStpPortStpEnabled=extremeStpPortStpEnabled, extremeStpDomainRootPortIfIndex=extremeStpDomainRootPortIfIndex, extremeStpPortPortState=extremeStpPortPortState, extremeStpVlanPortPortMask=extremeStpVlanPortPortMask, PYSNMP_MODULE_ID=extremeStp, extremeStpPortEntry=extremeStpPortEntry, extremeStpTrapsPrefix=extremeStpTrapsPrefix, extremeStpDomainBridgeHelloTime=extremeStpDomainBridgeHelloTime, extremeStpPortDesignatedCost=extremeStpPortDesignatedCost)
