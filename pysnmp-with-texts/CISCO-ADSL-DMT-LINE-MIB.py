#
# PySNMP MIB module CISCO-ADSL-DMT-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ADSL-DMT-LINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adslLineConfProfileName, adslLineAlarmConfProfileName = mibBuilder.importSymbols("ADSL-LINE-MIB", "adslLineConfProfileName", "adslLineAlarmConfProfileName")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned32, = mibBuilder.importSymbols("CISCO-TC", "Unsigned32")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Counter32, iso, Gauge32, TimeTicks, Unsigned32, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, NotificationType, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "iso", "Gauge32", "TimeTicks", "Unsigned32", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "NotificationType", "IpAddress", "MibIdentifier")
TruthValue, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "DateAndTime", "TextualConvention")
ciscoAdslDmtLineMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 130))
ciscoAdslDmtLineMIB.setRevisions(('2001-05-17 16:00', '2000-08-22 00:00', '2000-05-19 00:00', '1999-03-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAdslDmtLineMIB.setRevisionsDescriptions(('Added new table for AtucDmtBin and AturDmtBin information. Added two attributes to the profile: cAdslAtucDmtConfMinrateBlock and cAdslAtucDmtDualBitmapEnabled', 'Added new value for DmtCodewordSize to allow the setting of DmtCodewordSize to 1/2 symbols per codeword.', 'Updated cAdslLineDmtConfOperatingMode object to support G.992.1, G.992.2 and T1.413 enumerations. Also added descriptions for the above.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoAdslDmtLineMIB.setLastUpdated('200105171600Z')
if mibBuilder.loadTexts: ciscoAdslDmtLineMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAdslDmtLineMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-dslam@cisco.com')
if mibBuilder.loadTexts: ciscoAdslDmtLineMIB.setDescription("This MIB module serves as an enterprise-specific extension of the ADSL-LINE-MIB. The structure of this MIB module shadows the structure of the ADSL-LINE-MIB, table for table. The tables defined by this MIB module contain managed objects that meet the following criteria: 1) A managed object represents an attribute or characteristic specific to DMT (Digital Multi-Tone) modems. 2) The ADSL-DMT-LINE-MIB does not already contain a managed object representing the same information as a managed object. Observe that entries contained by the tables in this MIB module do not augment the corresponding entries in the ADSL-LINE-MIB, as every modem represented by the ADSL-LINE-MIB is not necessarily a DMT modem. Also observe that entries contained by the tables in this MIB module do not augment the corresponding entries in the ADSL-DMT-LINE-MIB, as this assumes that the ADSL-DMT-LINE-MIB defines tables that correspond to every table defined by the ADSL-LINE-MIB. At this time, this assumption does not hold true. *** DEFINITIONS *** AGGREGATE DATA RATE Data rate transmitted by an ADSL system in any one direction. This includes both net data rates and overhead used by the system, including: - EOC - AOC (ADSL Overhead Control channel) - CRC (Cyclic Redundancy Check) check bytes - fixed indicator bits for OAM (Operatings, Administration, and Maintenance) - synchronization control bytes - capacity for bearer channel synchronization control BEARER CHANNEL A user data stream of a specific data rate that is transported transparently by an ADSL system over one of the simplex channels (i.e., AS0, AS1, AS2, or AS3) or one of the duplex channels (i.e., LS0, LS1, or LS2). BIN DMT line coding divides the frequency spectrum above the voice band of a line (i.e., 0-4 kHz) into 255 sub-carriers, each supporting 4.3125 kHz of bandwidth. A 'bin' refers to a single sub-carrier. DATA SYMBOL RATE The average symbol rate (after allowing for the overhead of the sync symbol) at which symbols carrying data are transmitted; that is, 4000 symbols/second. DOWNSTREAM The flow of data in the direction from the ATU-C to ATU-R. LINE RATE The total data rate supported by a line; that is, (sum of b(i) for all i) * 4 kbps. MARGIN (also referred to as 'SNR margin') The difference between the SNR of the received signal and the SNR required to provide a BER of 10E-7. NET DATA RATE The data rate that is available for user data in any one direction; for the downstream direction this is the sum of the simplex and duplex bearer channel rates. SPLITTER Filters that separate the high frequency signals (ADSL) from the voice band signals; (frequently called POTS splitters even though the voice band signals may comprise more than just POTS). SYMBOL The number of bits the transmitter is capable of multiplexing and modulating over all the bins in a single signalling interval. SYMBOL RATE The rate at which all symbols, including the sync symbol, are transmitted; that is, (69/68) * 4000 symbols/sec; contrasted with the data symbol rate. TOTAL DATA RATE The aggregate data rate (q.v.) plus Reed-Solomon FEC overhead. UPSTREAM The flow of data in the direction from the ATU-R to ATU-C. *** ABBREVIATIONS, ACRONYMS, AND SYMBOLS *** ADSL - Asymmetric Digital Subscriber Line. ATM - Asynchronous Transfer Mode. ATU-C - ADSL Transceiver Unit, Central Office end. ATU-R - ADSL Transceiver Unit, Remote terminal end. b(i) - the number of bits (i.e., constellation size) modulated on bin i. BER - Bit Error Ratio. DMT - Discrete MultiTone. DSL - Digital Subscriber Line. EOC - Embedded Operations Channel. FEC - Forward Error Correction. SNR - Signal-to-Noise Ratio. STM - Synchronous Transfer Mode.")
class DmtOverheadFraming(TextualConvention, Integer32):
    reference = 'ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.'
    description = "There exist two types of ADSL framing: full overhead and reduced overhead. Furthermore, there exist two versions of full overhead and two versions of reduced overhead. The table below defines the four resulting framing structures: 'structure0' Full overhead framing with asynchronous bit-to-modem timing (enabled synchronization control mechanism). 'structure1' Full overhead framing with synchronous bit-to-modem timing (disabled synchronization control mechanism). 'structure2' Reduced overhead framing with separate fast and sync bytes in fast and interleaved latency buffers respectively (64 kbps framing overhead). 'structure3' Reduced overhead framing with merged fast and sync byte, using either the fast or interleaved latency buffer (32 kbps framing overhead). During the training sequence, the ATU-C shall indicate the highest framing structure number that it supports. It is implied that if the ATU-C indicates it supports framing structure k, it also supports all framing structures 0 to k-1. If during the training sequence the ATU-R indicates a lower framing structure than that specified by the ATU-C, the ATU-C shall fall back to the framing structure number indicated by the ATU-R. Management requirements drive the determination of overhead, full or reduced. Full overhead provides more bandwidth to the EOC channel, thereby enabling higher polling rates. However, reduced overhead provides enough bandwidth to satisfy typical applications. If an ADSL line is supporting an ATM link, then a structure must be chosen that disables synchronization control. If an ADSL line is supporting an STM link, and the ADSL line interface has a clock tightly coupled to the stratum clock, then synchronization control is not necessary. If an ADSL line is supporting an STM link, and the ADSL line interface is driven by a clock that has no relationship with the stratum clock, then a struture that enables synchronization control is necessary."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("structure0", 0), ("structure1", 1), ("structure2", 2), ("structure3", 3))

class DmtFecSize(TextualConvention, Integer32):
    reference = 'ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces. draft-ietf-adslmib-adsllinemib-04, Definitions of Managed Objects for ADSL Lines.'
    description = 'One of the three parameters that affects FEC operation; the number of FEC redundancy bytes per Reed-Solomon codeword. The codeword size also affects FEC operation. The interleave depth also affects FEC operation on an interleaved channel (see the ADSL-LINE-MIB, specifically adslAtucChanConfMaxInterleaveDelay and adslAturChanConfMaxInterleaveDelay).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(6, 6), ValueRangeConstraint(8, 8), ValueRangeConstraint(10, 10), ValueRangeConstraint(12, 12), ValueRangeConstraint(14, 14), ValueRangeConstraint(16, 16), )
class DmtCodewordSize(TextualConvention, Integer32):
    reference = 'ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces. RFC 2662 - Definitions of Managed Objects for the ADSL Lines. G. Bathrick,. Ly. August 1999. '
    description = "One of the three parameters that affects FEC operation; the number of ADSL symbols per FEC codeword. The FEC size also affects FEC operation. The interleave depth also affects FEC operation on an interleaved channel (see the ADSL-LINE-MIB, specifically adslAtucChanConfMaxInterleaveDelay and adslAturChanConfMaxInterleaveDelay). The following constraints apply: - This value is always '1' when performing the FEC operation on a fast buffer. - When performing the FEC operation on an interleaved buffer, the specification does not require a codeword size greater than '1' when the interleave depth is set to '1'. - if DmtCodeWordSize is positive, it represents the actual number of symbols per codeword. If DmtCodeWordSize is negative, it represents the exponent value in a power of 2. For example, if DmtCodeWordSize is equal to -1, then the number of symbols per codeword would be equal to 2^^-1 = 1/2."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), )
ciscoAdslDmtLineMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 130, 1))
cAdslDmtLineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 1), )
if mibBuilder.loadTexts: cAdslDmtLineTable.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineTable.setDescription('This table extends the adslLineTable and contains enterprise- specific common attributes describing both ends of ADSL lines supported by the system.')
cAdslDmtLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cAdslDmtLineEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineEntry.setDescription('A set of enterprise-specific common attributes describing both ends of an ADSL line supported by the system. There exists an entry for each ifEntry with an ifType of adsl(94).')
cAdslDmtLineOverheadFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 1, 1, 1), DmtOverheadFraming()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslDmtLineOverheadFraming.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslDmtLineOverheadFraming.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineOverheadFraming.setDescription('This object represents the negotiated overhead framing structure being used by the ATU-C and ATU-R.')
cAdslAtucDmtPhysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 2), )
if mibBuilder.loadTexts: cAdslAtucDmtPhysTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtPhysTable.setDescription('This table extends the adslAtucPhysTable and contains enterprise-specific physical layer parameters for ATU-C class devices supported by the system.')
cAdslAtucDmtPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cAdslAtucDmtPhysEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtPhysEntry.setDescription('A set of enterprise-specific physical-layer parameters for an ATU-C class device supported by the system. There exists an entry for each ifEntry with an ifType of adsl(94).')
cAdslAtucDmtState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standard", 1), ("unknown", 2), ("downloading", 3), ("downloadFailed", 4), ("testing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucDmtState.setReference('ADSL Forum Technical Specification TR-014, DMT Line Code Specific MIB.')
if mibBuilder.loadTexts: cAdslAtucDmtState.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtState.setDescription("The value of this object specifies the enterprise-specific specific status of the ATU-C. If the value of adslAtucDMTState is not 'other', then the value of this object is 'standard'. If the value of adslAtucDMTState is 'other', and the ATU-C is in an unrecognized state, then the value of this object is 'unknown'. If the value of adslAtucDMTState is 'other', and the ATU-C is not in an unrecognized state, then the value of this object specifies the enterprise-specific state of the ATU-C.")
cAdslAtucDmtChanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 4), )
if mibBuilder.loadTexts: cAdslAtucDmtChanTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtChanTable.setDescription('This table extends the adslAtucChanTable and contains enterprise-specific physical layer parameters for the ATU-C channels supported by the system.')
cAdslAtucDmtChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cAdslAtucDmtChanEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtChanEntry.setDescription('A set of enterprise-specific physical-layer parameters for an ATU-C channel supported by the system. There exists an entry for each ifEntry with an ifType of adslInterleave(124) or adslFast(125).')
cAdslAtucDmtChanFecSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 4, 1, 1), DmtFecSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucDmtChanFecSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAtucDmtChanFecSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtChanFecSize.setDescription('This object specifies the number of FEC redundancy bytes the ATU-C appends to downstream on the corresponding channel. The ATU-C can fallback from the initial value specified for the corresponding channel (i.e., cAdslAtucDmtConfFastFecSize or cAdslAtucInterleaveFecSize) based on the aggregate data rate rate achieved during training.')
cAdslAtucDmtChanCodewordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 4, 1, 2), DmtCodewordSize()).setUnits('symbols').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucDmtChanCodewordSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAtucDmtChanCodewordSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtChanCodewordSize.setDescription('This object specifies the actual number of symbols per codeword being used by the ATU-C for downstream messages. The ATU-C and ATU-R negotiate this value during the training sequence. A value of 0 indicates the automatic mode.')
cAdslAturDmtChanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 5), )
if mibBuilder.loadTexts: cAdslAturDmtChanTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtChanTable.setDescription('This table extends the adslAturChanTable and contains enterprise-specific physical layer parameters for the ATU-R channels supported by the system.')
cAdslAturDmtChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cAdslAturDmtChanEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtChanEntry.setDescription('A set of enterprise-specific physical-layer parameters for an ATU-R channel supported by the system. There exists an entry for each ifEntry with an ifType of adslInterleave(124) or adslFast(125).')
cAdslAturDmtChanFecSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 5, 1, 1), DmtFecSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAturDmtChanFecSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAturDmtChanFecSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtChanFecSize.setDescription('This object specifies the number of FEC redundancy bytes the ATU-R appends to upstream on the corresponding channel. The ATU-C can fallback from the initial value specified for the corresponding channel (i.e., cAdslAturDmtConfFastFecSize or cAdslAturInterleaveFecSize) based on the aggregate data rate achieved during training.')
cAdslAturDmtChanCodewordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 5, 1, 2), DmtCodewordSize()).setUnits('symbols').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAturDmtChanCodewordSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAturDmtChanCodewordSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtChanCodewordSize.setDescription('This object specifies the actual number of symbols per codeword being used by the ATU-R for upstream messages. The ATU-C and ATU-R negotiate this value during the training sequence.')
cAdslDmtLineConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14), )
if mibBuilder.loadTexts: cAdslDmtLineConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineConfProfileTable.setDescription('This table extends the adslLineConfProfileTable and contains enterprise-specific ADSL DMT line configuration information.')
cAdslDmtLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1), ).setIndexNames((1, "ADSL-LINE-MIB", "adslLineConfProfileName"))
if mibBuilder.loadTexts: cAdslDmtLineConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineConfProfileEntry.setDescription('A configuration profile containing enterprise-specific ADSL DMT line configuration information.')
cAdslLineDmtConfOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("automatic", 1), ("splitterless", 2), ("g992Dot1", 3), ("g992Dot2", 4), ("t1Dot413", 5))).clone('automatic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslLineDmtConfOperatingMode.setReference('ITU G.992.1, Asymmetric Digital Subscriber Line (ADSL) Transceiver. ITU G.992.2, Splitterless Asymmetric Digital Subscriber Line (ADSL) Transceiver. ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslLineDmtConfOperatingMode.setStatus('current')
if mibBuilder.loadTexts: cAdslLineDmtConfOperatingMode.setDescription("This object specifies the line operating mode being employed by the ADSL line. An ADSL line uses of one of two operating modes: - Automatic An ATU-C that employs this operating mode automatically detects the capabilities of the ATU-R and utilizes either a startup sequence specified by G.992.1, G.992.2, or T1.413-1998. This line operating mode is the default for an ADSL line. - Splitterless This operating mode should no longer be used. It is equivalent to the G.992.2 selection. Selecting this mode will automatically map to the G992.2 mode. It is appropriate in this case that both the ATU-C and ATU-R support 'heavy' capability but the ATU-C side wishes to force 'lite' operation. Selecting this mode will automatically convert to the G992.2 mode. - G992.1 This operating mode forces the used of the G994.1 startup sequence and compliance to G992.1 operation. - G992.2 This operating mode forces the use of the G994.1 startup sequence and compliance to G992.2 operation. It is appropriate in this case that both the ATU-C and ATU-R support 'heavy' capability but the ATU-C side wishes to force 'lite' operation. - T1.413 This operating mode forces the ATU-R to use the T1.413-1998 startup sequence.")
cAdslLineDmtConfTrainingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("fast", 2))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslLineDmtConfTrainingMode.setReference('ITU G.992.1, Asymmetric Digital Subscriber Line (ADSL) Transceiver. ITU G.992.2, Splitterless Asymmetric Digital Subscriber Line (ADSL) Transceiver. ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslLineDmtConfTrainingMode.setStatus('current')
if mibBuilder.loadTexts: cAdslLineDmtConfTrainingMode.setDescription('This object specifies the mode employed by the ATU-C and ATU-R when training against each other. One of two training modes can be employed: - Standard An ATU-C initiates a training sequence using the method defined by G.992.1, G.992.2, or T1.413-1998. This training mode is the default for ADSL modems. - Fast An ATU-C initiates a vendor-specific training sequence that can possibly provide a shorter training sequence.')
cAdslAtucDmtConfFastFecSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 3), DmtFecSize().clone(16)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtConfFastFecSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAtucDmtConfFastFecSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtConfFastFecSize.setDescription('This object specifies the initial number of FEC redundancy bytes the ATU-C appends to downstream frames transmitted over the fast channel during the training sequence. The ATU-C can fallback from this value depending on the aggregate data rate achieved during training. It is desirable to choose a large FEC size, thereby increasing the chance of being able to correct errors in the data delivered by a frame. However, additional FEC redundancy bytes increases frame overhead, and thus frame latency.')
cAdslAtucDmtConfInterleaveFecSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 4), DmtFecSize().clone(16)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtConfInterleaveFecSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAtucDmtConfInterleaveFecSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtConfInterleaveFecSize.setDescription('This object specifies the initial number of FEC redundancy bytes the ATU-C appends to downstream frames transmitted over the interleaved channel during the training sequence. The ATU-C can fallback from this value depending on the aggregate data rate achieved during training. It is desirable to choose a large FEC size, thereby increasing the chance of being able to correct errors in the data delivered by a frame. However, additional FEC redundancy bytes increases frame overhead, and thus frame latency. The value of this object must be a integral multiple of the value of cAdslAtucDmtConfCodewordSize.')
cAdslAtucDmtConfCodewordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 5), DmtCodewordSize().clone(16)).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtConfCodewordSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAtucDmtConfCodewordSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtConfCodewordSize.setDescription('This object specifies the number of symbols per codeword being used by the ATU-C for downstream messages on an interleaved channel during the training sequence. The ATU-C can fallback from this value based on the aggregate data rate achieved during training. It is desirable to choose a large codeword size to minimize overhead. However, increasing the codeword size increases the possibility of not being able to correct errors in the data delivered by a frame.')
cAdslAtucDmtConfOverheadFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 6), DmtOverheadFraming().clone('structure3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtConfOverheadFraming.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAtucDmtConfOverheadFraming.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtConfOverheadFraming.setDescription("This object specifies the overhead framing structure which the ATU-C will request when establishing a link with the ATU-R. The value of 'structure0' is not valid.")
cAdslAtucDmtConfBitSwapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapEnabled.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces. RFC 2662 - Definitions of Managed Objects for the ADSL Lines. G. Bathrick,. Ly. August 1999. ')
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapEnabled.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapEnabled.setDescription("This object specifies whether the ATU-C performs bitswapping. Bitswapping attempts to maintain an acceptable margin for each bin; equalizing the margin across all bins through bit reallocation, thereby maximizing error performance. The ATU-C performs bitswapping by monitoring the margin measured for each bin by the transmitter: 1) If a bin's margin falls below 'target' and the difference, between the margin and 'target' exceeds 'thresh(f)', then the ATU-C marks the bin as a 'from' bin. 2) If a bin's margin exceeds 'target' and the difference between the margin and 'target' exceeds 'thresh(t)', then the ATU-C marks the bin as a 'to' bin. Where: 'target' = adslAtucConfTargetSnrMgn 'thresh(f)' = cAdslAtucDmtConfBitSwapFrom 'thresh(t)' = cAdslAtucDmtConfBitSwapTo The ATU-C attempts to equalize the margin across the bins by swapping bits out of bins marked 'from' into bins marked 'to'. When the ATU-C swaps a bit out of bin, it decreases its b(i). Thus, the bins constellation is smaller, which increases its margin. When the ATU-C swaps a bit into a bin, it increases its b(i). Thus, the bins constellation is larger, which decreases its margin. In addition, the ATU-R may optionally implement its own monitoring capability. The ATU-R uses this information to request the ATU-C to perform bitswapping. When this object is 'true', the ATU-C must be prepared to accept and properly handle bitswap requests from the ATU-R. While bitswapping has its obvious advantages, bitswapping can have undesirable side effects. It can introduce errors on lines prone to impulse noise. In this case, it may be desirable to disable bitswapping.")
cAdslAtucDmtConfBitSwapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapFrom.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces. RFC 2662 - Definitions of Managed Objects for the ADSL Lines. G. Bathrick,. Ly. August 1999. ')
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapFrom.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapFrom.setDescription("Bitswapping attempts to maintain an acceptable margin for each bin; equalizing the margin across all bins through bit reallocation, thereby maximizing error performance. The ATU-C performs bitswapping by monitoring the margin measured for each bin by the transmitter. If a bin's margin falls below adslAtucConfTargetSnrMgn and the difference between the margin and adslAtucConfTargetSnrMgn exceeds the value of this object, then the ATU-C marks a bin as a 'from' bin. The ATU-C attempts to equalize the margin across the bins by swapping bits out of bins marked 'from' into bins marked 'to'. When the ATU-C swaps a bit out of bin, it decreases its b(i). Thus, the bins constellation is smaller. which increases its margin. When the ATU-C swaps a bit into a bin, it increases its b(i). Thus, the bins constellation is larger, which decreases its margin. If this value is too small, then the ATU-C may frequently toggle the bit allocation on bins, and if impulse noise is present, this can cause errors. If this value is too large, then the ATU-C may not identify an adequate number of bins that it can swap bits 'from', thereby decreasing the chances for the ATU-C to equalize the margin across all the bins. Unequalized margin across all the bins translates into poor error performance.")
cAdslAtucDmtConfBitSwapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapTo.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces. RFC 2662 - Definitions of Managed Objects for the ADSL Lines. G. Bathrick,. Ly. August 1999. ')
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapTo.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtConfBitSwapTo.setDescription("Bitswapping attempts to maintain an acceptable margin for each bin; equalizing the margin across all bins through bit reallocation, thereby maximizing error performance. The ATU-C performs bitswapping by monitoring the margin measured for each bin by the transmitter. If a bin's margin exceeds adslAtucConfTargetSnrMgn and the difference between the margin and adslAtucConfTargetSnrMgn exceeds the value of this object, then the ATU-C marks a bin as a 'to' bin. The ATU-C attempts to equalize the margin across the bins by swapping bits out of bins marked 'from' into bins marked 'to'. When the ATU-C swaps a bit out of bin, it decreases its b(i). Thus, the bins constellation is smaller. which increases its margin. When the ATU-C swaps a bit into a bin, it increases its b(i). Thus, the bins constellation is larger, which decreases its margin. If this value is too small, then the ATU-C may frequently toggle the bit allocation on bins, and if impulse noise is present, this can cause errors. If this value is too large, then the ATU-C may not identify an adequate number of bins that it can swap bits 'to', thereby decreasing the chances for the ATU-C to equalize the margin across all the bins. Unequalized margin across all the bins translates into poor error performance.")
cAdslAturDmtConfFastFecSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 10), DmtFecSize().clone(16)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAturDmtConfFastFecSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAturDmtConfFastFecSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtConfFastFecSize.setDescription('This object specifies the initial number of FEC redundancy bytes the ATU-R appends to upstream frames transmitted over the fast channel during the training sequence. The ATU-C can force the ATU-R to fallback from this value depending on the aggregate data rate achieved during training. It is desirable to choose a large FEC size, thereby increasing the chance of being able to correct errors in the data delivered by a frame. However, additional FEC redundancy bytes increases frame overhead, and thus frame latency.')
cAdslAturDmtConfInterleaveFecSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 11), DmtFecSize().clone(16)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAturDmtConfInterleaveFecSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAturDmtConfInterleaveFecSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtConfInterleaveFecSize.setDescription('This object specifies the initial number of FEC redundancy bytes the ATU-R appends to upstream frames transmitted over the interleaved channel during the training sequence. The ATU-C can force the ATU-R to fallback from this value depending on the aggregate data rate achieved during training. It is desirable to choose a large FEC size, thereby increasing the chance of being able to correct errors in the data delivered by a frame. However, additional FEC redundancy bytes increases frame overhead, and thus frame latency. The value of this object must be a integral multiple of the value of cAdslAturDmtConfCodewordSize.')
cAdslAturDmtConfCodewordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 12), DmtCodewordSize().clone(16)).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAturDmtConfCodewordSize.setReference('ANSI T1.413-1998 Issue 2, Network and Customer Installation Interfaces - Asymmetric Digital Subscriber Line (ADSL) Metallic Interfaces.')
if mibBuilder.loadTexts: cAdslAturDmtConfCodewordSize.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtConfCodewordSize.setDescription('This object specifies the number of symbols per codeword being used by the ATU-R for upstream messages on an interleaved channel during the training sequence. The ATU-C can force the ATU-R to fallback from this value based on the aggregate data rate achieved during training. It is desirable to choose a large codeword size to minimize overhead. However, increasing the codeword size increases the possibility of not being able to correct errors in the data delivered by a frame.')
cAdslAtucDmtConfMinrateBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtConfMinrateBlock.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtConfMinrateBlock.setDescription('This object is used to implement min-rate blocking on DMT interfaces that support this option. ')
cAdslAtucDmtDualBitmapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 14, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtDualBitmapEnabled.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtDualBitmapEnabled.setDescription('This object is used to implement dual bitmap tables for Annex C compliant DMT interfaces. The bin data for the DSL interface will appear in cAdslAturDmtBinTable and cAdslAtucDmtBinTable. ')
cAdslDmtLineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 15), )
if mibBuilder.loadTexts: cAdslDmtLineAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineAlarmConfProfileTable.setDescription('This table extends the adslLineAlarmConfProfileTable and contains enterprise-specific ADSL line configuration information pertaining to alarms.')
cAdslDmtLineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 15, 1), ).setIndexNames((1, "ADSL-LINE-MIB", "adslLineAlarmConfProfileName"))
if mibBuilder.loadTexts: cAdslDmtLineAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineAlarmConfProfileEntry.setDescription('A configuration profile containing enterprise-specific ADSL line configuration information pertaining to alarms')
cAdslAtucDmtThreshRateFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 15, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAtucDmtThreshRateFallback.setReference('RFC 2662 - Definitions of Managed Objects for the ADSL Lines. G. Bathrick,. Ly. August 1999. ')
if mibBuilder.loadTexts: cAdslAtucDmtThreshRateFallback.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtThreshRateFallback.setDescription("This object specifies a bit rate threshold. When the following condition is met, the agent generates an adslAtucRateChangeTrap: ( I + F ) < cAdslAtucDmtThreshRateFallback where I = adslAtucChanCurrTxRate for ATU-C's interleave channel F = adslAtucChanCurrTxRate for ATU-C's fast channel Setting this value to '0' prevents the agent from generating an adslAtucRateChangeTrap due to rate fallback.")
cAdslAturDmtThreshRateFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 15, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cAdslAturDmtThreshRateFallback.setReference('RFC 2662 - Definitions of Managed Objects for the ADSL Lines. G. Bathrick,. Ly. August 1999. ')
if mibBuilder.loadTexts: cAdslAturDmtThreshRateFallback.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtThreshRateFallback.setDescription("This object specifies a bit rate threshold. When the following condition is met, the agent generate an adslAturRateChangeTrap: ( I + F ) < cAdslAturDmtThreshRatefallback where I = adslAturChanCurrTxRate for ATU-R's interleave channel F = adslAturChanCurrTxRate for ATU-R's fast channel Setting this value to '0' prevents the agent from generating an adslAtucRateChangeTrap due to rate fallback.")
cAdslDmtBinIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAdslDmtBinIfNumber.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtBinIfNumber.setDescription('The cAdslDmtBinIfNumber is used to set the ifIndex for for which DMT bin information will be collected in cAdslAtucDmtBinTable and cAdslAturDmtBinTable. The request will be processed when cAdslDmtIfRqstStatus is set to pollNow (1). Setting this object will fail if the value of cAdslDmtIfRqstStatus is currently rqstInProgress (3). In addition, the interface must have an ifEntry with an ifType of adsl(94) and an adslLineCoding of dmt(2).')
cAdslDmtBinIfRqstStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("reset", -1), ("pollNow", 1), ("noIfConfigured", 2), ("ifConfigured", 3), ("rqstInProgess", 4), ("lcDownForIf", 5), ("ifUntrained", 6), ("failure", 7), ("success", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cAdslDmtBinIfRqstStatus.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtBinIfRqstStatus.setDescription('This object initiates the polling and stores the status of the last DMT Bin request. This object can have the following values : reset (-1) : write this value to reset the the finite state machine (FSM) that controls the reading of bin information on a DMT interface. pollNow (1) : write this value to begin bin polling on an interface specified in cAdslDmtBinIfNumber. noIfConfigured(2) : status read when no valid interface is set in cAdslDmtBinIfNumber ifConfigured(3) : status read when a valid interface is set in cAdslDmtBinIfNumber rqstInProgress(4) : status returned until the data collection is complete on an interface. lcDownForIf (5) : status returned if the line card is down for the interface. ifUntrained (6) : status returned if the interface on the DSLAM is untrained. failure (7) : status returned when the request cannot be completed due to error. success (8) : status returned when bin data collection has been properly completed. Data collected on a status of success (8) will be available in cAdslAtucDmtBinTable and cAdslAturDmtBinTable. A read of this object can return any value between 2 and 8, while a write can only be set to the value of 1 or -1.')
cAdslDmtBinIfLstRqstUpldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslDmtBinIfLstRqstUpldTime.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtBinIfLstRqstUpldTime.setDescription('cAdslDmtBinIfLstRqstUpldTime stores the time and date when the last successful upload request was done. This field is used to determine the age of DMT Bin data in the cAdslAtucDmtBinTable and cAdslAturDmtBinTable.')
cAdslAtucDmtBinTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 19), )
if mibBuilder.loadTexts: cAdslAtucDmtBinTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtBinTable.setDescription('This table contains information on the 256 DMT bins in the downstream direction. Bins correspond to 4 kHz slots on a trained DSL line modem. The information stored in each bin includes bit counts per hertz of bandwidth and the transmitter gain in 0.01 dB increments.')
cAdslAtucDmtBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 19, 1), ).setIndexNames((0, "CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtBitmapIndex"), (0, "CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtBinIndex"))
if mibBuilder.loadTexts: cAdslAtucDmtBinEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtBinEntry.setDescription('A set of enterprise-specific parameters for a DMT DSL interface. After bin data has been collected successfully there will be at least 1 row entry for the interface indicated by cAdslAtucDmtBinIfIndex.')
cAdslAtucDmtBitmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: cAdslAtucDmtBitmapIndex.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtBitmapIndex.setDescription('This index is used to step through all of the bin tables on a DSL interface.')
cAdslAtucDmtBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: cAdslAtucDmtBinIndex.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtBinIndex.setDescription('A unique value, greater than zero, for each dmt bin on the interface specified in cAdslDmtBinIfNumber It is recommended that values be assigned contiguously starting from 1.')
cAdslAtucDmtBinBitAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('bits/Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucDmtBinBitAlloc.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtBinBitAlloc.setDescription('This stores the number of bits allotted per Hertz in this bin. For example, a value of 15 would indicate that this slot is tranmitting at a physical rate of 64kbits/sec.')
cAdslAtucDmtBinTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 19, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setUnits('tenth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucDmtBinTxGain.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtBinTxGain.setDescription('This field has the transmitter gain for this bin and is stored in 0.01 dB increments.')
cAdslAtucDmtBinNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 19, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAtucDmtBinNumber.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtBinNumber.setDescription('This field indicates the 4.3125 kHz band of downstream DSL line spectrum occupied by a bin. For example, a value of 3 would indicate the band from 12.9375 to 17.25 kHz of the spectrum.')
cAdslAturDmtBinTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 20), )
if mibBuilder.loadTexts: cAdslAturDmtBinTable.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtBinTable.setDescription('This table contains information for the 32 DMT bins in the upstream direction. A bin corresponds to a 4 kHz slots on a trained DSL line modem. The information stored in each bin includes bit counts per hertz and the transmitter gain in 0.01 dB increments.')
cAdslAturDmtBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 20, 1), ).setIndexNames((0, "CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtBitmapIndex"), (0, "CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtBinIndex"))
if mibBuilder.loadTexts: cAdslAturDmtBinEntry.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtBinEntry.setDescription('A set of enterprise-specific parameters for a DMT DSL interface. After bin data has been collected successfully there will be at least 1 row entry for the interface indicated by cAdslAtucDmtBinIfIndex.')
cAdslAturDmtBitmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: cAdslAturDmtBitmapIndex.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtBitmapIndex.setDescription('This index is used to step through all of the bin tables on a DSL interface.')
cAdslAturDmtBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: cAdslAturDmtBinIndex.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtBinIndex.setDescription('A unique value, greater than zero, for each dmt bin on the interface specified in cAdslDmtBinIfNumber It is recommended that values be assigned contiguously starting from 1.')
cAdslAturDmtBinBitAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('bits/Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAturDmtBinBitAlloc.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtBinBitAlloc.setDescription('This stores the number of bits allotted per Hertz in this bin. For example, a value of 15 indicates that this slot is transmitting at a physical rate of 64 Kbits.')
cAdslAturDmtBinTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 20, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setUnits('hundredth dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAturDmtBinTxGain.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtBinTxGain.setDescription('This field has the transmitter gain for this bin and is stored in 0.01 dB increments.')
cAdslAturDmtBinNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 130, 1, 20, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cAdslAturDmtBinNumber.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtBinNumber.setDescription('This field indicates the 4.3125 kHz band of upstream DSL line spectrum occupied by a bin. For example, a value of 3 would indicate the band from 12.9375 to 17.25 kHz of the spectrum.')
ciscoAdslDmtLineMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 130, 2))
ciscoAdslDmtLineMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 130, 2, 0))
ciscoAdslDmtLineMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 130, 3))
ciscoAdslDmtLineMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 1))
ciscoAdslDmtLineMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2))
ciscoAdslDmtLineMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 1, 1)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtLineGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtPhysGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtChanGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtChanGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtLineConfProfileGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtLineAlarmConfProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAdslDmtLineMIBCompliance = ciscoAdslDmtLineMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoAdslDmtLineMIBCompliance.setDescription('The compliance statement for entities that implement the CISCO-ADSL-DMT-LINE-MIB. Implementation of this MIB is mandatory for any platform that supports one or more ADSL DMT line interfaces.Replaced by ciscoAdslDmtLineMIBComplianceRev1')
ciscoAdslDmtLineMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 1, 2)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtLineGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtPhysGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtChanGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtChanGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtLineConfProfileGroupRev1"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtLineAlarmConfProfileGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtBinIfGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtBinDataGroup"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtBinDataGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAdslDmtLineMIBComplianceRev1 = ciscoAdslDmtLineMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoAdslDmtLineMIBComplianceRev1.setDescription('The compliance statement for entities that implement the CISCO-ADSL-DMT-LINE-MIB. Implementation of this MIB is mandatory for any platform that supports one or more ADSL DMT line interfaces.')
cAdslDmtLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 1)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtLineOverheadFraming"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslDmtLineGroup = cAdslDmtLineGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineGroup.setDescription('A collection of managed objects defining the enterprise-specific attributes of an ADSL line supporting modems using the DMT line code.')
cAdslAtucDmtPhysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 2)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAtucDmtPhysGroup = cAdslAtucDmtPhysGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtPhysGroup.setDescription('A collection of managed objects defining the enterprise-specific physical-layer parameters of an ATU-C using the DMT line code.')
cAdslAtucDmtChanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 3)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtChanFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtChanCodewordSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAtucDmtChanGroup = cAdslAtucDmtChanGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtChanGroup.setDescription('A collection of managed objects defining the enterprise-specific channel parameters of an ATU-C using the DMT line code.')
cAdslAturDmtChanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 4)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtChanFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtChanCodewordSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAturDmtChanGroup = cAdslAturDmtChanGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtChanGroup.setDescription('A collection of managed objects defining the enterprise-specific channel parameters of an ATU-R using the DMT line code.')
cAdslDmtLineConfProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 5)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslLineDmtConfOperatingMode"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslLineDmtConfTrainingMode"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfFastFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfInterleaveFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfCodewordSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfOverheadFraming"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfBitSwapEnabled"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfBitSwapFrom"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfBitSwapTo"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtConfInterleaveFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtConfFastFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtConfCodewordSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslDmtLineConfProfileGroup = cAdslDmtLineConfProfileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cAdslDmtLineConfProfileGroup.setDescription('A collection of managed objects defining the enterprise-specific line configuration information associated with one or more ADSL ATU class devices implementing the DMT line code. Replaced by cAdslDmtLineConfProfileGroupRev1.')
cAdslDmtLineAlarmConfProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 6)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtThreshRateFallback"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtThreshRateFallback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslDmtLineAlarmConfProfileGroup = cAdslDmtLineAlarmConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineAlarmConfProfileGroup.setDescription('A collection of managed objects defining the enterprise-specific line alarm configuration information associated with one or more ATU class devices implementing the DMT line code.')
cAdslDmtBinIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 7)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtBinIfNumber"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtBinIfRqstStatus"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslDmtBinIfLstRqstUpldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslDmtBinIfGroup = cAdslDmtBinIfGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtBinIfGroup.setDescription('A collection of managed objects defining the enterprise-specific line interface information used to collect bin data from DMT interfaces.')
cAdslAtucDmtBinDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 8)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtBinBitAlloc"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtBinTxGain"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtBinNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAtucDmtBinDataGroup = cAdslAtucDmtBinDataGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAtucDmtBinDataGroup.setDescription('A collection of managed objects defining the enterprise-specific line BIN information associated with one or more ATUC class devices implementing the DMT line code.')
cAdslAturDmtBinDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 9)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtBinBitAlloc"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtBinTxGain"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtBinNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslAturDmtBinDataGroup = cAdslAturDmtBinDataGroup.setStatus('current')
if mibBuilder.loadTexts: cAdslAturDmtBinDataGroup.setDescription('A collection of managed objects defining the enterprise-specific line BIN information associated with a ATUR class device implementing the DMT line code.')
cAdslDmtLineConfProfileGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 130, 3, 2, 10)).setObjects(("CISCO-ADSL-DMT-LINE-MIB", "cAdslLineDmtConfOperatingMode"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslLineDmtConfTrainingMode"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfFastFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfInterleaveFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfCodewordSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfOverheadFraming"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfBitSwapEnabled"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfBitSwapFrom"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfBitSwapTo"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtConfInterleaveFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtConfFastFecSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAturDmtConfCodewordSize"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtConfMinrateBlock"), ("CISCO-ADSL-DMT-LINE-MIB", "cAdslAtucDmtDualBitmapEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cAdslDmtLineConfProfileGroupRev1 = cAdslDmtLineConfProfileGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cAdslDmtLineConfProfileGroupRev1.setDescription('A collection of managed objects defining the enterprise-specific line configuration information associated with one or more ADSL ATU class devices implementing the DMT line code.')
mibBuilder.exportSymbols("CISCO-ADSL-DMT-LINE-MIB", cAdslAtucDmtBinTable=cAdslAtucDmtBinTable, cAdslDmtLineOverheadFraming=cAdslDmtLineOverheadFraming, cAdslAturDmtConfFastFecSize=cAdslAturDmtConfFastFecSize, cAdslAtucDmtConfFastFecSize=cAdslAtucDmtConfFastFecSize, cAdslAtucDmtBinIndex=cAdslAtucDmtBinIndex, cAdslAturDmtBitmapIndex=cAdslAturDmtBitmapIndex, cAdslAturDmtBinNumber=cAdslAturDmtBinNumber, cAdslAtucDmtChanGroup=cAdslAtucDmtChanGroup, cAdslAtucDmtPhysTable=cAdslAtucDmtPhysTable, cAdslAtucDmtBinDataGroup=cAdslAtucDmtBinDataGroup, cAdslAtucDmtChanCodewordSize=cAdslAtucDmtChanCodewordSize, DmtOverheadFraming=DmtOverheadFraming, cAdslAtucDmtBitmapIndex=cAdslAtucDmtBitmapIndex, cAdslAturDmtConfCodewordSize=cAdslAturDmtConfCodewordSize, ciscoAdslDmtLineMIBNotificationsPrefix=ciscoAdslDmtLineMIBNotificationsPrefix, cAdslAtucDmtPhysEntry=cAdslAtucDmtPhysEntry, cAdslAturDmtChanCodewordSize=cAdslAturDmtChanCodewordSize, cAdslDmtBinIfLstRqstUpldTime=cAdslDmtBinIfLstRqstUpldTime, cAdslAtucDmtBinBitAlloc=cAdslAtucDmtBinBitAlloc, cAdslAturDmtChanGroup=cAdslAturDmtChanGroup, cAdslAtucDmtThreshRateFallback=cAdslAtucDmtThreshRateFallback, cAdslDmtLineConfProfileTable=cAdslDmtLineConfProfileTable, cAdslAtucDmtChanFecSize=cAdslAtucDmtChanFecSize, cAdslDmtBinIfRqstStatus=cAdslDmtBinIfRqstStatus, cAdslAturDmtBinEntry=cAdslAturDmtBinEntry, ciscoAdslDmtLineMIB=ciscoAdslDmtLineMIB, cAdslAtucDmtState=cAdslAtucDmtState, cAdslAturDmtChanEntry=cAdslAturDmtChanEntry, cAdslDmtLineConfProfileEntry=cAdslDmtLineConfProfileEntry, cAdslAtucDmtBinNumber=cAdslAtucDmtBinNumber, cAdslAturDmtBinTxGain=cAdslAturDmtBinTxGain, cAdslAturDmtBinDataGroup=cAdslAturDmtBinDataGroup, cAdslAturDmtBinTable=cAdslAturDmtBinTable, ciscoAdslDmtLineMIBNotifications=ciscoAdslDmtLineMIBNotifications, cAdslAtucDmtConfInterleaveFecSize=cAdslAtucDmtConfInterleaveFecSize, cAdslAturDmtThreshRateFallback=cAdslAturDmtThreshRateFallback, cAdslDmtLineGroup=cAdslDmtLineGroup, cAdslAtucDmtConfBitSwapFrom=cAdslAtucDmtConfBitSwapFrom, cAdslLineDmtConfOperatingMode=cAdslLineDmtConfOperatingMode, cAdslAtucDmtBinTxGain=cAdslAtucDmtBinTxGain, cAdslAturDmtBinBitAlloc=cAdslAturDmtBinBitAlloc, cAdslAturDmtBinIndex=cAdslAturDmtBinIndex, cAdslAtucDmtChanTable=cAdslAtucDmtChanTable, DmtFecSize=DmtFecSize, cAdslAtucDmtConfBitSwapTo=cAdslAtucDmtConfBitSwapTo, ciscoAdslDmtLineMIBGroups=ciscoAdslDmtLineMIBGroups, ciscoAdslDmtLineMIBComplianceRev1=ciscoAdslDmtLineMIBComplianceRev1, cAdslDmtLineConfProfileGroup=cAdslDmtLineConfProfileGroup, cAdslAtucDmtDualBitmapEnabled=cAdslAtucDmtDualBitmapEnabled, cAdslDmtLineConfProfileGroupRev1=cAdslDmtLineConfProfileGroupRev1, cAdslDmtLineAlarmConfProfileGroup=cAdslDmtLineAlarmConfProfileGroup, cAdslAturDmtChanTable=cAdslAturDmtChanTable, ciscoAdslDmtLineMIBCompliance=ciscoAdslDmtLineMIBCompliance, cAdslAtucDmtConfCodewordSize=cAdslAtucDmtConfCodewordSize, cAdslDmtBinIfNumber=cAdslDmtBinIfNumber, cAdslAtucDmtBinEntry=cAdslAtucDmtBinEntry, cAdslAtucDmtConfOverheadFraming=cAdslAtucDmtConfOverheadFraming, PYSNMP_MODULE_ID=ciscoAdslDmtLineMIB, cAdslLineDmtConfTrainingMode=cAdslLineDmtConfTrainingMode, cAdslAturDmtConfInterleaveFecSize=cAdslAturDmtConfInterleaveFecSize, cAdslDmtLineEntry=cAdslDmtLineEntry, cAdslAtucDmtPhysGroup=cAdslAtucDmtPhysGroup, cAdslAtucDmtConfBitSwapEnabled=cAdslAtucDmtConfBitSwapEnabled, ciscoAdslDmtLineMIBObjects=ciscoAdslDmtLineMIBObjects, cAdslDmtLineAlarmConfProfileTable=cAdslDmtLineAlarmConfProfileTable, ciscoAdslDmtLineMIBConformance=ciscoAdslDmtLineMIBConformance, cAdslDmtLineAlarmConfProfileEntry=cAdslDmtLineAlarmConfProfileEntry, ciscoAdslDmtLineMIBCompliances=ciscoAdslDmtLineMIBCompliances, cAdslAtucDmtConfMinrateBlock=cAdslAtucDmtConfMinrateBlock, cAdslAturDmtChanFecSize=cAdslAturDmtChanFecSize, cAdslDmtLineTable=cAdslDmtLineTable, cAdslAtucDmtChanEntry=cAdslAtucDmtChanEntry, cAdslDmtBinIfGroup=cAdslDmtBinIfGroup, DmtCodewordSize=DmtCodewordSize)
