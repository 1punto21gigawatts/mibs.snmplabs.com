#
# PySNMP MIB module HP-ICF-STACK (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-STACK
# Produced by pysmi-0.3.4 at Wed May  1 13:35:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
hpicfCommon, hpicfObjectModules = mibBuilder.importSymbols("HP-ICF-OID", "hpicfCommon", "hpicfObjectModules")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, iso, Integer32, Counter64, MibIdentifier, ObjectIdentity, Unsigned32, IpAddress, TimeTicks, NotificationType, Counter32, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Integer32", "Counter64", "MibIdentifier", "ObjectIdentity", "Unsigned32", "IpAddress", "TimeTicks", "NotificationType", "Counter32", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
hpicfStackMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 6))
hpicfStackMib.setRevisions(('2000-11-03 22:25', '1996-09-06 22:28',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfStackMib.setRevisionsDescriptions(('Updated division name.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpicfStackMib.setLastUpdated('200011032225Z')
if mibBuilder.loadTexts: hpicfStackMib.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfStackMib.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfStackMib.setDescription('This MIB module contains object definitions for managing HP stackable devices.')
hpicfStack = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5))
hpicfStackBoxTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 1), )
if mibBuilder.loadTexts: hpicfStackBoxTable.setStatus('current')
if mibBuilder.loadTexts: hpicfStackBoxTable.setDescription('This table contains a list of physical boxes currently in the stack.')
hpicfStackBoxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpicfStackBoxEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfStackBoxEntry.setDescription('An entry containing information about a physical box in the stack. This table is indexed by the value of entPhysicalIndex that corresponds to the row in the entPhysicalTable for this box.')
hpicfStackBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfStackBoxId.setStatus('current')
if mibBuilder.loadTexts: hpicfStackBoxId.setDescription('The box identifier that uniquely identifies this physical box. The value of this object is the serial number of the box.')
hpicfStackBoxName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfStackBoxName.setStatus('current')
if mibBuilder.loadTexts: hpicfStackBoxName.setDescription('A settable name for this box. This name defaults to an ASCII representation of the base MAC address of the box, but may be set to a user-friendly display string by a management application.')
hpicfStackAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 2), )
if mibBuilder.loadTexts: hpicfStackAgentTable.setStatus('current')
if mibBuilder.loadTexts: hpicfStackAgentTable.setDescription('This table provides a list of SNMP agent cards in the stack that are capable of managing the stack. Note that this table is redundant, since this information is available in the Entity MIB, but is provided for the convenience of management applications, so that they are not required to scan the entire entPhysicalTable to determine what agent cards are present.')
hpicfStackAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpicfStackAgentEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfStackAgentEntry.setDescription('An entry in the hpicfStackAgentTable representing a single agent card. This table is indexed by the value of entPhysicalIndex that corresponds to the row in the entPhysicalTable for this agent card.')
hpicfStackAgentBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfStackAgentBoxId.setStatus('current')
if mibBuilder.loadTexts: hpicfStackAgentBoxId.setDescription('The value of hpicfStackBoxId for the box containing this agent card. Note that this object is redundant since containment information is available in the Entity MIB, but is provided for the convenience of management applications (and so that there would be at least one accessible column in this table).')
hpicfStackActiveAgent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfStackActiveAgent.setStatus('current')
if mibBuilder.loadTexts: hpicfStackActiveAgent.setDescription("The value of entPhysicalIndex for the agent that is currently managing this stack. A set to this value will also set hpicfStackAgentForced to 'true'. Note that setting this object to a value different from the current value will cause this agent to reset. After reset, the current agent will no longer be active, because the new agent will take over.")
hpicfStackAgentForced = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 5, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfStackAgentForced.setStatus('current')
if mibBuilder.loadTexts: hpicfStackAgentForced.setDescription("A value of 'true' indicates that the current active agent card has been chosen by a management action as the active agent. This management action may have been performed through a console user interface command, or by setting the hpicfStackActiveAgent object. The reason for this is to allow the network administrator to prevent an added redundant agent from taking over when there is a configured agent card in the stack.")
hpicfStackConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 6, 1))
hpicfStackCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 6, 1, 1))
hpicfStackGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 6, 1, 2))
hpicfStackCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 6, 1, 1, 1)).setObjects(("HP-ICF-STACK", "hpicfStackBasicGroup"), ("HP-ICF-STACK", "hpicfStackMultiAgentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfStackCompliance = hpicfStackCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfStackCompliance.setDescription('The compliance statement for agents managing a stack of HP boxes.')
hpicfStackBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 6, 1, 2, 1)).setObjects(("HP-ICF-STACK", "hpicfStackBoxId"), ("HP-ICF-STACK", "hpicfStackBoxName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfStackBasicGroup = hpicfStackBasicGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfStackBasicGroup.setDescription('A collection of objects for managing boxes in a stack.')
hpicfStackMultiAgentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 6, 1, 2, 2)).setObjects(("HP-ICF-STACK", "hpicfStackAgentBoxId"), ("HP-ICF-STACK", "hpicfStackActiveAgent"), ("HP-ICF-STACK", "hpicfStackAgentForced"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfStackMultiAgentGroup = hpicfStackMultiAgentGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfStackMultiAgentGroup.setDescription('A collection of objects for managing redundant agents in a stack of HP boxes.')
mibBuilder.exportSymbols("HP-ICF-STACK", hpicfStackAgentBoxId=hpicfStackAgentBoxId, hpicfStackActiveAgent=hpicfStackActiveAgent, hpicfStackBoxId=hpicfStackBoxId, hpicfStackBoxName=hpicfStackBoxName, hpicfStackMib=hpicfStackMib, hpicfStackAgentEntry=hpicfStackAgentEntry, PYSNMP_MODULE_ID=hpicfStackMib, hpicfStackBoxTable=hpicfStackBoxTable, hpicfStackBasicGroup=hpicfStackBasicGroup, hpicfStackMultiAgentGroup=hpicfStackMultiAgentGroup, hpicfStackCompliance=hpicfStackCompliance, hpicfStackAgentTable=hpicfStackAgentTable, hpicfStackBoxEntry=hpicfStackBoxEntry, hpicfStackConformance=hpicfStackConformance, hpicfStackGroups=hpicfStackGroups, hpicfStack=hpicfStack, hpicfStackAgentForced=hpicfStackAgentForced, hpicfStackCompliances=hpicfStackCompliances)
