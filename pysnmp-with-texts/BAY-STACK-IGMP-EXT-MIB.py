#
# PySNMP MIB module BAY-STACK-IGMP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-IGMP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Gauge32, NotificationType, ObjectIdentity, IpAddress, Integer32, Unsigned32, Counter64, iso, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Gauge32", "NotificationType", "ObjectIdentity", "IpAddress", "Integer32", "Unsigned32", "Counter64", "iso", "Counter32", "ModuleIdentity")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackIgmpExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 32))
bayStackIgmpExtMib.setRevisions(('2009-10-26 00:00', '2009-01-19 00:00', '2008-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackIgmpExtMib.setRevisionsDescriptions(('Ver 3: Added bsIgmpExtAvailableHardwareResources.', 'Ver 2: Added bsIgmpExtFilterProfileClearStats and bsIgmpExtFilterProfileDroppedPackets. Expanded range of bsIgmpExtFilterProfileId.', 'Ver 1: Initial version.',))
if mibBuilder.loadTexts: bayStackIgmpExtMib.setLastUpdated('200910260000Z')
if mibBuilder.loadTexts: bayStackIgmpExtMib.setOrganization('Nortel Ltd.')
if mibBuilder.loadTexts: bayStackIgmpExtMib.setContactInfo('nortel.com')
if mibBuilder.loadTexts: bayStackIgmpExtMib.setDescription('This MIB module is an extension to the standard IGMP MIBs.')
bsIgmpExtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 32, 0))
bsIgmpExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 32, 1))
bsIgmpExtFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1), )
if mibBuilder.loadTexts: bsIgmpExtFilterProfileTable.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterProfileTable.setDescription('This table contains IGMP filter profile information.')
bsIgmpExtFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1), ).setIndexNames((0, "BAY-STACK-IGMP-EXT-MIB", "bsIgmpExtFilterProfileId"))
if mibBuilder.loadTexts: bsIgmpExtFilterProfileEntry.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterProfileEntry.setDescription('An entry representing an IGMP filter profile.')
bsIgmpExtFilterProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: bsIgmpExtFilterProfileId.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterProfileId.setDescription('A unique integer value used to identify entries in this table.')
bsIgmpExtFilterProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterProfileType.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterProfileType.setDescription('This value indicates whether IGMP messages from the address ranges in this profile are allowed or denied.')
bsIgmpExtFilterProfilePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 3), PortList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterProfilePortList.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterProfilePortList.setDescription('The list of ports to which this profile applies.')
bsIgmpExtFilterProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterProfileRowStatus.setDescription('This object is used to create/delete entries in this table.')
bsIgmpExtFilterProfileDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIgmpExtFilterProfileDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterProfileDroppedPackets.setDescription('The number of packets that were matched by this profile and dropped.')
bsIgmpExtFilterRangeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2), )
if mibBuilder.loadTexts: bsIgmpExtFilterRangeTable.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterRangeTable.setDescription('This table contains IGMP filter profile address ranges.')
bsIgmpExtFilterRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-IGMP-EXT-MIB", "bsIgmpExtFilterProfileId"), (0, "BAY-STACK-IGMP-EXT-MIB", "bsIgmpExtFilterRangeId"))
if mibBuilder.loadTexts: bsIgmpExtFilterRangeEntry.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterRangeEntry.setDescription('An entry containing an IGMP filter profile address range.')
bsIgmpExtFilterRangeId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: bsIgmpExtFilterRangeId.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterRangeId.setDescription('An integer value used to uniquely identify entries in this table within a particular IGMP filter profile.')
bsIgmpExtFilterRangeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressType.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressType.setDescription('This value indicates the type of address contained in the corresponding instances of bsIgmpExtFilterRangeAddressStart and bsIgmpExtFilterRangeAddressEnd. Currently only values of ipv4(1) and ipv6(2) are allowed.')
bsIgmpExtFilterRangeAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressStart.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressStart.setDescription('The starting address of this range. Only multicast addresses are allowed.')
bsIgmpExtFilterRangeAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressEnd.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterRangeAddressEnd.setDescription('The ending address of this range. Only multicast addresses are allowed.')
bsIgmpExtFilterRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsIgmpExtFilterRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterRangeRowStatus.setDescription('This object is used to create/delete entries in this table.')
bsIgmpExtFilterProfileScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 3))
bsIgmpExtFilterProfileClearStats = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIgmpExtFilterProfileClearStats.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtFilterProfileClearStats.setDescription('This object is used to clear IGMP profile statistics. Setting it to a particular profile ID will clear statistics for that profile. Setting it to 0 will clear statistics for all profiles. When read, the value is always 0.')
bsIgmpExtScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 4))
bsIgmpExtAvailableHardwareResources = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsIgmpExtAvailableHardwareResources.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtAvailableHardwareResources.setDescription('This object returns the number of available hardware resources for IGMP.')
bsIgmpExtHardwareCompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 32, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ers5510", 1), ("nonErs5510", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsIgmpExtHardwareCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: bsIgmpExtHardwareCompatibilityMode.setDescription('This object is used to set the 5510 hardware compatilibity mode for IGMP.')
mibBuilder.exportSymbols("BAY-STACK-IGMP-EXT-MIB", bsIgmpExtFilterProfileScalars=bsIgmpExtFilterProfileScalars, bsIgmpExtFilterRangeId=bsIgmpExtFilterRangeId, bsIgmpExtFilterRangeAddressStart=bsIgmpExtFilterRangeAddressStart, bsIgmpExtFilterProfileClearStats=bsIgmpExtFilterProfileClearStats, bsIgmpExtObjects=bsIgmpExtObjects, bsIgmpExtFilterProfileEntry=bsIgmpExtFilterProfileEntry, bsIgmpExtFilterRangeEntry=bsIgmpExtFilterRangeEntry, bsIgmpExtFilterRangeTable=bsIgmpExtFilterRangeTable, bsIgmpExtFilterProfilePortList=bsIgmpExtFilterProfilePortList, bsIgmpExtHardwareCompatibilityMode=bsIgmpExtHardwareCompatibilityMode, bsIgmpExtFilterProfileRowStatus=bsIgmpExtFilterProfileRowStatus, bsIgmpExtFilterRangeAddressEnd=bsIgmpExtFilterRangeAddressEnd, bayStackIgmpExtMib=bayStackIgmpExtMib, bsIgmpExtFilterProfileType=bsIgmpExtFilterProfileType, bsIgmpExtAvailableHardwareResources=bsIgmpExtAvailableHardwareResources, bsIgmpExtScalars=bsIgmpExtScalars, bsIgmpExtFilterProfileId=bsIgmpExtFilterProfileId, PYSNMP_MODULE_ID=bayStackIgmpExtMib, bsIgmpExtFilterProfileDroppedPackets=bsIgmpExtFilterProfileDroppedPackets, bsIgmpExtFilterRangeRowStatus=bsIgmpExtFilterRangeRowStatus, bsIgmpExtNotifications=bsIgmpExtNotifications, bsIgmpExtFilterRangeAddressType=bsIgmpExtFilterRangeAddressType, bsIgmpExtFilterProfileTable=bsIgmpExtFilterProfileTable)
