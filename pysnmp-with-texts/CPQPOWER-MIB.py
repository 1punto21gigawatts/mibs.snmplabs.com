#
# PySNMP MIB module CPQPOWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQPOWER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
compaq, = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysLocation, sysDescr, sysName, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysDescr", "sysName", "sysContact")
NotificationType, Bits, Integer32, ModuleIdentity, iso, Counter64, Counter32, NotificationType, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Integer32", "ModuleIdentity", "iso", "Counter64", "Counter32", "NotificationType", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Gauge32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqPower = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165))
powerDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1))
trapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1, 1))
managementModuleIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1, 2))
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2))
pduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 1))
pduInput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 2))
pduOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 3))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 4))
upsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 5))
upsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 6))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 7))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 8))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 9))
upsRecep = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 10))
upsTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 11))
pdr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 4))
pdrIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 4, 1))
pdrPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 4, 2))
pdrBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 4, 3))
trapCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCode.setStatus('mandatory')
if mibBuilder.loadTexts: trapCode.setDescription("A number identifying the event for the trap that was sent. Mapped unique trap code per unique event to be used by ISEE's decoder ring.")
trapDescription = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: trapDescription.setDescription('A string identifying the event for that last trap that was sent.')
trapDeviceMgmtUrl = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDeviceMgmtUrl.setStatus('mandatory')
if mibBuilder.loadTexts: trapDeviceMgmtUrl.setDescription('A string contains the URL for the management software.')
trapDeviceDetails = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDeviceDetails.setStatus('mandatory')
if mibBuilder.loadTexts: trapDeviceDetails.setDescription('A string details information about the device, including model, serial number, part number, etc....')
trapDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: trapDeviceName.setDescription('A string contains the name of the device.')
trapCritical = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
if mibBuilder.loadTexts: trapCritical.setDescription('A critical alarm has occurred. Action: Check the Trap Details for more information.')
trapWarning = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
if mibBuilder.loadTexts: trapWarning.setDescription('A warning alarm has occurred. Action: Check the Trap Details for more information.')
trapInformation = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
if mibBuilder.loadTexts: trapInformation.setDescription('An informational alarm has occurred. Action: Check the Trap Details for more information.')
trapCleared = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
if mibBuilder.loadTexts: trapCleared.setDescription('An alarm has cleared. Action: Check the Trap Details for more information.')
trapTest = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,5)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
if mibBuilder.loadTexts: trapTest.setDescription('Test trap sent to a trap receiver to check proper reception of traps')
deviceTrapInitialization = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,6)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "deviceIdentName"))
if mibBuilder.loadTexts: deviceTrapInitialization.setDescription('This trap is sent each time a power device is initialized.')
deviceManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: deviceManufacturer.setDescription('The device manufacturer.')
deviceModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceModel.setStatus('mandatory')
if mibBuilder.loadTexts: deviceModel.setDescription('The device model.')
deviceFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFirmwareVersion.setDescription('The device firmware version(s).')
deviceHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: deviceHardwareVersion.setDescription('The device hardware version.')
deviceIdentName = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIdentName.setDescription('A string identifying the device.')
devicePartNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: devicePartNumber.setDescription('The device part number.')
deviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: deviceSerialNumber.setDescription('The device serial number.')
deviceMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: deviceMACAddress.setDescription('The device MAC address.')
numOfPdu = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfPdu.setStatus('mandatory')
if mibBuilder.loadTexts: numOfPdu.setDescription('The number of PDUs.')
pduIdentTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2), )
if mibBuilder.loadTexts: pduIdentTable.setStatus('mandatory')
if mibBuilder.loadTexts: pduIdentTable.setDescription('The Aggregate Object with number of entries equal to NumOfPdu and including the PduIdent group.')
pduIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pduIdentIndex"))
if mibBuilder.loadTexts: pduIdentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduIdentEntry.setDescription('The ident table entry containing the name, model, manufacturer, firmware version, part number, etc.')
pduIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduIdentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pduIdentIndex.setDescription('Index for the PduIdentEntry table.')
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setStatus('mandatory')
if mibBuilder.loadTexts: pduName.setDescription('The string identify the device.')
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduModel.setStatus('mandatory')
if mibBuilder.loadTexts: pduModel.setDescription('The Device Model.')
pduManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: pduManufacturer.setDescription('The Device Manufacturer Name (e.g. Hewlett-Packard).')
pduFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: pduFirmwareVersion.setDescription('The firmware revision level of the device.')
pduPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pduPartNumber.setDescription('The device part number.')
pduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pduSerialNumber.setDescription('The deice serial number.')
pduStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pduStatus.setDescription('The overall status of the device. A value of OK(2) indicates the device is operating normally. A value of degraded(3) indicates the device is operating with warning indicators. A value of failed(4) indicates the device is operating with critical indicators.')
pduControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduControllable.setStatus('mandatory')
if mibBuilder.loadTexts: pduControllable.setDescription('This object indicates whether or not the device is controllable.')
pduInputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1), )
if mibBuilder.loadTexts: pduInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: pduInputTable.setDescription('The Aggregate Object with number of entries equal to NumOfPdu and including the PduInput group.')
pduInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pduInputIndex"))
if mibBuilder.loadTexts: pduInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduInputEntry.setDescription('The input table entry containing the voltage and current for the PDU')
pduInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pduInputIndex.setDescription('Index for the PduInputEntry table.')
inputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: inputVoltage.setDescription('The measured input voltage from the PDU meters in volts.')
inputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: inputCurrent.setDescription('The measured input current from the PDU meters in amps.')
pduOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1), )
if mibBuilder.loadTexts: pduOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputTable.setDescription('The Aggregate Object with number of entries equal to NumOfPdu and including the PduInput group.')
pduOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pduOutputIndex"))
if mibBuilder.loadTexts: pduOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputEntry.setDescription('The input table entry containing the name, heat load, current load, power load, firmware, etc.')
pduOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputIndex.setDescription('Index for the PduOutputEntry table.')
pduOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputLoad.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputLoad.setDescription('The device output load in percent of rated capacity. A value of -1 will be returned if the heat load is unable to be measured.')
pduOutputHeat = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputHeat.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputHeat.setDescription('The total heat load measured on the PDU in BTUs. A value of -1 will be returned if the heat load is unable to be measured.')
pduOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputPower.setDescription('The total power load measured on the PDU in watts. A value of -1 will be returned if the power load is unable to be measured.')
pduOutputNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputNumBreakers.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputNumBreakers.setDescription('The number of breakers for the device. This variable indicates the number of rows in the breakers table.')
pduOutputBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2), )
if mibBuilder.loadTexts: pduOutputBreakerTable.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputBreakerTable.setDescription('List of breaker table entries. The number of entries is given by pduOutputNumBreakers .')
pduOutputBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pduOutputIndex"), (0, "CPQPOWER-MIB", "breakerIndex"))
if mibBuilder.loadTexts: pduOutputBreakerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pduOutputBreakerEntry.setDescription('An entry containing information applicable to an breaker.')
breakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: breakerIndex.setDescription('The breaker identifier.')
breakerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: breakerVoltage.setDescription('The breaker voltage in volts.')
breakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: breakerCurrent.setDescription('The breaker current draw in Amps.')
breakerPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerPercentLoad.setStatus('mandatory')
if mibBuilder.loadTexts: breakerPercentLoad.setDescription('The breaker load in percent.')
breakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("overloadWarning", 2), ("overloadCritical", 3), ("voltageRangeWarning", 4), ("voltageRangeCritical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: breakerStatus.setDescription('This object indicates the status of the breaker. A value of normal(1) indicates the breaker is operating normally. A value of overloadWarning(2) indicates the breaker has an overload warning. A value of overloadCritical(3) indicates the breaker is overloaded. A value of voltageRangeWarning(4) indicates the breaker voltage is out of tolerance by 10-20%. A value of voltageRangeCritical(5) indicates the breaker voltage is out of tolerance by more than 20%. Note: Overload status has priority over voltage tolerance status.')
upsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentManufacturer.setDescription('The UPS Manufacturer Name (e.g. Hewlett-Packard).')
upsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentModel.setDescription('The UPS Model;Part number;Serial number (e.g. HP R5500 XR;204451-B21;B00123456W).')
upsIdentSoftwareVersions = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentSoftwareVersions.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentSoftwareVersions.setDescription('The firmware revision level(s) of the UPS microcontroller(s).')
upsIdentOemCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentOemCode.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentOemCode.setDescription('A binary code indicating vendor. This should be a ?0x0c? for HP')
upsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatTimeRemaining.setDescription('Battery run time in seconds before UPS turns off due to low battery.')
upsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatVoltage.setDescription('Battery voltage as reported by the UPS meters.')
upsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatCurrent.setDescription('Battery Current as reported by the UPS metering. Current is positive when discharging, negative when recharging the battery.')
upsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatCapacity.setDescription('Battery percent charge.')
upsBatteryAbmStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("batteryCharging", 1), ("batteryDischarging", 2), ("batteryFloating", 3), ("batteryResting", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryAbmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryAbmStatus.setDescription('Gives the status of the Advanced Battery Management; batteryFloating(3) status means that the charger is temporarily charging the battery to its float voltage; batteryResting(4) is the state when the battery is fully charged and none of the other actions (charging/discharging/floating) is being done.')
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputFrequency.setDescription('The utility line frequency in tenths of Hz.')
upsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLineBads.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLineBads.setDescription('The number of times the Input was out of tolerance in voltage or frequency.')
upsInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputNumPhases.setDescription('')
upsInputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4), )
if mibBuilder.loadTexts: upsInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputTable.setDescription('The Aggregate Object with number of entries equal to NumPhases and including the UpsInput group.')
upsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsInputPhase"))
if mibBuilder.loadTexts: upsInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputEntry.setDescription('The input table entry containing the current, voltage, etc.')
upsInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputPhase.setDescription('The number of the phase. Serves as index for input table.')
upsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputVoltage.setDescription('The measured input voltage from the UPS meters in volts.')
upsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputCurrent.setDescription('The measured input current from the UPS meters in amps.')
upsInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputWatts.setDescription('The measured input real power in watts.')
upsInputSource = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("primaryUtility", 3), ("bypassFeed", 4), ("secondaryUtility", 5), ("generator", 6), ("flywheel", 7), ("fuelcell", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputSource.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputSource.setDescription('The present external source of input power. The enumeration none(2) indicates that there is no external source of power, for example, the UPS is On Battery (an internal source). The bypassFeed(4) can only be used when the Bypass source is known to be a separate utility feed than the primaryUtility(3).')
upsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputLoad.setDescription('The UPS output load in percent of rated capacity.')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputFrequency.setDescription('The measured UPS output frequency in tenths of Hz.')
upsOutputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputNumPhases.setDescription('The number of metered output phases, serves as the table index.')
upsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4), )
if mibBuilder.loadTexts: upsOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputTable.setDescription('The Aggregate Object with number of entries equal to NumPhases and including the UpsOutput group.')
upsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsOutputPhase"))
if mibBuilder.loadTexts: upsOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputEntry.setDescription('Output Table Entry containing voltage, current, etc.')
upsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPhase.setDescription('The number {1..3} of the output phase.')
upsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputVoltage.setDescription('The measured output voltage from the UPS metering in volts.')
upsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrent.setDescription('The measured UPS output current in amps.')
upsOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputWatts.setDescription('The measured real output power in watts.')
upsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7), ("parallelCapacity", 8), ("parallelRedundant", 9), ("highEfficiencyMode", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputSource.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputSource.setDescription('The present source of output power. The enumeration none(2) indicates that there is no source of output power (and therefore no output power), for example, the system has opened the output breaker.')
upsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassFrequency.setDescription('The bypass frequency in tenths of Hz.')
upsBypassNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassNumPhases.setDescription('The number of lines in the UPS bypass table.')
upsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3), )
if mibBuilder.loadTexts: upsBypassTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassTable.setDescription('')
upsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsBypassPhase"))
if mibBuilder.loadTexts: upsBypassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassEntry.setDescription('Entry in the UpsBypassTable.')
upsBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassPhase.setDescription('The Bypass Phase, index for the table.')
upsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsBypassVoltage.setDescription('The measured UPS bypass voltage in volts.')
upsEnvAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvAmbientTemp.setDescription('The reading of the ambient temperature in the vicinity of the UPS or SNMP agent.')
upsEnvAmbientLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvAmbientLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvAmbientLowerLimit.setDescription('The Lower Limit of the ambient temperature; if UpsEnvAmbientTemp falls below this value, the UpsAmbientTempBad alarm will occur.')
upsEnvAmbientUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvAmbientUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvAmbientUpperLimit.setDescription('The Upper Limit of the ambient temperature; if UpsEnvAmbientTemp rises above this value, the UpsAmbientTempBad alarm will occur. This value should be greater than UpsEnvAmbientLowerLimit.')
upsEnvAmbientHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvAmbientHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvAmbientHumidity.setDescription('The reading of the ambient humidity in the vicinity of the UPS or SNMP agent.')
upsEnvRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvRemoteTemp.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvRemoteTemp.setDescription('The reading of a remote temperature sensor connected to the UPS or SNMP agent.')
upsEnvRemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvRemoteHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvRemoteHumidity.setDescription('The reading of a remote humidity sensor connected to the UPS or SNMP agent.')
upsEnvNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvNumContacts.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvNumContacts.setDescription('The number of Contacts in the UpsContactsTable. This object indicates the number of rows in the UpsContactsTable.')
upsContactsTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8), )
if mibBuilder.loadTexts: upsContactsTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsContactsTable.setDescription('A list of Contact Sensing table entries. The number of entries is given by the value of UpsEnvNumContacts.')
upsContactsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsContactIndex"))
if mibBuilder.loadTexts: upsContactsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsContactsTableEntry.setDescription('An entry containing information applicable to a particular Contact input.')
upsContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsContactIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsContactIndex.setDescription('The Contact identifier; identical to the Contact Number.')
upsContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("anyChange", 3), ("notUsed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsContactType.setStatus('mandatory')
if mibBuilder.loadTexts: upsContactType.setDescription("The normal state for this contact. The 'other' state is the Active state for generating the UpstdContactActiveNotice trap. If anyChange(3) is selected, then this trap is sent any time the contact changes to either Open or Closed. No traps are sent if the Contact is set to notUsed(4). In many cases, the configuration for Contacts may be done by other means, so this object may be read-only.")
upsContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("openWithNotice", 3), ("closedWithNotice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsContactState.setStatus('mandatory')
if mibBuilder.loadTexts: upsContactState.setDescription('The current state of the Contact input; the value is based on the open/closed input state and the setting for UpsContactType. When entering the openWithNotice(3) and closedWithNotice(4) states, no entries added to the UpsAlarmTable, but the UpstdContactActiveNotice trap is sent.')
upsContactDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsContactDescr.setStatus('mandatory')
if mibBuilder.loadTexts: upsContactDescr.setDescription('A label identifying the Contact. This object should be set by the administrator.')
upsEnvRemoteTempLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvRemoteTempLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvRemoteTempLowerLimit.setDescription('The Lower Limit of the remote temperature; if UpsEnvRemoteTemp falls below this value, the UpsRemoteTempBad alarm will occur.')
upsEnvRemoteTempUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvRemoteTempUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvRemoteTempUpperLimit.setDescription('The Upper Limit of the remote temperature; if UpsEnvRemoteTemp rises above this value, the UpsRemoteTempBad alarm will occur. This value should be greater than UpsEnvRemoteTempLowerLimit.')
upsEnvRemoteHumidityLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvRemoteHumidityLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvRemoteHumidityLowerLimit.setDescription('The Lower Limit of the remote humidity reading; if UpsEnvRemoteHumidity falls below this value, the UpsRemoteHumidityBad alarm will occur.')
upsEnvRemoteHumidityUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvRemoteHumidityUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvRemoteHumidityUpperLimit.setDescription('The Upper Limit of the remote humidity reading; if UpsEnvRemoteHumidity rises above this value, the UpsRemoteHumidityBad alarm will occur. This value should be greater than UpsEnvRemoteHumidityLowerLimit.')
upsTestBattery = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("startTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTestBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestBattery.setDescription('Setting this variable to startTest initiates the battery test. All other set values are invalid.')
upsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestBatteryStatus.setDescription('Reading this enumerated value gives an indication of the UPS Battery test status.')
upsTestTrap = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("startTestTrap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTestTrap.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestTrap.setDescription('Setting this variable to startTestTrap initiates a TrapTest is sent out from HPMM. All other set values are invalid.')
upsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlOutputOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlOutputOffDelay.setDescription('Setting this value to other than zero will cause the UPS output to turn off after the number of seconds. Setting it to 0 will cause an attempt to abort a pending shutdown.')
upsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlOutputOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlOutputOnDelay.setDescription('Setting this value to other than zero will cause the UPS output to turn on after the number of seconds. Setting it to 0 will cause an attempt to abort a pending startup.')
upsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlOutputOffTrapDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlOutputOffTrapDelay.setDescription('When UpsControlOutputOffDelay reaches this value, a trap will be sent.')
upsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlOutputOnTrapDelay.setStatus('deprecated')
if mibBuilder.loadTexts: upsControlOutputOnTrapDelay.setDescription('When UpsControlOutputOnDelay reaches this value, a UpsOutputOff trap will be sent.')
upsControlToBypassDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlToBypassDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsControlToBypassDelay.setDescription('Setting this value to other than zero will cause the UPS output to go to Bypass after the number of seconds. If the Bypass is unavailable, this may cause the UPS to not supply power to the load. Setting it to 0 will cause an attempt to abort a pending shutdown.')
upsLoadShedSecsWithRestart = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsLoadShedSecsWithRestart.setStatus('mandatory')
if mibBuilder.loadTexts: upsLoadShedSecsWithRestart.setDescription("Setting this value will cause the UPS output to turn off after the set number of seconds, then restart (after a UPS-defined 'down time') when the utility is again available. Unlike UpsControlOutputOffDelay, which might or might not, this object always maps to the XCP 0x8A Load Dump & Restart command, so the desired shutdown and restart behavior is guaranteed to happen. Once set, this command cannot be aborted. This is the preferred Control object to use when performing an On Battery OS Shutdown.")
upsConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigOutputVoltage.setDescription('The nominal UPS Output voltage per phase in volts.')
upsConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigInputVoltage.setDescription('The nominal UPS Input voltage per phase in volts.')
upsConfigOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigOutputWatts.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigOutputWatts.setDescription('The nominal UPS available real power output in watts.')
upsConfigOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigOutputFreq.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigOutputFreq.setDescription('The nominal output frequency in tenths of Hz.')
upsConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigDateAndTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigDateAndTime.setDescription('Date and time information for the UPS. Setting this variable will initiate a set UPS date and time to this value. Reading this variable will return the UPS time and date. This value is not referenced to sysUpTime. It is simply the clock value from the UPS real time clock. Format is as follows: MM/DD/YYYY:HH:MM:SS.')
upsConfigLowOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigLowOutputVoltageLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigLowOutputVoltageLimit.setDescription('The Lower limit for acceptable Output Voltage, per the UPS specifications.')
upsConfigHighOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigHighOutputVoltageLimit.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigHighOutputVoltageLimit.setDescription('The Upper limit for acceptable Output Voltage, per the UPS specifications.')
upsNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsNumReceptacles.setStatus('mandatory')
if mibBuilder.loadTexts: upsNumReceptacles.setDescription('The number of independently controllable Receptacles, as described in the UpsRecepTable.')
upsRecepTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2), )
if mibBuilder.loadTexts: upsRecepTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepTable.setDescription('The Aggregate Object with number of entries equal to NumReceptacles and including the UpsRecep group.')
upsRecepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsRecepIndex"))
if mibBuilder.loadTexts: upsRecepEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepEntry.setDescription('The Recep table entry, etc.')
upsRecepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRecepIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepIndex.setDescription('The number of the Receptacle. Serves as index for Receptacle table.')
upsRecepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("pendingOff", 3), ("pendingOn", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRecepStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepStatus.setDescription('The Recep Status 1=On/Close, 2=Off/Open, 3=On w/Pending Off, 4=Off w/Pending ON, 5=Unknown.')
upsRecepOffDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepOffDelaySecs.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepOffDelaySecs.setDescription('The Delay until the Receptacle is turned Off. Setting this value to other than -1 will cause the UPS output to turn off after the number of seconds (0 is immediately). Setting it to -1 will cause an attempt to abort a pending shutdown. When this object is set while the UPS is On Battery, it is not necessary to set UpsRecepOnDelaySecs, since the outlet will turn back on automatically when power is available again.')
upsRecepOnDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepOnDelaySecs.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepOnDelaySecs.setDescription(' The Delay until the Receptacle is turned On. Setting this value to other than -1 will cause the UPS output to turn on after the number of seconds (0 is immediately). Setting it to -1 will cause an attempt to abort a pending restart.')
upsRecepAutoOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepAutoOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepAutoOffDelay.setDescription('The delay after going On Battery until the Receptacle is automatically turned Off. A value of -1 means that this Output should never be turned Off automatically, but must be turned Off only by command. Values from 0 to 30 are valid, but probably innappropriate. The AutoOffDelay can be used to prioritize loads in the event of a prolonged power outage; less critical loads will turn off earlier to extend battery time for the more critical loads. If the utility power is restored before the AutoOff delay counts down to 0 on an outlet, that outlet will not turn Off.')
upsRecepAutoOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepAutoOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepAutoOnDelay.setDescription('Seconds delay after the Outlet is signaled to turn On before the Output is Automatically turned ON. A value of -1 means that this Output should never be turned On automatically, but only when specifically commanded to do so. A value of 0 means that the Receptacle should come On immediately at power-up or for an On command.')
upsRecepShedSecsWithRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepShedSecsWithRestart.setStatus('mandatory')
if mibBuilder.loadTexts: upsRecepShedSecsWithRestart.setDescription("Setting this value will cause the UPS output to turn off after the set number of seconds, then restart (after a UPS-defined 'down time') when the utility is again available. Unlike UpsRecepOffDelaySecs, which might or might not, this object always maps to the XCP 0x8A Load Dump & Restart command, so the desired shutdown and restart behavior is guaranteed to happen. Once set, this command cannot be aborted.")
upsTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTopologyType.setStatus('mandatory')
if mibBuilder.loadTexts: upsTopologyType.setDescription("Value which denotes the type of UPS by its power topology. Values are the same as those described in the XCP Topology block's Overall Topology field.")
upsTopoMachineCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTopoMachineCode.setStatus('mandatory')
if mibBuilder.loadTexts: upsTopoMachineCode.setDescription("ID Value which denotes the Compaq/HP model of the UPS for software. Values are the same as those described in the XCP Configuration block's Machine Code field.")
upsTopoUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTopoUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsTopoUnitNumber.setDescription("Identifies which unit and what type of data is being reported. A value of 0 means that this MIB information comes from the top-level system view (eg, manifold module or system bypass cabinet reporting total system output). Standalone units also use a value of 0, since they are the 'full system' view. A value of 1 or higher indicates the number of the module in the system which is reporting only its own data in the HP MIB objects.")
upsTopoPowerStrategy = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highAlert", 1), ("standard", 2), ("enableHighEfficiency", 3), ("immediateHighEfficiency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTopoPowerStrategy.setStatus('mandatory')
if mibBuilder.loadTexts: upsTopoPowerStrategy.setDescription('Value which denotes which Power Strategy is currently set for the UPS. The values are: highAlert(1) - The UPS shall optimize its operating state to maximize its power-protection levels. This mode will be held for at most 24 hours. standard(2) - Balanced, normal power protection strategy. UPS will not enter HE operating mode from this setting. enableHighEfficiency(3) - The UPS is enabled to enter HE operating mode to optimize its operating state to maximize its efficiency, when conditions change to permit it (as determined by the UPS). forceHighEfficiency(4) - If this value is permitted to be Set for this UPS, and if conditions permit, requires the UPS to enter High Efficiency mode now, without delay (for as long as utility conditions permit). After successfully set to forceHighEfficiency(4), UpsTopoPowerStrategy changes to value enableHighEfficiency(3). UpsOutputSource will indicate if the UPS status is actually operating in High Efficiency mode.')
pdrName = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdrName.setStatus('mandatory')
if mibBuilder.loadTexts: pdrName.setDescription('The string identify the device.')
pdrModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrModel.setStatus('mandatory')
if mibBuilder.loadTexts: pdrModel.setDescription('The Device Model.')
pdrManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: pdrManufacturer.setDescription('The Device Manufacturer Name (e.g. Hewlett-Packard).')
pdrFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: pdrFirmwareVersion.setDescription('The firmware revision level of the device.')
pdrPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPartNumber.setDescription('The device part number.')
pdrSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pdrSerialNumber.setDescription("The PDR's serial number.")
pdrVARating = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrVARating.setStatus('mandatory')
if mibBuilder.loadTexts: pdrVARating.setDescription('The VA Rating of this PDR (all phases)')
pdrNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrNominalOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: pdrNominalOutputVoltage.setDescription('The nominal Output Voltage may differ from the nominal Input Voltage if the PDR has an input transformer')
pdrNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: pdrNumPhases.setDescription('The number of phases for this PDR')
pdrNumPanels = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrNumPanels.setStatus('mandatory')
if mibBuilder.loadTexts: pdrNumPanels.setDescription('The number of panels or subfeeds in this PDR')
pdrNumBreakers = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrNumBreakers.setStatus('mandatory')
if mibBuilder.loadTexts: pdrNumBreakers.setDescription('The number of breakers in this PDR')
pdrPanelTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1), )
if mibBuilder.loadTexts: pdrPanelTable.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelTable.setDescription('Aggregate Object with number of entries equal to pdrNumPanels')
pdrPanelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pdrPanelIndex"))
if mibBuilder.loadTexts: pdrPanelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelEntry.setDescription('The panel table entry containing all power parameters for each panel.')
pdrPanelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelIndex.setDescription('Index for the pdrPanelEntry table.')
pdrPanelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelFrequency.setDescription('The present frequency reading for the panel voltage.')
pdrPanelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelPower.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelPower.setDescription('The present power of the panel.')
pdrPanelRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelRatedCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelRatedCurrent.setDescription('The present rated current of the panel.')
pdrPanelMonthlyKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelMonthlyKWH.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelMonthlyKWH.setDescription('The accumulated KWH for this panel since the beginning of this calendar month or since the last reset.')
pdrPanelYearlyKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelYearlyKWH.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelYearlyKWH.setDescription('The accumulated KWH for this panel since the beginning of this calendar year or since the last reset.')
pdrPanelTotalKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelTotalKWH.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelTotalKWH.setDescription('The accumulated KWH for this panel since it was put into service or since the last reset.')
pdrPanelVoltageA = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelVoltageA.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelVoltageA.setDescription('The measured panel output voltage.')
pdrPanelVoltageB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelVoltageB.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelVoltageB.setDescription('The measured panel output voltage.')
pdrPanelVoltageC = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelVoltageC.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelVoltageC.setDescription('The measured panel output voltage.')
pdrPanelCurrentA = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelCurrentA.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelCurrentA.setDescription('The measured panel output current.')
pdrPanelCurrentB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelCurrentB.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelCurrentB.setDescription('The measured panel output current.')
pdrPanelCurrentC = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelCurrentC.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelCurrentC.setDescription('The measured panel output current.')
pdrPanelLoadA = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelLoadA.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelLoadA.setDescription('The percentage of load is the ratio of each output current to the rated output current to the panel.')
pdrPanelLoadB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelLoadB.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelLoadB.setDescription('The percentage of load is the ratio of each output current to the rated output current to the panel.')
pdrPanelLoadC = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelLoadC.setStatus('mandatory')
if mibBuilder.loadTexts: pdrPanelLoadC.setDescription('The percentage of load is the ratio of each output current to the rated output current to the panel.')
pdrBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1), )
if mibBuilder.loadTexts: pdrBreakerTable.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerTable.setDescription('List of breaker table entries. The number of entries is given by pdrNumBreakers for this panel.')
pdrBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pdrPanelIndex"), (0, "CPQPOWER-MIB", "pdrBreakerIndex"))
if mibBuilder.loadTexts: pdrBreakerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerEntry.setDescription('An entry containing information applicable to a particular output breaker of a particular panel.')
pdrBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerIndex.setDescription('The index of breakers. 42 breakers in each panel, arranged in odd and even columns')
pdrBreakerPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerPanel.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerPanel.setDescription('The index of panel that these breakers are installed on.')
pdrBreakerNumPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerNumPosition.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerNumPosition.setDescription('The position of this breaker in the panel, 1-phase breaker or n-m breaker for 2-phase or n-m-k breaker for 3-phase.')
pdrBreakerNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerNumPhases.setDescription('The number of phase for this particular breaker.')
pdrBreakerNumSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerNumSequence.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerNumSequence.setDescription('The sequence of this breaker. i.e. 1 for single phase 1,2 for 2-phase or 1,2,3 for 3-phase.')
pdrBreakerRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerRatedCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerRatedCurrent.setDescription('The rated current in Amps for this particular breaker.')
pdrBreakerMonthlyKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerMonthlyKWH.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerMonthlyKWH.setDescription('The accumulated KWH for this breaker since the beginning of this calendar month or since the last reset.')
pdrBreakerYearlyKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerYearlyKWH.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerYearlyKWH.setDescription('The accumulated KWH for this breaker since the beginning of this calendar year or since the last reset.')
pdrBreakerTotalKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerTotalKWH.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerTotalKWH.setDescription('The accumulated KWH for this breaker since it was put into service or since the last reset.')
pdrBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerCurrent.setDescription('The measured output current for this breaker Current.')
pdrBreakerCurrentPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerCurrentPercent.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerCurrentPercent.setDescription('The ratio of output current over rated current for each breaker.')
pdrBreakerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerPower.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerPower.setDescription('The power for this breaker.')
pdrBreakerPercentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerPercentWarning.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerPercentWarning.setDescription('The percentage of Warning set for this breaker.')
pdrBreakerPercentOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerPercentOverload.setStatus('mandatory')
if mibBuilder.loadTexts: pdrBreakerPercentOverload.setDescription('The percentage of Overload set for this breaker.')
mibBuilder.exportSymbols("CPQPOWER-MIB", upsEnvRemoteTempUpperLimit=upsEnvRemoteTempUpperLimit, upsRecepAutoOffDelay=upsRecepAutoOffDelay, pduOutputBreakerTable=pduOutputBreakerTable, upsEnvRemoteHumidityUpperLimit=upsEnvRemoteHumidityUpperLimit, upsOutputPhase=upsOutputPhase, pduIdentIndex=pduIdentIndex, upsBypassNumPhases=upsBypassNumPhases, upsTopology=upsTopology, upsTestBatteryStatus=upsTestBatteryStatus, deviceMACAddress=deviceMACAddress, pduControllable=pduControllable, upsOutputEntry=upsOutputEntry, upsBypassFrequency=upsBypassFrequency, trapWarning=trapWarning, pdrBreakerTotalKWH=pdrBreakerTotalKWH, upsRecepAutoOnDelay=upsRecepAutoOnDelay, deviceIdentName=deviceIdentName, upsInputVoltage=upsInputVoltage, pduOutputBreakerEntry=pduOutputBreakerEntry, pdrPanelCurrentA=pdrPanelCurrentA, upsInputSource=upsInputSource, upsControlOutputOffTrapDelay=upsControlOutputOffTrapDelay, upsOutputNumPhases=upsOutputNumPhases, upsEnvRemoteHumidity=upsEnvRemoteHumidity, trapInformation=trapInformation, pdrPanelRatedCurrent=pdrPanelRatedCurrent, deviceHardwareVersion=deviceHardwareVersion, upsRecep=upsRecep, pduOutputTable=pduOutputTable, pduOutputPower=pduOutputPower, powerDevice=powerDevice, pdrPanelYearlyKWH=pdrPanelYearlyKWH, pdrName=pdrName, upsTopoMachineCode=upsTopoMachineCode, upsRecepOffDelaySecs=upsRecepOffDelaySecs, trapInfo=trapInfo, breakerIndex=breakerIndex, upsContactIndex=upsContactIndex, upsOutputSource=upsOutputSource, upsBatteryAbmStatus=upsBatteryAbmStatus, upsBatCapacity=upsBatCapacity, pdrPanelVoltageB=pdrPanelVoltageB, upsOutput=upsOutput, upsTopoUnitNumber=upsTopoUnitNumber, pduOutputIndex=pduOutputIndex, pduInputIndex=pduInputIndex, upsBattery=upsBattery, trapDeviceDetails=trapDeviceDetails, upsRecepShedSecsWithRestart=upsRecepShedSecsWithRestart, upsBypassTable=upsBypassTable, upsControlToBypassDelay=upsControlToBypassDelay, pduIdent=pduIdent, upsRecepTable=upsRecepTable, pdrPanelPower=pdrPanelPower, pdrBreakerTable=pdrBreakerTable, trapCritical=trapCritical, upsEnvAmbientLowerLimit=upsEnvAmbientLowerLimit, pdrPanelCurrentC=pdrPanelCurrentC, upsIdentModel=upsIdentModel, upsContactState=upsContactState, pduInput=pduInput, pduPartNumber=pduPartNumber, upsContactDescr=upsContactDescr, deviceManufacturer=deviceManufacturer, upsInput=upsInput, breakerStatus=breakerStatus, pdrBreakerPercentOverload=pdrBreakerPercentOverload, upsEnvAmbientHumidity=upsEnvAmbientHumidity, upsBatCurrent=upsBatCurrent, trapDescription=trapDescription, deviceSerialNumber=deviceSerialNumber, pdrBreakerCurrentPercent=pdrBreakerCurrentPercent, upsContactsTableEntry=upsContactsTableEntry, trapCleared=trapCleared, upsInputEntry=upsInputEntry, upsControlOutputOffDelay=upsControlOutputOffDelay, breakerVoltage=breakerVoltage, upsBypassPhase=upsBypassPhase, upsInputPhase=upsInputPhase, pdrNominalOutputVoltage=pdrNominalOutputVoltage, upsBatVoltage=upsBatVoltage, pduName=pduName, pdrBreakerNumSequence=pdrBreakerNumSequence, upsInputNumPhases=upsInputNumPhases, upsConfigHighOutputVoltageLimit=upsConfigHighOutputVoltageLimit, upsControlOutputOnTrapDelay=upsControlOutputOnTrapDelay, upsConfigOutputWatts=upsConfigOutputWatts, pdrPanel=pdrPanel, upsBypassEntry=upsBypassEntry, upsEnvironment=upsEnvironment, pdrPanelTotalKWH=pdrPanelTotalKWH, pdrPanelEntry=pdrPanelEntry, upsConfigOutputVoltage=upsConfigOutputVoltage, pduIdentEntry=pduIdentEntry, pdrNumPanels=pdrNumPanels, pdrManufacturer=pdrManufacturer, pdrBreaker=pdrBreaker, upsEnvAmbientUpperLimit=upsEnvAmbientUpperLimit, pduIdentTable=pduIdentTable, numOfPdu=numOfPdu, pdrPanelLoadB=pdrPanelLoadB, deviceTrapInitialization=deviceTrapInitialization, ups=ups, upsBypassVoltage=upsBypassVoltage, inputVoltage=inputVoltage, pdrPanelLoadC=pdrPanelLoadC, upsControl=upsControl, pdrPartNumber=pdrPartNumber, pdrBreakerEntry=pdrBreakerEntry, trapTest=trapTest, breakerPercentLoad=breakerPercentLoad, upsOutputCurrent=upsOutputCurrent, pduManufacturer=pduManufacturer, pduInputTable=pduInputTable, pduOutputEntry=pduOutputEntry, pduOutputHeat=pduOutputHeat, pdrPanelCurrentB=pdrPanelCurrentB, upsBatTimeRemaining=upsBatTimeRemaining, upsConfigOutputFreq=upsConfigOutputFreq, pdrFirmwareVersion=pdrFirmwareVersion, pdrBreakerPanel=pdrBreakerPanel, pduOutput=pduOutput, upsConfigLowOutputVoltageLimit=upsConfigLowOutputVoltageLimit, pdrSerialNumber=pdrSerialNumber, managementModuleIdent=managementModuleIdent, pdrBreakerPercentWarning=pdrBreakerPercentWarning, upsRecepEntry=upsRecepEntry, pdrPanelMonthlyKWH=pdrPanelMonthlyKWH, pdrBreakerRatedCurrent=pdrBreakerRatedCurrent, upsControlOutputOnDelay=upsControlOutputOnDelay, upsTopoPowerStrategy=upsTopoPowerStrategy, deviceFirmwareVersion=deviceFirmwareVersion, pdrVARating=pdrVARating, upsOutputFrequency=upsOutputFrequency, pduInputEntry=pduInputEntry, upsConfigDateAndTime=upsConfigDateAndTime, pdrBreakerNumPosition=pdrBreakerNumPosition, upsEnvRemoteTempLowerLimit=upsEnvRemoteTempLowerLimit, upsInputLineBads=upsInputLineBads, pdrPanelTable=pdrPanelTable, pdrNumPhases=pdrNumPhases, upsInputFrequency=upsInputFrequency, upsRecepOnDelaySecs=upsRecepOnDelaySecs, pduModel=pduModel, upsEnvRemoteTemp=upsEnvRemoteTemp, cpqPower=cpqPower, upsBypass=upsBypass, upsContactsTable=upsContactsTable, pdrPanelVoltageC=pdrPanelVoltageC, pduOutputNumBreakers=pduOutputNumBreakers, trapCode=trapCode, pdrPanelFrequency=pdrPanelFrequency, deviceModel=deviceModel, pdrBreakerYearlyKWH=pdrBreakerYearlyKWH, pdrBreakerCurrent=pdrBreakerCurrent, upsNumReceptacles=upsNumReceptacles, upsOutputLoad=upsOutputLoad, upsRecepStatus=upsRecepStatus, pdrPanelLoadA=pdrPanelLoadA, trapDeviceMgmtUrl=trapDeviceMgmtUrl, upsInputTable=upsInputTable, upsInputCurrent=upsInputCurrent, upsConfigInputVoltage=upsConfigInputVoltage, upsOutputTable=upsOutputTable, upsRecepIndex=upsRecepIndex, pduFirmwareVersion=pduFirmwareVersion, pduStatus=pduStatus, upsEnvAmbientTemp=upsEnvAmbientTemp, upsEnvRemoteHumidityLowerLimit=upsEnvRemoteHumidityLowerLimit, breakerCurrent=breakerCurrent, pdrModel=pdrModel, devicePartNumber=devicePartNumber, upsTestBattery=upsTestBattery, pduSerialNumber=pduSerialNumber, upsTopologyType=upsTopologyType, pdrNumBreakers=pdrNumBreakers, upsConfig=upsConfig, pdr=pdr, upsLoadShedSecsWithRestart=upsLoadShedSecsWithRestart, trapDeviceName=trapDeviceName, pdrBreakerNumPhases=pdrBreakerNumPhases, upsIdent=upsIdent, pdrIdent=pdrIdent, upsIdentOemCode=upsIdentOemCode, upsContactType=upsContactType, upsTestTrap=upsTestTrap, pdrBreakerIndex=pdrBreakerIndex, pdrPanelIndex=pdrPanelIndex, pdrBreakerMonthlyKWH=pdrBreakerMonthlyKWH, pduOutputLoad=pduOutputLoad, upsIdentSoftwareVersions=upsIdentSoftwareVersions, upsOutputWatts=upsOutputWatts, pdrBreakerPower=pdrBreakerPower, upsIdentManufacturer=upsIdentManufacturer, upsOutputVoltage=upsOutputVoltage, upsEnvNumContacts=upsEnvNumContacts, upsTest=upsTest, pdrPanelVoltageA=pdrPanelVoltageA, inputCurrent=inputCurrent, pdu=pdu, upsInputWatts=upsInputWatts)
