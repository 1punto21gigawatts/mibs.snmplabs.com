#
# PySNMP MIB module HH3C-SYS-MAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-SYS-MAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
SnmpTagValue, SnmpTagList = mibBuilder.importSymbols("SNMP-TARGET-MIB", "SnmpTagValue", "SnmpTagList")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, iso, ObjectIdentity, Counter64, Unsigned32, MibIdentifier, Gauge32, IpAddress, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "iso", "ObjectIdentity", "Counter64", "Unsigned32", "MibIdentifier", "Gauge32", "IpAddress", "Counter32", "Integer32")
DateAndTime, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "RowStatus", "DisplayString")
hh3cSystemMan = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 3))
hh3cSystemMan.setRevisions(('2004-04-08 13:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cSystemMan.setRevisionsDescriptions((' ',))
if mibBuilder.loadTexts: hh3cSystemMan.setLastUpdated('200906070000Z')
if mibBuilder.loadTexts: hh3cSystemMan.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cSystemMan.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cSystemMan.setDescription('This MIB contains objects to manage the system. It focuses on the display of current configure file and image file,and the definition of reloading image. Add the support for XRN. ')
hh3cSystemManMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1))
hh3cSysClock = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1))
hh3cSysLocalClock = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 1), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysLocalClock.setStatus('current')
if mibBuilder.loadTexts: hh3cSysLocalClock.setDescription(' This node gives the current local time of the system. The unit of it is DateAndTime. ')
hh3cSysSummerTime = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 2))
hh3cSysSummerTimeEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysSummerTimeEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSummerTimeEnable.setDescription('This node indicates the status of summer time. If the value of this node is enable, means that summer time is enabled. If the value is disable, means that summer time is disabled. ')
hh3cSysSummerTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysSummerTimeZone.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSummerTimeZone.setDescription(' This node describes the name of time zone in summer. The string is only used to display in local time when summer time is running. That the value of hh3cSysLocalClock has the time zone information means that summer time is running. ')
hh3cSysSummerTimeMethod = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneOff", 1), ("repeating", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysSummerTimeMethod.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSummerTimeMethod.setDescription(' This node provides the execute method of summer time. oneOff(1): means that summer time only takes effect at specified time. repeating(2): means that summer time takes effect in specified month/day once a year. ')
hh3cSysSummerTimeStart = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 2, 4), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysSummerTimeStart.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSummerTimeStart.setDescription(' This node provides the start time of summer time. ')
hh3cSysSummerTimeEnd = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 2, 5), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysSummerTimeEnd.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSummerTimeEnd.setDescription(' This node provides the end time of summer time. The end time must be more than start time one day and less than start time one year. ')
hh3cSysSummerTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysSummerTimeOffset.setStatus('current')
if mibBuilder.loadTexts: hh3cSysSummerTimeOffset.setDescription(' This node provides the offset time of summer time. The offset time(in seconds) means that how much time need to be appended to the local time. ')
hh3cSysLocalClockString = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysLocalClockString.setStatus('current')
if mibBuilder.loadTexts: hh3cSysLocalClockString.setDescription('This node gives the current local time of the system. For example, Tuesday May 26, 2002 at 1:30:15 would be displayed as: 2002-5-26,13:30:15.0 ')
hh3cSysCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 2))
hh3cSysCurTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cSysCurTable.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCurTable.setDescription(' The current status of system. A configuration file, an image file and bootrom information are used to describe the current status. ')
hh3cSysCurEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 2, 1, 1), ).setIndexNames((0, "HH3C-SYS-MAN-MIB", "hh3cSysCurEntPhysicalIndex"))
if mibBuilder.loadTexts: hh3cSysCurEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCurEntry.setDescription(' An entry of hh3cSysCurTable. ')
hh3cSysCurEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hh3cSysCurEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCurEntPhysicalIndex.setDescription('The value of this object is the entity index which depends on the implementation of ENTITY-MIB. If ENTITY-MIB is not supported, the value for this object is the unit ID for XRN devices , 0 for non-XRN device which has only one mainboard, the board number for non-XRN device which have several mainboards. ')
hh3cSysCurCFGFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysCurCFGFileIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCurCFGFileIndex.setDescription(' The startup configuration file currently used by the specified entity. If the value of it is zero, no configuration file is used. It will be the value of corresponding hh3cSysCFGFileIndex in hh3cSysCFGFileTable. ')
hh3cSysCurImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysCurImageIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCurImageIndex.setDescription('The image file currently used by the specified entity. It will be the value of corresponding hh3cSysImageIndex in hh3cSysImageTable.')
hh3cSysCurBtmFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysCurBtmFileName.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCurBtmFileName.setDescription('The bootrom file currently used by the specified entity.')
hh3cSysCurUpdateBtmFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysCurUpdateBtmFileName.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCurUpdateBtmFileName.setDescription(' The default value of this object is the same as the value of hh3cSysCurBtmFileName. The value will be changed after updating the bootrom successfully. This bootrom will take effect on next startup. ')
hh3cSysReload = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3))
hh3cSysReloadSchedule = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysReloadSchedule.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadSchedule.setDescription(' The object points one row in hh3cSysReloadScheduleTable. Its value is equal to the value of hh3cSysReloadScheduleIndex. When a reload action is finished, the value of it would be zero which means no any reload schedule is selected. ')
hh3cSysReloadAction = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reloadUnavailable", 1), ("reloadOnSchedule", 2), ("reloadAtOnce", 3), ("reloadCancel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysReloadAction.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadAction.setDescription(" Writing reloadOnSchedule(2) to this object performs the reload operation on schedule. If hh3cSysReloadScheduleTime is not set, the value of hh3cSysReloadAction can't be set to 'reloadOnSchedule(2)'. Writing reloadAtOnce(3)to this object performs the reload operation at once, regardless of the hh3cSysReloadScheduleTime. When reloadCancel(4)is set, the scheduled reload action will be cancelled and the value of hh3cSysReloadAction will be 'reloadUnavailable(1)',the value of hh3cSysReloadSchedule will be 0, hh3cSysReloadTag will be given a value of zero length, but the content of hh3cSysReloadScheduleTable will remain. The hh3cSysReloadSchedule and hh3cSysReloadTag determine the reload entity(ies) in mutually exclusive way. And the hh3cSysReloadSchedule will be handled at first. If the value of hh3cSysReloadSchedule is invalid, then the hh3cSysReloadTag will be handled. If the value of hh3cSysReloadSchedule is valid, the value of hh3cSysReloadTag is ignored and a reload action will be implemented to the entity specified by hh3cSysReloadEntity in the entry pointed by hh3cSysReloadSchedule. If hh3cSysReloadSchedule is valid, but the entry hh3cSysReloadSchedule pointing to is not active, the reload action will be ignored , and an inconsistent value will be returned. If multiple entities are required to be reloaded at the same time, the value of hh3cSysReloadTag must be specified to select the reload parameters in the hh3cSysReloadSceduelTable, and hh3cSysReloadSchedule must have the value of '0'. If the whole fabric is to be reloaded in an XRN device, all the units in the fabric must have at least one entry in the hh3cSysReloadSceduelTable with the same tag in hh3cSysReloadSceduelTagList. When a reload action is done, or there is no reload action, the value should be reloadUnavailable(1). ")
hh3cSysReloadScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3), )
if mibBuilder.loadTexts: hh3cSysReloadScheduleTable.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadScheduleTable.setDescription(' A reload parameters set table. The table is exclusively used for reloading. When reloading action finished, the value of the table may be empty or still exist. If the mainboard in non-XRN device or all the units of the fabric in XRN device are reloaded,then the table will be refreshed. ')
hh3cSysReloadScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1), ).setIndexNames((0, "HH3C-SYS-MAN-MIB", "hh3cSysReloadScheduleIndex"))
if mibBuilder.loadTexts: hh3cSysReloadScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadScheduleEntry.setDescription('Entry of hh3cSysReloadScheduleTable.')
hh3cSysReloadScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cSysReloadScheduleIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadScheduleIndex.setDescription('The index of hh3cSysReloadScheduleTable. There are two parts for this index depicted as follows: 31 15 0 +++++++++++++++++++++++++++++++++++++++++ + physical index + random index + ( bit 16..31 ) ( bit 0..15 ) +++++++++++++++++++++++++++++++++++++++++ From bit0 to bit15 (two bytes), if the row is automatic created, the value is zero, and if the row is created by users, then the value is determined by the users. From bit16 to bit31 (two bytes) is the physical index the same as the entPhysicalIndex specified in ENTITY-MIB(RFC2737). For XRN devices, physical index is the value of a chassis entPhysicalIndex. 0 for non-XRN device which has only one main board, the board number for non-XRN device which have multiple main boards.')
hh3cSysReloadEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysReloadEntity.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadEntity.setDescription(' The value of hh3cSysReloadEntity indicates an entry in entPhysicalTable, which is the physical entity to be reloaded. If ENTITY-MIB is not supported,the value for this object is the unit ID for XRN devices , 0 for non-XRN device which has only one mainboard, the board number for non-XRN device which have several mainboards. Each entity has only one row in hh3cSysReloadScheduleTable. ')
hh3cSysReloadCfgFile = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysReloadCfgFile.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadCfgFile.setDescription(' The value indicates an entry in hh3cSysCFGFileTable. It defines a configuration file for reload action. It is the value of corresponding hh3cSysCFGFileIndex in hh3cSysCFGFileTable. The zero value means no configuration file has been set for this entry, and no configuration file is used during system reloading. ')
hh3cSysReloadImage = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysReloadImage.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadImage.setDescription(' The value indicates an entry in hh3cSysImageTable. It defines an image file for reload action. It is the value of corresponding hh3cSysImageIndex in hh3cSysImageTable. If dual image is supported, the main image attribute can be set through this object or by hh3cSysImageType of hh3cSysImageTable of the entity. It is strongly suggested to set this attribute by the latter. If main image attribute is set here, the hh3cSysImageType in hh3cSysImageTable of the corresponding entity will be updated, and vice versa. Before reboot, the device will check the validation of the entry. If the file does not exist, the device will not reboot and a trap will be send to NMS. ')
hh3cSysReloadReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysReloadReason.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadReason.setDescription(" The reason of system's reloading. It is a zero length octet string when not set. ")
hh3cSysReloadScheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1, 6), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysReloadScheduleTime.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadScheduleTime.setDescription(' Specify the local time at which the reload action will occur. we will only take octet strings with length 8 for this object which indicates the local time of the switch. The maximum scheduled interval between the specified time and the current system clock time is 24 days . field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 For example, Tuesday May 26, 1992 at 1:30:15 PM would be displayed as: 1992-5-26,13:30:15 If the set value is less than the value of hh3cSysLocalClock or beyond the maximum scheduled time limit, a bad value error occurred. The value of all-zero octet strings indicates system reload at once if the reload action is reloadOnSchedule(2). ')
hh3cSysReloadRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysReloadRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadRowStatus.setDescription(' If one of the value of hh3cSysReloadEntity,hh3cSysReloadImage is invalid, the value of hh3cSysReloadRowStatus can not be set to the value of ACTIVE. A valid entry means the specified element is available in current system. ')
hh3cSysReloadScheduleTagList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 3, 1, 8), SnmpTagList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysReloadScheduleTagList.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadScheduleTagList.setDescription(' It specifies a tag list for the entry. ')
hh3cSysReloadTag = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 3, 4), SnmpTagValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysReloadTag.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadTag.setDescription("This object contains a single tag value which is used to select entries in the hh3cSysReloadScheduleTable. In the hh3cSysReloadScheduleTable,any entry that contains a tag value which is equal to the value of this object is selected. For example, the value of hh3cSysReloadTag is 'TOM',and the hh3cSysReloadScheduleTagList of each hh3cSysReloadScheduleTable entry are as follows: 1)'TOM,ROBERT,MARY' 2)'TOM,DAVE' 3)'DAVE,MARY' Since there are 'TOM' in 1) and 2),so 1) and 2) are selected. If this object contains a value of zero length, no entries are selected. ")
hh3cSysImage = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4))
hh3cSysImageNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysImageNum.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageNum.setDescription(' The number of system images. It indicates the total entries of hh3cSysImageTable. ')
hh3cSysImageTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4, 2), )
if mibBuilder.loadTexts: hh3cSysImageTable.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageTable.setDescription("The system image management table. When 'copy srcfile destfile' is executed via the CLI, if destfile is not existed, then hh3cSysImageType of the new file will be 'none'; otherwise hh3cSysImageType keeps its current value. When 'move srcfile destfile' is executed via the CLI, hh3cSysImageType and hh3cSysImageIndex remain the same while hh3cSysImageLocation changes. When 'rename srcfile' is executed via the CLI,hh3cSysImageType and hh3cSysImageIndex remain the same while hh3cSysImageName changes. When 'delete srcfile' is executed via the CLI, the file is deleted from hh3cSysImageTable while index of the file keeps and will not be allocated. ")
hh3cSysImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4, 2, 1), ).setIndexNames((0, "HH3C-SYS-MAN-MIB", "hh3cSysImageIndex"))
if mibBuilder.loadTexts: hh3cSysImageEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageEntry.setDescription(' An entity image entry. Each entry consists of information of an entity image. The hh3cSysImageIndex exclusively defines an image file. ')
hh3cSysImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hh3cSysImageIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageIndex.setDescription("There are two parts for the index depicted as follows: 31 15 0 +++++++++++++++++++++++++++++++++++ + physical index + image index + +++++++++++++++++++++++++++++++++++ From bit0 to bit15 (two bytes) is the image index;Image file Index is a monotonically increasing integer for the sole purpose of indexing events. When it reaches the maximum value,an extremely unlikely event, the agent wraps the value back to 1 and may flush existing entries. From bit16 to bit31 (two bytes) is the physical index the same as the entPhysicalIndex specified in ENTITY-MIB(RFC2737). If ENTITY-MIB is not supported,the value for this object is the unit ID for XRN devices ,0 for non-XRN device which has only one main board,the board number for non-XRN device which have several main boards. Any index beyond the above range will not be supported. If a file is added in, its hh3cSysImageIndex will be the maximum image index plus one. If the image file is removed, renamed, or moved from one place to another, its hh3cSysImageIndex is not reallocated. If the image file's content is replaced, its hh3cSysImageIndex will not change. ")
hh3cSysImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysImageName.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageName.setDescription('The file name of the image. It MUST NOT contain the path of the file.')
hh3cSysImageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysImageSize.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageSize.setDescription(' Size of the file in bytes. ')
hh3cSysImageLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysImageLocation.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageLocation.setDescription(' The directory path of the image. Its form should be the same as what defined in file system. Currently it is defined as follows: For mainboard: flash:/ For slave mainboard and subboards: slotN#flash:/ For XRN devices: unitN>slotN#flash:/ ')
hh3cSysImageType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("main", 1), ("backup", 2), ("none", 3), ("secure", 4), ("main-backup", 5), ("main-secure", 6), ("backup-secure", 7), ("main-backup-secure", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cSysImageType.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageType.setDescription(" It indicates the reloading sequence attribute of the image. For devices which support dual image: If the value is 'main(1)',the image will be the first image in the next reloading procedure. If the value is 'backup(2)', the image will be used if the main image fails. If the value is 'secure(4)', the image will be used if the main image and backup image both fail. If the value is 'none(3)',the image will not be used in the next reloading procedure. At the same time,you also can specify the main image by hh3cSysReloadImage in hh3cSysReloadScheduleTable. If the image is different from previous main image, the previous main image will not be main image again. And the image table will update with this variation. Vice versa, if you have defined the reload schedule, and then you define a new main image through hh3cSysImageType when you are waiting the reload schedule to be executed, the real main image will be the latest one. It is strongly suggested to define the main image here, not by hh3cSysReloadImage in hh3cSysReloadScheduleTable. There are some rules for setting the value of hh3cSysImageType: a)When a new image file is defined as 'main' or 'backup' file,the hh3cSysImageType of old 'main' or 'backup' file will automatically be 'none'. b)It is forbidden to set 'none' attribute manually. c)It is forbidden to set 'secure' attribute manually. d)If 'main' image is set to 'backup', the file keeps 'main'. And vice versa. At this time, the file has 'main-backup' property. e)If the secure image is set to 'main' or 'backup', the file has 'main-secure' or 'backup-secure'property. f)If the secure image is set to 'main' and 'backup', the file has the 'main-backup-secure' property. g)If the none image is set to 'main' or 'backup', the file has the 'main' or 'backup' property. The following table describes whether it is ok to set to another state directly from original state. +--------------+-----------+-------------+-------------+ | set to | set to | set to | set to | | | | | | original | 'main' | 'backup' | 'none' | 'secure' | state | | | | | --------------+--------------+-----------+-------------+-------------+ | | | | | main | --- | yes | no | no | | | | | | | | | | | --------------+--------------+-----------+-------------|-------------+ | | | | | backup | yes | --- | no | no | | | | | | --------------+--------------+-----------+-------------|-------------+ | | | | | | | | | | none | yes | yes | --- | no | | | | | | --------------+--------------+-----------+-------------+-------------+ | | | | | secure | yes | yes | no | --- | | | | | | | | | | | --------------+--------------+-----------+-------------+-------------+ If there is one main image in the system, one row of Hh3cSysReloadScheduleEntry whose hh3cSysReloadImage is equal to the main image's hh3cSysImageIndex will be created automatically. But if any row is deleted, it will not be created automatically in hh3cSysReloadScheduleTable. For the device which doesn't support dual image(main/backup): Only 'main' and 'none' is supported and it only can be set from none to main. When a new image file is defined as 'main' file,the hh3cSysImageType of old 'main' file will automatically be 'none'. ")
hh3cSysCFGFile = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 5))
hh3cSysCFGFileNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysCFGFileNum.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCFGFileNum.setDescription(' The number of the configuration files in the system. It indicates the total entries of hh3cSysCFGFileTable. ')
hh3cSysCFGFileTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 5, 2), )
if mibBuilder.loadTexts: hh3cSysCFGFileTable.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCFGFileTable.setDescription("A table of configuration files in this system. At present, the system doesn't support dual configure file, it should act as 'dual image' if dual configure file is supported. ")
hh3cSysCFGFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 5, 2, 1), ).setIndexNames((0, "HH3C-SYS-MAN-MIB", "hh3cSysCFGFileIndex"))
if mibBuilder.loadTexts: hh3cSysCFGFileEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCFGFileEntry.setDescription(' A configuration file entry. Each entry consists of information of a configuration file. hh3cSysCFGFileIndex exclusively decides a configuration file. ')
hh3cSysCFGFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hh3cSysCFGFileIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCFGFileIndex.setDescription('There are two parts for the index depicted as follows: 31 15 0 +++++++++++++++++++++++++++++++++++ + physical index + cfgFile index + +++++++++++++++++++++++++++++++++++ From bit0 to bit15 (two bytes) is the configuration file index; the configuration file index is a monotonically increasing integer for the sole purpose of indexing events. When it reaches the maximum value, an extremely unlikely event, the agent wraps the value back to 1 and may flush existing entries. From bit16 to bit31 (two bytes) is the physical index the same as the entPhysicalIndex specified in ENTITY-MIB(RFC2737). If ENTITY-MIB is not supported, the value for this object is the unit ID for XRN devices ,0 for non-XRN device which has only one slot,the board number for non-XRN device which have several slots. Any index beyond the above range will not be supported. ')
hh3cSysCFGFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysCFGFileName.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCFGFileName.setDescription(' Configuration file name. The name should not include the colon (:) character as it is a special separator character used to delineate the device name, partition name and the file name. ')
hh3cSysCFGFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysCFGFileSize.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCFGFileSize.setDescription(' Size of the file in bytes. Note that it does not include the size of the filesystem file header. File size will always be non-zero. ')
hh3cSysCFGFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysCFGFileLocation.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCFGFileLocation.setDescription(' The directory path of the image. Its form should be the same as what defined in filesystem. Currently it is defined as follows: For mainboard: flash:/ For slave mainboard and subboards: slotN#flash:/ For XRN devices: unitN>slotN#flash:/ ')
hh3cSysBtmFile = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6))
hh3cSysBtmFileLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 1))
hh3cSysBtmLoadMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysBtmLoadMaxNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmLoadMaxNumber.setDescription(' This object shows the maximum number of hh3cSysBtmLoadEntry in each device/unit. ')
hh3cSysBtmLoadTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 2), )
if mibBuilder.loadTexts: hh3cSysBtmLoadTable.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmLoadTable.setDescription(' This table is used to update the bootrom and show the results of the update operation. The bootrom files are listed at the hh3cFlhFileTable. These files are used to update bootrom. ')
hh3cSysBtmLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 2, 1), ).setIndexNames((0, "HH3C-SYS-MAN-MIB", "hh3cSysBtmLoadIndex"))
if mibBuilder.loadTexts: hh3cSysBtmLoadEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmLoadEntry.setDescription(' Entries in the hh3cSysBtmLoadTable are created and deleted using the hh3cSysBtmRowStatus object. When a new row is being created and the number of entries is hh3cSysBtmLoadMaxNumber, the row with minimal value of hh3cSysBtmLoadTime and the value of hh3cSysBtmFileType is none(2), should be destroyed automatically. ')
hh3cSysBtmLoadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cSysBtmLoadIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmLoadIndex.setDescription(' The index of hh3cSysBtmLoadTable. There are two parts for this index depicted as follows: 31 15 0 +++++++++++++++++++++++++++++++++++++++++ + physical index + random index + ( bit 16..31 ) ( bit 0..15 ) +++++++++++++++++++++++++++++++++++++++++ From bit0 to bit15 (two bytes), if the row is created by command line, the value is determined by system, and if the row is created by SNMP, the value is determined by users. From bit16 to bit31 (two bytes) is the physical index the same as the entPhysicalIndex specified in ENTITY-MIB(RFC2737). If ENTITY-MIB is not supported, the value of this object is the unit ID for XRN devices, 0 for non-XRN device which has only one main board, the board number for non-XRN device which has multiple main boards. ')
hh3cSysBtmFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysBtmFileName.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmFileName.setDescription(' The bootrom file name is determined by the users. The file must exist in corresponding entity. The validity of the bootrom file will be identified by system. If the file is invalid, the bootrom should fail to be updated, and the value of hh3cSysBtmErrorStatus should be failed(4). ')
hh3cSysBtmFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("none", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysBtmFileType.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmFileType.setDescription(' main(1) - The effective bootrom file. none(2) - The noneffective file. When bootrom is being updated, this object must be set to main(1). When bootrom is updated successfully, this object should be main(1), and the former object with the same physical index should be none(2). When bootrom failed to be updated, this object should be none(2). ')
hh3cSysBtmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSysBtmRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmRowStatus.setDescription(' Only support active(1), createAndGo(4), destroy(6). When a row is created successfully, the value of this object should be active(1), the value of hh3cSysBtmFileName and hh3cSysBtmFileType can not be modified by users. When bootrom is being updated, the value of hh3cSysBtmErrorStatus is inProgress(2). When bootrom failed to be updated, the value of hh3cSysBtmErrorStatus should be failed(4). When bootrom is updated successfully, the value of hh3cSysBtmErrorStatus should be success(3). The value of hh3cSysCurUpdateBtmFileName should change to the new bootrom file name. When another row is created successfully with the same physical index, and the update is successful, then the value of former hh3cSysBtmFileType should be none(2) automatically. If a row is destroyed, hh3cSysCurUpdateBtmFileName should not change. If a device/unit reboots, hh3cSysBtmLoadTable should be empty. ')
hh3cSysBtmErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalidFile", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysBtmErrorStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmErrorStatus.setDescription(' This object shows the status of the specified operation after creating a row. invalidFile(1) - file is invalid. inProgress(2) - the operation is in progress. success(3) - the operation was done successfully. failed(4) - the operation failed. ')
hh3cSysBtmLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 3, 1, 6, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSysBtmLoadTime.setStatus('current')
if mibBuilder.loadTexts: hh3cSysBtmLoadTime.setDescription(' This object indicates operation time. ')
hh3cSystemManMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 2))
hh3cSysClockChangedNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 3, 2, 1)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysLocalClock"))
if mibBuilder.loadTexts: hh3cSysClockChangedNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cSysClockChangedNotification.setDescription(' A clock changed notification is generated when the current local date and time for the system has been manually changed. The value of hh3cSysLocalClock reflects new date and time. ')
hh3cSysReloadNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 3, 2, 2)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysReloadImage"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadCfgFile"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadReason"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadScheduleTime"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadAction"))
if mibBuilder.loadTexts: hh3cSysReloadNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadNotification.setDescription(' A hh3cSysReloadNotification will be sent before the corresponding entity is rebooted. It will also be sent if the entity fails to reboot because the clock has changed. ')
hh3cSysStartUpNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 3, 2, 3)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysImageType"))
if mibBuilder.loadTexts: hh3cSysStartUpNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cSysStartUpNotification.setDescription(" a hh3cSysStartUpNotification trap will be sent when the system starts up with 'main' image file failed, a trap will be sent to indicate which type the current image file (I.e backup or secure)is. ")
hh3cSystemManMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3))
hh3cSystemManMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 1))
hh3cSystemManMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 1, 1)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysClockGroup"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadGroup"), ("HH3C-SYS-MAN-MIB", "hh3cSysImageGroup"), ("HH3C-SYS-MAN-MIB", "hh3cSysCFGFileGroup"), ("HH3C-SYS-MAN-MIB", "hh3cSystemManNotificationGroup"), ("HH3C-SYS-MAN-MIB", "hh3cSysCurGroup"), ("HH3C-SYS-MAN-MIB", "hh3cSystemBtmLoadGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cSystemManMIBCompliance = hh3cSystemManMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hh3cSystemManMIBCompliance.setDescription(' The compliance statement for entities which implement the system management MIB. ')
hh3cSystemManMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 2))
hh3cSysClockGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 2, 1)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysLocalClock"), ("HH3C-SYS-MAN-MIB", "hh3cSysSummerTimeEnable"), ("HH3C-SYS-MAN-MIB", "hh3cSysSummerTimeZone"), ("HH3C-SYS-MAN-MIB", "hh3cSysSummerTimeMethod"), ("HH3C-SYS-MAN-MIB", "hh3cSysSummerTimeStart"), ("HH3C-SYS-MAN-MIB", "hh3cSysSummerTimeEnd"), ("HH3C-SYS-MAN-MIB", "hh3cSysSummerTimeOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cSysClockGroup = hh3cSysClockGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cSysClockGroup.setDescription('A collection of objects providing mandatory system clock information.')
hh3cSysReloadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 2, 2)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysReloadSchedule"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadAction"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadImage"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadCfgFile"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadReason"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadScheduleTagList"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadTag"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadScheduleTime"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadEntity"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cSysReloadGroup = hh3cSysReloadGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cSysReloadGroup.setDescription('A collection of objects providing mandatory system reload.')
hh3cSysImageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 2, 3)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysImageNum"), ("HH3C-SYS-MAN-MIB", "hh3cSysImageName"), ("HH3C-SYS-MAN-MIB", "hh3cSysImageSize"), ("HH3C-SYS-MAN-MIB", "hh3cSysImageLocation"), ("HH3C-SYS-MAN-MIB", "hh3cSysImageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cSysImageGroup = hh3cSysImageGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cSysImageGroup.setDescription('A collection of objects providing mandatory system image information.')
hh3cSysCFGFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 2, 4)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysCFGFileNum"), ("HH3C-SYS-MAN-MIB", "hh3cSysCFGFileName"), ("HH3C-SYS-MAN-MIB", "hh3cSysCFGFileSize"), ("HH3C-SYS-MAN-MIB", "hh3cSysCFGFileLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cSysCFGFileGroup = hh3cSysCFGFileGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCFGFileGroup.setDescription(' A collection of objects providing mandatory system configuration file information. ')
hh3cSysCurGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 2, 5)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysCurCFGFileIndex"), ("HH3C-SYS-MAN-MIB", "hh3cSysCurImageIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cSysCurGroup = hh3cSysCurGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cSysCurGroup.setDescription('A collection of system current status.')
hh3cSystemManNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 2, 6)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysClockChangedNotification"), ("HH3C-SYS-MAN-MIB", "hh3cSysReloadNotification"), ("HH3C-SYS-MAN-MIB", "hh3cSysStartUpNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cSystemManNotificationGroup = hh3cSystemManNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cSystemManNotificationGroup.setDescription('A collection of notifications.')
hh3cSystemBtmLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 3, 3, 2, 7)).setObjects(("HH3C-SYS-MAN-MIB", "hh3cSysCurBtmFileName"), ("HH3C-SYS-MAN-MIB", "hh3cSysCurUpdateBtmFileName"), ("HH3C-SYS-MAN-MIB", "hh3cSysBtmLoadMaxNumber"), ("HH3C-SYS-MAN-MIB", "hh3cSysBtmFileName"), ("HH3C-SYS-MAN-MIB", "hh3cSysBtmFileType"), ("HH3C-SYS-MAN-MIB", "hh3cSysBtmRowStatus"), ("HH3C-SYS-MAN-MIB", "hh3cSysBtmErrorStatus"), ("HH3C-SYS-MAN-MIB", "hh3cSysBtmLoadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cSystemBtmLoadGroup = hh3cSystemBtmLoadGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cSystemBtmLoadGroup.setDescription('A collection of objects providing system update bootrom information.')
mibBuilder.exportSymbols("HH3C-SYS-MAN-MIB", hh3cSysCFGFileGroup=hh3cSysCFGFileGroup, hh3cSystemManMIBCompliances=hh3cSystemManMIBCompliances, hh3cSystemManMIBConformance=hh3cSystemManMIBConformance, hh3cSysCFGFile=hh3cSysCFGFile, hh3cSysImageIndex=hh3cSysImageIndex, hh3cSysCFGFileIndex=hh3cSysCFGFileIndex, hh3cSysClockChangedNotification=hh3cSysClockChangedNotification, hh3cSysBtmFileLoad=hh3cSysBtmFileLoad, hh3cSysClockGroup=hh3cSysClockGroup, hh3cSysBtmFileName=hh3cSysBtmFileName, hh3cSysBtmLoadIndex=hh3cSysBtmLoadIndex, hh3cSysReloadImage=hh3cSysReloadImage, hh3cSysBtmLoadTable=hh3cSysBtmLoadTable, hh3cSysLocalClock=hh3cSysLocalClock, hh3cSysCurBtmFileName=hh3cSysCurBtmFileName, hh3cSysReloadTag=hh3cSysReloadTag, hh3cSysSummerTimeEnable=hh3cSysSummerTimeEnable, hh3cSysSummerTimeZone=hh3cSysSummerTimeZone, hh3cSystemManMIBCompliance=hh3cSystemManMIBCompliance, hh3cSysCFGFileSize=hh3cSysCFGFileSize, hh3cSysImageTable=hh3cSysImageTable, hh3cSysReloadEntity=hh3cSysReloadEntity, hh3cSysReloadAction=hh3cSysReloadAction, hh3cSysCurCFGFileIndex=hh3cSysCurCFGFileIndex, hh3cSysReloadRowStatus=hh3cSysReloadRowStatus, hh3cSystemBtmLoadGroup=hh3cSystemBtmLoadGroup, hh3cSysImageName=hh3cSysImageName, hh3cSysSummerTimeMethod=hh3cSysSummerTimeMethod, hh3cSysReload=hh3cSysReload, hh3cSysSummerTimeEnd=hh3cSysSummerTimeEnd, hh3cSysImageType=hh3cSysImageType, hh3cSysSummerTimeOffset=hh3cSysSummerTimeOffset, hh3cSysClock=hh3cSysClock, hh3cSysStartUpNotification=hh3cSysStartUpNotification, hh3cSysReloadCfgFile=hh3cSysReloadCfgFile, hh3cSystemManMIBNotifications=hh3cSystemManMIBNotifications, hh3cSystemManMIBGroups=hh3cSystemManMIBGroups, hh3cSysBtmErrorStatus=hh3cSysBtmErrorStatus, hh3cSysCurUpdateBtmFileName=hh3cSysCurUpdateBtmFileName, hh3cSysSummerTime=hh3cSysSummerTime, hh3cSysCFGFileLocation=hh3cSysCFGFileLocation, hh3cSystemManNotificationGroup=hh3cSystemManNotificationGroup, hh3cSysReloadScheduleIndex=hh3cSysReloadScheduleIndex, hh3cSysCFGFileEntry=hh3cSysCFGFileEntry, hh3cSysBtmLoadTime=hh3cSysBtmLoadTime, hh3cSystemMan=hh3cSystemMan, hh3cSysCurGroup=hh3cSysCurGroup, hh3cSysReloadScheduleTagList=hh3cSysReloadScheduleTagList, hh3cSystemManMIBObjects=hh3cSystemManMIBObjects, hh3cSysReloadNotification=hh3cSysReloadNotification, hh3cSysCurEntPhysicalIndex=hh3cSysCurEntPhysicalIndex, hh3cSysBtmFile=hh3cSysBtmFile, hh3cSysCFGFileNum=hh3cSysCFGFileNum, hh3cSysCurEntry=hh3cSysCurEntry, hh3cSysLocalClockString=hh3cSysLocalClockString, hh3cSysImageSize=hh3cSysImageSize, PYSNMP_MODULE_ID=hh3cSystemMan, hh3cSysImageEntry=hh3cSysImageEntry, hh3cSysBtmFileType=hh3cSysBtmFileType, hh3cSysImageGroup=hh3cSysImageGroup, hh3cSysReloadScheduleEntry=hh3cSysReloadScheduleEntry, hh3cSysCurrent=hh3cSysCurrent, hh3cSysBtmRowStatus=hh3cSysBtmRowStatus, hh3cSysImageNum=hh3cSysImageNum, hh3cSysSummerTimeStart=hh3cSysSummerTimeStart, hh3cSysCFGFileTable=hh3cSysCFGFileTable, hh3cSysCFGFileName=hh3cSysCFGFileName, hh3cSysBtmLoadEntry=hh3cSysBtmLoadEntry, hh3cSysImage=hh3cSysImage, hh3cSysImageLocation=hh3cSysImageLocation, hh3cSysBtmLoadMaxNumber=hh3cSysBtmLoadMaxNumber, hh3cSysReloadSchedule=hh3cSysReloadSchedule, hh3cSysReloadReason=hh3cSysReloadReason, hh3cSysReloadScheduleTime=hh3cSysReloadScheduleTime, hh3cSysReloadScheduleTable=hh3cSysReloadScheduleTable, hh3cSysCurTable=hh3cSysCurTable, hh3cSysReloadGroup=hh3cSysReloadGroup, hh3cSysCurImageIndex=hh3cSysCurImageIndex)
