#
# PySNMP MIB module IPX-RIP-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPX-RIP-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
cjnIpxIfIndex, = mibBuilder.importSymbols("IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex")
NetNumber, = mibBuilder.importSymbols("IPX-PRIVATE-MIB", "NetNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Bits, NotificationType, TimeTicks, iso, Gauge32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Bits", "NotificationType", "TimeTicks", "iso", "Gauge32", "ModuleIdentity", "MibIdentifier")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
cjnIpxRip = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20))
if mibBuilder.loadTexts: cjnIpxRip.setLastUpdated('9904010000Z')
if mibBuilder.loadTexts: cjnIpxRip.setOrganization("Lucent's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnIpxRip.setContactInfo('Marc Cochran -- mcochran@lucent.com')
if mibBuilder.loadTexts: cjnIpxRip.setDescription('Cajun IPX RIP Private MIB')
class FilterPrec(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 9999)

cjnIpxRipGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 1))
cjnIpxRipEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxRipEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipEnabled.setDescription('Enable / Disable IPX RIP on this system.')
cjnIpxRipFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2))
cjnIpxRipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1), )
if mibBuilder.loadTexts: cjnIpxRipFilterTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterTable.setDescription('A list of Cajun IPX RIP filters.')
cjnIpxRipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1), ).setIndexNames((0, "IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex"), (0, "IPX-RIP-PRIVATE-MIB", "cjnIpxRipFilterPrec"))
if mibBuilder.loadTexts: cjnIpxRipFilterEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterEntry.setDescription('A Cajun IPX RIP filter instance.')
cjnIpxRipFilterPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1, 1), FilterPrec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRipFilterPrec.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterPrec.setDescription('The precedence of this RIP filter. The precedence is relative to other RIP filters on the same interface.')
cjnIpxRipFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
cjnIpxRipFilterNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1, 3), NetNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipFilterNetStart.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterNetStart.setDescription('The first IPX network number in the range which this filter matches.')
cjnIpxRipFilterNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1, 4), NetNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipFilterNetEnd.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterNetEnd.setDescription('The last IPX network number in the range which this filter matches.')
cjnIpxRipFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipFilterDirection.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterDirection.setDescription('The direction of IPX RIP packets to which this filter applies. Inbound applies the filter only to RIP packets received on the interface. Outbound applies the filter only to RIP packets sent on the interface. Both applies the filter to RIP packets sent and received on the interface.')
cjnIpxRipFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("allow", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipFilterAction.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterAction.setDescription('The action to take if this filter matches an IPX RIP entry. Filter causes the RIP entry to be ignored in received RIP packets or suppressed in sent RIP packets. Allow causes the RIP entry to be accepted in received RIP packets or advertised in sent RIP packets.')
cjnIpxRipFilterTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipFilterTicks.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterTicks.setDescription('Used to override the delay, in ticks, to reach the IPX network specified in the RIP entry.')
cjnIpxRipFilterHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 2, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipFilterHops.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipFilterHops.setDescription('Used to override the hops to reach the IPX network specified in the RIP entry.')
cjnIpxRipIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3))
cjnIpxRipIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1), )
if mibBuilder.loadTexts: cjnIpxRipIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfTable.setDescription('A list of Cajun IPX RIP interface entries.')
cjnIpxRipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1), ).setIndexNames((0, "IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex"))
if mibBuilder.loadTexts: cjnIpxRipIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfEntry.setDescription('A Cajun IPX RIP interface instance.')
cjnIpxRipIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
cjnIpxRipIfInterpacketGap = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipIfInterpacketGap.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfInterpacketGap.setDescription('If set to enable(1), IPX RIP packets from periodic advertisements are sent with an interpacket gap of 55 milliseconds. If set to disable(2), no interpacket gap is used.')
cjnIpxRipIfUseMaximumPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipIfUseMaximumPacketSize.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfUseMaximumPacketSize.setDescription('If set to enable(1), IPX RIP packets will contain as many entries as will fit in the maximum packet size allowable on the interface given the configured encapsulation type. If set to disable(2), IPX RIP packets will contain at most 50 entries.')
cjnIpxRipIfUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1, 4), Integer32().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipIfUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfUpdateInterval.setDescription('The RIP periodic update interval, in seconds.')
cjnIpxRipIfAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1, 5), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipIfAgeMultiplier.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfAgeMultiplier.setDescription('The holding multiplier for information received in RIP updates. RIP information will be kept for the number of seconds indicated by the cjnIpxRipIfUpdateInterval multiplied by the cjnIpxRipIfAgeMultiplier.')
cjnIpxRipIfTriggeredUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipIfTriggeredUpdates.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfTriggeredUpdates.setDescription('Specified whether or not RIP updates are immediately sent on the interface in response to changes in the routing table.')
cjnIpxRipIfAdvertiseDefaultRouteOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipIfAdvertiseDefaultRouteOnly.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfAdvertiseDefaultRouteOnly.setDescription('Specifies whether or not ONLY the default route (FFFFFFFE) is advertised in RIP updates sent on the interface.')
cjnIpxRipIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("talk", 1), ("listen", 2), ("both", 3))).clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxRipIfMode.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfMode.setDescription('The handling of RIP packets on the interface. If set to talk(1), RIP packets may be sent on the interface but not received. If set to listen(2), RIP packets may be received but not sent. If set to both(3), RIP packets may be sent and received.')
cjnIpxRipIfStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4))
cjnIpxRipIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4, 1), )
if mibBuilder.loadTexts: cjnIpxRipIfStatTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfStatTable.setDescription('A list of Cajun IPX RIP interface statistics entries.')
cjnIpxRipIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4, 1, 1), ).setIndexNames((0, "IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex"))
if mibBuilder.loadTexts: cjnIpxRipIfStatEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfStatEntry.setDescription('A Cajun IPX RIP interface statistics instance.')
cjnIpxRipIfStatTriggeredUpdatesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRipIfStatTriggeredUpdatesSent.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfStatTriggeredUpdatesSent.setDescription('The number of RIP triggered updates sent on the interface.')
cjnIpxRipIfStatPeriodicUpdatesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRipIfStatPeriodicUpdatesSent.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfStatPeriodicUpdatesSent.setDescription('The number of periodic RIP updates sent on the interface.')
cjnIpxRipIfStatUpdatesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRipIfStatUpdatesReceived.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfStatUpdatesReceived.setDescription('The number of RIP updates received on the interface.')
cjnIpxRipIfStatRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRipIfStatRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfStatRequestsReceived.setDescription('The number of RIP requests received on the interface.')
cjnIpxRipIfStatBadPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxRipIfStatBadPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfStatBadPacketsReceived.setDescription('The number of incorrectly formatted RIP packets received on the interface.')
cjnIpxRipIfStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 20, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxRipIfStatsReset.setStatus('current')
if mibBuilder.loadTexts: cjnIpxRipIfStatsReset.setDescription('When set to the value enable (1) all IPX RIP statistics for this interface are reset to zero after which the value of this MIB object returns to disable(2).')
mibBuilder.exportSymbols("IPX-RIP-PRIVATE-MIB", cjnIpxRipIfStatEntry=cjnIpxRipIfStatEntry, cjnIpxRipGlobalGroup=cjnIpxRipGlobalGroup, cjnIpxRipFilterTicks=cjnIpxRipFilterTicks, cjnIpxRipIfAgeMultiplier=cjnIpxRipIfAgeMultiplier, cjnIpxRipEnabled=cjnIpxRipEnabled, cjnIpxRipFilterPrec=cjnIpxRipFilterPrec, cjnIpxRipFilterGroup=cjnIpxRipFilterGroup, cjnIpxRipIfStatRequestsReceived=cjnIpxRipIfStatRequestsReceived, cjnIpxRipFilterNetEnd=cjnIpxRipFilterNetEnd, cjnIpxRipIfStatGroup=cjnIpxRipIfStatGroup, cjnIpxRipIfEntry=cjnIpxRipIfEntry, cjnIpxRipIfInterpacketGap=cjnIpxRipIfInterpacketGap, cjnIpxRipFilterRowStatus=cjnIpxRipFilterRowStatus, cjnIpxRipFilterTable=cjnIpxRipFilterTable, cjnIpxRipIfAdvertiseDefaultRouteOnly=cjnIpxRipIfAdvertiseDefaultRouteOnly, cjnIpxRipIfUpdateInterval=cjnIpxRipIfUpdateInterval, cjnIpxRipFilterEntry=cjnIpxRipFilterEntry, cjnIpxRipIfStatTriggeredUpdatesSent=cjnIpxRipIfStatTriggeredUpdatesSent, cjnIpxRipFilterHops=cjnIpxRipFilterHops, cjnIpxRipIfMode=cjnIpxRipIfMode, cjnIpxRipIfStatPeriodicUpdatesSent=cjnIpxRipIfStatPeriodicUpdatesSent, FilterPrec=FilterPrec, PYSNMP_MODULE_ID=cjnIpxRip, cjnIpxRipFilterAction=cjnIpxRipFilterAction, cjnIpxRip=cjnIpxRip, cjnIpxRipIfUseMaximumPacketSize=cjnIpxRipIfUseMaximumPacketSize, cjnIpxRipIfStatUpdatesReceived=cjnIpxRipIfStatUpdatesReceived, cjnIpxRipIfTriggeredUpdates=cjnIpxRipIfTriggeredUpdates, cjnIpxRipIfTable=cjnIpxRipIfTable, cjnIpxRipIfStatTable=cjnIpxRipIfStatTable, cjnIpxRipFilterNetStart=cjnIpxRipFilterNetStart, cjnIpxRipIfStatBadPacketsReceived=cjnIpxRipIfStatBadPacketsReceived, cjnIpxRipFilterDirection=cjnIpxRipFilterDirection, cjnIpxRipIfGroup=cjnIpxRipIfGroup, cjnIpxRipIfStatsReset=cjnIpxRipIfStatsReset, cjnIpxRipIfRowStatus=cjnIpxRipIfRowStatus)
