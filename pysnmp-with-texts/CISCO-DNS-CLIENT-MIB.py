#
# PySNMP MIB module CISCO-DNS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DNS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, Counter32, ObjectIdentity, IpAddress, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, MibIdentifier, iso, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "MibIdentifier", "iso", "Gauge32", "Integer32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
ciscoDNSClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 436))
ciscoDNSClientMIB.setRevisions(('2004-09-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDNSClientMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoDNSClientMIB.setLastUpdated('200409090000Z')
if mibBuilder.loadTexts: ciscoDNSClientMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoDNSClientMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoDNSClientMIB.setDescription('The MIB module for entities implementing the client side of the Domain Name System (DNS) protocol.')
ciscoDNSClientMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 436, 0))
ciscoDNSClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 436, 1))
ciscoDNSClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 436, 2))
cdcConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1))
cdcDNSConfigEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdcDNSConfigEnable.setStatus('current')
if mibBuilder.loadTexts: cdcDNSConfigEnable.setDescription('This object indicates whether the DNS configuration is enabled or disabled in the local system.')
cdcNoOfDNSServerConfig = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdcNoOfDNSServerConfig.setStatus('current')
if mibBuilder.loadTexts: cdcNoOfDNSServerConfig.setDescription("This object represents the current number of entries in the 'cdcDNSServerTable'. Indicates the number of DNS Server entries that are configured in the system.")
cdcDNSServerNextAvailIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdcDNSServerNextAvailIndex.setStatus('current')
if mibBuilder.loadTexts: cdcDNSServerNextAvailIndex.setDescription("This object contains the next available value for the object 'cdcDNSServerIndex'. If all values are exhausted, then this object will contain a 0 value. A management application should read this object, get the (non-zero) value and use same for creating an entry in the 'cdcDNSServerTable'. If two network management applications read this object at the same time and try to create an entry in the 'cdcDNSServerTable', only one of them will succeed. The network management application which failed, will need to re-read this object and try the SET again.")
cdcDNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 4), )
if mibBuilder.loadTexts: cdcDNSServerTable.setStatus('current')
if mibBuilder.loadTexts: cdcDNSServerTable.setDescription("This table contains information about the Domain Name System (DNS) Server configurations in the system. When the DNS configuration is disabled in the system, i.e., 'cdcDNSConfigEnable' object is set to 'disabled', all entries of this table will be removed automatically. The index of this table is not persistent upon system reboot.")
cdcDNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-DNS-CLIENT-MIB", "cdcDNSServerIndex"))
if mibBuilder.loadTexts: cdcDNSServerEntry.setStatus('current')
if mibBuilder.loadTexts: cdcDNSServerEntry.setDescription('An Entry representing the information about a DNS Server configuration. The entries are contacted in turn by the system for DNS services. The first entry in this table will be contacted first, and so on.')
cdcDNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cdcDNSServerIndex.setStatus('current')
if mibBuilder.loadTexts: cdcDNSServerIndex.setDescription("This object represents the index corresponding to the particular DNS Server configuration in the system. For creation of new entry, the value of this object should be same as that of the value of 'cdcDNSServerNextAvailIndex' object. If this is not the case, then the entry creation will fail.")
cdcDNSServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 4, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdcDNSServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cdcDNSServerAddrType.setDescription("This object represents the Inet Address type of the 'cdcDNSServerAddr' object. An attempt to modify this object will fail with an 'inconsistentValue' error, if the value of the corresponding instance of 'cdcDNSServerStatus' object is active(1).")
cdcDNSServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 4, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdcDNSServerAddr.setStatus('current')
if mibBuilder.loadTexts: cdcDNSServerAddr.setDescription("This object represents the address of the DNS Server. This object is a mandatory object for row creation. An attempt to modify this object will fail with an 'inconsistentValue' error, if the value of the corresponding instance of 'cdcDNSServerStatus' object is active(1).")
cdcDNSServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdcDNSServerStatus.setStatus('current')
if mibBuilder.loadTexts: cdcDNSServerStatus.setDescription('The Status of this row.')
cdcDefaultDNSDomainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdcDefaultDNSDomainName.setStatus('current')
if mibBuilder.loadTexts: cdcDefaultDNSDomainName.setDescription("This object represents the Default DNS domain name of the system. When this object is set to a non empty string value, the domain name part of the fully qualified name represented by the 'sysName' object is updated by the value of this object. When there is no entry in the 'cdcDNSDomainNameTable', the value of this object is used for the domain name configuration of the system. When there is an entry in the 'cdcDNSDomainNameTable', the value of this object is not used.")
cdcDNSDomainNameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 6), )
if mibBuilder.loadTexts: cdcDNSDomainNameTable.setStatus('current')
if mibBuilder.loadTexts: cdcDNSDomainNameTable.setDescription('This table contains the list of DNS Domain Names defined for the system. Each domain name to be tried in turn, for the domain name configuration of the system.')
cdcDNSDomainNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-DNS-CLIENT-MIB", "cdcDNSDomainNameIndex"))
if mibBuilder.loadTexts: cdcDNSDomainNameEntry.setStatus('current')
if mibBuilder.loadTexts: cdcDNSDomainNameEntry.setDescription("An entry (conceptual row) in the 'cdcDNSDomainNameTable'. Each row represents a DNS Domain name defined for the system.")
cdcDNSDomainNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: cdcDNSDomainNameIndex.setStatus('current')
if mibBuilder.loadTexts: cdcDNSDomainNameIndex.setDescription('An arbitrary integer value, greater than zero, which uniquely identifies a DNS Domain Name defined for the system.')
cdcDNSDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdcDNSDomainName.setStatus('current')
if mibBuilder.loadTexts: cdcDNSDomainName.setDescription("This object represents a DNS Domain Name defined for the system. When this object is set to a non empty string value, the domain name part of the fully qualified name represented by the 'sysName' object is updated by the value of this object. This object is a mandatory object for row creation. An attempt to modify this object will fail with an 'inconsistentValue' error, if the value of the corresponding instance of 'cdcDNSDomainNameStatus' object is active(1).")
cdcDNSDomainNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 436, 1, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdcDNSDomainNameStatus.setStatus('current')
if mibBuilder.loadTexts: cdcDNSDomainNameStatus.setDescription("The status of this conceptual row. Once value of this object is set to 'active', the associated entry can not be modified except destroyed by setting this object to destroy(6).")
ciscoDNSClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 436, 2, 1))
ciscoDNSClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 436, 2, 2))
ciscoDNSClientMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 436, 2, 1, 1)).setObjects(("CISCO-DNS-CLIENT-MIB", "ciscoDNSServerConfigGroup"), ("CISCO-DNS-CLIENT-MIB", "ciscoDNSDomainNameConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDNSClientMIBCompliance = ciscoDNSClientMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoDNSClientMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-DNS-CLIENT-MIB.')
ciscoDNSServerConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 436, 2, 2, 1)).setObjects(("CISCO-DNS-CLIENT-MIB", "cdcDNSConfigEnable"), ("CISCO-DNS-CLIENT-MIB", "cdcNoOfDNSServerConfig"), ("CISCO-DNS-CLIENT-MIB", "cdcDNSServerNextAvailIndex"), ("CISCO-DNS-CLIENT-MIB", "cdcDNSServerAddrType"), ("CISCO-DNS-CLIENT-MIB", "cdcDNSServerAddr"), ("CISCO-DNS-CLIENT-MIB", "cdcDNSServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDNSServerConfigGroup = ciscoDNSServerConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDNSServerConfigGroup.setDescription('A collection of objects for DNS Server address Configuration.')
ciscoDNSDomainNameConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 436, 2, 2, 2)).setObjects(("CISCO-DNS-CLIENT-MIB", "cdcDefaultDNSDomainName"), ("CISCO-DNS-CLIENT-MIB", "cdcDNSDomainName"), ("CISCO-DNS-CLIENT-MIB", "cdcDNSDomainNameStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDNSDomainNameConfigGroup = ciscoDNSDomainNameConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDNSDomainNameConfigGroup.setDescription('A collection of objects for DNS Domain Name Configuration.')
mibBuilder.exportSymbols("CISCO-DNS-CLIENT-MIB", cdcDNSServerAddr=cdcDNSServerAddr, cdcDNSDomainNameStatus=cdcDNSDomainNameStatus, cdcDNSServerIndex=cdcDNSServerIndex, cdcDefaultDNSDomainName=cdcDefaultDNSDomainName, cdcDNSServerEntry=cdcDNSServerEntry, ciscoDNSClientMIBCompliances=ciscoDNSClientMIBCompliances, cdcDNSServerStatus=cdcDNSServerStatus, ciscoDNSDomainNameConfigGroup=ciscoDNSDomainNameConfigGroup, ciscoDNSClientMIB=ciscoDNSClientMIB, cdcNoOfDNSServerConfig=cdcNoOfDNSServerConfig, cdcDNSDomainNameEntry=cdcDNSDomainNameEntry, ciscoDNSClientMIBConformance=ciscoDNSClientMIBConformance, ciscoDNSServerConfigGroup=ciscoDNSServerConfigGroup, cdcDNSServerAddrType=cdcDNSServerAddrType, PYSNMP_MODULE_ID=ciscoDNSClientMIB, ciscoDNSClientMIBNotifs=ciscoDNSClientMIBNotifs, cdcDNSDomainNameIndex=cdcDNSDomainNameIndex, cdcDNSServerNextAvailIndex=cdcDNSServerNextAvailIndex, ciscoDNSClientMIBCompliance=ciscoDNSClientMIBCompliance, cdcDNSConfigEnable=cdcDNSConfigEnable, cdcDNSDomainName=cdcDNSDomainName, cdcConfigGroup=cdcConfigGroup, ciscoDNSClientMIBObjects=ciscoDNSClientMIBObjects, cdcDNSDomainNameTable=cdcDNSDomainNameTable, cdcDNSServerTable=cdcDNSServerTable, ciscoDNSClientMIBGroups=ciscoDNSClientMIBGroups)
