#
# PySNMP MIB module RADLAN-BGP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-BGP
# Produced by pysmi-0.3.4 at Wed May  1 14:45:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
bgp4PathAttrEntry, bgp4PathAttrIpAddrPrefix, bgp4PathAttrPeer, bgp4PathAttrIpAddrPrefixLen, bgpPeerEntry, bgpPeerRemoteAddr = mibBuilder.importSymbols("BGP4-MIB", "bgp4PathAttrEntry", "bgp4PathAttrIpAddrPrefix", "bgp4PathAttrPeer", "bgp4PathAttrIpAddrPrefixLen", "bgpPeerEntry", "bgpPeerRemoteAddr")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, MibIdentifier, ObjectIdentity, IpAddress, Counter64, Gauge32, Bits, Counter32, Unsigned32, Integer32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "MibIdentifier", "ObjectIdentity", "IpAddress", "Counter64", "Gauge32", "Bits", "Counter32", "Unsigned32", "Integer32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
rlBgp = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 71))
rlBgp.setRevisions(('2004-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlBgp.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlBgp.setLastUpdated('200406010000Z')
if mibBuilder.loadTexts: rlBgp.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlBgp.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlBgp.setDescription('The private MIB module definition for RND BGP private MIB.')
rlBgpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBgpMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlBgpMibVersion.setDescription('BGP4 Mib version, the current version is 1.')
rlBgpPeersExtTable = MibTable((1, 3, 6, 1, 4, 1, 89, 71, 2), )
if mibBuilder.loadTexts: rlBgpPeersExtTable.setStatus('current')
if mibBuilder.loadTexts: rlBgpPeersExtTable.setDescription('BGP peer table. Contains one entry per BGP peer, information about the connections with BGP peers.')
rlBgpPeersExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 71, 2, 1), )
bgpPeerEntry.registerAugmentions(("RADLAN-BGP", "rlBgpPeersExtEntry"))
rlBgpPeersExtEntry.setIndexNames(*bgpPeerEntry.getIndexNames())
if mibBuilder.loadTexts: rlBgpPeersExtEntry.setStatus('current')
if mibBuilder.loadTexts: rlBgpPeersExtEntry.setDescription('Entry containing information about the connection with a BGP peer. ')
rlBgpPeersExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 71, 2, 1, 1), RowStatus().clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpPeersExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlBgpPeersExtRowStatus.setDescription('The row status variable, used according to installation and removal conventions for conceptual rows. Setting this object to active(1) or createAndGo(4) results in the addition of the remote address of the peer. Destroying the entry or setting it to notInService(2) removes the remote address associated with the peer. The use of other values is implementation-dependent.')
rlBgpPeersExtIsReflectorClient = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 71, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonClient", 0), ("client", 1), ("meshedClient", 2))).clone('meshedClient')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpPeersExtIsReflectorClient.setStatus('current')
if mibBuilder.loadTexts: rlBgpPeersExtIsReflectorClient.setDescription('This value indicates whether the given peer is a reflector client of this router, or not. A value of client indicates that this peer is a reflector client that is not fully meshed with other reflector clients. A value of meshedClient indicates that the peer is a reflector client and is fully meshed with all other clients because there is no route reflection. The default value is meshedClient.')
rlBgpPeersExtInConfederation = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 71, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpPeersExtInConfederation.setStatus('current')
if mibBuilder.loadTexts: rlBgpPeersExtInConfederation.setDescription('This value indicates whether the given peer is in our confederation or not.')
rlBgpPeersExtRemAS = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 71, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpPeersExtRemAS.setStatus('current')
if mibBuilder.loadTexts: rlBgpPeersExtRemAS.setDescription('The remote autonomous system number which is configurable.')
rlBgpClusterId = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpClusterId.setStatus('current')
if mibBuilder.loadTexts: rlBgpClusterId.setDescription('The configured Cluster-ID of the local router. A value of 0.0.0.0 indicates the absence of this value.')
rlBgpConfederationId = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpConfederationId.setStatus('current')
if mibBuilder.loadTexts: rlBgpConfederationId.setDescription('The local Confederation Identification Number. A value of zero (0) indicates the absence of this value.')
rlBgpEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpEnable.setStatus('current')
if mibBuilder.loadTexts: rlBgpEnable.setDescription('This value indicates whether BGP is enable on this router or not.')
rlBgpRouteReflectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpRouteReflectionEnable.setStatus('current')
if mibBuilder.loadTexts: rlBgpRouteReflectionEnable.setDescription('This value indicates whether route reflection extension is enable on this router or not.')
rlBgpASConfederationEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpASConfederationEnable.setStatus('current')
if mibBuilder.loadTexts: rlBgpASConfederationEnable.setDescription('This value indicates whether AS confederation extension is enable on this router or not.')
rlBgpRouteFlapDampeningEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpRouteFlapDampeningEnable.setStatus('current')
if mibBuilder.loadTexts: rlBgpRouteFlapDampeningEnable.setDescription('This value indicates whether route flap dampening extension is enable on this router or not.')
rlBgpCommunitiesEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpCommunitiesEnable.setStatus('current')
if mibBuilder.loadTexts: rlBgpCommunitiesEnable.setDescription('This value indicates whether BGP communities extension is enable on this router or not.')
rlBgpCapabilNegotEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpCapabilNegotEnable.setStatus('current')
if mibBuilder.loadTexts: rlBgpCapabilNegotEnable.setDescription('This value indicates whether BGP capabilities negotiation extension is enable on this router or not.')
rlBgpMedConf = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpMedConf.setStatus('current')
if mibBuilder.loadTexts: rlBgpMedConf.setDescription('The configured Multi-Exit Descriminator of the local router. A value of -1 indicates the absence of this attribute.')
rlBgpLocalPrefConf = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpLocalPrefConf.setStatus('current')
if mibBuilder.loadTexts: rlBgpLocalPrefConf.setDescription('The configured Local Preference of the local router. A value of -1 indicates the absence of this attribute.')
rlBgpLocalAsConf = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpLocalAsConf.setStatus('current')
if mibBuilder.loadTexts: rlBgpLocalAsConf.setDescription('The local autonomous system number, which is configurable.')
rlBgp4PathAttrExtTable = MibTable((1, 3, 6, 1, 4, 1, 89, 71, 14), )
if mibBuilder.loadTexts: rlBgp4PathAttrExtTable.setStatus('current')
if mibBuilder.loadTexts: rlBgp4PathAttrExtTable.setDescription('The BGP-4 Received Path Attribute Table contains information about paths to destination networks received from all BGP4 peers.')
rlBgp4PathAttrExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 71, 14, 1), )
bgp4PathAttrEntry.registerAugmentions(("RADLAN-BGP", "rlBgp4PathAttrExtEntry"))
rlBgp4PathAttrExtEntry.setIndexNames(*bgp4PathAttrEntry.getIndexNames())
if mibBuilder.loadTexts: rlBgp4PathAttrExtEntry.setStatus('current')
if mibBuilder.loadTexts: rlBgp4PathAttrExtEntry.setDescription('Information about a path to a network.')
rlBgp4PathAttrOriginatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 71, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBgp4PathAttrOriginatorId.setStatus('current')
if mibBuilder.loadTexts: rlBgp4PathAttrOriginatorId.setDescription('The Originator-ID identifying the router that initially advertised this destination to a Route Reflector. A value of 0.0.0.0 indicates the absence of this attribute. This attribute is defined in [RFC2796].')
rlBgp4PathAttrClusterList = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 71, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBgp4PathAttrClusterList.setStatus('current')
if mibBuilder.loadTexts: rlBgp4PathAttrClusterList.setDescription('A sequence of four octet long values representing the reflection path that the route has passed. Each four octet long value represents the ID of a cluster that the route has traversed. A length of zero (0) indicates the absence of this attribute. This attribute is defined in [RFC2796].')
rlBgp4PathAttrCommunities = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 71, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlBgp4PathAttrCommunities.setStatus('current')
if mibBuilder.loadTexts: rlBgp4PathAttrCommunities.setDescription('A sequence of four octet long values representing the community that was received with the route. The values of each of the individual octets may have semantic meaning. A length of zero (0) indicates the absence of this attribute. This attribute is defined in [RFC1997].')
rlBgpSuppressLimit = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpSuppressLimit.setStatus('current')
if mibBuilder.loadTexts: rlBgpSuppressLimit.setDescription('A numeric value that is compared with the penalty. If the penalty is greater than the suppress limit, the route is suppressed. Default value is 2000.')
rlBgpReuseLimit = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpReuseLimit.setStatus('current')
if mibBuilder.loadTexts: rlBgpReuseLimit.setDescription('A configurable numeric value that is compared with the penalty. If the penalty is less than the reuse limit, a suppressed route that is up will no longer be suppressed. Default value is 750.')
rlBgpHalfLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpHalfLifeTime.setStatus('current')
if mibBuilder.loadTexts: rlBgpHalfLifeTime.setDescription('A configurable numeric value that describes the time required to reduce the penalty by one half. Default value is 15.')
rlBgpMaxSuppressTime = MibScalar((1, 3, 6, 1, 4, 1, 89, 71, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlBgpMaxSuppressTime.setStatus('current')
if mibBuilder.loadTexts: rlBgpMaxSuppressTime.setDescription('A configurable numeric value that describes the maximum time a route can be suppressed no matter how unstable it has been prior to this period ofstability. Default value is 4*rlBgpHalfLifeTime.')
mibBuilder.exportSymbols("RADLAN-BGP", rlBgp4PathAttrClusterList=rlBgp4PathAttrClusterList, rlBgpRouteFlapDampeningEnable=rlBgpRouteFlapDampeningEnable, rlBgpPeersExtRemAS=rlBgpPeersExtRemAS, rlBgpPeersExtTable=rlBgpPeersExtTable, rlBgpCapabilNegotEnable=rlBgpCapabilNegotEnable, rlBgpSuppressLimit=rlBgpSuppressLimit, rlBgpPeersExtInConfederation=rlBgpPeersExtInConfederation, rlBgp=rlBgp, rlBgpMibVersion=rlBgpMibVersion, rlBgpMedConf=rlBgpMedConf, rlBgpEnable=rlBgpEnable, rlBgpHalfLifeTime=rlBgpHalfLifeTime, rlBgpLocalAsConf=rlBgpLocalAsConf, rlBgp4PathAttrExtTable=rlBgp4PathAttrExtTable, rlBgpCommunitiesEnable=rlBgpCommunitiesEnable, rlBgpPeersExtEntry=rlBgpPeersExtEntry, rlBgp4PathAttrCommunities=rlBgp4PathAttrCommunities, rlBgpPeersExtIsReflectorClient=rlBgpPeersExtIsReflectorClient, rlBgpASConfederationEnable=rlBgpASConfederationEnable, rlBgp4PathAttrExtEntry=rlBgp4PathAttrExtEntry, rlBgpMaxSuppressTime=rlBgpMaxSuppressTime, rlBgpClusterId=rlBgpClusterId, PYSNMP_MODULE_ID=rlBgp, rlBgpPeersExtRowStatus=rlBgpPeersExtRowStatus, rlBgp4PathAttrOriginatorId=rlBgp4PathAttrOriginatorId, rlBgpReuseLimit=rlBgpReuseLimit, rlBgpLocalPrefConf=rlBgpLocalPrefConf, rlBgpRouteReflectionEnable=rlBgpRouteReflectionEnable, rlBgpConfederationId=rlBgpConfederationId)
