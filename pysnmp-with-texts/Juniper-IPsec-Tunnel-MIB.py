#
# PySNMP MIB module Juniper-IPsec-Tunnel-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-IPsec-Tunnel-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:03:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniNextIfIndex, JuniName = mibBuilder.importSymbols("Juniper-TC", "JuniNextIfIndex", "JuniName")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Counter64, Bits, ObjectIdentity, NotificationType, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Counter32, MibIdentifier, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Bits", "ObjectIdentity", "NotificationType", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Counter32", "MibIdentifier", "TimeTicks", "iso")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
juniIpsecTunnelMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70))
juniIpsecTunnelMIB.setRevisions(('2004-04-06 22:26',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniIpsecTunnelMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniIpsecTunnelMIB.setLastUpdated('200404062226Z')
if mibBuilder.loadTexts: juniIpsecTunnelMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniIpsecTunnelMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniIpsecTunnelMIB.setDescription('The IPsec Tunnel MIB for the Juniper Networks enterprise.')
class JuniIpsecIdentityType(TextualConvention, Integer32):
    description = 'The type of IPsec Phase-1 identity. The Phase-1 identity may be identified by one of the ID types defined in IPSEC DOI.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("reserved", 0), ("idIpv4Addr", 1), ("idFqdn", 2), ("idUserFqdn", 3), ("idIpv4AddrSubnet", 4), ("idIpv6Addr", 5), ("idIpv6AddrSubnet", 6), ("idIpv4AddrRange", 7), ("idIpv6AddrRange", 8), ("idDn", 9), ("idDerAsn1Gn", 10), ("idKeyId", 11))

class JuniIpsecTransformType(TextualConvention, Integer32):
    description = 'The transform algorithm for the IPsec tunnel.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("reserved", 0), ("ahMd5", 1), ("ahSha", 2), ("espDesMd5", 3), ("esp3DesMd5", 4), ("espDesSha", 5), ("esp3DesSha", 6), ("espNullMd5", 7), ("espNullSha", 8), ("espDesNullAuth", 9), ("esp3DesNullAuth", 10))

class JuniIpsecPfsGroup(TextualConvention, Integer32):
    description = 'The perfect forward secrecy group. Group1 - 768-bit DH prime modulus group. Group2 - 1024-bit DH prime modulus group. Group5 - 1536-bit DH prime modulus group.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))
    namedValues = NamedValues(("noGroup", 0), ("group1", 1), ("group2", 2), ("group5", 5))

class JuniIpsecTunnelType(TextualConvention, Integer32):
    description = 'The ipsec tunnel type.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("signaledTunnel", 0), ("manualTunnel", 1))

class Spi(TextualConvention, Unsigned32):
    description = 'The type of the SPI associated with IPsec Phase-2 security associations.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

juniIpsecObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1))
juniIpsecTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1))
juniIpsecSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 2))
juniIpsecTunnelNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 1), JuniNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in the juniIpsecTunnelIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
juniIpsecTunnelInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2), )
if mibBuilder.loadTexts: juniIpsecTunnelInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInterfaceTable.setDescription('This table contains entries of IPsec Tunnel interfaces.')
juniIpsecTunnelInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1), ).setIndexNames((0, "Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelIfIndex"))
if mibBuilder.loadTexts: juniIpsecTunnelInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInterfaceEntry.setDescription('Each entry describes the characteristics of a single IPsec Tunnel interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/juniIfTable.')
juniIpsecTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniIpsecTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelIfIndex.setDescription('The ifIndex of the IPsec tunnel interface. When creating entries in this table, suitable values for this object are determined by reading juniIpsecTunnelNextIfIndex.')
juniIpsecTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelName.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelName.setDescription('The administratively assigned name for this IPsec Tunnel interface. Before configuring other tunnel attributes, IPsec tunnel has to be created with minimum attributes (tunnel name and rowStatus).')
juniIpsecTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 3), JuniIpsecTunnelType().clone('signaledTunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelType.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelType.setDescription('The configured mode for this IPsec Tunnel interface.')
juniIpsecTunnelTransportVirtualRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 4), JuniName().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransportVirtualRouter.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransportVirtualRouter.setDescription('The transport virtual router associated with this IPsec tunnel interface. This object need not be set when creating row entries. Note that the default when this object is not specified is the router associated with the agent acting on the management request.')
juniIpsecTunnelLocalEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelLocalEndPt.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelLocalEndPt.setDescription('The tunnel local endpoint.')
juniIpsecTunnelRemoteEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelRemoteEndPt.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelRemoteEndPt.setDescription('The tunnel remote endpoint.')
juniIpsecTunnelTransformSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransformSet.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransformSet.setDescription('The transform set. It refers to a transform set that is defined in the transform set table.')
juniIpsecTunnelSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 8), JuniIpsecIdentityType().clone('idIpv4Addr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelSrcType.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelSrcType.setDescription('The tunnel source type. The tunnel source may be identified by: 1. an IP(V4) address, or 2. a fully qualified domain name string, or 3. a user fully qualified domain name string.')
juniIpsecTunnelSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelSrcAddr.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelSrcAddr.setDescription('The tunnel source IP(V4) address.')
juniIpsecTunnelSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelSrcName.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelSrcName.setDescription('The tunnel source Name.')
juniIpsecTunnelDstType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 11), JuniIpsecIdentityType().clone('idIpv4Addr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelDstType.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelDstType.setDescription('The tunnel destination type. The tunnel destination may be identified by: 1. an IP(V4) address, or 2. a fully qualified domain name string, or 3. a user fully qualified domain name string.')
juniIpsecTunnelDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelDstAddr.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelDstAddr.setDescription('The tunnel destination IP(V4) address.')
juniIpsecTunnelDstName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelDstName.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelDstName.setDescription('The tunnel destination Name.')
juniIpsecTunnelBackupDstType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 14), JuniIpsecIdentityType().clone('idIpv4Addr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelBackupDstType.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelBackupDstType.setDescription('The tunnel backup destination type. The tunnel backup destination type has to be the same as the tunnel destination type The tunnel destination may be identified by: 1. an IP(V4) address, or 2. a fully qualified domain name string, 3. a user fully qualified domain name string.')
juniIpsecTunnelBackupDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelBackupDstAddr.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelBackupDstAddr.setDescription('The tunnel backup destination IP(V4) address.')
juniIpsecTunnelBackupDstName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelBackupDstName.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelBackupDstName.setDescription('The tunnel backup destination Name.')
juniIpsecTunnelLocalIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 17), JuniIpsecIdentityType().clone('idIpv4Addr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelLocalIdType.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelLocalIdType.setDescription('The tunnel phase-2 local identity type. The tunnel local identity type may be identified by: 1. an IP address, or 2. an IP address subnet, or 3. an IP address range.')
juniIpsecTunnelLocalIdAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelLocalIdAddr1.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelLocalIdAddr1.setDescription('The tunnel local phase-2 identity IP address 1.')
juniIpsecTunnelLocalIdAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 19), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelLocalIdAddr2.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelLocalIdAddr2.setDescription('The tunnel local phase-2 identity IP address 2 in the case the identity type is an IP address range. The tunnel local phase-2 identity netmask in the case the identity type is an IP address subnet.')
juniIpsecTunnelRemoteIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 20), JuniIpsecIdentityType().clone('idIpv4Addr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelRemoteIdType.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelRemoteIdType.setDescription('The tunnel phase-2 remote identity type. The tunnel remote identity type may be identified by: 1. an IP address, or 2. an IP address subnet, or 3. an IP address range.')
juniIpsecTunnelRemoteIdAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelRemoteIdAddr1.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelRemoteIdAddr1.setDescription('The tunnel remote phase-2 identity IP address 1.')
juniIpsecTunnelRemoteIdAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 22), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelRemoteIdAddr2.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelRemoteIdAddr2.setDescription('The tunnel remote phase-2 identity IP address 2 in the case the identity type is an IP address range. The tunnel remote phase-2 identity netmask in the case the identity type is an IP address subnet.')
juniIpsecTunnelLifeTimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1800, 864000))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelLifeTimeSecs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelLifeTimeSecs.setDescription('The tunnel lifetime in seconds.')
juniIpsecTunnelLifeTimeKBs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(102400, 4294967295))).setUnits('kilobytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelLifeTimeKBs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelLifeTimeKBs.setDescription('The tunnel lifetime in kilobytes.')
juniIpsecTunnelPfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 25), JuniIpsecPfsGroup()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelPfsGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelPfsGroup.setDescription('The tunnel perfect forward secrecty group.')
juniIpsecTunnelMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(160, 9000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelMtu.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelMtu.setDescription('The tunnel MTU.')
juniIpsecTunnelInboundSpi1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 27), Spi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelInboundSpi1.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInboundSpi1.setDescription('The tunnel inbound SPI 1.')
juniIpsecTunnelInboundTransform1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 28), JuniIpsecTransformType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelInboundTransform1.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInboundTransform1.setDescription('The tunnel inbound transform 1.')
juniIpsecTunnelInboundSpi2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 29), Spi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelInboundSpi2.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInboundSpi2.setDescription('The tunnel inbound SPI 2.')
juniIpsecTunnelInboundTransform2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 30), JuniIpsecTransformType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelInboundTransform2.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInboundTransform2.setDescription('The tunnel inbound transform 2.')
juniIpsecTunnelInboundSpi3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 31), Spi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelInboundSpi3.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInboundSpi3.setDescription('The tunnel inbound SPI 3.')
juniIpsecTunnelInboundTransform3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 32), JuniIpsecTransformType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelInboundTransform3.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInboundTransform3.setDescription('The tunnel inbound transform 3.')
juniIpsecTunnelInboundSpi4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 33), Spi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelInboundSpi4.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInboundSpi4.setDescription('The tunnel inbound SPI 4.')
juniIpsecTunnelInboundTransform4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 34), JuniIpsecTransformType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelInboundTransform4.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelInboundTransform4.setDescription('The tunnel inbound transform 4.')
juniIpsecTunnelOutboundSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 35), Spi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelOutboundSpi.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelOutboundSpi.setDescription('The tunnel outbound SPI.')
juniIpsecTunnelOutboundTransform = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 36), JuniIpsecTransformType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelOutboundTransform.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelOutboundTransform.setDescription('The tunnel outbound transform.')
juniIpsecTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 2, 1, 37), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniIpsecTunnelIfRowStatus juniIpsecTunnelName In addition, when creating an entry the following condition must hold: A value for juniIpsecTunnelIfIndex must have been determined previously, typically by reading juniIpsecTunnelNextIfIndex. Once created, the following objects may not be modified: juniIpsecTunnelName juniIpsecTunnelVirtualRouter A corresponding entry in ifTable/ifXTable/juniIfTable is created/ destroyed as a result of creating/destroying an entry in this table.')
juniIpsecTunnelStatTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3), )
if mibBuilder.loadTexts: juniIpsecTunnelStatTable.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatTable.setDescription('The IPsec tunnel interface statistics table. Describes the IPsec tunnel inbound/outbound statistics on IPsec de/encapsulation, de/encryption, and related error statistics.')
juniIpsecTunnelStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1), ).setIndexNames((0, "Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatIfIndex"))
if mibBuilder.loadTexts: juniIpsecTunnelStatEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatEntry.setDescription('Describes the ipsec traffic statistics of the ipsec tunnel interface.')
juniIpsecTunnelStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniIpsecTunnelStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
juniIpsecTunnelStatInbUserRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbUserRecvPkts.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbUserRecvPkts.setDescription('The total number of inbound user packets (non-error) received for this IPsec tunnel.')
juniIpsecTunnelStatInbUserRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbUserRecvOctets.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbUserRecvOctets.setDescription('The total number of inbound user octets (non-error) received for this IPsec tunnel.')
juniIpsecTunnelStatInbAccRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbAccRecvPkts.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbAccRecvPkts.setDescription('The total number of inbound encapsulated packets received for this IPsec tunnel.')
juniIpsecTunnelStatInbAccRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbAccRecvOctets.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbAccRecvOctets.setDescription('The total number of inbound encapsulated octets received for this IPsec tunnel.')
juniIpsecTunnelStatInbAuthErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbAuthErrs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbAuthErrs.setDescription('The total number of inbound packets with authentication errors received for this IPsec tunnel.')
juniIpsecTunnelStatInbReplayErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbReplayErrs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbReplayErrs.setDescription('The total number of inbound packets with replay errors received for this IPsec tunnel.')
juniIpsecTunnelStatInbPolicyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbPolicyErrs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbPolicyErrs.setDescription('The total number of inbound packets with inbound policy errors received for this IPsec tunnel.')
juniIpsecTunnelStatInbOtherRecvErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbOtherRecvErrs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbOtherRecvErrs.setDescription('The total number of inbound packets with other Rx errors received for this IPsec tunnel.')
juniIpsecTunnelStatInbDecryptErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbDecryptErrs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbDecryptErrs.setDescription('The total number of inbound packets with decryption errors received for this IPsec tunnel.')
juniIpsecTunnelStatInbPadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatInbPadErrs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatInbPadErrs.setDescription('The total number of inbound packets with pad errors received for this IPsec tunnel.')
juniIpsecTunnelStatOutbUserRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatOutbUserRecvPkts.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatOutbUserRecvPkts.setDescription('The total number of outbound user packets received for this IPsec tunnel.')
juniIpsecTunnelStatOutbUserRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatOutbUserRecvOctets.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatOutbUserRecvOctets.setDescription('The total number of outbound user octets received for this IPsec tunnel.')
juniIpsecTunnelStatOutbAccRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatOutbAccRecvPkts.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatOutbAccRecvPkts.setDescription('The total number of encapsulated outbound packets received for this IPsec tunnel.')
juniIpsecTunnelStatOutbAccRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelStatOutbAccRecvOctets.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatOutbAccRecvOctets.setDescription('The total number of encapsulated outbound octets received for this IPsec tunnel.')
juniIpsecTunnelOutbOtherTxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelOutbOtherTxErrs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelOutbOtherTxErrs.setDescription('The total number of outbound packets with other TX errors for this IPsec tunnel.')
juniIpsecTunnelOutbPolicyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecTunnelOutbPolicyErrs.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelOutbPolicyErrs.setDescription('The total number of outbound packets with outbound policy errors for this IPsec tunnel.')
juniIpsecTunnelTransformSetTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4), )
if mibBuilder.loadTexts: juniIpsecTunnelTransformSetTable.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransformSetTable.setDescription('This table contains entries of IPsec transform sets defined for this router.')
juniIpsecTunnelTransformSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1), ).setIndexNames((0, "Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransformSetName"))
if mibBuilder.loadTexts: juniIpsecTunnelTransformSetEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransformSetEntry.setDescription('Each entry describes a transform set that contains up to 6 IPsec transforms. The transform set name is referenced by the IPsec tunnel as its local IPsec policy.')
juniIpsecTunnelTransformSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: juniIpsecTunnelTransformSetName.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransformSetName.setDescription('The name of the IPsec tunnel transform set.')
juniIpsecTunnelTransform1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1, 2), JuniIpsecTransformType().clone('reserved')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransform1.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransform1.setDescription('The first IPsec transform in the transform set.')
juniIpsecTunnelTransform2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1, 3), JuniIpsecTransformType().clone('reserved')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransform2.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransform2.setDescription('The second IPsec transform in the transform set.')
juniIpsecTunnelTransform3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1, 4), JuniIpsecTransformType().clone('reserved')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransform3.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransform3.setDescription('The third IPsec transform in the transform set.')
juniIpsecTunnelTransform4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1, 5), JuniIpsecTransformType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransform4.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransform4.setDescription('The fourth IPsec transform in the transform set.')
juniIpsecTunnelTransform5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1, 6), JuniIpsecTransformType().clone('reserved')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransform5.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransform5.setDescription('The fifth IPsec transform in the transform set.')
juniIpsecTunnelTransform6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1, 7), JuniIpsecTransformType().clone('reserved')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransform6.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransform6.setDescription('The sixth IPsec transform in the transform set.')
juniIpsecTunnelTransformSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelTransformSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransformSetRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniIpsecTunnelTransformSetRowStatus juniIpsecTunnelTransformSetName juniIpsecTunnelTransform1.')
juniIpsecTunnelGlobalLocalEndpointTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 5), )
if mibBuilder.loadTexts: juniIpsecTunnelGlobalLocalEndpointTable.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelGlobalLocalEndpointTable.setDescription('This table contains entries of global local endpoint for the IPsec tunnel. There is one global local endpoint for each transport virtual router if configured.')
juniIpsecTunnelGlobalLocalEndpointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 5, 1), ).setIndexNames((0, "Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransportVrRouterIdx"))
if mibBuilder.loadTexts: juniIpsecTunnelGlobalLocalEndpointEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelGlobalLocalEndpointEntry.setDescription('Each entry defines the global local endpoint for the transport virtual router.')
juniIpsecTunnelTransportVrRouterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniIpsecTunnelTransportVrRouterIdx.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelTransportVrRouterIdx.setDescription('The transport virtual router for the global local endpoint.')
juniIpsecTunnelGlobalLocalEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelGlobalLocalEndpoint.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelGlobalLocalEndpoint.setDescription('The global local endpoint for the transport virtual router.')
juniIpsecTunnelGlobalLocalEndpointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpsecTunnelGlobalLocalEndpointRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelGlobalLocalEndpointRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniIpsecTunnelGlobalLocalEndpoint juniIpsecTunnelTransportVrRouterIdx Once created, the global local endpoint can not be changed unless there is no IPsec tunnel references to the local endpoint.')
juniIpsecTunnelSystemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 2, 1))
juniIpsecSummaryStatsTotalTunnels = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecSummaryStatsTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: juniIpsecSummaryStatsTotalTunnels.setDescription('The total number of tunnels')
juniIpsecSummaryStatsAdminStatusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecSummaryStatsAdminStatusEnabled.setStatus('current')
if mibBuilder.loadTexts: juniIpsecSummaryStatsAdminStatusEnabled.setDescription('The total number of tunnels with administrative status enabled')
juniIpsecSummaryStatsAdminStatusDisabled = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecSummaryStatsAdminStatusDisabled.setStatus('current')
if mibBuilder.loadTexts: juniIpsecSummaryStatsAdminStatusDisabled.setDescription('The total number of tunnels with administrative status disabled')
juniIpsecSummaryStatsOperStatusUp = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecSummaryStatsOperStatusUp.setStatus('current')
if mibBuilder.loadTexts: juniIpsecSummaryStatsOperStatusUp.setDescription('The total number of tunnels with operational status up')
juniIpsecSummaryStatsOperStatusDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecSummaryStatsOperStatusDown.setStatus('current')
if mibBuilder.loadTexts: juniIpsecSummaryStatsOperStatusDown.setDescription('The total number of tunnels with operational status down')
juniIpsecSummaryStatsOperStatusNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpsecSummaryStatsOperStatusNotPresent.setStatus('current')
if mibBuilder.loadTexts: juniIpsecSummaryStatsOperStatusNotPresent.setDescription('The total number of tunnels with operational status not-present')
juniIpsecTunnelMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2))
juniIpsecTunnelMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 1))
juniIpsecTunnelMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 2))
juniIpsecTunnelCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 1, 1)).setObjects(("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelConfigGroup"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatsGroup"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTransformSetGroup"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecGlobalLocalEndpointGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpsecTunnelCompliance = juniIpsecTunnelCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniIpsecTunnelCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the IPsec Tunnel MIB.')
juniIpsecTunnelCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 1, 2)).setObjects(("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelConfigGroup"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatsGroup"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTransformSetGroup"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecGlobalLocalEndpointGroup"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelSystemStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpsecTunnelCompliance2 = juniIpsecTunnelCompliance2.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelCompliance2.setDescription('The compliance statement for SNMPv2 entities which implement the IPsec Tunnel MIB.')
juniIpsecTunnelConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 2, 1)).setObjects(("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelNextIfIndex"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelName"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelType"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransportVirtualRouter"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelLocalEndPt"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelRemoteEndPt"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransformSet"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelSrcType"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelSrcAddr"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelSrcName"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelDstType"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelDstAddr"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelDstName"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelBackupDstType"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelBackupDstAddr"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelBackupDstName"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelLocalIdType"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelLocalIdAddr1"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelLocalIdAddr2"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelRemoteIdType"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelRemoteIdAddr1"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelRemoteIdAddr2"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelLifeTimeSecs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelLifeTimeKBs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelPfsGroup"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelMtu"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelInboundSpi1"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelInboundTransform1"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelInboundSpi2"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelInboundTransform2"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelInboundSpi3"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelInboundTransform3"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelInboundSpi4"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelInboundTransform4"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelOutboundSpi"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelOutboundTransform"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpsecTunnelConfigGroup = juniIpsecTunnelConfigGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelConfigGroup.setDescription('A collection of objects providing configuration information of the IPsec tunnel.')
juniIpsecTunnelStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 2, 2)).setObjects(("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbUserRecvPkts"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbUserRecvOctets"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbAccRecvPkts"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbAccRecvOctets"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbAuthErrs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbReplayErrs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbPolicyErrs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbOtherRecvErrs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbDecryptErrs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatInbPadErrs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatOutbUserRecvPkts"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatOutbUserRecvOctets"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatOutbAccRecvPkts"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelStatOutbAccRecvOctets"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelOutbOtherTxErrs"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelOutbPolicyErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpsecTunnelStatsGroup = juniIpsecTunnelStatsGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelStatsGroup.setDescription('A collection of objects providing satistics information of the IPsec tunnel.')
juniIpsecTransformSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 2, 3)).setObjects(("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransform1"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransform2"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransform3"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransform4"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransform5"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransform6"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelTransformSetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpsecTransformSetGroup = juniIpsecTransformSetGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTransformSetGroup.setDescription('A collection of objects providing transform set information of the IPsec tunnel.')
juniIpsecGlobalLocalEndpointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 2, 4)).setObjects(("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelGlobalLocalEndpoint"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecTunnelGlobalLocalEndpointRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpsecGlobalLocalEndpointGroup = juniIpsecGlobalLocalEndpointGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpsecGlobalLocalEndpointGroup.setDescription('A collection of objects providing the global local endpoint for the IPsec tunnel.')
juniIpsecTunnelSystemStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 70, 2, 2, 5)).setObjects(("Juniper-IPsec-Tunnel-MIB", "juniIpsecSummaryStatsTotalTunnels"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecSummaryStatsAdminStatusEnabled"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecSummaryStatsAdminStatusDisabled"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecSummaryStatsOperStatusUp"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecSummaryStatsOperStatusDown"), ("Juniper-IPsec-Tunnel-MIB", "juniIpsecSummaryStatsOperStatusNotPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpsecTunnelSystemStatsGroup = juniIpsecTunnelSystemStatsGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpsecTunnelSystemStatsGroup.setDescription('A collection of objects providing summary statistics information for IPsec tunnels in one system.')
mibBuilder.exportSymbols("Juniper-IPsec-Tunnel-MIB", juniIpsecTunnelInboundSpi3=juniIpsecTunnelInboundSpi3, juniIpsecTunnelTransformSetRowStatus=juniIpsecTunnelTransformSetRowStatus, juniIpsecTunnelTransform5=juniIpsecTunnelTransform5, juniIpsecSummaryStatsAdminStatusEnabled=juniIpsecSummaryStatsAdminStatusEnabled, juniIpsecTunnelStatInbAccRecvPkts=juniIpsecTunnelStatInbAccRecvPkts, juniIpsecTunnelMtu=juniIpsecTunnelMtu, juniIpsecTunnelTransformSetTable=juniIpsecTunnelTransformSetTable, juniIpsecTunnelSrcType=juniIpsecTunnelSrcType, juniIpsecTunnelInboundSpi4=juniIpsecTunnelInboundSpi4, juniIpsecTunnelOutbOtherTxErrs=juniIpsecTunnelOutbOtherTxErrs, juniIpsecTunnelSrcAddr=juniIpsecTunnelSrcAddr, juniIpsecTunnelInboundTransform3=juniIpsecTunnelInboundTransform3, PYSNMP_MODULE_ID=juniIpsecTunnelMIB, juniIpsecSummaryStatsAdminStatusDisabled=juniIpsecSummaryStatsAdminStatusDisabled, JuniIpsecIdentityType=JuniIpsecIdentityType, juniIpsecTunnelInboundSpi1=juniIpsecTunnelInboundSpi1, juniIpsecTunnelStatOutbAccRecvOctets=juniIpsecTunnelStatOutbAccRecvOctets, juniIpsecTunnelDstName=juniIpsecTunnelDstName, juniIpsecTunnelMIB=juniIpsecTunnelMIB, juniIpsecTunnelStatInbAccRecvOctets=juniIpsecTunnelStatInbAccRecvOctets, juniIpsecTunnelMIBConformance=juniIpsecTunnelMIBConformance, juniIpsecTunnelTransform2=juniIpsecTunnelTransform2, juniIpsecTunnelGlobalLocalEndpointEntry=juniIpsecTunnelGlobalLocalEndpointEntry, juniIpsecSummaryStatsTotalTunnels=juniIpsecSummaryStatsTotalTunnels, juniIpsecTunnelStatInbPolicyErrs=juniIpsecTunnelStatInbPolicyErrs, juniIpsecTunnelStatOutbUserRecvPkts=juniIpsecTunnelStatOutbUserRecvPkts, juniIpsecTunnelInterfaceTable=juniIpsecTunnelInterfaceTable, juniIpsecTunnelStatInbUserRecvPkts=juniIpsecTunnelStatInbUserRecvPkts, juniIpsecTunnelGlobalLocalEndpoint=juniIpsecTunnelGlobalLocalEndpoint, juniIpsecTunnelStatInbOtherRecvErrs=juniIpsecTunnelStatInbOtherRecvErrs, juniIpsecSummaryStatsOperStatusDown=juniIpsecSummaryStatsOperStatusDown, juniIpsecTunnelLocalEndPt=juniIpsecTunnelLocalEndPt, juniIpsecTunnelMIBGroups=juniIpsecTunnelMIBGroups, juniIpsecTunnelConfigGroup=juniIpsecTunnelConfigGroup, juniIpsecTunnelDstType=juniIpsecTunnelDstType, juniIpsecTunnelStatIfIndex=juniIpsecTunnelStatIfIndex, juniIpsecTunnelInboundSpi2=juniIpsecTunnelInboundSpi2, juniIpsecTunnelOutboundTransform=juniIpsecTunnelOutboundTransform, juniIpsecTunnelSystemStats=juniIpsecTunnelSystemStats, juniIpsecTunnelTransform3=juniIpsecTunnelTransform3, juniIpsecTunnelOutboundSpi=juniIpsecTunnelOutboundSpi, juniIpsecGlobalLocalEndpointGroup=juniIpsecGlobalLocalEndpointGroup, juniIpsecTunnelSystemStatsGroup=juniIpsecTunnelSystemStatsGroup, juniIpsecTunnelName=juniIpsecTunnelName, juniIpsecTunnelStatInbAuthErrs=juniIpsecTunnelStatInbAuthErrs, juniIpsecTunnelTransformSetName=juniIpsecTunnelTransformSetName, juniIpsecTunnelBackupDstName=juniIpsecTunnelBackupDstName, juniIpsecTunnelStatInbUserRecvOctets=juniIpsecTunnelStatInbUserRecvOctets, juniIpsecTunnelStatOutbAccRecvPkts=juniIpsecTunnelStatOutbAccRecvPkts, juniIpsecObjects=juniIpsecObjects, JuniIpsecTransformType=JuniIpsecTransformType, juniIpsecTunnelLocalIdAddr1=juniIpsecTunnelLocalIdAddr1, juniIpsecTunnelTransform6=juniIpsecTunnelTransform6, juniIpsecTunnelTransform1=juniIpsecTunnelTransform1, juniIpsecSummaryStatsOperStatusNotPresent=juniIpsecSummaryStatsOperStatusNotPresent, juniIpsecTunnelPfsGroup=juniIpsecTunnelPfsGroup, juniIpsecTunnelType=juniIpsecTunnelType, juniIpsecTunnelStatTable=juniIpsecTunnelStatTable, juniIpsecTunnelRemoteEndPt=juniIpsecTunnelRemoteEndPt, juniIpsecTunnelSrcName=juniIpsecTunnelSrcName, juniIpsecTunnelTransform4=juniIpsecTunnelTransform4, juniIpsecTunnelInboundTransform1=juniIpsecTunnelInboundTransform1, juniIpsecTunnelStatInbDecryptErrs=juniIpsecTunnelStatInbDecryptErrs, juniIpsecTunnelStatInbPadErrs=juniIpsecTunnelStatInbPadErrs, juniIpsecTunnelInterfaceEntry=juniIpsecTunnelInterfaceEntry, Spi=Spi, juniIpsecTunnelStatEntry=juniIpsecTunnelStatEntry, juniIpsecTunnelMIBCompliances=juniIpsecTunnelMIBCompliances, juniIpsecTunnelLifeTimeSecs=juniIpsecTunnelLifeTimeSecs, juniIpsecTunnelBackupDstAddr=juniIpsecTunnelBackupDstAddr, juniIpsecTunnel=juniIpsecTunnel, juniIpsecTunnelNextIfIndex=juniIpsecTunnelNextIfIndex, juniIpsecTransformSetGroup=juniIpsecTransformSetGroup, JuniIpsecPfsGroup=JuniIpsecPfsGroup, juniIpsecTunnelCompliance=juniIpsecTunnelCompliance, JuniIpsecTunnelType=JuniIpsecTunnelType, juniIpsecTunnelGlobalLocalEndpointTable=juniIpsecTunnelGlobalLocalEndpointTable, juniIpsecTunnelCompliance2=juniIpsecTunnelCompliance2, juniIpsecTunnelTransportVirtualRouter=juniIpsecTunnelTransportVirtualRouter, juniIpsecTunnelTransformSetEntry=juniIpsecTunnelTransformSetEntry, juniIpsecSystem=juniIpsecSystem, juniIpsecTunnelRemoteIdAddr1=juniIpsecTunnelRemoteIdAddr1, juniIpsecTunnelInboundTransform2=juniIpsecTunnelInboundTransform2, juniIpsecTunnelLifeTimeKBs=juniIpsecTunnelLifeTimeKBs, juniIpsecTunnelBackupDstType=juniIpsecTunnelBackupDstType, juniIpsecTunnelStatInbReplayErrs=juniIpsecTunnelStatInbReplayErrs, juniIpsecTunnelStatOutbUserRecvOctets=juniIpsecTunnelStatOutbUserRecvOctets, juniIpsecTunnelTransformSet=juniIpsecTunnelTransformSet, juniIpsecTunnelTransportVrRouterIdx=juniIpsecTunnelTransportVrRouterIdx, juniIpsecSummaryStatsOperStatusUp=juniIpsecSummaryStatsOperStatusUp, juniIpsecTunnelRemoteIdAddr2=juniIpsecTunnelRemoteIdAddr2, juniIpsecTunnelDstAddr=juniIpsecTunnelDstAddr, juniIpsecTunnelLocalIdAddr2=juniIpsecTunnelLocalIdAddr2, juniIpsecTunnelLocalIdType=juniIpsecTunnelLocalIdType, juniIpsecTunnelRemoteIdType=juniIpsecTunnelRemoteIdType, juniIpsecTunnelIfIndex=juniIpsecTunnelIfIndex, juniIpsecTunnelInboundTransform4=juniIpsecTunnelInboundTransform4, juniIpsecTunnelOutbPolicyErrs=juniIpsecTunnelOutbPolicyErrs, juniIpsecTunnelStatsGroup=juniIpsecTunnelStatsGroup, juniIpsecTunnelRowStatus=juniIpsecTunnelRowStatus, juniIpsecTunnelGlobalLocalEndpointRowStatus=juniIpsecTunnelGlobalLocalEndpointRowStatus)
