#
# PySNMP MIB module CISCO-COMPRESSION-SERVICE-ADAPTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-COMPRESSION-SERVICE-ADAPTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
cardIndex, = mibBuilder.importSymbols("OLD-CISCO-CHASSIS-MIB", "cardIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, Counter32, MibIdentifier, Bits, IpAddress, Integer32, Gauge32, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "MibIdentifier", "Bits", "IpAddress", "Integer32", "Gauge32", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "TimeTicks", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoCompressionServiceAdapterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 57))
if mibBuilder.loadTexts: ciscoCompressionServiceAdapterMIB.setLastUpdated('9608150000Z')
if mibBuilder.loadTexts: ciscoCompressionServiceAdapterMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCompressionServiceAdapterMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoCompressionServiceAdapterMIB.setDescription('Used to manage the compression service adapter.')
ciscoCSAMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 57, 1))
csaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1))
csaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1), )
if mibBuilder.loadTexts: csaStatsTable.setStatus('current')
if mibBuilder.loadTexts: csaStatsTable.setDescription('A table describing performance statistics and status of compression service adapter.')
csaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1), ).setIndexNames((0, "OLD-CISCO-CHASSIS-MIB", "cardIndex"))
if mibBuilder.loadTexts: csaStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csaStatsEntry.setDescription('Each entry in this table describes performance statistics for a compression service. A new entry is created or removed when compression service adapter is physically added or removed from the device. Each entry is indexed by cardIndex object, which is an index for cardTable in chassis mib. Every card of type sa-compression in cardTable will have corresponding entry in csaStatsTable.')
csaInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaInOctets.setStatus('current')
if mibBuilder.loadTexts: csaInOctets.setDescription('Total number of compressed octets received by the compression service adaptor.')
csaOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaOutOctets.setStatus('current')
if mibBuilder.loadTexts: csaOutOctets.setDescription('Total number of compressed octets sent by the compression service adaptor.')
csaInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaInPackets.setStatus('current')
if mibBuilder.loadTexts: csaInPackets.setDescription('Total number of compressed packets received by the compression service adaptor.')
csaOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaOutPackets.setStatus('current')
if mibBuilder.loadTexts: csaOutPackets.setDescription('Total number of compressed packets sent by the compression service adaptor.')
csaInPacketsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaInPacketsDrop.setStatus('current')
if mibBuilder.loadTexts: csaInPacketsDrop.setDescription('Total number of output packets dropped. A large number of packets dropped by a compression adaptor would indicate, amount of data being passed to the adaptor for processing, exceeds its capacity.')
csaOutPacketsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaOutPacketsDrop.setStatus('current')
if mibBuilder.loadTexts: csaOutPacketsDrop.setDescription('Total number of input packets dropped. A large number of packets dropped by a compression adaptor would indicate, amount of data being passed to the adaptor for processing, exceeds its capacity.')
csaNumberOfRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaNumberOfRestarts.setStatus('current')
if mibBuilder.loadTexts: csaNumberOfRestarts.setDescription('Number of compression session restarts. A large number of restarts could indicate incompatible remote router, data being corrupted in transmission or packet order not being maintained.')
csaCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: csaCompressionRatio.setDescription('Current Compression ratio, the percentage the data was compressed. This is an instantaneous value. Compression ratio of 0% would indicate no compression, a compression ratio of 90% could mean 100 octets were compressed into 10 octets.')
csaDecompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csaDecompressionRatio.setStatus('current')
if mibBuilder.loadTexts: csaDecompressionRatio.setDescription('Current decompression ratio, the percentage the data was decompressed. This is an instantaneous value. Decompression ratio of 0% would indicate no decompression, a decompression ratio of 90% could mean 10 octets were decompressed into 100 octets.')
csaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 57, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csaEnable.setStatus('current')
if mibBuilder.loadTexts: csaEnable.setDescription('Indicates whether compression service adapter is currently active. Also allows users to set status via SNMP.')
ciscoCSAMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 57, 3))
csaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 57, 3, 1))
csaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 57, 3, 2))
csaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 57, 3, 1, 1)).setObjects(("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csaMIBCompliance = csaMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: csaMIBCompliance.setDescription('The Cisco Compression Service Adapter MIB is required in all systems supporting such an adaptor.')
csaMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 57, 3, 2, 1)).setObjects(("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaInOctets"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaOutOctets"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaInPackets"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaOutPackets"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaInPacketsDrop"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaOutPacketsDrop"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaNumberOfRestarts"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaCompressionRatio"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaDecompressionRatio"), ("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", "csaEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csaMIBGroup = csaMIBGroup.setStatus('current')
if mibBuilder.loadTexts: csaMIBGroup.setDescription('A collection of objects providing information about Cisco compression service adapter.')
mibBuilder.exportSymbols("CISCO-COMPRESSION-SERVICE-ADAPTER-MIB", PYSNMP_MODULE_ID=ciscoCompressionServiceAdapterMIB, csaDecompressionRatio=csaDecompressionRatio, csaNumberOfRestarts=csaNumberOfRestarts, csaInOctets=csaInOctets, csaCompressionRatio=csaCompressionRatio, csaMIBCompliance=csaMIBCompliance, csaEnable=csaEnable, csaInPacketsDrop=csaInPacketsDrop, csaMIBCompliances=csaMIBCompliances, csaMIBGroups=csaMIBGroups, csaStats=csaStats, csaStatsTable=csaStatsTable, csaOutPackets=csaOutPackets, csaOutPacketsDrop=csaOutPacketsDrop, csaInPackets=csaInPackets, ciscoCompressionServiceAdapterMIB=ciscoCompressionServiceAdapterMIB, csaMIBGroup=csaMIBGroup, ciscoCSAMIBConformance=ciscoCSAMIBConformance, ciscoCSAMIBObjects=ciscoCSAMIBObjects, csaOutOctets=csaOutOctets, csaStatsEntry=csaStatsEntry)
