#
# PySNMP MIB module Fore-frf8-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-frf8-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
atmSwitch, frameInternetworking, AtmAddress = mibBuilder.importSymbols("Fore-Common-MIB", "atmSwitch", "frameInternetworking", "AtmAddress")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, IpAddress, Integer32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "IpAddress", "Integer32", "iso", "Bits")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
foreFrf8Module = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 16, 2))
if mibBuilder.loadTexts: foreFrf8Module.setLastUpdated('9705011044-0400')
if mibBuilder.loadTexts: foreFrf8Module.setOrganization('FORE')
if mibBuilder.loadTexts: foreFrf8Module.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreFrf8Module.setDescription('This MIB module defines FR/ATM interworking tables. It gives means to create/remove a FR/ATM interworking connection and provides several statistics at connection level.')
frf8ConnTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1), )
if mibBuilder.loadTexts: frf8ConnTable.setStatus('current')
if mibBuilder.loadTexts: frf8ConnTable.setDescription('Table of cross connections between the frame relay and ATM Fabric connections')
frf8ConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1), ).setIndexNames((0, "Fore-frf8-MIB", "frf8ConnFrServiceIfIndex"), (0, "Fore-frf8-MIB", "frf8ConnDlci"))
if mibBuilder.loadTexts: frf8ConnEntry.setStatus('current')
if mibBuilder.loadTexts: frf8ConnEntry.setDescription('Entry in the frame relay/atm netmod crossconnect table')
frf8ConnFrServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnFrServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: frf8ConnFrServiceIfIndex.setDescription('Interface index of the Frame Relay service this connection exists on')
frf8ConnDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnDlci.setStatus('current')
if mibBuilder.loadTexts: frf8ConnDlci.setDescription('DLCI of this connection on the frame relay service')
frf8ConnFabServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnFabServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: frf8ConnFabServiceIfIndex.setDescription('This is the IfIndex associated with the fabric pseudo atm service this connection is mapped to by the agent when this Frame Relay connection is created. This IfIndex can be converted to a BNP notation value through the ifIndexMapTable of the fore-switch MIB. That BNP value can be used to establish a connection accross the switching fabric by means of the FORE-switch MIB')
frf8ConnFabVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnFabVpi.setStatus('current')
if mibBuilder.loadTexts: frf8ConnFabVpi.setDescription('This is the fabric VPI(equivalent to ivpi) of the ATM connection this frame relay/ATM connection is mapped to by the agent when this row is created. This VPI will be used to establish a connection accross the switching fabric by means of the FORE-switch MIB')
frf8ConnFabVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnFabVci.setStatus('current')
if mibBuilder.loadTexts: frf8ConnFabVci.setDescription('This is the fabric VCI (equivalent to ivci)of the ATM connection this frame relay connection is mapped to by the agent when this row is created. This VCI will be used to establish a connection accross the switching fabric by means of the FORE-switch MIB')
frf8ConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: frf8ConnRowStatus.setDescription('This object is used for dynamic creation of entries in this table and all frame relay connection level tables. This object is also used to delete existing connection rows.')
frf8ConnProfileFrf8Index = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnProfileFrf8Index.setStatus('current')
if mibBuilder.loadTexts: frf8ConnProfileFrf8Index.setDescription('the profileFrf8Index, in the fore-profile.mib ')
frf8ConnProfileEpdPpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnProfileEpdPpdIndex.setStatus('current')
if mibBuilder.loadTexts: frf8ConnProfileEpdPpdIndex.setDescription('The index of the EpdPpd Controller profile which contains: 1 ) Enable/disable the EPD for CLP=0 cells for a specific connection; 2 ) Enable/disable the EPD for CLP=1 cells for a specific connection; 3 ) Enable/disable the PPD for CLP=1 cells for a specific connection. ')
frf8ConnAtmAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("e164", 2), ("nsap", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnAtmAddrType.setStatus('current')
if mibBuilder.loadTexts: frf8ConnAtmAddrType.setDescription('Defines the address format of the ATM Service User end point')
frf8ConnAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 10), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnAtmAddress.setStatus('current')
if mibBuilder.loadTexts: frf8ConnAtmAddress.setDescription('The destination ATM address to which this Virtual Circuit is connected.')
frf8ConnAtmSubAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("e164", 2), ("nsap", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnAtmSubAddrType.setStatus('current')
if mibBuilder.loadTexts: frf8ConnAtmSubAddrType.setDescription('Defines the sub-address format of the ATM Service User end point ')
frf8ConnAtmSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 12), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnAtmSubAddress.setStatus('current')
if mibBuilder.loadTexts: frf8ConnAtmSubAddress.setDescription('The destination ATM subaddress to which this Virtual Circuit is connected.')
frf8ConnFrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("null", 1), ("e164", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnFrAddrType.setStatus('current')
if mibBuilder.loadTexts: frf8ConnFrAddrType.setDescription('Defines the frame relay address format of the Frame Relay Service User end point')
frf8ConnFrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 14), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnFrAddress.setStatus('current')
if mibBuilder.loadTexts: frf8ConnFrAddress.setDescription('The address to which the Frame Relay DLCI is connected.')
frf8ConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frf8ConnAdminStatus.setStatus('current')
if mibBuilder.loadTexts: frf8ConnAdminStatus.setDescription('Indicates whether the particular virtual circuit is operational. ')
frf8ConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnOperStatus.setStatus('current')
if mibBuilder.loadTexts: frf8ConnOperStatus.setDescription(' The current operational status of the interworking connection')
frf8ConnCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnCreationTime.setStatus('current')
if mibBuilder.loadTexts: frf8ConnCreationTime.setDescription('The value of sysUpTime when the virtual circuit was created')
frf8ConnTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnTimeChange.setStatus('current')
if mibBuilder.loadTexts: frf8ConnTimeChange.setDescription('The value of sysUpTime (MIB II) when last there was a change in the virtual circuit state ')
frf8ConnPVCAlarmReason = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nodefect", 1), ("frAlarmed", 2), ("frClear", 3), ("aisAlarmed", 4), ("aisClear", 5), ("rdiAlarmed", 6), ("rdiClear", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnPVCAlarmReason.setStatus('current')
if mibBuilder.loadTexts: frf8ConnPVCAlarmReason.setDescription('Defines the reason why the PVC entered/exited the alarmed condition.Defines if the SAC (service affect Condition) is caused/cleared by the Frame Relay network(frAlarmed/frClear), or by the ATM network (aisAlarmed/aisClear,rdiAlarmed/aisClear). The nodefect means no current SAC in either network. This object will be part of the frf8PVCAlarmTRAP.')
frf8ConnAtmToFrPDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnAtmToFrPDUDiscards.setStatus('current')
if mibBuilder.loadTexts: frf8ConnAtmToFrPDUDiscards.setDescription("The number of PDU's coming from the ATM network to the FR network that are discarded by the interworking function")
frf8ConnFrToAtmPDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnFrToAtmPDUDiscards.setStatus('current')
if mibBuilder.loadTexts: frf8ConnFrToAtmPDUDiscards.setDescription("The number of PDU's coming from the FR network to the ATM network that are discarded by the interworking function ")
frf8ConnAtmToFrUnkProts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnAtmToFrUnkProts.setStatus('current')
if mibBuilder.loadTexts: frf8ConnAtmToFrUnkProts.setDescription("The number of PDU's received with an unknown protocol type by the interworking function from the ATM network")
frf8ConnFrToAtmUnkProts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnFrToAtmUnkProts.setStatus('current')
if mibBuilder.loadTexts: frf8ConnFrToAtmUnkProts.setDescription("The number of PDU's received with an unknown protocol type by the interworking function from the Frame Relay network")
frf8ConnAtmToFrArpNakDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ConnAtmToFrArpNakDiscards.setStatus('current')
if mibBuilder.loadTexts: frf8ConnAtmToFrArpNakDiscards.setDescription("The number of AAL-5 ARP NAK PDU's that are discarded by the interworking function on this ATM VCC.If the iwf, interworking function receives an ATM ARP with opcode 10 (NAK), the ARP packet is discarde, since FR ARP does not support that opcode. ")
frf8ProtTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2), )
if mibBuilder.loadTexts: frf8ProtTable.setReference('Frame Relay Forum Implementation Agreement 8.')
if mibBuilder.loadTexts: frf8ProtTable.setStatus('current')
if mibBuilder.loadTexts: frf8ProtTable.setDescription('The Objects associated with the protocols registered on a specific Virtual Circuit.')
frf8ProtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2, 1), ).setIndexNames((0, "Fore-frf8-MIB", "frf8ProtServiceIfIndex"), (0, "Fore-frf8-MIB", "frf8ProtDlci"), (0, "Fore-frf8-MIB", "frf8ProtProtocol"))
if mibBuilder.loadTexts: frf8ProtEntry.setStatus('current')
if mibBuilder.loadTexts: frf8ProtEntry.setDescription('The statistics entry for the Protocol Table.')
frf8ProtServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ProtServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: frf8ProtServiceIfIndex.setDescription('Interface index of the Frame Relay service this connection exists on. ')
frf8ProtDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ProtDlci.setStatus('current')
if mibBuilder.loadTexts: frf8ProtDlci.setDescription('DLCI of this connection on the frame relay service.')
frf8ProtProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("prot8023withfcs", 1), ("prot8023", 2), ("prot8025withfcs", 3), ("prot8025", 4), ("ip", 5), ("arp", 6), ("ipx", 7), ("sna", 8), ("fddi", 9), ("fddiwithfcs", 10), ("x25x75", 11), ("prot8026", 12), ("routediso", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ProtProtocol.setStatus('current')
if mibBuilder.loadTexts: frf8ProtProtocol.setDescription('The protocol(s) registered over this Virtual Circuit.')
frf8ProtAtmToFrPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ProtAtmToFrPdus.setStatus('current')
if mibBuilder.loadTexts: frf8ProtAtmToFrPdus.setDescription("The number of AAL-5 PDU's received by FRF.8 of this protocol type from ATM to FR network direction.")
frf8ProtAtmToFrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ProtAtmToFrOctets.setStatus('current')
if mibBuilder.loadTexts: frf8ProtAtmToFrOctets.setDescription('The number of AAL-5 octets received by FRF.8 of this protocol type from ATM to FR network direction.')
frf8ProtFrToAtmPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ProtFrToAtmPdus.setStatus('current')
if mibBuilder.loadTexts: frf8ProtFrToAtmPdus.setDescription("The number of AAL-5 PDU's transmitted by FRF.8 of this protocol type from FR to ATM network direction.")
frf8ProtFrToAtmOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8ProtFrToAtmOctets.setStatus('current')
if mibBuilder.loadTexts: frf8ProtFrToAtmOctets.setDescription('The number of AAL-5 octets transmitted by FRF.8 of this protocol type from FR to ATM network direction.')
frf8OamF5Table = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 3), )
if mibBuilder.loadTexts: frf8OamF5Table.setStatus('current')
if mibBuilder.loadTexts: frf8OamF5Table.setDescription('The OAM statistics table on a VCC basis')
frf8OamF5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 3, 1), ).setIndexNames((0, "Fore-frf8-MIB", "frf8OamF5ServiceIfIndex"), (0, "Fore-frf8-MIB", "frf8OamF5VcDlci"))
if mibBuilder.loadTexts: frf8OamF5Entry.setStatus('current')
if mibBuilder.loadTexts: frf8OamF5Entry.setDescription('An Entry in the OAM F5 statistics table on a VCC basis')
frf8OamF5ServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8OamF5ServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: frf8OamF5ServiceIfIndex.setDescription('Interface index of the Frame Relay service this connection exists on. ')
frf8OamF5VcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8OamF5VcDlci.setStatus('current')
if mibBuilder.loadTexts: frf8OamF5VcDlci.setDescription('DLCI of this connection on the frame relay service.')
frf8OamF5AISRxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8OamF5AISRxCounter.setStatus('current')
if mibBuilder.loadTexts: frf8OamF5AISRxCounter.setDescription('Number of VC-AIS cells received since the PVC was brought into service.')
frf8OamF5AISTxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8OamF5AISTxCounter.setStatus('current')
if mibBuilder.loadTexts: frf8OamF5AISTxCounter.setDescription('Number of VC-AIS cells transmited since the PVC was brought into service.')
frf8OamF5RDIRxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8OamF5RDIRxCounter.setStatus('current')
if mibBuilder.loadTexts: frf8OamF5RDIRxCounter.setDescription('Number of VC-RDI cells received since the PVC was brought into service.')
frf8OamF5RDITxCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frf8OamF5RDITxCounter.setStatus('current')
if mibBuilder.loadTexts: frf8OamF5RDITxCounter.setDescription('Number of VC-RDI cells transmited since the PVC was brought into service.')
frf8PVCStatus = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2000)).setObjects(("Fore-frf8-MIB", "frf8ConnFrServiceIfIndex"), ("Fore-frf8-MIB", "frf8ConnDlci"), ("Fore-frf8-MIB", "frf8ConnOperStatus"), ("Fore-frf8-MIB", "frf8ConnPVCAlarmReason"))
if mibBuilder.loadTexts: frf8PVCStatus.setStatus('current')
if mibBuilder.loadTexts: frf8PVCStatus.setDescription("This trap indicates when an interworking PVC has experienced an alarmed condition, either on the ATM network side or Frame Relay side. Also it is generated when the PVC alarmed condition is cleared. It carries the opera tional status of the PVC by the frf8ConnOperStatus as well as the reason why exiting,entering or changing the alarmed state frf8ConnPVCAlarmReason. If the interworking PVC changes its status by a AdminStatus command (active/inactive/testing), causing the frf8ConnOperStatus to change (up/down), this trap will be generated with frf8ConnPVCAlarmReason set to 'nodefect'. This TRAP will give the support to manage defects that might occur in either Frame Relay network or ATM network, even if the PVC Operational Status is already down.")
mibBuilder.exportSymbols("Fore-frf8-MIB", frf8ConnDlci=frf8ConnDlci, frf8ConnRowStatus=frf8ConnRowStatus, frf8ConnFrToAtmPDUDiscards=frf8ConnFrToAtmPDUDiscards, frf8ProtFrToAtmOctets=frf8ProtFrToAtmOctets, foreFrf8Module=foreFrf8Module, frf8ProtEntry=frf8ProtEntry, frf8ConnFrAddress=frf8ConnFrAddress, frf8ProtServiceIfIndex=frf8ProtServiceIfIndex, frf8ConnFrAddrType=frf8ConnFrAddrType, frf8ConnAdminStatus=frf8ConnAdminStatus, frf8ConnProfileEpdPpdIndex=frf8ConnProfileEpdPpdIndex, frf8ProtProtocol=frf8ProtProtocol, frf8ProtAtmToFrPdus=frf8ProtAtmToFrPdus, frf8OamF5VcDlci=frf8OamF5VcDlci, frf8OamF5ServiceIfIndex=frf8OamF5ServiceIfIndex, frf8OamF5Entry=frf8OamF5Entry, frf8ProtFrToAtmPdus=frf8ProtFrToAtmPdus, frf8ConnAtmAddrType=frf8ConnAtmAddrType, frf8ConnAtmToFrArpNakDiscards=frf8ConnAtmToFrArpNakDiscards, frf8ConnAtmToFrPDUDiscards=frf8ConnAtmToFrPDUDiscards, frf8ConnCreationTime=frf8ConnCreationTime, PYSNMP_MODULE_ID=foreFrf8Module, frf8ConnFabServiceIfIndex=frf8ConnFabServiceIfIndex, frf8OamF5AISTxCounter=frf8OamF5AISTxCounter, frf8ConnTable=frf8ConnTable, frf8ProtTable=frf8ProtTable, frf8ConnFrServiceIfIndex=frf8ConnFrServiceIfIndex, frf8ConnProfileFrf8Index=frf8ConnProfileFrf8Index, frf8ConnFabVci=frf8ConnFabVci, frf8ConnFrToAtmUnkProts=frf8ConnFrToAtmUnkProts, frf8ConnFabVpi=frf8ConnFabVpi, frf8OamF5Table=frf8OamF5Table, frf8OamF5RDIRxCounter=frf8OamF5RDIRxCounter, frf8ProtDlci=frf8ProtDlci, frf8ProtAtmToFrOctets=frf8ProtAtmToFrOctets, frf8ConnAtmToFrUnkProts=frf8ConnAtmToFrUnkProts, frf8OamF5AISRxCounter=frf8OamF5AISRxCounter, frf8ConnAtmAddress=frf8ConnAtmAddress, frf8ConnAtmSubAddress=frf8ConnAtmSubAddress, frf8ConnPVCAlarmReason=frf8ConnPVCAlarmReason, frf8ConnAtmSubAddrType=frf8ConnAtmSubAddrType, frf8ConnTimeChange=frf8ConnTimeChange, frf8PVCStatus=frf8PVCStatus, frf8ConnEntry=frf8ConnEntry, frf8ConnOperStatus=frf8ConnOperStatus, frf8OamF5RDITxCounter=frf8OamF5RDITxCounter)
