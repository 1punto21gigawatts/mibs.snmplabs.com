#
# PySNMP MIB module PPP-LCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PPP-LCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, Counter64, ModuleIdentity, IpAddress, TimeTicks, NotificationType, Counter32, ObjectIdentity, transmission, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Counter64", "ModuleIdentity", "IpAddress", "TimeTicks", "NotificationType", "Counter32", "ObjectIdentity", "transmission", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ppp = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23))
pppLcp = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1))
pppLink = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 1))
pppLqr = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 2))
pppTests = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 3))
pppLinkStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1), )
if mibBuilder.loadTexts: pppLinkStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusTable.setDescription('A table containing PPP-link specific variables for this PPP implementation.')
pppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppLinkStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusEntry.setDescription('Management information about a particular PPP Link.')
pppLinkStatusPhysicalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusPhysicalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusPhysicalIndex.setDescription("The value of ifIndex that identifies the lower-level interface over which this PPP Link is operating. This interface would usually be an HDLC or RS-232 type of interface. If there is no lower-layer interface element, or there is no ifEntry for the element, or the element can not be identified, then the value of this object is 0. For example, suppose that PPP is operating over a serial port. This would use two entries in the ifTable. The PPP could be running over `interface' number 123 and the serial port could be running over `interface' number 987. Therefore, ifSpecific.123 would contain the OBJECT IDENTIFIER ppp pppLinkStatusPhysicalIndex.123 would contain 987, and ifSpecific.987 would contain the OBJECT IDENTIFIER for the serial-port's media- specific MIB.")
pppLinkStatusBadAddresses = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusBadAddresses.setReference('Section 3.1, Address Field, of RFC1331.')
if mibBuilder.loadTexts: pppLinkStatusBadAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusBadAddresses.setDescription('The number of packets received with an incorrect Address Field. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
pppLinkStatusBadControls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusBadControls.setReference('Section 3.1, Control Field, of RFC1331.')
if mibBuilder.loadTexts: pppLinkStatusBadControls.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusBadControls.setDescription('The number of packets received on this link with an incorrect Control Field. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
pppLinkStatusPacketTooLongs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusPacketTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusPacketTooLongs.setDescription('The number of received packets that have been discarded because their length exceeded the MRU. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link. NOTE, packets which are longer than the MRU but which are successfully received and processed are NOT included in this count.')
pppLinkStatusBadFCSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusBadFCSs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusBadFCSs.setDescription('The number of received packets that have been discarded due to having an incorrect FCS. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
pppLinkStatusLocalMRU = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusLocalMRU.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusLocalMRU.setDescription('The current value of the MRU for the local PPP Entity. This value is the MRU that the remote entity is using when sending packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusRemoteMRU = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusRemoteMRU.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusRemoteMRU.setDescription('The current value of the MRU for the remote PPP Entity. This value is the MRU that the local entity is using when sending packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusLocalToPeerACCMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusLocalToPeerACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusLocalToPeerACCMap.setDescription('The current value of the ACC Map used for sending packets from the local PPP entity to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusPeerToLocalACCMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusPeerToLocalACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusPeerToLocalACCMap.setDescription('The ACC Map used by the remote PPP entity when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusLocalToRemoteProtocolCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusLocalToRemoteProtocolCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusLocalToRemoteProtocolCompression.setDescription('Indicates whether the local PPP entity will use Protocol Compression when transmitting packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusRemoteToLocalProtocolCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusRemoteToLocalProtocolCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusRemoteToLocalProtocolCompression.setDescription('Indicates whether the remote PPP entity will use Protocol Compression when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusLocalToRemoteACCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusLocalToRemoteACCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusLocalToRemoteACCompression.setDescription('Indicates whether the local PPP entity will use Address and Control Compression when transmitting packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusRemoteToLocalACCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusRemoteToLocalACCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusRemoteToLocalACCompression.setDescription('Indicates whether the remote PPP entity will use Address and Control Compression when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusTransmitFcsSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusTransmitFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusTransmitFcsSize.setDescription('The size of the Frame Check Sequence (FCS) in bits that the local node will generate when sending packets to the remote node. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusReceiveFcsSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusReceiveFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusReceiveFcsSize.setDescription('The size of the Frame Check Sequence (FCS) in bits that the remote node will generate when sending packets to the local node. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2), )
if mibBuilder.loadTexts: pppLinkConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigTable.setDescription('A table containing the LCP configuration parameters for this PPP Link. These variables represent the initial configuration of the PPP Link. The actual values of the parameters may be changed when the link is brought up via the LCP options negotiation mechanism.')
pppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppLinkConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigEntry.setDescription('Configuration information about a particular PPP Link.')
pppLinkConfigInitialMRU = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLinkConfigInitialMRU.setReference('Section 7.2, Maximum Receive Unit of RFC1331.')
if mibBuilder.loadTexts: pppLinkConfigInitialMRU.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigInitialMRU.setDescription('The initial Maximum Receive Unit (MRU) that the local PPP entity will advertise to the remote entity. If the value of this variable is 0 then the local PPP entity will not advertise any MRU to the remote entity and the default MRU will be assumed. Changing this object will have effect when the link is next restarted.')
pppLinkConfigReceiveACCMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLinkConfigReceiveACCMap.setReference('Section 7.3, page 4, Async-Control-Character- Map of RFC1331.')
if mibBuilder.loadTexts: pppLinkConfigReceiveACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigReceiveACCMap.setDescription("The Asynchronous-Control-Character-Map (ACC) that the local PPP entity requires for use on its receive side. In effect, this is the ACC Map that is required in order to ensure that the local modem will successfully receive all characters. The actual ACC map used on the receive side of the link will be a combination of the local node's pppLinkConfigReceiveACCMap and the remote node's pppLinkConfigTransmitACCMap. Changing this object will have effect when the link is next restarted.")
pppLinkConfigTransmitACCMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLinkConfigTransmitACCMap.setReference('Section 7.3, page 4, Async-Control-Character- Map of RFC1331.')
if mibBuilder.loadTexts: pppLinkConfigTransmitACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigTransmitACCMap.setDescription("The Asynchronous-Control-Character-Map (ACC) that the local PPP entity requires for use on its transmit side. In effect, this is the ACC Map that is required in order to ensure that all characters can be successfully transmitted through the local modem. The actual ACC map used on the transmit side of the link will be a combination of the local node's pppLinkConfigTransmitACCMap and the remote node's pppLinkConfigReceiveACCMap. Changing this object will have effect when the link is next restarted.")
pppLinkConfigMagicNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLinkConfigMagicNumber.setReference('Section 7.6, Magic Number, of RFC1331.')
if mibBuilder.loadTexts: pppLinkConfigMagicNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigMagicNumber.setDescription('If true(2) then the local node will attempt to perform Magic Number negotiation with the remote node. If false(1) then this negotiation is not performed. In any event, the local node will comply with any magic number negotiations attempted by the remote node, per the PPP specification. Changing this object will have effect when the link is next restarted.')
pppLinkConfigFcsSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLinkConfigFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigFcsSize.setDescription('The size of the FCS, in bits, the local node will attempt to negotiate for use with the remote node. Regardless of the value of this object, the local node will comply with any FCS size negotiations initiated by the remote node, per the PPP specification. Changing this object will have effect when the link is next restarted.')
pppLqrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1), )
if mibBuilder.loadTexts: pppLqrTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrTable.setDescription('Table containing the LQR parameters and statistics for the local PPP entity.')
pppLqrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppLqrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrEntry.setDescription('LQR information for a particular PPP link. A PPP link will have an entry in this table if and only if LQR Quality Monitoring has been successfully negotiated for said link.')
pppLqrQuality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("bad", 2), ("not-determined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqrQuality.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrQuality.setDescription("The current quality of the link as declared by the local PPP entity's Link-Quality Management modules. No effort is made to define good or bad, nor the policy used to determine it. The not-determined value indicates that the entity does not actually evaluate the link's quality. This value is used to disambiguate the `determined to be good' case from the `no determination made and presumed to be good' case.")
pppLqrInGoodOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqrInGoodOctets.setReference('Section 2.2, Counters, of RFC1333.')
if mibBuilder.loadTexts: pppLqrInGoodOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrInGoodOctets.setDescription('The LQR InGoodOctets counter for this link.')
pppLqrLocalPeriod = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqrLocalPeriod.setReference('Section 2.5, Configuration Option Format, of RFC1333.')
if mibBuilder.loadTexts: pppLqrLocalPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrLocalPeriod.setDescription('The LQR reporting period, in hundredths of a second that is in effect for the local PPP entity.')
pppLqrRemotePeriod = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqrRemotePeriod.setReference('Section 2.5, Configuration Option Format, of RFC1333.')
if mibBuilder.loadTexts: pppLqrRemotePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrRemotePeriod.setDescription('The LQR reporting period, in hundredths of a second, that is in effect for the remote PPP entity.')
pppLqrOutLQRs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqrOutLQRs.setReference('Section 2.2, Counters, of RFC1333.')
if mibBuilder.loadTexts: pppLqrOutLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrOutLQRs.setDescription('The value of the OutLQRs counter on the local node for the link identified by ifIndex.')
pppLqrInLQRs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqrInLQRs.setReference('Section 2.2, Counters, of RFC1333.')
if mibBuilder.loadTexts: pppLqrInLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrInLQRs.setDescription('The value of the InLQRs counter on the local node for the link identified by ifIndex.')
pppLqrConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 2), )
if mibBuilder.loadTexts: pppLqrConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrConfigTable.setDescription('Table containing the LQR Configuration parameters for the local PPP entity.')
pppLqrConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppLqrConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrConfigEntry.setDescription('LQR configuration information for a particular PPP link.')
pppLqrConfigPeriod = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLqrConfigPeriod.setReference('Section 2.5, Configuration Option Format, of RFC1333.')
if mibBuilder.loadTexts: pppLqrConfigPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrConfigPeriod.setDescription('The LQR Reporting Period that the local PPP entity will attempt to negotiate with the remote entity, in units of hundredths of a second. Changing this object will have effect when the link is next restarted.')
pppLqrConfigStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLqrConfigStatus.setReference('Section 7.6, Magic Number, of RFC1331.')
if mibBuilder.loadTexts: pppLqrConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrConfigStatus.setDescription('If enabled(2) then the local node will attempt to perform LQR negotiation with the remote node. If disabled(1) then this negotiation is not performed. In any event, the local node will comply with any magic number negotiations attempted by the remote node, per the PPP specification. Changing this object will have effect when the link is next restarted. Setting this object to the value disabled(1) has the effect of invalidating the corresponding entry in the pppLqrConfigTable object. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use.')
pppLqrExtnsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 3), )
if mibBuilder.loadTexts: pppLqrExtnsTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrExtnsTable.setDescription('Table containing additional LQR information for the local PPP entity.')
pppLqrExtnsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pppLqrExtnsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrExtnsEntry.setDescription('Extended LQR information for a particular PPP link. Assuming that this group has been implemented, a PPP link will have an entry in this table if and only if LQR Quality Monitoring has been successfully negotiated for said link.')
pppLqrExtnsLastReceivedLqrPacket = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(68, 68)).setFixedLength(68)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqrExtnsLastReceivedLqrPacket.setReference('Section 2.6, Packet Format, of RFC1333')
if mibBuilder.loadTexts: pppLqrExtnsLastReceivedLqrPacket.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqrExtnsLastReceivedLqrPacket.setDescription("This object contains the most recently received LQR packet. The format of the packet is as described in the LQM Protocol specificiation. All fields of the packet, including the `save' fields, are stored in this object. The LQR packet is stored in network byte order. The LAP-B and PPP headers are not stored in this object; the first four octets of this variable contain the Magic-Number field, the second four octets contain the LastOutLQRs field and so on. The last four octets of this object contain the SaveInOctets field of the LQR packet.")
pppEchoTest = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 3, 1))
pppDiscardTest = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 3, 2))
mibBuilder.exportSymbols("PPP-LCP-MIB", pppLqrEntry=pppLqrEntry, pppLqrTable=pppLqrTable, pppLinkStatusTransmitFcsSize=pppLinkStatusTransmitFcsSize, pppLinkStatusPacketTooLongs=pppLinkStatusPacketTooLongs, pppLinkStatusLocalMRU=pppLinkStatusLocalMRU, pppLqr=pppLqr, pppLinkStatusBadControls=pppLinkStatusBadControls, pppLqrConfigStatus=pppLqrConfigStatus, pppLinkStatusTable=pppLinkStatusTable, pppLqrInLQRs=pppLqrInLQRs, pppLinkStatusLocalToRemoteACCompression=pppLinkStatusLocalToRemoteACCompression, pppLinkStatusRemoteToLocalProtocolCompression=pppLinkStatusRemoteToLocalProtocolCompression, pppLinkConfigEntry=pppLinkConfigEntry, pppLinkStatusBadFCSs=pppLinkStatusBadFCSs, pppDiscardTest=pppDiscardTest, pppTests=pppTests, pppLink=pppLink, pppLqrExtnsLastReceivedLqrPacket=pppLqrExtnsLastReceivedLqrPacket, pppEchoTest=pppEchoTest, pppLqrInGoodOctets=pppLqrInGoodOctets, pppLqrExtnsEntry=pppLqrExtnsEntry, pppLinkConfigInitialMRU=pppLinkConfigInitialMRU, pppLqrQuality=pppLqrQuality, pppLinkStatusBadAddresses=pppLinkStatusBadAddresses, pppLinkConfigTransmitACCMap=pppLinkConfigTransmitACCMap, pppLinkStatusReceiveFcsSize=pppLinkStatusReceiveFcsSize, pppLinkConfigTable=pppLinkConfigTable, pppLqrOutLQRs=pppLqrOutLQRs, pppLinkStatusRemoteMRU=pppLinkStatusRemoteMRU, pppLinkStatusLocalToRemoteProtocolCompression=pppLinkStatusLocalToRemoteProtocolCompression, pppLinkConfigMagicNumber=pppLinkConfigMagicNumber, pppLqrConfigPeriod=pppLqrConfigPeriod, pppLqrExtnsTable=pppLqrExtnsTable, pppLinkStatusPeerToLocalACCMap=pppLinkStatusPeerToLocalACCMap, pppLinkStatusEntry=pppLinkStatusEntry, pppLinkConfigFcsSize=pppLinkConfigFcsSize, pppLinkStatusLocalToPeerACCMap=pppLinkStatusLocalToPeerACCMap, pppLcp=pppLcp, pppLqrRemotePeriod=pppLqrRemotePeriod, pppLqrConfigTable=pppLqrConfigTable, pppLqrLocalPeriod=pppLqrLocalPeriod, pppLinkStatusPhysicalIndex=pppLinkStatusPhysicalIndex, pppLqrConfigEntry=pppLqrConfigEntry, pppLinkStatusRemoteToLocalACCompression=pppLinkStatusRemoteToLocalACCompression, pppLinkConfigReceiveACCMap=pppLinkConfigReceiveACCMap, ppp=ppp)
