#
# PySNMP MIB module HP-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-STACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
hpSwitchBaseMACAddress, = mibBuilder.importSymbols("NETSWITCH-MIB", "hpSwitchBaseMACAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Counter32, ModuleIdentity, Integer32, Gauge32, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Counter64, iso, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "ModuleIdentity", "Integer32", "Gauge32", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Counter64", "iso", "NotificationType", "TimeTicks")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
hpStackMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69))
hpStackMIB.setRevisions(('2010-01-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpStackMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: hpStackMIB.setLastUpdated('201001030000Z')
if mibBuilder.loadTexts: hpStackMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpStackMIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpStackMIB.setDescription('This MIB module describes objects for managing the stacking features.')
hpStackNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0))
hpStackObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1))
hpStackConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2))
hpStackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1))
hpStackId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackId.setStatus('current')
if mibBuilder.loadTexts: hpStackId.setDescription("The stack ID uniquely identifies the stack; all members of the stack have the same stack ID. A switch is considered to be a part of a stack When it has the same stack ID as the stack commander. The stack ID is valid only when hpStackSwitchAdminStatus is true (1). This value is set by the first elected commander and stays with the stack until the user sets the hpStackSwitchAdminStatus to 'false (2)' or when hpStackSetStacking is set to 'true (1)' in an inactive fragment.")
hpStackOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unAvailable", 0), ("disabled", 1), ("active", 2), ("fragmentInactive", 3), ("fragmentActive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpStackOperStatus.setDescription('This is the current operational status of the stack. ')
hpStackSetStacking = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSetStacking.setStatus('current')
if mibBuilder.loadTexts: hpStackSetStacking.setDescription("This variable allows configuration of a stack fragment created by a stack split. When set to 'true (1)' in the greater fragment, the physically present members of the current stack become the only members, and the configuration of the missing members is converted to strict provisioned configuration. When set to 'true (1)' on a lesser fragment, the existing stack information is cleared and a new stack ID is created. The switches in the stack will become 'active' and retain their configuration. No action is taken when set to 'false (2)' in any stack.")
hpStackTopology = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unKnown", 0), ("chain", 1), ("ring", 2), ("mesh", 3), ("partialMesh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackTopology.setStatus('current')
if mibBuilder.loadTexts: hpStackTopology.setDescription(' This describes the physical topology of the current stack.')
hpStackTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpStackTrapEnable.setDescription(' This enables or disables the hpStack traps.')
hpStackSplitPolicy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneFragmentUp", 1), ("allFragmentsUp", 2))).clone('oneFragmentUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSplitPolicy.setStatus('current')
if mibBuilder.loadTexts: hpStackSplitPolicy.setDescription('This is to set the split policy for the current stack. When there is a stack split, setting hpStackSplitPolicy to OneFragmentUp results in only one active fragment and the rest of the fragments remains inactive. Setting hpStackSplitPolicy to AllFragmentsUp results in all the fragments to be active.')
hpStackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2), )
if mibBuilder.loadTexts: hpStackConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpStackConfigTable.setDescription('Table to configure basic stacking feature.')
hpStackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1), ).setIndexNames((0, "HP-STACK-MIB", "hpStackSequenceNum"))
if mibBuilder.loadTexts: hpStackConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpStackConfigEntry.setDescription('A row in the stack config table.')
hpStackSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hpStackSequenceNum.setStatus('current')
if mibBuilder.loadTexts: hpStackSequenceNum.setDescription('This is the sequence number to this table. At any instance of time only one entry exists.')
hpStackSwitchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSwitchAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpStackSwitchAdminStatus.setDescription("The admin status of the stacking feature. When set to 'enable (1)', this will enable stacking on a standalone switch that had stacking disabled previously. Once stacking is enabled, the switch will not have a stack ID and merges automatically to any stack it is connected to and learns the stack ID of that stack. It has no effect on a switch where stacking is already enabled. An error will be returned when attempting to set the value to 'enable(1)' on a switch that has secure-mode set to enhanced. Setting this to 'disable (2)' will disable stacking on a standalone switch. Once stacking is disabled, the stack ports will be kept down. This will prevent the switch from ever joining or creating a stack. This is allowed only on a standalone switch, that is, a switch that is not connected over a stacking link to any other switch. It has no effect on a switch where stacking is already disabled. Enabling or disabling stacking will trigger a reboot of the switch. When hpStackSwitchAdminStatus is set to 'true (1)', and if the user wants to set the preferred priority and the member ID of the switch, then hpStackSwitchPreferredPriority and hpStackSwitchPreferredMemberId needs to be set along with hpStackSwitchAdminStatus. If the priority and member ID are not specified, then the default values will be used.")
hpStackSwitchPreferredPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSwitchPreferredPriority.setStatus('current')
if mibBuilder.loadTexts: hpStackSwitchPreferredPriority.setDescription(" This allows the user to set the priority of a switch when stacking is enabled on it. hpStackSwitchPreferredPriority needs to be set along with hpStackSwitchAdminStatus being set to 'true (1)'. Note that this is to be used only when enabling stacking. To set the priority of a switch on which stacking is already enabled, use hpStackMemberTable. hpStackSwitchPreferredPriority is unused when hpStackSwitchAdminStatus is false (2).")
hpStackSwitchPreferredMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackSwitchPreferredMemberId.setStatus('current')
if mibBuilder.loadTexts: hpStackSwitchPreferredMemberId.setDescription(" This allows the user to set the preferred member ID of a switch when stacking is enabled on it. hpStackSwitchPreferredMemberId needs to be set along with setting hpStackSwitchAdminStatus being set to 'true (1)'. This entry is useful only at the time of setting hpStackSwitchAdminStatus to 'true (1)'. hpStackSwitchPreferredMemberId is unused when hpStackSwitchAdminStatus is set to false (2).")
hpStackMemberTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3), )
if mibBuilder.loadTexts: hpStackMemberTable.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberTable.setDescription('Table to configure stack members.')
hpStackMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1), ).setIndexNames((0, "HP-STACK-MIB", "hpStackMemberId"))
if mibBuilder.loadTexts: hpStackMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberEntry.setDescription('A row in the stack member table.')
hpStackMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpStackMemberId.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberId.setDescription('This is the member ID of the switch and index to this table. This identifies each member in the stack.')
hpStackMemberProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberProductId.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberProductId.setDescription('This is the product ID [J-number] of the switch. When a member is provisioned, this is a mandatory field. The product must be capable of stacking support.')
hpStackMemberMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberMacAddr.setDescription('The MAC address that identifies the member switch. The configuration of MAC address will not be allowed if another table exists with the same MAC address.')
hpStackMemberShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberShutdown.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberShutdown.setDescription("For the members that physically exist, this will cause the switch to shutdown. If the switch is a standby, a new standby switch will be chosen. To shutdown, it needs to be set to 'true (1)'. A write operation of 'false (2)' leads to no operation. This can be set to 'true (1)' only if the member physically exists and is an active member of the stack. This variable cannot be set to 'true (1)' if the member ID corresponds to a commander. This object will always return 'false (2)'.")
hpStackMemberReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberReboot.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberReboot.setDescription("Setting this variable to 'true (1)' will reboot the switch. A write operation of 'false (2)' leads to no operation. This object will always return 'false (2)' Reboot is allowed only when a member exist physically.")
hpStackMemberAdminPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberAdminPriority.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberAdminPriority.setDescription('This assigns the priority to the member. If the stack is rebooted and the members are assigned with priorities, then commander will be the one with the highest priority and the standby will be the one with the next highest priority. The following rules apply for assigning the priority: 1. In the existing stack, if the priority is increased, the member is likely to become commander only the next time the stack is rebooted, it will not be immediately elected as commander. 2. A switch with the highest priority will not be elected as commander if it is a new member of the stack even when the stack is rebooted as it will not have the latest configurations. 3. If a commander switch with highest priority fails over to standby, it will not become commander again in the subsequent reboot. The stack itself needs to be booted or the failover to this commander should happen. 4. A switch that joins an already active stack will not become the commander even if it has the highest priority. 5. If the priority is assigned to the member when it is in standalone state and when it joins the stack, if the stack configuration has an existing pre-provisioned priority for this member, then the pre-provisioned value preempts the standalone value. To assign priority to a member, the member can either be provisioned or physically present.')
hpStackMemberEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpStackMemberEntryStatus.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberEntryStatus.setDescription("The status of a stack member entry. The member entry is created with the row status value as createAndGo (4) and the hpStackMemberProductId. The createAndWait(5) is not supported by this mib table. To remove the switch from the stack, row status is set to destroy (6). Setting it to 'destory (6)' is not allowed if the member ID corresponds to a commander switch. For the physically existing switch, if hpStackMemberReboot is set to 'true (1)' along with the row status to 'destroy (6), the switch will come up with a blank configuration and will acquire a new hpStackMemberId.")
hpStackMemberEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 8), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberEntPhysicalIndex.setDescription('This gives the index of this member in the entPhysicalTable (rfc2737).')
hpStackMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unusedId", 0), ("missing", 1), ("provision", 2), ("commander", 3), ("standby", 4), ("member", 5), ("shutdown", 6), ("booting", 7), ("communicationFailure", 8), ("incompatibleOs", 9), ("unknownState", 10), ("standbyBooting", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberState.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberState.setDescription("This gives the status of the switch in the stack. unusedId (0) - The member ID does not exist. missing (1) - A member switch in the stack when it becomes Non responsive, it is marked as the missing member. Either the stack link goes down or the stack member crashed. Note that it is possible to remove even the missing member from the stack. In this case, the missing members configuration is removed from the stack config file. provision (2) - A member switch whose config is provisioned and that does not exist physically. commander (3) - One physical switch whose master CPU takes up the role that the active management module in the 8200 switch would take. standby (4) - One physical switch whose master CPU takes up the role that the standby management module in the 8200 switch would take. member (5) - A switch that is part of the stack. shutdown (6) - The switch is in the shutdown state. booting (7) - The switch is in the booting state. communicationFailure (8) - This is an error condition. The switch cannot be reached. incompatibleOs (9) - This is an error condition. The member switch runs with a different OS image. unknownState (10) - The member switch's state cannot be determined. This is an error condition. standbyBooting (11) - The standby switch is currently booting up. When boot is completed, the state will be 'standby (4)'.")
hpStackMemberProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberProductName.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberProductName.setDescription('This gives the product name of the switch.')
hpStackMemberUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberUpTime.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberUpTime.setDescription('This provides the uptime of this specific member. This is different from the stack uptime.')
hpStackMemberSysOid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberSysOid.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberSysOid.setDescription('This provides the sysObjectId of this specific member.')
hpStackMemberIdForTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpStackMemberIdForTrap.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberIdForTrap.setDescription('This is same as hpStackMemberId. This is useful only for the notifications.')
hpStackMemberSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberSerialNum.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberSerialNum.setDescription('This is the serial number of the member switch.')
hpStackMemberCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberCpuUtil.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberCpuUtil.setDescription('This is the percantage of CPU utilization of the member the switch.')
hpStackMemberTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberTotalMemory.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberTotalMemory.setDescription('This is the total memory usage in bytes of the member switch.')
hpStackMemberFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberFreeMemory.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberFreeMemory.setDescription('This is the free memory available, in bytes, on the member switch.')
hpStackMemberBootRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberBootRomVersion.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberBootRomVersion.setDescription('This is the boot ROM version in the member switch.')
hpStackMemberOsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberOsVersion.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberOsVersion.setDescription('This is the switch operating system version on the member switch.')
hpStackMemberBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackMemberBootImage.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberBootImage.setDescription('This is the boot image information of the member.')
hpStackPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5), )
if mibBuilder.loadTexts: hpStackPortTable.setStatus('current')
if mibBuilder.loadTexts: hpStackPortTable.setDescription('Table of info about the stack ports.')
hpStackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1), ).setIndexNames((0, "HP-STACK-MIB", "hpStackMemberId"), (0, "HP-STACK-MIB", "hpStackPortId"), (0, "HP-STACK-MIB", "hpStackPortType"))
if mibBuilder.loadTexts: hpStackPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpStackPortEntry.setDescription('A row in the stack port table.')
hpStackPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpStackPortId.setStatus('current')
if mibBuilder.loadTexts: hpStackPortId.setDescription('This is the stack port ID.')
hpStackPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backPlane", 1), ("frontPlane", 2))))
if mibBuilder.loadTexts: hpStackPortType.setStatus('current')
if mibBuilder.loadTexts: hpStackPortType.setDescription('This is the stack port type.')
hpStackPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("blocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpStackPortOperStatus.setDescription('This gives the stack port state.')
hpStackPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackPortNeighbor.setStatus('current')
if mibBuilder.loadTexts: hpStackPortNeighbor.setDescription("This contains the value of the hpStackMemberId and hpStackPortId of the switch's chassis to which this stack port is connected. If the stack port is not connected, it returns a value of zero.")
hpStackPortCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpStackPortCost.setStatus('current')
if mibBuilder.loadTexts: hpStackPortCost.setDescription('This gives the stack port cost.')
hpStackPortIdForTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpStackPortIdForTrap.setStatus('current')
if mibBuilder.loadTexts: hpStackPortIdForTrap.setDescription('This is same as hpStackPortId. This is useful only for the notifications.')
hpStackPortTypeForTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backPlane", 1), ("frontPlane", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpStackPortTypeForTrap.setStatus('current')
if mibBuilder.loadTexts: hpStackPortTypeForTrap.setDescription('This is same as hpStackPortType. This is useful only for the notifications.')
hpStackPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpStackPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpStackPortAdminStatus.setDescription("Setting this variable to 'enable(1)' is allowed only when hpStackPortOperStatus is in 'disabled(3)' state. A set operation of disable(2) is not allowed. A get operation on this returns 'enabled' only when the hpStackPortOperStatus is up.")
hpStackPortChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 1)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackPortIdForTrap"), ("HP-STACK-MIB", "hpStackPortTypeForTrap"), ("HP-STACK-MIB", "hpStackPortOperStatus"), ("HP-STACK-MIB", "hpStackPortNeighbor"))
if mibBuilder.loadTexts: hpStackPortChange.setStatus('current')
if mibBuilder.loadTexts: hpStackPortChange.setDescription('This notification is generated when the state of a stack port has changed.')
hpStackCommanderChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 2)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberState"))
if mibBuilder.loadTexts: hpStackCommanderChange.setStatus('current')
if mibBuilder.loadTexts: hpStackCommanderChange.setDescription('This notification is generated when a new commander first comes up. The notification is also sent when a failover happens, and the standby becomes commander or when the commander is down.')
hpStackMemberChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 3)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberState"))
if mibBuilder.loadTexts: hpStackMemberChange.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberChange.setDescription('This notification is generated when a new member joins the stack or when it moves from a loose provisioned to strict provisioned.')
hpStackMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 4)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("NETSWITCH-MIB", "hpSwitchBaseMACAddress"), ("HP-STACK-MIB", "hpStackMemberState"))
if mibBuilder.loadTexts: hpStackMemberStatusChange.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberStatusChange.setDescription('This notification is generated when a member becomes active or inactive.')
hpStackMergeFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 5)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberState"), ("HP-STACK-MIB", "hpStackId"))
if mibBuilder.loadTexts: hpStackMergeFailed.setStatus('current')
if mibBuilder.loadTexts: hpStackMergeFailed.setDescription("This notification is generated when a new member attempts to join the stack, but was denied. This could be because of: a. Merge policy of stack prevents the switch from joining b. Merge policy of switch prevents it from joining c. Stacking disabled on switch d. No available member ID's on stack e. Switch is incorrectly provisioned (wrong J-Number, correct MAC). hpStackId here is the other Stack Id.")
hpStackMergeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 0, 6)).setObjects(("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberState"), ("HP-STACK-MIB", "hpStackId"))
if mibBuilder.loadTexts: hpStackMergeSuccess.setStatus('current')
if mibBuilder.loadTexts: hpStackMergeSuccess.setDescription('This notification is generated when a new member attempts to join the stack and have successfully merged. This will be sent by each stack that got merged.')
hpStackCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 1))
hpStackGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2))
hpStackCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 1, 1)).setObjects(("HP-STACK-MIB", "hpStackConfigScalarGroup"), ("HP-STACK-MIB", "hpStackMemberGroup"), ("HP-STACK-MIB", "hpStackPortGroup"), ("HP-STACK-MIB", "hpStackNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackCompliance = hpStackCompliance.setStatus('current')
if mibBuilder.loadTexts: hpStackCompliance.setDescription('The compliance statement for the hpStack mib.')
hpStackConfigScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2, 1)).setObjects(("HP-STACK-MIB", "hpStackId"), ("HP-STACK-MIB", "hpStackOperStatus"), ("HP-STACK-MIB", "hpStackSetStacking"), ("HP-STACK-MIB", "hpStackTopology"), ("HP-STACK-MIB", "hpStackTrapEnable"), ("HP-STACK-MIB", "hpStackSwitchAdminStatus"), ("HP-STACK-MIB", "hpStackSwitchPreferredPriority"), ("HP-STACK-MIB", "hpStackSwitchPreferredMemberId"), ("HP-STACK-MIB", "hpStackSplitPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackConfigScalarGroup = hpStackConfigScalarGroup.setStatus('current')
if mibBuilder.loadTexts: hpStackConfigScalarGroup.setDescription('A collection of objects for the basic stack configuration.')
hpStackMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2, 2)).setObjects(("HP-STACK-MIB", "hpStackMemberProductId"), ("HP-STACK-MIB", "hpStackMemberMacAddr"), ("HP-STACK-MIB", "hpStackMemberShutdown"), ("HP-STACK-MIB", "hpStackMemberReboot"), ("HP-STACK-MIB", "hpStackMemberAdminPriority"), ("HP-STACK-MIB", "hpStackMemberEntryStatus"), ("HP-STACK-MIB", "hpStackMemberEntPhysicalIndex"), ("HP-STACK-MIB", "hpStackMemberState"), ("HP-STACK-MIB", "hpStackMemberProductName"), ("HP-STACK-MIB", "hpStackMemberUpTime"), ("HP-STACK-MIB", "hpStackMemberSysOid"), ("HP-STACK-MIB", "hpStackMemberIdForTrap"), ("HP-STACK-MIB", "hpStackMemberSerialNum"), ("HP-STACK-MIB", "hpStackMemberCpuUtil"), ("HP-STACK-MIB", "hpStackMemberTotalMemory"), ("HP-STACK-MIB", "hpStackMemberFreeMemory"), ("HP-STACK-MIB", "hpStackMemberBootRomVersion"), ("HP-STACK-MIB", "hpStackMemberOsVersion"), ("HP-STACK-MIB", "hpStackMemberBootImage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackMemberGroup = hpStackMemberGroup.setStatus('current')
if mibBuilder.loadTexts: hpStackMemberGroup.setDescription('A collection of objects for the configuring a member switch of the stack.')
hpStackPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2, 3)).setObjects(("HP-STACK-MIB", "hpStackPortOperStatus"), ("HP-STACK-MIB", "hpStackPortNeighbor"), ("HP-STACK-MIB", "hpStackPortCost"), ("HP-STACK-MIB", "hpStackPortIdForTrap"), ("HP-STACK-MIB", "hpStackPortTypeForTrap"), ("HP-STACK-MIB", "hpStackPortAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackPortGroup = hpStackPortGroup.setStatus('current')
if mibBuilder.loadTexts: hpStackPortGroup.setDescription('A collection of objects providing information about the stack ports.')
hpStackNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 69, 2, 2, 4)).setObjects(("HP-STACK-MIB", "hpStackPortChange"), ("HP-STACK-MIB", "hpStackCommanderChange"), ("HP-STACK-MIB", "hpStackMemberChange"), ("HP-STACK-MIB", "hpStackMemberStatusChange"), ("HP-STACK-MIB", "hpStackMergeFailed"), ("HP-STACK-MIB", "hpStackMergeSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStackNotificationsGroup = hpStackNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hpStackNotificationsGroup.setDescription('A collection of objects providing information about the stack ports.')
mibBuilder.exportSymbols("HP-STACK-MIB", hpStackTrapEnable=hpStackTrapEnable, hpStackConfigTable=hpStackConfigTable, hpStackMergeSuccess=hpStackMergeSuccess, hpStackMemberId=hpStackMemberId, hpStackConfig=hpStackConfig, hpStackNotifications=hpStackNotifications, hpStackMemberBootRomVersion=hpStackMemberBootRomVersion, hpStackSplitPolicy=hpStackSplitPolicy, hpStackMemberSysOid=hpStackMemberSysOid, hpStackMemberEntPhysicalIndex=hpStackMemberEntPhysicalIndex, hpStackPortOperStatus=hpStackPortOperStatus, hpStackPortId=hpStackPortId, hpStackMemberCpuUtil=hpStackMemberCpuUtil, hpStackMemberChange=hpStackMemberChange, hpStackPortNeighbor=hpStackPortNeighbor, hpStackMemberGroup=hpStackMemberGroup, hpStackMemberIdForTrap=hpStackMemberIdForTrap, hpStackPortAdminStatus=hpStackPortAdminStatus, hpStackMemberState=hpStackMemberState, hpStackMemberEntry=hpStackMemberEntry, hpStackNotificationsGroup=hpStackNotificationsGroup, hpStackMemberReboot=hpStackMemberReboot, hpStackGroups=hpStackGroups, hpStackTopology=hpStackTopology, hpStackMemberProductName=hpStackMemberProductName, hpStackMemberSerialNum=hpStackMemberSerialNum, hpStackMemberOsVersion=hpStackMemberOsVersion, hpStackMemberUpTime=hpStackMemberUpTime, hpStackMemberStatusChange=hpStackMemberStatusChange, hpStackCompliance=hpStackCompliance, hpStackOperStatus=hpStackOperStatus, hpStackMemberTable=hpStackMemberTable, hpStackMemberTotalMemory=hpStackMemberTotalMemory, hpStackSequenceNum=hpStackSequenceNum, hpStackSwitchPreferredPriority=hpStackSwitchPreferredPriority, hpStackPortTable=hpStackPortTable, hpStackPortIdForTrap=hpStackPortIdForTrap, hpStackMemberEntryStatus=hpStackMemberEntryStatus, hpStackMemberAdminPriority=hpStackMemberAdminPriority, hpStackPortEntry=hpStackPortEntry, hpStackId=hpStackId, hpStackMemberFreeMemory=hpStackMemberFreeMemory, hpStackConfigEntry=hpStackConfigEntry, hpStackPortCost=hpStackPortCost, hpStackMergeFailed=hpStackMergeFailed, PYSNMP_MODULE_ID=hpStackMIB, hpStackMemberMacAddr=hpStackMemberMacAddr, hpStackMIB=hpStackMIB, hpStackConformance=hpStackConformance, hpStackPortTypeForTrap=hpStackPortTypeForTrap, hpStackCommanderChange=hpStackCommanderChange, hpStackMemberProductId=hpStackMemberProductId, hpStackObjects=hpStackObjects, hpStackMemberShutdown=hpStackMemberShutdown, hpStackSwitchAdminStatus=hpStackSwitchAdminStatus, hpStackMemberBootImage=hpStackMemberBootImage, hpStackSetStacking=hpStackSetStacking, hpStackPortType=hpStackPortType, hpStackPortChange=hpStackPortChange, hpStackConfigScalarGroup=hpStackConfigScalarGroup, hpStackCompliances=hpStackCompliances, hpStackPortGroup=hpStackPortGroup, hpStackSwitchPreferredMemberId=hpStackSwitchPreferredMemberId)
