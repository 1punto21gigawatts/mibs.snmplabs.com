#
# PySNMP MIB module BAY-STACK-DHCP-SNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-DHCP-SNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, IpAddress, Integer32, Bits, TimeTicks, Counter32, ModuleIdentity, MibIdentifier, ObjectIdentity, Unsigned32, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Integer32", "Bits", "TimeTicks", "Counter32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Unsigned32", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString, TruthValue, MacAddress, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "MacAddress", "RowStatus", "DateAndTime")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackDhcpSnoopingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 17))
bayStackDhcpSnoopingMib.setRevisions(('2014-03-20 00:00', '2013-10-11 00:00', '2013-07-25 00:00', '2013-07-09 00:00', '2013-04-18 00:00', '2013-03-21 00:00', '2012-05-28 00:00', '2010-11-18 00:00', '2010-10-05 00:00', '2009-09-23 00:00', '2009-04-01 00:00', '2009-03-30 00:00', '2009-03-26 00:00', '2008-10-30 00:00', '2008-06-02 00:00', '2006-06-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackDhcpSnoopingMib.setRevisionsDescriptions(('Ver 16: Changed the MAX-ACCESS of bsDhcpSnoopingBindingVlanId and bsDhcpSnoopingIfIndex to not-accessible.', 'Ver 15: Changed the MAX-ACCESS of bsDhcpSnoopingBindingVlanId and bsDhcpSnoopingIfIndex to read-only.', 'Ver 14: Added bsDhcpSnoopingStaticEntryMACConflict.', 'Ver 13: Modify bsDhcpSnoopingExtSaveUsbTargetUnit value range to (0..10).', 'Ver 12: Added bsDhcpSnoopingExtSaveEntryIfTrustedConflict.', 'Ver 11: Added bsDhcpSnoopingExtSaveSFTPSyncSuccess, bsDhcpSnoopingExtSaveSFTPSyncFailure, bsDhcpSnoopingExtSaveSFTPRestoreSuccess, bsDhcpSnoopingExtSaveSFTPRestoreFailure, bsDhcpSnoopingExtSaveSftpServerAddressType, bsDhcpSnoopingExtSaveSftpServerAddress.', 'Ver 10: Added bsDhcpSnoopingExtSaveEntryInvalidVlan.', 'Ver 9: Added additional notification types.', 'Ver 8: Added support for external save of DHCP bindings.', 'Ver 7: Added bsDhcpOption82MaxLengthExceeded.', 'Ver 6: Fixed bsDhcpSnoopingNotificationMsgType.', 'Ver 5: Added support for static dhcp bindings.', 'Ver 4: Added support for DHCP option 82.', 'Ver 3: Added new notification types.', 'Ver 2: Added bsDhcpSnoopingBindingTimeToExpiry.', 'Ver 1: Initial version.',))
if mibBuilder.loadTexts: bayStackDhcpSnoopingMib.setLastUpdated('201403200000Z')
if mibBuilder.loadTexts: bayStackDhcpSnoopingMib.setOrganization('Nortel Ltd.')
if mibBuilder.loadTexts: bayStackDhcpSnoopingMib.setContactInfo('nortel.com')
if mibBuilder.loadTexts: bayStackDhcpSnoopingMib.setDescription("This MIB module is used for DHCP snooping configuration settings in Nortel's software and products.")
bsDhcpSnoopingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 17, 0))
bsDhcpSnoopingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 17, 1))
bsDhcpSnoopingScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 1))
bsDhcpSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingEnabled.setDescription('This object is used to control whether DHCP snooping is enabled globally. When globally enabled, DHCP snooping is enabled or disabled for each individual VLAN in the bsDhcpSnoopingVlanTable.')
bsDhcpSnoopingOption82Enabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingOption82Enabled.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingOption82Enabled.setDescription('This object is used to control whether DHCP option 82 is enabled globally. When globally enabled, DHCP option 82 is enabled or disabled for each individual VLAN in the bsDhcpSnoopingVlanTable.')
bsDhcpSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 2), )
if mibBuilder.loadTexts: bsDhcpSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingVlanTable.setDescription('This table is used to control DHCP snooping settings per-VLAN.')
bsDhcpSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingVlanId"))
if mibBuilder.loadTexts: bsDhcpSnoopingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingVlanEntry.setDescription('An entry containing objects for controlling DHCP snooping settings for a VLAN.')
bsDhcpSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: bsDhcpSnoopingVlanId.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingVlanId.setDescription('The VLAN ID value of the VLAN.')
bsDhcpSnoopingVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingVlanEnabled.setDescription('This object is used to control whether DHCP snooping is enabled for this VLAN.')
bsDhcpSnoopingVlanOption82Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingVlanOption82Enabled.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingVlanOption82Enabled.setDescription('This object is used to control whether DHCP option 82 is enabled for this VLAN.')
bsDhcpSnoopingIfTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 3), )
if mibBuilder.loadTexts: bsDhcpSnoopingIfTable.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingIfTable.setDescription('This table is used to control DHCP snooping settings per-interface.')
bsDhcpSnoopingIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 3, 1), ).setIndexNames((0, "BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingIfIndex"))
if mibBuilder.loadTexts: bsDhcpSnoopingIfEntry.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingIfEntry.setDescription('An entry containing objects for controlling DHCP snooping settings for an interface.')
bsDhcpSnoopingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsDhcpSnoopingIfIndex.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingIfIndex.setDescription('The ifIndex value of the interface.')
bsDhcpSnoopingIfTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingIfTrusted.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingIfTrusted.setDescription('This object is used to control whether this interface is trusted for DHCP snooping purposes.')
bsDhcpSnoopingIfOption82SubscriberId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingIfOption82SubscriberId.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingIfOption82SubscriberId.setDescription('This object contains the DHCP option 82 subscriber ID string to be used in sub-option 6. If the value is an empty string, then sub-option 6 is not included in option 82.')
bsDhcpSnoopingBindingTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4), )
if mibBuilder.loadTexts: bsDhcpSnoopingBindingTable.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingTable.setDescription('This table contains the DHCP bindings that have been learned.')
bsDhcpSnoopingBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1), ).setIndexNames((0, "BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingBindingVlanId"), (0, "BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingBindingMacAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingBindingEntry.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingEntry.setDescription('An entry containing a learned DHCP binding.')
bsDhcpSnoopingBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: bsDhcpSnoopingBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingVlanId.setDescription('The VLAN to which the DHCP client belongs.')
bsDhcpSnoopingBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: bsDhcpSnoopingBindingMacAddress.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingMacAddress.setDescription('The MAC address of the DHCP client.')
bsDhcpSnoopingBindingAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsDhcpSnoopingBindingAddressType.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingAddressType.setDescription('The type of address contained in the corresponding instance of bsDhcpSnoopingBindingAddress.')
bsDhcpSnoopingBindingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsDhcpSnoopingBindingAddress.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingAddress.setDescription('The internet address assigned to this DHCP client.')
bsDhcpSnoopingBindingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsDhcpSnoopingBindingInterface.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingInterface.setDescription('The interface to which the DHCP client is connected.')
bsDhcpSnoopingBindingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsDhcpSnoopingBindingLeaseTime.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingLeaseTime.setDescription("The lease time of this DHCP client's binding.")
bsDhcpSnoopingBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsDhcpSnoopingBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingRowStatus.setDescription("This object is used only to delete learned DHCP bindings from the table of learned bindings (this does not actually delete the binding, only this system's knowledge of the binding), or to create/modify/delete static binding table entries. Learned entries in this table cannot be created using this object, only deleted. On retrieval, the value for such an entry will always be active(1). Setting it to destroy(6) will delete the DHCP binding from the table of learned bindings. Static binding table entries may be created using this object. All writable objects must also be set before the entry can become valid.")
bsDhcpSnoopingBindingTimeToExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsDhcpSnoopingBindingTimeToExpiry.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingTimeToExpiry.setDescription("The time to expiry of this DHCP client's binding.")
bsDhcpSnoopingBindingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learned", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsDhcpSnoopingBindingSource.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingSource.setDescription('Indicates the source of this entry. If the entry was learned through DHCP snooping, the type is learned(1). In this case, the only thing that can be set in the entry is to set the RowStatus object to destroy(6) to delete the entry. If the entry was created through a management operation (Set request), the type is static(2). In this case, any writable column can be modified.')
bsDhcpSnoopingNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 5))
bsDhcpSnoopingNotificationSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 5, 1), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationSourcePort.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationSourcePort.setDescription('This value identifies the source port number of a dropped DHCP packet.')
bsDhcpSnoopingNotificationMsgType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("dhcpDiscover", 1), ("dhcpOffer", 2), ("dhcpRequest", 3), ("dhcpDecline", 4), ("dhcpAck", 5), ("dhcpNak", 6), ("dhcpRelease", 7), ("dhcpInform", 8), ("dhcpForceRenew", 9), ("dhcpLeaseQuery", 10), ("dhcpLeaseUnassigned", 11), ("dhcpLeaseUnknown", 12), ("dhcpLeaseActive", 13)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationMsgType.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationMsgType.setDescription('This value indicates the message type of a dropped DHCP packet.')
bsDhcpSnoopingNotificationSourceMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 5, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationSourceMACAddr.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationSourceMACAddr.setDescription('This value indicates the source MAC Address of a dropped DHCP packet.')
bsDhcpSnoopingNotificationClientMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 5, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationClientMACAddr.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationClientMACAddr.setDescription('This value indicates the client MAC Address of a dropped DHCP packet.')
bsDhcpSnoopingNotificationsBindingMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 5, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationsBindingMacAddress.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingNotificationsBindingMacAddress.setDescription('The MAC address of a DHCP client for which some event occurred.')
bsDhcpSnoopingBindingTableFull = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 1)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationClientMACAddr"))
if mibBuilder.loadTexts: bsDhcpSnoopingBindingTableFull.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingBindingTableFull.setDescription('This notification is generated when an attempt is made to add a new DHCP binding entry when the binding table is full. The value of bsDhcpSnoopingNotificationClientMACAddr gives the MAC address that could not be added to the binding table. This notification also indicates that additional untrusted DHCP packets will not be added to the binding table and will be dropped.')
bsDhcpSnoopingTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 2)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationSourcePort"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationMsgType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationSourceMACAddr"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationClientMACAddr"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingIfTrusted"))
if mibBuilder.loadTexts: bsDhcpSnoopingTrap.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingTrap.setDescription('This notification is generated when a DHCP packet is dropped.')
bsDhcpOption82MaxLengthExceeded = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 3))
if mibBuilder.loadTexts: bsDhcpOption82MaxLengthExceeded.setStatus('current')
if mibBuilder.loadTexts: bsDhcpOption82MaxLengthExceeded.setDescription('This notification is generated when the DHCP Option 82 information could not be added to a DHCP packet because the resulting packet would be too long.')
bsDhcpSnoopingExtSaveEntryMACConflict = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 4)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationsBindingMacAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryMACConflict.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryMACConflict.setDescription('This notification is generated when a DHCP snooping binding entry is not restored from an external file due to a MAC conflict.')
bsDhcpSnoopingExtSaveEntryInvalidInterface = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 5)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationsBindingMacAddress"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingBindingInterface"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryInvalidInterface.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryInvalidInterface.setDescription('This notification is generated when a DHCP snooping binding entry is not restored from an external file due to an unexisting interface.')
bsDhcpSnoopingExtSaveEntryLeaseExpired = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 6)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationsBindingMacAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryLeaseExpired.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryLeaseExpired.setDescription('This notification is generated when a DHCP snooping binding entry is not restored from an external file because the client lease expired.')
bsDhcpSnoopingExtSaveEntryParsingFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 7)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationsBindingMacAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryParsingFailure.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryParsingFailure.setDescription('This notification is generated when a DHCP snooping binding entry is not restored from an external file due to a parsing failure.')
bsDhcpSnoopingExtSaveNTP = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 8))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveNTP.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveNTP.setDescription('This notification is generated when enabling the DHCP snooping external saves feature without synchronizing the switch to a NTP server.')
bsDhcpSnoopingExtSaveUSBSyncSuccess = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 9)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveUsbTargetUnit"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUSBSyncSuccess.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUSBSyncSuccess.setDescription('This notification is generated after successfully saving the DHCP snooping binding table to a USB drive external file.')
bsDhcpSnoopingExtSaveTFTPSyncSuccess = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 10)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveTftpServerAddressType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveTftpServerAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTFTPSyncSuccess.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTFTPSyncSuccess.setDescription('This notification is generated after successfully saving the DHCP snooping binding table to a TFTP server external file.')
bsDhcpSnoopingExtSaveUSBSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 11)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveUsbTargetUnit"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUSBSyncFailure.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUSBSyncFailure.setDescription('This notification is generated after unsuccessfully saving the DHCP snooping binding table to a USB drive external file.')
bsDhcpSnoopingExtSaveTFTPSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 12)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveTftpServerAddressType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveTftpServerAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTFTPSyncFailure.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTFTPSyncFailure.setDescription('This notification is generated after unsuccessfully saving the DHCP snooping binding table to a TFTP server external file.')
bsDhcpSnoopingExtSaveUSBRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 13)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveUsbTargetUnit"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUSBRestoreSuccess.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUSBRestoreSuccess.setDescription('This notification is generated after successfully restoring the DHCP snooping binding table from a USB drive external file.')
bsDhcpSnoopingExtSaveTFTPRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 14)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveTftpServerAddressType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveTftpServerAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTFTPRestoreSuccess.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTFTPRestoreSuccess.setDescription('This notification is generated after successfully restoring the DHCP snooping binding table from a TFTP server external file.')
bsDhcpSnoopingExtSaveUSBRestoreFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 15)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveUsbTargetUnit"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUSBRestoreFailure.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUSBRestoreFailure.setDescription('This notification is generated after unsuccessfully restoring the DHCP snooping binding table from a USB drive external file.')
bsDhcpSnoopingExtSaveTFTPRestoreFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 16)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveTftpServerAddressType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveTftpServerAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTFTPRestoreFailure.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTFTPRestoreFailure.setDescription('This notification is generated after unsuccessfully restoring the DHCP snooping binding table from a TFTP server external file.')
bsDhcpSnoopingExtSaveEntryInvalidVlan = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 17)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationsBindingMacAddress"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingBindingVlanId"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryInvalidVlan.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryInvalidVlan.setDescription('This notification is generated when a DHCP snooping binding entry is not restored from an external file because VLAN requirements are not met: VLAN must exist, VLAN must be DHCP snooping enabled, binding entry unit/port must be a part of the VLAN.')
bsDhcpSnoopingExtSaveSFTPSyncSuccess = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 18)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveSftpServerAddressType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveSftpServerAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSFTPSyncSuccess.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSFTPSyncSuccess.setDescription('This notification is generated after successfully saving the DHCP snooping binding table to a SFTP server external file.')
bsDhcpSnoopingExtSaveSFTPSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 19)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveSftpServerAddressType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveSftpServerAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSFTPSyncFailure.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSFTPSyncFailure.setDescription('This notification is generated after unsuccessfully saving the DHCP snooping binding table to a SFTP server external file.')
bsDhcpSnoopingExtSaveSFTPRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 20)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveSftpServerAddressType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveSftpServerAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSFTPRestoreSuccess.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSFTPRestoreSuccess.setDescription('This notification is generated after successfully restoring the DHCP snooping binding table from a SFTP server external file.')
bsDhcpSnoopingExtSaveSFTPRestoreFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 21)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveSftpServerAddressType"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingExtSaveSftpServerAddress"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSFTPRestoreFailure.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSFTPRestoreFailure.setDescription('This notification is generated after unsuccessfully restoring the DHCP snooping binding table from a SFTP server external file.')
bsDhcpSnoopingExtSaveEntryIfTrustedConflict = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 22)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationsBindingMacAddress"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingIfTrusted"))
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryIfTrustedConflict.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEntryIfTrustedConflict.setDescription('This notification is generated when a DHCP snooping binding entry is not restored from an external file on a trusted interface.')
bsDhcpSnoopingStaticEntryMACConflict = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 17, 0, 23)).setObjects(("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingNotificationSourceMACAddr"), ("BAY-STACK-DHCP-SNOOPING-MIB", "bsDhcpSnoopingIfIndex"))
if mibBuilder.loadTexts: bsDhcpSnoopingStaticEntryMACConflict.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingStaticEntryMACConflict.setDescription('This notification is generated when a DHCP packet is dropped because a static entry with the same MAC address was found in the binding table.')
bsDhcpSnoopingExtSave = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6))
bsDhcpSnoopingExtSaveEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEnabled.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveEnabled.setDescription('This object is used to control whether the DHCP snooping external save is enabled.')
bsDhcpSnoopingExtSaveLastSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveLastSyncTime.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveLastSyncTime.setDescription('This object returns the Coordinated Universal Time (UTC) when the device last backed-up the DHCP snooping binding table.')
bsDhcpSnoopingExtSaveSyncFlag = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSyncFlag.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSyncFlag.setDescription("This object controls whether changes in the DHCP snooping binding table will be synchronized on the external device. A value of true(1) indicates changes will be synchronized at next write. A value of false(2) indicates changes won't be synchronized.")
bsDhcpSnoopingExtSaveFilename = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveFilename.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveFilename.setDescription('Name of the DHCP snooping binding file to be saved or restored externally.')
bsDhcpSnoopingExtSaveTftpServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 5), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTftpServerAddressType.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTftpServerAddressType.setDescription('This object indicates the type of address stored in the related object bsDhcpSnoopingExtSaveTftpServerInetAddress.')
bsDhcpSnoopingExtSaveTftpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 6), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTftpServerAddress.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveTftpServerAddress.setDescription('The IP address of the TFTP server on which to save the binding information.')
bsDhcpSnoopingExtSaveUsbTargetUnit = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUsbTargetUnit.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveUsbTargetUnit.setDescription('This object indicates the unit number of the USB port to be used in file save/restore operations.')
bsDhcpSnoopingExtSaveForceRestore = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveForceRestore.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveForceRestore.setDescription('This object is used to force a binding table restore from a previously saved file.')
bsDhcpSnoopingExtSaveSftpServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 9), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSftpServerAddressType.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSftpServerAddressType.setDescription('This object indicates the type of address stored in the related object bsDhcpSnoopingExtSaveSftpServerInetAddress.')
bsDhcpSnoopingExtSaveSftpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 17, 1, 6, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSftpServerAddress.setStatus('current')
if mibBuilder.loadTexts: bsDhcpSnoopingExtSaveSftpServerAddress.setDescription('The IP address of the SFTP server on which to save the binding information.')
mibBuilder.exportSymbols("BAY-STACK-DHCP-SNOOPING-MIB", bsDhcpSnoopingBindingAddress=bsDhcpSnoopingBindingAddress, bsDhcpSnoopingExtSaveEntryParsingFailure=bsDhcpSnoopingExtSaveEntryParsingFailure, bsDhcpSnoopingExtSaveUSBRestoreSuccess=bsDhcpSnoopingExtSaveUSBRestoreSuccess, bsDhcpSnoopingExtSaveSyncFlag=bsDhcpSnoopingExtSaveSyncFlag, bsDhcpSnoopingObjects=bsDhcpSnoopingObjects, bsDhcpSnoopingNotificationClientMACAddr=bsDhcpSnoopingNotificationClientMACAddr, bsDhcpSnoopingExtSave=bsDhcpSnoopingExtSave, bsDhcpSnoopingExtSaveTftpServerAddress=bsDhcpSnoopingExtSaveTftpServerAddress, bayStackDhcpSnoopingMib=bayStackDhcpSnoopingMib, bsDhcpSnoopingBindingRowStatus=bsDhcpSnoopingBindingRowStatus, bsDhcpSnoopingBindingAddressType=bsDhcpSnoopingBindingAddressType, bsDhcpSnoopingIfIndex=bsDhcpSnoopingIfIndex, bsDhcpSnoopingScalars=bsDhcpSnoopingScalars, bsDhcpSnoopingExtSaveTFTPSyncFailure=bsDhcpSnoopingExtSaveTFTPSyncFailure, bsDhcpSnoopingExtSaveUsbTargetUnit=bsDhcpSnoopingExtSaveUsbTargetUnit, bsDhcpSnoopingIfEntry=bsDhcpSnoopingIfEntry, bsDhcpSnoopingExtSaveTFTPSyncSuccess=bsDhcpSnoopingExtSaveTFTPSyncSuccess, bsDhcpSnoopingExtSaveEnabled=bsDhcpSnoopingExtSaveEnabled, bsDhcpSnoopingExtSaveEntryMACConflict=bsDhcpSnoopingExtSaveEntryMACConflict, bsDhcpSnoopingExtSaveUSBSyncFailure=bsDhcpSnoopingExtSaveUSBSyncFailure, bsDhcpSnoopingExtSaveUSBRestoreFailure=bsDhcpSnoopingExtSaveUSBRestoreFailure, bsDhcpSnoopingExtSaveUSBSyncSuccess=bsDhcpSnoopingExtSaveUSBSyncSuccess, bsDhcpSnoopingExtSaveTFTPRestoreFailure=bsDhcpSnoopingExtSaveTFTPRestoreFailure, bsDhcpSnoopingBindingVlanId=bsDhcpSnoopingBindingVlanId, bsDhcpSnoopingExtSaveEntryLeaseExpired=bsDhcpSnoopingExtSaveEntryLeaseExpired, bsDhcpSnoopingExtSaveSFTPRestoreSuccess=bsDhcpSnoopingExtSaveSFTPRestoreSuccess, bsDhcpSnoopingExtSaveLastSyncTime=bsDhcpSnoopingExtSaveLastSyncTime, bsDhcpSnoopingExtSaveEntryInvalidInterface=bsDhcpSnoopingExtSaveEntryInvalidInterface, bsDhcpOption82MaxLengthExceeded=bsDhcpOption82MaxLengthExceeded, bsDhcpSnoopingExtSaveNTP=bsDhcpSnoopingExtSaveNTP, bsDhcpSnoopingExtSaveSftpServerAddress=bsDhcpSnoopingExtSaveSftpServerAddress, bsDhcpSnoopingBindingMacAddress=bsDhcpSnoopingBindingMacAddress, bsDhcpSnoopingNotificationObjects=bsDhcpSnoopingNotificationObjects, bsDhcpSnoopingExtSaveEntryInvalidVlan=bsDhcpSnoopingExtSaveEntryInvalidVlan, bsDhcpSnoopingExtSaveForceRestore=bsDhcpSnoopingExtSaveForceRestore, bsDhcpSnoopingBindingSource=bsDhcpSnoopingBindingSource, bsDhcpSnoopingExtSaveSFTPSyncSuccess=bsDhcpSnoopingExtSaveSFTPSyncSuccess, bsDhcpSnoopingVlanTable=bsDhcpSnoopingVlanTable, bsDhcpSnoopingVlanId=bsDhcpSnoopingVlanId, bsDhcpSnoopingBindingTableFull=bsDhcpSnoopingBindingTableFull, bsDhcpSnoopingNotifications=bsDhcpSnoopingNotifications, bsDhcpSnoopingBindingLeaseTime=bsDhcpSnoopingBindingLeaseTime, bsDhcpSnoopingExtSaveTftpServerAddressType=bsDhcpSnoopingExtSaveTftpServerAddressType, bsDhcpSnoopingStaticEntryMACConflict=bsDhcpSnoopingStaticEntryMACConflict, bsDhcpSnoopingVlanEntry=bsDhcpSnoopingVlanEntry, bsDhcpSnoopingIfTable=bsDhcpSnoopingIfTable, bsDhcpSnoopingExtSaveTFTPRestoreSuccess=bsDhcpSnoopingExtSaveTFTPRestoreSuccess, PYSNMP_MODULE_ID=bayStackDhcpSnoopingMib, bsDhcpSnoopingIfTrusted=bsDhcpSnoopingIfTrusted, bsDhcpSnoopingIfOption82SubscriberId=bsDhcpSnoopingIfOption82SubscriberId, bsDhcpSnoopingNotificationSourceMACAddr=bsDhcpSnoopingNotificationSourceMACAddr, bsDhcpSnoopingBindingTimeToExpiry=bsDhcpSnoopingBindingTimeToExpiry, bsDhcpSnoopingTrap=bsDhcpSnoopingTrap, bsDhcpSnoopingExtSaveSFTPSyncFailure=bsDhcpSnoopingExtSaveSFTPSyncFailure, bsDhcpSnoopingExtSaveSFTPRestoreFailure=bsDhcpSnoopingExtSaveSFTPRestoreFailure, bsDhcpSnoopingBindingEntry=bsDhcpSnoopingBindingEntry, bsDhcpSnoopingExtSaveFilename=bsDhcpSnoopingExtSaveFilename, bsDhcpSnoopingNotificationsBindingMacAddress=bsDhcpSnoopingNotificationsBindingMacAddress, bsDhcpSnoopingBindingTable=bsDhcpSnoopingBindingTable, bsDhcpSnoopingVlanEnabled=bsDhcpSnoopingVlanEnabled, bsDhcpSnoopingExtSaveSftpServerAddressType=bsDhcpSnoopingExtSaveSftpServerAddressType, bsDhcpSnoopingEnabled=bsDhcpSnoopingEnabled, bsDhcpSnoopingExtSaveEntryIfTrustedConflict=bsDhcpSnoopingExtSaveEntryIfTrustedConflict, bsDhcpSnoopingNotificationSourcePort=bsDhcpSnoopingNotificationSourcePort, bsDhcpSnoopingVlanOption82Enabled=bsDhcpSnoopingVlanOption82Enabled, bsDhcpSnoopingNotificationMsgType=bsDhcpSnoopingNotificationMsgType, bsDhcpSnoopingBindingInterface=bsDhcpSnoopingBindingInterface, bsDhcpSnoopingOption82Enabled=bsDhcpSnoopingOption82Enabled)
