#
# PySNMP MIB module TRIDIUMR3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRIDIUMR3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Integer32, Bits, Gauge32, iso, Counter32, NotificationType, NotificationType, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter64, Unsigned32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "Bits", "Gauge32", "iso", "Counter32", "NotificationType", "NotificationType", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tridium = MibIdentifier((1, 3, 6, 1, 4, 1, 4131))
tridiumStation = MibIdentifier((1, 3, 6, 1, 4, 1, 4131, 1))
version = MibScalar((1, 3, 6, 1, 4, 1, 4131, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('mandatory')
if mibBuilder.loadTexts: version.setDescription('Current software version')
action = MibScalar((1, 3, 6, 1, 4, 1, 4131, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAction", 0), ("ackAll", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: action.setStatus('mandatory')
if mibBuilder.loadTexts: action.setDescription('Provides means for manager to perform actions on the alarm table. 0 (no action) or 1 (acknowledge all).')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 4131, 1, 3), )
if mibBuilder.loadTexts: alarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: alarmTable.setDescription('A list of alarms in the station which have an snmp recipient (configured to store received alarms).')
alarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1), ).setIndexNames((1, "TRIDIUMR3-MIB", "uuid"))
if mibBuilder.loadTexts: alarmTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alarmTableEntry.setDescription('An alarm table entry containing data for a specific alarm.')
timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timestamp.setStatus('mandatory')
if mibBuilder.loadTexts: timestamp.setDescription('Indicates the time when the alarm occurred.')
uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uuid.setStatus('mandatory')
if mibBuilder.loadTexts: uuid.setDescription('The unique universal identifier of the alarm.')
sourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("offnormal", 1), ("fault", 2), ("alert", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceState.setStatus('mandatory')
if mibBuilder.loadTexts: sourceState.setDescription('The current state of the source. normal(0), offnormal(1), fault(2), or alert(3).')
ackState = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acked", 0), ("unacked", 1), ("ackPending", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ackState.setStatus('mandatory')
if mibBuilder.loadTexts: ackState.setDescription("Indicates if the alarm has been acknowledged. acked(0), unacked(1), or ackPending(2). Alarm can be acknowledged by setting ackState to 'acked'(0)")
ackRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ackRequired.setStatus('mandatory')
if mibBuilder.loadTexts: ackRequired.setDescription('Indicates if an acknowledgement is required for the alarm. false(0), or true(1).')
source = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: source.setStatus('mandatory')
if mibBuilder.loadTexts: source.setDescription('Indicates the path to the station object which generated the alarm.')
alarmClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClass.setStatus('mandatory')
if mibBuilder.loadTexts: alarmClass.setDescription('The alarm class for the alarm.')
priority = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priority.setStatus('mandatory')
if mibBuilder.loadTexts: priority.setDescription('The priority of the alarm (0=high, 255=low).')
normalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: normalTime.setStatus('mandatory')
if mibBuilder.loadTexts: normalTime.setDescription('The time at which the alarm goes back to normal state.')
ackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ackTime.setStatus('mandatory')
if mibBuilder.loadTexts: ackTime.setDescription('The time at which the alarm is acked. Note that interpretation of this value depends upon the state of the alarm.')
user = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: user.setStatus('mandatory')
if mibBuilder.loadTexts: user.setDescription('The name of the user who acknowledged the alarm.')
alarmData = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmData.setStatus('mandatory')
if mibBuilder.loadTexts: alarmData.setDescription('A string containing dynamic alarm data, in key-value pairs.')
alarmTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("offnormal", 1), ("fault", 2), ("alert", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTransition.setStatus('mandatory')
if mibBuilder.loadTexts: alarmTransition.setDescription('The initial state of the source. normal(0), offnormal(1), fault(2), or alert(3).')
lastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: lastUpdate.setDescription('The time at which the alarm was last updated. Updates occur at creation, acknowlegement, and changes to alarmData such as notes.')
inputTable = MibTable((1, 3, 6, 1, 4, 1, 4131, 1, 4), )
if mibBuilder.loadTexts: inputTable.setStatus('mandatory')
if mibBuilder.loadTexts: inputTable.setDescription('A list of snmp input object values.')
inputTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4131, 1, 4, 1), ).setIndexNames((0, "TRIDIUMR3-MIB", "inputIndex"))
if mibBuilder.loadTexts: inputTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: inputTableEntry.setDescription('An input table entry containing data for a specific input.')
inputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inputIndex.setDescription('The index in the input table for a particular snmp input object. Used to address table entries.')
inputName = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputName.setStatus('mandatory')
if mibBuilder.loadTexts: inputName.setDescription('Name of station object.')
inputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputValue.setStatus('mandatory')
if mibBuilder.loadTexts: inputValue.setDescription('Current value of station object. Is writeable.')
outputTable = MibTable((1, 3, 6, 1, 4, 1, 4131, 1, 5), )
if mibBuilder.loadTexts: outputTable.setStatus('mandatory')
if mibBuilder.loadTexts: outputTable.setDescription('A list of snmp output (read-only) object values.')
outputTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4131, 1, 5, 1), ).setIndexNames((0, "TRIDIUMR3-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: outputTableEntry.setDescription('An output table entry containing data for a specific output.')
outputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outputIndex.setDescription('The index in the output table for a particular snmp output object. Used to address table entries.')
outputName = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputName.setStatus('mandatory')
if mibBuilder.loadTexts: outputName.setDescription('Name of station object.')
outputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputValue.setStatus('mandatory')
if mibBuilder.loadTexts: outputValue.setDescription('Current value of station object. Is read-only.')
stationAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4131, 1) + (0,1)).setObjects(("TRIDIUMR3-MIB", "timestamp"), ("TRIDIUMR3-MIB", "uuid"), ("TRIDIUMR3-MIB", "sourceState"), ("TRIDIUMR3-MIB", "ackState"), ("TRIDIUMR3-MIB", "ackRequired"), ("TRIDIUMR3-MIB", "source"), ("TRIDIUMR3-MIB", "alarmClass"), ("TRIDIUMR3-MIB", "priority"), ("TRIDIUMR3-MIB", "normalTime"), ("TRIDIUMR3-MIB", "ackTime"), ("TRIDIUMR3-MIB", "user"), ("TRIDIUMR3-MIB", "alarmData"), ("TRIDIUMR3-MIB", "alarmTransition"), ("TRIDIUMR3-MIB", "lastUpdate"))
if mibBuilder.loadTexts: stationAlarm.setDescription('The stationAlarm trap is generated when a Niagara alarm is received by an snmp recipient which has routing alarms to a network manager enabled. It contains useful information from the alarm record.')
mibBuilder.exportSymbols("TRIDIUMR3-MIB", alarmData=alarmData, alarmClass=alarmClass, normalTime=normalTime, alarmTable=alarmTable, tridiumStation=tridiumStation, timestamp=timestamp, outputTableEntry=outputTableEntry, uuid=uuid, alarmTransition=alarmTransition, outputValue=outputValue, outputName=outputName, stationAlarm=stationAlarm, inputTableEntry=inputTableEntry, inputIndex=inputIndex, inputName=inputName, sourceState=sourceState, version=version, alarmTableEntry=alarmTableEntry, outputIndex=outputIndex, inputValue=inputValue, tridium=tridium, lastUpdate=lastUpdate, ackRequired=ackRequired, inputTable=inputTable, action=action, user=user, ackTime=ackTime, outputTable=outputTable, ackState=ackState, source=source, priority=priority)
