#
# PySNMP MIB module CISCO-VISM-SVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VISM-SVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
voice, = mibBuilder.importSymbols("BASIS-MIB", "voice")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Counter64, ObjectIdentity, Gauge32, Integer32, TimeTicks, Counter32, NotificationType, MibIdentifier, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Counter64", "ObjectIdentity", "Gauge32", "Integer32", "TimeTicks", "Counter32", "NotificationType", "MibIdentifier", "iso", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoVismSvcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 90))
ciscoVismSvcMIB.setRevisions(('2003-10-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVismSvcMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in SMIv1 version. The MIB has been converted to SMIv2 version and descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoVismSvcMIB.setLastUpdated('200310090000Z')
if mibBuilder.loadTexts: ciscoVismSvcMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVismSvcMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoVismSvcMIB.setDescription('The MIB module containing SVC information for VISM service module.')
vismSvcGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10))
vismSvcCnfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19))
vismSvcAtmQosGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1))
vismSvcTrfScalingGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 2))
vismSvcAal2CidGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 3))
vismSvcTxSetups = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxSetups.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxSetups.setDescription('This is the number of Setup messages sent to the PXM(Processor Switch Module) from the VISM since VISM reset.')
vismSvcRxSetups = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxSetups.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxSetups.setDescription('This is the number of Setup messages received by the VISM from the PXM since VISM reset.')
vismSvcTxCallProcs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxCallProcs.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxCallProcs.setDescription('This is the number of Call proceeding messages sent to the PXM from the VISM since VISM reset.')
vismSvcRxCallProcs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxCallProcs.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxCallProcs.setDescription('This is the number of Call proceeding messages received by the VISM from the PXM since VISM reset.')
vismSvcTxConns = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxConns.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxConns.setDescription('This is the number of Connect messages sent to the PXM from the VISM since VISM reset.')
vismSvcTxConnAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxConnAcks.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxConnAcks.setDescription('This is the number of Connect ack messages sent to the PXM from the VISM since VISM reset.')
vismSvcRxConns = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxConns.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxConns.setDescription('This is the number of Connect messages received by the VISM from the PXM since VISM reset.')
vismSvcRxConnAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxConnAcks.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxConnAcks.setDescription('This is the number of Connect ack messages received by the VISM from the PXM since VISM reset.')
vismSvcTxReleases = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxReleases.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxReleases.setDescription('This is the number of Release messages sent to the PXM from the VISM since VISM reset.')
vismSvcTxReleaseCompls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxReleaseCompls.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxReleaseCompls.setDescription('This is the number of Release complete messages sent to the PXM from the VISM since VISM reset.')
vismSvcRxReleases = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxReleases.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxReleases.setDescription('This is the number of Release messages received by the VISM from the PXM since VISM reset.')
vismSvcRxReleaseCompls = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxReleaseCompls.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxReleaseCompls.setDescription('This is the number of Release complete messages received by the VISM from the PXM since VISM reset.')
vismSvcTxRestarts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxRestarts.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxRestarts.setDescription('This is the number of Restart messages sent to the PXM from the VISM since VISM reset.')
vismSvcTxRestartAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxRestartAcks.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxRestartAcks.setDescription('This is the number of Restart ack messages sent to the PXM from the VISM since VISM reset.')
vismSvcRxRestarts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxRestarts.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxRestarts.setDescription('This is the number of Restart messages received by the VISM from the PXM since VISM reset.')
vismSvcRxRestartAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxRestartAcks.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxRestartAcks.setDescription('This is the number of Restart ack messages received by the VISM from the PXM since VISM reset.')
vismSvcTxResyncStrts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncStrts.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxResyncStrts.setDescription('This is the number of Resync start messages sent to the PXM from the VISM since VISM reset.')
vismSvcTxResyncStrtAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncStrtAcks.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxResyncStrtAcks.setDescription('This is the number of Resync start ack messages sent to the PXM from the VISM since VISM reset.')
vismSvcRxResyncStrts = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncStrts.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxResyncStrts.setDescription('This is the number of Resync start messages received by the VISM from the PXM since VISM reset.')
vismSvcRxResyncStrtAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncStrtAcks.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxResyncStrtAcks.setDescription('This is the number of Resync start ack messages received by the VISM from the PXM since VISM reset.')
vismSvcTxResyncEnds = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncEnds.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxResyncEnds.setDescription('This is the number of Resync end messages sent to the PXM from the VISM since VISM reset.')
vismSvcTxResyncEndAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxResyncEndAcks.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxResyncEndAcks.setDescription('This is the number of Resync end ack messages sent to the PXM from the VISM since VISM reset.')
vismSvcRxResyncEnds = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncEnds.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxResyncEnds.setDescription('This is the number of Resync end messages received by the VISM from the PXM since VISM reset.')
vismSvcRxResyncEndAcks = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxResyncEndAcks.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxResyncEndAcks.setDescription('This is the number of Resync end ack messages received by the VISM from the PXM since VISM reset.')
vismSvcTxBulkResyncs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcTxBulkResyncs.setStatus('current')
if mibBuilder.loadTexts: vismSvcTxBulkResyncs.setDescription('This is the number of Bulk resync messages sent to the PXM from the VISM since VISM reset.')
vismSvcRxBulkResyncs = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRxBulkResyncs.setStatus('current')
if mibBuilder.loadTexts: vismSvcRxBulkResyncs.setDescription('This is the number of Bulk resync messages received by the VISM from the PXM since VISM reset.')
vismSvcCallProcExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcCallProcExpiries.setStatus('current')
if mibBuilder.loadTexts: vismSvcCallProcExpiries.setDescription('This object indicates the number of times the call proceeding timer expired before a connect message is received.')
vismSvcReleasExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcReleasExpiries.setStatus('current')
if mibBuilder.loadTexts: vismSvcReleasExpiries.setDescription('This object indicates the number of times the release timer expired before a release complete message is received.')
vismSvcConnExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcConnExpiries.setStatus('current')
if mibBuilder.loadTexts: vismSvcConnExpiries.setDescription('This object indicates the number of times the connect timer expired before a connection message is received.')
vismSvcConnAckExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcConnAckExpiries.setStatus('current')
if mibBuilder.loadTexts: vismSvcConnAckExpiries.setDescription('This object indicates the number of times the connect ack timer expires before a connect ack message is received.')
vismSvcRestartExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcRestartExpiries.setStatus('current')
if mibBuilder.loadTexts: vismSvcRestartExpiries.setDescription('This object indicate the number of times the restart timer expires before a Restart Response message is received.')
vismSvcResyncExpiries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSvcResyncExpiries.setStatus('current')
if mibBuilder.loadTexts: vismSvcResyncExpiries.setDescription('This object indicate the number of times the Resync timer expired a Resync End Indication message is received.')
vismSvcAtmQosCdv = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 20000)).clone(20000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosCdv.setReference("The references are from ATM Forum 'Voice & Telephony over ATM' specifications af-vtoa-0089.000, af-vtoa-0113.000. ")
if mibBuilder.loadTexts: vismSvcAtmQosCdv.setStatus('current')
if mibBuilder.loadTexts: vismSvcAtmQosCdv.setDescription("End-to-end cell delay variation used in voice SVC establishment. It is used to guarantee the quality of the route selected for a voice SVC. It is applicable to both AAL1 and AAL2 SVC connection establishment. The value specified to this object is in 'micro-seconds'. This value is sent in voice SVC setup messages in extended quality of services information element as the objective value. ")
vismSvcAtmQosCtd = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 150000)).clone(150000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosCtd.setReference('The references are from ITU G-Series Recommendations: G.114 - One-way transmission time. ')
if mibBuilder.loadTexts: vismSvcAtmQosCtd.setStatus('current')
if mibBuilder.loadTexts: vismSvcAtmQosCtd.setDescription("End-to-end maximum cell transfer delay used in voice SVC establishment. It is used to guarantee the quality of the route selected for a voice SVC. It is applicable to both AAL1 and AAL2 SVC connection establishment. The value specified to this object is in 'micro-seconds'. This value is sent in voice SVC setup messages in end-to-end transit delay information element as the objective value. ")
vismSvcAtmQosClr = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAtmQosClr.setReference(' The references are from BellCore specifications - GR.1110 ')
if mibBuilder.loadTexts: vismSvcAtmQosClr.setStatus('current')
if mibBuilder.loadTexts: vismSvcAtmQosClr.setDescription('Maximum Cell Loss Ratio used in voice SVC establishment. It is used to guarantee the quality of the route selected for a voice SVC. It is applicable to both AAL1 and AAL2 SVC connection establishment. This value is sent in voice SVC setup messages in extended quality of services information element as maximum cell loss ratio value. ')
vismSvcTrfScalingFactor = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcTrfScalingFactor.setStatus('current')
if mibBuilder.loadTexts: vismSvcTrfScalingFactor.setDescription("Traffic scaling Factor used to compute factored bandwidth which is used in ATM signaling to establish voice SVC. When this value is less than 100 it can be referred as a `discount factor' and when more than 100 referred as an `excess factor' It is applicable only to VBR SVC connection establishment. The traffic scaling is not applicable to AAL2 SVC calls that require G.711 and clear channel codecs ")
vismSvcAal2CidNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSvcAal2CidNumber.setReference('The references are from ITU I-Series Recommendations: I.363.2 B-ISDN ATM Adaptation Layer specification: Type 2 AAL. ')
if mibBuilder.loadTexts: vismSvcAal2CidNumber.setStatus('current')
if mibBuilder.loadTexts: vismSvcAal2CidNumber.setDescription('The default AAL2 Channel IDentification (CID) number used for AAL2 SVC connections. ')
ciscoVismSvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 90, 2))
ciscoVismSvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1))
ciscoVismSvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 2))
ciscoVismSvcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 2, 1)).setObjects(("CISCO-VISM-SVC-MIB", "ciscoVismSvcCounterGroup"), ("CISCO-VISM-SVC-MIB", "ciscoVismSvcAtmQosGroup"), ("CISCO-VISM-SVC-MIB", "ciscoVismSvcTrfScalingGrp"), ("CISCO-VISM-SVC-MIB", "ciscoVismSvcAal2CidGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcCompliance = ciscoVismSvcCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoVismSvcCompliance.setDescription('The compliance statement for objects related to VISM SVC module.')
ciscoVismSvcCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1, 1)).setObjects(("CISCO-VISM-SVC-MIB", "vismSvcTxSetups"), ("CISCO-VISM-SVC-MIB", "vismSvcRxSetups"), ("CISCO-VISM-SVC-MIB", "vismSvcTxCallProcs"), ("CISCO-VISM-SVC-MIB", "vismSvcRxCallProcs"), ("CISCO-VISM-SVC-MIB", "vismSvcTxConns"), ("CISCO-VISM-SVC-MIB", "vismSvcTxConnAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcRxConns"), ("CISCO-VISM-SVC-MIB", "vismSvcRxConnAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcTxReleases"), ("CISCO-VISM-SVC-MIB", "vismSvcTxReleaseCompls"), ("CISCO-VISM-SVC-MIB", "vismSvcRxReleases"), ("CISCO-VISM-SVC-MIB", "vismSvcRxReleaseCompls"), ("CISCO-VISM-SVC-MIB", "vismSvcTxRestarts"), ("CISCO-VISM-SVC-MIB", "vismSvcTxRestartAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcRxRestarts"), ("CISCO-VISM-SVC-MIB", "vismSvcRxRestartAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcTxResyncStrts"), ("CISCO-VISM-SVC-MIB", "vismSvcTxResyncStrtAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcRxResyncStrts"), ("CISCO-VISM-SVC-MIB", "vismSvcRxResyncStrtAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcTxResyncEnds"), ("CISCO-VISM-SVC-MIB", "vismSvcTxResyncEndAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcRxResyncEnds"), ("CISCO-VISM-SVC-MIB", "vismSvcRxResyncEndAcks"), ("CISCO-VISM-SVC-MIB", "vismSvcTxBulkResyncs"), ("CISCO-VISM-SVC-MIB", "vismSvcRxBulkResyncs"), ("CISCO-VISM-SVC-MIB", "vismSvcCallProcExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcReleasExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcConnExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcConnAckExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcRestartExpiries"), ("CISCO-VISM-SVC-MIB", "vismSvcResyncExpiries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcCounterGroup = ciscoVismSvcCounterGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVismSvcCounterGroup.setDescription('The collection of objects which are used to represent VISM SVC counters.')
ciscoVismSvcAtmQosGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1, 2)).setObjects(("CISCO-VISM-SVC-MIB", "vismSvcAtmQosCdv"), ("CISCO-VISM-SVC-MIB", "vismSvcAtmQosCtd"), ("CISCO-VISM-SVC-MIB", "vismSvcAtmQosClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcAtmQosGroup = ciscoVismSvcAtmQosGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVismSvcAtmQosGroup.setDescription('The collection of objects which are used to represent VISM SVC Signaling and QOS parameters.')
ciscoVismSvcTrfScalingGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1, 3)).setObjects(("CISCO-VISM-SVC-MIB", "vismSvcTrfScalingFactor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcTrfScalingGrp = ciscoVismSvcTrfScalingGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoVismSvcTrfScalingGrp.setDescription('This object is are used to represent VISM scaling factor to SVC Signaling traffic parameter.')
ciscoVismSvcAal2CidGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 90, 2, 1, 4)).setObjects(("CISCO-VISM-SVC-MIB", "vismSvcAal2CidNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSvcAal2CidGrp = ciscoVismSvcAal2CidGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoVismSvcAal2CidGrp.setDescription('This object is used to represent VISM SVC AAL2 Cid.')
mibBuilder.exportSymbols("CISCO-VISM-SVC-MIB", vismSvcTxSetups=vismSvcTxSetups, vismSvcTxConns=vismSvcTxConns, vismSvcGrp=vismSvcGrp, vismSvcRxConns=vismSvcRxConns, vismSvcRxResyncEndAcks=vismSvcRxResyncEndAcks, vismSvcRestartExpiries=vismSvcRestartExpiries, vismSvcAal2CidNumber=vismSvcAal2CidNumber, vismSvcTxRestartAcks=vismSvcTxRestartAcks, vismSvcAtmQosCdv=vismSvcAtmQosCdv, vismSvcAtmQosGrp=vismSvcAtmQosGrp, vismSvcRxRestarts=vismSvcRxRestarts, vismSvcAtmQosCtd=vismSvcAtmQosCtd, ciscoVismSvcCompliance=ciscoVismSvcCompliance, ciscoVismSvcTrfScalingGrp=ciscoVismSvcTrfScalingGrp, vismSvcTxReleaseCompls=vismSvcTxReleaseCompls, vismSvcRxResyncStrtAcks=vismSvcRxResyncStrtAcks, vismSvcConnAckExpiries=vismSvcConnAckExpiries, PYSNMP_MODULE_ID=ciscoVismSvcMIB, vismSvcRxCallProcs=vismSvcRxCallProcs, vismSvcRxConnAcks=vismSvcRxConnAcks, vismSvcTxBulkResyncs=vismSvcTxBulkResyncs, vismSvcRxReleases=vismSvcRxReleases, vismSvcAal2CidGrp=vismSvcAal2CidGrp, vismSvcResyncExpiries=vismSvcResyncExpiries, vismSvcAtmQosClr=vismSvcAtmQosClr, vismSvcTrfScalingGrp=vismSvcTrfScalingGrp, vismSvcTxResyncEnds=vismSvcTxResyncEnds, vismSvcRxResyncStrts=vismSvcRxResyncStrts, vismSvcTxRestarts=vismSvcTxRestarts, vismSvcReleasExpiries=vismSvcReleasExpiries, ciscoVismSvcAal2CidGrp=ciscoVismSvcAal2CidGrp, vismSvcTxResyncStrts=vismSvcTxResyncStrts, ciscoVismSvcMIB=ciscoVismSvcMIB, vismSvcCnfGroups=vismSvcCnfGroups, vismSvcConnExpiries=vismSvcConnExpiries, vismSvcTrfScalingFactor=vismSvcTrfScalingFactor, vismSvcRxRestartAcks=vismSvcRxRestartAcks, vismSvcRxSetups=vismSvcRxSetups, vismSvcCallProcExpiries=vismSvcCallProcExpiries, vismSvcRxReleaseCompls=vismSvcRxReleaseCompls, vismSvcRxBulkResyncs=vismSvcRxBulkResyncs, ciscoVismSvcMIBConformance=ciscoVismSvcMIBConformance, vismSvcTxCallProcs=vismSvcTxCallProcs, vismSvcTxConnAcks=vismSvcTxConnAcks, ciscoVismSvcMIBGroups=ciscoVismSvcMIBGroups, vismSvcTxResyncStrtAcks=vismSvcTxResyncStrtAcks, vismSvcRxResyncEnds=vismSvcRxResyncEnds, ciscoVismSvcMIBCompliances=ciscoVismSvcMIBCompliances, ciscoVismSvcCounterGroup=ciscoVismSvcCounterGroup, ciscoVismSvcAtmQosGroup=ciscoVismSvcAtmQosGroup, vismSvcTxResyncEndAcks=vismSvcTxResyncEndAcks, vismSvcTxReleases=vismSvcTxReleases)
