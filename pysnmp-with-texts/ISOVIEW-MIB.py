#
# PySNMP MIB module ISOVIEW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISOVIEW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, enterprises, TimeTicks, ModuleIdentity, Unsigned32, Gauge32, iso, Bits, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "enterprises", "TimeTicks", "ModuleIdentity", "Unsigned32", "Gauge32", "iso", "Bits", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Counter32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bitec = MibIdentifier((1, 3, 6, 1, 4, 1, 170))
bdn = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1))
third_party = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1)).setLabel("third-party")
retix = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1))
station = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1))
lapb = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2))
ieee8023 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3))
phySerIf = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4))
mlink = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5))
lan = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 6))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8))
br12 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 9))
router = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10))
boot = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11))
boothelper = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 12))
p4942 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 1))
p2244m2 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 2))
p2265 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 3))
p4660 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 4))
p4820 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 5))
p4880 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 6))
p4850 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 7))
p4760 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 8))
p4941 = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 8, 9))
stationTime = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationTime.setStatus('mandatory')
stationResetCounter = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationResetCounter.setStatus('mandatory')
freeBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeBufferCount.setStatus('optional')
freeHeaderCount = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeHeaderCount.setStatus('optional')
physBlkSize = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physBlkSize.setStatus('optional')
newPhysBlkSize = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newPhysBlkSize.setStatus('optional')
resetStation = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStation.setStatus('mandatory')
initStation = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: initStation.setStatus('mandatory')
resetStats = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetStats.setStatus('mandatory')
processorLoading = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorLoading.setStatus('optional')
trapDestinationTable = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 11))
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 11, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestTable.setStatus('mandatory')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 11, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "trapDestEntryIpAddr"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('mandatory')
trapDestEntryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 11, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestEntryIpAddr.setStatus('mandatory')
trapDestEntryCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestEntryCommunityName.setStatus('mandatory')
trapDestEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 11, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestEntryType.setStatus('mandatory')
trapDestAction = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestAction.setStatus('mandatory')
trapDestPage = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(240, 240)).setFixedLength(240)).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDestPage.setStatus('mandatory')
passWord = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passWord.setStatus('optional')
snmpAccessPolicyObject = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13))
snmpAccessPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessPolicyTable.setStatus('mandatory')
snmpAccessPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "accessPolicyIndex"))
if mibBuilder.loadTexts: snmpAccessPolicyEntry.setStatus('mandatory')
accessPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPolicyIndex.setStatus('mandatory')
communityName = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityName.setStatus('mandatory')
accessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessMode.setStatus('mandatory')
snmpAccessPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessPolicyType.setStatus('mandatory')
snmpAccessPolicyAction = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAccessPolicyAction.setStatus('mandatory')
snmpAccessPolicyPage = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 13, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessPolicyPage.setStatus('mandatory')
authenticationTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenticationTrapStatus.setStatus('mandatory')
serialTxQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialTxQueueSize.setStatus('optional')
internalQueueCurrentLength = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalQueueCurrentLength.setStatus('optional')
queueUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueUpperLimit.setStatus('optional')
lanQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanQueueSize.setStatus('optional')
lapbNumber = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbNumber.setStatus('mandatory')
lapbTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbTable.setStatus('mandatory')
lapbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "lapbIndex"))
if mibBuilder.loadTexts: lapbEntry.setStatus('mandatory')
lapbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbIndex.setStatus('mandatory')
lapbModeT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbModeT1.setStatus('mandatory')
lapbAutoT1value = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbAutoT1value.setStatus('mandatory')
lapbManualT1value = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbManualT1value.setStatus('mandatory')
lapbWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbWindow.setStatus('mandatory')
lapbPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbPolarity.setStatus('mandatory')
lapbResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbResetCount.setStatus('mandatory')
lapbSendFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbSendFrameCount.setStatus('mandatory')
lapbRcvFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbRcvFrameCount.setStatus('mandatory')
lapbSendOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbSendOctetCount.setStatus('mandatory')
lapbRcvOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbRcvOctetCount.setStatus('mandatory')
lapbAbortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbAbortCount.setStatus('mandatory')
lapbCrcErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCrcErrorCount.setStatus('mandatory')
lapbState = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbState.setStatus('mandatory')
lapbLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbLastResetTime.setStatus('mandatory')
lapbLastResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbLastResetReason.setStatus('mandatory')
lapbLinkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbLinkReset.setStatus('mandatory')
lapbRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbRetryCount.setStatus('mandatory')
ieee8023Number = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023Number.setStatus('mandatory')
ieee8023Table = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023Table.setStatus('mandatory')
ieee8023Entry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "ieee8023Index"))
if mibBuilder.loadTexts: ieee8023Entry.setStatus('mandatory')
ieee8023Index = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023Index.setStatus('mandatory')
ieee8023FramesTransmittedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023FramesTransmittedOks.setStatus('mandatory')
ieee8023SingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023SingleCollisionFrames.setStatus('mandatory')
ieee8023MultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MultipleCollisionFrames.setStatus('mandatory')
ieee8023OctetsTransmittedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023OctetsTransmittedOks.setStatus('mandatory')
ieee8023DeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023DeferredTransmissions.setStatus('mandatory')
ieee8023MulticastFramesTransmittedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MulticastFramesTransmittedOks.setStatus('optional')
ieee8023BroadcastFramesTransmittedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023BroadcastFramesTransmittedOks.setStatus('optional')
ieee8023LateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023LateCollisions.setStatus('mandatory')
ieee8023ExcessiveCollisions = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023ExcessiveCollisions.setStatus('mandatory')
ieee8023InternalMACTransmitErrors = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023InternalMACTransmitErrors.setStatus('mandatory')
ieee8023CarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023CarrierSenseErrors.setStatus('mandatory')
ieee8023ExcessiveDeferrals = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023ExcessiveDeferrals.setStatus('optional')
ieee8023FramesReceivedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023FramesReceivedOks.setStatus('mandatory')
ieee8023OctetsReceivedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023OctetsReceivedOks.setStatus('mandatory')
ieee8023MulticastFramesReceivedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MulticastFramesReceivedOks.setStatus('optional')
ieee8023BroadcastFramesReceivedOks = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023BroadcastFramesReceivedOks.setStatus('optional')
ieee8023FrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023FrameTooLongs.setStatus('optional')
ieee8023AlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023AlignmentErrors.setStatus('mandatory')
ieee8023FCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023FCSErrors.setStatus('mandatory')
ieee8023inRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023inRangeLengthErrors.setStatus('optional')
ieee8023outOfRangeLengthFields = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023outOfRangeLengthFields.setStatus('optional')
ieee8023InternalMACReceiveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023InternalMACReceiveErrors.setStatus('mandatory')
ieee8023InitializeMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("initialize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023InitializeMAC.setStatus('mandatory')
ieee8023PromiscuousReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023PromiscuousReceiveStatus.setStatus('mandatory')
ieee8023MACSubLayerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023MACSubLayerStatus.setStatus('optional')
ieee8023TransmitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023TransmitStatus.setStatus('optional')
ieee8023MulticastReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023MulticastReceiveStatus.setStatus('optional')
ieee8023MACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MACAddress.setStatus('optional')
ieee8023SQETestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023SQETestErrors.setStatus('mandatory')
ieee8023NewMACAddress = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023NewMACAddress.setStatus('mandatory')
ieee8023NewMACAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "ieee8023NewMACAddressIndex"))
if mibBuilder.loadTexts: ieee8023NewMACAddressEntry.setStatus('mandatory')
ieee8023NewMACAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023NewMACAddressIndex.setStatus('mandatory')
ieee8023NewMACAddressValue = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8023NewMACAddressValue.setStatus('mandatory')
phySerIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfNumber.setStatus('mandatory')
phySerIfTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfTable.setStatus('mandatory')
phySerIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "phySerIfIndex"))
if mibBuilder.loadTexts: phySerIfEntry.setStatus('mandatory')
phySerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfIndex.setStatus('mandatory')
phySerIfInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("x21dte", 1), ("x21dce", 2), ("rs449", 3), ("g703", 4), ("v35", 5), ("v35btb", 6), ("rs232", 7), ("t1", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfInterfaceType.setStatus('mandatory')
phySerIfMeasuredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfMeasuredSpeed.setStatus('mandatory')
phySerIfIsSpeedsettable = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfIsSpeedsettable.setStatus('mandatory')
phySerIfPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1200, 2400, 4800, 9600, 19200, 24000, 32000, 48000, 64000, 256000, 512000, 1024000, 2048000))).clone(namedValues=NamedValues(("b1200", 1200), ("b2400", 2400), ("b4800", 4800), ("b9600", 9600), ("b19200", 19200), ("b24000", 24000), ("b32000", 32000), ("b48000", 48000), ("b64000", 64000), ("b256000", 256000), ("b512000", 512000), ("b1024000", 1024000), ("b2048000", 2048000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfPortSpeed.setStatus('mandatory')
phySerIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfTransitDelay.setStatus('mandatory')
phySerIfT1clockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1clockSource.setStatus('mandatory')
phySerIfT1SlotLvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1SlotLvalue.setStatus('mandatory')
phySerIfT1SlotHvalue = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1SlotHvalue.setStatus('mandatory')
phySerIfT1dRatePerChan = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1dRatePerChan.setStatus('mandatory')
phySerIfT1frameAndCode = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phySerIfT1frameAndCode.setStatus('mandatory')
phySerIfpartnerAddress = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phySerIfpartnerAddress.setStatus('mandatory')
mlinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkNumber.setStatus('mandatory')
mlinkTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkTable.setStatus('mandatory')
mlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1), ).setMaxAccess("readonly").setIndexNames((0, "ISOVIEW-MIB", "mlinkIndex"))
if mibBuilder.loadTexts: mlinkEntry.setStatus('mandatory')
mlinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkIndex.setStatus('mandatory')
mlinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkState.setStatus('mandatory')
mlinkSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkSendSeq.setStatus('mandatory')
mlinkRcvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkRcvSeq.setStatus('mandatory')
mlinkSendUpperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkSendUpperEdge.setStatus('mandatory')
mlinkRcvUpperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkRcvUpperEdge.setStatus('mandatory')
mlinkFramesLost = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlinkFramesLost.setStatus('mandatory')
deletedMlinkFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deletedMlinkFrames.setStatus('mandatory')
expressQueueCurrentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressQueueCurrentLength.setStatus('mandatory')
expressQueueUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expressQueueUpperLimit.setStatus('mandatory')
hiPriQueueCurrentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiPriQueueCurrentLength.setStatus('mandatory')
hiPriQueueUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hiPriQueueUpperLimit.setStatus('mandatory')
loPriQueueCurrentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loPriQueueCurrentLength.setStatus('mandatory')
loPriQueueUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loPriQueueUpperLimit.setStatus('mandatory')
mlinkWindow = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlinkWindow.setStatus('mandatory')
mlinkRxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlinkRxTimeout.setStatus('mandatory')
lanInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanInterfaceType.setStatus('mandatory')
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
bridgeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsTable.setStatus('mandatory')
bridgeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "bridgeStatsIndex"))
if mibBuilder.loadTexts: bridgeStatsEntry.setStatus('mandatory')
bridgeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeStatsIndex.setStatus('mandatory')
averageForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageForwarded.setStatus('mandatory')
maxForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxForwarded.setStatus('mandatory')
averageRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averageRejected.setStatus('mandatory')
maxRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRejected.setStatus('mandatory')
lanAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanAccepts.setStatus('mandatory')
lanRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanRejects.setStatus('mandatory')
deletedLanFrames = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deletedLanFrames.setStatus('mandatory')
stpTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTable.setStatus('mandatory')
stpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "stpIndex"))
if mibBuilder.loadTexts: stpEntry.setStatus('mandatory')
stpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpIndex.setStatus('mandatory')
pathCostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathCostMode.setStatus('mandatory')
pathCostAutoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathCostAutoValue.setStatus('mandatory')
pathCostManualValue = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pathCostManualValue.setStatus('mandatory')
portSpatState = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpatState.setStatus('mandatory')
portPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriorityMode.setStatus('mandatory')
portPriorityAutoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPriorityAutoValue.setStatus('mandatory')
portPriorityManualValue = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriorityManualValue.setStatus('mandatory')
spanningTree = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningTree.setStatus('mandatory')
spatPriority = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spatPriority.setStatus('mandatory')
spatHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spatHelloTimer.setStatus('mandatory')
spatResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spatResetTimer.setStatus('mandatory')
spatVersion = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 8))).clone(namedValues=NamedValues(("revisionC", 3), ("revision8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spatVersion.setStatus('mandatory')
spanningMcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spanningMcastAddr.setStatus('mandatory')
operatingMode = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatingMode.setStatus('mandatory')
preconfSourceFilter = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preconfSourceFilter.setStatus('mandatory')
typeFilter = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: typeFilter.setStatus('mandatory')
typePrioritisation = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: typePrioritisation.setStatus('mandatory')
dynamicLearningInLM = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicLearningInLM.setStatus('mandatory')
forgetAddressTimer = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forgetAddressTimer.setStatus('mandatory')
deleteAddressTimer = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteAddressTimer.setStatus('mandatory')
multicastDisposition = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastDisposition.setStatus('mandatory')
filterMatches = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterMatches.setStatus('mandatory')
ieeeFormatFilter = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieeeFormatFilter.setStatus('mandatory')
priorityMatches = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityMatches.setStatus('mandatory')
ieeeFormatPriority = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieeeFormatPriority.setStatus('mandatory')
averagePeriod = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: averagePeriod.setStatus('mandatory')
triangulation = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: triangulation.setStatus('mandatory')
adaptiveRouting = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveRouting.setStatus('mandatory')
adaptiveMcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaptiveMcastAddr.setStatus('mandatory')
arAddressInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 26))
standbyRemote = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyRemote.setStatus('mandatory')
standbyLocal = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 26, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: standbyLocal.setStatus('mandatory')
activeRemote = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 26, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeRemote.setStatus('mandatory')
activeLocal = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 26, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeLocal.setStatus('mandatory')
maxSerialLoading = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxSerialLoading.setStatus('mandatory')
serialLoadPeriod = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialLoadPeriod.setStatus('mandatory')
serialLoading = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialLoading.setStatus('mandatory')
filteringDataBaseTable = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30))
filteringDbTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbTable.setStatus('mandatory')
filteringDbEntry = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "filteringDbMacAddress"))
if mibBuilder.loadTexts: filteringDbEntry.setStatus('mandatory')
filteringDbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbMacAddress.setStatus('mandatory')
filteringDbDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbDisposition.setStatus('mandatory')
filteringDbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbStatus.setStatus('mandatory')
filteringDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbType.setStatus('mandatory')
filteringDbAction = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbAction.setStatus('mandatory')
filteringDbPage = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 3))
filteringDbPageValue = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 30, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filteringDbPageValue.setStatus('mandatory')
priorityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 31))
prioritySubTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 31, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioritySubTable.setStatus('mandatory')
priorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 31, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "priorityTableEntryType"))
if mibBuilder.loadTexts: priorityTableEntry.setStatus('mandatory')
priorityTableEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 31, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityTableEntryValue.setStatus('mandatory')
priorityTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 31, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityTableEntryType.setStatus('mandatory')
priorityTableAction = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 31, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityTableAction.setStatus('mandatory')
priorityPage = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 31, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priorityPage.setStatus('mandatory')
filterTable = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 32))
filterSubTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 32, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSubTable.setStatus('mandatory')
filterTableEntry = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 32, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "filterTableEntryType"))
if mibBuilder.loadTexts: filterTableEntry.setStatus('mandatory')
filterTableEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 32, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTableEntryValue.setStatus('mandatory')
filterTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 32, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTableEntryType.setStatus('mandatory')
filterTableAction = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 32, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTableAction.setStatus('mandatory')
filterPage = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 7, 32, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPage.setStatus('mandatory')
ipRSTable = MibTable((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRSTable.setStatus('mandatory')
ipRSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "ISOVIEW-MIB", "ipRSIndex"))
if mibBuilder.loadTexts: ipRSEntry.setStatus('mandatory')
ipRSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRSIndex.setStatus('mandatory')
gwProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwProtocol.setStatus('mandatory')
ifStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStatus.setStatus('mandatory')
receivedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivedTotal.setStatus('mandatory')
transmittedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmittedTotal.setStatus('mandatory')
outDiscardsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outDiscardsTotal.setStatus('mandatory')
noRouteTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noRouteTotal.setStatus('mandatory')
icmpRSTable = MibIdentifier((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2))
destUnreachLastRx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: destUnreachLastRx.setStatus('mandatory')
destUnreachLastTx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: destUnreachLastTx.setStatus('mandatory')
sourceQuenchLastRx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceQuenchLastRx.setStatus('mandatory')
sourceQuenchLastTx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceQuenchLastTx.setStatus('mandatory')
redirectsLastRx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirectsLastRx.setStatus('mandatory')
redirectsLastTx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: redirectsLastTx.setStatus('mandatory')
echoRequestsLastRx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: echoRequestsLastRx.setStatus('mandatory')
echoRequestsLastTx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: echoRequestsLastTx.setStatus('mandatory')
timeExceededLastRx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeExceededLastRx.setStatus('mandatory')
timeExceededLastTx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeExceededLastTx.setStatus('mandatory')
paramProbLastRx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramProbLastRx.setStatus('mandatory')
paramProbLastTx = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 2, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramProbLastTx.setStatus('mandatory')
ipRouting = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 10, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouting.setStatus('mandatory')
bootpRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpRetryCount.setStatus('optional')
downloadRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadRetryCount.setStatus('optional')
downloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadFilename.setStatus('optional')
bootserverIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootserverIpAddress.setStatus('optional')
loadserverIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadserverIpAddress.setStatus('optional')
uniqueBroadcastAddress = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uniqueBroadcastAddress.setStatus('optional')
tftpRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRetryCount.setStatus('optional')
tftpRetryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRetryPeriod.setStatus('optional')
initiateBootpDll = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 11, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: initiateBootpDll.setStatus('optional')
boothelperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boothelperEnabled.setStatus('optional')
boothelperHopsLimit = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boothelperHopsLimit.setStatus('optional')
boothelperForwardingAddress = MibScalar((1, 3, 6, 1, 4, 1, 170, 1, 1, 1, 12, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boothelperForwardingAddress.setStatus('optional')
mibBuilder.exportSymbols("ISOVIEW-MIB", portPriorityMode=portPriorityMode, ifStatus=ifStatus, redirectsLastTx=redirectsLastTx, spanningMcastAddr=spanningMcastAddr, ieee8023Index=ieee8023Index, pathCostMode=pathCostMode, lapbRcvOctetCount=lapbRcvOctetCount, phySerIfT1dRatePerChan=phySerIfT1dRatePerChan, bridgeStatsIndex=bridgeStatsIndex, bitec=bitec, portSpatState=portSpatState, filteringDbDisposition=filteringDbDisposition, portPriorityManualValue=portPriorityManualValue, spatVersion=spatVersion, filteringDbMacAddress=filteringDbMacAddress, icmpRSTable=icmpRSTable, timeExceededLastTx=timeExceededLastTx, portPriorityAutoValue=portPriorityAutoValue, ieee8023MACAddress=ieee8023MACAddress, downloadRetryCount=downloadRetryCount, forgetAddressTimer=forgetAddressTimer, ieeeFormatPriority=ieeeFormatPriority, initStation=initStation, lapbRcvFrameCount=lapbRcvFrameCount, deletedMlinkFrames=deletedMlinkFrames, stationResetCounter=stationResetCounter, filteringDbStatus=filteringDbStatus, snmpAccessPolicyPage=snmpAccessPolicyPage, activeLocal=activeLocal, ieee8023NewMACAddressIndex=ieee8023NewMACAddressIndex, serialLoading=serialLoading, ieee8023MACSubLayerStatus=ieee8023MACSubLayerStatus, standbyRemote=standbyRemote, filterPage=filterPage, phySerIfNumber=phySerIfNumber, ieee8023OctetsReceivedOks=ieee8023OctetsReceivedOks, trapDestPage=trapDestPage, ieee8023OctetsTransmittedOks=ieee8023OctetsTransmittedOks, ieeeFormatFilter=ieeeFormatFilter, p4850=p4850, retix=retix, snmpAccessPolicyAction=snmpAccessPolicyAction, phySerIfIndex=phySerIfIndex, priorityTable=priorityTable, lapbLastResetReason=lapbLastResetReason, lapbRetryCount=lapbRetryCount, trapDestinationTable=trapDestinationTable, router=router, station=station, destUnreachLastTx=destUnreachLastTx, lapbModeT1=lapbModeT1, averageRejected=averageRejected, loPriQueueUpperLimit=loPriQueueUpperLimit, spatResetTimer=spatResetTimer, ieee8023MulticastFramesTransmittedOks=ieee8023MulticastFramesTransmittedOks, downloadFilename=downloadFilename, filterSubTable=filterSubTable, loPriQueueCurrentLength=loPriQueueCurrentLength, filteringDbType=filteringDbType, freeHeaderCount=freeHeaderCount, resetStation=resetStation, ieee8023InternalMACReceiveErrors=ieee8023InternalMACReceiveErrors, expressQueueUpperLimit=expressQueueUpperLimit, bridgeStatsEntry=bridgeStatsEntry, triangulation=triangulation, bootserverIpAddress=bootserverIpAddress, queueUpperLimit=queueUpperLimit, snmpAccessPolicyEntry=snmpAccessPolicyEntry, mlinkEntry=mlinkEntry, tftpRetryPeriod=tftpRetryPeriod, lapbIndex=lapbIndex, mlinkSendSeq=mlinkSendSeq, accessPolicyIndex=accessPolicyIndex, ieee8023Number=ieee8023Number, ieee8023DeferredTransmissions=ieee8023DeferredTransmissions, transmittedTotal=transmittedTotal, lapbEntry=lapbEntry, noRouteTotal=noRouteTotal, lanAccepts=lanAccepts, filteringDbPage=filteringDbPage, phySerIfT1clockSource=phySerIfT1clockSource, maxRejected=maxRejected, multicastDisposition=multicastDisposition, ieee8023CarrierSenseErrors=ieee8023CarrierSenseErrors, ieee8023SQETestErrors=ieee8023SQETestErrors, ieee8023MulticastReceiveStatus=ieee8023MulticastReceiveStatus, lapbSendFrameCount=lapbSendFrameCount, stpTable=stpTable, trapDestEntryIpAddr=trapDestEntryIpAddr, lan=lan, filteringDbPageValue=filteringDbPageValue, lapb=lapb, p4760=p4760, trapDestEntry=trapDestEntry, mlinkFramesLost=mlinkFramesLost, lapbAutoT1value=lapbAutoT1value, product=product, dynamicLearningInLM=dynamicLearningInLM, mlinkRcvUpperEdge=mlinkRcvUpperEdge, p2244m2=p2244m2, gwProtocol=gwProtocol, typePrioritisation=typePrioritisation, spanningTree=spanningTree, lanQueueSize=lanQueueSize, paramProbLastTx=paramProbLastTx, portNumber=portNumber, ieee8023NewMACAddressValue=ieee8023NewMACAddressValue, phySerIfPortSpeed=phySerIfPortSpeed, priorityMatches=priorityMatches, adaptiveRouting=adaptiveRouting, mlinkState=mlinkState, sourceQuenchLastRx=sourceQuenchLastRx, phySerIfpartnerAddress=phySerIfpartnerAddress, serialTxQueueSize=serialTxQueueSize, ieee8023AlignmentErrors=ieee8023AlignmentErrors, snmpAccessPolicyType=snmpAccessPolicyType, averageForwarded=averageForwarded, receivedTotal=receivedTotal, filteringDbAction=filteringDbAction, phySerIfTransitDelay=phySerIfTransitDelay, processorLoading=processorLoading, filterTableEntryValue=filterTableEntryValue, mlinkIndex=mlinkIndex, spatHelloTimer=spatHelloTimer, snmpAccessPolicyObject=snmpAccessPolicyObject, ieee8023inRangeLengthErrors=ieee8023inRangeLengthErrors, accessMode=accessMode, bdn=bdn, phySerIfMeasuredSpeed=phySerIfMeasuredSpeed, redirectsLastRx=redirectsLastRx, filteringDataBaseTable=filteringDataBaseTable, p4941=p4941, p2265=p2265, mlink=mlink, ieee8023ExcessiveDeferrals=ieee8023ExcessiveDeferrals, boothelperEnabled=boothelperEnabled, boothelperHopsLimit=boothelperHopsLimit, ieee8023PromiscuousReceiveStatus=ieee8023PromiscuousReceiveStatus, p4820=p4820, lapbLinkReset=lapbLinkReset, lapbWindow=lapbWindow, ieee8023SingleCollisionFrames=ieee8023SingleCollisionFrames, lapbManualT1value=lapbManualT1value, ieee8023FramesTransmittedOks=ieee8023FramesTransmittedOks, ieee8023LateCollisions=ieee8023LateCollisions, pathCostAutoValue=pathCostAutoValue, preconfSourceFilter=preconfSourceFilter, filterTable=filterTable, ieee8023InternalMACTransmitErrors=ieee8023InternalMACTransmitErrors, echoRequestsLastTx=echoRequestsLastTx, mlinkRxTimeout=mlinkRxTimeout, ieee8023FrameTooLongs=ieee8023FrameTooLongs, ipRSEntry=ipRSEntry, trapDestEntryCommunityName=trapDestEntryCommunityName, mlinkSendUpperEdge=mlinkSendUpperEdge, mlinkRcvSeq=mlinkRcvSeq, phySerIfIsSpeedsettable=phySerIfIsSpeedsettable, authenticationTrapStatus=authenticationTrapStatus, expressQueueCurrentLength=expressQueueCurrentLength, boothelper=boothelper, stationTime=stationTime, pathCostManualValue=pathCostManualValue, spatPriority=spatPriority, freeBufferCount=freeBufferCount, prioritySubTable=prioritySubTable, p4942=p4942, br12=br12, internalQueueCurrentLength=internalQueueCurrentLength, maxSerialLoading=maxSerialLoading, filterTableEntry=filterTableEntry, filterTableEntryType=filterTableEntryType, echoRequestsLastRx=echoRequestsLastRx, serialLoadPeriod=serialLoadPeriod, ieee8023InitializeMAC=ieee8023InitializeMAC, lapbNumber=lapbNumber, ieee8023Table=ieee8023Table, ieee8023MultipleCollisionFrames=ieee8023MultipleCollisionFrames, standbyLocal=standbyLocal, deleteAddressTimer=deleteAddressTimer, priorityTableAction=priorityTableAction, phySerIfTable=phySerIfTable, ipRSTable=ipRSTable, initiateBootpDll=initiateBootpDll, maxForwarded=maxForwarded, stpEntry=stpEntry, passWord=passWord, phySerIfT1frameAndCode=phySerIfT1frameAndCode, priorityTableEntryValue=priorityTableEntryValue, newPhysBlkSize=newPhysBlkSize, paramProbLastRx=paramProbLastRx, lapbState=lapbState, lanInterfaceType=lanInterfaceType, filterMatches=filterMatches, lapbPolarity=lapbPolarity, mlinkWindow=mlinkWindow, averagePeriod=averagePeriod, lapbAbortCount=lapbAbortCount, bridgeStatsTable=bridgeStatsTable, adaptiveMcastAddr=adaptiveMcastAddr, snmpAccessPolicyTable=snmpAccessPolicyTable, mlinkNumber=mlinkNumber, operatingMode=operatingMode, ieee8023BroadcastFramesReceivedOks=ieee8023BroadcastFramesReceivedOks, lapbLastResetTime=lapbLastResetTime, phySerIfEntry=phySerIfEntry, p4660=p4660, ipRSIndex=ipRSIndex, sourceQuenchLastTx=sourceQuenchLastTx, resetStats=resetStats, priorityPage=priorityPage, ieee8023MulticastFramesReceivedOks=ieee8023MulticastFramesReceivedOks, ipRouting=ipRouting, boot=boot, filteringDbTable=filteringDbTable, bridge=bridge, stpIndex=stpIndex, ieee8023FramesReceivedOks=ieee8023FramesReceivedOks, hiPriQueueUpperLimit=hiPriQueueUpperLimit, arAddressInfo=arAddressInfo, hiPriQueueCurrentLength=hiPriQueueCurrentLength, ieee8023TransmitStatus=ieee8023TransmitStatus, lapbResetCount=lapbResetCount, activeRemote=activeRemote, ieee8023Entry=ieee8023Entry, third_party=third_party, ieee8023FCSErrors=ieee8023FCSErrors, timeExceededLastRx=timeExceededLastRx, uniqueBroadcastAddress=uniqueBroadcastAddress, phySerIf=phySerIf, phySerIfT1SlotLvalue=phySerIfT1SlotLvalue, priorityTableEntryType=priorityTableEntryType, ieee8023=ieee8023, lapbCrcErrorCount=lapbCrcErrorCount, trapDestAction=trapDestAction, priorityTableEntry=priorityTableEntry, tftpRetryCount=tftpRetryCount, ieee8023NewMACAddress=ieee8023NewMACAddress, lapbTable=lapbTable, trapDestEntryType=trapDestEntryType, lanRejects=lanRejects, p4880=p4880, ieee8023ExcessiveCollisions=ieee8023ExcessiveCollisions, ieee8023NewMACAddressEntry=ieee8023NewMACAddressEntry, physBlkSize=physBlkSize, phySerIfInterfaceType=phySerIfInterfaceType, bootpRetryCount=bootpRetryCount, communityName=communityName, phySerIfT1SlotHvalue=phySerIfT1SlotHvalue, loadserverIpAddress=loadserverIpAddress, ieee8023BroadcastFramesTransmittedOks=ieee8023BroadcastFramesTransmittedOks, destUnreachLastRx=destUnreachLastRx, filterTableAction=filterTableAction, lapbSendOctetCount=lapbSendOctetCount, boothelperForwardingAddress=boothelperForwardingAddress)
mibBuilder.exportSymbols("ISOVIEW-MIB", filteringDbEntry=filteringDbEntry, trapDestTable=trapDestTable, outDiscardsTotal=outDiscardsTotal, mlinkTable=mlinkTable, deletedLanFrames=deletedLanFrames, ieee8023outOfRangeLengthFields=ieee8023outOfRangeLengthFields, typeFilter=typeFilter)
