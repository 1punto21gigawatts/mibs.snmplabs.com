#
# PySNMP MIB module FUNI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FUNI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, enterprises, ObjectIdentity, Unsigned32, MibIdentifier, NotificationType, IpAddress, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, Integer32, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "enterprises", "ObjectIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "IpAddress", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "Integer32", "iso", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
atmfFuniMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 6, 1))
if mibBuilder.loadTexts: atmfFuniMIB.setLastUpdated('9705080000Z')
if mibBuilder.loadTexts: atmfFuniMIB.setOrganization('The ATM Forum')
if mibBuilder.loadTexts: atmfFuniMIB.setContactInfo('The ATM Forum 2570 West El Camino Real, Suite 304 Mountain View, CA 94040-1313 USA Phone: +1 415-949-6700 Fax: +1 415-949-6705 info@atmforum.com')
if mibBuilder.loadTexts: atmfFuniMIB.setDescription('The MIB module for managing a Version 2.0 FUNI logical interface.')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfFuni = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 6))
funiMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1))
class FuniValidVpi(TextualConvention, Integer32):
    description = 'This object defines the valid VPI values for a FUNI logical interface. Note for Mode 1a, 1b and 3, 10 bits in the FUNI frame header are used to identify the FUNI frame address; 4 of these 10 bits map to the 4 least-significant bits in the VPI field of an ATM cell header, for a total of 16 VPI values in the limited range of 0..15.In Mode 4, 24 bits in the FUNI frame header are used to identify the FUNI frame address; 8 of these 24 bits map to the 8 bits in the VPI field of an ATM cell header, for a total of 256 VPI values in the full range of 0..255.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FuniValidVci(TextualConvention, Integer32):
    description = 'This object defines the valid VCI values for a FUNI logical interface. Note in Mode 1a, 1b and 3, 10 bits in the FUNI frame header are used to identify the FUNI frame address; 6 of these 10 bits map to the 6 least-significant bits in the VCI field of an ATM cell header, for a total of 64 VCI values in the limited rate of 0..63. In Mode 4, 24 bits in the FUNI frame header are used to identify the FUNI frame address; 16 of these 24 bits map to the 16 bits in the VCI field of an ATM cell header, for a total of 65536 VCI values in the full range of 0..65535. Also note that VCI values 0 through 31, while considered valid, have been reserved by the ITU-T and the ATM Forum for various non-user applications (e.g., signaling, ILMI, etc.), and should be avoided for normal user applications.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

funiIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1), )
if mibBuilder.loadTexts: funiIfConfTable.setStatus('current')
if mibBuilder.loadTexts: funiIfConfTable.setDescription('A table of FUNI logical interface configuration information. This table provides objects not normally available in the IF-MIB or the ATM-MIB.')
funiIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: funiIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: funiIfConfEntry.setDescription('An entry in the FUNI logical interface configuration information table.')
funiIfConfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mode1a", 1), ("mode1b", 2), ("mode3", 3), ("mode4", 4))).clone('mode1a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfMode.setStatus('current')
if mibBuilder.loadTexts: funiIfConfMode.setDescription('This object allows the mode of operation for this FUNI logical interface to be configured.')
funiIfConfFcsBits = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fcsBits16", 1), ("fcsBits32", 2))).clone('fcsBits16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfFcsBits.setStatus('current')
if mibBuilder.loadTexts: funiIfConfFcsBits.setDescription('This object specifies whether a 16- or 32-bit FCS is used in each FUNI frame header over this FUNI logical interface.')
funiIfConfSigSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfSigSupport.setStatus('current')
if mibBuilder.loadTexts: funiIfConfSigSupport.setDescription('This object specifies whether support for signaling is enabled or disabled on this FUNI logical interface. A FUNI logical interface that cannot support signaling must only allow the value disabled(2). Specifying the type of signaling used on a FUNI logical interface is beyond the scope of the FUNI MIB.')
funiIfConfSigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 4), FuniValidVpi()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfSigVpi.setStatus('current')
if mibBuilder.loadTexts: funiIfConfSigVpi.setDescription('This object specifies the VPI value used for signaling on this FUNI logical interface. This object is valid only if signaling is supported on this FUNI logical interface.')
funiIfConfSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 5), FuniValidVci().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfSigVci.setStatus('current')
if mibBuilder.loadTexts: funiIfConfSigVci.setDescription('This object specifies the VCI value used for signaling on this FUNI logical interface. This object is valid only if signaling is supported on this FUNI logical interface.')
funiIfConfIlmiSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfIlmiSupport.setStatus('current')
if mibBuilder.loadTexts: funiIfConfIlmiSupport.setDescription('This object specifies whether ILMI is enabled or disabled on this FUNI logical interface. A FUNI logical interface that cannot support ILMI must only allow the value disabled(2).')
funiIfConfIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 7), FuniValidVpi()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfIlmiVpi.setStatus('current')
if mibBuilder.loadTexts: funiIfConfIlmiVpi.setDescription('This object specifies the VPI value used for ILMI on this FUNI logical interface. This object is valid only if ILMI is supported on this FUNI logical interface.')
funiIfConfIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 8), FuniValidVci().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfIlmiVci.setStatus('current')
if mibBuilder.loadTexts: funiIfConfIlmiVci.setDescription('This object specifies the VCI value used for ILMI on this FUNI logical interface. This object is valid only if ILMI is supported on this FUNI logical interface.')
funiIfConfOamSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfConfOamSupport.setStatus('current')
if mibBuilder.loadTexts: funiIfConfOamSupport.setDescription('This object specifies whether support for OAM cell/frame translation is enabled or disabled on this FUNI logical interface. A FUNI logical interface that cannot support OAM cell/frame translation must only allow the value disabled(2).')
funiIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2), )
if mibBuilder.loadTexts: funiIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: funiIfStatsTable.setDescription('A table of statistical information recorded at a FUNI logical interface.')
funiIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: funiIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: funiIfStatsEntry.setDescription('An entry in the FUNI logical interface statistics table.')
funiIfEstablishedPvccs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfEstablishedPvccs.setStatus('current')
if mibBuilder.loadTexts: funiIfEstablishedPvccs.setDescription('The number of permanent VCCs established on this FUNI logical interface.')
funiIfEstablishedSvccs = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfEstablishedSvccs.setStatus('current')
if mibBuilder.loadTexts: funiIfEstablishedSvccs.setDescription('The number of switched VCCs established on this FUNI logical interface.')
funiIfRxAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfRxAbortedFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfRxAbortedFrames.setDescription('The number of aborted frames received on this FUNI logical interface. A frame is considered aborted after receiving 7 or more continuous ones.')
funiIfRxTooShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfRxTooShortFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfRxTooShortFrames.setDescription('The number of frames received on this FUNI logical interface that were too short, and were thus discarded. The minimum frame size is 5 octets.')
funiIfRxTooLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfRxTooLongFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfRxTooLongFrames.setDescription('The number of frames received on this FUNI logical interface that were too large, and were thus discarded.')
funiIfRxFcsErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfRxFcsErrFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfRxFcsErrFrames.setDescription('The number of frames received on this FUNI logical interface that contained FCS errors, and were thus discarded.')
funiIfRxUnknownFaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfRxUnknownFaFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfRxUnknownFaFrames.setDescription('The number of frames received on this FUNI logical interface with an unrecognized frame address (e.g., frames that were received on an unknown FUNI logical interface virtual channel link, such as an unestablished SVC or an unprovisioned PVC.')
funiIfRxDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfRxDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfRxDiscardedFrames.setDescription('The number of frames received on this FUNI logical interface that were discarded due to any reason other than those described in other objects in this table (e.g., frames that were discarded because insufficient buffer space was available for storing the frame).')
funiIfTxTooLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfTxTooLongFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfTxTooLongFrames.setDescription('The number of frames that were too large to be transmitted on this FUNI logical interface, and were thus discarded.')
funiIfTxLenErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfTxLenErrFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfTxLenErrFrames.setDescription('The number of reassembled frames intended to be transmitted on this FUNI logical interface for which the AAL5 PDU trailer length fields did not match the actual PDU length, and were thus discarded.')
funiIfTxCrcErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfTxCrcErrFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfTxCrcErrFrames.setDescription('The number of reassembled frames intended to be transmitted on this FUNI logical interface for which the AAL5 PDU, AAL3/4, or OAM cell had CRC errors, and were thus discarded.')
funiIfTxPartialFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfTxPartialFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfTxPartialFrames.setDescription('The number of frames which could not be completely reassembled for reasons other than a reassembly timeout (e.g., missing AAL3/4 BOM cells, etc.), and were thus discarded before being transmitted on this FUNI logical interface.')
funiIfTxTimeOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfTxTimeOutFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfTxTimeOutFrames.setDescription('The number of frames which could not be completely reassembled due to a reassembly timeout, and were thus discarded before being transmitted on this FUNI logical interface.')
funiIfTxDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfTxDiscardedFrames.setStatus('current')
if mibBuilder.loadTexts: funiIfTxDiscardedFrames.setDescription('The number of frames intended to be transmitted on this FUNI logical interface that were discarded due to any reason other than those described in other objects in this table (e.g., frames that were discarded because insufficient buffer space was available for reassembling the frame).')
funiVclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3), )
if mibBuilder.loadTexts: funiVclStatsTable.setStatus('current')
if mibBuilder.loadTexts: funiVclStatsTable.setDescription('A table of FUNI statistical information for individual FUNI virtual channel links on FUNI logical interfaces.')
funiVclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FUNI-MIB", "funiVclFaVpi"), (0, "FUNI-MIB", "funiVclFaVci"))
if mibBuilder.loadTexts: funiVclStatsEntry.setStatus('current')
if mibBuilder.loadTexts: funiVclStatsEntry.setDescription('An entry in the FUNI virtual channel link statistics table.')
funiVclFaVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 1), FuniValidVpi())
if mibBuilder.loadTexts: funiVclFaVpi.setStatus('current')
if mibBuilder.loadTexts: funiVclFaVpi.setDescription('The VPI field of this FUNI virtual channel link, as identified within the frame address of the FUNI frame header.')
funiVclFaVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 2), FuniValidVci())
if mibBuilder.loadTexts: funiVclFaVci.setStatus('current')
if mibBuilder.loadTexts: funiVclFaVci.setDescription('The VCI field of this FUNI virtual channel link, as identified within the frame address of the FUNI frame header.')
funiVclRxClp0Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclRxClp0Frames.setStatus('current')
if mibBuilder.loadTexts: funiVclRxClp0Frames.setDescription('The number of FUNI frames with CLP=0 that were received over this FUNI virtual channel link.')
funiVclRxTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclRxTotalFrames.setStatus('current')
if mibBuilder.loadTexts: funiVclRxTotalFrames.setDescription('The total number of FUNI frames that were received over this FUNI virtual channel link.')
funiVclTxClp0Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclTxClp0Frames.setStatus('current')
if mibBuilder.loadTexts: funiVclTxClp0Frames.setDescription('The number of FUNI frames with CLP=0 that were transmitted over this FUNI virtual channel link.')
funiVclTxTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclTxTotalFrames.setStatus('current')
if mibBuilder.loadTexts: funiVclTxTotalFrames.setDescription('The total number of FUNI frames that were transmitted over this FUNI virtual channel link.')
funiVclRxClp0Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclRxClp0Octets.setStatus('current')
if mibBuilder.loadTexts: funiVclRxClp0Octets.setDescription('The number of octets within FUNI frames with CLP=0 that were received over this FUNI virtual channel link (excluding the opening flag, header octets, FCS octets, and closing flag). This is intended to count only those octets within the user payload of each FUNI frame received with CLP=0.')
funiVclRxTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclRxTotalOctets.setStatus('current')
if mibBuilder.loadTexts: funiVclRxTotalOctets.setDescription('The total number of octets within all FUNI frames that were received over this FUNI virtual channel link (excluding the opening flag, header octets, FCS octets, and closing flag). This is intended to count only those octets within the user payload of each received FUNI frame.')
funiVclTxClp0Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclTxClp0Octets.setStatus('current')
if mibBuilder.loadTexts: funiVclTxClp0Octets.setDescription('The number of octets within FUNI frames with CLP=0 that were transmitted over this FUNI virtual channel link (excluding the opening flag, header octets, FCS octets, and closing flag). This is intended to count only those octets within the user payload of each of each FUNI frame transmitted with CLP=0.')
funiVclTxTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclTxTotalOctets.setStatus('current')
if mibBuilder.loadTexts: funiVclTxTotalOctets.setDescription('The total number of octets within all FUNI frames that were transmitted over this FUNI virtual channel link (excluding the opening flag, header octets, FCS octets, and closing flag). This is intended to count only those octets within the user payload of each transmitted FUNI frame.')
funiVclRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclRxErrors.setStatus('current')
if mibBuilder.loadTexts: funiVclRxErrors.setDescription('The number of errored FUNI frames that were discarded after being received over this FUNI virtual channel link. More detail on errors detected on individual FUNI virtual channel links is not available on a per-VCL basis, but is available on a per-interface basis via the various counters in the FUNI logical interface statistics table.')
funiVclTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclTxErrors.setStatus('current')
if mibBuilder.loadTexts: funiVclTxErrors.setDescription('The number of FUNI frame reassembly processes that were aborted due an error before transmitting any FUNI frame over this FUNI virtual channel link. More detail on errors detected on individual FUNI virtual channel links is not available on a per-VCL basis, but is available on a per-interface basis via the various counters in the FUNI logical interface statistics table.')
funiVclRxOamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclRxOamFrames.setStatus('current')
if mibBuilder.loadTexts: funiVclRxOamFrames.setDescription('The number of FUNI OAM frames (i.e., with FID1=1 and FID2=0) that were received over this FUNI virtual channel link.')
funiVclTxOamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiVclTxOamFrames.setStatus('current')
if mibBuilder.loadTexts: funiVclTxOamFrames.setDescription('The number of FUNI OAM frames (i.e., with FID1=1 and FID2=0) that were transmitted over this FUNI virtual channel link.')
funiMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 2))
funiMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 2, 1))
funiMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 2, 2))
funiMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 2, 1, 1)).setObjects(("FUNI-MIB", "funiIfConfMinGroup"), ("FUNI-MIB", "funiIfStatsMinGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    funiMIBCompliance = funiMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: funiMIBCompliance.setDescription('The compliance statement for entities which implement the FUNI MIB. Groups of FUNI objects required for management of a FUNI logical interface on a FUNI network or user device are identified by the suffix MinGroup. Groups of optional FUNI objects are identified by the suffix OptionalGroup.')
funiIfConfMinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 2, 2, 1)).setObjects(("FUNI-MIB", "funiIfConfMode"), ("FUNI-MIB", "funiIfConfFcsBits"), ("FUNI-MIB", "funiIfConfSigSupport"), ("FUNI-MIB", "funiIfConfSigVpi"), ("FUNI-MIB", "funiIfConfSigVci"), ("FUNI-MIB", "funiIfConfIlmiSupport"), ("FUNI-MIB", "funiIfConfIlmiVpi"), ("FUNI-MIB", "funiIfConfIlmiVci"), ("FUNI-MIB", "funiIfConfOamSupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    funiIfConfMinGroup = funiIfConfMinGroup.setStatus('current')
if mibBuilder.loadTexts: funiIfConfMinGroup.setDescription('A collection of per-FUNI logical interface configuration objects required for management of a minimum function FUNI logical interface.')
funiIfStatsMinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 2, 2, 2)).setObjects(("FUNI-MIB", "funiIfEstablishedPvccs"), ("FUNI-MIB", "funiIfEstablishedSvccs"), ("FUNI-MIB", "funiIfRxAbortedFrames"), ("FUNI-MIB", "funiIfRxTooShortFrames"), ("FUNI-MIB", "funiIfRxTooLongFrames"), ("FUNI-MIB", "funiIfRxFcsErrFrames"), ("FUNI-MIB", "funiIfRxUnknownFaFrames"), ("FUNI-MIB", "funiIfRxDiscardedFrames"), ("FUNI-MIB", "funiIfTxTooLongFrames"), ("FUNI-MIB", "funiIfTxLenErrFrames"), ("FUNI-MIB", "funiIfTxCrcErrFrames"), ("FUNI-MIB", "funiIfTxPartialFrames"), ("FUNI-MIB", "funiIfTxTimeOutFrames"), ("FUNI-MIB", "funiIfTxDiscardedFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    funiIfStatsMinGroup = funiIfStatsMinGroup.setStatus('current')
if mibBuilder.loadTexts: funiIfStatsMinGroup.setDescription('A collection of per-FUNI logical interface statistics objects required for management of a minimum function FUNI logical interface.')
funiVclStatsOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 6, 1, 2, 2, 3)).setObjects(("FUNI-MIB", "funiVclRxClp0Frames"), ("FUNI-MIB", "funiVclRxTotalFrames"), ("FUNI-MIB", "funiVclTxClp0Frames"), ("FUNI-MIB", "funiVclTxTotalFrames"), ("FUNI-MIB", "funiVclRxClp0Octets"), ("FUNI-MIB", "funiVclRxTotalOctets"), ("FUNI-MIB", "funiVclTxClp0Octets"), ("FUNI-MIB", "funiVclTxTotalOctets"), ("FUNI-MIB", "funiVclRxErrors"), ("FUNI-MIB", "funiVclTxErrors"), ("FUNI-MIB", "funiVclRxOamFrames"), ("FUNI-MIB", "funiVclTxOamFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    funiVclStatsOptionalGroup = funiVclStatsOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: funiVclStatsOptionalGroup.setDescription('A collection of optional per-VCL statistics objects used to manage individual FUNI virtual channel links.')
mibBuilder.exportSymbols("FUNI-MIB", funiVclRxTotalFrames=funiVclRxTotalFrames, funiIfRxUnknownFaFrames=funiIfRxUnknownFaFrames, funiIfStatsEntry=funiIfStatsEntry, funiIfTxPartialFrames=funiIfTxPartialFrames, funiVclRxOamFrames=funiVclRxOamFrames, atmForum=atmForum, funiMIBGroups=funiMIBGroups, funiIfRxTooLongFrames=funiIfRxTooLongFrames, funiIfEstablishedSvccs=funiIfEstablishedSvccs, funiIfEstablishedPvccs=funiIfEstablishedPvccs, PYSNMP_MODULE_ID=atmfFuniMIB, funiIfRxTooShortFrames=funiIfRxTooShortFrames, funiVclStatsOptionalGroup=funiVclStatsOptionalGroup, funiVclTxOamFrames=funiVclTxOamFrames, funiIfConfTable=funiIfConfTable, funiVclRxErrors=funiVclRxErrors, funiIfConfMode=funiIfConfMode, funiVclRxTotalOctets=funiVclRxTotalOctets, atmfFuniMIB=atmfFuniMIB, funiIfRxFcsErrFrames=funiIfRxFcsErrFrames, funiVclTxTotalFrames=funiVclTxTotalFrames, funiVclFaVci=funiVclFaVci, funiVclFaVpi=funiVclFaVpi, funiVclRxClp0Frames=funiVclRxClp0Frames, funiVclTxClp0Frames=funiVclTxClp0Frames, atmForumNetworkManagement=atmForumNetworkManagement, FuniValidVci=FuniValidVci, atmfFuni=atmfFuni, funiIfTxLenErrFrames=funiIfTxLenErrFrames, funiIfTxCrcErrFrames=funiIfTxCrcErrFrames, funiIfTxTimeOutFrames=funiIfTxTimeOutFrames, funiIfConfIlmiVci=funiIfConfIlmiVci, funiVclTxClp0Octets=funiVclTxClp0Octets, funiVclRxClp0Octets=funiVclRxClp0Octets, funiVclTxErrors=funiVclTxErrors, funiIfTxDiscardedFrames=funiIfTxDiscardedFrames, funiIfRxAbortedFrames=funiIfRxAbortedFrames, funiVclStatsTable=funiVclStatsTable, funiMIBConformance=funiMIBConformance, funiIfStatsTable=funiIfStatsTable, funiIfTxTooLongFrames=funiIfTxTooLongFrames, funiIfConfEntry=funiIfConfEntry, funiIfConfMinGroup=funiIfConfMinGroup, funiIfConfOamSupport=funiIfConfOamSupport, funiMIBCompliances=funiMIBCompliances, funiMIBObjects=funiMIBObjects, funiMIBCompliance=funiMIBCompliance, funiVclTxTotalOctets=funiVclTxTotalOctets, funiVclStatsEntry=funiVclStatsEntry, funiIfConfSigSupport=funiIfConfSigSupport, funiIfRxDiscardedFrames=funiIfRxDiscardedFrames, funiIfStatsMinGroup=funiIfStatsMinGroup, funiIfConfIlmiSupport=funiIfConfIlmiSupport, funiIfConfFcsBits=funiIfConfFcsBits, FuniValidVpi=FuniValidVpi, funiIfConfIlmiVpi=funiIfConfIlmiVpi, funiIfConfSigVci=funiIfConfSigVci, funiIfConfSigVpi=funiIfConfSigVpi)
