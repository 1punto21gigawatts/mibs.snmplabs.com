#
# PySNMP MIB module ED-1032-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ED-1032-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, MibIdentifier, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, enterprises, Integer32, Gauge32, NotificationType, NotificationType, ObjectIdentity, Bits, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "MibIdentifier", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "enterprises", "Integer32", "Gauge32", "NotificationType", "NotificationType", "ObjectIdentity", "Bits", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mcData = MibIdentifier((1, 3, 6, 1, 4, 1, 289))
commDev = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2))
fibreChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1))
fcSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1))
ed_1032 = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1)).setLabel("ed-1032")
class DisplayString(OctetString):
    pass

class Ed1032SysOperStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operational", 1), ("redundant-failure", 2), ("minor-failure", 3), ("major-failure", 4), ("not-operational", 5))

class Ed1032SysState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("coming-online", 2), ("offline", 3), ("going-offline", 4))

class Ed1032FruCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("fru-bkplane", 1), ("fru-ctp", 2), ("fru-mpc", 3), ("fru-cmm", 4), ("fru-fan", 5), ("fru-power", 6), ("fru-panel", 7), ("fru-gsm", 8), ("fru-gls", 9), ("fru-glx", 10), ("fru-lsm", 11), ("fru-gxx", 12))

class Ed1032FruPosition(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Ed1032FruStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("backup", 2), ("update-busy", 3), ("failed", 4))

class Ed1032PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2048)

class Ed1032PortPhyState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("psNotInstalled", 1), ("psAvailable", 2), ("psBlocked", 3), ("psUnavailable", 4), ("psLinkFailure", 5), ("psLinkFailLOL", 6), ("psIntDiags", 7), ("psExtLoop", 8), ("psPortFail", 9), ("psSR", 10), ("psLR", 11))

class Ed1032PortStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4))

class Ed1032PortAdmStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("online", 1), ("offline", 2), ("testing", 3))

ed1032Sys = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1))
ed1032Fru = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2))
ed1032Port = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3))
ed1032SysCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysCurrentDate.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysCurrentDate.setDescription('The current date information.')
ed1032SysBootDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysBootDate.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysBootDate.setDescription('The date and time of the last IPL')
ed1032SysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysFirmwareVersion.setDescription('The current version of the firmware.')
ed1032SysTypeNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysTypeNum.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysTypeNum.setDescription('This object identifies ASCII type number for the unit.')
ed1032SysModelNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysModelNum.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysModelNum.setDescription('This object identifies ASCII model number for the unit.')
ed1032SysMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysMfg.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysMfg.setDescription('This object identifies ASCII manufacturer for the unit.')
ed1032SysPlantOfMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysPlantOfMfg.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysPlantOfMfg.setDescription('This object identifies ASCII plant of manufacturer for the unit.')
ed1032SysSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysSeqNum.setDescription('This object identifies ASCII sequence number for the unit.')
ed1032SysEcLevel = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysEcLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysEcLevel.setDescription('This object identifies ASCII EC level ID for the unit.')
ed1032SysOemSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysOemSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysOemSerialNum.setDescription('This object identifies ASCII OEM serial number for the unit.')
ed1032SysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 11), Ed1032SysOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysOperStatus.setDescription('The current operational status of the switch. The values are defined as follow: operational (1), redundant-failure (2), minor-failure (3), major-failure (4), not-operational (5).')
ed1032SysState = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 12), Ed1032SysState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032SysState.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysState.setDescription('If the edOperStatus of the switch is operational, the switch will be in one of the four states: online(1), coming-online(2), offline(3), and going-offline(4).')
ed1032SysAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ed1032SysAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032SysAdmStatus.setDescription('The desired administrative status of the switch. A management station may place the switch in a desired state by setting this object accordingly. The desired administrative status are online(1) and offline(2). The online means setting the switch to be accessible by an external Fibre Channel port, and offline means setting the switch to be inaccessible.')
ed1032FruTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ed1032FruTable.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruTable.setDescription('A table that contains one entry for each module.')
ed1032FruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "ED-1032-MIB", "ed1032FruCode"), (0, "ED-1032-MIB", "ed1032FruPosition"))
if mibBuilder.loadTexts: ed1032FruEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruEntry.setDescription('An entry containing the service parameters of the module.')
ed1032FruCode = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 1), Ed1032FruCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruCode.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruCode.setDescription('Field Replaceable Unit. A hardware component of the product that is replaceable as an entire unit. Each module defined in this MIB has a fixed FRU code. The values are defined as follow: fru-none (0) , fru-bkplane (1), fru-ctp (2), fru-mpc (3), fru-cmm (4), fru-fan (5), fru-power (6), fru-panel (7), fru-gsm (8), fru-gls (9), fru-glx (10), fru-lsm (11), fru-gxx (12).')
ed1032FruPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 2), Ed1032FruPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruPosition.setDescription('This object identifies the position of the module. Port cards start from 1 to 8. All other cards start from 1 to 1 or 2.')
ed1032FruStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 3), Ed1032FruStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruStatus.setDescription('This object identifies the operational status of the module. The active(1) state indicates that the current module is active. The backup(2) state indicates that the back up module is used. update-busy (3) state indicates that the module is in the updating process. The failed(4) state indicates that the current module is failed.')
ed1032FruPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruPartNumber.setDescription('This object identifies the part number of the module.')
ed1032FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruSerialNumber.setDescription('This object identifies the serial number of the module.')
ed1032FruPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruPowerOnHours.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruPowerOnHours.setDescription('This object indicates the number of the hours that the FRU has been in operation.')
ed1032FruTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032FruTestDate.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032FruTestDate.setDescription('This object indicates final test date of the module.')
ed1032PortTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ed1032PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortTable.setDescription('A table that contains one entry for each switch port (stitch only).')
ed1032PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "ED-1032-MIB", "ed1032PortIndex"))
if mibBuilder.loadTexts: ed1032PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortEntry.setDescription('An entry containing the information of the switch port.')
ed1032PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 1), Ed1032PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortIndex.setDescription('This object identifies the switch port.')
ed1032PortPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 2), Ed1032PortPhyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortPhyState.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortPhyState.setDescription('This object identifies the physical state of the port.')
ed1032PortOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 3), Ed1032PortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortOpStatus.setDescription('This object identifies the operational status of the port. The online state indicates that user frames can be passed.')
ed1032PortAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 4), Ed1032PortAdmStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ed1032PortAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortAdmStatus.setDescription('The desired state of the port. A management station may place the port in a desired state by setting this object accordingly. The testing(3) state indicates that no user frames can be passed. As the result of either explicit management action or per configuration information accessible by the switch, ed1032PortAdmStatus is then changed to either the online(1) or testing(3) states, or remains in the offline state.')
ed1032PortTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTxWords.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortTxWords.setDescription('This object counts the number of Fibre Channel words that the port has transmitted.')
ed1032PortRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxWords.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxWords.setDescription('This object counts the number of Fibre Channel words that the port has received.')
ed1032PortTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortTxFrames.setDescription('This object counts the number of (Fibre Channel) frames that the port has transmitted.')
ed1032PortRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxFrames.setDescription('This object counts the number of (Fibre Channel) frames that the port has received.')
ed1032PortRxC2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxC2Frames.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxC2Frames.setDescription('This object counts the number of Class 2 frames that the port has received.')
ed1032PortRxC3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxC3Frames.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxC3Frames.setDescription('This object counts the number of Class 3 frames that the port has received.')
ed1032PortRxLCs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxLCs.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxLCs.setDescription('This object counts the number of Link Control frames that the port has received.')
ed1032PortRxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxMcasts.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxMcasts.setDescription('This object counts the number of Multicast frames that the port has received.')
ed1032PortTooManyRdys = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTooManyRdys.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortTooManyRdys.setDescription('This object counts the number of times when RDYs exceeds the frames received.')
ed1032PortNoTxCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortNoTxCredits.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortNoTxCredits.setDescription('This object counts the amount of time that frame transmission is blocked by a transmit credit of zero. This is sampled once every 120 53.125 MHZ clocks, and the counter is incremented by 1 if the condition is true.')
ed1032PortRxEncFrs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxEncFrs.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxEncFrs.setDescription('This object counts the number of encoding error or disparity error inside or outside frames received.')
ed1032PortRxCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxCrcs.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxCrcs.setDescription('This object counts the number of CRC errors detected for frames received.')
ed1032PortRxTruncs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxTruncs.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxTruncs.setDescription('This object counts the number of truncated frames that the port has received.')
ed1032PortRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxTooLongs.setDescription('This object counts the number of received frames that are too long.')
ed1032PortRxBadEofs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxBadEofs.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxBadEofs.setDescription('This object counts the number of received frames that have bad EOF delimiter.')
ed1032PortRxBadOs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxBadOs.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxBadOs.setDescription('This object counts the number of invalid Ordered Sets received.')
ed1032PortC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortC3Discards.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortC3Discards.setDescription('This object counts the number of Class 3 frames that the port has discarded.')
ed1032PortMcastTimedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortMcastTimedOuts.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortMcastTimedOuts.setDescription('This object counts the number of Multicast frames that has been timed out.')
ed1032PortTxMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTxMcasts.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortTxMcasts.setDescription('This object counts the number of Multicast frames that has been transmitted.')
ed1032PortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortTxThroughput.setDescription('This object presents the Bps transmission rate.')
ed1032PortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ed1032PortRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ed1032PortRxThroughput.setDescription('This object presents the Bps reception rate.')
ed1032PortScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,1)).setObjects(("ED-1032-MIB", "ed1032PortOpStatus"))
if mibBuilder.loadTexts: ed1032PortScn.setDescription('An ed1032PortScn(1) is generated whenever a Fc_Port changes its operational state. For instance, the Fc_Port goes from on-line to offline.')
ed1032FruScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,2)).setObjects(("ED-1032-MIB", "ed1032FruStatus"))
if mibBuilder.loadTexts: ed1032FruScn.setDescription('An ed1032FruScn(2) is generated whenever a FRU status changes its operational state.')
mibBuilder.exportSymbols("ED-1032-MIB", Ed1032FruStatus=Ed1032FruStatus, ed1032FruCode=ed1032FruCode, Ed1032SysOperStatus=Ed1032SysOperStatus, ed1032PortRxBadOs=ed1032PortRxBadOs, ed1032SysMfg=ed1032SysMfg, ed1032Sys=ed1032Sys, ed1032SysCurrentDate=ed1032SysCurrentDate, ed1032FruTestDate=ed1032FruTestDate, ed1032PortRxCrcs=ed1032PortRxCrcs, ed1032SysTypeNum=ed1032SysTypeNum, ed1032PortC3Discards=ed1032PortC3Discards, ed1032SysOperStatus=ed1032SysOperStatus, ed1032PortRxFrames=ed1032PortRxFrames, ed1032SysOemSerialNum=ed1032SysOemSerialNum, Ed1032SysState=Ed1032SysState, ed1032PortTable=ed1032PortTable, Ed1032FruCode=Ed1032FruCode, ed1032Port=ed1032Port, ed1032PortPhyState=ed1032PortPhyState, ed1032SysFirmwareVersion=ed1032SysFirmwareVersion, mcData=mcData, Ed1032PortIndex=Ed1032PortIndex, ed1032PortRxMcasts=ed1032PortRxMcasts, ed1032FruPartNumber=ed1032FruPartNumber, ed1032PortNoTxCredits=ed1032PortNoTxCredits, ed1032FruScn=ed1032FruScn, ed1032PortRxThroughput=ed1032PortRxThroughput, DisplayString=DisplayString, ed1032FruStatus=ed1032FruStatus, ed1032FruEntry=ed1032FruEntry, ed1032PortRxC2Frames=ed1032PortRxC2Frames, ed1032SysAdmStatus=ed1032SysAdmStatus, ed1032PortTxWords=ed1032PortTxWords, Ed1032PortStatus=Ed1032PortStatus, ed1032PortOpStatus=ed1032PortOpStatus, ed1032PortRxWords=ed1032PortRxWords, Ed1032FruPosition=Ed1032FruPosition, Ed1032PortPhyState=Ed1032PortPhyState, ed1032SysState=ed1032SysState, ed1032PortEntry=ed1032PortEntry, ed1032PortTooManyRdys=ed1032PortTooManyRdys, ed1032PortRxEncFrs=ed1032PortRxEncFrs, ed1032PortScn=ed1032PortScn, ed1032SysSeqNum=ed1032SysSeqNum, ed1032PortRxLCs=ed1032PortRxLCs, Ed1032PortAdmStatus=Ed1032PortAdmStatus, ed1032SysModelNum=ed1032SysModelNum, ed1032FruSerialNumber=ed1032FruSerialNumber, ed1032SysEcLevel=ed1032SysEcLevel, ed1032PortTxThroughput=ed1032PortTxThroughput, ed1032SysPlantOfMfg=ed1032SysPlantOfMfg, ed1032FruTable=ed1032FruTable, fibreChannel=fibreChannel, commDev=commDev, ed1032PortRxBadEofs=ed1032PortRxBadEofs, ed1032FruPosition=ed1032FruPosition, ed1032PortMcastTimedOuts=ed1032PortMcastTimedOuts, ed1032PortTxMcasts=ed1032PortTxMcasts, ed1032SysBootDate=ed1032SysBootDate, fcSwitch=fcSwitch, ed_1032=ed_1032, ed1032PortTxFrames=ed1032PortTxFrames, ed1032PortIndex=ed1032PortIndex, ed1032PortRxTruncs=ed1032PortRxTruncs, ed1032PortRxTooLongs=ed1032PortRxTooLongs, ed1032PortRxC3Frames=ed1032PortRxC3Frames, ed1032PortAdmStatus=ed1032PortAdmStatus, ed1032FruPowerOnHours=ed1032FruPowerOnHours, ed1032Fru=ed1032Fru)
