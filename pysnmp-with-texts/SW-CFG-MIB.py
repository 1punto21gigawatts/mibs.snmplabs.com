#
# PySNMP MIB module SW-CFG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-CFG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, TimeTicks, Bits, Integer32, NotificationType, Gauge32, NotificationType, Unsigned32, Counter64, iso, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Bits", "Integer32", "NotificationType", "Gauge32", "NotificationType", "Unsigned32", "Counter64", "iso", "IpAddress", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbSwitchG1Il = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50))
nbSwitchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 13))
nbSwMacTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5), )
if mibBuilder.loadTexts: nbSwMacTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacTable.setDescription('A table that contains Learning Table with fields that does not exsist in dot1dTpFdbTable.')
nbSwMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1), ).setIndexNames((0, "SW-CFG-MIB", "nbSwMac"), (0, "SW-CFG-MIB", "nbSwMacVid"))
if mibBuilder.loadTexts: nbSwMacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacEntry.setDescription('Information about a specific MAC address in the nbSwMacTable.')
nbSwMac = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwMac.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMac.setDescription('MAC address for which the bridge has forwarding and/or filtering information.')
nbSwMacVid = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwMacVid.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacVid.setDescription("Tag of the entry: the address 'Address recognition' is concatenation of nbSwMac and nbSwMacVid. When ISVP is not implemented or ISVL mode is disabled, this field in SET/NEXT operations may have any value, GET operation should return 0.")
nbSwMacVidx = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwMacVidx.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacVidx.setDescription("Outbound VLAN tag: if frame 'Address recognition' was resolved with this entry, the forwarding will be maked according the VLAN with this tag. When ISVP is not implemented or ISVL mode is disabled, this field in SET operations may have any value, GET operation should return 0.")
nbSwMacGetViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwMacGetViewIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacGetViewIndex.setDescription('Sequantial index of the entry.')
nbSwMacPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwMacPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacPort.setDescription("Port of the entry. '0' value indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address. Another words, the frame will be forwarding 'to the CPU only' and the bridge will sovle, what it must be done with this frame.")
nbSwMacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwMacMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacMode.setDescription("Status of the entry: Only 'dynamic (1)' entries are aged. Note, that when the bridge is to age some dynamic entry in nbSwRunVlansMode=isvpMode (3) case, it must delete all static(2) entres with this MAC.")
nbSwMacTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwMacTagged.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacTagged.setDescription("'Tagged' state of the entry. When ISVP is not implemented or ISVL mode is disabled, this field in SET operations may have any value, GET operation should return 0.")
nbSwMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwMacStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwMacStatus.setDescription("State of the entry: Only 'valid(1)' entries participate in the forwarding/filtering process. The new entry is created when PDU with nbSwMacStatus=valid(1), nbSwMac, nbSwMacVid and optionally nbSwMacPort (default '0'), nbSwMacVidx (default nbSwMacVid) and nbSwMacMode (default dynamic (1)) comes. If {nbSwMac,nbSwMacVid} exists, the bridge replaces it. The old entry is deleted when PDU with nbSwMacStatus=invalid(2), nbSwMac, nbSwMacVid comes. The old entry is modified when PDU with nbSwMac, nbSwMacVid and new value of fields nbSwMacPort and/or nbSwMacVidx and/or nbSwMacMode comes.")
nbSwPortCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6))
nbSwPortsMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortsMaxNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortsMaxNumber.setDescription('Maximum number of Switching Ports supported by the system.')
nbSwPortsActualNumber = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortsActualNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortsActualNumber.setDescription('Actual number of Switching Ports supported by the system.')
nbSwPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3), )
if mibBuilder.loadTexts: nbSwPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortTable.setDescription('A list of the port configuration entries. The number of entries is given by nbSwPortsMaxNumber.')
nbSwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1), ).setIndexNames((0, "SW-CFG-MIB", "nbSwPortIndex"))
if mibBuilder.loadTexts: nbSwPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortEntry.setDescription('Contains the information necessary to configure/describe a port configuration. The number of rows/entries is fixed. A row/entry may not be created or deleted.')
nbSwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortIndex.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbSwPortsMaxNumber. There may be holes in the ports sequence.')
nbSwPortLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("eth10", 2), ("eth100", 3), ("eth10-100", 4), ("eth100B", 5), ("eth1000B", 6), ("atmLane", 7), ("eth100Grp", 8), ("eth10-100Grp", 9), ("fddi", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortLanType.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortLanType.setDescription('The port LAN type that is installed (if any).')
nbSwPortIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("aui", 1), ("tp", 2), ("auiTp", 3), ("tpfd", 4), ("coax", 5), ("foMm", 6), ("foSm", 7), ("none", 8), ("foSxM", 9), ("foLxM", 10), ("foLxS1", 11), ("foLxS2", 12), ("foLxS3", 13), ("foM", 14), ("foMX", 15), ("foS1", 16), ("foS2", 17), ("foS3", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortIfType.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortIfType.setDescription('The port Physical Interface type that is installed (if any).')
nbSwPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortLink.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortLink.setDescription('The port Link Integrity status.')
nbSwPortFctrl = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwPortFctrl.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortFctrl.setDescription('The port Flow Control mode selection: enable (default) or disable.')
nbSwPortDplex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("halfDuplex", 2), ("fullDuplex", 3))).clone('halfDuplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwPortDplex.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortDplex.setDescription('The port Duplex mode selection: halfDuplex ( default) or fullDuplex.')
nbSwPortSpeedSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("autoSense", 2), ("force10", 3), ("force100", 4), ("force1000", 5))).clone('autoSense')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwPortSpeedSelect.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortSpeedSelect.setDescription('The port Speed Selection mode.')
nbSwPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortSpeed.setDescription('The Ethernet port Real Speed in MBps.')
nbSwPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("portDisable", 2), ("portEnable", 3))).clone('portEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortEnable.setDescription('Port Enable/Disable mode.')
nbSwPortIsvpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("access", 2), ("trunk", 3), ("nonIsvp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbSwPortIsvpMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortIsvpMode.setDescription('The Inter-Switch Virtual Mode of this port. nonIsvp(3) means that the port does not support this mode of operation. access(1) means the the port is in Access mode. trunk(2) means the port is in Trunk mode.')
nbSwPortValid = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortValid.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortValid.setDescription('')
nbSwPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7), )
if mibBuilder.loadTexts: nbSwPortStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatTable.setDescription('A list of the ports ethernet statistics entries. The number of entries is given by nbSwPortsMaxNumber.')
nbSwPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1), ).setIndexNames((0, "SW-CFG-MIB", "nbSwPortStatIndex"))
if mibBuilder.loadTexts: nbSwPortStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatEntry.setDescription('Contains the information about the Port Ethernet Statistics. The number of rows/entries is fixed. A row/entry may not be created or deleted.')
nbSwPortStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatIndex.setDescription('A unique value for each switched port. Its value ranges from 1 to the value of nbSwPortsMaxNumber. There may be holes in the ports sequence.')
nbSwPortStatBtRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatBtRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatBtRec.setDescription('The total number of Bytes received on the Port.')
nbSwPortStatFrRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatFrRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatFrRec.setDescription('The total number of Frames received on the Port.')
nbSwPortStatMulticastFrRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatMulticastFrRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatMulticastFrRec.setDescription('The number of Multicast Frames received on the Port.')
nbSwPortStatBroadcastFrRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatBroadcastFrRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatBroadcastFrRec.setDescription('The number of Broadcast Frames received on the Port.')
nbSwPortStatUnicastFrRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatUnicastFrRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatUnicastFrRec.setDescription('The number of Unicast Frames received on the Port.')
nbSwPortStatBtSent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatBtSent.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatBtSent.setDescription('The total number of Bytes sent from the Port.')
nbSwPortStatFrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatFrSent.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatFrSent.setDescription('The total number of Frames sent from the Port.')
nbSwPortStatExcessiveCollis = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatExcessiveCollis.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatExcessiveCollis.setDescription('A number of Frames for which transmission on a particular Port fails due to Excessive Collisions.')
nbSwPortStatSingleCollis = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatSingleCollis.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatSingleCollis.setDescription('A number of successfully transmitted Frames on a particular Port for which transmission is inhibited by exactly one Collision.')
nbSwPortStatMultipleCollis = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatMultipleCollis.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatMultipleCollis.setDescription('A number of successfully transmitted Frames on a particular Port for which transmission is inhibited by more than one Collision.')
nbSwPortStatLateCollis = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatLateCollis.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatLateCollis.setDescription('The number of times that a Collision is detected on a particular Port later than 512 bit-times (51.2 microseconds on a 10 Mbit/s system) into the transmission of a packet.')
nbSwPortStatAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatAlignmentErrors.setDescription('A number of Frames received on a particular Port that are not an integral number of Bytes in length and do not pass the FCS check.')
nbSwPortStatFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatFCSErrors.setDescription('A number of Frames received on a particular Port that are an integral number of Bytes in length but do not pass the FCS check.')
nbSwPortStatFrDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatFrDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatFrDiscarded.setDescription('The number of inbound Frames which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol.')
nbSwPortStatBadLongFr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatBadLongFr.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatBadLongFr.setDescription('The total number of Frames received that were longer than 1518 Bytes long and were not an integral number of octets in length or had a bad Frame Check Sequence (FCS).')
nbSwPortStatGoodLongFr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatGoodLongFr.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatGoodLongFr.setDescription('The total number of Frames received that were longer than 1518 Bytes long and were otherwise well formed.')
nbSwPortStatGoodShortFr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatGoodShortFr.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatGoodShortFr.setDescription('The total number of Frames received that were less than 64 Bytes long and were otherwise well formed.')
nbSwPortStatValid = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 50, 13, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("broken", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbSwPortStatValid.setStatus('mandatory')
if mibBuilder.loadTexts: nbSwPortStatValid.setDescription('')
mibBuilder.exportSymbols("SW-CFG-MIB", nbSwitchConfig=nbSwitchConfig, nbSwPortStatBtRec=nbSwPortStatBtRec, nbSwPortStatIndex=nbSwPortStatIndex, nbSwMacTable=nbSwMacTable, nbSwMacEntry=nbSwMacEntry, nbSwPortSpeedSelect=nbSwPortSpeedSelect, nbSwitchG1Il=nbSwitchG1Il, nbSwPortCfg=nbSwPortCfg, nbSwPortStatBadLongFr=nbSwPortStatBadLongFr, nbSwPortStatGoodShortFr=nbSwPortStatGoodShortFr, nbSwPortSpeed=nbSwPortSpeed, nbSwPortStatFCSErrors=nbSwPortStatFCSErrors, nbSwMacPort=nbSwMacPort, nbSwPortStatValid=nbSwPortStatValid, nbSwPortStatExcessiveCollis=nbSwPortStatExcessiveCollis, nbSwPortsMaxNumber=nbSwPortsMaxNumber, nbSwMacVidx=nbSwMacVidx, nbSwPortLanType=nbSwPortLanType, MacAddress=MacAddress, nbSwPortTable=nbSwPortTable, nbSwPortStatSingleCollis=nbSwPortStatSingleCollis, nbSwPortIndex=nbSwPortIndex, nbSwPortEnable=nbSwPortEnable, nbSwPortStatFrRec=nbSwPortStatFrRec, nbSwPortStatBroadcastFrRec=nbSwPortStatBroadcastFrRec, nbSwPortStatBtSent=nbSwPortStatBtSent, nbSwPortStatFrDiscarded=nbSwPortStatFrDiscarded, nbSwMac=nbSwMac, nbSwMacGetViewIndex=nbSwMacGetViewIndex, nbSwPortFctrl=nbSwPortFctrl, nbSwPortValid=nbSwPortValid, nbSwPortIsvpMode=nbSwPortIsvpMode, nbSwPortStatGoodLongFr=nbSwPortStatGoodLongFr, nbSwPortStatMulticastFrRec=nbSwPortStatMulticastFrRec, nbSwPortStatMultipleCollis=nbSwPortStatMultipleCollis, nbSwPortIfType=nbSwPortIfType, nbSwPortStatAlignmentErrors=nbSwPortStatAlignmentErrors, nbSwPortEntry=nbSwPortEntry, nbSwMacTagged=nbSwMacTagged, nbSwPortLink=nbSwPortLink, nbSwMacStatus=nbSwMacStatus, nbSwitchG1=nbSwitchG1, nbase=nbase, nbSwPortStatTable=nbSwPortStatTable, nbSwPortStatUnicastFrRec=nbSwPortStatUnicastFrRec, nbSwMacMode=nbSwMacMode, nbSwPortStatFrSent=nbSwPortStatFrSent, nbSwPortsActualNumber=nbSwPortsActualNumber, nbSwMacVid=nbSwMacVid, nbSwPortStatLateCollis=nbSwPortStatLateCollis, nbSwPortStatEntry=nbSwPortStatEntry, nbSwPortDplex=nbSwPortDplex)
