#
# PySNMP MIB module FDRY-MPLS-L2VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FDRY-MPLS-L2VPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
snMpls, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snMpls")
VlanTagMode, PortPriorityTC = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "VlanTagMode", "PortPriorityTC")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
pwEnetPwInstance, = mibBuilder.importSymbols("PW-ENET-STD-MIB", "pwEnetPwInstance")
pwName, pwIndex, pwID = mibBuilder.importSymbols("PW-STD-MIB", "pwName", "pwIndex", "pwID")
PwOperStatusTC, = mibBuilder.importSymbols("PW-TC-STD-MIB", "PwOperStatusTC")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, Integer32, MibIdentifier, Counter64, IpAddress, Gauge32, Unsigned32, ObjectIdentity, Bits, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Integer32", "MibIdentifier", "Counter64", "IpAddress", "Gauge32", "Unsigned32", "ObjectIdentity", "Bits", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
vplsConfigEntry, vplsConfigIndex, vplsConfigName = mibBuilder.importSymbols("VPLS-GENERIC-MIB", "vplsConfigEntry", "vplsConfigIndex", "vplsConfigName")
fdryMplsL2VpnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2))
fdryMplsL2VpnMIB.setRevisions(('2012-04-04 00:00', '2010-06-02 00:00', '2008-02-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fdryMplsL2VpnMIB.setRevisionsDescriptions(('Added Routed, Switched Packet and Byte statistics to brcdVplsEndptVlanExtStatsTable.', 'Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', 'Initial revision',))
if mibBuilder.loadTexts: fdryMplsL2VpnMIB.setLastUpdated('201204040000Z')
if mibBuilder.loadTexts: fdryMplsL2VpnMIB.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: fdryMplsL2VpnMIB.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: fdryMplsL2VpnMIB.setDescription("The Brocade proprietary MIB module for L2 VPN. This mib is built on the current L2VPN draft mib. It has additional information for Virtual Leased Line (VLL), VLL-Local and Virtual Private LAN Service (VPLS) Endpoints, as well as for VPLS Instance. Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class MplsServiceType(TextualConvention, Integer32):
    description = 'MPLS VLL service types, VLL, VLL-local or VPLS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vll", 1), ("vllLocal", 2), ("vpls", 3))

class AdminStatus(TextualConvention, Integer32):
    description = 'Administrative status of a given management entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("up", 1), ("down", 2), ("testing", 3))

class ClassOfService(TextualConvention, Unsigned32):
    description = 'Class Of Service (COS) value of a given management entity. Value 255 means that COS is not explicitly configured. Valid COS values are between 0 and 7.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )
class Layer2StateTC(TextualConvention, Integer32):
    description = 'Specifies the layer2 state a given interface can take..'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("preforwarding", 5), ("forwarding", 6))

class FdryPwServiceType(TextualConvention, Integer32):
    description = 'MPLS pseudo-wire service types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vll", 1), ("vllLocal", 2), ("vpls", 3))

class PwVlanCfg(TextualConvention, Unsigned32):
    description = 'VLAN configuration for Ethernet PW. Values between 0 and 4095 indicate the actual VLAN field value. A value of 4096 indicates that the object refers to untagged frames, i.e. frames without a 802.1Q field. A value of 4097 indicates that the object is not relevant.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4097)

fdryMplsVpnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 0))
fdryMplsVllInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1))
fdryMplsVplsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2))
brcdVplsScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 5))
fdryVllEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1), )
if mibBuilder.loadTexts: fdryVllEndPointTable.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointTable.setDescription('This table specifies information about the VLL and VLL-local endpoints which are not available in the PW tables.')
fdryVllEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1), ).setIndexNames((0, "FDRY-MPLS-L2VPN-MIB", "fdryVllEndPointServiceType"), (0, "PW-STD-MIB", "pwIndex"), (0, "PW-ENET-STD-MIB", "pwEnetPwInstance"))
if mibBuilder.loadTexts: fdryVllEndPointEntry.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointEntry.setDescription('A row in this table represents a VLL or VLL-local end point for a pseudo-wire (PW) virtual connection across a packet network. For a VLL, we would have one instance of this table for a given PW. For a VLL-local, there would be two instances of this table for a given PW. It is indexed by fdryVllEndPointServiceType, pwIndex, and pwEnetPwInstance. The pwIndex is the index of pwTable, and {pwIndex, pwEnetPwInstance} together provides an instance in the pwEnetTable. A row can be created by an operator command after having created a row in the pwTable and pwEnetTable. 1) Objects MUST NOT be changed after row activation. 2) Objects MAY be changed when the PW is defined as not active. A change of these objects involves re-signaling of the PW or it might be traffic affecting. End point not active is defined as one of the following conditions: a) The pwRowStatus is notInService(2). b) The pwRowStatus is notReady(3). c) The pwAdminStatus is down(2). ')
fdryVllEndPointServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 1), MplsServiceType())
if mibBuilder.loadTexts: fdryVllEndPointServiceType.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointServiceType.setDescription('A service type indicating VLL or VLL-local service for this endpoint. The value vpls(3) is not used in this table. ')
fdryVllEndPointVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 2), VlanTagMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVllEndPointVlanTagMode.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointVlanTagMode.setDescription('This value indicates the vlan mode for this endpoint. The values, dual(3) and other(4) is not used in this table. ')
fdryVllEndPointClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 3), ClassOfService()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVllEndPointClassOfService.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointClassOfService.setDescription('This value indicates the Class Of Service for this endpoint. For VLL, this value is used to select the appropriate tunnel whose COS value is either same, or almost approaching this value. For VLL-local, this value is applied to the ingress packet of an endpoint ')
fdryVllEndPointInHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVllEndPointInHCPkts.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointInHCPkts.setDescription('This value indicates the number of packets ingressing into this endpoint. ')
fdryVllEndPointOutHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVllEndPointOutHCPkts.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointOutHCPkts.setDescription('This value indicates the number of packets egressing out from this endpoint. For VLL-local, this value could be the fdryVllEndPointInHCPkts of the other endpoint of this VLL instance. But since rate limit could be applied to the incoming packet, the count value will not be accurate. Due to this, the value will be 0 for VLL-local. ')
fdryVllEndPointAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 6), AdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVllEndPointAdminStatus.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointAdminStatus.setDescription('The desired administrative status of this endpoint. This object MAY be set at any time. ')
fdryVllEndPointOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 7), PwOperStatusTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVllEndPointOperStatus.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointOperStatus.setDescription('This object indicates the operational status of this endpoint. Only values up(1), down(2) are used in this table ')
fdryVllEndPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVllEndPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified except this object, and the fdryVllEndPointAdminStatus. ')
fdryVllEndPointInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 9), PwVlanCfg()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVllEndPointInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointInnerVlanId.setDescription('This value indicates the inner vlan id for this endpoint. Returns 0 if not configured or is not supported. ')
fdryVllEndPointInHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVllEndPointInHCOctets.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointInHCOctets.setDescription('This value indicates the number of octets ingressing into this endpoint from a Customer Edge (CE) device. This counter is supported in CES/CER platform. ')
fdryVllEndPointOutHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVllEndPointOutHCOctets.setStatus('current')
if mibBuilder.loadTexts: fdryVllEndPointOutHCOctets.setDescription('This value indicates the number of octets egressing out from this endpoint towards the Customer Edge (CE) device. Within CES/CER, any packet coming in from the tunnel will have its MPLS header as part of the octet count. ')
brcdVllEndptVlanExtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 2), )
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsTable.setDescription('This table contains the VLAN extended statistics for VLL endpoints.')
brcdVllEndptVlanExtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 2, 1), ).setIndexNames((0, "FDRY-MPLS-L2VPN-MIB", "fdryVllEndPointServiceType"), (0, "PW-STD-MIB", "pwIndex"), (0, "PW-ENET-STD-MIB", "pwEnetPwInstance"), (0, "FDRY-MPLS-L2VPN-MIB", "brcdVllEndptVlanExtStatsPriorityId"))
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsEntry.setDescription('A row in this table represents a VLAN extended statistics accounting entry of a VLL endpoint.')
brcdVllEndptVlanExtStatsPriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 2, 1, 1), PortPriorityTC())
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsPriorityId.setStatus('current')
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsPriorityId.setDescription('Identifies the port QOS priority. The values 1 through 8 internally maps to priorities 0 through 7. The value 128 indicates that priority-level accounting is not enabled')
brcdVllEndptVlanExtStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsInPkts.setDescription('The number of valid frames received by this endpoint from the Customer Edge (CE).')
brcdVllEndptVlanExtStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsOutPkts.setDescription('The number of valid frames transmitted by this endpoint to the Customer Edge (CE).')
brcdVllEndptVlanExtStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsInOctets.setDescription('The bytes count received by this endpoint from the Customer Edge (CE).')
brcdVllEndptVlanExtStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVllEndptVlanExtStatsOutOctets.setDescription('The bytes count transmitted by this endpoint to the Customer Edge (CE).')
fdryVplsEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1), )
if mibBuilder.loadTexts: fdryVplsEndPointTable.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointTable.setDescription('This table specifies information about the VPLS endpoints which are not available in the PW mib, or VPLS draft mib.')
fdryVplsEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1), ).setIndexNames((0, "VPLS-GENERIC-MIB", "vplsConfigIndex"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPointPortVlan"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPointIfIndex"))
if mibBuilder.loadTexts: fdryVplsEndPointEntry.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointEntry.setDescription('A row in this table represents a VPLS end point for a given VPLS instance. The VPLS instance is represented by vplsConfigTable and fdryVplsTable. For a given VPLS instance, there could be multiple instances of rows within this table, each describing one endpoint. For a given endpoint, there will be one VPLS instance. A given endpoint is represented by vplsConfigIndex (VPLS instance), vlan id, and ifIndex of the physical port which is acting as an endpoint. This allows a tagged port to be associated with multiple VPLS instances. An untagged port can only be associated with one VPLS instance. Note that this table is kept independent of the PW tables to indicate that endpoints terminate on the VPLS instance. On the other side, a VPLS instance will have association with the PW MIB. This table is indexed by vplsConfigIndex, fdryVplsEndPointPortVlan, and fdryVplsEndPointIfIndex. ')
fdryVplsEndPointPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 1), PwVlanCfg())
if mibBuilder.loadTexts: fdryVplsEndPointPortVlan.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointPortVlan.setDescription('This value specifies the VLAN id value of this endpoint. ')
fdryVplsEndPointIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: fdryVplsEndPointIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointIfIndex.setDescription('This value specifies the ifIndex value of this endpoint. ')
fdryVplsEndPointVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 3), VlanTagMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVplsEndPointVlanTagMode.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointVlanTagMode.setDescription('This value indicates the vlan mode for this endpoint. The values, dual(3) and other(4) is not used in this table. ')
fdryVplsEndPointOutHCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsEndPointOutHCPkts.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointOutHCPkts.setDescription('This counter indicates the number of packets egressing out from this endpoint towards the Customer Edge (CE). This value counts packets coming from multiple pseudo-wires towards the endpoint, as well as locally switched packets between other endpoints to this endpoint, all belonging to the same VPLS instance. The value gives count of known unicast packets only. Unknown unicast and broadcast packets are not counted. ')
fdryVplsEndPointState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsEndPointState.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointState.setDescription('A L2 state of this VPLS endpoint. ')
fdryVplsEndPointAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 6), AdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVplsEndPointAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointAdminStatus.setDescription('The desired administrative status of this endpoint. This object MAY be set at any time. ')
fdryVplsEndPointOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 7), PwOperStatusTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsEndPointOperStatus.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointOperStatus.setDescription('This object indicates the operational status of this endpoint. Only values up(1), down(2) are used in this table ')
fdryVplsEndPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVplsEndPointRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified except this object and the fdryVplsEndPointAdminStatus. ')
fdryVplsEndPointInHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsEndPointInHCOctets.setStatus('deprecated')
if mibBuilder.loadTexts: fdryVplsEndPointInHCOctets.setDescription('This counter indicates the number of octets ingressing into this endpoint from the Customer Edge (CE). This object is supported in CES/CER only. ')
fdryVplsEndPoint2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3), )
if mibBuilder.loadTexts: fdryVplsEndPoint2Table.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2Table.setDescription('This table specifies information about the VPLS endpoints which are not available in the PW mib, or VPLS draft mib. This table deprecates fdryVplsEndPointTable, as inner VLAN and ISID has been added as index to this table.')
fdryVplsEndPoint2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1), ).setIndexNames((0, "VPLS-GENERIC-MIB", "vplsConfigIndex"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPoint2VlanId"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPoint2InnerTagType"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPoint2InnerTag"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPoint2IfIndex"))
if mibBuilder.loadTexts: fdryVplsEndPoint2Entry.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2Entry.setDescription('A row in this table represents a VPLS end point for a given VPLS instance. The VPLS instance is represented by vplsConfigTable and fdryVplsTable. For a given VPLS instance, there could be multiple instances of rows within this table, each describing one endpoint. For a given endpoint, there will be one VPLS instance. A given endpoint is represented by vplsConfigIndex (VPLS instance), vlan id, inner-id (inner VLAN or ISID),and ifIndex of the physical port which is acting as an endpoint. This allows a tagged port to be associated with multiple VPLS instances, and also many inner VLAN or ISID to be associated with a tagged port (outer VLAN tag) An untagged port can only be associated with one VPLS instance. Note that this table is kept independent of the PW tables to indicate that endpoints terminate on the VPLS instance. On the other side, a VPLS instance will have association with the PW MIB. This table is indexed by vplsConfigIndex, fdryVplsEndPointPortVlan, and fdryVplsEndPointIfIndex. ')
fdryVplsEndPoint2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 1), PwVlanCfg())
if mibBuilder.loadTexts: fdryVplsEndPoint2VlanId.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2VlanId.setDescription('This value specifies the VLAN id value of this endpoint. ')
fdryVplsEndPoint2InnerTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("innerVlan", 2), ("isid", 3))))
if mibBuilder.loadTexts: fdryVplsEndPoint2InnerTagType.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2InnerTagType.setDescription('This value indicates the inner id for this endpoint. If no inner tag is specified, value invalid(1) is returned. ')
fdryVplsEndPoint2InnerTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: fdryVplsEndPoint2InnerTag.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2InnerTag.setDescription('This value indicates the inner tag for this endpoint. If the index fdryVplsEndPoint2InnerTagType has value isid(3), then this object will have the ISID value for that endpoint. Valid ISID value is between 256 (0x100) and 16777214 (0xFFFFFE). If no inner tag is specified, value 0 is returned. ')
fdryVplsEndPoint2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: fdryVplsEndPoint2IfIndex.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2IfIndex.setDescription('This value specifies the ifIndex value of this endpoint. ')
fdryVplsEndPoint2VlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 5), VlanTagMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVplsEndPoint2VlanTagMode.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2VlanTagMode.setDescription('This value indicates the vlan mode for this endpoint. The values, dual(3) and other(4) is not used in this table. ')
fdryVplsEndPoint2InHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsEndPoint2InHCOctets.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2InHCOctets.setDescription('This counter indicates the number of octets ingressing into this endpoint from the Customer Edge (CE). This object is supported in CES/CER only. ')
fdryVplsEndPoint2Layer2State = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 7), Layer2StateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsEndPoint2Layer2State.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2Layer2State.setDescription('The L2 state of this VPLS endpoint. ')
fdryVplsEndPoint2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 8), PwOperStatusTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsEndPoint2OperStatus.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2OperStatus.setDescription('This object indicates the operational status of this endpoint. Only values up(1), down(2) are used in this table ')
fdryVplsEndPoint2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVplsEndPoint2RowStatus.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEndPoint2RowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified except this object. ')
fdryVplsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 2), )
if mibBuilder.loadTexts: fdryVplsTable.setStatus('current')
if mibBuilder.loadTexts: fdryVplsTable.setDescription('This table specifies additional information about the VPLS instance configuration which is not available in the VplsConfigTable. Some of these objects are configuration specific, some are commands specific to that VPLS instance.')
fdryVplsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 2, 1), )
vplsConfigEntry.registerAugmentions(("FDRY-MPLS-L2VPN-MIB", "fdryVplsEntry"))
fdryVplsEntry.setIndexNames(*vplsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: fdryVplsEntry.setStatus('current')
if mibBuilder.loadTexts: fdryVplsEntry.setDescription('A row in this table represents a VPLS instance. It augments the vplsConfigTable in the VPLS draft mib. ')
fdryVplsClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 2, 1, 1), ClassOfService()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVplsClassOfService.setStatus('current')
if mibBuilder.loadTexts: fdryVplsClassOfService.setDescription('This value indicates the Class Of Service for this VPLS instance. This value is used to select the appropriate tunnel whose COS value is either same, or almost approaching this value. ')
fdryVplsMaxMacLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsMaxMacLearned.setStatus('current')
if mibBuilder.loadTexts: fdryVplsMaxMacLearned.setDescription('This value indicates the maximum number of MAC addresses that can be learned by this VPLS instance. ')
fdryVplsClearMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 2, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryVplsClearMac.setStatus('current')
if mibBuilder.loadTexts: fdryVplsClearMac.setDescription('The Set value of TRUE tells the system to clear all the MAC addresses learned by this VPLS instance. Setting value of FALSE will return an error. During read operations, value FALSE will be returned at all times. ')
fdryVplsVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryVplsVcId.setStatus('current')
if mibBuilder.loadTexts: fdryVplsVcId.setDescription('The VPLS Instance ID of a given VPLS session. ')
brcdVplsEndptVlanExtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4), )
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsTable.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsTable.setDescription('This table contains the VLAN extended statistics for VPLS endpoints.')
brcdVplsEndptVlanExtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1), ).setIndexNames((0, "VPLS-GENERIC-MIB", "vplsConfigIndex"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPoint2VlanId"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPoint2InnerTagType"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPoint2InnerTag"), (0, "FDRY-MPLS-L2VPN-MIB", "fdryVplsEndPoint2IfIndex"), (0, "FDRY-MPLS-L2VPN-MIB", "brcdVplsEndptVlanExtStatsPriorityId"))
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsEntry.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsEntry.setDescription('A row in this table represents a VLAN extended statistics accounting entry of a VPLS endpoint.')
brcdVplsEndptVlanExtStatsPriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 1), PortPriorityTC())
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsPriorityId.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsPriorityId.setDescription('Identifies the port QOS priority. The values 1 through 8 internally maps to priorities 0 through 7. The value 128 indicates that priority-level accounting is not enabled')
brcdVplsEndptVlanExtStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsInPkts.setDescription('The number of valid switched and routed frames received by this endpoint from the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsOutPkts.setDescription('The number of valid switched and routed frames transmitted by this endpoint to the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsInOctets.setDescription('The switched and routed bytes count received by this endpoint from the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsOutOctets.setDescription('The switched and routed bytes count transmitted by this endpoint to the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsRoutedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsRoutedInPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsRoutedInPkts.setDescription('The number of valid routed frames received by this endpoint from the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsRoutedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsRoutedOutPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsRoutedOutPkts.setDescription('The number of valid routed frames transmitted by this endpoint to the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsRoutedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsRoutedInOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsRoutedInOctets.setDescription('The routed bytes count received by this endpoint from the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsRoutedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsRoutedOutOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsRoutedOutOctets.setDescription('The routed bytes count transmitted by this endpoint to the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsSwitchedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsSwitchedInPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsSwitchedInPkts.setDescription('The number of valid switched frames received by this endpoint from the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsSwitchedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsSwitchedOutPkts.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsSwitchedOutPkts.setDescription('The number of valid switched frames transmitted by this endpoint to the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsSwitchedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsSwitchedInOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsSwitchedInOctets.setDescription('The switched bytes count received by this endpoint from the Customer Edge (CE).')
brcdVplsEndptVlanExtStatsSwitchedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsSwitchedOutOctets.setStatus('current')
if mibBuilder.loadTexts: brcdVplsEndptVlanExtStatsSwitchedOutOctets.setDescription('The switched bytes count transmitted by this endpoint to the Customer Edge (CE).')
brcdVplsMacAgeTimeLocal = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 5, 1), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdVplsMacAgeTimeLocal.setStatus('current')
if mibBuilder.loadTexts: brcdVplsMacAgeTimeLocal.setDescription('Age timer for local entries of VPLS MACs in software cache. The default value is 300. Configurable range is 60 to 65535.')
brcdVplsMacAgeTimeRemote = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 2, 5, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdVplsMacAgeTimeRemote.setStatus('current')
if mibBuilder.loadTexts: brcdVplsMacAgeTimeRemote.setDescription('Age timer for remote entries of VPLS MACs in software cache. The default value is 600. Configurable range is 60 to 65535.')
fdryVplsCreated = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 0, 1)).setObjects(("VPLS-GENERIC-MIB", "vplsConfigName"), ("FDRY-MPLS-L2VPN-MIB", "fdryVplsVcId"))
if mibBuilder.loadTexts: fdryVplsCreated.setStatus('current')
if mibBuilder.loadTexts: fdryVplsCreated.setDescription('This notification is generated when an entry is created in fdryVplsTable, indicating creation of a new VPLS instance. This notification is not generated during system boot up time.')
fdryVplsDeleted = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 0, 2)).setObjects(("VPLS-GENERIC-MIB", "vplsConfigName"), ("FDRY-MPLS-L2VPN-MIB", "fdryVplsVcId"))
if mibBuilder.loadTexts: fdryVplsDeleted.setStatus('current')
if mibBuilder.loadTexts: fdryVplsDeleted.setDescription('This notification is generated when one entry in the fdryVplsTable have been marked for deletion, indicating deletion of an existing VPLS instance.')
fdryPwCreated = NotificationType((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 2, 0, 3)).setObjects(("FDRY-MPLS-L2VPN-MIB", "fdryPwServiceType"), ("PW-STD-MIB", "pwName"), ("PW-STD-MIB", "pwID"))
if mibBuilder.loadTexts: fdryPwCreated.setStatus('current')
if mibBuilder.loadTexts: fdryPwCreated.setDescription('This notification is generated when an instance of VLL or VLL-Local pseudo-wire entry is created in the pwTable. The varbind fdryPwServiceType has the service type which originated this notification. This notification is not used for VPLS service. This notification is not generated during system boot up time')
mibBuilder.exportSymbols("FDRY-MPLS-L2VPN-MIB", brcdVplsEndptVlanExtStatsSwitchedInOctets=brcdVplsEndptVlanExtStatsSwitchedInOctets, fdryVplsEndPointOutHCPkts=fdryVplsEndPointOutHCPkts, fdryVplsVcId=fdryVplsVcId, fdryVplsEndPoint2VlanTagMode=fdryVplsEndPoint2VlanTagMode, brcdVplsEndptVlanExtStatsOutPkts=brcdVplsEndptVlanExtStatsOutPkts, fdryVllEndPointInnerVlanId=fdryVllEndPointInnerVlanId, fdryVllEndPointInHCPkts=fdryVllEndPointInHCPkts, fdryVplsEndPoint2OperStatus=fdryVplsEndPoint2OperStatus, FdryPwServiceType=FdryPwServiceType, fdryMplsVpnNotifications=fdryMplsVpnNotifications, AdminStatus=AdminStatus, fdryVplsEndPointOperStatus=fdryVplsEndPointOperStatus, brcdVplsEndptVlanExtStatsRoutedOutOctets=brcdVplsEndptVlanExtStatsRoutedOutOctets, fdryVllEndPointOutHCOctets=fdryVllEndPointOutHCOctets, brcdVllEndptVlanExtStatsInOctets=brcdVllEndptVlanExtStatsInOctets, brcdVllEndptVlanExtStatsOutPkts=brcdVllEndptVlanExtStatsOutPkts, brcdVplsMacAgeTimeRemote=brcdVplsMacAgeTimeRemote, ClassOfService=ClassOfService, fdryVplsEndPointIfIndex=fdryVplsEndPointIfIndex, fdryVplsEndPointVlanTagMode=fdryVplsEndPointVlanTagMode, brcdVllEndptVlanExtStatsPriorityId=brcdVllEndptVlanExtStatsPriorityId, fdryVllEndPointTable=fdryVllEndPointTable, PwVlanCfg=PwVlanCfg, fdryVllEndPointVlanTagMode=fdryVllEndPointVlanTagMode, fdryVplsEndPointAdminStatus=fdryVplsEndPointAdminStatus, fdryVplsClassOfService=fdryVplsClassOfService, fdryPwCreated=fdryPwCreated, fdryVplsCreated=fdryVplsCreated, fdryMplsVplsInfo=fdryMplsVplsInfo, fdryVllEndPointRowStatus=fdryVllEndPointRowStatus, fdryVplsEndPoint2Table=fdryVplsEndPoint2Table, brcdVplsEndptVlanExtStatsRoutedInOctets=brcdVplsEndptVlanExtStatsRoutedInOctets, fdryVllEndPointOperStatus=fdryVllEndPointOperStatus, MplsServiceType=MplsServiceType, fdryVplsEndPoint2InnerTag=fdryVplsEndPoint2InnerTag, brcdVplsEndptVlanExtStatsSwitchedOutOctets=brcdVplsEndptVlanExtStatsSwitchedOutOctets, fdryVplsTable=fdryVplsTable, brcdVplsEndptVlanExtStatsInPkts=brcdVplsEndptVlanExtStatsInPkts, brcdVllEndptVlanExtStatsTable=brcdVllEndptVlanExtStatsTable, fdryVplsClearMac=fdryVplsClearMac, fdryVplsEndPointRowStatus=fdryVplsEndPointRowStatus, fdryVllEndPointAdminStatus=fdryVllEndPointAdminStatus, brcdVllEndptVlanExtStatsOutOctets=brcdVllEndptVlanExtStatsOutOctets, fdryVllEndPointInHCOctets=fdryVllEndPointInHCOctets, fdryVllEndPointClassOfService=fdryVllEndPointClassOfService, fdryVplsEndPointState=fdryVplsEndPointState, fdryVplsEndPoint2Layer2State=fdryVplsEndPoint2Layer2State, brcdVplsEndptVlanExtStatsRoutedOutPkts=brcdVplsEndptVlanExtStatsRoutedOutPkts, fdryVplsDeleted=fdryVplsDeleted, fdryVplsEntry=fdryVplsEntry, Layer2StateTC=Layer2StateTC, brcdVplsEndptVlanExtStatsRoutedInPkts=brcdVplsEndptVlanExtStatsRoutedInPkts, fdryVplsEndPointPortVlan=fdryVplsEndPointPortVlan, fdryVplsEndPointTable=fdryVplsEndPointTable, brcdVplsScalarObjects=brcdVplsScalarObjects, fdryVplsEndPoint2InHCOctets=fdryVplsEndPoint2InHCOctets, brcdVplsEndptVlanExtStatsSwitchedOutPkts=brcdVplsEndptVlanExtStatsSwitchedOutPkts, fdryVllEndPointServiceType=fdryVllEndPointServiceType, PYSNMP_MODULE_ID=fdryMplsL2VpnMIB, fdryVplsEndPoint2Entry=fdryVplsEndPoint2Entry, fdryVplsEndPoint2InnerTagType=fdryVplsEndPoint2InnerTagType, brcdVplsMacAgeTimeLocal=brcdVplsMacAgeTimeLocal, fdryVplsEndPointEntry=fdryVplsEndPointEntry, brcdVplsEndptVlanExtStatsTable=brcdVplsEndptVlanExtStatsTable, brcdVllEndptVlanExtStatsEntry=brcdVllEndptVlanExtStatsEntry, fdryVplsMaxMacLearned=fdryVplsMaxMacLearned, fdryMplsVllInfo=fdryMplsVllInfo, brcdVplsEndptVlanExtStatsOutOctets=brcdVplsEndptVlanExtStatsOutOctets, fdryVllEndPointOutHCPkts=fdryVllEndPointOutHCPkts, fdryMplsL2VpnMIB=fdryMplsL2VpnMIB, brcdVplsEndptVlanExtStatsSwitchedInPkts=brcdVplsEndptVlanExtStatsSwitchedInPkts, brcdVplsEndptVlanExtStatsPriorityId=brcdVplsEndptVlanExtStatsPriorityId, fdryVplsEndPoint2IfIndex=fdryVplsEndPoint2IfIndex, fdryVllEndPointEntry=fdryVllEndPointEntry, fdryVplsEndPoint2VlanId=fdryVplsEndPoint2VlanId, brcdVplsEndptVlanExtStatsInOctets=brcdVplsEndptVlanExtStatsInOctets, brcdVllEndptVlanExtStatsInPkts=brcdVllEndptVlanExtStatsInPkts, brcdVplsEndptVlanExtStatsEntry=brcdVplsEndptVlanExtStatsEntry, fdryVplsEndPointInHCOctets=fdryVplsEndPointInHCOctets, fdryVplsEndPoint2RowStatus=fdryVplsEndPoint2RowStatus)
