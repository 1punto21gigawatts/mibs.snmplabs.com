#
# PySNMP MIB module HP-AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-AUTH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ospfVirtIfEntry, ospfIfEntry = mibBuilder.importSymbols("OSPF-MIB", "ospfVirtIfEntry", "ospfIfEntry")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, ObjectIdentity, MibIdentifier, Bits, NotificationType, Integer32, Gauge32, TimeTicks, IpAddress, ModuleIdentity, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Bits", "NotificationType", "Integer32", "Gauge32", "TimeTicks", "IpAddress", "ModuleIdentity", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DateAndTime, TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
hpSwitchAuthenticationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16))
hpSwitchAuthenticationMIB.setRevisions(('2017-09-28 00:00', '2017-05-25 00:00', '2017-03-16 00:00', '2017-01-19 00:00', '2016-11-21 00:00', '2016-11-11 00:00', '2016-07-29 00:00', '2016-06-27 00:00', '2016-02-23 00:00', '2016-01-22 00:00', '2015-10-28 00:00', '2015-07-02 00:00', '2015-05-24 00:00', '2015-04-01 00:00', '2015-03-16 00:00', '2014-08-04 00:00', '2014-03-12 00:00', '2013-11-12 00:00', '2013-06-12 00:00', '2013-05-27 00:00', '2012-05-11 00:00', '2012-05-01 00:00', '2011-06-02 00:00', '2011-02-12 00:00', '2011-02-07 00:00', '2009-06-06 00:00', '2009-06-03 00:00', '2009-04-02 00:00', '2009-02-27 00:00', '2009-01-29 00:00', '2008-07-11 00:00', '2008-06-11 00:00', '2007-09-21 00:00', '2006-10-05 00:00', '2004-09-12 00:00', '2004-03-31 00:12', '2001-08-10 02:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpSwitchAuthenticationMIB.setRevisionsDescriptions(('Added new MIB objects for RADIUS deadtime and tracking hpSwitchRadiusDeadTimeInfinite, hpSwitchRadiusTrackingInterval.', 'Added new MIB objects for front-panel-security commands hpSwitchFrontPanelSecurityCompliance, hpSwitchFrontPanelSecurityGroup, hpSwitchFpsPasswordClear, hpSwitchFpsFactoryReset, hpSwitchFpsPasswordRecovery, hpSwitchFpsDiagnosticResetClearButton, hpSwitchFpsDiagnosticResetSerialConsole, hpSwitchFpsDisplayInConfig', 'Added new MIB objects for configuring cppm identity and key which are used during authentication with cppm server - hpSwitchRadiusCppmIdentity, hpSwitchRadiusCppmKey, hpSwitchRadiusCppmEncryptedKey', 'Added new MIB objects for user-based lockout - hpSwitchAuthUnlockUser, hpSwitchAuthUserBasedLockout.', 'Added new MIB object hpSwitchAuthenHideSensitiveData.', 'Added new MIB objects for encrypted key- hpSwitchOspfVirtIfAuthKeyEncrypted, hpSwitchOspfIfAuthKeyEncrypted and hpSwitchRip2IfConfAuthKeyEncrypted.', 'Added new MIB objects for non-plaintext-sha256 command- hpicfSwitchNonPlaintextSha256, hpicfSwitchUserPasswordHashSha256, hpicfSwitchOperatorPasswordHashSha256, hpSwitchLocalMgmtPrivUsernamePasswdSha256, and modified following MIB object for sha256 support - hpicfSwitchUserPasswordHashType, hpicfSwitchOperatorPasswordHashType, hpSwitchLocalMgmtPrivUsernamePasswdType under new config groups hpSwitchUserConfigGroup3, hpSwitchAuthLocalMgmtPrivUserGroup3 and new compliance hpSwitchUserConfigMIBCompliance3, hpSwitchLocalMgmtPrivUserMIBCompliance3 And deprecated - hpSwitchUserConfigGroup2, hpSwitchAuthLocalMgmtPrivUserGroup2 and hpSwitchUserConfigMIBCompliance2, hpSwitchLocalMgmtPrivUserMIBCompliance2', 'Added new MIB objects for SSH Client authentication hpSwitchAuthenClientPrimary and hpSwitchAuthenClientSecondary.', 'Added new MIB objects for CAC authentication - public key - hpSwitchAuthenLoginTwoFactorType, hpSwitchAuthenEnableTwoFactorType, hpSwitchAuthenLoginSecondAuthMethod and hpSwitchAuthenEnableSecondAuthMethod under new config group hpSwitchAuthenticationConfigGroup5 and new compilance hpSwitchAuthenticationMIBCompliance12. And deprecated - hpSwitchAuthenticationConfigGroup3 and hpSwitchAuthenticationMIBCompliance11', 'Added new MIB object for timeWindow type - hpSwitchRadiusServerDynAutzTimeWindowType under new config group hpSwitchRadiusConfigGroup4 and new compliance hpSwitchAuthenticationMIBCompliance11', 'Modified following MIB objects for password complexity - hpicfSwitchUserPwdAgingInterval, hpicfSwitchOperatorPwdAgingInterval, hpSwitchLocalMgmtPwdUserAgingInterval', 'Added hpSwitchAuthNotifications object.', 'Added hpSwitchAuthenticationPasswordConfigGroup', 'Added following MIB objects and object group for RIP authentication table - hpSwitchRipIfAuthTable, hpSwitchRipIfAuthEntry, hpSwitchRipIfAuthChain, hpSwitchRipAuthGroup', 'Added x509Certificate option under hpSwitchAuthenLoginPrimary object and x509Certificate option under hpSwitchAuthenEnablePrimary object', 'Added stats objects for TACACS+, updated description', 'Added hpSwitchAuthAllowVlanTagged', 'Added hpicfSwitchBypassUsername', 'Deprecated object hpSwitchRadiusServerIpAddr and compliances hpSwitchUserConfigMIBCompliance, hpSwitchAuthenticationMIBCompliance3, hpSwitchAuthenticationMIBCompliance5, hpSwitchAuthenticationMIBCompliance4, hpSwitchAuthenticationMIBComplianceOobm. Added objects hpSwitchRadiusServerAddrType, hpSwitchRadiusServerAddress,hpSwitchAuthLockoutDelay. Added compliances hpSwitchAuthenticationMIBComplianceOobm1, hpSwitchAuthenticationMIBCompliance6.Added groups hpSwitchAuthenticationConfigGroup2, hpSwitchRadiusConfigGroup2.', "Added 'hpSwitchMinimumPasswordLength', 'hpSwitchAuthenticationConfigGroup3', 'hpSwitchAuthenticationMIBCompliance7' and deprecated 'hpSwitchAuthenticationConfigGroup2' 'hpSwitchAuthenticationMIBCompliance6'.", 'Added hpSwitchRadiusServerAddrType, hpSwitchRadiusServerAddress', 'Added hpSwitchAuthLockoutDelay.', "Added 'hpSwitchServerNewCertKeySizeExists'", 'Added hpSwitchAuthenticationEncryptCredentialsMethod, hpSwitchTacacsAuthKeyEncrypted, hpSwitchTacacsServerKeyEncrypted, hpSwitchRadiusAuthKeyEncrypted, hpSwitchRadiusServerKeyEncrypted, hpSwitchKmsKeyEncrypted, hpicfSwitchUserPasswordEncrypted, hpicfSwitchOperatorPasswordEncrypted, hpicfSwitchPortAccessPasswordEncrypted.', 'Added hpSwitchLocalMgmtPrivUsernamesTable.', 'Added hpicfSwitchPortAccessName, hpicfSwitchPortAccessPassword, hpicfSwitchUserPasswordHashType, hpicfOperatorPasswordHashType, hpicfPortAccessPasswordHashType.', 'Added larger SIZE parameters, added notes to refer to product documentation and removed restriction on space character to comments for hpicfSwitchUserName, hpicfSwitchOperatorName, hpicfSwitchUserPassword, hpicfSwitchOperatorPassword', 'Removed SIZE parameters from UserName, OperatorName, UserPassword, OperatorPassword', "Added cachedReauth to 'hpSwitchAuthenLoginSecondary' values.", "Added 'hpSwitchTacacsServerIsOobm' MIB object in 'hpSwitchTacacsServersTable' table and 'hpSwitchRadiusServerIsOobm' MIB object in 'hpSwitchRadiusServerTable' table.", "Added 'hpSwitchAuthenLoginServerGroupName', 'hpSwitchAuthenEnableServerGroupName' MIB objects. Added hpSwitchAAAServerGroupTable.", "Added radiusPeapMSChapv2 to 'hpSwitchAuthenEnablePrimary' values.", "Added 'hpSwitchRadiusDynAutzPortNumber', 'hpSwitchRadiusServerDynAutzEnabled', 'hpSwitchRadiusServerDynAutzTimeWindow' MIB objects. 'hpSwitchRadiusAuthPortNumber' MIB object renamed to 'hpSwitchRadiusServerAuthPortNumber', 'hpSwitchRadiusAcctPortNumber' MIB object renamed to 'hpSwitchRadiusServerAcctPortNumber'.", "Added 'hpicfSwitchUserConfigTable' MIB object.", 'Moved 802.1x objects to separate module.', 'Revised version of this MIB module.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpSwitchAuthenticationMIB.setLastUpdated('201709280000Z')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIB.setOrganization('HPE Networking')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIB.setDescription('This MIB module describes objects for managing the Authentication features of devices in the HP Integrated Communication Facility product line.')
hpSwitchAuthenticationConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1))
hpSwitchNumLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchNumLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: hpSwitchNumLoginAttempts.setDescription('The number of login attempts allowed, both per session and within the time of hpSwitchAuthLockoutDelay.')
hpSwitchAuthRespectPriv = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthRespectPriv.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthRespectPriv.setDescription("This object allows the switch to set privilege level of the session based on the received configuration variable from the authentication server. For RADIUS, the Service-Type attribute's configured value on the server should be 6-Administrative for manager's privilege level, or 7-NAS-prompt for the user/operator privilege level.")
hpSwitchAuthenticationEncryptCredentialsMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("aes256cbc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenticationEncryptCredentialsMethod.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenticationEncryptCredentialsMethod.setDescription('This object determines the methods used to encrypt passwords configured on this device.')
hpSwitchAuthLockoutDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthLockoutDelay.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthLockoutDelay.setDescription('The number of seconds after repeated login failures before a user may again attempt login, and the period within which login rate is limited. When the value is set 0, the login rate limit feature is disabled.')
hpSwitchMinimumPasswordLength = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchMinimumPasswordLength.setStatus('current')
if mibBuilder.loadTexts: hpSwitchMinimumPasswordLength.setDescription('Minimum number of permissible characters required to set a new password for manager, operator, or local management privilege user. The exact range of valid values for this object is implementation dependent; consult the product documentation to determine the supported range for a specific product.')
hpSwitchAuthAllowVlanTagged = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthAllowVlanTagged.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthAllowVlanTagged.setDescription("When set to 'true', tagged VLAN membership changes are immediately applied on AAA enabled ports. By default, VLAN changes are postponed when there are authenticated clients connected on the port.")
hpSwitchAuthenHideSensitiveData = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenHideSensitiveData.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenHideSensitiveData.setDescription('This object enables/disables hiding of the sensitive data in standard secure-mode.')
hpSwitchAuthUnlockUser = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthUnlockUser.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthUnlockUser.setDescription('The User Name, in ASCII format. The exact size of this object is implementation dependent; the user will be unlocked, if the current state of the user is locked out.')
hpSwitchAuthUserBasedLockout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthUserBasedLockout.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthUserBasedLockout.setDescription('This object enables/disables the user-based-lockout. If this feature is enabled, the lockout is based on username and not based on the IP address.')
hpSwitchAuthenticationPasswordConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25))
hpSwitchAuthPwdControlCheck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdControlCheck.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdControlCheck.setDescription('This object enables the password configuration feature.')
hpSwitchAuthPwdUserNameCheck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdUserNameCheck.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdUserNameCheck.setDescription('This object enables the check to ensure that the password does not contain repeat or reverse characters of the associated username.')
hpSwitchAuthPwdRepeatCharactersCheck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdRepeatCharactersCheck.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdRepeatCharactersCheck.setDescription('This object enables the check that the password does not contain at least three of the same characters used consecutively.')
hpSwitchAuthPwdRepeatPasswordCheck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdRepeatPasswordCheck.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdRepeatPasswordCheck.setDescription('This object enables the check that the new password differs from the previous password by at least four characters.')
hpSwitchAuthPwdAgingCheck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdAgingCheck.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdAgingCheck.setDescription('This object enables the check for the password expiry check.')
hpSwitchAuthPwdLogonDetailsCheck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdLogonDetailsCheck.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdLogonDetailsCheck.setDescription('This object enables the previous login details.')
hpSwitchAuthPwdAgingValue = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 365)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdAgingValue.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdAgingValue.setDescription('This object provides the global aging value.')
hpSwitchAuthPwdHistoryCheck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdHistoryCheck.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdHistoryCheck.setDescription('This object enables the password history check.')
hpSwitchAuthPwdHistoryRecordsRange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdHistoryRecordsRange.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdHistoryRecordsRange.setDescription('This object indicates the number of password history records.')
hpSwitchAuthPwdAlertBeforeExpiry = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdAlertBeforeExpiry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdAlertBeforeExpiry.setDescription('This object indicates the period, in days, by which the user needs to be alerted before the password expiry.')
hpSwitchAuthPwdExpiredUserLoginDays = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdExpiredUserLoginDays.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdExpiredUserLoginDays.setDescription('This object indicates the period, in days, for which the user will be allowed to login after password expiry.')
hpSwitchAuthPwdExpiredUserLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdExpiredUserLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdExpiredUserLoginAttempts.setDescription('This object indicates the number of times the user will be allowed to login to the switch after the expiry of the password.')
hpSwitchAuthPwdUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 25, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 168)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthPwdUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthPwdUpdateInterval.setDescription('This object indicates the minimum time, in hours, before which the user is not allowed to change the password.')
hpSwitchAuthenTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2), )
if mibBuilder.loadTexts: hpSwitchAuthenTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenTable.setDescription('This table lists the authentication methods to be tried for granting different access levels through various access tasks.')
hpSwitchAuthenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpSwitchAuthenIndex"))
if mibBuilder.loadTexts: hpSwitchAuthenEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenEntry.setDescription('An Authentication Method Table Entry.')
hpSwitchAuthenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ieee8021X", 3), ("webui", 4), ("ssh", 5), ("webauth", 6), ("macauth", 7), ("snmp", 8), ("localMacAuth", 9))))
if mibBuilder.loadTexts: hpSwitchAuthenIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenIndex.setDescription('Signifies the access task for which authentication methods are listed in this entry.')
hpSwitchAuthenLoginPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("local", 1), ("tacacs", 2), ("radius", 3), ("radiusEap", 4), ("radiusChap", 5), ("sshRsa", 6), ("radiusPeapMSChapv2", 7), ("x509Certificate", 8), ("twoFactor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenLoginPrimary.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenLoginPrimary.setDescription('The value of this object indicates the primary login authentication mechanism. When a user logs in, the authentication method configured by this object will be tried first.')
hpSwitchAuthenLoginSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("none", 2), ("authorized", 3), ("cachedReauth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenLoginSecondary.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenLoginSecondary.setDescription('The value of this object indicates the secondary login authentication mechanism, i.e whether Local or Authorized will be tried in case the primary authentication results in an error.The Local authentication method uses the credential database on the switch. The Authorized authentication method will be granted access without authenticating. The cachedReauth authentication method will grant access in case of reauthentication retaining the current session attributes.')
hpSwitchAuthenEnablePrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 9))).clone(namedValues=NamedValues(("local", 1), ("tacacs", 2), ("radius", 3), ("sshPubkey", 6), ("radiusPeapMSChapv2", 7), ("x509Certificate", 8), ("twoFactor", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenEnablePrimary.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenEnablePrimary.setDescription('This object configures the primary authentication mechanism that will be tried first when a user requests manager-level access')
hpSwitchAuthenEnableSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("none", 2), ("authorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenEnableSecondary.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenEnableSecondary.setDescription('This object indicates the secondary login authentication mechanism, i.e whether Local or Authorized will be tried in case the primary authentication results in an error. The authentication method Local uses the credential database on the switch. The Authorized authentication method will be granted access without authenticating.')
hpSwitchAuthenLoginServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenLoginServerGroupName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenLoginServerGroupName.setDescription('The name that defines the RADIUS server group that this authentication method is associated with. The current maximum length is 12.')
hpSwitchAuthenEnableServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenEnableServerGroupName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenEnableServerGroupName.setDescription('The name that defines the RADIUS server group that this authentication method is associated with. The current maximum length is 12.')
hpSwitchAuthenLoginTwoFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("publickeypassword", 1), ("certificatepassword", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenLoginTwoFactorType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenLoginTwoFactorType.setDescription('This object configures the type of two-factor authentication')
hpSwitchAuthenEnableTwoFactorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("publickeypassword", 1), ("certificatepassword", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenEnableTwoFactorType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenEnableTwoFactorType.setDescription('This object configures the type of two-factor authentication')
hpSwitchAuthenLoginSecondAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("tacacs", 2), ("radius", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenLoginSecondAuthMethod.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenLoginSecondAuthMethod.setDescription('This object configures the password configuration for two-factor authentication')
hpSwitchAuthenEnableSecondAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("tacacs", 2), ("radius", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenEnableSecondAuthMethod.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenEnableSecondAuthMethod.setDescription('This object configures the password configuration for two-factor authentication')
hpSwitchAuthenClientPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("x509Certificate", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenClientPrimary.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenClientPrimary.setDescription('This object configures the primary authentication for SSH when the switch acts as a client.')
hpSwitchAuthenClientSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenClientSecondary.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenClientSecondary.setDescription("This object indicates the secondary login authentication for SSH when the switch acts as a client. This is a placeholder as secondary authentication is not currently supported when primary authentication is 'certificate' for SSH client.")
hpSwitchAuthenCachedReauthAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenCachedReauthAuthorized.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenCachedReauthAuthorized.setDescription('When the value of object hpSwitchAuthenLoginSecondary is set to cachedReauth(4),the ture value set for this object indicates cachedReauth authentication method will grant access in case of reauthentication fails.')
hpSwitchAuthenPwdCompositionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 24), )
if mibBuilder.loadTexts: hpSwitchAuthenPwdCompositionTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenPwdCompositionTable.setDescription('This table lists different type of charaters required to create a password as per UCR guidelines. ')
hpSwitchAuthenPwdCompositionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 24, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpSwitchAuthenCompositionIndex"))
if mibBuilder.loadTexts: hpSwitchAuthenPwdCompositionEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenPwdCompositionEntry.setDescription('An Authentication Method Table Entry.')
hpSwitchAuthenCompositionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2), ("specialCharacter", 3), ("number", 4))))
if mibBuilder.loadTexts: hpSwitchAuthenCompositionIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenCompositionIndex.setDescription('This object indicates the different types of charaters required to create a password.')
hpSwitchAuthenCompositionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAuthenCompositionValue.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenCompositionValue.setDescription('This object indicates number of characters allow for password compostion ')
hpSwitchTacacsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 3))
hpSwitchTacacsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTacacsTimeout.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsTimeout.setDescription('The duration in seconds to wait for a response from the TACACS+ server host.')
hpSwitchTacacsAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTacacsAuthKey.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsAuthKey.setDescription('The key used in encrypting the packets passed between the TACACS+ server and the client. This key must match the one configured on the server.')
hpSwitchTacacsAuthKeyEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTacacsAuthKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsAuthKeyEncrypted.setDescription('An encrypted form of the key used in encrypting the packets passed between the TACACS+ server and the client. This key must match the one configured on the server. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpSwitchTacacsAuthKey and hpSwitchTacacsAuthKeyEncrypted may be set in any transaction. This object should only be written with an encrypted key previously read from a compatible HP Networking device.')
hpSwitchTacacsDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchTacacsDeadTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsDeadTime.setDescription('This object specifies the TACACS+ server unavailability time. When a response is not received from a TACACS+ server, that server is then not contacted for Authentication, Authorization, or Accounting (AAA) requests for a period of dead-time defined. During this period, any AAA request received from the client is sent to the next available server. A value of zero indicates that all AAA requests are continuously sent to the unavailable server.')
hpSwitchTacacsServersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 4), )
if mibBuilder.loadTexts: hpSwitchTacacsServersTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsServersTable.setDescription('This table lists a maximum of 3 TACACS+ servers.')
hpSwitchTacacsServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 4, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpSwitchTacacsServerIndex"))
if mibBuilder.loadTexts: hpSwitchTacacsServersEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsServersEntry.setDescription('A TACACS+ server table entry.')
hpSwitchTacacsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpSwitchTacacsServerIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsServerIndex.setDescription('The index value which uniquely identifies a row in the TACACS+ Servers Table.')
hpSwitchTacacsServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchTacacsServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsServerIpAddr.setDescription('The IP address of a TACACS+ Server.')
hpSwitchTacacsServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchTacacsServerKey.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsServerKey.setDescription('The key used in encrypting the packets passed between the TACACS+ server and the client. This key must match the one configured on the server.')
hpSwitchTacacsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchTacacsServerStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsServerStatus.setDescription('Status of Servers Table row.')
hpSwitchTacacsServerIsOobm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchTacacsServerIsOobm.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsServerIsOobm.setDescription('This object indicates whether this TACACS+ Server is reachable over OOBM (Out Of Band Management) interface or not. This mib object will be applicable only if there is a physical OOBM port on the device.')
hpSwitchTacacsServerKeyEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchTacacsServerKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsServerKeyEncrypted.setDescription('An encrypted form of the key used in encrypting the packets passed between the TACACS+ server and the client. This key must match the one configured on the server. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpSwitchTacacsServerKey and hpSwitchTacacsServerKeyEncrypted may be set in any transaction. This object should only be written with an encrypted key previously read from a compatible HP Networking device.')
hpTacacsStatsServersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5), )
if mibBuilder.loadTexts: hpTacacsStatsServersTable.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsServersTable.setDescription('A table containing statistics for the configured TACACS+ servers.')
hpTacacsStatsServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpTacacsStatsServerIndex"))
if mibBuilder.loadTexts: hpTacacsStatsServersEntry.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsServersEntry.setDescription('The information associated with each row in the TACACS+ servers table.')
hpTacacsStatsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpTacacsStatsServerIndex.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsServerIndex.setDescription('The index identifying the row in the table.')
hpTacacsStatsTacacsServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsTacacsServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsTacacsServerIpAddr.setDescription('The IP address of a TACACS+ Server.')
hpTacacsStatsNumSessOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumSessOpened.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumSessOpened.setDescription('The number of authentication, authorization and accounting sessions opened with the server.')
hpTacacsStatsNumSessClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumSessClosed.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumSessClosed.setDescription('The number of authentication, authorization and accounting sessions closed with the server.')
hpTacacsStatsNumSessAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumSessAborted.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumSessAborted.setDescription('The number of authentication, authorization and accounting sessions aborted with the server.')
hpTacacsStatsNumSessErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumSessErrors.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumSessErrors.setDescription('The number of authentication, authorization and accounting sessions with this server resulted in an error.')
hpTacacsStatsNumPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumPktsIn.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumPktsIn.setDescription('The number of responses received from the server.')
hpTacacsStatsNumPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumPktsOut.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumPktsOut.setDescription('The number of requests sent to the server.')
hpTacacsStatsNumAuthPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAuthPktsIn.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAuthPktsIn.setDescription('The number of authentication responses received from the server.')
hpTacacsStatsNumAuthPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAuthPktsOut.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAuthPktsOut.setDescription('The number of authentication requests sent to the server.')
hpTacacsStatsNumAuthPktsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAuthPktsTimedOut.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAuthPktsTimedOut.setDescription('The number of authentication requests that timed out due to no response from the server.')
hpTacacsStatsNumAutzPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAutzPktsIn.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAutzPktsIn.setDescription('The number of authorization responses received from the server.')
hpTacacsStatsNumAutzPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAutzPktsOut.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAutzPktsOut.setDescription('The number of authorization requests sent to the server.')
hpTacacsStatsNumAutzPktsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAutzPktsTimedOut.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAutzPktsTimedOut.setDescription('The number of authorization requests that timed out due to no response from the server.')
hpTacacsStatsNumAcctPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAcctPktsIn.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAcctPktsIn.setDescription('The number of accounting responses received from the server.')
hpTacacsStatsNumAcctPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAcctPktsOut.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAcctPktsOut.setDescription('The number of accounting requests sent to the server.')
hpTacacsStatsNumAcctPktsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTacacsStatsNumAcctPktsTimedOut.setStatus('current')
if mibBuilder.loadTexts: hpTacacsStatsNumAcctPktsTimedOut.setDescription('The number of accounting requests that timed out due to no response from the server.')
hpSwitchRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6))
hpSwitchRadiusDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusDeadTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusDeadTime.setDescription('The length of time in minutes a RADIUS server is skipped over by transaction requests (from 0 up to 24 hours). Used to improve RADIUS response times when some servers might be unavailable.')
hpSwitchRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusTimeout.setDescription('The duration in seconds to wait for a response from the RADIUS server host.')
hpSwitchRadiusRetransmitAttempts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusRetransmitAttempts.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusRetransmitAttempts.setDescription('Maximum number of retransmission attempts.')
hpSwitchRadiusAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusAuthKey.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusAuthKey.setDescription('The key used in encrypting the packets passed between the RADIUS server and the client. This key must match the one configured on the server.')
hpSwitchRadiusDynAutzPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3799)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusDynAutzPortNumber.setReference('RFC 3576')
if mibBuilder.loadTexts: hpSwitchRadiusDynAutzPortNumber.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusDynAutzPortNumber.setDescription('The UDP port number to listen for Disconnect and Change-of-Authorization messages.')
hpSwitchRadiusAuthKeyEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusAuthKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusAuthKeyEncrypted.setDescription('An encrypted form of the key used in encrypting the packets passed between the RADIUS server and the client. This key must match the one configured on the server. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpSwitchRadiusAuthKey and hpSwitchRadiusAuthKeyEncrypted may be set in any transaction. This object should only be written with an encrypted key previously read from a compatible HP Networking device.')
hpSwitchRadiusTracking = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusTracking.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusTracking.setDescription('To enable or disable the RADIUS service tracking. If this feature is enabled, it is used to send access-request packets at regular intervals to track the availability of server.')
hpSwitchRadiusTrackingUserName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)).clone('radius-tracking-user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusTrackingUserName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusTrackingUserName.setDescription('This user name will be used to send Access-Request packets to the RADIUS server to track it.')
hpSwitchRadiusCppmIdentity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusCppmIdentity.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusCppmIdentity.setDescription('The cppm identity value to be used during authentication with cppm server.')
hpSwitchRadiusCppmKey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 13), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusCppmKey.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusCppmKey.setDescription('The cppm key value to be used during authentication with cppm server.')
hpSwitchRadiusCppmEncryptedKey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusCppmEncryptedKey.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusCppmEncryptedKey.setDescription('The encrypted cppm key value to be used during authentication with cppm server.The key value used to set this object should be read from a compatible HPE netwokring device only.')
hpSwitchRadiusDeadTimeInfinite = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusDeadTimeInfinite.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusDeadTimeInfinite.setDescription('If this is set to true, a dead RADIUS server is skipped over by transaction requests until the RADIUS server is tracked up and alive by RADIUS tracking. The default value is set to FLASE.')
hpSwitchRadiusTrackingInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRadiusTrackingInterval.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusTrackingInterval.setDescription('The regular time interval in seconds at which RADIUS access-request packets are sent to track the availability of RADIUS server. The default time interval is 5 minutes.')
hpSwitchRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7), )
if mibBuilder.loadTexts: hpSwitchRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerTable.setDescription('This table lists a maximum of 3 RADIUS servers.')
hpSwitchRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpSwitchRadiusServerIndex"))
if mibBuilder.loadTexts: hpSwitchRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerEntry.setDescription('A RADIUS server table entry.')
hpSwitchRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpSwitchRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerIndex.setDescription('The index value which uniquely identifies a row in the RADIUS Servers Table.')
hpSwitchRadiusServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRadiusServerIpAddr.setDescription('The IP address of a RADIUS Server. When the RADIUS server has been configured with IPv6 address, the value of this object will be set to Null.')
hpSwitchRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerKey.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerKey.setDescription('The key used in encrypting the packets passed between the RADIUS server and the client. This key must match the one configured on the server.')
hpSwitchRadiusServerAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerAuthPortNumber.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerAuthPortNumber.setDescription('The UDP destination port number to use for sending authentication requests to this RADIUS Server.')
hpSwitchRadiusServerAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerAcctPortNumber.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerAcctPortNumber.setDescription('The UDP destination port number to use for sending accounting requests to this RADIUS server.')
hpSwitchRadiusServerDynAutzEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerDynAutzEnabled.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerDynAutzEnabled.setDescription('This object indicates whether Dynamic Authorization messages (Disconnect-Requests and CoA-Requests) are authorized for processing from this RADIUS Server.')
hpSwitchRadiusServerDynAutzTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerDynAutzTimeWindow.setReference('RFC 3576')
if mibBuilder.loadTexts: hpSwitchRadiusServerDynAutzTimeWindow.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerDynAutzTimeWindow.setDescription('A non-zero value indicates that the Event-Timestamp attribute must be used in the dynamic authorization communication exchange between the NAS and the RADIUS server. Such a value determines the time window (in seconds) within which RADIUS packets carrying the Event-Timestamp attribute will be considered as current and accepted for processing by the NAS and the RADIUS Server. Zero value disables checking for the Event-Timestamp attribute. The default time window is 300 seconds.')
hpSwitchRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerStatus.setDescription('Status of Servers Table row.')
hpSwitchRadiusServerIsOobm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerIsOobm.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerIsOobm.setDescription('This object indicates whether this RADIUS Server is reachable over OOBM (Out Of Band Management) interface or not. This mib object will be applicable only if there is a physical OOBM port on the device.')
hpSwitchRadiusServerKeyEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerKeyEncrypted.setDescription('An encrypted form of the key used in encrypting the packets passed between the RADIUS server and the client. This key must match the one configured on the server. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpSwitchRadiusServerKey and hpSwitchRadiusServerKeyEncrypted may be set in any transaction. This object should only be written with an encrypted key previously read from a compatible HP Networking device.')
hpSwitchRadiusServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 11), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerAddrType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerAddrType.setDescription('Type of RADIUS Server IP Address stored in hpSwitchRadiusServerAddress.')
hpSwitchRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerAddress.setDescription('The IPv4 or IPv6 Address of the RADIUS server.')
hpSwitchRadiusServerDynAutzTimeWindowType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("positive", 0), ("plusorminus", 1))).clone('positive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRadiusServerDynAutzTimeWindowType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusServerDynAutzTimeWindowType.setDescription('Window type indicates the acceptable window size for dynamic authorization messages. Positive window type will allow messages when time difference between sender Event-TimeStamp and receiver/switch timeStamp is between 0 to +hpSwitchRadiusServerDynAutzTimeWindow. plusorminus type will allow messages when time difference time difference between sender Event-TimeStamp and receiver/switch timeStamp is between 0 to +hpSwitchRadiusServerDynAutzTimeWindow.The default window type is positive.')
hpSwitchKmsChainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 15), )
if mibBuilder.loadTexts: hpSwitchKmsChainConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsChainConfigTable.setDescription('This table contains configuration objects for Key Management Subsystem chains.')
hpSwitchKmsChainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 15, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpSwitchKmsChainId"))
if mibBuilder.loadTexts: hpSwitchKmsChainConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsChainConfigEntry.setDescription('KMS chain configuration table entry.')
hpSwitchKmsChainId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)))
if mibBuilder.loadTexts: hpSwitchKmsChainId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsChainId.setDescription('This object is the KMS chain index. Do not rely on it since it may be removed in the future, when it is possible to use the object hpSwitchKmsChainName as the index.')
hpSwitchKmsChainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsChainName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsChainName.setDescription('This object configures the KMS chain name.')
hpSwitchKmsChainKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchKmsChainKeys.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsChainKeys.setDescription('Returns the number of keys in the KMS chain.')
hpSwitchKmsChainActiveKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchKmsChainActiveKeys.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsChainActiveKeys.setDescription('Returns the number of active keys in the KMS chain.')
hpSwitchKmsChainExpKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchKmsChainExpKeys.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsChainExpKeys.setDescription('Returns the number of expired keys in the KMS chain.')
hpSwitchKmsChainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 15, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsChainStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsChainStatus.setDescription('The status of the row in the KMS chain configuration table.')
hpSwitchKmsKeyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16), )
if mibBuilder.loadTexts: hpSwitchKmsKeyConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyConfigTable.setDescription('This table contains the configuration objects for the Key Management Subsystem.')
hpSwitchKmsKeyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpSwitchKmsKeyChainId"), (0, "HP-AUTH-MIB", "hpSwitchKmsKeyId"))
if mibBuilder.loadTexts: hpSwitchKmsKeyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyConfigEntry.setDescription('KMS configuration table entry.')
hpSwitchKmsKeyChainId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)))
if mibBuilder.loadTexts: hpSwitchKmsKeyChainId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyChainId.setDescription('This object is the KMS chain index. Do not rely on it since it may be removed in the future, when it is possible to use the object hpSwitchKmsChainName as the index.')
hpSwitchKmsKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpSwitchKmsKeyId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyId.setDescription('This object is the KMS key index.')
hpSwitchKmsKeyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsKeyStr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyStr.setDescription('This object configures the KMS key chain name.')
hpSwitchKmsKeyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsKeyStartTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyStartTime.setDescription('Start time of the KMS key.')
hpSwitchKmsKeyStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsKeyStopTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyStopTime.setDescription('Stop time of the KMS key.')
hpSwitchKmsKeyTxStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsKeyTxStartTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyTxStartTime.setDescription('Start time of the transmission for the KMS key.')
hpSwitchKmsKeyTxStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsKeyTxStopTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyTxStopTime.setDescription('Stop time of the transmission for the KMS key.')
hpSwitchKmsKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsKeyStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyStatus.setDescription('Row Status of the KMS chain configuration table.')
hpSwitchKmsKeyEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 16, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchKmsKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsKeyEncrypted.setDescription('An encrypted form of the KMS key. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpSwitchKmsKeyStr and hpSwitchKmsKeyEncrypted may be set in any transaction. This object should only be written with an encrypted key previously read from a compatible HP Networking device.')
hpSwitchOspfIfAuthTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 17), )
if mibBuilder.loadTexts: hpSwitchOspfIfAuthTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfIfAuthTable.setDescription('This table supplements the OSPF interface configuration table.')
hpSwitchOspfIfAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 17, 1), )
ospfIfEntry.registerAugmentions(("HP-AUTH-MIB", "hpSwitchOspfIfAuthEntry"))
hpSwitchOspfIfAuthEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: hpSwitchOspfIfAuthEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfIfAuthEntry.setDescription('OSPF interface authentication configuration table entry.')
hpSwitchOspfIfAuthChain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchOspfIfAuthChain.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfIfAuthChain.setDescription('This object configures the KMS chain name for OSPF interfaces.')
hpSwitchOspfIfAuthKeyEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchOspfIfAuthKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfIfAuthKeyEncrypted.setDescription('The object represents the encrypted format of authentication key stored in the object ospfIfAuthKey. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). This object should only be written with an encrypted key.')
hpSwitchOspfVirtIfAuthTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 18), )
if mibBuilder.loadTexts: hpSwitchOspfVirtIfAuthTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfVirtIfAuthTable.setDescription('This table supplements the OSPF virtual interface configuration table.')
hpSwitchOspfVirtIfAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 18, 1), )
ospfVirtIfEntry.registerAugmentions(("HP-AUTH-MIB", "hpSwitchOspfVirtIfAuthEntry"))
hpSwitchOspfVirtIfAuthEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: hpSwitchOspfVirtIfAuthEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfVirtIfAuthEntry.setDescription('OSPF virtual interface authentication configuration table entry.')
hpSwitchOspfVirtIfAuthChain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchOspfVirtIfAuthChain.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfVirtIfAuthChain.setDescription('This object configures the KMS chain name for OSPF virtual interfaces.')
hpSwitchOspfVirtIfAuthKeyEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 18, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchOspfVirtIfAuthKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfVirtIfAuthKeyEncrypted.setDescription('This object represents the encrypted format of authentication key stored in the object ospfVirtIfAuthKey. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). This object should only be written with an encrypted key.')
hpSwitchSslConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 12))
hpSwitchSslAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSslAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchSslAdminStatus.setDescription('This objects specifies the desired operational status of SSL.')
hpSwitchSslPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSslPortNumber.setStatus('current')
if mibBuilder.loadTexts: hpSwitchSslPortNumber.setDescription('The port number on which the SSL server should listen for connection requests.')
hpSwitchCertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13))
hpSwitchServerCertificateOperation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("useInstalled", 2), ("createAndUseSelfSigned", 3), ("createCACertReq", 4), ("applyCASignedCert", 5), ("abortCASignedRequest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerCertificateOperation.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateOperation.setDescription("When this object is read, it returns the last value that was written. If a value was not set previously, then the object value will be 'none'(1). The object supports the following values and actions: 'none' - no action is taken, null operation. 'useInstalled' - This causes the switch to use a previously installed server certificate, if one is present. 'createAndUseSelfSigned' - This causes the switch to create a new self-signed certificate based on the hpSwitchServerNewCertificate parameters and use it. 'createCACertReq' - This causes the switch to create a certificate request, which is to be signed by a CA authority, based on the hpSwitchServerNewCertificate parameters. The user must subsequently download the signed certificate to complete certificate creation process. 'applyCASignedCert' - This causes the switch to process the user's response to a signed certificate from a CA to complete the certificate creation process. 'abortCASignedRequest' - This causes the switch to abort the certificate request procedure, which was initiated on createAndUseCASigned set.")
hpSwitchServerNewRSAKeyOperation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("useInstalled", 1), ("createBits512", 2), ("createBits768", 3), ("createBits1024", 4), ("createBits2048", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewRSAKeyOperation.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewRSAKeyOperation.setDescription("This object when will returns a value either 'useInstalled'(1) or 'createBits1024'(4). The value 'useInstalled'(1) is returned when a certificate RSA key already exists on switch. The value 'createBits1024'(4) is returned when no certificate RSA key exists on switch. When user configuresthe values, the value triggers the following action: 'useInstalled' - The switch will use the currently configured RSA key that is already present on the switch. 'createBits512' - This value is deprecated and no longer supported. 'createBits768' - This value is deprecated and no longer supported. 'createBits1024' - This value specifies the creation of a new RSA key of length 1024-bit. 'createBits2048' - This value specifies the creation of a new RSA key of length 2048-bit.")
hpSwitchServerNewCertificateStartDate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 3), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertificateStartDate.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertificateStartDate.setDescription('Specifies the start date of validity for a new server certificate.')
hpSwitchServerNewCertificateEndDate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertificateEndDate.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertificateEndDate.setDescription('Specifies the end date of validity for a new server certificate.')
hpSwitchServerNewCertificateCommonName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertificateCommonName.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchServerNewCertificateCommonName.setDescription('Specifies the common name for a new server certificate.')
hpSwitchServerNewCertificateOrgUnit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertificateOrgUnit.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchServerNewCertificateOrgUnit.setDescription('Specifies the organization for a new server certificate.')
hpSwitchServerNewCertificateOrgName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertificateOrgName.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchServerNewCertificateOrgName.setDescription('Specifies the organization name for a new server certificate.')
hpSwitchServerNewCertificateCityName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertificateCityName.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchServerNewCertificateCityName.setDescription('Specifies the city for a new server certificate.')
hpSwitchServerNewCertificateStateName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertificateStateName.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchServerNewCertificateStateName.setDescription('Specifies the state for a new server certificate.')
hpSwitchServerNewCertificateCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertificateCountryCode.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertificateCountryCode.setDescription('Specifies the 2-letter ISO country code of the server certificate.')
hpSwitchServerNewCertCommonName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertCommonName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertCommonName.setDescription('Specifies the common name for a new server certificate.')
hpSwitchServerNewCertOrgUnit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertOrgUnit.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertOrgUnit.setDescription('Specifies the organization for a new server certificate.')
hpSwitchServerNewCertOrgName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertOrgName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertOrgName.setDescription('Specifies the organization name for a new server certificate.')
hpSwitchServerNewCertCityName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertCityName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertCityName.setDescription('Specifies the city for a new server certificate.')
hpSwitchServerNewCertStateName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertStateName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertStateName.setDescription('Specifies the state for a new server certificate.')
hpSwitchServerNewCertKeySizeExists = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 13, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchServerNewCertKeySizeExists.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerNewCertKeySizeExists.setDescription('Specifies whether the given key size already exist.')
hpSwitchCertStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14))
hpSwitchServerCertificateType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("pendCaSigned", 2), ("selfSigned", 3), ("caSigned", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateType.setDescription("Specifies the type of server certificate the switch is currently using as follows: 'none' - no server certificate is present. 'pendCaSigned' - switch is waiting for user to offer CA-signed certificate request. 'selfSigned' - a self-signed server certificate is being used. 'caSigned' - a CA-signed server certificate is being used.")
hpSwitchServerCertificateRSAKeySize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("bits512", 1), ("bits768", 2), ("bits1024", 3), ("bits2048", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateRSAKeySize.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateRSAKeySize.setDescription("Specifies the RSA key length of the public key contained in the certificate as follows: 'none' - no certificate is present 'Bits512' - certificate has a 512-bit public key 'Bits768' - certificate has a 768-bit public key 'Bits1024' - certificate has a 1024-bit public key 'Bits2048' - certificate has a 2048-bit public key")
hpSwitchServerCertificateSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateSerialNumber.setDescription('Specifies the serial number of installed server certificate.')
hpSwitchServerCertificateStartDate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateStartDate.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateStartDate.setDescription('Specifies the start date of validity of installed server certificate.')
hpSwitchServerCertificateEndDate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateEndDate.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateEndDate.setDescription('Specifies the end date of validity of installed server server certificate.')
hpSwitchServerCertificateCommonName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateCommonName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateCommonName.setDescription('Specifies the common name of installed server certificate.')
hpSwitchServerCertificateOrgUnit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateOrgUnit.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateOrgUnit.setDescription('Specifies the organization of installed server certificate.')
hpSwitchServerCertificateOrgName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateOrgName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateOrgName.setDescription('Specifies the organization name of installed server certificate.')
hpSwitchServerCertificateCityName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateCityName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateCityName.setDescription('Specifies the city of installed server certificate.')
hpSwitchServerCertificateStateName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateStateName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateStateName.setDescription('Specifies the state of installed server certificate.')
hpSwitchServerCertificateCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateCountryCode.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateCountryCode.setDescription('Specifies the 2-letter ISO country code of installed server certificate.')
hpSwitchServerCertificateFingerprintMD5 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateFingerprintMD5.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateFingerprintMD5.setDescription('Specifies the MD5 fingerprint of installed server certificate.')
hpSwitchServerCertificateFingerprintSHA1 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 14, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 51))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchServerCertificateFingerprintSHA1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchServerCertificateFingerprintSHA1.setDescription('Specifies the SHA1 fingerprint of installed server certificate.')
hpSwitchFrontPanelSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 26))
hpSwitchFpsPasswordClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enable", 0), ("enablewithreset", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFpsPasswordClear.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFpsPasswordClear.setDescription('This object enables or disables the front panel security password clear command.')
hpSwitchFpsFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFpsFactoryReset.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFpsFactoryReset.setDescription('This object enables or disables the front panel security factory reset command.')
hpSwitchFpsPasswordRecovery = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("normal", 1), ("strong", 2))).clone('strong')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFpsPasswordRecovery.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFpsPasswordRecovery.setDescription('This object enables or disables the front panel security password recovery command.')
hpSwitchFpsDiagnosticResetClearButton = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFpsDiagnosticResetClearButton.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFpsDiagnosticResetClearButton.setDescription('This object enables or disables the front panel security diagnostic reset clear button command.')
hpSwitchFpsDiagnosticResetSerialConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFpsDiagnosticResetSerialConsole.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFpsDiagnosticResetSerialConsole.setDescription('This object enables or disables the front panel security diagnostic reset serial console command.')
hpSwitchFpsDisplayInConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 26, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFpsDisplayInConfig.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFpsDisplayInConfig.setDescription('This object enables or disables the front panel security display in config command.')
hpicfSwitchUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19), )
if mibBuilder.loadTexts: hpicfSwitchUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserConfigTable.setDescription('This table supplements the manager/operator name/password. The manager/operator password are limited to the CLI interface through Console and Menu interface, and web.')
hpicfSwitchUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpicfSwitchUserConfigIndex"))
if mibBuilder.loadTexts: hpicfSwitchUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserConfigEntry.setDescription('Manager/operator name/password table entry.')
hpicfSwitchUserConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfSwitchUserConfigIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserConfigIndex.setDescription('The index value uniquely identifies a row in the User Config table, currently limited to a value of 1.')
hpicfSwitchUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchUserName.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserName.setDescription('The User Name, in ASCII format. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product.')
hpicfSwitchOperatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchOperatorName.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchOperatorName.setDescription('The Operator Name, in ASCII format. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product.')
hpicfSwitchUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchUserPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserPassword.setDescription('The User Password, in ASCII format. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product.')
hpicfSwitchOperatorPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchOperatorPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchOperatorPassword.setDescription('The Operator Password, in ASCII format. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product.')
hpicfSwitchUserConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchUserConfigStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserConfigStatus.setDescription('Status of User Config Table row.')
hpicfSwitchPortAccessName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchPortAccessName.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchPortAccessName.setDescription('The Port-Access Name, ASCII format. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product.')
hpicfSwitchPortAccessPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchPortAccessPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchPortAccessPassword.setDescription('The Port-Access Password, in ASCII format. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product.')
hpicfSwitchUserPasswordHashType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("plainText", 1), ("sha1", 3), ("sha256", 4))).clone('plainText')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchUserPasswordHashType.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserPasswordHashType.setDescription('The hash-type of the User Password.')
hpicfSwitchOperatorPasswordHashType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("plainText", 1), ("sha1", 3), ("sha256", 4))).clone('plainText')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchOperatorPasswordHashType.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchOperatorPasswordHashType.setDescription('The hash-type of the Operator Password.')
hpicfSwitchPortAccessPasswordHashType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("plainText", 1))).clone('plainText')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchPortAccessPasswordHashType.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchPortAccessPasswordHashType.setDescription('The hash-type of the Port-Access Password.')
hpicfSwitchUserPasswordEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchUserPasswordEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserPasswordEncrypted.setDescription('An encrypted form of the user password. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpicfSwitchUserPassword and hpicfSwitchUserPasswordEncrypted may be set in any transaction. This object should only be written with an encrypted password previously read from a compatible HP Networking device.')
hpicfSwitchOperatorPasswordEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchOperatorPasswordEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchOperatorPasswordEncrypted.setDescription('An encrypted form of the operator password. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpicfSwitchOperatorPassword and hpicfSwitchOperatorPasswordEncrypted may be set in any transaction. This object should only be written with an encrypted password previously read from a compatible HP Networking device.')
hpicfSwitchPortAccessPasswordEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchPortAccessPasswordEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchPortAccessPasswordEncrypted.setDescription('An encrypted form of the port-access password. The exact size of this object is implementation dependent; consult the product documentation to determine the supported size for a specific product. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpicfSwitchPortAccessPassword and hpicfSwitchPortAccessPasswordEncrypted may be set in any transaction. This object should only be written with an encrypted password previously read from a compatible HP Networking device.')
hpicfSwitchBypassUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchBypassUsername.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchBypassUsername.setDescription("This object controls bypassing of the username while accessing the switch to get Operator or Manager access. When enabled, the Manager level and Operator level usernames are bypassed and authentication based on password takes place. If custom usernames are configured, this configuration is ignored and authentication based on both username and password takes place. The default value is 'disable' and user is authenticated based on both username and password.")
hpicfSwitchUserPwdAgingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchUserPwdAgingInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserPwdAgingInterval.setDescription('This object holds the manager password aging value.')
hpicfSwitchOperatorPwdAgingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchOperatorPwdAgingInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchOperatorPwdAgingInterval.setDescription('This object holds the operator password aging value.')
hpicfSwitchUserPwdLengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 64)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchUserPwdLengthValue.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserPwdLengthValue.setDescription('This object holds length of the manager password. ')
hpicfSwitchOperatorPwdLengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 64)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchOperatorPwdLengthValue.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchOperatorPwdLengthValue.setDescription('This object holds length of the operator password. ')
hpicfSwitchNonPlaintextSha256 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchNonPlaintextSha256.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchNonPlaintextSha256.setDescription('This object enables storing the password in SHA-256 form.')
hpicfSwitchUserPasswordHashSha256 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchUserPasswordHashSha256.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchUserPasswordHashSha256.setDescription('The SHA256 hash-type of the Manager Password.')
hpicfSwitchOperatorPasswordHashSha256 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 19, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSwitchOperatorPasswordHashSha256.setStatus('current')
if mibBuilder.loadTexts: hpicfSwitchOperatorPasswordHashSha256.setDescription('The SHA256 hash-type of the Operator Password.')
hpSwitchAAAServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20), )
if mibBuilder.loadTexts: hpSwitchAAAServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupTable.setDescription('This table lists the RADIUS server groups.')
hpSwitchAAAServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpSwitchAAAServerGroupProtocolType"), (0, "HP-AUTH-MIB", "hpSwitchAAAServerGroupIndex"), (0, "HP-AUTH-MIB", "hpSwitchAAAServerGroupServerIndex"))
if mibBuilder.loadTexts: hpSwitchAAAServerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupEntry.setDescription('RADIUS server group entry.')
hpSwitchAAAServerGroupProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("tacacs", 2))))
if mibBuilder.loadTexts: hpSwitchAAAServerGroupProtocolType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupProtocolType.setDescription('This part of the index indicates which protocol server the server group is for. See the documentation protocols supported.')
hpSwitchAAAServerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20, 1, 2), Integer32())
if mibBuilder.loadTexts: hpSwitchAAAServerGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupIndex.setDescription('This index indicates the server group in the AAA server group table.')
hpSwitchAAAServerGroupServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20, 1, 3), Integer32())
if mibBuilder.loadTexts: hpSwitchAAAServerGroupServerIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupServerIndex.setDescription('The index value which identifies the server in the server group.')
hpSwitchAAAServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAAAServerGroupName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupName.setDescription('The name of a given AAA server group. The current maximum length is 12.')
hpSwitchAAAServerGroupServerInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAAAServerGroupServerInetType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupServerInetType.setDescription('The IP Address type of the server. Currently only Ipv4 is supported.')
hpSwitchAAAServerGroupServerInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAAAServerGroupServerInetAddr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupServerInetAddr.setDescription('The IP Address of the server.')
hpSwitchAAAServerGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 20, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAAAServerGroupStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroupStatus.setDescription('The status of the AAA server group row. Supported values are createAndGo, destroy, and active.')
hpSwitchLocalMgmtPrivUsernamesTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21), )
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamesTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamesTable.setDescription('This table lists the Local Management Privilege user names.')
hpSwitchLocalMgmtPrivUsernamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1), ).setIndexNames((0, "HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernameIndex"))
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamesEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamesEntry.setDescription('Local Management Usernames entry.')
hpSwitchLocalMgmtPrivUsernameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 1), Integer32())
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernameIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernameIndex.setDescription('The index value uniquely identifies a row in the command table.')
hpSwitchLocalMgmtPrivUsernameStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernameStr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernameStr.setDescription('The username .')
hpSwitchLocalMgmtPrivUsernamePasswdType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("sha1", 3), ("sha256", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamePasswdType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamePasswdType.setDescription('The type of encryption used for this Conceptual row password object.')
hpSwitchLocalMgmtPrivUsernamePasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamePasswd.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamePasswd.setDescription('Storage location for the password associated with this Username. Always returns a NULL string.')
hpSwitchLocalMgmtPrivUsernameGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernameGrpIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernameGrpIndex.setDescription('The index that represents which group this user is a member of.')
hpSwitchLocalMgmtPrivUsernameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernameStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernameStatus.setDescription('The status of the Local Management Privilege username row.')
hpSwitchLocalMgmtPwdUserAgingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPwdUserAgingInterval.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPwdUserAgingInterval.setDescription('This object holds the user password aging value.')
hpSwitchLocalMgmtPwdUserPasswdLengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPwdUserPasswdLengthValue.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPwdUserPasswdLengthValue.setDescription('This object holds length of local user password. ')
hpSwitchLocalMgmtPrivUsernamePasswdSha256 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 21, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamePasswdSha256.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUsernamePasswdSha256.setDescription('Storage location for the sha256 password associated with this Username. Always returns a NULL string.')
hpSwitchAuthenticationMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11))
hpSwitchAuthenticationMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1))
hpSwitchAuthenticationMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2))
hpSwitchAuthenticationMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 1)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance = hpSwitchAuthenticationMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 2)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance1 = hpSwitchAuthenticationMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance1.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 3)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup"), ("HP-AUTH-MIB", "hpSwitchKmsGroup"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance2 = hpSwitchAuthenticationMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance2.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBComplianceOobm = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 4)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusOobmGroup"), ("HP-AUTH-MIB", "hpSwitchTacacsOobmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBComplianceOobm = hpSwitchAuthenticationMIBComplianceOobm.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBComplianceOobm.setDescription('The compliance statement for devices implementing the HP Authentication Mib with OOBM support')
hpSwitchRipIfAuthTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 23), )
if mibBuilder.loadTexts: hpSwitchRipIfAuthTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRipIfAuthTable.setDescription('This table supplements the RIP interface configuration table.')
hpSwitchRipIfAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 23, 1), )
rip2IfConfEntry.registerAugmentions(("HP-AUTH-MIB", "hpSwitchRipIfAuthEntry"))
hpSwitchRipIfAuthEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: hpSwitchRipIfAuthEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRipIfAuthEntry.setDescription('RIP interface authentication configuration table entry.')
hpSwitchRipIfAuthChain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 23, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRipIfAuthChain.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRipIfAuthChain.setDescription('This object configures the KMS chain name for RIP interfaces.')
hpSwitchRip2IfConfAuthKeyEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 23, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchRip2IfConfAuthKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRip2IfConfAuthKeyEncrypted.setDescription('This object represents the encrypted format of the authentication key stored in the object rip2IfConfAuthKey. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). This object should only be written with an encrypted key.')
hpSwitchAuthNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 0))
hpSwitchPasswordExpiryNotify = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 0, 1)).setObjects(("HP-AUTH-MIB", "hpicfSwitchUserName"))
if mibBuilder.loadTexts: hpSwitchPasswordExpiryNotify.setStatus('current')
if mibBuilder.loadTexts: hpSwitchPasswordExpiryNotify.setDescription('An hpSwitchPasswordExpiryNotify notification that signifies that the password configured for the specified user has expired.')
hpSwitchUserConfigMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 5)).setObjects(("HP-AUTH-MIB", "hpSwitchUserConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchUserConfigMIBCompliance = hpSwitchUserConfigMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchUserConfigMIBCompliance.setDescription('The compliance statement for configuring user-name/password for operator/manager/port-access.')
hpSwitchAAAServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 6)).setObjects(("HP-AUTH-MIB", "hpSwitchAAAServerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAAAServerMIBCompliance = hpSwitchAAAServerMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerMIBCompliance.setDescription('The compliance statement for configuring RADIUS server groups.')
hpSwitchAuthenMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 7)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenMIBCompliance = hpSwitchAuthenMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenMIBCompliance.setDescription('The compliance statement for listing the authentication methods to be tried for granting different access levels through various access tasks')
hpSwitchLocalMgmtPrivUserMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 8)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthLocalMgmtPrivUserGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchLocalMgmtPrivUserMIBCompliance = hpSwitchLocalMgmtPrivUserMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUserMIBCompliance.setDescription('The compliance statement for listing the local management privilege methods to be tried for granting different access levels through various access tasks')
hpSwitchAuthenticationMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 9)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance3 = hpSwitchAuthenticationMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance3.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchUserConfigMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 10)).setObjects(("HP-AUTH-MIB", "hpSwitchUserConfigGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchUserConfigMIBCompliance1 = hpSwitchUserConfigMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchUserConfigMIBCompliance1.setDescription('The compliance statement for configuring user-name/password for operator/manager/port-access.')
hpSwitchLocalMgmtPrivUserMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 11)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthLocalMgmtPrivUserGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchLocalMgmtPrivUserMIBCompliance1 = hpSwitchLocalMgmtPrivUserMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUserMIBCompliance1.setDescription('The compliance statement for configuring user-name/password for operator/manager/port-access.')
hpSwitchAuthenticationMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 12)).setObjects(("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance4 = hpSwitchAuthenticationMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance4.setDescription('The compliance statement for devices implementing the HP Authentication MIB.')
hpSwitchAuthenticationMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 13)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup2"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance5 = hpSwitchAuthenticationMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance5.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBComplianceOobm1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 14)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsOobmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBComplianceOobm1 = hpSwitchAuthenticationMIBComplianceOobm1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBComplianceOobm1.setDescription('The compliance statement for devices implementing the HP Authentication Mib with OOBM support')
hpSwitchAuthenticationMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 15)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup2"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup2"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance6 = hpSwitchAuthenticationMIBCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance6.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 16)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup3"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup2"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance7 = hpSwitchAuthenticationMIBCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance7.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 17)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance8 = hpSwitchAuthenticationMIBCompliance8.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance8.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 18)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup3"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup3"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"), ("HP-AUTH-MIB", "hpSwitchRipAuthGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance9 = hpSwitchAuthenticationMIBCompliance9.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance9.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 19)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationPasswordConfigGroup"), ("HP-AUTH-MIB", "hpSwitchAuthNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance10 = hpSwitchAuthenticationMIBCompliance10.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance10.setDescription('The compliance statement for devices implementing the HP password Authentication MIB.')
hpSwitchLocalMgmtPrivUserMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 20)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthLocalMgmtPrivUserGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchLocalMgmtPrivUserMIBCompliance2 = hpSwitchLocalMgmtPrivUserMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUserMIBCompliance2.setDescription('The compliance statement for listing the local management privilege methods to be tried for granting different access levels through various access tasks')
hpSwitchUserConfigMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 21)).setObjects(("HP-AUTH-MIB", "hpSwitchUserConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchUserConfigMIBCompliance2 = hpSwitchUserConfigMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchUserConfigMIBCompliance2.setDescription('The compliance statement for configuring user-name/password for operator/manager/port-access.')
hpSwitchAuthenticationMIBCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 22)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup3"), ("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup4"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"), ("HP-AUTH-MIB", "hpSwitchRipAuthGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance11 = hpSwitchAuthenticationMIBCompliance11.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance11.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 23)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup4"), ("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup5"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"), ("HP-AUTH-MIB", "hpSwitchRipAuthGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance12 = hpSwitchAuthenticationMIBCompliance12.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance12.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchUserConfigMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 24)).setObjects(("HP-AUTH-MIB", "hpSwitchUserConfigGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchUserConfigMIBCompliance3 = hpSwitchUserConfigMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchUserConfigMIBCompliance3.setDescription('The compliance statement for configuring username and password for operator, manager or port-access.')
hpSwitchLocalMgmtPrivUserMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 25)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthLocalMgmtPrivUserGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchLocalMgmtPrivUserMIBCompliance3 = hpSwitchLocalMgmtPrivUserMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchLocalMgmtPrivUserMIBCompliance3.setDescription('The compliance statement for listing the local management privilege methods to be tried for granting different access levels through various access tasks')
hpSwitchAuthenticationMIBCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 26)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup4"), ("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup5"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup1"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"), ("HP-AUTH-MIB", "hpSwitchRipAuthGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance13 = hpSwitchAuthenticationMIBCompliance13.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance13.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 27)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup4"), ("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup6"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup1"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"), ("HP-AUTH-MIB", "hpSwitchRipAuthGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance14 = hpSwitchAuthenticationMIBCompliance14.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance14.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance15 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 28)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup4"), ("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup7"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup1"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"), ("HP-AUTH-MIB", "hpSwitchRipAuthGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance15 = hpSwitchAuthenticationMIBCompliance15.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance15.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationMIBCompliance16 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 29)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup5"), ("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup7"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup1"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"), ("HP-AUTH-MIB", "hpSwitchRipAuthGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance16 = hpSwitchAuthenticationMIBCompliance16.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance16.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchFrontPanelSecurityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 30)).setObjects(("HP-AUTH-MIB", "hpSwitchFrontPanelSecurityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFrontPanelSecurityCompliance = hpSwitchFrontPanelSecurityCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFrontPanelSecurityCompliance.setDescription('The compliance statement for configuring front panel security commands.')
hpSwitchAuthenticationMIBCompliance17 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 1, 31)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsConfigGroup1"), ("HP-AUTH-MIB", "hpSwitchTacacsStatsGroup"), ("HP-AUTH-MIB", "hpSwitchRadiusConfigGroup6"), ("HP-AUTH-MIB", "hpSwitchAuthenticationConfigGroup8"), ("HP-AUTH-MIB", "hpSwitchKmsGroup1"), ("HP-AUTH-MIB", "hpSwitchOspfAuthGroup1"), ("HP-AUTH-MIB", "hpSwitchSslGroup"), ("HP-AUTH-MIB", "hpSwitchCertGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup"), ("HP-AUTH-MIB", "hpSwitchCertStatusGroup3"), ("HP-AUTH-MIB", "hpSwitchRipAuthGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationMIBCompliance17 = hpSwitchAuthenticationMIBCompliance17.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenticationMIBCompliance17.setDescription('The compliance statement for devices implementing the HP Authentication Mib.')
hpSwitchAuthenticationConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 1)).setObjects(("HP-AUTH-MIB", "hpSwitchNumLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnablePrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup = hpSwitchAuthenticationConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup.setDescription('A collection of objects for configuring the authentication features.')
hpSwitchTacacsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 2)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsTimeout"), ("HP-AUTH-MIB", "hpSwitchTacacsAuthKey"), ("HP-AUTH-MIB", "hpSwitchTacacsServerIpAddr"), ("HP-AUTH-MIB", "hpSwitchTacacsServerKey"), ("HP-AUTH-MIB", "hpSwitchTacacsServerStatus"), ("HP-AUTH-MIB", "hpSwitchTacacsDeadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchTacacsConfigGroup = hpSwitchTacacsConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchTacacsConfigGroup.setDescription('A collection of objects for configuring the state of the TACACS+ protocol.')
hpSwitchTacacsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 3)).setObjects(("HP-AUTH-MIB", "hpTacacsStatsTacacsServerIpAddr"), ("HP-AUTH-MIB", "hpTacacsStatsNumSessOpened"), ("HP-AUTH-MIB", "hpTacacsStatsNumSessClosed"), ("HP-AUTH-MIB", "hpTacacsStatsNumSessAborted"), ("HP-AUTH-MIB", "hpTacacsStatsNumSessErrors"), ("HP-AUTH-MIB", "hpTacacsStatsNumPktsIn"), ("HP-AUTH-MIB", "hpTacacsStatsNumPktsOut"), ("HP-AUTH-MIB", "hpTacacsStatsNumAuthPktsIn"), ("HP-AUTH-MIB", "hpTacacsStatsNumAuthPktsOut"), ("HP-AUTH-MIB", "hpTacacsStatsNumAuthPktsTimedOut"), ("HP-AUTH-MIB", "hpTacacsStatsNumAutzPktsIn"), ("HP-AUTH-MIB", "hpTacacsStatsNumAutzPktsOut"), ("HP-AUTH-MIB", "hpTacacsStatsNumAutzPktsTimedOut"), ("HP-AUTH-MIB", "hpTacacsStatsNumAcctPktsIn"), ("HP-AUTH-MIB", "hpTacacsStatsNumAcctPktsOut"), ("HP-AUTH-MIB", "hpTacacsStatsNumAcctPktsTimedOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchTacacsStatsGroup = hpSwitchTacacsStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsStatsGroup.setDescription('A collection of objects for viewing the status information of the TACACS+ protocol.')
hpSwitchRadiusConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 4)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusDeadTime"), ("HP-AUTH-MIB", "hpSwitchRadiusTimeout"), ("HP-AUTH-MIB", "hpSwitchRadiusRetransmitAttempts"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKey"), ("HP-AUTH-MIB", "hpSwitchRadiusDynAutzPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerIpAddr"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKey"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAuthPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAcctPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzEnabled"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindow"), ("HP-AUTH-MIB", "hpSwitchRadiusServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRadiusConfigGroup = hpSwitchRadiusConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRadiusConfigGroup.setDescription('A collection of objects for configuring the state of the RADIUS protocol.')
hpSwitchKmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 6)).setObjects(("HP-AUTH-MIB", "hpSwitchKmsChainName"), ("HP-AUTH-MIB", "hpSwitchKmsChainKeys"), ("HP-AUTH-MIB", "hpSwitchKmsChainActiveKeys"), ("HP-AUTH-MIB", "hpSwitchKmsChainExpKeys"), ("HP-AUTH-MIB", "hpSwitchKmsChainStatus"), ("HP-AUTH-MIB", "hpSwitchKmsKeyStr"), ("HP-AUTH-MIB", "hpSwitchKmsKeyStartTime"), ("HP-AUTH-MIB", "hpSwitchKmsKeyStopTime"), ("HP-AUTH-MIB", "hpSwitchKmsKeyTxStartTime"), ("HP-AUTH-MIB", "hpSwitchKmsKeyTxStopTime"), ("HP-AUTH-MIB", "hpSwitchKmsChainStatus"), ("HP-AUTH-MIB", "hpSwitchKmsKeyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchKmsGroup = hpSwitchKmsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchKmsGroup.setDescription('A collection of objects for configuring KMS functionality.')
hpSwitchOspfAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 7)).setObjects(("HP-AUTH-MIB", "hpSwitchOspfVirtIfAuthChain"), ("HP-AUTH-MIB", "hpSwitchOspfIfAuthChain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchOspfAuthGroup = hpSwitchOspfAuthGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchOspfAuthGroup.setDescription('A collection of objects for configuring OSPF authentication.')
hpSwitchAuthenticationConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 8)).setObjects(("HP-AUTH-MIB", "hpSwitchNumLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnablePrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthRespectPriv"), ("HP-AUTH-MIB", "hpSwitchAuthenticationEncryptCredentialsMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup1 = hpSwitchAuthenticationConfigGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup1.setDescription('A collection of objects for configuring the authentication features.')
hpSwitchSslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 9)).setObjects(("HP-AUTH-MIB", "hpSwitchSslAdminStatus"), ("HP-AUTH-MIB", "hpSwitchSslPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchSslGroup = hpSwitchSslGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchSslGroup.setDescription('A collection of objects for configuring SSL Servers.')
hpSwitchCertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 10)).setObjects(("HP-AUTH-MIB", "hpSwitchServerCertificateType"), ("HP-AUTH-MIB", "hpSwitchServerCertificateRSAKeySize"), ("HP-AUTH-MIB", "hpSwitchServerCertificateSerialNumber"), ("HP-AUTH-MIB", "hpSwitchServerCertificateStartDate"), ("HP-AUTH-MIB", "hpSwitchServerCertificateEndDate"), ("HP-AUTH-MIB", "hpSwitchServerCertificateCommonName"), ("HP-AUTH-MIB", "hpSwitchServerCertificateOrgUnit"), ("HP-AUTH-MIB", "hpSwitchServerCertificateOrgName"), ("HP-AUTH-MIB", "hpSwitchServerCertificateCityName"), ("HP-AUTH-MIB", "hpSwitchServerCertificateStateName"), ("HP-AUTH-MIB", "hpSwitchServerCertificateCountryCode"), ("HP-AUTH-MIB", "hpSwitchServerCertificateFingerprintMD5"), ("HP-AUTH-MIB", "hpSwitchServerCertificateFingerprintSHA1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchCertGroup = hpSwitchCertGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCertGroup.setDescription('A collection of objects for configuring Certificates.')
hpSwitchCertStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 11)).setObjects(("HP-AUTH-MIB", "hpSwitchServerCertificateOperation"), ("HP-AUTH-MIB", "hpSwitchServerNewRSAKeyOperation"), ("HP-AUTH-MIB", "hpSwitchServerNewCertificateStartDate"), ("HP-AUTH-MIB", "hpSwitchServerNewCertificateEndDate"), ("HP-AUTH-MIB", "hpSwitchServerNewCertCommonName"), ("HP-AUTH-MIB", "hpSwitchServerNewCertOrgUnit"), ("HP-AUTH-MIB", "hpSwitchServerNewCertOrgName"), ("HP-AUTH-MIB", "hpSwitchServerNewCertCityName"), ("HP-AUTH-MIB", "hpSwitchServerNewCertStateName"), ("HP-AUTH-MIB", "hpSwitchServerNewCertificateCountryCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchCertStatusGroup = hpSwitchCertStatusGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCertStatusGroup.setDescription('A collection of objects for configuring Certificate Status.')
hpSwitchTacacsOobmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 12)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsServerIpAddr"), ("HP-AUTH-MIB", "hpSwitchTacacsServerIsOobm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchTacacsOobmGroup = hpSwitchTacacsOobmGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsOobmGroup.setDescription('A collection of objects for configuring the TACACS+ server entry with support for OOBM (Out of Band Management) interface.')
hpSwitchRadiusOobmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 13)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusServerIpAddr"), ("HP-AUTH-MIB", "hpSwitchRadiusServerIsOobm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRadiusOobmGroup = hpSwitchRadiusOobmGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRadiusOobmGroup.setDescription('A collection of objects for configuring the RADIUS server entry with support for OOBM (Out of Band Management) interface.')
hpSwitchCertStatusGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 14)).setObjects(("HP-AUTH-MIB", "hpSwitchServerNewCertificateCommonName"), ("HP-AUTH-MIB", "hpSwitchServerNewCertificateOrgUnit"), ("HP-AUTH-MIB", "hpSwitchServerNewCertificateOrgName"), ("HP-AUTH-MIB", "hpSwitchServerNewCertificateCityName"), ("HP-AUTH-MIB", "hpSwitchServerNewCertificateStateName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchCertStatusGroup2 = hpSwitchCertStatusGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchCertStatusGroup2.setDescription('A collection of objects for configuring Certificate Status.')
hpSwitchUserConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 15)).setObjects(("HP-AUTH-MIB", "hpicfSwitchUserName"), ("HP-AUTH-MIB", "hpicfSwitchOperatorName"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessName"), ("HP-AUTH-MIB", "hpicfSwitchUserPassword"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPassword"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPassword"), ("HP-AUTH-MIB", "hpicfSwitchUserPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchUserConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchUserConfigGroup = hpSwitchUserConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchUserConfigGroup.setDescription('A collection of objects for configuring user-name/password for operator/manager/port-access.')
hpSwitchAAAServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 16)).setObjects(("HP-AUTH-MIB", "hpSwitchAAAServerGroupName"), ("HP-AUTH-MIB", "hpSwitchAAAServerGroupServerInetType"), ("HP-AUTH-MIB", "hpSwitchAAAServerGroupServerInetAddr"), ("HP-AUTH-MIB", "hpSwitchAAAServerGroupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAAAServerGroup = hpSwitchAAAServerGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAAAServerGroup.setDescription('A collection of objects for configuring RADIUS server groups.')
hpSwitchAuthenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 17)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthenLoginServerGroupName"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableServerGroupName"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondAuthMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenGroup = hpSwitchAuthenGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenGroup.setDescription('A collection of objects for listing the authentication methods to be tried for granting different access levels through various access tasks.')
hpSwitchAuthLocalMgmtPrivUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 18)).setObjects(("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernameStr"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernamePasswdType"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernamePasswd"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernameGrpIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthLocalMgmtPrivUserGroup = hpSwitchAuthLocalMgmtPrivUserGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthLocalMgmtPrivUserGroup.setDescription('A collection of objects for configuring Local Management Privilege Groups')
hpSwitchAuthLocalMgmtPrivUserGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 34)).setObjects(("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernameStr"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernamePasswdType"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernamePasswd"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernameGrpIndex"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPwdUserAgingInterval"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPwdUserPasswdLengthValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthLocalMgmtPrivUserGroup2 = hpSwitchAuthLocalMgmtPrivUserGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthLocalMgmtPrivUserGroup2.setDescription('A collection of objects for configuring Local Management Privilege Groups')
hpSwitchTacacsConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 19)).setObjects(("HP-AUTH-MIB", "hpSwitchTacacsTimeout"), ("HP-AUTH-MIB", "hpSwitchTacacsAuthKey"), ("HP-AUTH-MIB", "hpSwitchTacacsAuthKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchTacacsServerIpAddr"), ("HP-AUTH-MIB", "hpSwitchTacacsServerKey"), ("HP-AUTH-MIB", "hpSwitchTacacsServerKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchTacacsServerStatus"), ("HP-AUTH-MIB", "hpSwitchTacacsDeadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchTacacsConfigGroup1 = hpSwitchTacacsConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchTacacsConfigGroup1.setDescription('A collection of objects for configuring the state of the TACACS+ protocol.')
hpSwitchRadiusConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 20)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusDeadTime"), ("HP-AUTH-MIB", "hpSwitchRadiusTimeout"), ("HP-AUTH-MIB", "hpSwitchRadiusRetransmitAttempts"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKey"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusDynAutzPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerIpAddr"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKey"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAuthPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAcctPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzEnabled"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindow"), ("HP-AUTH-MIB", "hpSwitchRadiusServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRadiusConfigGroup1 = hpSwitchRadiusConfigGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRadiusConfigGroup1.setDescription('A collection of objects for configuring the state of the RADIUS protocol.')
hpSwitchKmsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 21)).setObjects(("HP-AUTH-MIB", "hpSwitchKmsChainName"), ("HP-AUTH-MIB", "hpSwitchKmsChainKeys"), ("HP-AUTH-MIB", "hpSwitchKmsChainActiveKeys"), ("HP-AUTH-MIB", "hpSwitchKmsChainExpKeys"), ("HP-AUTH-MIB", "hpSwitchKmsChainStatus"), ("HP-AUTH-MIB", "hpSwitchKmsKeyStr"), ("HP-AUTH-MIB", "hpSwitchKmsKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchKmsKeyStartTime"), ("HP-AUTH-MIB", "hpSwitchKmsKeyStopTime"), ("HP-AUTH-MIB", "hpSwitchKmsKeyTxStartTime"), ("HP-AUTH-MIB", "hpSwitchKmsKeyTxStopTime"), ("HP-AUTH-MIB", "hpSwitchKmsChainStatus"), ("HP-AUTH-MIB", "hpSwitchKmsKeyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchKmsGroup1 = hpSwitchKmsGroup1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchKmsGroup1.setDescription('A collection of objects for configuring KMS functionality.')
hpSwitchUserConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 22)).setObjects(("HP-AUTH-MIB", "hpicfSwitchUserName"), ("HP-AUTH-MIB", "hpicfSwitchOperatorName"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessName"), ("HP-AUTH-MIB", "hpicfSwitchUserPassword"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPassword"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPassword"), ("HP-AUTH-MIB", "hpicfSwitchUserPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchUserPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchUserConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchUserConfigGroup1 = hpSwitchUserConfigGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchUserConfigGroup1.setDescription('A collection of objects for configuring user-name/password for operator/manager/port-access.')
hpSwitchUserConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 33)).setObjects(("HP-AUTH-MIB", "hpicfSwitchUserName"), ("HP-AUTH-MIB", "hpicfSwitchOperatorName"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessName"), ("HP-AUTH-MIB", "hpicfSwitchUserPassword"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPassword"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPassword"), ("HP-AUTH-MIB", "hpicfSwitchUserPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchUserPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchUserConfigStatus"), ("HP-AUTH-MIB", "hpicfSwitchUserPwdAgingInterval"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPwdAgingInterval"), ("HP-AUTH-MIB", "hpicfSwitchUserPwdLengthValue"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPwdLengthValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchUserConfigGroup2 = hpSwitchUserConfigGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchUserConfigGroup2.setDescription('A collection of objects for configuring user-name/password for operator/manager/port-access.')
hpSwitchUserConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 38)).setObjects(("HP-AUTH-MIB", "hpicfSwitchUserName"), ("HP-AUTH-MIB", "hpicfSwitchOperatorName"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessName"), ("HP-AUTH-MIB", "hpicfSwitchUserPassword"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPassword"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPassword"), ("HP-AUTH-MIB", "hpicfSwitchUserPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPasswordEncrypted"), ("HP-AUTH-MIB", "hpicfSwitchUserPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchPortAccessPasswordHashType"), ("HP-AUTH-MIB", "hpicfSwitchUserConfigStatus"), ("HP-AUTH-MIB", "hpicfSwitchUserPwdAgingInterval"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPwdAgingInterval"), ("HP-AUTH-MIB", "hpicfSwitchUserPwdLengthValue"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPwdLengthValue"), ("HP-AUTH-MIB", "hpicfSwitchNonPlaintextSha256"), ("HP-AUTH-MIB", "hpicfSwitchUserPasswordHashSha256"), ("HP-AUTH-MIB", "hpicfSwitchOperatorPasswordHashSha256"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchUserConfigGroup3 = hpSwitchUserConfigGroup3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchUserConfigGroup3.setDescription('A collection of objects for configuring username and password for operator, manager or port-access.')
hpSwitchAuthLocalMgmtPrivUserGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 23)).setObjects(("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernameStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthLocalMgmtPrivUserGroup1 = hpSwitchAuthLocalMgmtPrivUserGroup1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthLocalMgmtPrivUserGroup1.setDescription('Row Status of objects for configuring Local Management Privilege Groups')
hpSwitchCertStatusGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 24)).setObjects(("HP-AUTH-MIB", "hpSwitchServerNewCertKeySizeExists"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchCertStatusGroup3 = hpSwitchCertStatusGroup3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCertStatusGroup3.setDescription('A collection of objects for configuring Certificate Keys.')
hpSwitchAuthenticationConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 25)).setObjects(("HP-AUTH-MIB", "hpSwitchNumLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthLockoutDelay"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnablePrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthRespectPriv"), ("HP-AUTH-MIB", "hpSwitchAuthenticationEncryptCredentialsMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup2 = hpSwitchAuthenticationConfigGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup2.setDescription('A collection of objects for configuring the authentication features.')
hpSwitchRadiusConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 26)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusDeadTime"), ("HP-AUTH-MIB", "hpSwitchRadiusTimeout"), ("HP-AUTH-MIB", "hpSwitchRadiusRetransmitAttempts"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKey"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusDynAutzPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddrType"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddress"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKey"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAuthPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAcctPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzEnabled"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindow"), ("HP-AUTH-MIB", "hpSwitchRadiusServerIsOobm"), ("HP-AUTH-MIB", "hpSwitchRadiusServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRadiusConfigGroup2 = hpSwitchRadiusConfigGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRadiusConfigGroup2.setDescription('A collection of objects for configuring the state of the RADIUS protocol.')
hpSwitchAuthenticationConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 27)).setObjects(("HP-AUTH-MIB", "hpSwitchNumLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthLockoutDelay"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnablePrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthRespectPriv"), ("HP-AUTH-MIB", "hpSwitchAuthenticationEncryptCredentialsMethod"), ("HP-AUTH-MIB", "hpSwitchMinimumPasswordLength"), ("HP-AUTH-MIB", "hpSwitchAuthAllowVlanTagged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup3 = hpSwitchAuthenticationConfigGroup3.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup3.setDescription('A collection of objects for configuring the authentication features.')
hpSwitchAuthenticationConfigGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 28)).setObjects(("HP-AUTH-MIB", "hpicfSwitchBypassUsername"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup4 = hpSwitchAuthenticationConfigGroup4.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup4.setDescription('A collection of objects which controls bypassing of the username during authentication to get Operator or Manager access.')
hpSwitchRadiusConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 29)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusDeadTime"), ("HP-AUTH-MIB", "hpSwitchRadiusTimeout"), ("HP-AUTH-MIB", "hpSwitchRadiusRetransmitAttempts"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKey"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusDynAutzPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddrType"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddress"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKey"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAuthPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAcctPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzEnabled"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindow"), ("HP-AUTH-MIB", "hpSwitchRadiusServerIsOobm"), ("HP-AUTH-MIB", "hpSwitchRadiusServerStatus"), ("HP-AUTH-MIB", "hpSwitchRadiusTracking"), ("HP-AUTH-MIB", "hpSwitchRadiusTrackingUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRadiusConfigGroup3 = hpSwitchRadiusConfigGroup3.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRadiusConfigGroup3.setDescription('A collection of objects for configuring the state of the RADIUS protocol.')
hpSwitchRipAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 31)).setObjects(("HP-AUTH-MIB", "hpSwitchRipIfAuthChain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRipAuthGroup = hpSwitchRipAuthGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRipAuthGroup.setDescription('A collection of objects for configuring RIP authentication.')
hpSwitchAuthenticationPasswordConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 32)).setObjects(("HP-AUTH-MIB", "hpSwitchAuthPwdControlCheck"), ("HP-AUTH-MIB", "hpSwitchAuthPwdUserNameCheck"), ("HP-AUTH-MIB", "hpSwitchAuthPwdRepeatCharactersCheck"), ("HP-AUTH-MIB", "hpSwitchAuthPwdRepeatPasswordCheck"), ("HP-AUTH-MIB", "hpSwitchAuthPwdAgingCheck"), ("HP-AUTH-MIB", "hpSwitchAuthPwdLogonDetailsCheck"), ("HP-AUTH-MIB", "hpSwitchAuthPwdAgingValue"), ("HP-AUTH-MIB", "hpSwitchAuthPwdHistoryCheck"), ("HP-AUTH-MIB", "hpSwitchAuthPwdHistoryRecordsRange"), ("HP-AUTH-MIB", "hpSwitchAuthPwdAlertBeforeExpiry"), ("HP-AUTH-MIB", "hpSwitchAuthPwdExpiredUserLoginDays"), ("HP-AUTH-MIB", "hpSwitchAuthPwdExpiredUserLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthPwdUpdateInterval"), ("HP-AUTH-MIB", "hpSwitchAuthenCompositionValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationPasswordConfigGroup = hpSwitchAuthenticationPasswordConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenticationPasswordConfigGroup.setDescription('A collection of objects for configuring the password authentication features as per UCR guidelines.')
hpSwitchAuthNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 35)).setObjects(("HP-AUTH-MIB", "hpSwitchPasswordExpiryNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthNotificationGroup = hpSwitchAuthNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthNotificationGroup.setDescription('A collection of objects that lists the authentication notifications.')
hpSwitchRadiusConfigGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 36)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusDeadTime"), ("HP-AUTH-MIB", "hpSwitchRadiusTimeout"), ("HP-AUTH-MIB", "hpSwitchRadiusRetransmitAttempts"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKey"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusDynAutzPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddrType"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddress"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKey"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAuthPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAcctPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzEnabled"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindow"), ("HP-AUTH-MIB", "hpSwitchRadiusServerIsOobm"), ("HP-AUTH-MIB", "hpSwitchRadiusServerStatus"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindowType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRadiusConfigGroup4 = hpSwitchRadiusConfigGroup4.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRadiusConfigGroup4.setDescription('A collection of objects for configuring the state of the RADIUS protocol.')
hpSwitchAuthenticationConfigGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 37)).setObjects(("HP-AUTH-MIB", "hpSwitchNumLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthLockoutDelay"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnablePrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthRespectPriv"), ("HP-AUTH-MIB", "hpSwitchAuthenticationEncryptCredentialsMethod"), ("HP-AUTH-MIB", "hpSwitchMinimumPasswordLength"), ("HP-AUTH-MIB", "hpSwitchAuthAllowVlanTagged"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenClientPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenClientSecondary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup5 = hpSwitchAuthenticationConfigGroup5.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup5.setDescription('A collection of objects for configuring the authentication features.')
hpSwitchAuthLocalMgmtPrivUserGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 39)).setObjects(("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernameStr"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernamePasswdType"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernamePasswd"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernameGrpIndex"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPwdUserAgingInterval"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPwdUserPasswdLengthValue"), ("HP-AUTH-MIB", "hpSwitchLocalMgmtPrivUsernamePasswdSha256"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthLocalMgmtPrivUserGroup3 = hpSwitchAuthLocalMgmtPrivUserGroup3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthLocalMgmtPrivUserGroup3.setDescription('A collection of objects for configuring Local Management Privilege Groups')
hpSwitchOspfAuthGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 40)).setObjects(("HP-AUTH-MIB", "hpSwitchOspfVirtIfAuthChain"), ("HP-AUTH-MIB", "hpSwitchOspfIfAuthChain"), ("HP-AUTH-MIB", "hpSwitchOspfVirtIfAuthKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchOspfIfAuthKeyEncrypted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchOspfAuthGroup1 = hpSwitchOspfAuthGroup1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchOspfAuthGroup1.setDescription('A collection of objects for configuring OSPF authentication.')
hpSwitchRipAuthGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 41)).setObjects(("HP-AUTH-MIB", "hpSwitchRipIfAuthChain"), ("HP-AUTH-MIB", "hpSwitchRip2IfConfAuthKeyEncrypted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRipAuthGroup1 = hpSwitchRipAuthGroup1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRipAuthGroup1.setDescription('A collection of objects for configuring RIP authentication.')
hpSwitchAuthenticationConfigGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 42)).setObjects(("HP-AUTH-MIB", "hpSwitchNumLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthLockoutDelay"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnablePrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthRespectPriv"), ("HP-AUTH-MIB", "hpSwitchAuthenticationEncryptCredentialsMethod"), ("HP-AUTH-MIB", "hpSwitchMinimumPasswordLength"), ("HP-AUTH-MIB", "hpSwitchAuthAllowVlanTagged"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenClientPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenClientSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenHideSensitiveData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup6 = hpSwitchAuthenticationConfigGroup6.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup6.setDescription('A collection of objects for configuring the authentication features.')
hpSwitchAuthenticationConfigGroup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 43)).setObjects(("HP-AUTH-MIB", "hpSwitchNumLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthLockoutDelay"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnablePrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthRespectPriv"), ("HP-AUTH-MIB", "hpSwitchAuthenticationEncryptCredentialsMethod"), ("HP-AUTH-MIB", "hpSwitchMinimumPasswordLength"), ("HP-AUTH-MIB", "hpSwitchAuthAllowVlanTagged"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenClientPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenClientSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenHideSensitiveData"), ("HP-AUTH-MIB", "hpSwitchAuthUnlockUser"), ("HP-AUTH-MIB", "hpSwitchAuthUserBasedLockout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup7 = hpSwitchAuthenticationConfigGroup7.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup7.setDescription('A collection of objects for configuring the authentication features.')
hpSwitchRadiusConfigGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 44)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusDeadTime"), ("HP-AUTH-MIB", "hpSwitchRadiusTimeout"), ("HP-AUTH-MIB", "hpSwitchRadiusRetransmitAttempts"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKey"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusDynAutzPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddrType"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddress"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKey"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAuthPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAcctPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzEnabled"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindow"), ("HP-AUTH-MIB", "hpSwitchRadiusServerIsOobm"), ("HP-AUTH-MIB", "hpSwitchRadiusServerStatus"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindowType"), ("HP-AUTH-MIB", "hpSwitchRadiusCppmIdentity"), ("HP-AUTH-MIB", "hpSwitchRadiusCppmKey"), ("HP-AUTH-MIB", "hpSwitchRadiusCppmEncryptedKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRadiusConfigGroup5 = hpSwitchRadiusConfigGroup5.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchRadiusConfigGroup5.setDescription('A collection of objects for configuring the state of the RADIUS protocol.')
hpSwitchFrontPanelSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 45)).setObjects(("HP-AUTH-MIB", "hpSwitchFpsPasswordClear"), ("HP-AUTH-MIB", "hpSwitchFpsFactoryReset"), ("HP-AUTH-MIB", "hpSwitchFpsPasswordRecovery"), ("HP-AUTH-MIB", "hpSwitchFpsDiagnosticResetClearButton"), ("HP-AUTH-MIB", "hpSwitchFpsDiagnosticResetSerialConsole"), ("HP-AUTH-MIB", "hpSwitchFpsDisplayInConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFrontPanelSecurityGroup = hpSwitchFrontPanelSecurityGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFrontPanelSecurityGroup.setDescription('A collection of objects for configuring front panel security commands.')
hpSwitchRadiusConfigGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 46)).setObjects(("HP-AUTH-MIB", "hpSwitchRadiusDeadTime"), ("HP-AUTH-MIB", "hpSwitchRadiusTimeout"), ("HP-AUTH-MIB", "hpSwitchRadiusRetransmitAttempts"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKey"), ("HP-AUTH-MIB", "hpSwitchRadiusAuthKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusDynAutzPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddrType"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAddress"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKey"), ("HP-AUTH-MIB", "hpSwitchRadiusServerKeyEncrypted"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAuthPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerAcctPortNumber"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzEnabled"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindow"), ("HP-AUTH-MIB", "hpSwitchRadiusServerIsOobm"), ("HP-AUTH-MIB", "hpSwitchRadiusServerStatus"), ("HP-AUTH-MIB", "hpSwitchRadiusServerDynAutzTimeWindowType"), ("HP-AUTH-MIB", "hpSwitchRadiusCppmIdentity"), ("HP-AUTH-MIB", "hpSwitchRadiusCppmKey"), ("HP-AUTH-MIB", "hpSwitchRadiusCppmEncryptedKey"), ("HP-AUTH-MIB", "hpSwitchRadiusDeadTimeInfinite"), ("HP-AUTH-MIB", "hpSwitchRadiusTrackingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRadiusConfigGroup6 = hpSwitchRadiusConfigGroup6.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRadiusConfigGroup6.setDescription('A collection of objects for configuring the state of the RADIUS protocol.')
hpSwitchAuthenticationConfigGroup8 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 16, 11, 2, 47)).setObjects(("HP-AUTH-MIB", "hpSwitchNumLoginAttempts"), ("HP-AUTH-MIB", "hpSwitchAuthLockoutDelay"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnablePrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthRespectPriv"), ("HP-AUTH-MIB", "hpSwitchAuthenticationEncryptCredentialsMethod"), ("HP-AUTH-MIB", "hpSwitchMinimumPasswordLength"), ("HP-AUTH-MIB", "hpSwitchAuthAllowVlanTagged"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableTwoFactorType"), ("HP-AUTH-MIB", "hpSwitchAuthenLoginSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenEnableSecondAuthMethod"), ("HP-AUTH-MIB", "hpSwitchAuthenClientPrimary"), ("HP-AUTH-MIB", "hpSwitchAuthenClientSecondary"), ("HP-AUTH-MIB", "hpSwitchAuthenHideSensitiveData"), ("HP-AUTH-MIB", "hpSwitchAuthUnlockUser"), ("HP-AUTH-MIB", "hpSwitchAuthUserBasedLockout"), ("HP-AUTH-MIB", "hpSwitchAuthenCachedReauthAuthorized"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAuthenticationConfigGroup8 = hpSwitchAuthenticationConfigGroup8.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAuthenticationConfigGroup8.setDescription('A collection of objects for configuring the authentication features.')
mibBuilder.exportSymbols("HP-AUTH-MIB", hpSwitchAuthenticationConfigGroup6=hpSwitchAuthenticationConfigGroup6, hpSwitchTacacsAuthKey=hpSwitchTacacsAuthKey, hpSwitchAAAServerGroupName=hpSwitchAAAServerGroupName, hpSwitchRadiusServerAcctPortNumber=hpSwitchRadiusServerAcctPortNumber, hpSwitchServerNewCertCityName=hpSwitchServerNewCertCityName, hpSwitchRipIfAuthEntry=hpSwitchRipIfAuthEntry, hpSwitchRadiusConfigGroup4=hpSwitchRadiusConfigGroup4, hpTacacsStatsServersEntry=hpTacacsStatsServersEntry, hpSwitchKmsKeyStartTime=hpSwitchKmsKeyStartTime, hpSwitchLocalMgmtPrivUsernamePasswd=hpSwitchLocalMgmtPrivUsernamePasswd, hpSwitchCertStatusGroup2=hpSwitchCertStatusGroup2, hpSwitchAuthenLoginPrimary=hpSwitchAuthenLoginPrimary, hpSwitchRadiusCppmEncryptedKey=hpSwitchRadiusCppmEncryptedKey, hpSwitchTacacsServerIsOobm=hpSwitchTacacsServerIsOobm, hpTacacsStatsServerIndex=hpTacacsStatsServerIndex, hpSwitchServerNewCertCommonName=hpSwitchServerNewCertCommonName, hpSwitchUserConfigGroup=hpSwitchUserConfigGroup, hpSwitchRadiusCppmIdentity=hpSwitchRadiusCppmIdentity, hpSwitchTacacsConfig=hpSwitchTacacsConfig, hpSwitchCertConfig=hpSwitchCertConfig, hpSwitchRadiusTimeout=hpSwitchRadiusTimeout, hpSwitchAuthenticationConfigGroup7=hpSwitchAuthenticationConfigGroup7, hpSwitchServerCertificateType=hpSwitchServerCertificateType, hpSwitchAuthenticationMIBCompliances=hpSwitchAuthenticationMIBCompliances, hpSwitchAuthenMIBCompliance=hpSwitchAuthenMIBCompliance, hpSwitchOspfAuthGroup1=hpSwitchOspfAuthGroup1, hpSwitchKmsChainId=hpSwitchKmsChainId, hpSwitchAuthenEntry=hpSwitchAuthenEntry, hpSwitchOspfIfAuthKeyEncrypted=hpSwitchOspfIfAuthKeyEncrypted, hpSwitchTacacsStatsGroup=hpSwitchTacacsStatsGroup, hpSwitchRadiusConfigGroup=hpSwitchRadiusConfigGroup, hpSwitchAuthenticationMIBConformance=hpSwitchAuthenticationMIBConformance, hpSwitchRadiusTrackingInterval=hpSwitchRadiusTrackingInterval, hpTacacsStatsServersTable=hpTacacsStatsServersTable, hpSwitchAAAServerMIBCompliance=hpSwitchAAAServerMIBCompliance, hpSwitchRadiusConfigGroup5=hpSwitchRadiusConfigGroup5, hpSwitchOspfIfAuthChain=hpSwitchOspfIfAuthChain, hpSwitchOspfVirtIfAuthEntry=hpSwitchOspfVirtIfAuthEntry, hpSwitchServerNewCertificateOrgName=hpSwitchServerNewCertificateOrgName, hpSwitchAuthenticationMIBCompliance6=hpSwitchAuthenticationMIBCompliance6, hpTacacsStatsNumAuthPktsTimedOut=hpTacacsStatsNumAuthPktsTimedOut, hpTacacsStatsNumAutzPktsTimedOut=hpTacacsStatsNumAutzPktsTimedOut, hpSwitchLocalMgmtPrivUserMIBCompliance=hpSwitchLocalMgmtPrivUserMIBCompliance, hpicfSwitchUserConfigStatus=hpicfSwitchUserConfigStatus, hpicfSwitchNonPlaintextSha256=hpicfSwitchNonPlaintextSha256, hpSwitchNumLoginAttempts=hpSwitchNumLoginAttempts, hpSwitchAuthPwdUserNameCheck=hpSwitchAuthPwdUserNameCheck, hpSwitchAuthenLoginTwoFactorType=hpSwitchAuthenLoginTwoFactorType, hpSwitchAuthenEnableTwoFactorType=hpSwitchAuthenEnableTwoFactorType, hpSwitchAuthPwdRepeatCharactersCheck=hpSwitchAuthPwdRepeatCharactersCheck, hpSwitchTacacsServerIpAddr=hpSwitchTacacsServerIpAddr, hpicfSwitchOperatorName=hpicfSwitchOperatorName, hpSwitchAAAServerGroupProtocolType=hpSwitchAAAServerGroupProtocolType, hpSwitchLocalMgmtPrivUsernamePasswdSha256=hpSwitchLocalMgmtPrivUsernamePasswdSha256, hpSwitchAuthenEnablePrimary=hpSwitchAuthenEnablePrimary, hpSwitchAuthenticationMIBGroups=hpSwitchAuthenticationMIBGroups, hpSwitchAuthNotifications=hpSwitchAuthNotifications, hpSwitchRadiusOobmGroup=hpSwitchRadiusOobmGroup, hpSwitchAuthenPwdCompositionEntry=hpSwitchAuthenPwdCompositionEntry, hpSwitchAAAServerGroupTable=hpSwitchAAAServerGroupTable, hpicfSwitchUserConfigIndex=hpicfSwitchUserConfigIndex, hpSwitchAuthPwdExpiredUserLoginAttempts=hpSwitchAuthPwdExpiredUserLoginAttempts, hpicfSwitchPortAccessPasswordHashType=hpicfSwitchPortAccessPasswordHashType, hpSwitchTacacsServerIndex=hpSwitchTacacsServerIndex, hpSwitchAuthenticationMIBCompliance13=hpSwitchAuthenticationMIBCompliance13, hpSwitchAuthenticationEncryptCredentialsMethod=hpSwitchAuthenticationEncryptCredentialsMethod, hpSwitchRadiusServerEntry=hpSwitchRadiusServerEntry, hpSwitchRadiusRetransmitAttempts=hpSwitchRadiusRetransmitAttempts, hpSwitchKmsGroup1=hpSwitchKmsGroup1, hpSwitchFpsDiagnosticResetClearButton=hpSwitchFpsDiagnosticResetClearButton, hpSwitchRadiusTrackingUserName=hpSwitchRadiusTrackingUserName, hpSwitchRadiusServerDynAutzEnabled=hpSwitchRadiusServerDynAutzEnabled, hpSwitchKmsKeyConfigTable=hpSwitchKmsKeyConfigTable, hpSwitchServerCertificateFingerprintSHA1=hpSwitchServerCertificateFingerprintSHA1, hpSwitchAAAServerGroupServerIndex=hpSwitchAAAServerGroupServerIndex, hpSwitchAuthLocalMgmtPrivUserGroup=hpSwitchAuthLocalMgmtPrivUserGroup, hpSwitchRadiusConfigGroup6=hpSwitchRadiusConfigGroup6, hpSwitchAuthPwdAgingValue=hpSwitchAuthPwdAgingValue, hpSwitchKmsChainStatus=hpSwitchKmsChainStatus, hpicfSwitchUserPwdLengthValue=hpicfSwitchUserPwdLengthValue, hpSwitchAuthenticationMIBComplianceOobm1=hpSwitchAuthenticationMIBComplianceOobm1, hpSwitchAuthenticationConfig=hpSwitchAuthenticationConfig, hpSwitchKmsChainKeys=hpSwitchKmsChainKeys, hpSwitchRipIfAuthTable=hpSwitchRipIfAuthTable, hpSwitchAuthLocalMgmtPrivUserGroup2=hpSwitchAuthLocalMgmtPrivUserGroup2, hpSwitchRadiusServerDynAutzTimeWindow=hpSwitchRadiusServerDynAutzTimeWindow, hpSwitchRadiusServerIpAddr=hpSwitchRadiusServerIpAddr, hpSwitchRadiusServerDynAutzTimeWindowType=hpSwitchRadiusServerDynAutzTimeWindowType, hpSwitchAuthPwdAgingCheck=hpSwitchAuthPwdAgingCheck, hpTacacsStatsNumAuthPktsIn=hpTacacsStatsNumAuthPktsIn, hpSwitchAAAServerGroupServerInetAddr=hpSwitchAAAServerGroupServerInetAddr, hpSwitchAuthenticationMIBCompliance10=hpSwitchAuthenticationMIBCompliance10, hpSwitchLocalMgmtPrivUserMIBCompliance2=hpSwitchLocalMgmtPrivUserMIBCompliance2, hpSwitchUserConfigGroup1=hpSwitchUserConfigGroup1, hpSwitchAuthPwdAlertBeforeExpiry=hpSwitchAuthPwdAlertBeforeExpiry, hpSwitchUserConfigGroup2=hpSwitchUserConfigGroup2, hpSwitchServerCertificateRSAKeySize=hpSwitchServerCertificateRSAKeySize, hpSwitchRadiusServerStatus=hpSwitchRadiusServerStatus, hpicfSwitchUserPasswordHashSha256=hpicfSwitchUserPasswordHashSha256, hpTacacsStatsNumAutzPktsIn=hpTacacsStatsNumAutzPktsIn, hpSwitchServerNewCertOrgUnit=hpSwitchServerNewCertOrgUnit, hpSwitchAuthenticationConfigGroup8=hpSwitchAuthenticationConfigGroup8, hpSwitchSslAdminStatus=hpSwitchSslAdminStatus, hpSwitchAuthenPwdCompositionTable=hpSwitchAuthenPwdCompositionTable, hpicfSwitchOperatorPasswordEncrypted=hpicfSwitchOperatorPasswordEncrypted, hpSwitchAuthenLoginSecondAuthMethod=hpSwitchAuthenLoginSecondAuthMethod, hpSwitchAAAServerGroupIndex=hpSwitchAAAServerGroupIndex, hpSwitchRadiusServerAddrType=hpSwitchRadiusServerAddrType, hpSwitchUserConfigMIBCompliance=hpSwitchUserConfigMIBCompliance, hpSwitchAAAServerGroup=hpSwitchAAAServerGroup, hpSwitchKmsKeyStopTime=hpSwitchKmsKeyStopTime, hpSwitchTacacsAuthKeyEncrypted=hpSwitchTacacsAuthKeyEncrypted, PYSNMP_MODULE_ID=hpSwitchAuthenticationMIB, hpSwitchAuthenHideSensitiveData=hpSwitchAuthenHideSensitiveData, hpSwitchRadiusAuthKeyEncrypted=hpSwitchRadiusAuthKeyEncrypted, hpicfSwitchUserPwdAgingInterval=hpicfSwitchUserPwdAgingInterval, hpicfSwitchUserPasswordEncrypted=hpicfSwitchUserPasswordEncrypted, hpSwitchAuthenticationMIBCompliance3=hpSwitchAuthenticationMIBCompliance3, hpSwitchCertGroup=hpSwitchCertGroup, hpSwitchOspfAuthGroup=hpSwitchOspfAuthGroup, hpTacacsStatsNumAcctPktsOut=hpTacacsStatsNumAcctPktsOut, hpSwitchRadiusConfig=hpSwitchRadiusConfig, hpSwitchOspfVirtIfAuthKeyEncrypted=hpSwitchOspfVirtIfAuthKeyEncrypted, hpSwitchTacacsOobmGroup=hpSwitchTacacsOobmGroup, hpSwitchAuthenGroup=hpSwitchAuthenGroup, hpicfSwitchUserConfigTable=hpicfSwitchUserConfigTable, hpSwitchTacacsServerKeyEncrypted=hpSwitchTacacsServerKeyEncrypted, hpSwitchKmsKeyStatus=hpSwitchKmsKeyStatus, hpSwitchAuthenticationMIBCompliance11=hpSwitchAuthenticationMIBCompliance11, hpSwitchAuthenTable=hpSwitchAuthenTable, hpSwitchUserConfigMIBCompliance3=hpSwitchUserConfigMIBCompliance3, hpSwitchAuthenticationMIB=hpSwitchAuthenticationMIB, hpicfSwitchUserConfigEntry=hpicfSwitchUserConfigEntry, hpSwitchAuthenEnableSecondary=hpSwitchAuthenEnableSecondary, hpicfSwitchOperatorPasswordHashSha256=hpicfSwitchOperatorPasswordHashSha256, hpSwitchLocalMgmtPrivUserMIBCompliance3=hpSwitchLocalMgmtPrivUserMIBCompliance3, hpSwitchAuthenticationConfigGroup3=hpSwitchAuthenticationConfigGroup3, hpSwitchAuthNotificationGroup=hpSwitchAuthNotificationGroup, hpSwitchTacacsServerStatus=hpSwitchTacacsServerStatus, hpSwitchAuthenIndex=hpSwitchAuthenIndex, hpSwitchAuthLockoutDelay=hpSwitchAuthLockoutDelay, hpSwitchRadiusServerAddress=hpSwitchRadiusServerAddress, hpSwitchKmsGroup=hpSwitchKmsGroup, hpSwitchUserConfigMIBCompliance1=hpSwitchUserConfigMIBCompliance1, hpSwitchAuthenticationMIBCompliance7=hpSwitchAuthenticationMIBCompliance7, hpSwitchRadiusServerIndex=hpSwitchRadiusServerIndex, hpSwitchAuthenEnableServerGroupName=hpSwitchAuthenEnableServerGroupName, hpSwitchAuthenClientPrimary=hpSwitchAuthenClientPrimary, hpSwitchAuthenticationMIBCompliance12=hpSwitchAuthenticationMIBCompliance12, hpSwitchAuthAllowVlanTagged=hpSwitchAuthAllowVlanTagged, hpSwitchAuthenticationMIBCompliance17=hpSwitchAuthenticationMIBCompliance17, hpSwitchServerCertificateCityName=hpSwitchServerCertificateCityName, hpSwitchRadiusConfigGroup1=hpSwitchRadiusConfigGroup1, hpSwitchRadiusTracking=hpSwitchRadiusTracking, hpSwitchAuthPwdControlCheck=hpSwitchAuthPwdControlCheck, hpSwitchFrontPanelSecurityCompliance=hpSwitchFrontPanelSecurityCompliance, hpSwitchServerNewCertificateStateName=hpSwitchServerNewCertificateStateName, hpicfSwitchOperatorPwdLengthValue=hpicfSwitchOperatorPwdLengthValue, hpSwitchAuthenticationConfigGroup1=hpSwitchAuthenticationConfigGroup1, hpSwitchServerCertificateFingerprintMD5=hpSwitchServerCertificateFingerprintMD5, hpSwitchCertStatus=hpSwitchCertStatus, hpSwitchAAAServerGroupServerInetType=hpSwitchAAAServerGroupServerInetType, hpSwitchRadiusDeadTime=hpSwitchRadiusDeadTime, hpicfSwitchPortAccessPassword=hpicfSwitchPortAccessPassword, hpSwitchLocalMgmtPwdUserAgingInterval=hpSwitchLocalMgmtPwdUserAgingInterval, hpSwitchLocalMgmtPwdUserPasswdLengthValue=hpSwitchLocalMgmtPwdUserPasswdLengthValue, hpSwitchLocalMgmtPrivUserMIBCompliance1=hpSwitchLocalMgmtPrivUserMIBCompliance1, hpSwitchKmsChainConfigEntry=hpSwitchKmsChainConfigEntry, hpSwitchKmsChainConfigTable=hpSwitchKmsChainConfigTable, hpSwitchRadiusConfigGroup2=hpSwitchRadiusConfigGroup2, hpSwitchServerNewCertificateOrgUnit=hpSwitchServerNewCertificateOrgUnit, hpSwitchFrontPanelSecurityGroup=hpSwitchFrontPanelSecurityGroup, hpSwitchServerNewCertificateEndDate=hpSwitchServerNewCertificateEndDate, hpicfSwitchOperatorPwdAgingInterval=hpicfSwitchOperatorPwdAgingInterval, hpSwitchServerCertificateStateName=hpSwitchServerCertificateStateName, hpTacacsStatsNumAutzPktsOut=hpTacacsStatsNumAutzPktsOut, hpSwitchFpsPasswordRecovery=hpSwitchFpsPasswordRecovery, hpSwitchRadiusServerKeyEncrypted=hpSwitchRadiusServerKeyEncrypted, hpSwitchAuthUserBasedLockout=hpSwitchAuthUserBasedLockout, hpSwitchLocalMgmtPrivUsernameIndex=hpSwitchLocalMgmtPrivUsernameIndex, hpSwitchAuthPwdExpiredUserLoginDays=hpSwitchAuthPwdExpiredUserLoginDays, hpSwitchKmsChainActiveKeys=hpSwitchKmsChainActiveKeys, hpSwitchTacacsServersEntry=hpSwitchTacacsServersEntry, hpicfSwitchPortAccessName=hpicfSwitchPortAccessName, hpicfSwitchOperatorPasswordHashType=hpicfSwitchOperatorPasswordHashType, hpSwitchRipAuthGroup1=hpSwitchRipAuthGroup1, hpSwitchAuthLocalMgmtPrivUserGroup1=hpSwitchAuthLocalMgmtPrivUserGroup1, hpSwitchRadiusServerKey=hpSwitchRadiusServerKey, hpSwitchServerCertificateOrgUnit=hpSwitchServerCertificateOrgUnit, hpSwitchAuthenLoginSecondary=hpSwitchAuthenLoginSecondary, hpSwitchSslGroup=hpSwitchSslGroup, hpSwitchRadiusConfigGroup3=hpSwitchRadiusConfigGroup3, hpSwitchAAAServerGroupStatus=hpSwitchAAAServerGroupStatus, hpSwitchServerNewRSAKeyOperation=hpSwitchServerNewRSAKeyOperation, hpSwitchKmsKeyChainId=hpSwitchKmsKeyChainId, hpicfSwitchOperatorPassword=hpicfSwitchOperatorPassword, hpSwitchRadiusCppmKey=hpSwitchRadiusCppmKey, hpSwitchKmsKeyTxStopTime=hpSwitchKmsKeyTxStopTime, hpSwitchAuthenticationMIBComplianceOobm=hpSwitchAuthenticationMIBComplianceOobm, hpSwitchAuthPwdLogonDetailsCheck=hpSwitchAuthPwdLogonDetailsCheck, hpSwitchRadiusServerAuthPortNumber=hpSwitchRadiusServerAuthPortNumber, hpSwitchRipAuthGroup=hpSwitchRipAuthGroup, hpSwitchKmsKeyConfigEntry=hpSwitchKmsKeyConfigEntry, hpSwitchServerNewCertificateCountryCode=hpSwitchServerNewCertificateCountryCode, hpSwitchServerNewCertOrgName=hpSwitchServerNewCertOrgName, hpTacacsStatsNumPktsOut=hpTacacsStatsNumPktsOut, hpSwitchServerCertificateCommonName=hpSwitchServerCertificateCommonName, hpSwitchServerCertificateCountryCode=hpSwitchServerCertificateCountryCode, hpSwitchLocalMgmtPrivUsernameGrpIndex=hpSwitchLocalMgmtPrivUsernameGrpIndex, hpSwitchAuthenticationMIBCompliance1=hpSwitchAuthenticationMIBCompliance1, hpSwitchAuthPwdRepeatPasswordCheck=hpSwitchAuthPwdRepeatPasswordCheck, hpSwitchCertStatusGroup=hpSwitchCertStatusGroup, hpSwitchAuthenticationConfigGroup2=hpSwitchAuthenticationConfigGroup2, hpSwitchMinimumPasswordLength=hpSwitchMinimumPasswordLength, hpSwitchTacacsServersTable=hpSwitchTacacsServersTable, hpSwitchKmsKeyEncrypted=hpSwitchKmsKeyEncrypted, hpSwitchOspfIfAuthEntry=hpSwitchOspfIfAuthEntry, hpSwitchPasswordExpiryNotify=hpSwitchPasswordExpiryNotify, hpTacacsStatsNumSessClosed=hpTacacsStatsNumSessClosed, hpSwitchAuthUnlockUser=hpSwitchAuthUnlockUser, hpSwitchAuthenClientSecondary=hpSwitchAuthenClientSecondary, hpSwitchTacacsConfigGroup1=hpSwitchTacacsConfigGroup1, hpSwitchKmsChainExpKeys=hpSwitchKmsChainExpKeys, hpSwitchCertStatusGroup3=hpSwitchCertStatusGroup3, hpSwitchAuthRespectPriv=hpSwitchAuthRespectPriv, hpSwitchAuthenCompositionValue=hpSwitchAuthenCompositionValue, hpTacacsStatsNumAcctPktsTimedOut=hpTacacsStatsNumAcctPktsTimedOut, hpSwitchRadiusServerIsOobm=hpSwitchRadiusServerIsOobm, hpicfSwitchUserPasswordHashType=hpicfSwitchUserPasswordHashType, hpicfSwitchBypassUsername=hpicfSwitchBypassUsername, hpSwitchAuthPwdHistoryCheck=hpSwitchAuthPwdHistoryCheck, hpSwitchServerCertificateOrgName=hpSwitchServerCertificateOrgName, hpSwitchFpsDisplayInConfig=hpSwitchFpsDisplayInConfig, hpSwitchAuthenticationMIBCompliance=hpSwitchAuthenticationMIBCompliance, hpSwitchServerCertificateStartDate=hpSwitchServerCertificateStartDate, hpSwitchServerCertificateEndDate=hpSwitchServerCertificateEndDate, hpSwitchTacacsServerKey=hpSwitchTacacsServerKey, hpSwitchRadiusServerTable=hpSwitchRadiusServerTable, hpSwitchLocalMgmtPrivUsernamesTable=hpSwitchLocalMgmtPrivUsernamesTable, hpSwitchTacacsConfigGroup=hpSwitchTacacsConfigGroup, hpSwitchAuthenticationMIBCompliance8=hpSwitchAuthenticationMIBCompliance8, hpTacacsStatsNumAcctPktsIn=hpTacacsStatsNumAcctPktsIn, hpSwitchAAAServerGroupEntry=hpSwitchAAAServerGroupEntry, hpSwitchUserConfigMIBCompliance2=hpSwitchUserConfigMIBCompliance2, hpTacacsStatsNumSessOpened=hpTacacsStatsNumSessOpened, hpSwitchAuthenticationMIBCompliance15=hpSwitchAuthenticationMIBCompliance15, hpSwitchServerNewCertificateStartDate=hpSwitchServerNewCertificateStartDate, hpSwitchAuthPwdUpdateInterval=hpSwitchAuthPwdUpdateInterval, hpSwitchFrontPanelSecurity=hpSwitchFrontPanelSecurity, hpSwitchOspfIfAuthTable=hpSwitchOspfIfAuthTable, hpSwitchOspfVirtIfAuthTable=hpSwitchOspfVirtIfAuthTable, hpSwitchLocalMgmtPrivUsernameStr=hpSwitchLocalMgmtPrivUsernameStr, hpicfSwitchUserPassword=hpicfSwitchUserPassword, hpTacacsStatsNumSessAborted=hpTacacsStatsNumSessAborted)
mibBuilder.exportSymbols("HP-AUTH-MIB", hpSwitchRadiusDynAutzPortNumber=hpSwitchRadiusDynAutzPortNumber, hpTacacsStatsTacacsServerIpAddr=hpTacacsStatsTacacsServerIpAddr, hpTacacsStatsNumSessErrors=hpTacacsStatsNumSessErrors, hpSwitchKmsKeyId=hpSwitchKmsKeyId, hpSwitchUserConfigGroup3=hpSwitchUserConfigGroup3, hpSwitchServerCertificateOperation=hpSwitchServerCertificateOperation, hpSwitchRipIfAuthChain=hpSwitchRipIfAuthChain, hpicfSwitchUserName=hpicfSwitchUserName, hpSwitchLocalMgmtPrivUsernamePasswdType=hpSwitchLocalMgmtPrivUsernamePasswdType, hpSwitchAuthenCompositionIndex=hpSwitchAuthenCompositionIndex, hpSwitchKmsKeyStr=hpSwitchKmsKeyStr, hpSwitchAuthenticationConfigGroup4=hpSwitchAuthenticationConfigGroup4, hpSwitchAuthenticationMIBCompliance14=hpSwitchAuthenticationMIBCompliance14, hpSwitchServerNewCertificateCityName=hpSwitchServerNewCertificateCityName, hpSwitchAuthenticationPasswordConfigGroup=hpSwitchAuthenticationPasswordConfigGroup, hpSwitchAuthenEnableSecondAuthMethod=hpSwitchAuthenEnableSecondAuthMethod, hpSwitchFpsDiagnosticResetSerialConsole=hpSwitchFpsDiagnosticResetSerialConsole, hpSwitchTacacsDeadTime=hpSwitchTacacsDeadTime, hpSwitchRadiusAuthKey=hpSwitchRadiusAuthKey, hpSwitchAuthPwdHistoryRecordsRange=hpSwitchAuthPwdHistoryRecordsRange, hpSwitchServerNewCertKeySizeExists=hpSwitchServerNewCertKeySizeExists, hpSwitchSslConfig=hpSwitchSslConfig, hpSwitchLocalMgmtPrivUsernameStatus=hpSwitchLocalMgmtPrivUsernameStatus, hpSwitchAuthenticationMIBCompliance4=hpSwitchAuthenticationMIBCompliance4, hpSwitchAuthenticationMIBCompliance5=hpSwitchAuthenticationMIBCompliance5, hpSwitchServerCertificateSerialNumber=hpSwitchServerCertificateSerialNumber, hpSwitchLocalMgmtPrivUsernamesEntry=hpSwitchLocalMgmtPrivUsernamesEntry, hpSwitchAuthenticationConfigGroup5=hpSwitchAuthenticationConfigGroup5, hpSwitchOspfVirtIfAuthChain=hpSwitchOspfVirtIfAuthChain, hpSwitchFpsPasswordClear=hpSwitchFpsPasswordClear, hpSwitchAuthenticationPasswordConfig=hpSwitchAuthenticationPasswordConfig, hpSwitchKmsKeyTxStartTime=hpSwitchKmsKeyTxStartTime, hpSwitchServerNewCertificateCommonName=hpSwitchServerNewCertificateCommonName, hpSwitchRip2IfConfAuthKeyEncrypted=hpSwitchRip2IfConfAuthKeyEncrypted, hpSwitchTacacsTimeout=hpSwitchTacacsTimeout, hpSwitchAuthenticationConfigGroup=hpSwitchAuthenticationConfigGroup, hpSwitchAuthLocalMgmtPrivUserGroup3=hpSwitchAuthLocalMgmtPrivUserGroup3, hpTacacsStatsNumAuthPktsOut=hpTacacsStatsNumAuthPktsOut, hpSwitchSslPortNumber=hpSwitchSslPortNumber, hpSwitchAuthenLoginServerGroupName=hpSwitchAuthenLoginServerGroupName, hpSwitchFpsFactoryReset=hpSwitchFpsFactoryReset, hpSwitchAuthenticationMIBCompliance2=hpSwitchAuthenticationMIBCompliance2, hpSwitchKmsChainName=hpSwitchKmsChainName, hpSwitchServerNewCertStateName=hpSwitchServerNewCertStateName, hpTacacsStatsNumPktsIn=hpTacacsStatsNumPktsIn, hpSwitchAuthenCachedReauthAuthorized=hpSwitchAuthenCachedReauthAuthorized, hpSwitchAuthenticationMIBCompliance16=hpSwitchAuthenticationMIBCompliance16, hpSwitchRadiusDeadTimeInfinite=hpSwitchRadiusDeadTimeInfinite, hpicfSwitchPortAccessPasswordEncrypted=hpicfSwitchPortAccessPasswordEncrypted, hpSwitchAuthenticationMIBCompliance9=hpSwitchAuthenticationMIBCompliance9)
