#
# PySNMP MIB module LSERIES-TAPE-LIBRARY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LSERIES-TAPE-LIBRARY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:08:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, Bits, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, ObjectIdentity, enterprises, Counter64, NotificationType, IpAddress, Integer32, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Bits", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "ObjectIdentity", "enterprises", "Counter64", "NotificationType", "IpAddress", "Integer32", "NotificationType", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
storagetek = MibIdentifier((1, 3, 6, 1, 4, 1, 1211))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1))
lseriesTapeLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12))
lserAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1))
lserTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 2))
lserLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3))
lserDrives = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4))
lserCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5))
lserPassThru = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6))
lserInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7))
lserStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8))
lserPlayground = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9))
lserHardwareMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10))
class LserSnmpPort(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(161, 161), ValueRangeConstraint(1024, 65535), )
class LserSnmpTrapPort(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(162, 162), ValueRangeConstraint(1024, 65535), )
class LserCmdClear(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noaction", 1), ("clear", 2))

class LserDeviceStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("ok", 2), ("error", 3), ("warning", 4))

class LserMediaErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("load", 1), ("unload", 2), ("error", 3), ("unknown", 4))

lserAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentRevision.setDescription('The firmware version of the embedded agent.')
lserAgentBootDate = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentBootDate.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentBootDate.setDescription('The date & time when the agent initialized.')
lserAgentURL = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentURL.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentURL.setDescription('URL for web based management')
lserAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 6), LserSnmpPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentPort.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentPort.setDescription('UDP port number that the agent will listen on')
lserAgentCommunity = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentCommunity.setDescription('The agent default community')
lserAgentTrapSink = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8))
lserAgentTrapSinkClear = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 1), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkClear.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkClear.setDescription('Set to 2 to clear the trap recipient list.')
lserAgentTrapSinkNum = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentTrapSinkNum.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkNum.setDescription('Number of trap recipients in the table')
lserAgentTrapSinkTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3), )
if mibBuilder.loadTexts: lserAgentTrapSinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkTable.setDescription('Trap recipients table')
lserAgentTrapSinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserAgentTrapSinkTableIndex"))
if mibBuilder.loadTexts: lserAgentTrapSinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkEntry.setDescription('Trap recipients table entry')
lserAgentTrapSinkTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentTrapSinkTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkTableIndex.setDescription('Index into the trap recipients table')
lserAgentTrapSinkNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkNetName.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkNetName.setDescription("The recipent's network host name")
lserAgentTrapSinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 3), LserSnmpTrapPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkPort.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkPort.setDescription('UDP port for the recipient to receive notification')
lserAgentTrapSinkCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkCommunity.setDescription('The recipient community')
lserAgentTrapSinkVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpV1", 1), ("snmpV2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkVersion.setDescription('Supported trap version for the recipient (V2 also includes V1 traps)')
lserAgentTrapSinkClearEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 6), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkClearEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserAgentTrapSinkClearEntry.setDescription('Set to 2 to clear/remove the trap recipient entry')
lserTrapText = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: lserTrapText.setDescription('A trap displayString varbind')
lserTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("warning", 2), ("info", 3), ("configuration", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: lserTrapSeverity.setDescription('The report level/severity for a TRAP')
lserTrapError = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,1)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserTrapText"), ("LSERIES-TAPE-LIBRARY-MIB", "lserTrapSeverity"))
if mibBuilder.loadTexts: lserTrapError.setDescription('An error trap - condition which is critical to machine operation encountered')
lserTrapWarning = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,2)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserTrapText"), ("LSERIES-TAPE-LIBRARY-MIB", "lserTrapSeverity"))
if mibBuilder.loadTexts: lserTrapWarning.setDescription('A warning trap - condition which may need attention has been encountered')
lserTrapInformation = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,3)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserTrapText"), ("LSERIES-TAPE-LIBRARY-MIB", "lserTrapSeverity"))
if mibBuilder.loadTexts: lserTrapInformation.setDescription('An information trap - information is presented for activity monitoring')
lserTrapConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,4)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserTrapText"), ("LSERIES-TAPE-LIBRARY-MIB", "lserTrapSeverity"))
if mibBuilder.loadTexts: lserTrapConfiguration.setDescription('A configuration trap - reporting machine configuration activity')
lserTrapAgentStart = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,11)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserAgentBootDate"))
if mibBuilder.loadTexts: lserTrapAgentStart.setDescription('This trap is sent when the agent starts')
lserTrapLibStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,21)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibStkBaseModel"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibSerialNumber"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"))
if mibBuilder.loadTexts: lserTrapLibStatusGood.setDescription('This trap is sent when the library status changes to Good')
lserTrapLibStatusCheck = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,25)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibStkBaseModel"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibSerialNumber"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"))
if mibBuilder.loadTexts: lserTrapLibStatusCheck.setDescription('This trap is sent when the library status changes to a check condition (error, warning, unknown ...)')
lserTrapDrvStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,41)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveIndex"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveSerialNum"))
if mibBuilder.loadTexts: lserTrapDrvStatusGood.setDescription('This trap sent when a drive status changes to good')
lserTrapDrvStatusCheck = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,45)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveIndex"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveSerialNum"))
if mibBuilder.loadTexts: lserTrapDrvStatusCheck.setDescription('This trap sent when a drive status changes to a check condition (error, warning, unknown ...)')
lserTrapCapStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,61)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapIndex"))
if mibBuilder.loadTexts: lserTrapCapStatusGood.setDescription('This trap sent when a CAP status changes to good')
lserTrapCapStatusOpen = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,63)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapIndex"))
if mibBuilder.loadTexts: lserTrapCapStatusOpen.setDescription('This trap sent when a CAP status changes to open')
lserTrapCapStatusCheck = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,65)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapIndex"))
if mibBuilder.loadTexts: lserTrapCapStatusCheck.setDescription('This trap sent when a CAP status changes to a check condition (error, warning, unknown ...)')
lserTrapPtpStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,81)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserPtpState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserPtpIndex"))
if mibBuilder.loadTexts: lserTrapPtpStatusGood.setDescription('This trap sent when a PTP status changes to good')
lserTrapPtpStatusCheck = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,85)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserPtpState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserPtpIndex"))
if mibBuilder.loadTexts: lserTrapPtpStatusCheck.setDescription('This trap sent when a PTP status changes to a check condition (error, warning, unknown ...)')
lserTrapMediaStat = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,101)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorTapeLabel"), ("LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorDriveSerialNum"), ("LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorDateTime"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibMediaErrorEnum"), ("LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorOccurrenceCount"))
if mibBuilder.loadTexts: lserTrapMediaStat.setDescription('This trap is sent when a media statistic is generated')
lserLibStkBaseModel = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStkBaseModel.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStkBaseModel.setDescription('The StorageTek Model Name - see lserLibPersonality for vendor specific model data')
lserLibConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: lserLibConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibConfigPassword.setDescription('Password to enable configuration actions')
lserLibVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3))
lserLibVersionFirmRev = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionFirmRev.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibVersionFirmRev.setDescription("The library's embedded firmware version")
lserLibVersionFirmDate = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionFirmDate.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibVersionFirmDate.setDescription("The library's embedded firmware build date")
lserLibVersionBootRev = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionBootRev.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibVersionBootRev.setDescription("The library's boot software/OS version")
lserLibVersionFibre = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionFibre.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibVersionFibre.setDescription("The library's fibre channel driver version")
lserLibVersionHardware = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionHardware.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibVersionHardware.setDescription("The library's controller hardware version")
lserLibSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibSerialNumber.setDescription('The library serial number')
lserLibHostInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 5))
lserLibHostInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibHostInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibHostInterfaceType.setDescription("The library's type of host interface")
lserLibConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6))
lserLibCfgNumPanels = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPanels.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumPanels.setDescription('Number of logical panels')
lserLibCfgNumHandCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumHandCells.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumHandCells.setDescription('Number of logical hands')
lserLibCfgMinHandAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinHandAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMinHandAddr.setDescription('Minimum element ID of logical hands')
lserLibCfgMaxHandAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxHandAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMaxHandAddr.setDescription('Maximum element ID of logical hands')
lserLibCfgNumPlayCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPlayCells.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumPlayCells.setDescription('Number of playground cells')
lserLibCfgMinPlayAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinPlayAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMinPlayAddr.setDescription('Minimum element ID of playground cells')
lserLibCfgMaxPlayAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxPlayAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMaxPlayAddr.setDescription('Maximum element ID of playground cells')
lserLibCfgNumCaps = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumCaps.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumCaps.setDescription('Number of cartridge access ports (CAPs)')
lserLibCfgNumCapColumns = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumCapColumns.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumCapColumns.setDescription('Number of columns within CAPs')
lserLibCfgNumCapCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumCapCells.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumCapCells.setDescription('Number of CAP cells')
lserLibCfgMinCapAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinCapAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMinCapAddr.setDescription('Minimum element ID of CAP cells')
lserLibCfgMaxCapAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxCapAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMaxCapAddr.setDescription('Maximum element ID of CAP cells')
lserLibCfgNumDriveColumns = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumDriveColumns.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumDriveColumns.setDescription('Number of drive columns')
lserLibCfgNumDrives = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumDrives.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumDrives.setDescription('Number of tape drives')
lserLibCfgMinDriveAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinDriveAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMinDriveAddr.setDescription('Minimum element ID of tape drives')
lserLibCfgMaxDriveAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxDriveAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMaxDriveAddr.setDescription('Maximum element ID of tape drives')
lserLibCfgNumStorageCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumStorageCells.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumStorageCells.setDescription('Number of storage cells')
lserLibCfgMinStorageAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinStorageAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMinStorageAddr.setDescription('Minimum element ID of storage cells')
lserLibCfgMaxStorageAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxStorageAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMaxStorageAddr.setDescription('Maximum element ID of storage cells')
lserLibCfgNumPtps = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPtps.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumPtps.setDescription('Number of pass through ports (PTPs)')
lserLibCfgNumPtpColumns = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPtpColumns.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumPtpColumns.setDescription('Number of columns within PTPs')
lserLibCfgNumPtpCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPtpCells.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgNumPtpCells.setDescription('Number of PTP cells')
lserLibCfgMinPtpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinPtpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMinPtpAddr.setDescription('Minimum element ID of PTP cells')
lserLibCfgMaxPtpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxPtpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCfgMaxPtpAddr.setDescription('Maximum element ID of PTP cells')
lserLibState = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibState.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibState.setDescription("The library's state")
lserLibStatusEnum = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 8), LserDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatusEnum.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatusEnum.setDescription("The Library's operational state - reported as an enumeration")
lserLibLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9))
lserLibLogClear = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 1), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLogClear.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogClear.setDescription('Set to 2 to clear the event log')
lserLibLogNumFscs = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogNumFscs.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogNumFscs.setDescription('Number of log entries in the log table')
lserLibLogTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3), )
if mibBuilder.loadTexts: lserLibLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogTable.setDescription('Event Log Table')
lserLibLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserLibLogTableIndex"))
if mibBuilder.loadTexts: lserLibLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogEntry.setDescription('FSC log table entry')
lserLibLogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogTableIndex.setDescription('Index into the log table')
lserLibLogFscNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogFscNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogFscNumber.setDescription('The fault symptom code (FSC) of the log entry')
lserLibLogMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogMechanism.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogMechanism.setDescription('The mechanism associated with the log entry')
lserLibLogFscCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogFscCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogFscCount.setDescription('The number of occurances of the log entry')
lserLibLogDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogDateTime.setDescription("Log entry's date/time in 'MM:DD:YYYY HH:MM:SS' form")
lserLibLogSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogSummary.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogSummary.setDescription('Summary description of the log event')
lserLibLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogText.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogText.setDescription('Description of the log event')
lserLibLogClearEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 8), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLogClearEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogClearEntry.setDescription('Set to 2 to clear/remove the log entry')
lserLibLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("error", 2), ("warning", 3), ("info", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLogSeverity.setDescription('Enumeration indicating severity of the log event')
lserLibDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDeviceID.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibDeviceID.setDescription("The library's SCSI or Fibre Bus ID")
lserLibFastLoad = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibFastLoad.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibFastLoad.setDescription("The library's fast load option")
lserLibLocation = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12))
lserLibLocatContact = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatContact.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLocatContact.setDescription('The primary contact for administration')
lserLibLocatStreet = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatStreet.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLocatStreet.setDescription('Location/Site - street address')
lserLibLocatState = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatState.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLocatState.setDescription('Location/Site - state/province')
lserLibLocatZip = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatZip.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLocatZip.setDescription('Location/Site - zip code (or other data)')
lserLibLocatCountry = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatCountry.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLocatCountry.setDescription('Location/Site - country')
lserLibLocatDescr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatDescr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLocatDescr.setDescription('Location/site - description/misc')
lserLibLocatCity = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatCity.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibLocatCity.setDescription('Location/Site - city')
lserLibNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13))
lserLibNetworkIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkIpAddr.setDescription("The library's IP Address")
lserLibNetworkGateway = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkGateway.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkGateway.setDescription("The library network's internet gateway")
lserLibNetworkEthAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibNetworkEthAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkEthAddr.setDescription("The library's physical 48 bit ethernet address")
lserLibNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkName.setDescription("The library's network host name")
lserLibNetworkNetmask = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkNetmask.setDescription("The library's network internet address netmask")
lserLibNetworkFibrePresent = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notpresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibNetworkFibrePresent.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkFibrePresent.setDescription("Indication of library's fibre channel interface")
lserLibNetworkFibreID = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibNetworkFibreID.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkFibreID.setDescription('World wide ID of fibre channel interface')
lserLibNetworkFibreNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibNetworkFibreNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkFibreNumPorts.setDescription('Number of Fibre ports installed in the library')
lserLibNetworkDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkDhcpEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkDhcpEnabled.setDescription('DHCP IP address/name client lookup service status')
lserLibNetworkDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkDomainName.setDescription("The library's network domain name")
lserLibNetworkPrimaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkPrimaryDNS.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkPrimaryDNS.setDescription("The library network's primary DNS server")
lserLibNetworkSecondaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkSecondaryDNS.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibNetworkSecondaryDNS.setDescription("The library network's secondary DNS server")
lserLibStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14))
lserLibStatsNumIPL = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumIPL.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumIPL.setDescription('The number of machine initializations')
lserLibStatsNumDoorOpens = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumDoorOpens.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumDoorOpens.setDescription('The number of times the service door has been opened')
lserLibStatsNumGetRetries = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumGetRetries.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumGetRetries.setDescription('The overall number of get retries')
lserLibStatsNumGetFails = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumGetFails.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumGetFails.setDescription('The overall number of get failures')
lserLibStatsNumPutRetries = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumPutRetries.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumPutRetries.setDescription('The overall number of put retries')
lserLibStatsNumPutFails = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumPutFails.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumPutFails.setDescription('The overall number of put failures')
lserLibStatsNumLabelRetries = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumLabelRetries.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumLabelRetries.setDescription('The overall number of label read retries')
lserLibStatsNumLabelFails = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumLabelFails.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumLabelFails.setDescription('The overall number of label read failures')
lserLibStatsNumTargetRetries = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumTargetRetries.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumTargetRetries.setDescription('The overall number of target read retries')
lserLibStatsNumTargetFails = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumTargetFails.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumTargetFails.setDescription('The overall number of target read failures')
lserLibStatsNumMoves = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumMoves.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumMoves.setDescription('The overall number of cartridge moves')
lserLibStatsNumMounts = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumMounts.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumMounts.setDescription('The overall number of mounts')
lserLibStatsNumTargetReads = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumTargetReads.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumTargetReads.setDescription('The overall number of target reads')
lserLibStatsNumEmptyReads = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumEmptyReads.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumEmptyReads.setDescription('The overall number of empty cell reads')
lserLibStatsNumLabelReads = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumLabelReads.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsNumLabelReads.setDescription('The overall number of label reads')
lserLibStats5minuteSample = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16))
lserLibStats5minSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5minSampleCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5minSampleCount.setDescription('The overall number of 5 minute usage samples')
lserLibStats5minIdle = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5minIdle.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5minIdle.setDescription('The number of sample periods where there were no drive mounts')
lserLibStats5min1to25 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min1to25.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min1to25.setDescription('The number of sample periods where 1-25 mounts were performed')
lserLibStats5min26to50 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min26to50.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min26to50.setDescription('The number of sample periods where 26-50 mounts were performed')
lserLibStats5min51to75 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min51to75.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min51to75.setDescription('The number of sample periods where 51-75 mounts were performed')
lserLibStats5min76to100 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min76to100.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min76to100.setDescription('The number of sample periods where 76-100 mounts were performed')
lserLibStats5min101to125 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min101to125.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min101to125.setDescription('The number of sample periods where 101-125 mounts were performed')
lserLibStats5min126to150 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min126to150.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min126to150.setDescription('The number of sample periods where 126-150 mounts were performed')
lserLibStats5min151to175 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min151to175.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min151to175.setDescription('The number of sample periods where 151-175 mounts were performed')
lserLibStats5min176to200 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min176to200.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min176to200.setDescription('The number of sample periods where 176-200 mounts were performed')
lserLibStats5min201to225 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min201to225.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min201to225.setDescription('The number of sample periods where 201-225 mounts were performed')
lserLibStats5min226to250 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min226to250.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min226to250.setDescription('The number of sample periods where 226-250 mounts were performed')
lserLibStats5min251to300 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min251to300.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min251to300.setDescription('The number of sample periods where 251-300 mounts were performed')
lserLibStats5min301to350 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min301to350.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min301to350.setDescription('The number of sample periods where 301-350 mounts were performed')
lserLibStats5min351to400 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min351to400.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min351to400.setDescription('The number of sample periods where 351-400 mounts were performed')
lserLibStats5min401to450 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min401to450.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min401to450.setDescription('The number of sample periods where 401-450 mounts were performed')
lserLibStats5min451to500 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min451to500.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min451to500.setDescription('The number of sample periods where 451-500 mounts were performed')
lserLibStats5min501to550 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min501to550.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min501to550.setDescription('The number of sample periods where 501-550 mounts were performed')
lserLibStats5min551to600 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min551to600.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min551to600.setDescription('The number of sample periods where 551-600 mounts were performed')
lserLibStats5min601to650 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min601to650.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min601to650.setDescription('The number of sample periods where 601-650 mounts were performed')
lserLibStats5min651to700 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min651to700.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5min651to700.setDescription('The number of sample periods where 651-700 mounts were performed')
lserLibStats5minOver700 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5minOver700.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats5minOver700.setDescription('The number of sample periods where over 700 mounts were performed')
lserLibStats15minuteSample = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17))
lserLibStats15minSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15minSampleCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15minSampleCount.setDescription('The overall number of 15 minute usage samples')
lserLibStats15minIdle = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15minIdle.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15minIdle.setDescription('The number of sample periods where there were no drive mounts')
lserLibStats15min1to25 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min1to25.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min1to25.setDescription('The number of sample periods where 1-25 mounts were performed')
lserLibStats15min26to50 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min26to50.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min26to50.setDescription('The number of sample periods where 26-50 mounts were performed')
lserLibStats15min51to75 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min51to75.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min51to75.setDescription('The number of sample periods where 51-75 mounts were performed')
lserLibStats15min76to100 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min76to100.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min76to100.setDescription('The number of sample periods where 76-100 mounts were performed')
lserLibStats15min101to125 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min101to125.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min101to125.setDescription('The number of sample periods where 101-125 mounts were performed')
lserLibStats15min126to150 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min126to150.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min126to150.setDescription('The number of sample periods where 126-150 mounts were performed')
lserLibStats15min151to175 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min151to175.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min151to175.setDescription('The number of sample periods where 151-175 mounts were performed')
lserLibStats15min176to200 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min176to200.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min176to200.setDescription('The number of sample periods where 176-200 mounts were performed')
lserLibStats15min201to225 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min201to225.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min201to225.setDescription('The number of sample periods where 201-225 mounts were performed')
lserLibStats15min226to250 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min226to250.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min226to250.setDescription('The number of sample periods where 226-250 mounts were performed')
lserLibStats15min251to300 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min251to300.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min251to300.setDescription('The number of sample periods where 251-300 mounts were performed')
lserLibStats15min301to350 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min301to350.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min301to350.setDescription('The number of sample periods where 301-350 mounts were performed')
lserLibStats15min351to400 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min351to400.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min351to400.setDescription('The number of sample periods where 351-400 mounts were performed')
lserLibStats15min401to450 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min401to450.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min401to450.setDescription('The number of sample periods where 401-450 mounts were performed')
lserLibStats15min451to500 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min451to500.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min451to500.setDescription('The number of sample periods where 451-500 mounts were performed')
lserLibStats15min501to550 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min501to550.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min501to550.setDescription('The number of sample periods where 501-550 mounts were performed')
lserLibStats15min551to600 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min551to600.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min551to600.setDescription('The number of sample periods where 551-600 mounts were performed')
lserLibStats15min601to650 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min601to650.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min601to650.setDescription('The number of sample periods where 601-650 mounts were performed')
lserLibStats15min651to700 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min651to700.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15min651to700.setDescription('The number of sample periods where 651-700 mounts were performed')
lserLibStats15minOver700 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15minOver700.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStats15minOver700.setDescription('The number of sample periods where over 700 mounts were performed')
lserLibStatsGlobalClear = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 18), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibStatsGlobalClear.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibStatsGlobalClear.setDescription('Clear global statistics by writing value of clear(2)')
lserLibMediaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19))
lserMediaErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserMediaErrorCount.setDescription('Number of media statistics in the table')
lserLibMediaErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2), )
if mibBuilder.loadTexts: lserLibMediaErrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibMediaErrorTable.setDescription('A table of media statistics')
lserLibMediaErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorIndex"))
if mibBuilder.loadTexts: lserLibMediaErrorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibMediaErrorEntry.setDescription('A media error statistic')
lserMediaErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserMediaErrorIndex.setDescription('Index into the media statistic table')
lserMediaErrorTapeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorTapeLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lserMediaErrorTapeLabel.setDescription('The tape label of media statistic')
lserMediaErrorDriveSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorDriveSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: lserMediaErrorDriveSerialNum.setDescription('The drive serial number of media statistic')
lserMediaErrorDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: lserMediaErrorDateTime.setDescription("Log entry's date/time in 'MM:DD:YYYY HH:MM:SS' form")
lserLibMediaErrorEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 5), LserMediaErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibMediaErrorEnum.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibMediaErrorEnum.setDescription('The type of media error - reported as an enumeration')
lserMediaErrorOccurrenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorOccurrenceCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserMediaErrorOccurrenceCount.setDescription('Occurrence count for media statistic')
lserLibDate = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15))
lserLibDateMonth = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateMonth.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibDateMonth.setDescription('Date: month')
lserLibDateDay = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateDay.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibDateDay.setDescription('Date: day of the month')
lserLibDateYear = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateYear.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibDateYear.setDescription('Date: year (reported with 4 digits)')
lserLibDateHour = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateHour.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibDateHour.setDescription('Time: hour')
lserLibDateMinute = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateMinute.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibDateMinute.setDescription('Time: minute')
lserLibDateSecond = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateSecond.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibDateSecond.setDescription('Time: second')
lserLibDateString = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibDateString.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibDateString.setDescription("Library's date/time in 'MM:DD:YYYY HH:MM:SS' form")
lserLibPersonality = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16))
lserLibPersonVendor = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibPersonVendor.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibPersonVendor.setDescription('The library vendor name')
lserLibPersonModel = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibPersonModel.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibPersonModel.setDescription('The library model name')
lserLibPersonWebEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibPersonWebEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibPersonWebEnabled.setDescription('Web Management feature status')
lserLibPersonLibSize = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibPersonLibSize.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibPersonLibSize.setDescription('Library size configuration')
lserLibCleaning = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17))
lserLibCleanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibCleanEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanEnabled.setDescription('Auto clean feature configuration. Not all libraries support this feature, please refer to user documentation.')
lserLibCleanNumCartTypes = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCleanNumCartTypes.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanNumCartTypes.setDescription('Number of unique cartridge types supported')
lserLibCleanWarnTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3), )
if mibBuilder.loadTexts: lserLibCleanWarnTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanWarnTable.setDescription('Table of clean count warning thresholds')
lserLibCleanWarnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserLibCleanWarnIndex"))
if mibBuilder.loadTexts: lserLibCleanWarnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanWarnEntry.setDescription('Clean count warning thresh table entry')
lserLibCleanWarnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCleanWarnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanWarnIndex.setDescription('Index into clean warning thresh table')
lserLibCleanCartType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCleanCartType.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanCartType.setDescription('Name of cartridge type (DLT, 9840, etc)')
lserLibCleanWarnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibCleanWarnCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanWarnCount.setDescription('Configured warn count threshold')
lserLibCleanNumCarts = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCleanNumCarts.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanNumCarts.setDescription('Count of the clean cartridges in the library')
lserLibCleanCartTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5), )
if mibBuilder.loadTexts: lserLibCleanCartTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanCartTable.setDescription('A table of cleaning cartridges in the library')
lserLibCleanCartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserCleanCartIndex"))
if mibBuilder.loadTexts: lserLibCleanCartEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserLibCleanCartEntry.setDescription('A cleaning cartridge')
lserCleanCartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserCleanCartIndex.setDescription('Integer index into the cleaning cart table')
lserCleanCartLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lserCleanCartLabel.setDescription('The clean cartridge label')
lserCleanCartType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartType.setStatus('mandatory')
if mibBuilder.loadTexts: lserCleanCartType.setDescription('The clean cartridge type')
lserCleanCartLocationElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartLocationElementID.setStatus('mandatory')
if mibBuilder.loadTexts: lserCleanCartLocationElementID.setDescription('The clean cartridge location - element ID')
lserCleanCartHostAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartHostAccessible.setStatus('mandatory')
if mibBuilder.loadTexts: lserCleanCartHostAccessible.setDescription('Indication of host accessible status')
lserCleanCartUsageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartUsageCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserCleanCartUsageCount.setDescription('Number of times that the cartridge has been used to clean')
lserDriveCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveCount.setDescription('Count of the drives in the drive table')
lserDriveTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2), )
if mibBuilder.loadTexts: lserDriveTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveTable.setDescription('A table of drives')
lserDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserDriveIndex"))
if mibBuilder.loadTexts: lserDriveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveEntry.setDescription('A tape drive')
lserDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveIndex.setDescription('Integer index into the drive table')
lserDriveElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveElementID.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveElementID.setDescription('Element ID of the drive')
lserDriveRowInLib = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveRowInLib.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveRowInLib.setDescription('Physical row position of the drive')
lserDriveColInLib = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveColInLib.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveColInLib.setDescription('Physical column position of the drive')
lserDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveType.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveType.setDescription("The drive's type, e.g. STK9840, DLT7000")
lserDriveVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveVendor.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveVendor.setDescription("The drive's vendor, e.g. STK, Quantum")
lserDriveSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveSerialNum.setDescription("The drive's serial number")
lserDriveInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("scsi", 2), ("fibre", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveInterfaceType.setDescription("The drive's physical data transport type")
lserDriveID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserDriveID.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveID.setDescription("The drive's SCSI ID or Fibre Port assignment")
lserDriveState = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveState.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveState.setDescription("The drive's state (empty, loaded, needs cleaning, etc)")
lserDriveStatusEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 11), LserDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveStatusEnum.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveStatusEnum.setDescription("The drive's operational status in enumerated form")
lserDriveCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCodeVer.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveCodeVer.setDescription("The drive's code version")
lserDriveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveVersion.setDescription("The drive's version")
lserDriveFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFirmwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFirmwareVer.setDescription("The drive's firmware version")
lserDriveGetRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveGetRetries.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveGetRetries.setDescription('The number of mount retries performed to the drive')
lserDrivePutRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDrivePutRetries.setStatus('mandatory')
if mibBuilder.loadTexts: lserDrivePutRetries.setDescription('The number of dismount retries performed to the drive')
lserDriveCommandClean = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserDriveCommandClean.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveCommandClean.setDescription('Signal to clean/cancel cleaning of the drive')
lserDriveCellStatusEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCellStatusEnum.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveCellStatusEnum.setDescription("The status of the drive's cell presented as an enumeration")
lserDriveCellStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCellStatusText.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveCellStatusText.setDescription("The status of the drive's cell")
lserDriveCellContentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCellContentLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveCellContentLabel.setDescription("The label of the cart in the drive (zero len string if empty, '??????' if unreadable)")
lserDriveCellContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCellContentType.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveCellContentType.setDescription('The type of cartridge in the drive (zero len string if empty)')
lserDriveIdleSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveIdleSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveIdleSeconds.setDescription('Number of seconds that the drive has been idle (unmounted)')
lserDriveNumMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveNumMounts.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveNumMounts.setDescription('Number of mounts to the drive')
lserDriveUsageSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsageSampleCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveUsageSampleCount.setDescription('Total number of usage samples for this drive')
lserDriveUsageMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsageMinimum.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveUsageMinimum.setDescription('Number of samples where drive usage was less than 30 seconds')
lserDriveUsage5min = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsage5min.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveUsage5min.setDescription('Number of samples where drive usage was between 30 secs and 5 minutes')
lserDriveUsage5to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsage5to10.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveUsage5to10.setDescription('Number of samples where drive usage was between 5 and 10 minutes')
lserDriveUsage10to30 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsage10to30.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveUsage10to30.setDescription('Number of samples where drive usage was between 10 and 30 minutes')
lserDriveUsage30to60 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsage30to60.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveUsage30to60.setDescription('Number of samples where drive usage was between 30 and 60 minutes')
lserDriveUsageMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsageMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveUsageMaximum.setDescription('Number of samples where drive usage was greater than 60 minutes')
lserDriveFibreCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibreCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibreCount.setDescription('Count of drives in the fibre drive table')
lserDriveFibreTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4), )
if mibBuilder.loadTexts: lserDriveFibreTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibreTable.setDescription('A table of fibre drives')
lserDriveFibreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserDriveFibreIndex"))
if mibBuilder.loadTexts: lserDriveFibreEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibreEntry.setDescription('A fibre drive')
class LserDriveFibreLoopId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 125), )
class LserDriveFibreSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("oneGbit", 2), ("twoGbit", 3))

class LserDriveFibreAddressing(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hard", 1), ("soft", 2))

lserDriveFibreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibreIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibreIndex.setDescription('Integer index into the fibre drive table')
lserDriveFibreSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibreSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibreSerialNum.setDescription("The drive's serial number")
lserDriveFibreNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibreNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibreNodeName.setDescription("Drive's fibre node name")
lserDriveFibrePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("dual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortCount.setDescription('The number of active ports in the drive')
lserDriveFibrePortAWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortAWWN.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortAWWN.setDescription('Port A - World wide name')
lserDriveFibrePortAAddressingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 6), LserDriveFibreAddressing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortAAddressingMode.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortAAddressingMode.setDescription("PortA's addressing mode")
lserDriveFibrePortAPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortAPortEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortAPortEnabled.setDescription('Port A - is port enabled')
lserDriveFibrePortALoopId = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 8), LserDriveFibreLoopId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortALoopId.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortALoopId.setDescription('Port A - loop id')
lserDriveFibrePortAPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 9), LserDriveFibreSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortAPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortAPortSpeed.setDescription('Port A - port speed')
lserDriveFibrePortBWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBWWN.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortBWWN.setDescription('Port B - World wide name')
lserDriveFibrePortBAddressingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 11), LserDriveFibreAddressing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBAddressingMode.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortBAddressingMode.setDescription('Port B - is hard addressed')
lserDriveFibrePortBPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBPortEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortBPortEnabled.setDescription('Port B - is port enabled')
lserDriveFibrePortBLoopId = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 13), LserDriveFibreLoopId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBLoopId.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortBLoopId.setDescription('Port B - Loop id')
lserDriveFibrePortBPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 14), LserDriveFibreSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveFibrePortBPortSpeed.setDescription('Port B - Port speed')
lserDriveWWNEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveWWNEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lserDriveWWNEnabled.setDescription("The library's World Wide Name option. Can only be set in CLI, please refer to user documentation.")
lserCapCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapCount.setDescription('Count of the CAPs in the CAP table')
lserCapTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2), )
if mibBuilder.loadTexts: lserCapTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapTable.setDescription('A table of cartridge access ports')
lserCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserCapIndex"))
if mibBuilder.loadTexts: lserCapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapEntry.setDescription('A cartridge access port (CAP)')
lserCapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapIndex.setDescription('Integer index into the CAP table')
lserCapAccessibility = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapAccessibility.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapAccessibility.setDescription('The accessibility of a CAP (open allow/prevent)')
lserCapAccessStateEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("close", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapAccessStateEnum.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapAccessStateEnum.setDescription('The access state of the cap presented as an enumeration')
lserCapState = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapState.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapState.setDescription('The physical state of the CAP')
lserCapStatusEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 5), LserDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapStatusEnum.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapStatusEnum.setDescription('The operational status of the CAP presented as an enumeration')
lserCapUsageGetSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGetSampleCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGetSampleCount.setDescription('Number of usage samples for this CAP for gets')
lserCapUsageGetIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGetIdle.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGetIdle.setDescription('Number of samples where the cap was idle for gets')
lserCapUsageGet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet1.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet1.setDescription('Number of samples where the cap was used 1 time for gets')
lserCapUsageGet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet2.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet2.setDescription('Number of samples where the cap was used 2 times for gets')
lserCapUsageGet3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet3.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet3.setDescription('Number of samples where the cap was used 3 times for gets')
lserCapUsageGet4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet4.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet4.setDescription('Number of samples where the cap was used 4 times for gets')
lserCapUsageGet5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet5.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet5.setDescription('Number of samples where the cap was used 5 times for gets')
lserCapUsageGet6to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet6to10.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet6to10.setDescription('Number of samples where the cap was used 6-10 times for gets')
lserCapUsageGet11to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet11to15.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet11to15.setDescription('Number of samples where the cap was used 11-15 times for gets')
lserCapUsageGet16to20 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet16to20.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet16to20.setDescription('Number of samples where the cap was used 16-20 times for gets')
lserCapUsageGet21toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet21toMax.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsageGet21toMax.setDescription('Number of samples where the cap was used more than 20 times for gets')
lserCapUsagePutSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePutSampleCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePutSampleCount.setDescription('Number of usage samples for this CAP for puts')
lserCapUsagePutIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePutIdle.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePutIdle.setDescription('Number of samples where the cap was idle for puts')
lserCapUsagePut1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut1.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut1.setDescription('Number of samples where the cap was used 1 time for puts')
lserCapUsagePut2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut2.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut2.setDescription('Number of samples where the cap was used 2 times for puts')
lserCapUsagePut3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut3.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut3.setDescription('Number of samples where the cap was used 3 times for puts')
lserCapUsagePut4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut4.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut4.setDescription('Number of samples where the cap was used 4 times for puts')
lserCapUsagePut5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut5.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut5.setDescription('Number of samples where the cap was used 5 times for puts')
lserCapUsagePut6to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut6to10.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut6to10.setDescription('Number of samples where the cap was used 6-10 times for puts')
lserCapUsagePut11to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut11to15.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut11to15.setDescription('Number of samples where the cap was used 11-15 times for puts')
lserCapUsagePut16to20 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut16to20.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut16to20.setDescription('Number of samples where the cap was used 16-20 times for puts')
lserCapUsagePut21toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut21toMax.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapUsagePut21toMax.setDescription('Number of samples where the cap was used more than 20 times for puts')
lserCapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapName.setStatus('mandatory')
if mibBuilder.loadTexts: lserCapName.setDescription('The CAP name')
lserPtpCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCount.setDescription('Count of the pass-through ports in the library')
lserPtpTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2), )
if mibBuilder.loadTexts: lserPtpTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpTable.setDescription('A table of pass-through ports')
lserPtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserPtpIndex"))
if mibBuilder.loadTexts: lserPtpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpEntry.setDescription('A pass-through port (PTP)')
lserPtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpIndex.setDescription('Integer index into the PTP table')
lserPtpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpState.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpState.setDescription('The state of the PTP')
lserPtpStatusEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 3), LserDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpStatusEnum.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpStatusEnum.setDescription("The PTP's operational state - reported as an enumeration")
lserPtpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpSerialNumber.setDescription("The PTP's controller serial number")
lserPtpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpPartNumber.setDescription("The PTP's controller part number")
lserPtpFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpFirmwareVersion.setDescription("The PTP's embedded firmware version")
lserPtpFirmwareDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFirmwareDate.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpFirmwareDate.setDescription("The PTP's embedded firmware build date")
lserPtpSoftwareResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpSoftwareResetCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpSoftwareResetCount.setDescription("The number of times the PTP's embedded firmware has been initialized")
lserPtpDoorOpenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpDoorOpenCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpDoorOpenCount.setDescription('The number of times a service door has been opened (either library)')
lserPtpInitializationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpInitializationCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpInitializationCount.setDescription('The number of times the PTP has been initialized')
lserPtpInoperativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpInoperativeCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpInoperativeCount.setDescription('The number of times PTP has been inoperative')
lserPtpGoodCommandCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpGoodCommandCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpGoodCommandCount.setDescription('The number of commands successfully processed by the PTP')
lserPtpFailCommandCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFailCommandCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpFailCommandCount.setDescription('The number of failed commands processed by the PTP')
lserPtpGoodEmptyMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpGoodEmptyMotionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpGoodEmptyMotionCount.setDescription('The number of successful PTP motions with empty transport elements')
lserPtpFailEmptyMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFailEmptyMotionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpFailEmptyMotionCount.setDescription('The number of unsuccessful PTP motions with empty transport elements')
lserPtpGoodPartMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpGoodPartMotionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpGoodPartMotionCount.setDescription('The number of successful partially populated PTP motions')
lserPtpFailPartMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFailPartMotionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpFailPartMotionCount.setDescription('The number of unsuccessful partially populated PTP motions')
lserPtpGoodFullMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpGoodFullMotionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpGoodFullMotionCount.setDescription('The number of successful fully populated PTP motions')
lserPtpFailFullMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFailFullMotionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpFailFullMotionCount.setDescription('The number of unsuccessful fully populated PTP motions')
lserPtpCompLibNetworkIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserPtpCompLibNetworkIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCompLibNetworkIpAddr.setDescription("The companion library's IP Address")
lserPtpCompLibNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserPtpCompLibNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCompLibNetworkName.setDescription("The companion library's network host name")
lserPtpCompLibSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCompLibSerialNumber.setDescription("The companion library's controller serial number")
lserPtpCompLibPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCompLibPartNumber.setDescription("The companion library's controller part number")
lserPtpCompLibVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCompLibVendorName.setDescription("The companion library's vendor name")
lserPtpCompLibModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibModelName.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCompLibModelName.setDescription("The companion library's model name")
lserPtpCompLibFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCompLibFirmwareVersion.setDescription("The companion library's embedded firmware version")
lserPtpCompLibFirmwareDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibFirmwareDate.setStatus('mandatory')
if mibBuilder.loadTexts: lserPtpCompLibFirmwareDate.setDescription("The companion library's embedded firmware build date")
lserTapeCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserTapeCount.setDescription('Count of the cartridges in the inventory table')
lserTapeTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2), )
if mibBuilder.loadTexts: lserTapeTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserTapeTable.setDescription('A table of cartridges in the library')
lserTapeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserTapeIndex"))
if mibBuilder.loadTexts: lserTapeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserTapeEntry.setDescription('A cartridge')
lserTapeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserTapeIndex.setDescription('Integer index into the inventory table')
lserTapeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lserTapeLabel.setDescription('The cartridge label')
lserTapeType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeType.setStatus('mandatory')
if mibBuilder.loadTexts: lserTapeType.setDescription('The cartridge type')
lserTapeLocationElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeLocationElementID.setStatus('mandatory')
if mibBuilder.loadTexts: lserTapeLocationElementID.setDescription('The cartridge location - element ID')
lserTapeHostAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeHostAccessible.setStatus('mandatory')
if mibBuilder.loadTexts: lserTapeHostAccessible.setDescription('Indication of host accessible status')
lserCellCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellCount.setDescription('Count of the storage elements in the cell table')
lserCellTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2), )
if mibBuilder.loadTexts: lserCellTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellTable.setDescription('A table of storage elements in the library')
lserCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserCellIndex"))
if mibBuilder.loadTexts: lserCellEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellEntry.setDescription('A storage element')
lserCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellIndex.setDescription('Integer index into the storage cell table')
lserCellElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellElementID.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellElementID.setDescription('Element ID of the storage cell')
lserCellHostAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellHostAccessible.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellHostAccessible.setDescription('Indication of host accessible status')
lserCellContentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellContentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellContentStatus.setDescription('The status of the cell (EMPTY, READABLE, etc.)')
lserCellContentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellContentLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellContentLabel.setDescription("The label of the cart in the cell (zero len string if empty, '??????' if unreadable)")
lserCellContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellContentType.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellContentType.setDescription('The type of the cartridge in the cell (zero len string if empty)')
lserCellGetRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellGetRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellGetRetryCount.setDescription('Number of get retries performed from this cell')
lserCellPutRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellPutRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserCellPutRetryCount.setDescription('Number of put retries performed to this cell')
lserStorageFreeCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserStorageFreeCells.setStatus('mandatory')
if mibBuilder.loadTexts: lserStorageFreeCells.setDescription('Number of available (empty) storage cells in the library')
lserPlayCellCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellCount.setStatus('mandatory')
if mibBuilder.loadTexts: lserPlayCellCount.setDescription('Count of the playground elements in the cell table')
lserPlayCellTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2), )
if mibBuilder.loadTexts: lserPlayCellTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserPlayCellTable.setDescription('A table of playground elements in the library')
lserPlayCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserPlayCellIndex"))
if mibBuilder.loadTexts: lserPlayCellEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserPlayCellEntry.setDescription('A playground element')
lserPlayCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserPlayCellIndex.setDescription('Integer index into the playground cell table')
lserPlayCellElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellElementID.setStatus('mandatory')
if mibBuilder.loadTexts: lserPlayCellElementID.setDescription('Element ID of the playground cell')
lserPlayCellContentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellContentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lserPlayCellContentStatus.setDescription('The status of the cell (EMPTY, READABLE, etc.)')
lserPlayCellContentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellContentLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lserPlayCellContentLabel.setDescription("The label of the cartridge in the cell (zero len string if empty, '??????' if unreadable)")
lserPlayCellContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellContentType.setStatus('mandatory')
if mibBuilder.loadTexts: lserPlayCellContentType.setDescription('The type of the cartridge in the cell (zero len string if empty)')
lserHdwNumTempSensors = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwNumTempSensors.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwNumTempSensors.setDescription('Number of temperature sensors in the library')
lserHdwTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2), )
if mibBuilder.loadTexts: lserHdwTempSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwTempSensorTable.setDescription("A table of the library's temperature sensors")
lserHdwTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserHdwTempSensorIndex"))
if mibBuilder.loadTexts: lserHdwTempSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwTempSensorEntry.setDescription('A temperature sensor')
lserHdwTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwTempSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwTempSensorIndex.setDescription('Integer index into the temperature sensor table')
lserHdwTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwTempSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwTempSensorName.setDescription('Name of the temperature sensor')
lserHdwTempSensorCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwTempSensorCurrentTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwTempSensorCurrentTemp.setDescription('Current/Present temperature reading')
lserHdwTempSensorHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwTempSensorHighTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwTempSensorHighTemp.setDescription('Storage area peak temp since last machine boot')
lserHdwTempSensorWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserHdwTempSensorWarnThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwTempSensorWarnThreshold.setDescription('Temp threshold for automated warning')
lserHdwTempSensorFailThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserHdwTempSensorFailThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwTempSensorFailThreshold.setDescription('Temp threshold for automated library activity shutdown')
lserHdwNumFans = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwNumFans.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwNumFans.setDescription('Number of monitored fans in the library')
lserHdwFanTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4), )
if mibBuilder.loadTexts: lserHdwFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwFanTable.setDescription("A table of the library's fans")
lserHdwFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserHdwFanIndex"))
if mibBuilder.loadTexts: lserHdwFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwFanEntry.setDescription('A fan')
lserHdwFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwFanIndex.setDescription('Integer index into the fan table')
lserHdwFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwFanName.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwFanName.setDescription('Name of the fan')
lserHdwFanOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwFanOperational.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwFanOperational.setDescription('Operational state of the fan')
lserHdwNumSupplies = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwNumSupplies.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwNumSupplies.setDescription('Number of power supplies installed in the library')
lserHdwSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6), )
if mibBuilder.loadTexts: lserHdwSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwSupplyTable.setDescription("A table of the library's power supplies")
lserHdwSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserHdwSupplyIndex"))
if mibBuilder.loadTexts: lserHdwSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwSupplyEntry.setDescription('A power supply')
lserHdwSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwSupplyIndex.setDescription('Integer index into the power supply table')
lserHdwSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwSupplyName.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwSupplyName.setDescription('Name of the power supply')
lserHdwSupplyInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notinstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwSupplyInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwSupplyInstalled.setDescription('Indicates if the supply is installed(2) or not(1)')
lserHdwSupplyOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwSupplyOperational.setStatus('mandatory')
if mibBuilder.loadTexts: lserHdwSupplyOperational.setDescription('Indicates if the supply is OK(2), meaningless if not-installed')
mibBuilder.exportSymbols("LSERIES-TAPE-LIBRARY-MIB", lserHdwSupplyIndex=lserHdwSupplyIndex, lserLibStats15min601to650=lserLibStats15min601to650, lserAgentTrapSinkNetName=lserAgentTrapSinkNetName, lserCapUsageGet21toMax=lserCapUsageGet21toMax, lserLibLogClear=lserLibLogClear, lserAgentCommunity=lserAgentCommunity, lserPlayCellContentType=lserPlayCellContentType, lserAgentTrapSinkCommunity=lserAgentTrapSinkCommunity, lserTrapSeverity=lserTrapSeverity, lserLibDateMinute=lserLibDateMinute, lserHdwNumTempSensors=lserHdwNumTempSensors, lserTrapLibStatusGood=lserTrapLibStatusGood, lserPtpFailEmptyMotionCount=lserPtpFailEmptyMotionCount, lserLibStats15minSampleCount=lserLibStats15minSampleCount, lserDriveTable=lserDriveTable, lserTrapDrvStatusCheck=lserTrapDrvStatusCheck, lserLibLogFscCount=lserLibLogFscCount, lserLibCfgMaxCapAddr=lserLibCfgMaxCapAddr, lserPtpTable=lserPtpTable, lserLibStats15min176to200=lserLibStats15min176to200, lserLibDateMonth=lserLibDateMonth, lserDriveCommandClean=lserDriveCommandClean, lserDriveSerialNum=lserDriveSerialNum, lserDriveUsage5min=lserDriveUsage5min, lserPtpGoodPartMotionCount=lserPtpGoodPartMotionCount, lserLibCfgMaxPtpAddr=lserLibCfgMaxPtpAddr, lserDriveFibreTable=lserDriveFibreTable, lserCleanCartUsageCount=lserCleanCartUsageCount, lserPlayCellContentLabel=lserPlayCellContentLabel, lserHdwTempSensorTable=lserHdwTempSensorTable, lserPassThru=lserPassThru, lserLibNetworkDhcpEnabled=lserLibNetworkDhcpEnabled, lserLibStatsGlobalClear=lserLibStatsGlobalClear, lserLibCfgNumDrives=lserLibCfgNumDrives, lserLibLogClearEntry=lserLibLogClearEntry, lserAgentTrapSinkClearEntry=lserAgentTrapSinkClearEntry, lserLibStats15min651to700=lserLibStats15min651to700, products=products, lserLibStatsNumIPL=lserLibStatsNumIPL, lserPtpStatusEnum=lserPtpStatusEnum, lserLibVersionFirmRev=lserLibVersionFirmRev, lserCleanCartIndex=lserCleanCartIndex, lserDriveFibreSerialNum=lserDriveFibreSerialNum, lserCapAccessStateEnum=lserCapAccessStateEnum, lserLibLocatStreet=lserLibLocatStreet, lserLibStats5min26to50=lserLibStats5min26to50, lserLibNetworkName=lserLibNetworkName, lserDriveUsageMinimum=lserDriveUsageMinimum, lserDriveVersion=lserDriveVersion, lserDriveFibrePortBLoopId=lserDriveFibrePortBLoopId, lserLibStats5min551to600=lserLibStats5min551to600, lserDriveFibrePortCount=lserDriveFibrePortCount, lserLibLogText=lserLibLogText, lserLibStats5min126to150=lserLibStats5min126to150, lserTrapConfiguration=lserTrapConfiguration, lserDriveID=lserDriveID, lserLibLogSeverity=lserLibLogSeverity, lserLibStats15min1to25=lserLibStats15min1to25, lserLibStats15min101to125=lserLibStats15min101to125, lserMediaErrorCount=lserMediaErrorCount, lserLibCfgNumPtps=lserLibCfgNumPtps, lserLibStats15min301to350=lserLibStats15min301to350, lserLibLocatZip=lserLibLocatZip, lserCapUsagePut1=lserCapUsagePut1, lserCapUsageGet5=lserCapUsageGet5, lserLibLocatState=lserLibLocatState, lserCellContentType=lserCellContentType, lserDriveFibrePortAPortSpeed=lserDriveFibrePortAPortSpeed, lserPtpGoodCommandCount=lserPtpGoodCommandCount, lserTapeIndex=lserTapeIndex, lserLibMediaErrors=lserLibMediaErrors, lserLibStats15min251to300=lserLibStats15min251to300, lserHdwFanIndex=lserHdwFanIndex, lserCleanCartLocationElementID=lserCleanCartLocationElementID, lserLibCfgMinStorageAddr=lserLibCfgMinStorageAddr, lserLibStats15min126to150=lserLibStats15min126to150, lserPtpInitializationCount=lserPtpInitializationCount, lserPtpCompLibFirmwareVersion=lserPtpCompLibFirmwareVersion, lserHdwTempSensorEntry=lserHdwTempSensorEntry, lserLibDeviceID=lserLibDeviceID, lserHdwNumFans=lserHdwNumFans, lserHdwTempSensorIndex=lserHdwTempSensorIndex, lserLibStats5min501to550=lserLibStats5min501to550, lserTrapMediaStat=lserTrapMediaStat, lserDriveWWNEnabled=lserDriveWWNEnabled, lserTapeTable=lserTapeTable, lserDriveCellStatusEnum=lserDriveCellStatusEnum, lserHdwFanEntry=lserHdwFanEntry, lserLibDateSecond=lserLibDateSecond, lserLibMediaErrorEnum=lserLibMediaErrorEnum, lserCapIndex=lserCapIndex, lserLibNetworkFibrePresent=lserLibNetworkFibrePresent, lserLibStatsNumLabelReads=lserLibStatsNumLabelReads, lserHdwTempSensorHighTemp=lserHdwTempSensorHighTemp, lserLibLogNumFscs=lserLibLogNumFscs, lserHdwTempSensorWarnThreshold=lserHdwTempSensorWarnThreshold, lserLibNetworkNetmask=lserLibNetworkNetmask, lserTapeLocationElementID=lserTapeLocationElementID, lserDriveRowInLib=lserDriveRowInLib, lserCapUsageGetSampleCount=lserCapUsageGetSampleCount, lserLibStats15min201to225=lserLibStats15min201to225, LserDeviceStatus=LserDeviceStatus, lserDriveFibrePortBAddressingMode=lserDriveFibrePortBAddressingMode, lserLibLocation=lserLibLocation, lserDriveUsage5to10=lserDriveUsage5to10, lserLibStats5min151to175=lserLibStats5min151to175, lserAgentTrapSinkTableIndex=lserAgentTrapSinkTableIndex, lserLibStatsNumMoves=lserLibStatsNumMoves, lserTrapDrvStatusGood=lserTrapDrvStatusGood, lserCapState=lserCapState, lserPtpGoodEmptyMotionCount=lserPtpGoodEmptyMotionCount, lserLibCfgMinCapAddr=lserLibCfgMinCapAddr, lserLibDateString=lserLibDateString, lserLibPersonModel=lserLibPersonModel, lserMediaErrorDriveSerialNum=lserMediaErrorDriveSerialNum, lserTrap=lserTrap, lserPlayCellElementID=lserPlayCellElementID, lserLibCleanWarnEntry=lserLibCleanWarnEntry, lserDriveElementID=lserDriveElementID, lserDriveCodeVer=lserDriveCodeVer, LserSnmpPort=LserSnmpPort, lserLibCfgNumPtpColumns=lserLibCfgNumPtpColumns, lserDriveFibreNodeName=lserDriveFibreNodeName, lserCapUsageGet1=lserCapUsageGet1, lserCellPutRetryCount=lserCellPutRetryCount, lserCleanCartType=lserCleanCartType, lserDriveUsageSampleCount=lserDriveUsageSampleCount, lserLibCfgNumHandCells=lserLibCfgNumHandCells, lserCleanCartLabel=lserCleanCartLabel, lserLibStats15min451to500=lserLibStats15min451to500, lserLibStats5min76to100=lserLibStats5min76to100, lserLibNetworkIpAddr=lserLibNetworkIpAddr, lserCapUsagePut16to20=lserCapUsagePut16to20, lserCellIndex=lserCellIndex, lserCapUsageGet11to15=lserCapUsageGet11to15, lserLibConfig=lserLibConfig, lserDriveFibreEntry=lserDriveFibreEntry, lserLibStats15minIdle=lserLibStats15minIdle, lserLibStats5min176to200=lserLibStats5min176to200, lserLibStats5minSampleCount=lserLibStats5minSampleCount, lserPtpDoorOpenCount=lserPtpDoorOpenCount, lserLibCfgNumCapCells=lserLibCfgNumCapCells, lserLibNetworkEthAddr=lserLibNetworkEthAddr, lserHdwSupplyEntry=lserHdwSupplyEntry, lserLibStats5min201to225=lserLibStats5min201to225, lserLibStats15minuteSample=lserLibStats15minuteSample, lserDriveGetRetries=lserDriveGetRetries, lserHdwSupplyOperational=lserHdwSupplyOperational, lserAgent=lserAgent, lserTrapAgentStart=lserTrapAgentStart, lserLibLogDateTime=lserLibLogDateTime, lserDriveType=lserDriveType, lserLibStatsNumGetRetries=lserLibStatsNumGetRetries, lserTrapCapStatusGood=lserTrapCapStatusGood, lserLibNetworkPrimaryDNS=lserLibNetworkPrimaryDNS, lserCellCount=lserCellCount, lserHdwSupplyTable=lserHdwSupplyTable, lserLibStatsNumPutRetries=lserLibStatsNumPutRetries, lserCapUsagePutIdle=lserCapUsagePutIdle, lserLibStatsNumLabelRetries=lserLibStatsNumLabelRetries, lserLibVersion=lserLibVersion, lserLibStats5min101to125=lserLibStats5min101to125, lserDriveInterfaceType=lserDriveInterfaceType, lserCapUsagePut21toMax=lserCapUsagePut21toMax, lserAgentTrapSinkTable=lserAgentTrapSinkTable, lserLibLogTableIndex=lserLibLogTableIndex, lserPtpCompLibPartNumber=lserPtpCompLibPartNumber, lserLibSerialNumber=lserLibSerialNumber, lserDriveUsage10to30=lserDriveUsage10to30, lserLibStats15min351to400=lserLibStats15min351to400, LserDriveFibreAddressing=LserDriveFibreAddressing, lserLibStats5min51to75=lserLibStats5min51to75, lserLibStats15min51to75=lserLibStats15min51to75, lserLibCfgMinPtpAddr=lserLibCfgMinPtpAddr, lserLibrary=lserLibrary, lserLibCfgMinHandAddr=lserLibCfgMinHandAddr, lserTrapWarning=lserTrapWarning, lserCapUsageGet4=lserCapUsageGet4, lserLibStatsNumTargetFails=lserLibStatsNumTargetFails, lserDriveFibreCount=lserDriveFibreCount, lserAgentTrapSink=lserAgentTrapSink, lserTapeEntry=lserTapeEntry, lserCellGetRetryCount=lserCellGetRetryCount, lserCapEntry=lserCapEntry, lserDriveVendor=lserDriveVendor, lserLibStats15min226to250=lserLibStats15min226to250, lserLibCfgNumDriveColumns=lserLibCfgNumDriveColumns, lserLibCfgNumCapColumns=lserLibCfgNumCapColumns, lserLibStats5minuteSample=lserLibStats5minuteSample, lserCapCount=lserCapCount, lserHdwNumSupplies=lserHdwNumSupplies, lserLibStats5min301to350=lserLibStats5min301to350, lserTrapPtpStatusGood=lserTrapPtpStatusGood, lserCapUsageGet16to20=lserCapUsageGet16to20, lserLibCfgMaxHandAddr=lserLibCfgMaxHandAddr, lserLibDateYear=lserLibDateYear, lserDriveCellStatusText=lserDriveCellStatusText, lserCapUsagePut3=lserCapUsagePut3, lserLibStatsNumTargetRetries=lserLibStatsNumTargetRetries, lserLibNetworkSecondaryDNS=lserLibNetworkSecondaryDNS, lserPtpFailCommandCount=lserPtpFailCommandCount, lserLibCfgNumPtpCells=lserLibCfgNumPtpCells, lserLibState=lserLibState, lserPtpIndex=lserPtpIndex, lserDriveFibrePortAAddressingMode=lserDriveFibrePortAAddressingMode, lserPtpCompLibFirmwareDate=lserPtpCompLibFirmwareDate, lserCapUsageGet6to10=lserCapUsageGet6to10, lserInventory=lserInventory, lserLibPersonWebEnabled=lserLibPersonWebEnabled, lserPtpState=lserPtpState, lserPtpCount=lserPtpCount, lserAgentTrapSinkVersion=lserAgentTrapSinkVersion, lserAgentTrapSinkPort=lserAgentTrapSinkPort, lserCapStatusEnum=lserCapStatusEnum, lserLibVersionBootRev=lserLibVersionBootRev, lserTrapPtpStatusCheck=lserTrapPtpStatusCheck, lserCleanCartHostAccessible=lserCleanCartHostAccessible, lserPlayCellTable=lserPlayCellTable, lserLibNetworkFibreNumPorts=lserLibNetworkFibreNumPorts, lserPtpFailFullMotionCount=lserPtpFailFullMotionCount, lserTrapInformation=lserTrapInformation, lserPtpCompLibNetworkIpAddr=lserPtpCompLibNetworkIpAddr, lserDriveFibrePortALoopId=lserDriveFibrePortALoopId, lserTapeHostAccessible=lserTapeHostAccessible, lserLibNetworkFibreID=lserLibNetworkFibreID, lserLibCleanCartTable=lserLibCleanCartTable, lserPtpCompLibNetworkName=lserPtpCompLibNetworkName, lserCellElementID=lserCellElementID, lserLibCfgMaxStorageAddr=lserLibCfgMaxStorageAddr, lserLibCleaning=lserLibCleaning, lserLibStats5min251to300=lserLibStats5min251to300, lserPtpFirmwareVersion=lserPtpFirmwareVersion, lserLibHostInterfaceType=lserLibHostInterfaceType, lserDriveCellContentType=lserDriveCellContentType, lserAgentRevision=lserAgentRevision, lserDriveEntry=lserDriveEntry, lserLibCleanCartEntry=lserLibCleanCartEntry, lserAgentURL=lserAgentURL, lserPtpSoftwareResetCount=lserPtpSoftwareResetCount, lserLibDateDay=lserLibDateDay, lserLibLogSummary=lserLibLogSummary, lserPtpEntry=lserPtpEntry, lserLibStatistics=lserLibStatistics, lserTapeType=lserTapeType, lserTrapCapStatusCheck=lserTrapCapStatusCheck, lserAgentTrapSinkEntry=lserAgentTrapSinkEntry, lserLibStats5min451to500=lserLibStats5min451to500, lserLibStatsNumMounts=lserLibStatsNumMounts, lserLibCleanWarnTable=lserLibCleanWarnTable, LserSnmpTrapPort=LserSnmpTrapPort, lserLibStatsNumEmptyReads=lserLibStatsNumEmptyReads, lserCapUsageGet3=lserCapUsageGet3, lserDriveFibreIndex=lserDriveFibreIndex, lserLibCfgMaxPlayAddr=lserLibCfgMaxPlayAddr)
mibBuilder.exportSymbols("LSERIES-TAPE-LIBRARY-MIB", lserCellHostAccessible=lserCellHostAccessible, lserPlayCellIndex=lserPlayCellIndex, lserCapUsagePutSampleCount=lserCapUsagePutSampleCount, lserLibCleanNumCarts=lserLibCleanNumCarts, lserTrapText=lserTrapText, lserLibCfgNumPlayCells=lserLibCfgNumPlayCells, lserLibDateHour=lserLibDateHour, lserHdwTempSensorFailThreshold=lserHdwTempSensorFailThreshold, lserLibStatsNumGetFails=lserLibStatsNumGetFails, lserCapUsageGet2=lserCapUsageGet2, lserDriveStatusEnum=lserDriveStatusEnum, lserLibStats15min151to175=lserLibStats15min151to175, lserPlayCellEntry=lserPlayCellEntry, lserPlayCellContentStatus=lserPlayCellContentStatus, lserLibCfgMinDriveAddr=lserLibCfgMinDriveAddr, lserLibStats5min351to400=lserLibStats5min351to400, lserHdwFanTable=lserHdwFanTable, lserCapAccessibility=lserCapAccessibility, lserLibStats15min551to600=lserLibStats15min551to600, lserCapUsageGetIdle=lserCapUsageGetIdle, lserDriveColInLib=lserDriveColInLib, lserPlayCellCount=lserPlayCellCount, lserLibStats15minOver700=lserLibStats15minOver700, lserPtpFailPartMotionCount=lserPtpFailPartMotionCount, lserCapTable=lserCapTable, lserPtpCompLibVendorName=lserPtpCompLibVendorName, lserPtpInoperativeCount=lserPtpInoperativeCount, lserLibPersonVendor=lserLibPersonVendor, lserCellEntry=lserCellEntry, lserLibCfgMaxDriveAddr=lserLibCfgMaxDriveAddr, lserLibStats15min401to450=lserLibStats15min401to450, lserLibConfigPassword=lserLibConfigPassword, LserDriveFibreSpeed=LserDriveFibreSpeed, lserDriveFibrePortBWWN=lserDriveFibrePortBWWN, lserLibCleanCartType=lserLibCleanCartType, lserDrivePutRetries=lserDrivePutRetries, lserLibPersonLibSize=lserLibPersonLibSize, lserHdwTempSensorCurrentTemp=lserHdwTempSensorCurrentTemp, lserDriveUsage30to60=lserDriveUsage30to60, lserLibStats5min226to250=lserLibStats5min226to250, lserDriveIdleSeconds=lserDriveIdleSeconds, lserAgentPort=lserAgentPort, lserLibLogFscNumber=lserLibLogFscNumber, lserLibDate=lserLibDate, lserLibLocatContact=lserLibLocatContact, lserStorageFreeCells=lserStorageFreeCells, lserPtpPartNumber=lserPtpPartNumber, LserMediaErrorType=LserMediaErrorType, lserCapName=lserCapName, lserLibStats5min401to450=lserLibStats5min401to450, lserLibStatsNumTargetReads=lserLibStatsNumTargetReads, lserHdwTempSensorName=lserHdwTempSensorName, lserLibLogMechanism=lserLibLogMechanism, lserLibCfgNumStorageCells=lserLibCfgNumStorageCells, lserAgentTrapSinkClear=lserAgentTrapSinkClear, lserLibCfgNumPanels=lserLibCfgNumPanels, lserCapUsagePut5=lserCapUsagePut5, lserLibStatsNumDoorOpens=lserLibStatsNumDoorOpens, lserLibCleanNumCartTypes=lserLibCleanNumCartTypes, lserHdwSupplyName=lserHdwSupplyName, lserCellTable=lserCellTable, lserDriveUsageMaximum=lserDriveUsageMaximum, lserAgentTrapSinkNum=lserAgentTrapSinkNum, LserDriveFibreLoopId=LserDriveFibreLoopId, lserLibStats5min601to650=lserLibStats5min601to650, lserDriveFirmwareVer=lserDriveFirmwareVer, lserDriveFibrePortAPortEnabled=lserDriveFibrePortAPortEnabled, lserMediaErrorTapeLabel=lserMediaErrorTapeLabel, storagetek=storagetek, LserCmdClear=LserCmdClear, lserLibCfgNumCaps=lserLibCfgNumCaps, lserCapUsagePut4=lserCapUsagePut4, lserTrapError=lserTrapError, lserDriveIndex=lserDriveIndex, lserLibLogEntry=lserLibLogEntry, lserLibLocatDescr=lserLibLocatDescr, lserDriveFibrePortBPortEnabled=lserDriveFibrePortBPortEnabled, lserLibCleanEnabled=lserLibCleanEnabled, lserLibStats5min651to700=lserLibStats5min651to700, lserLibMediaErrorEntry=lserLibMediaErrorEntry, lserDriveState=lserDriveState, lserCaps=lserCaps, lserCellContentLabel=lserCellContentLabel, lserPtpCompLibSerialNumber=lserPtpCompLibSerialNumber, lserLibStats5minIdle=lserLibStats5minIdle, lserDrives=lserDrives, lserDriveFibrePortBPortSpeed=lserDriveFibrePortBPortSpeed, lserLibStats15min26to50=lserLibStats15min26to50, lserMediaErrorOccurrenceCount=lserMediaErrorOccurrenceCount, lserDriveFibrePortAWWN=lserDriveFibrePortAWWN, lserPtpCompLibModelName=lserPtpCompLibModelName, lserDriveCount=lserDriveCount, lserLibStats5min1to25=lserLibStats5min1to25, lserStorage=lserStorage, lserLibNetwork=lserLibNetwork, lserLibMediaErrorTable=lserLibMediaErrorTable, lserCapUsagePut11to15=lserCapUsagePut11to15, lserDriveCellContentLabel=lserDriveCellContentLabel, lserLibNetworkDomainName=lserLibNetworkDomainName, lserAgentBootDate=lserAgentBootDate, lseriesTapeLibrary=lseriesTapeLibrary, lserLibLogTable=lserLibLogTable, lserPtpFirmwareDate=lserPtpFirmwareDate, lserLibLocatCity=lserLibLocatCity, lserLibVersionFibre=lserLibVersionFibre, lserTrapCapStatusOpen=lserTrapCapStatusOpen, lserLibHostInterface=lserLibHostInterface, lserLibStkBaseModel=lserLibStkBaseModel, lserCapUsagePut6to10=lserCapUsagePut6to10, lserLibCleanWarnIndex=lserLibCleanWarnIndex, lserTrapLibStatusCheck=lserTrapLibStatusCheck, lserMediaErrorIndex=lserMediaErrorIndex, lserPlayground=lserPlayground, lserLibLog=lserLibLog, lserCapUsagePut2=lserCapUsagePut2, lserLibStatusEnum=lserLibStatusEnum, lserLibStats15min501to550=lserLibStats15min501to550, lserLibStatsNumPutFails=lserLibStatsNumPutFails, lserHardwareMonitor=lserHardwareMonitor, lserLibLocatCountry=lserLibLocatCountry, lserLibVersionHardware=lserLibVersionHardware, lserLibStatsNumLabelFails=lserLibStatsNumLabelFails, lserLibNetworkGateway=lserLibNetworkGateway, lserHdwFanOperational=lserHdwFanOperational, lserLibStats15min76to100=lserLibStats15min76to100, lserLibPersonality=lserLibPersonality, lserMediaErrorDateTime=lserMediaErrorDateTime, lserLibCleanWarnCount=lserLibCleanWarnCount, lserLibVersionFirmDate=lserLibVersionFirmDate, lserHdwSupplyInstalled=lserHdwSupplyInstalled, lserTapeLabel=lserTapeLabel, lserDriveNumMounts=lserDriveNumMounts, lserPtpSerialNumber=lserPtpSerialNumber, lserCellContentStatus=lserCellContentStatus, lserLibFastLoad=lserLibFastLoad, lserLibCfgMinPlayAddr=lserLibCfgMinPlayAddr, lserPtpGoodFullMotionCount=lserPtpGoodFullMotionCount, lserHdwFanName=lserHdwFanName, lserTapeCount=lserTapeCount, lserLibStats5minOver700=lserLibStats5minOver700)
