#
# PySNMP MIB module HPN-ICF-MPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-MPM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, ObjectIdentity, Counter64, Unsigned32, iso, Counter32, mib_2, IpAddress, Integer32, Bits, MibIdentifier, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "ObjectIdentity", "Counter64", "Unsigned32", "iso", "Counter32", "mib-2", "IpAddress", "Integer32", "Bits", "MibIdentifier", "ModuleIdentity", "NotificationType")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hpnicfMpm = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51))
hpnicfMpm.setRevisions(('2005-03-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfMpm.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: hpnicfMpm.setLastUpdated('200503220000Z')
if mibBuilder.loadTexts: hpnicfMpm.setOrganization('')
if mibBuilder.loadTexts: hpnicfMpm.setContactInfo('')
if mibBuilder.loadTexts: hpnicfMpm.setDescription('The MPM (Multicast Port Management) MIB.')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hpnicfMPMObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 1))
hpnicfMPortGroupLimitMinNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMPortGroupLimitMinNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupLimitMinNumber.setDescription('The lower limit of group-limit number.')
hpnicfMPortGroupLimitMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMPortGroupLimitMaxNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupLimitMaxNumber.setDescription('The upper limit of group-limit number.')
hpnicfMPMTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2))
hpnicfMPortGroupJoinTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 1), )
if mibBuilder.loadTexts: hpnicfMPortGroupJoinTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupJoinTable.setDescription('A table which is used for configuring a port in a specified VLAN to join a multicast group.')
hpnicfMPortGroupJoinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-MPM-MIB", "hpnicfMPortGroupJoinVlanID"), (0, "HPN-ICF-MPM-MIB", "hpnicfMPortGroupJoinAddressType"), (0, "HPN-ICF-MPM-MIB", "hpnicfMPortGroupJoinAddress"))
if mibBuilder.loadTexts: hpnicfMPortGroupJoinEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupJoinEntry.setDescription('An entry which is used for configuring a port in a specified VLAN to join a multicast group.')
hpnicfMPortGroupJoinVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfMPortGroupJoinVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupJoinVlanID.setDescription('An index uniquely identifying a port in a specified VLAN which joined the multicast group.')
hpnicfMPortGroupJoinAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfMPortGroupJoinAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupJoinAddressType.setDescription('Type of the multicast IP address.')
hpnicfMPortGroupJoinAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpnicfMPortGroupJoinAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupJoinAddress.setDescription('IP address of the group which the port belongs to, and it must be a valid multicast IP address.')
hpnicfMPortGroupJoinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMPortGroupJoinStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupJoinStatus.setDescription("This object is responsible for managing the creation and deletion of rows, which supports 'active', 'notReady', 'createAndGo', 'destroy'. Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the hpnicfMPortGroupJoinStatus column is 'notReady'. In particular, a newly created row cannot be actived until the port belongs to the corresponding VLAN and IGMP or IGMP snooping is enabled on that VLAN.")
hpnicfMPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 2), )
if mibBuilder.loadTexts: hpnicfMPortGroupTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupTable.setDescription('A table containing information about the status of a port which joined a multicast group in the VLAN.')
hpnicfMPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-MPM-MIB", "hpnicfMPortGroupVlanID"), (0, "HPN-ICF-MPM-MIB", "hpnicfMPortGroupAddressType"), (0, "HPN-ICF-MPM-MIB", "hpnicfMPortGroupAddress"))
if mibBuilder.loadTexts: hpnicfMPortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupEntry.setDescription('An entry containing information about the status of a port which joined a multicast group in the VLAN.')
hpnicfMPortGroupVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfMPortGroupVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupVlanID.setDescription('An index uniquely identifies that a port belongs to a specified VLAN.')
hpnicfMPortGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMPortGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupAddressType.setDescription('Type of multicast IP address.')
hpnicfMPortGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMPortGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupAddress.setDescription('IP address of the group which the port joined, and it must be a valid multicast IP address.')
hpnicfMPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 3), )
if mibBuilder.loadTexts: hpnicfMPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortConfigTable.setDescription('A table configuring the fast leave status, group limit number and group policy parameter on a port in the specified VLAN.')
hpnicfMPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-MPM-MIB", "hpnicfMPortConfigVlanID"))
if mibBuilder.loadTexts: hpnicfMPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortConfigEntry.setDescription('An entry containing information about the fast leave status, group limit number and group policy parameter of a port in the specified VLAN.')
hpnicfMPortConfigVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfMPortConfigVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortConfigVlanID.setDescription('The VLAN index.')
hpnicfMPortGroupLimitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMPortGroupLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupLimitNumber.setDescription('The group limit number of the port.')
hpnicfMPortFastLeaveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 3, 1, 3), EnabledStatus().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMPortFastLeaveStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortFastLeaveStatus.setDescription('The fast leave status of the port.')
hpnicfMPortGroupPolicyParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMPortGroupPolicyParameter.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupPolicyParameter.setDescription('The ACL number which is used as the group policy parameter of the port.')
hpnicfMPortConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMPortConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortConfigRowStatus.setDescription("The object is responsible for managing the creation and deletion of rows, which supports 'active', 'notReady', 'createAndGo' and 'destroy'.")
hpnicfMPortGroupLimitReplace = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 3, 1, 6), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfMPortGroupLimitReplace.setStatus('current')
if mibBuilder.loadTexts: hpnicfMPortGroupLimitReplace.setDescription('This object is related to the object hpnicfMPortGroupLimitNumber. If the current IGMP group number is less than the value of hpnicfMPortGroupLimitNumber, any new IGMP group is permitted. If the current IGMP group number equals to the value of hpnicfMPortGroupLimitNumber and the value of this object is enabled, the group with the minimum multicast address will be replaced by the new group. If the current IGMP group number equals to the value of hpnicfMPortGroupLimitNumber and the value of this object is disabled, none of new group will be permitted.')
hpnicfHostStaticJoinTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 4), )
if mibBuilder.loadTexts: hpnicfHostStaticJoinTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfHostStaticJoinTable.setDescription('A table used to configure a host on a port in a specified VLAN statically to join a multicast group.')
hpnicfHostStaticJoinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-MPM-MIB", "hpnicfHostStaticJoinVlanID"), (0, "HPN-ICF-MPM-MIB", "hpnicfHostStaticJoinAddressType"), (0, "HPN-ICF-MPM-MIB", "hpnicfHostStaticJoinAddress"))
if mibBuilder.loadTexts: hpnicfHostStaticJoinEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfHostStaticJoinEntry.setDescription('An entry used to configure a host on a port in a specified VLAN statically to join a multicast group.')
hpnicfHostStaticJoinVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfHostStaticJoinVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfHostStaticJoinVlanID.setDescription('An index uniquely identify the specified VLAN in which a host on a port statically joined the multicast group.')
hpnicfHostStaticJoinAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfHostStaticJoinAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfHostStaticJoinAddressType.setDescription('Type of the multicast IP address.')
hpnicfHostStaticJoinAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 4, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpnicfHostStaticJoinAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfHostStaticJoinAddress.setDescription('IP address of the group which the host belongs to, and it must be a valid multicast IP address.')
hpnicfHostStaticJoinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 51, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfHostStaticJoinStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfHostStaticJoinStatus.setDescription("This object is responsible for managing rows, which supports 'active', 'createAndGo' and 'destroy'.")
mibBuilder.exportSymbols("HPN-ICF-MPM-MIB", hpnicfMPortConfigEntry=hpnicfMPortConfigEntry, hpnicfMPortGroupJoinStatus=hpnicfMPortGroupJoinStatus, hpnicfMPortFastLeaveStatus=hpnicfMPortFastLeaveStatus, hpnicfHostStaticJoinVlanID=hpnicfHostStaticJoinVlanID, hpnicfHostStaticJoinAddressType=hpnicfHostStaticJoinAddressType, hpnicfHostStaticJoinEntry=hpnicfHostStaticJoinEntry, hpnicfMPortConfigVlanID=hpnicfMPortConfigVlanID, hpnicfMPortGroupLimitNumber=hpnicfMPortGroupLimitNumber, hpnicfMPortGroupJoinAddressType=hpnicfMPortGroupJoinAddressType, hpnicfMPortGroupAddress=hpnicfMPortGroupAddress, hpnicfMPortConfigRowStatus=hpnicfMPortConfigRowStatus, hpnicfMPMTable=hpnicfMPMTable, hpnicfMPortGroupLimitMinNumber=hpnicfMPortGroupLimitMinNumber, hpnicfMPortGroupTable=hpnicfMPortGroupTable, hpnicfMPortGroupVlanID=hpnicfMPortGroupVlanID, EnabledStatus=EnabledStatus, hpnicfMPortGroupPolicyParameter=hpnicfMPortGroupPolicyParameter, hpnicfMPortGroupAddressType=hpnicfMPortGroupAddressType, PYSNMP_MODULE_ID=hpnicfMpm, hpnicfMPortGroupJoinEntry=hpnicfMPortGroupJoinEntry, hpnicfMPortGroupJoinVlanID=hpnicfMPortGroupJoinVlanID, hpnicfMPortGroupEntry=hpnicfMPortGroupEntry, hpnicfHostStaticJoinTable=hpnicfHostStaticJoinTable, hpnicfMPortGroupJoinAddress=hpnicfMPortGroupJoinAddress, hpnicfMPortConfigTable=hpnicfMPortConfigTable, hpnicfMpm=hpnicfMpm, hpnicfMPortGroupLimitMaxNumber=hpnicfMPortGroupLimitMaxNumber, hpnicfHostStaticJoinAddress=hpnicfHostStaticJoinAddress, hpnicfHostStaticJoinStatus=hpnicfHostStaticJoinStatus, hpnicfMPortGroupLimitReplace=hpnicfMPortGroupLimitReplace, hpnicfMPortGroupJoinTable=hpnicfMPortGroupJoinTable, hpnicfMPMObject=hpnicfMPMObject)
