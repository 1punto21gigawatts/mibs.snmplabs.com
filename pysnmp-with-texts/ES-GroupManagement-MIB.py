#
# PySNMP MIB module ES-GroupManagement-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES-GroupManagement-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, ObjectIdentity, IpAddress, NotificationType, Counter32, ModuleIdentity, TimeTicks, enterprises, MibIdentifier, Unsigned32, Integer32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "ObjectIdentity", "IpAddress", "NotificationType", "Counter32", "ModuleIdentity", "TimeTicks", "enterprises", "MibIdentifier", "Unsigned32", "Integer32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
class MacAddress(TextualConvention, OctetString):
    description = "Represents an 802 MAC address represented in the `canonical' order defined by IEEE 802.1a, i.e., as if it were transmitted least significant bit first, even though 802.5 (in contrast to other 802.x protocols) requires MAC addresses to be transmitted most significant bit first."
    status = 'current'
    displayHint = ''

zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
ethernetSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 15))
groupManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 15, 4))
groupParam = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 15, 4, 1))
neighborDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2))
topologyCollect = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3))
memberManage = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4))
gmEnterpriseTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 15, 4, 5))
gmHandtime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmHandtime.setStatus('current')
if mibBuilder.loadTexts: gmHandtime.setDescription('Group member shakehand timer interval')
gmHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmHoldtime.setStatus('current')
if mibBuilder.loadTexts: gmHoldtime.setDescription('Group member shakehand hold timer interval. This item only for command switch.')
gmName = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmName.setStatus('current')
if mibBuilder.loadTexts: gmName.setDescription('Group descriptive name. This item only for command switch.')
gmSwitchRole = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("commandSwitch", 1), ("memberSwitch", 2), ("candidateSwitch", 3), ("independentSwitch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmSwitchRole.setStatus('current')
if mibBuilder.loadTexts: gmSwitchRole.setDescription('Description')
gmIpPool = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gmIpPool.setStatus('current')
if mibBuilder.loadTexts: gmIpPool.setDescription("the format of this item is xx/xx.xx.xx.xx/xx. Among this string, the first segment represents layer 3 ipport number, the second segment represents layer 3 ipAddress, the third segment represents net mask. eg: 12/192.168.2.8/24. Command switch and member switch can't set this item.")
tftpServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: tftpServerIpAddr.setDescription('Get/set tftp server ip address for the group. This item only for command switch.')
belongedCmdMac = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: belongedCmdMac.setStatus('current')
if mibBuilder.loadTexts: belongedCmdMac.setDescription('This item only for member switch. It indicates the command switch mac address of the group which this member switch belonged to.')
dpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: dpAdminStatus.setDescription('Enable/disable neighbor discovery function.')
dpTimer = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpTimer.setStatus('current')
if mibBuilder.loadTexts: dpTimer.setDescription('Description')
dpHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpHoldtime.setStatus('current')
if mibBuilder.loadTexts: dpHoldtime.setDescription('Description')
dpPortTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 4), )
if mibBuilder.loadTexts: dpPortTable.setStatus('current')
if mibBuilder.loadTexts: dpPortTable.setDescription('Description')
dpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 4, 1), ).setIndexNames((0, "ES-GroupManagement-MIB", "dpPortId"))
if mibBuilder.loadTexts: dpPortEntry.setStatus('current')
if mibBuilder.loadTexts: dpPortEntry.setDescription('Row Description')
dpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dpPortId.setStatus('current')
if mibBuilder.loadTexts: dpPortId.setDescription('Column Description')
dpPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: dpPortAdminStatus.setDescription('Column Description')
dpTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 5), )
if mibBuilder.loadTexts: dpTrunkTable.setStatus('current')
if mibBuilder.loadTexts: dpTrunkTable.setDescription('Description')
dpTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 5, 1), ).setIndexNames((0, "ES-GroupManagement-MIB", "dpTrunkId"))
if mibBuilder.loadTexts: dpTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: dpTrunkEntry.setDescription('Row Description')
dpTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: dpTrunkId.setStatus('current')
if mibBuilder.loadTexts: dpTrunkId.setDescription('Column Description')
dpTrunkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpTrunkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: dpTrunkAdminStatus.setDescription('Column Description')
tpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tpAdminStatus.setDescription('Description')
tpVlan = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpVlan.setStatus('current')
if mibBuilder.loadTexts: tpVlan.setDescription("The value of this item can't be changed while gmSwitchRole is commandSwitch")
tpHop = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpHop.setStatus('current')
if mibBuilder.loadTexts: tpHop.setDescription('Description')
tpTimer = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpTimer.setStatus('current')
if mibBuilder.loadTexts: tpTimer.setDescription('Description')
tpHopDelay = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpHopDelay.setStatus('current')
if mibBuilder.loadTexts: tpHopDelay.setDescription('Description')
tpPortDelay = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpPortDelay.setStatus('current')
if mibBuilder.loadTexts: tpPortDelay.setDescription('Description')
tpStart = MibScalar((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStart.setStatus('current')
if mibBuilder.loadTexts: tpStart.setDescription('The value get from this item is insignificant. Setting this item will start a topology collection process.')
tpPortTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 8), )
if mibBuilder.loadTexts: tpPortTable.setStatus('current')
if mibBuilder.loadTexts: tpPortTable.setDescription('Description')
tpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 8, 1), ).setIndexNames((0, "ES-GroupManagement-MIB", "tpPortId"))
if mibBuilder.loadTexts: tpPortEntry.setStatus('current')
if mibBuilder.loadTexts: tpPortEntry.setDescription('Each entry contains port config for topology')
tpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: tpPortId.setStatus('current')
if mibBuilder.loadTexts: tpPortId.setDescription('The port id to index topology collection.')
tpPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tpPortAdminStatus.setDescription('Enable/disable topology collection on certain port')
tpTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 9), )
if mibBuilder.loadTexts: tpTrunkTable.setStatus('current')
if mibBuilder.loadTexts: tpTrunkTable.setDescription('Description')
tpTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 9, 1), ).setIndexNames((0, "ES-GroupManagement-MIB", "tpTrunkId"))
if mibBuilder.loadTexts: tpTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: tpTrunkEntry.setDescription('Each row contains trunk config for topology')
tpTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: tpTrunkId.setStatus('current')
if mibBuilder.loadTexts: tpTrunkId.setDescription('Trunk id.')
tpTrunkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpTrunkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tpTrunkAdminStatus.setDescription('Enable/disable topology collection on certain trunk')
tpDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10), )
if mibBuilder.loadTexts: tpDeviceTable.setStatus('current')
if mibBuilder.loadTexts: tpDeviceTable.setDescription('Device in the network topology.')
tpDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1), ).setIndexNames((0, "ES-GroupManagement-MIB", "deviceMac"))
if mibBuilder.loadTexts: tpDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: tpDeviceEntry.setDescription('Each row contains a device info that was collected')
deviceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMac.setStatus('current')
if mibBuilder.loadTexts: deviceMac.setDescription('Device mac address.')
deviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceId.setStatus('current')
if mibBuilder.loadTexts: deviceId.setDescription('Device id.')
deviceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIpAddr.setStatus('current')
if mibBuilder.loadTexts: deviceIpAddr.setDescription('Column Description')
deviceHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHop.setStatus('current')
if mibBuilder.loadTexts: deviceHop.setDescription('Column Description')
devicePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePlatform.setStatus('current')
if mibBuilder.loadTexts: devicePlatform.setDescription('The device type, running platform. ')
deviceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("commandSwitch", 1), ("memberSwitch", 2), ("candidateSwitch", 3), ("independentSwitch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceRole.setStatus('current')
if mibBuilder.loadTexts: deviceRole.setDescription('The value indicates the switch role in the topology, But only command switch can set value of this item. Furthermore, only memberSwitch ( 2 ) can be set which means adding a device of the topology to the group.')
devicePeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePeerPort.setStatus('current')
if mibBuilder.loadTexts: devicePeerPort.setDescription('')
deviceBelongedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBelongedMac.setStatus('current')
if mibBuilder.loadTexts: deviceBelongedMac.setDescription('It indicates the command switch mac address of the group which this device belonged to. If the device role is not member switch, the item value is the device sysmac.')
deviceBelongedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 3, 10, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBelongedIpAddr.setStatus('current')
if mibBuilder.loadTexts: deviceBelongedIpAddr.setDescription('It indicates the command switch ip address of the group which this device belonged to. If the device role is not member switch, the item value is 0.')
memberTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1), )
if mibBuilder.loadTexts: memberTable.setStatus('current')
if mibBuilder.loadTexts: memberTable.setDescription('Only command switch can have a memberTable.')
memberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1), ).setIndexNames((0, "ES-GroupManagement-MIB", "memMac"))
if mibBuilder.loadTexts: memberEntry.setStatus('current')
if mibBuilder.loadTexts: memberEntry.setDescription('Each row contains all of the info of a member of a group which managed by this command switch')
memMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memMac.setStatus('current')
if mibBuilder.loadTexts: memMac.setDescription('Column Description')
memId = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memId.setStatus('current')
if mibBuilder.loadTexts: memId.setDescription('Column Description')
memIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memIpAddr.setStatus('current')
if mibBuilder.loadTexts: memIpAddr.setDescription('Column Description')
memMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memMask.setStatus('current')
if mibBuilder.loadTexts: memMask.setDescription('Column Description')
memStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatus.setStatus('current')
if mibBuilder.loadTexts: memStatus.setDescription('Column Description')
memRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memberSwitch", 1), ("candidateSwitch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memRole.setStatus('current')
if mibBuilder.loadTexts: memRole.setDescription('When set memRole as candidateSwitch(2), this member will be delete from the group')
snmpPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPortMap.setStatus('current')
if mibBuilder.loadTexts: snmpPortMap.setDescription('Well-known port mapping to private port by memId.')
httpPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPortMap.setStatus('current')
if mibBuilder.loadTexts: httpPortMap.setDescription('Column Description')
ftpPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPortMap.setStatus('current')
if mibBuilder.loadTexts: ftpPortMap.setDescription('Description')
tftpPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpPortMap.setStatus('current')
if mibBuilder.loadTexts: tftpPortMap.setDescription('Description')
telnetPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortMap.setStatus('current')
if mibBuilder.loadTexts: telnetPortMap.setDescription('Description')
sshPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 15, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshPortMap.setStatus('current')
if mibBuilder.loadTexts: sshPortMap.setDescription('Description')
gmTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 3902, 15, 4, 5, 1))
if mibBuilder.loadTexts: gmTopologyChange.setStatus('current')
if mibBuilder.loadTexts: gmTopologyChange.setDescription('This trap sended by command switch to notify topology change.')
gmMemberUpDown = NotificationType((1, 3, 6, 1, 4, 1, 3902, 15, 4, 5, 2)).setObjects(("ES-GroupManagement-MIB", "memMac"), ("ES-GroupManagement-MIB", "memId"), ("ES-GroupManagement-MIB", "memIpAddr"), ("ES-GroupManagement-MIB", "memStatus"))
if mibBuilder.loadTexts: gmMemberUpDown.setStatus('current')
if mibBuilder.loadTexts: gmMemberUpDown.setDescription('The trap indicates nms that member switch transfer between connect or disconnect with command switch.')
mibBuilder.exportSymbols("ES-GroupManagement-MIB", tpTrunkTable=tpTrunkTable, dpPortAdminStatus=dpPortAdminStatus, tpHop=tpHop, topologyCollect=topologyCollect, tpPortTable=tpPortTable, gmTopologyChange=gmTopologyChange, sshPortMap=sshPortMap, deviceId=deviceId, deviceBelongedIpAddr=deviceBelongedIpAddr, dpTimer=dpTimer, tpTrunkEntry=tpTrunkEntry, deviceMac=deviceMac, memberTable=memberTable, neighborDiscovery=neighborDiscovery, dpTrunkEntry=dpTrunkEntry, deviceRole=deviceRole, memRole=memRole, tpPortDelay=tpPortDelay, gmSwitchRole=gmSwitchRole, gmHandtime=gmHandtime, gmMemberUpDown=gmMemberUpDown, dpTrunkId=dpTrunkId, ftpPortMap=ftpPortMap, dpAdminStatus=dpAdminStatus, tpPortId=tpPortId, groupManagement=groupManagement, deviceBelongedMac=deviceBelongedMac, deviceHop=deviceHop, tpStart=tpStart, tpPortAdminStatus=tpPortAdminStatus, memberManage=memberManage, MacAddress=MacAddress, memMac=memMac, memStatus=memStatus, dpPortEntry=dpPortEntry, memMask=memMask, dpHoldtime=dpHoldtime, tpVlan=tpVlan, memIpAddr=memIpAddr, devicePeerPort=devicePeerPort, dpTrunkAdminStatus=dpTrunkAdminStatus, tpTrunkId=tpTrunkId, tpDeviceEntry=tpDeviceEntry, gmIpPool=gmIpPool, gmEnterpriseTrap=gmEnterpriseTrap, groupParam=groupParam, tpTimer=tpTimer, memberEntry=memberEntry, dpPortId=dpPortId, tpAdminStatus=tpAdminStatus, tpPortEntry=tpPortEntry, tpTrunkAdminStatus=tpTrunkAdminStatus, dpPortTable=dpPortTable, zte=zte, telnetPortMap=telnetPortMap, deviceIpAddr=deviceIpAddr, tftpServerIpAddr=tftpServerIpAddr, httpPortMap=httpPortMap, tpDeviceTable=tpDeviceTable, tpHopDelay=tpHopDelay, gmHoldtime=gmHoldtime, gmName=gmName, ethernetSwitch=ethernetSwitch, tftpPortMap=tftpPortMap, dpTrunkTable=dpTrunkTable, devicePlatform=devicePlatform, snmpPortMap=snmpPortMap, belongedCmdMac=belongedCmdMac, memId=memId)
