#
# PySNMP MIB module BLADETYPE2-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE2-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hpSwitchBladeType2_Mgmt, = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType2-Mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Counter64, Gauge32, NotificationType, MibIdentifier, iso, Counter32, TimeTicks, ObjectIdentity, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter64", "Gauge32", "NotificationType", "MibIdentifier", "iso", "Counter32", "TimeTicks", "ObjectIdentity", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
qos = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8))
if mibBuilder.loadTexts: qos.setLastUpdated('200312050000Z')
if mibBuilder.loadTexts: qos.setOrganization('Hewlett Packard Company')
if mibBuilder.loadTexts: qos.setContactInfo('customerservice@hp.com')
if mibBuilder.loadTexts: qos.setDescription('The MIB module for the QOS configuration, statistics and information .')
qosConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1))
qosStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 2))
qosInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 3))
qosOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 4))
qos8021p = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1))
aclCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2))
qosCurCfgPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 1), )
if mibBuilder.loadTexts: qosCurCfgPortPriorityTable.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPortPriorityTable.setDescription('The table of QOS Port Priority configuration.')
qosCurCfgPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 1, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "qosCurCfgPortIndex"))
if mibBuilder.loadTexts: qosCurCfgPortPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPortPriorityEntry.setDescription('Information about a particular QOS Port Priority configuration.')
qosCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPortIndex.setDescription('Switch Port Number')
qosCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPortPriority.setDescription('Switch Port Priority Should be between 0 and 7')
qosNewCfgPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 2), )
if mibBuilder.loadTexts: qosNewCfgPortPriorityTable.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPortPriorityTable.setDescription('The table of QOS Port Priority configuration.')
qosNewCfgPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "qosNewCfgPortIndex"))
if mibBuilder.loadTexts: qosNewCfgPortPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPortPriorityEntry.setDescription('Information about a particular QOS Port Priority configuration.')
qosNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPortIndex.setDescription('Switch Port Number')
qosNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPortPriority.setDescription('Switch Port Priority Should be between 0 and 7')
qosCurCfgPriorityCoSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 3), )
if mibBuilder.loadTexts: qosCurCfgPriorityCoSTable.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPriorityCoSTable.setDescription('The table of Frame Priority and COSq configuration.')
qosCurCfgPriorityCoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 3, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "qosCurCfgPriorityIndex"))
if mibBuilder.loadTexts: qosCurCfgPriorityCoSEntry.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPriorityCoSEntry.setDescription('Information about a particular Frame Priority and COSq configuration.')
qosCurCfgPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPriorityIndex.setDescription('Frame priority Number')
qosCurCfgPriorityCoSq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPriorityCoSq.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPriorityCoSq.setDescription('CoSq for a Frame Priority Should be between 0 and 7')
qosNewCfgPriorityCoSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 4), )
if mibBuilder.loadTexts: qosNewCfgPriorityCoSTable.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPriorityCoSTable.setDescription('The table of Frame Priority and COSq configuration.')
qosNewCfgPriorityCoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 4, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "qosNewCfgPriorityIndex"))
if mibBuilder.loadTexts: qosNewCfgPriorityCoSEntry.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPriorityCoSEntry.setDescription('Information about a particular Frame Priority and COSq configuration.')
qosNewCfgPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPriorityIndex.setDescription('Frame priority Number')
qosNewCfgPriorityCoSq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgPriorityCoSq.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPriorityCoSq.setDescription('CoSq for a Frame Priority Should be between 0 and 7')
qosCurCfgCosWeightTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 5), )
if mibBuilder.loadTexts: qosCurCfgCosWeightTable.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosWeightTable.setDescription('The table of CoSq and Weight configuration.')
qosCurCfgCosWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 5, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "qosCurCfgCosIndex"))
if mibBuilder.loadTexts: qosCurCfgCosWeightEntry.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosWeightEntry.setDescription('Information about a particular CoSq and Weight configuration.')
qosCurCfgCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgCosIndex.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosIndex.setDescription('CoSq Number')
qosCurCfgCosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgCosWeight.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosWeight.setDescription('Weight of CoSq')
qosNewCfgCosWeightTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 6), )
if mibBuilder.loadTexts: qosNewCfgCosWeightTable.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosWeightTable.setDescription('The table of CoSq and Weight configuration.')
qosNewCfgCosWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 6, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "qosNewCfgCosIndex"))
if mibBuilder.loadTexts: qosNewCfgCosWeightEntry.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosWeightEntry.setDescription('Information about a particular CoSq and Weight configuration.')
qosNewCfgCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgCosIndex.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosIndex.setDescription('CoSq Number')
qosNewCfgCosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgCosWeight.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosWeight.setDescription('Weight of CoSq')
qosCurCfgCosNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 8))).clone(namedValues=NamedValues(("num2", 2), ("num8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgCosNum.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosNum.setDescription('Number of CoSq.')
qosNewCfgCosNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 8))).clone(namedValues=NamedValues(("num2", 2), ("num8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgCosNum.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosNum.setDescription('Number of CoSq.')
aclCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 1), )
if mibBuilder.loadTexts: aclCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortTable.setDescription('The table of port acl groups configuration.')
aclCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 1, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "aclCurCfgPortIndex"))
if mibBuilder.loadTexts: aclCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortTableEntry.setDescription('Information about a particular port acl groups configuration.')
aclCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortIndex.setDescription('The identifier of a particular port. This is also index to the entLogicalTable of Entity MIB.')
aclCurCfgPortAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortAclBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclBmap.setDescription('The acls applied to the port. The acls are presented in bitmap format. This string displays acl number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ acl 9 || || || ||___ acl 8 || |____ acl 7 || . . . ||_________ acl 2 |__________ acl 1 where x : 1 - The represented acl applied to the port. 0 - The represented acl not applied to the port.')
aclCurCfgPortAclBlkBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortAclBlkBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclBlkBmap.setDescription('The acl blocks applied to the port. The acl blocks are presented in bitmap format. This string displays acl number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclblk 9 || || || ||___ aclblk 8 || |____ aclblk 7 || . . . ||_________ aclblk 2 |__________ aclblk 1 where x : 1 - The represented acl block applied to the port. 0 - The represented acl block not applied to the port.')
aclCurCfgPortAclGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortAclGrpBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclGrpBmap.setDescription('The acl groups applied to the port. The acls are presented in bitmap format. This string displays acl number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclgrp 9 || || || ||___ aclgrp 8 || |____ aclgrp 7 || . . . ||_________ aclgrp 2 |__________ aclgrp 1 where x : 1 - The represented acl applied to the port. 0 - The represented acl not applied to the port.')
aclNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2), )
if mibBuilder.loadTexts: aclNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortTable.setDescription('The table of port acl groups configuration.')
aclNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "aclNewCfgPortIndex"))
if mibBuilder.loadTexts: aclNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortTableEntry.setDescription('Information about a particular port acl groups configuration.')
aclNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortIndex.setDescription('The identifier of a particular port. This is also index to the entLogicalTable of Entity MIB.')
aclNewCfgPortAddAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortAddAcl.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAddAcl.setDescription("The acl to be added to the specified port. A '0' value is returned when read.")
aclNewCfgPortAddAclBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortAddAclBlk.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAddAclBlk.setDescription("The acl block to be added to the specified port. A '0' value is returned when read.")
aclNewCfgPortAddAclGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortAddAclGrp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAddAclGrp.setDescription("The acl group to be added to the specified port. A '0' value is returned when read.")
aclNewCfgPortRemoveAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortRemoveAcl.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortRemoveAcl.setDescription("The acl to be removed from the specified port. A '0' value is returned when read.")
aclNewCfgPortRemoveAclBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortRemoveAclBlk.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortRemoveAclBlk.setDescription("The acl block to be removed from the specified port. A '0' value is returned when read.")
aclNewCfgPortRemoveAclGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortRemoveAclGrp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortRemoveAclGrp.setDescription("The acl group to be removed from the specified port. A '0' value is returned when read.")
aclNewCfgPortAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortAclBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclBmap.setDescription('The acls applied to the port. The acls are presented in bitmap format. This string displays acl number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ acl 9 || || || ||___ acl 8 || |____ acl 7 || . . . ||_________ acl 2 |__________ acl 1 where x : 1 - The represented acl applied to the port. 0 - The represented acl not applied to the port.')
aclNewCfgPortAclBlkBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortAclBlkBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclBlkBmap.setDescription('The acl blocks applied to the port. The acl blocks are presented in bitmap format. This string displays block number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclblk 9 || || || ||___ aclblk 8 || |____ aclblk 7 || . . . ||_________ aclblk 2 |__________ aclblk 1 where x : 1 - The represented acl block applied to the port. 0 - The represented acl block not applied to the port.')
aclNewCfgPortAclGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortAclGrpBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclGrpBmap.setDescription('The acl groups applied to the port. The acl groups are presented in bitmap format. This string displays group number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclgrp 9 || || || ||___ aclgrp 8 || |____ aclgrp 7 || . . . ||_________ aclgrp 2 |__________ aclgrp 1 where x : 1 - The represented acl group applied to the port. 0 - The represented acl group not applied to the port.')
aclCurCfgPortAclMeterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3), )
if mibBuilder.loadTexts: aclCurCfgPortAclMeterTable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclMeterTable.setDescription('The table of port acl meter configuration in the current_config.')
aclCurCfgPortAclMeterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "aclCurCfgPortMeterConfigIndex"), (0, "BLADETYPE2-QOS-MIB", "aclCurCfgAclMeterIndex"))
if mibBuilder.loadTexts: aclCurCfgPortAclMeterTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclMeterTableEntry.setDescription('Information about acl meter configuration of a particular port.')
aclCurCfgPortMeterConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortMeterConfigIndex.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortMeterConfigIndex.setDescription('The identifier of a particular port. This is also index to the entLogicalTable of Entity MIB.')
aclCurCfgAclMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclMeterIndex.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclMeterIndex.setDescription('The acl meter identifier of a particular port.')
aclCurCfgAclMeterCommitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclMeterCommitRate.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclMeterCommitRate.setDescription('Committed rate of acl meter for specified port in kilobits/sec.')
aclCurCfgAclMeterMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("k32", 32), ("k64", 64), ("k128", 128), ("k256", 256), ("k512", 512), ("k1024", 1024), ("k2048", 2048), ("k4096", 4096)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclMeterMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclMeterMaxBurstSize.setDescription('Maximum burst size of acl meter for specified port in kilobits.')
aclCurCfgAclMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclMeterStatus.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclMeterStatus.setDescription('The metering status of acl meter for specified port.')
aclCurCfgAclMeterDropOrPass = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("drop", 2), ("pass", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclMeterDropOrPass.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclMeterDropOrPass.setDescription('The state of out profile to drop or pass for acl meter of a specified port.')
aclCurCfgAclMeterAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclMeterAclBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclMeterAclBmap.setDescription('The acls assigned to this meter. The acls are presented in bitmap format. This string displays acl number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ acl 9 || || || ||___ acl 8 || |____ acl 7 || . . . ||_________ acl 2 |__________ acl 1 where x : 1 - The represented acl assigned to the meter. 0 - The represented acl not assigned to the meter.')
aclCurCfgAclMeterAclBlkBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclMeterAclBlkBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclMeterAclBlkBmap.setDescription('The acl blocks assigned to this meter. The blocks are presented in bitmap format. This string displays block number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclblk 9 || || || ||___ aclblk 8 || |____ aclblk 7 || . . . ||_________ aclblk 2 |__________ aclblk 1 where x : 1 - The represented acl block assigned to the meter. 0 - The represented acl blocknot assigned to the meter.')
aclCurCfgAclMeterAclGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclMeterAclGrpBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclMeterAclGrpBmap.setDescription('The acl groups assigned to this meter. The groups are presented in bitmap format. This string displays group number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclgrp 9 || || || ||___ aclgrp 8 || |____ aclgrp 7 || . . . ||_________ aclgrp 2 |__________ aclgrp 1 where x : 1 - The represented acl group assigned to the meter. 0 - The represented acl group not assigned to the meter.')
aclNewCfgPortAclMeterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4), )
if mibBuilder.loadTexts: aclNewCfgPortAclMeterTable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclMeterTable.setDescription('The table of port acl meter configuration in the new_config.')
aclNewCfgPortAclMeterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "aclNewCfgPortMeterConfigIndex"), (0, "BLADETYPE2-QOS-MIB", "aclNewCfgAclMeterIndex"))
if mibBuilder.loadTexts: aclNewCfgPortAclMeterTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclMeterTableEntry.setDescription('Information about acl meter configuration of a particular port.')
aclNewCfgPortMeterConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortMeterConfigIndex.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortMeterConfigIndex.setDescription('The identifier of a particular port. This is also index to the entLogicalTable of Entity MIB.')
aclNewCfgAclMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgAclMeterIndex.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterIndex.setDescription('The acl meter identifier of a particular port.')
aclNewCfgAclMeterCommitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterCommitRate.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterCommitRate.setDescription('Committed rate of acl meter for specified port in kilobits/sec.')
aclNewCfgAclMeterMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("k32", 32), ("k64", 64), ("k128", 128), ("k256", 256), ("k512", 512), ("k1024", 1024), ("k2048", 2048), ("k4096", 4096)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterMaxBurstSize.setDescription('Maximum burst size of acl meter for specified port in kilobits.')
aclNewCfgAclMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterStatus.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterStatus.setDescription('The metering status of acl meter for specified port.')
aclNewCfgAclMeterDropOrPass = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("drop", 2), ("pass", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterDropOrPass.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterDropOrPass.setDescription('The state of out profile to drop or pass for acl meter of a specified port.')
aclNewCfgAclMeterAssignAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterAssignAcl.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterAssignAcl.setDescription('Assign acl meter for specified port to acl.')
aclNewCfgAclMeterAssignAclBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterAssignAclBlk.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterAssignAclBlk.setDescription('Assign acl meter for specified port to acl block.')
aclNewCfgAclMeterAssignAclGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterAssignAclGrp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterAssignAclGrp.setDescription('Assign acl meter for specified port to acl group.')
aclNewCfgAclMeterUnAssignAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterUnAssignAcl.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterUnAssignAcl.setDescription('Unassign acl meter for specified port from acl.')
aclNewCfgAclMeterUnAssignAclBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterUnAssignAclBlk.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterUnAssignAclBlk.setDescription('Unassign acl meter for specified port from acl block.')
aclNewCfgAclMeterUnAssignAclGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclMeterUnAssignAclGrp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterUnAssignAclGrp.setDescription('Unassign acl meter for specified port from acl group.')
aclNewCfgAclMeterAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgAclMeterAclBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterAclBmap.setDescription('The acls assigned to this meter. The acls are presented in bitmap format. This string displays acl number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ acl 9 || || || ||___ acl 8 || |____ acl 7 || . . . ||_________ acl 2 |__________ acl 1 where x : 1 - The represented acl assigned to the meter. 0 - The represented acl not assigned to the meter.')
aclNewCfgAclMeterAclBlkBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgAclMeterAclBlkBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterAclBlkBmap.setDescription('The acl blocks assigned to this meter. The blocks are presented in bitmap format. This string displays block number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclblk 9 || || || ||___ aclblk 8 || |____ aclblk 7 || . . . ||_________ aclblk 2 |__________ aclblk 1 where x : 1 - The represented acl block assigned to the meter. 0 - The represented acl blocknot assigned to the meter.')
aclNewCfgAclMeterAclGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgAclMeterAclGrpBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclMeterAclGrpBmap.setDescription('The acl groups assigned to this meter. The groups are presented in bitmap format. This string displays group number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclgrp 9 || || || ||___ aclgrp 8 || |____ aclgrp 7 || . . . ||_________ aclgrp 2 |__________ aclgrp 1 where x : 1 - The represented acl group assigned to the meter. 0 - The represented acl group not assigned to the meter.')
aclCurCfgPortAclRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5), )
if mibBuilder.loadTexts: aclCurCfgPortAclRemarkTable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclRemarkTable.setDescription('The table of port acl remark configuration in the current_config.')
aclCurCfgPortAclRemarkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "aclCurCfgPortRemarkConfigIndex"), (0, "BLADETYPE2-QOS-MIB", "aclCurCfgAclRemarkIndex"))
if mibBuilder.loadTexts: aclCurCfgPortAclRemarkTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclRemarkTableEntry.setDescription('Information about acl meter configuration of a particular port.')
aclCurCfgPortRemarkConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortRemarkConfigIndex.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortRemarkConfigIndex.setDescription('The identifier of a particular port. This is also index to the entLogicalTable of Entity MIB.')
aclCurCfgAclRemarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclRemarkIndex.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclRemarkIndex.setDescription('The acl remark identifier for a particular port.')
aclCurCfgAclRemarkInProfUpdatePri = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclRemarkInProfUpdatePri.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclRemarkInProfUpdatePri.setDescription('Re-Mark in profile user priority for acl re-mark of a specified port.')
aclCurCfgAclRemarkInProfUpdateTosPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclRemarkInProfUpdateTosPrec.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclRemarkInProfUpdateTosPrec.setDescription('The state of Re-Mark in profile tos precedence for acl re-mark of a specified port.')
aclCurCfgAclRemarkInProfUpdateDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclRemarkInProfUpdateDscp.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclRemarkInProfUpdateDscp.setDescription('Re-Mark in profile dscp for acl re-mark of a specified port.')
aclCurCfgAclRemarkOutProfUpdateDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclRemarkOutProfUpdateDscp.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclRemarkOutProfUpdateDscp.setDescription('Re-Mark out profile dscp for acl re-mark of a specified port.')
aclCurCfgAclRemarkAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclRemarkAclBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclRemarkAclBmap.setDescription('The acls assigned to this re-mark. The acls are presented in bitmap format. This string displays acl number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ acl 9 || || || ||___ acl 8 || |____ acl 7 || . . . ||_________ acl 2 |__________ acl 1 where x : 1 - The represented acl assigned to the re-mark. 0 - The represented acl not assigned to the re-mark.')
aclCurCfgAclRemarkAclBlkBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclRemarkAclBlkBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclRemarkAclBlkBmap.setDescription('The acl blocks assigned to this re-mark. The blocks are presented in bitmap format. This string displays block number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclblk 9 || || || ||___ aclblk 8 || |____ aclblk 7 || . . . ||_________ aclblk 2 |__________ aclblk 1 where x : 1 - The represented acl block assigned to the re-mark. 0 - The represented acl blocknot assigned to the re-mark.')
aclCurCfgAclRemarkAclGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgAclRemarkAclGrpBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgAclRemarkAclGrpBmap.setDescription('The acl groups assigned to this re-mark. The groups are presented in bitmap format. This string displays group number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclgrp 9 || || || ||___ aclgrp 8 || |____ aclgrp 7 || . . . ||_________ aclgrp 2 |__________ aclgrp 1 where x : 1 - The represented acl group assigned to the re-mark. 0 - The represented acl group not assigned to the re-mark.')
aclNewCfgPortAclRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6), )
if mibBuilder.loadTexts: aclNewCfgPortAclRemarkTable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclRemarkTable.setDescription('The table of port acl remark configuration in the new_config.')
aclNewCfgPortAclRemarkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1), ).setIndexNames((0, "BLADETYPE2-QOS-MIB", "aclNewCfgPortRemarkConfigIndex"), (0, "BLADETYPE2-QOS-MIB", "aclNewCfgAclRemarkIndex"))
if mibBuilder.loadTexts: aclNewCfgPortAclRemarkTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclRemarkTableEntry.setDescription('Information about acl remark configuration of a particular port.')
aclNewCfgPortRemarkConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortRemarkConfigIndex.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortRemarkConfigIndex.setDescription('The identifier of a particular port. This is also index to the entLogicalTable of Entity MIB.')
aclNewCfgAclRemarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgAclRemarkIndex.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkIndex.setDescription('The acl remark identifier for a particular port.')
aclNewCfgAclRemarkInProfUpdatePri = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkInProfUpdatePri.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkInProfUpdatePri.setDescription('Re-Mark in profile user priority for acl re-mark of a specified port.')
aclNewCfgAclRemarkInProfUpdateTosPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkInProfUpdateTosPrec.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkInProfUpdateTosPrec.setDescription('The state of Re-Mark in profile tos precedence for acl re-mark of a specified port.')
aclNewCfgAclRemarkInProfUpdateDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkInProfUpdateDscp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkInProfUpdateDscp.setDescription('Re-Mark in profile dscp for acl re-mark of a specified port.')
aclNewCfgAclRemarkOutProfUpdateDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkOutProfUpdateDscp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkOutProfUpdateDscp.setDescription('Re-Mark out profile dscp for acl re-mark of a specified port.')
aclNewCfgAclRemarkAssignAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkAssignAcl.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkAssignAcl.setDescription('Assign acl re-mark for specified port to acl.')
aclNewCfgAclRemarkAssignAclBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkAssignAclBlk.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkAssignAclBlk.setDescription('Assign acl re-mark for specified port to acl block.')
aclNewCfgAclRemarkAssignAclGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkAssignAclGrp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkAssignAclGrp.setDescription('Assign acl re-mark for specified port to acl group.')
aclNewCfgAclRemarkUnAssignAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkUnAssignAcl.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkUnAssignAcl.setDescription('Unassign acl re-mark for specified port from acl.')
aclNewCfgAclRemarkUnAssignAclBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkUnAssignAclBlk.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkUnAssignAclBlk.setDescription('Unassign acl re-mark for specified port from acl block.')
aclNewCfgAclRemarkUnAssignAclGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkUnAssignAclGrp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkUnAssignAclGrp.setDescription('Unassign acl re-mark for specified port from acl group.')
aclNewCfgAclRemarkAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgAclRemarkAclBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkAclBmap.setDescription('The acls assigned to this re-mark. The acls are presented in bitmap format. This string displays acl number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ acl 9 || || || ||___ acl 8 || |____ acl 7 || . . . ||_________ acl 2 |__________ acl 1 where x : 1 - The represented acl assigned to the re-mark. 0 - The represented acl not assigned to the re-mark.')
aclNewCfgAclRemarkAclBlkBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgAclRemarkAclBlkBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkAclBlkBmap.setDescription('The acl blocks assigned to this re-mark. The blocks are presented in bitmap format. This string displays block number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclblk 9 || || || ||___ aclblk 8 || |____ aclblk 7 || . . . ||_________ aclblk 2 |__________ aclblk 1 where x : 1 - The represented acl block assigned to the re-mark. 0 - The represented acl blocknot assigned to the re-mark.')
aclNewCfgAclRemarkAclGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgAclRemarkAclGrpBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkAclGrpBmap.setDescription('The acl groups assigned to this re-mark. The groups are presented in bitmap format. This string displays group number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclgrp 9 || || || ||___ aclgrp 8 || |____ aclgrp 7 || . . . ||_________ aclgrp 2 |__________ aclgrp 1 where x : 1 - The represented acl group assigned to the re-mark. 0 - The represented acl group not assigned to the re-mark.')
aclNewCfgAclRemarkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 8, 1, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAclRemarkReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAclRemarkReset.setDescription('This is an action object to reset an ACL remark entry. A value of other(1) is always returned when this object is read.')
mibBuilder.exportSymbols("BLADETYPE2-QOS-MIB", aclCurCfgAclRemarkInProfUpdateDscp=aclCurCfgAclRemarkInProfUpdateDscp, aclNewCfgPortAclBmap=aclNewCfgPortAclBmap, aclNewCfgPortIndex=aclNewCfgPortIndex, aclNewCfgPortAclRemarkTableEntry=aclNewCfgPortAclRemarkTableEntry, qosNewCfgPortPriorityEntry=qosNewCfgPortPriorityEntry, aclCurCfgAclMeterCommitRate=aclCurCfgAclMeterCommitRate, qosNewCfgPortPriorityTable=qosNewCfgPortPriorityTable, qosCurCfgPortIndex=qosCurCfgPortIndex, qosNewCfgCosWeight=qosNewCfgCosWeight, aclCurCfgAclMeterStatus=aclCurCfgAclMeterStatus, aclNewCfgAclRemarkIndex=aclNewCfgAclRemarkIndex, aclNewCfgPortAddAclBlk=aclNewCfgPortAddAclBlk, qosOper=qosOper, aclNewCfgPortRemoveAcl=aclNewCfgPortRemoveAcl, qosNewCfgCosWeightTable=qosNewCfgCosWeightTable, qosStats=qosStats, aclNewCfgAclRemarkAclGrpBmap=aclNewCfgAclRemarkAclGrpBmap, aclCurCfgPortAclMeterTableEntry=aclCurCfgPortAclMeterTableEntry, aclCurCfgPortAclBmap=aclCurCfgPortAclBmap, aclCurCfgPortAclRemarkTable=aclCurCfgPortAclRemarkTable, aclCurCfgAclRemarkOutProfUpdateDscp=aclCurCfgAclRemarkOutProfUpdateDscp, aclNewCfgPortTable=aclNewCfgPortTable, aclNewCfgAclMeterAclBlkBmap=aclNewCfgAclMeterAclBlkBmap, aclCurCfgAclMeterMaxBurstSize=aclCurCfgAclMeterMaxBurstSize, aclCurCfgPortAclRemarkTableEntry=aclCurCfgPortAclRemarkTableEntry, aclNewCfgPortAclRemarkTable=aclNewCfgPortAclRemarkTable, aclNewCfgAclMeterAclGrpBmap=aclNewCfgAclMeterAclGrpBmap, aclNewCfgAclMeterIndex=aclNewCfgAclMeterIndex, aclCurCfgAclRemarkIndex=aclCurCfgAclRemarkIndex, qosCurCfgPriorityCoSq=qosCurCfgPriorityCoSq, qosNewCfgPriorityCoSTable=qosNewCfgPriorityCoSTable, aclCurCfgAclRemarkAclGrpBmap=aclCurCfgAclRemarkAclGrpBmap, aclNewCfgPortAclBlkBmap=aclNewCfgPortAclBlkBmap, aclNewCfgPortRemarkConfigIndex=aclNewCfgPortRemarkConfigIndex, aclCurCfgPortMeterConfigIndex=aclCurCfgPortMeterConfigIndex, aclNewCfgAclMeterCommitRate=aclNewCfgAclMeterCommitRate, aclNewCfgAclRemarkAclBlkBmap=aclNewCfgAclRemarkAclBlkBmap, aclNewCfgAclRemarkAssignAcl=aclNewCfgAclRemarkAssignAcl, qosCurCfgCosNum=qosCurCfgCosNum, aclCurCfgAclMeterAclGrpBmap=aclCurCfgAclMeterAclGrpBmap, aclNewCfgPortRemoveAclBlk=aclNewCfgPortRemoveAclBlk, aclCurCfgAclRemarkAclBlkBmap=aclCurCfgAclRemarkAclBlkBmap, aclNewCfgAclMeterUnAssignAcl=aclNewCfgAclMeterUnAssignAcl, aclNewCfgAclRemarkOutProfUpdateDscp=aclNewCfgAclRemarkOutProfUpdateDscp, qosNewCfgPriorityCoSq=qosNewCfgPriorityCoSq, qos8021p=qos8021p, aclNewCfgAclRemarkReset=aclNewCfgAclRemarkReset, qosNewCfgCosWeightEntry=qosNewCfgCosWeightEntry, qosNewCfgPriorityCoSEntry=qosNewCfgPriorityCoSEntry, aclNewCfgPortAclGrpBmap=aclNewCfgPortAclGrpBmap, aclNewCfgAclMeterAssignAcl=aclNewCfgAclMeterAssignAcl, aclNewCfgAclRemarkAssignAclGrp=aclNewCfgAclRemarkAssignAclGrp, aclNewCfgAclRemarkUnAssignAclGrp=aclNewCfgAclRemarkUnAssignAclGrp, qosCurCfgPortPriorityEntry=qosCurCfgPortPriorityEntry, qosCurCfgPriorityIndex=qosCurCfgPriorityIndex, aclNewCfgAclRemarkInProfUpdateDscp=aclNewCfgAclRemarkInProfUpdateDscp, aclCurCfgAclMeterIndex=aclCurCfgAclMeterIndex, aclCurCfgAclMeterDropOrPass=aclCurCfgAclMeterDropOrPass, aclNewCfgPortAddAclGrp=aclNewCfgPortAddAclGrp, aclCurCfgPortTable=aclCurCfgPortTable, aclCurCfgPortAclBlkBmap=aclCurCfgPortAclBlkBmap, aclNewCfgAclMeterDropOrPass=aclNewCfgAclMeterDropOrPass, qosCurCfgCosWeightEntry=qosCurCfgCosWeightEntry, aclCurCfgAclRemarkInProfUpdatePri=aclCurCfgAclRemarkInProfUpdatePri, aclNewCfgPortAclMeterTableEntry=aclNewCfgPortAclMeterTableEntry, aclCurCfgAclRemarkInProfUpdateTosPrec=aclCurCfgAclRemarkInProfUpdateTosPrec, aclNewCfgAclRemarkUnAssignAclBlk=aclNewCfgAclRemarkUnAssignAclBlk, aclNewCfgAclRemarkAssignAclBlk=aclNewCfgAclRemarkAssignAclBlk, PYSNMP_MODULE_ID=qos, aclNewCfgPortRemoveAclGrp=aclNewCfgPortRemoveAclGrp, aclNewCfgAclMeterUnAssignAclGrp=aclNewCfgAclMeterUnAssignAclGrp, qos=qos, aclNewCfgPortAddAcl=aclNewCfgPortAddAcl, aclNewCfgAclMeterAclBmap=aclNewCfgAclMeterAclBmap, qosCurCfgCosWeightTable=qosCurCfgCosWeightTable, aclNewCfgAclRemarkInProfUpdateTosPrec=aclNewCfgAclRemarkInProfUpdateTosPrec, aclCurCfgAclMeterAclBmap=aclCurCfgAclMeterAclBmap, aclNewCfgPortMeterConfigIndex=aclNewCfgPortMeterConfigIndex, qosCurCfgPriorityCoSTable=qosCurCfgPriorityCoSTable, aclCfg=aclCfg, aclCurCfgPortIndex=aclCurCfgPortIndex, qosNewCfgCosIndex=qosNewCfgCosIndex, qosNewCfgCosNum=qosNewCfgCosNum, aclNewCfgPortTableEntry=aclNewCfgPortTableEntry, qosCurCfgPortPriorityTable=qosCurCfgPortPriorityTable, aclNewCfgPortAclMeterTable=aclNewCfgPortAclMeterTable, qosConfigs=qosConfigs, aclNewCfgAclRemarkAclBmap=aclNewCfgAclRemarkAclBmap, qosCurCfgPortPriority=qosCurCfgPortPriority, aclCurCfgAclRemarkAclBmap=aclCurCfgAclRemarkAclBmap, aclNewCfgAclMeterStatus=aclNewCfgAclMeterStatus, qosCurCfgCosWeight=qosCurCfgCosWeight, aclCurCfgPortTableEntry=aclCurCfgPortTableEntry, aclNewCfgAclMeterUnAssignAclBlk=aclNewCfgAclMeterUnAssignAclBlk, aclNewCfgAclRemarkUnAssignAcl=aclNewCfgAclRemarkUnAssignAcl, qosInfo=qosInfo, aclCurCfgAclMeterAclBlkBmap=aclCurCfgAclMeterAclBlkBmap, qosCurCfgPriorityCoSEntry=qosCurCfgPriorityCoSEntry, qosCurCfgCosIndex=qosCurCfgCosIndex, aclNewCfgAclRemarkInProfUpdatePri=aclNewCfgAclRemarkInProfUpdatePri, aclCurCfgPortAclMeterTable=aclCurCfgPortAclMeterTable, aclNewCfgAclMeterAssignAclGrp=aclNewCfgAclMeterAssignAclGrp, aclCurCfgPortAclGrpBmap=aclCurCfgPortAclGrpBmap, aclNewCfgAclMeterMaxBurstSize=aclNewCfgAclMeterMaxBurstSize, aclCurCfgPortRemarkConfigIndex=aclCurCfgPortRemarkConfigIndex, qosNewCfgPortPriority=qosNewCfgPortPriority, qosNewCfgPriorityIndex=qosNewCfgPriorityIndex, aclNewCfgAclMeterAssignAclBlk=aclNewCfgAclMeterAssignAclBlk, qosNewCfgPortIndex=qosNewCfgPortIndex)
