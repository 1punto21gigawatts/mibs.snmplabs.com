#
# PySNMP MIB module CISCO-WAN-LAPD-TRUNK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-LAPD-TRUNK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
voice, = mibBuilder.importSymbols("BASIS-MIB", "voice")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, Counter32, IpAddress, Unsigned32, MibIdentifier, NotificationType, Integer32, TimeTicks, Bits, iso, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "Counter32", "IpAddress", "Unsigned32", "MibIdentifier", "NotificationType", "Integer32", "TimeTicks", "Bits", "iso", "ModuleIdentity", "ObjectIdentity")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
ciscoWanLapdTrunkMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 23))
ciscoWanLapdTrunkMIB.setRevisions(('2003-12-11 00:00', '2003-07-17 00:00', '2003-07-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanLapdTrunkMIB.setRevisionsDescriptions(('Update descriptions in the MIB. ', '-Added following tables: vismLapdTable vismLapdStatsTable vismLapdDlcTable These tables were defined in vismLapd.my earlier. and are now converted to SMIv2 and defined here. - Added UNITS clause wherever applicable.', 'Initial version of the MIB. The content of this MIB was originally available in SMIv1 version. The MIB has been converted to SMIv2 version and descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoWanLapdTrunkMIB.setLastUpdated('200312110000Z')
if mibBuilder.loadTexts: ciscoWanLapdTrunkMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanLapdTrunkMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-vism@cisco.com')
if mibBuilder.loadTexts: ciscoWanLapdTrunkMIB.setDescription('The MIB module is defined for establishing a Trunk to transport PRI (Primary Rate Interface) signaling information over a RUDP (Reliable UDP) connection for CCS (Common Channel Signaling) VoIP(Voice Over IP) Trunking application.')
vismLapdGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12))
ciscoWanLapdTrunkMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 23, 1))
vismLapdTrunkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 23, 1, 1))
vismLapdTrunkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 23, 1, 1, 1), )
if mibBuilder.loadTexts: vismLapdTrunkGrpTable.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkGrpTable.setDescription("This table defines attributes used to set up a Trunked LAPD (Link Access Procedure on the D-channel) connection over RUDP between 2 VISM's to transport PRI D channel information. Such a Trunked connection over RUDP can only be created if the D-channel has already not been configured for PRI Backhaul. The object vismLapdTrunkType in vismLapdTable indicate PRI Backhaul or Trunking is configured, also an entry will be created for each D channel. PRI Backhaul and PRI Trunking can co-exist on the same card but not on the same line, a line (DS1) is associated with a LAPD RUDP through vismLapdTrunkRudpIndex. ")
vismLapdTrunkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 23, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTrunkNum"))
if mibBuilder.loadTexts: vismLapdTrunkGrpEntry.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkGrpEntry.setDescription('An entry in the vismLapdTrunkGrpTable. ')
vismLapdTrunkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 23, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: vismLapdTrunkNum.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkNum.setDescription('This is the index of vismLapdTrunkGrpTable. ')
vismLapdTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 23, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oos", 1), ("is", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTrunkState.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkState.setDescription("'oos' - Out of service state. The LAPD Trunk state is independent of the RUDP session state in the sense that the LAPD state could be 'oos' while the RUDP session state is 'is' and vice versa. 'is' - In service state. 'unknown' - This is the state other than the above states. If the communication is lost between the 2 VISM's, the state of this connection becomes 'oos'. ")
vismLapdTrunkRudpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 23, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdTrunkRudpIndex.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkRudpIndex.setDescription('All LAPD Trunk connections are over RUDP. Each RUDP connection is characterized by a set of negotiable and non-negotiable parameters. These parameters are in vismRudpSessionCnfEntry(defined in CISCO-VISM-SESSION-MIB MIB) table. This object is an index into that table. Before creating an entry in this table the corresponding RUDP session entry must be created in the vismRudpSessionCnfEntry table with the vismRudpSessionType(defined in the same MIB) as LAPD Trunking. The RUDP session cannot be deleted if the corresponding LAPD Trunk still exist. The LAPD Trunk needs to be deleted before deleting RUDP session as specified in CISCO-VISM-SESSION-MIB. ')
vismLapdTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 23, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdTrunkRowStatus.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkRowStatus.setDescription("This variable allows the user to add or delete the entry for this table. 'createAndGo': Use this to add a LAPD Trunk connection in this table. The vismLapdTrunkRudpIndex for this corresponding entry has to be specified also. 'active': This value is returned, once the row is created. 'destroy': Use this to delete a LAPD Trunk connection from this table. ")
vismLapdTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1), )
if mibBuilder.loadTexts: vismLapdTable.setStatus('current')
if mibBuilder.loadTexts: vismLapdTable.setDescription('This table is used for maintaining the configuration of the LAPD channel on VISM. ')
vismLapdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1), ).setIndexNames((0, "CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdIndex"))
if mibBuilder.loadTexts: vismLapdEntry.setStatus('current')
if mibBuilder.loadTexts: vismLapdEntry.setDescription('An entry for vismLapdTable.')
vismLapdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdIndex.setStatus('current')
if mibBuilder.loadTexts: vismLapdIndex.setDescription('This is an index to vismLapdTable. This is derived from the following formula: index = 31 * (DS1# - 1) + DS0# where : DS1# - The T1/E1 line number in the range 1 - 8. DS0# - The DS0 channel number ranging from 1 to 24 for T1 and 1 to 31 for E1. ')
vismLapdAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pri", 1), ("gr-303", 2))).clone('pri')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdAppType.setStatus('current')
if mibBuilder.loadTexts: vismLapdAppType.setDescription("This object indicates the type of the LAPD interface. When the user creates a LAPD entry this object need to be specified. After creation it cannot be modified. 'pri' - level of service provided by ISDN(Integrated Services Digital Network) that carries voice, data, other services with control and signaling information in D-channel. 'gr-303' - standard interfaces for integrated digital loop carrier systems. ")
vismLapdWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdWinSize.setStatus('current')
if mibBuilder.loadTexts: vismLapdWinSize.setDescription('The window size - maximum number of sequentially numbered I-frames that may be outstanding. ')
vismLapdN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdN200.setStatus('current')
if mibBuilder.loadTexts: vismLapdN200.setDescription('The maximum number of retransmissions of a frame. ')
vismLapdT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1023000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdT200.setStatus('current')
if mibBuilder.loadTexts: vismLapdT200.setDescription('The maximum number of time in milliseconds to wait for acknowledgement for a transmit frame. This value should be less than vismLapdT203. For PRI, the range is 1000 ms to 1023000 ms. The default is 1000 ms. For GR-303, the range is 100 ms to 350 ms in increments of 50 ms. The default value is 150 ms. ')
vismLapdT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1023000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdT203.setStatus('current')
if mibBuilder.loadTexts: vismLapdT203.setDescription('The maximum time (in milliseconds) allowed without frames being exchanged. This value should be greater than vismLapdT200. For PRI, the range is 1000 to 1023000 and the default is 10000 ms. For GR-303, the range is 10000 to 300000 ms in increments of 10000 ms. The default is 30000 ms. ')
vismLapdType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("ccitt", 1), ("att5EssPRA", 3), ("att4Ess", 4), ("ntDMS100PRA", 6), ("vn2or3", 7), ("insNet", 8), ("tr6MPC", 9), ("tr6PBX", 10), ("ausp", 12), ("ni1", 13), ("etsi", 14), ("bc303TMC", 15), ("bc303CSC", 16), ("ntDMS250", 17), ("bellcore", 18), ("ni2", 19))).clone('ni2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdType.setStatus('current')
if mibBuilder.loadTexts: vismLapdType.setDescription('This object specifies what type of interface the LAPD stack will be used with. ccitt(1) : CCITT att5EssPRA(3) : AT&T 5ESS PRA att4Ess(4) : AT&T 4ESS ntDMS100PRA(6) : NT dms100 PRA vn2or3(7) : VN 2 or VN 3 insNet(8) : INS Net tr6MPC(9) : tr6 MPC tr6PBX(10) : tr6 PBX ausp(12) : Austel Primary ni1(13) : National ISDN-1 etsi(14) : ETSI bc303TMC(15) : Bellcorp tr303 tmc bc303CSC(16) : Bellcorp tr303 csc ntDMS250(17) : NT dms250 bellcore(18) : Bellcore ni2(19) : National ISDN-2 ')
vismLapdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdRowStatus.setStatus('current')
if mibBuilder.loadTexts: vismLapdRowStatus.setDescription("Row status allows users to create or delete a LAPD entry. 'createAndGo' - this option is use to create an entry in the table. Before a LAPD entry is created, the session manager should be set up(add a PRI backhaul session set, and session group between VISM and the call agent). Before creating a LAPD entry the entry in HDLC table will implicitly created first. If the DS0 has already been used then the request of creating a LAPD channel on the same DS0 on the same line will be rejected. After creating the LAPD entry the corresponding entry in vismLapdStatsTable will be implicitly created. 'active' - When an entry is created it becomes active. 'destroy' - Use this to delete an entry in this table. After implicitly deleting all the entries(if there is any) in vismLapdDlcEntry table for the specific D channel the entry in vismLapdEntry will be deleted, then the entry in vismLapdStatsTable will be implicitly deleted, followed by the deletion of the HDLC entry. ")
vismLapdSide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('network')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismLapdSide.setStatus('current')
if mibBuilder.loadTexts: vismLapdSide.setDescription('This object specifies whether LAPD stack is on the user side or network side. This object can be set when the row is created. It cannot be modified for an existing row. ')
vismLapdTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backhaul", 1), ("lapdTrunking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTrunkType.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkType.setDescription('This object indicates if the line is configured for Trunking or PRI Backhaul. This object is set to the appropriate type when the vismRudpSessionType (defined in CISCO-VISM-SESSION-MIB MIB) parameter in the vismRudpSessionCnfEntry(specify in the same MIB) table is set. The motivation to have similar such objects at two places is for convenience. ')
vismLapdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2), )
if mibBuilder.loadTexts: vismLapdStatsTable.setStatus('current')
if mibBuilder.loadTexts: vismLapdStatsTable.setDescription('This table contains statistics information for all LAPD (D channel Data Link) interfaces on VISM. ')
vismLapdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1), ).setIndexNames((0, "CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdStatsIndex"))
if mibBuilder.loadTexts: vismLapdStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vismLapdStatsEntry.setDescription('An entry in the LAPD Table.')
vismLapdStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdStatsIndex.setStatus('current')
if mibBuilder.loadTexts: vismLapdStatsIndex.setDescription('This is the index for this table. It is the same as vismLapdIndex. An entry of this table will be implicitly created when a LAPD entry is added. ')
vismLapdRxInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxInfoFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxInfoFrames.setDescription('This counter contains received information frames on a LAPD. ')
vismLapdTxInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxInfoFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxInfoFrames.setDescription('This counter contains information frames transmitted on a LAPD. ')
vismLapdRxReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxReadyFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxReadyFrames.setDescription('This counter contains Receiver Ready frames received on a LAPD. ')
vismLapdTxReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxReadyFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxReadyFrames.setDescription('This counter contains Receiver Ready frames transmitted on LAPD. ')
vismLapdRxNotReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxNotReadyFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxNotReadyFrames.setDescription('This counter contains Receiver Not Ready frames received on LAPD. ')
vismLapdTxNotReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxNotReadyFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxNotReadyFrames.setDescription('This counter contains Receiver Not Ready frames transmitted on a LAPD. ')
vismLapdRxSABMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxSABMFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxSABMFrames.setDescription('This counter contains Set Asynchronous Balanced Mode frames received on a LAPD. ')
vismLapdTxSABMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxSABMFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxSABMFrames.setDescription('This counter contains Set Asynchronous Balanced Mode frames transmitted on LAPD. ')
vismLapdRxDisconFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxDisconFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxDisconFrames.setDescription('This counter contains Disconnect frames received on LAPD. ')
vismLapdTxDisconFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxDisconFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxDisconFrames.setDescription('This counter contains Disconnect frames transmitted on LAPD. ')
vismLapdRxUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxUAFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxUAFrames.setDescription('This counter contains Unnumbered Acknowledge frames received on a LAPD. ')
vismLapdTxUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxUAFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxUAFrames.setDescription('This counter contains Unnumbered Acknowledge frames transmitted on a LAPD. ')
vismLapdRxDiscModeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxDiscModeFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxDiscModeFrames.setDescription('This counter contains Disconnect Mode frames received on a LAPD. ')
vismLapdTxDiscModeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxDiscModeFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxDiscModeFrames.setDescription('This counter contains Disconnect Mode frames transmitted on a LAPD. ')
vismLapdRxFrmRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxFrmRejectFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxFrmRejectFrames.setDescription('This counter contains Frame Reject frames received on a LAPD. ')
vismLapdTxFrmRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxFrmRejectFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxFrmRejectFrames.setDescription('This counter contains Frame Reject frames transmitted on a LAPD. ')
vismLapdRxExchIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxExchIdFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxExchIdFrames.setDescription('This counter contains Exchange Id frames received on a LAPD. ')
vismLapdTxExchIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxExchIdFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxExchIdFrames.setDescription('This counter contains Exchange Id frames transmitted on a LAPD. ')
vismLapdRxUnumInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxUnumInfoFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxUnumInfoFrames.setDescription('This counter contains Unnumbered Information frames received on a LAPD. ')
vismLapdTxUnumInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxUnumInfoFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxUnumInfoFrames.setDescription('This counter contains Unnumbered Information frames transmitted on a LAPD. ')
vismLapdRxRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxRejectFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxRejectFrames.setDescription('This counter contains Received Reject Frames on a LAPD. ')
vismLapdTxRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxRejectFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdTxRejectFrames.setDescription('This counter contains Reject frames transmitted on LAPD. ')
vismLapdRxInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxInvalidFrames.setStatus('current')
if mibBuilder.loadTexts: vismLapdRxInvalidFrames.setDescription('This counter contains Invalid frames received on a LAPD. ')
vismLapdDlcTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3), )
if mibBuilder.loadTexts: vismLapdDlcTable.setStatus('current')
if mibBuilder.loadTexts: vismLapdDlcTable.setDescription('This table is used for maintaining the link state of different DLCs on a LAPD channel. An entry of this table will be implicitly created when a LAPD entry is added. ')
vismLapdDlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1), ).setIndexNames((0, "CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdDlcIndex"), (0, "CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdDlcSapi"), (0, "CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdDlcTei"))
if mibBuilder.loadTexts: vismLapdDlcEntry.setStatus('current')
if mibBuilder.loadTexts: vismLapdDlcEntry.setDescription('An entry for vismLapdDlcTable.')
vismLapdDlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcIndex.setStatus('current')
if mibBuilder.loadTexts: vismLapdDlcIndex.setDescription('This object identifies the corresponding LAPD index. It is the same as vismLapdIndex. ')
vismLapdDlcSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcSapi.setStatus('current')
if mibBuilder.loadTexts: vismLapdDlcSapi.setDescription('This is the SAPI(Service Access Point Identifier) of a specific DLC(Data Link Control). ')
vismLapdDlcTei = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcTei.setStatus('current')
if mibBuilder.loadTexts: vismLapdDlcTei.setDescription('This is the TEI(Terminal Endpoint Identifier) of a specific DLC. ')
vismLapdDlcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcLinkState.setStatus('current')
if mibBuilder.loadTexts: vismLapdDlcLinkState.setDescription('This object indicate the linking state on a given DLC. ')
vismLapdTrunkNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 23, 2))
vismLapdTrunkNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 23, 2, 0))
vismLapdTrunkMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 23, 3))
vismLapdTrunkMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 23, 3, 1))
vismLapdTrunkMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 23, 3, 2))
vismLapdTrunkMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 23, 3, 1, 1)).setObjects(("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTrunkGroup"), ("CISCO-WAN-LAPD-TRUNK-MIB", "ciscoVismLapdGroup"), ("CISCO-WAN-LAPD-TRUNK-MIB", "ciscoVismLapdStatsGroup"), ("CISCO-WAN-LAPD-TRUNK-MIB", "ciscoVismLapdDlcTable"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismLapdTrunkMIBCompliance = vismLapdTrunkMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkMIBCompliance.setDescription(' The complaince statement for LAPD Trunk group which implements vismLapdTrunkGrp MIB.')
vismLapdTrunkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 23, 3, 2, 1)).setObjects(("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTrunkState"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTrunkRudpIndex"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTrunkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismLapdTrunkGroup = vismLapdTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: vismLapdTrunkGroup.setDescription('This group contains objects related to configuration of LAPD Trunk connections over RUDP. ')
ciscoVismLapdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 23, 3, 2, 2)).setObjects(("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdIndex"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdAppType"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdWinSize"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdN200"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdT200"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdT203"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdType"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRowStatus"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdSide"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTrunkType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismLapdGroup = ciscoVismLapdGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVismLapdGroup.setDescription('The collection of objects which are used to represent VISM LAPD information.')
ciscoVismLapdStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 23, 3, 2, 3)).setObjects(("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdStatsIndex"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxInfoFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxInfoFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxReadyFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxReadyFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxNotReadyFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxNotReadyFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxSABMFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxSABMFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxDisconFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxDisconFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxUAFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxUAFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxDiscModeFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxDiscModeFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxFrmRejectFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxFrmRejectFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxExchIdFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxExchIdFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxUnumInfoFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxUnumInfoFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxRejectFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdTxRejectFrames"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdRxInvalidFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismLapdStatsGroup = ciscoVismLapdStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVismLapdStatsGroup.setDescription('The collection of objects which are used to represent VISM LAPD Statistics information.')
ciscoVismLapdDlcTable = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 23, 3, 2, 4)).setObjects(("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdDlcIndex"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdDlcSapi"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdDlcTei"), ("CISCO-WAN-LAPD-TRUNK-MIB", "vismLapdDlcLinkState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismLapdDlcTable = ciscoVismLapdDlcTable.setStatus('current')
if mibBuilder.loadTexts: ciscoVismLapdDlcTable.setDescription('The collection of objects which are used to represent VISM LAPD link State of different DLCs on a LAPD channel.')
mibBuilder.exportSymbols("CISCO-WAN-LAPD-TRUNK-MIB", vismLapdTxUnumInfoFrames=vismLapdTxUnumInfoFrames, vismLapdTrunkNotificationPrefix=vismLapdTrunkNotificationPrefix, vismLapdRxInvalidFrames=vismLapdRxInvalidFrames, vismLapdTxFrmRejectFrames=vismLapdTxFrmRejectFrames, vismLapdRxUnumInfoFrames=vismLapdRxUnumInfoFrames, vismLapdRxExchIdFrames=vismLapdRxExchIdFrames, vismLapdRowStatus=vismLapdRowStatus, vismLapdSide=vismLapdSide, vismLapdTxSABMFrames=vismLapdTxSABMFrames, vismLapdWinSize=vismLapdWinSize, vismLapdStatsIndex=vismLapdStatsIndex, vismLapdT200=vismLapdT200, vismLapdTxInfoFrames=vismLapdTxInfoFrames, vismLapdStatsEntry=vismLapdStatsEntry, vismLapdDlcTable=vismLapdDlcTable, vismLapdTrunkGroup=vismLapdTrunkGroup, vismLapdTrunkMIBCompliances=vismLapdTrunkMIBCompliances, vismLapdT203=vismLapdT203, ciscoVismLapdGroup=ciscoVismLapdGroup, vismLapdTrunkNum=vismLapdTrunkNum, vismLapdRxRejectFrames=vismLapdRxRejectFrames, vismLapdN200=vismLapdN200, vismLapdTrunkGrpEntry=vismLapdTrunkGrpEntry, vismLapdTrunkGrp=vismLapdTrunkGrp, vismLapdRxFrmRejectFrames=vismLapdRxFrmRejectFrames, vismLapdTrunkNotifications=vismLapdTrunkNotifications, ciscoVismLapdStatsGroup=ciscoVismLapdStatsGroup, vismLapdGrp=vismLapdGrp, vismLapdTxNotReadyFrames=vismLapdTxNotReadyFrames, vismLapdTrunkRudpIndex=vismLapdTrunkRudpIndex, vismLapdTxUAFrames=vismLapdTxUAFrames, vismLapdAppType=vismLapdAppType, vismLapdDlcIndex=vismLapdDlcIndex, vismLapdTrunkRowStatus=vismLapdTrunkRowStatus, ciscoWanLapdTrunkMIB=ciscoWanLapdTrunkMIB, vismLapdTrunkMIBGroups=vismLapdTrunkMIBGroups, vismLapdRxNotReadyFrames=vismLapdRxNotReadyFrames, vismLapdTrunkMIBConformance=vismLapdTrunkMIBConformance, vismLapdTxExchIdFrames=vismLapdTxExchIdFrames, ciscoWanLapdTrunkMIBObjects=ciscoWanLapdTrunkMIBObjects, vismLapdTrunkMIBCompliance=vismLapdTrunkMIBCompliance, vismLapdTrunkState=vismLapdTrunkState, vismLapdDlcEntry=vismLapdDlcEntry, vismLapdRxInfoFrames=vismLapdRxInfoFrames, vismLapdRxDiscModeFrames=vismLapdRxDiscModeFrames, vismLapdIndex=vismLapdIndex, vismLapdTrunkType=vismLapdTrunkType, vismLapdDlcSapi=vismLapdDlcSapi, ciscoVismLapdDlcTable=ciscoVismLapdDlcTable, vismLapdRxSABMFrames=vismLapdRxSABMFrames, vismLapdTxDisconFrames=vismLapdTxDisconFrames, vismLapdType=vismLapdType, PYSNMP_MODULE_ID=ciscoWanLapdTrunkMIB, vismLapdDlcLinkState=vismLapdDlcLinkState, vismLapdStatsTable=vismLapdStatsTable, vismLapdTable=vismLapdTable, vismLapdTrunkGrpTable=vismLapdTrunkGrpTable, vismLapdEntry=vismLapdEntry, vismLapdTxReadyFrames=vismLapdTxReadyFrames, vismLapdRxDisconFrames=vismLapdRxDisconFrames, vismLapdRxReadyFrames=vismLapdRxReadyFrames, vismLapdRxUAFrames=vismLapdRxUAFrames, vismLapdTxRejectFrames=vismLapdTxRejectFrames, vismLapdTxDiscModeFrames=vismLapdTxDiscModeFrames, vismLapdDlcTei=vismLapdDlcTei)
