#
# PySNMP MIB module FORCE10-MSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORCE10-MSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
dot1dBridge, BridgeId, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBridge", "BridgeId", "Timeout")
f10Experiment, = mibBuilder.importSymbols("FORCE10-SMI", "f10Experiment")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, TimeTicks, iso, Gauge32, IpAddress, Counter32, Integer32, ModuleIdentity, mib_2, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "TimeTicks", "iso", "Gauge32", "IpAddress", "Counter32", "Integer32", "ModuleIdentity", "mib-2", "ObjectIdentity")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
f10Mstp = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 20, 2))
if mibBuilder.loadTexts: f10Mstp.setLastUpdated('200804011200Z')
if mibBuilder.loadTexts: f10Mstp.setOrganization('Force10 Networks, Inc.')
if mibBuilder.loadTexts: f10Mstp.setContactInfo('Force10 Networks, Inc. 350 Holger Way San Jose, CA 95134 USA Phone: +1 (408) 571 3500 Fax: +1 (408) 571 3550 Email: support@force10networks.com')
if mibBuilder.loadTexts: f10Mstp.setDescription('The MIB module for managing devices that support Multiple & Rapid Spanning Trees Protocol and algorithm. It is dedicated to reflect IEEE Std 802.1s. Note: This contains the MIB objects defined in MSTP-MIB of ruzin-mstp-mib-02.txt.')
class PortIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero, for each Port in the managed Bridge. The value for each PortIndex remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortIndexOrZero(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the PortIndex convention. The latter defines a greater than zero value used to identify a Port in the managed Bridge. This extension permits the additional value of zero. the value zero is object-specific and must therefore be defined as part of the description of any object which uses this syntax. Examples of the usage of zero might include situations where Port was unknown, or when none or all Ports need to be referenced.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class MstiInstanceIndex(TextualConvention, Integer32):
    description = 'A unique value, greater than zero, for each Multiple Spanning Tree Instance (MSTI) in the managed Bridge. The value for each MstiInstanceIndex remains constant for the instance. The '
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

class BpduCounter(TextualConvention, Counter32):
    description = 'An optional counter of received or transmitted Bridge Protocol Data Units of different types on/from a Port. If the agent does not support these counter, it returns the value 0. These counters are reset when the protocol starts to operate and when the value of mstpPortOperMACEnable changes from false(2) to true(1).'
    status = 'current'
    displayHint = 'd'

class MstiOrCistInstanceIndex(TextualConvention, Integer32):
    description = 'This textual convention is an extension of the MstiInstanceIndex convention. This extension permits the additional value of zero, which means Common and Internal Spanning Tree (CIST).'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 64)

class PortId(TextualConvention, OctetString):
    description = 'The Port Identifier of the Port, the unique Port identifier comprising two parts, the Port Number and the Port Priority field (13.24.8 of IEEE Std 802.1s, 8.5.5.1 and 17.18.16 of IEEE Std 802.1D, 1998 Edition).'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

mstpGen = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10))
mstpGenBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 2), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: mstpGenBridgeMaxAge.setDescription('12.8.1.3.a)')
mstpGenBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstpGenBridgeHelloTime.setDescription('12.8.1.3.b)')
mstpGenBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 4), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstpGenBridgeForwardDelay.setDescription('12.8.1.3.c)')
mstpGenMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 8), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpGenMaxAge.setStatus('current')
if mibBuilder.loadTexts: mstpGenMaxAge.setDescription('12.8.1.3.a)')
mstpGenHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 9), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpGenHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstpGenHelloTime.setDescription('12.8.1.3.b)')
mstpGenForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 10), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpGenForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstpGenForwardDelay.setDescription('12.8.1.3.c)')
mstpGenMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenMaxHops.setStatus('current')
if mibBuilder.loadTexts: mstpGenMaxHops.setDescription('13.22.f)')
mstpGenHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenHoldTime.setStatus('current')
if mibBuilder.loadTexts: mstpGenHoldTime.setDescription('.')
mstpGenMigrateTime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenMigrateTime.setStatus('current')
if mibBuilder.loadTexts: mstpGenMigrateTime.setDescription('13.22.d)')
mstpGenPathCostDefault = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pathCostDefault8021d1998", 1), ("pathCostDefault8021t2001", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenPathCostDefault.setReference('IEEE Std 802.1D & 802.1t Table 8-5')
if mibBuilder.loadTexts: mstpGenPathCostDefault.setStatus('current')
if mibBuilder.loadTexts: mstpGenPathCostDefault.setDescription('(Copied from draft-ietf-bridge-rstpmib-02.txt). The version of the Spanning Tree default Path Costs that are to be used by this Bridge. A value of pathCostDefault8021d1998(1) uses the 16-bit default Path Costs from IEEE Std. 802.1D-1998. A value of pathCostDefault8021t2001(2) uses the 32-bit default Path Costs from IEEE Std. 802.1t.')
mstpGenCapable = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nonStp", 0), ("dot1d1998", 1), ("dot1w", 2), ("dot1d2004", 3), ("dot1s", 4), ("dot1q", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpGenCapable.setStatus('current')
if mibBuilder.loadTexts: mstpGenCapable.setDescription("An indication of wheter the Bridge supports 'maximum' level Spanning Tree Protocol. The value nonStp(0) indicates, the Bridge doesn't support any Spanning Tree Protocol. The value 'dot1d1998(1)' indicates the Spanning Tree Protocol specified in EEE 802.1D-1998, 'dot1w(2)' indicates the Rapid Spanning Tree Protocol specified in IEEE Std 802.1w, 'dot1d2004' indicates IEEE Std 802.1D-2004 and 'dot1s(4) means MSTP IEEE Std 802.1s.")
mstpGenForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("forceNonStp", 0), ("forceLegacyDot1d", 1), ("forceDot1w", 2), ("autoDot1s", 3), ("unknown", 4))).clone('autoDot1s')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenForceVersion.setStatus('current')
if mibBuilder.loadTexts: mstpGenForceVersion.setDescription('The value forceNonStp(0) indicates, the Spanning Tree Protocol is disabled on the Bridge (or the Spanning Tree Protocol Emulation operates). Other possible values are described in IEEE Std 802.1s clause 12.8.1.3.e)')
mstpGenCfgIdFmtSel = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenCfgIdFmtSel.setReference('12.12.3.4.2.a)')
if mibBuilder.loadTexts: mstpGenCfgIdFmtSel.setStatus('current')
if mibBuilder.loadTexts: mstpGenCfgIdFmtSel.setDescription('Configuration Identificator Format Selector.')
mstpGenCfgIdName = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenCfgIdName.setReference('12.12.3.4.2.b)')
if mibBuilder.loadTexts: mstpGenCfgIdName.setStatus('current')
if mibBuilder.loadTexts: mstpGenCfgIdName.setDescription('The configuration name that identifies the MST region and is used as one of the inputs in the computation of the MST Configuration Identifier.')
mstpGenCfgIdRevLevel = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpGenCfgIdRevLevel.setReference('12.12.3.4.2.c)')
if mibBuilder.loadTexts: mstpGenCfgIdRevLevel.setStatus('current')
if mibBuilder.loadTexts: mstpGenCfgIdRevLevel.setDescription('This object identifies the MST revision that identifies the MST region and is used as one of the inputs in the computation of the MST configuration Identifier.')
mstpGenCfgIdDigest = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpGenCfgIdDigest.setReference('12.12.3.3.3.a.4')
if mibBuilder.loadTexts: mstpGenCfgIdDigest.setStatus('current')
if mibBuilder.loadTexts: mstpGenCfgIdDigest.setDescription('Configuration Digest.')
mstpGenReginalRoot = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 34), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpGenReginalRoot.setStatus('current')
if mibBuilder.loadTexts: mstpGenReginalRoot.setDescription('... of CIST.')
mstpGenExternalRootCost = MibScalar((1, 3, 6, 1, 4, 1, 6027, 20, 2, 10, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpGenExternalRootCost.setStatus('current')
if mibBuilder.loadTexts: mstpGenExternalRootCost.setDescription('... of CIST.')
mstpPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11), )
if mibBuilder.loadTexts: mstpPortTable.setStatus('current')
if mibBuilder.loadTexts: mstpPortTable.setDescription('A table that contains generic information about every port that is associated with this bridge.')
mstpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1), ).setIndexNames((0, "FORCE10-MSTP-MIB", "mstpPortIndex"))
if mibBuilder.loadTexts: mstpPortEntry.setStatus('current')
if mibBuilder.loadTexts: mstpPortEntry.setDescription('A list of information for each port of the bridge.')
mstpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstpPortIndex.setDescription("A unique value, greater than zero, for each Port. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
mstpPortAdminMACEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpPortAdminMACEnable.setReference('IEEE Std 802.1s Clause 12.8.2.5.2')
if mibBuilder.loadTexts: mstpPortAdminMACEnable.setStatus('current')
if mibBuilder.loadTexts: mstpPortAdminMACEnable.setDescription('.')
mstpPortOperMACEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortOperMACEnable.setReference('IEEE Std 802.1s Clause 12.8.2.5.2')
if mibBuilder.loadTexts: mstpPortOperMACEnable.setStatus('current')
if mibBuilder.loadTexts: mstpPortOperMACEnable.setDescription('.')
mstpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortUpTime.setStatus('current')
if mibBuilder.loadTexts: mstpPortUpTime.setDescription('The value of sysUpTime at the time when the Port has been enabled by mstpPortAdminMACEnable or linked last time.')
mstpPortAdminExternalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpPortAdminExternalPathCost.setReference('IEEE Std 802.1s Clause ')
if mibBuilder.loadTexts: mstpPortAdminExternalPathCost.setStatus('current')
if mibBuilder.loadTexts: mstpPortAdminExternalPathCost.setDescription('The administrative value of the External Port Cost parameter. The value 0 means, that Port Cost will be selected automatically in correspondence with the speed of the attached LAN.')
mstpPortOperExternalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortOperExternalPathCost.setReference('IEEE Std 802.1s Clause ')
if mibBuilder.loadTexts: mstpPortOperExternalPathCost.setStatus('current')
if mibBuilder.loadTexts: mstpPortOperExternalPathCost.setDescription('.')
mstpPortAdminEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpPortAdminEdge.setReference('IEEE Std 802.1s Clause ')
if mibBuilder.loadTexts: mstpPortAdminEdge.setStatus('current')
if mibBuilder.loadTexts: mstpPortAdminEdge.setDescription('.')
mstpPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortOperEdge.setReference('IEEE Std 802.1s Clause ')
if mibBuilder.loadTexts: mstpPortOperEdge.setStatus('current')
if mibBuilder.loadTexts: mstpPortOperEdge.setDescription('.')
mstpPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpPortAutoEdge.setReference('IEEE Std 802.1s Clause ')
if mibBuilder.loadTexts: mstpPortAutoEdge.setStatus('current')
if mibBuilder.loadTexts: mstpPortAutoEdge.setDescription('(From IEEE Std 8021D). Optional.')
mstpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpPortAdminPointToPoint.setReference('IEEE Std 802.1s Clause ')
if mibBuilder.loadTexts: mstpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: mstpPortAdminPointToPoint.setDescription('.')
mstpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortOperPointToPoint.setReference('IEEE Std 802.1s Clause ')
if mibBuilder.loadTexts: mstpPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: mstpPortOperPointToPoint.setDescription('.')
mstpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpPortHelloTime.setReference('IEEE Std 802.1s Clause ')
if mibBuilder.loadTexts: mstpPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstpPortHelloTime.setDescription('.')
mstpPortAdminNonStp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpPortAdminNonStp.setReference('.')
if mibBuilder.loadTexts: mstpPortAdminNonStp.setStatus('current')
if mibBuilder.loadTexts: mstpPortAdminNonStp.setDescription('Ports with this object set to true(1) do not participate in any STP computation; they are always in Forwarding state, do not send BPDU and all received on these Ports BPDU must be discarded. Such Ports are used to define the STP termination point of the LAN.')
mstpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpPortProtocolMigration.setReference('IEEE Std 802.1s Clause 12.8.2.7')
if mibBuilder.loadTexts: mstpPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: mstpPortProtocolMigration.setDescription("Reflects 'mcheck' - 'Force BPDU Migration Check' management operation, which is executes, when this object is being set to true(1). The value false(2) in SET operation has to be ignored. The operation GET must always return value false(2).")
mstpPortRxTcnBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 15), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortRxTcnBpduCounter.setStatus('current')
if mibBuilder.loadTexts: mstpPortRxTcnBpduCounter.setDescription('Received Topology Change Notification (TCN) Messages.')
mstpPortRxCfgBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 16), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortRxCfgBpduCounter.setStatus('current')
if mibBuilder.loadTexts: mstpPortRxCfgBpduCounter.setDescription('Received Configuration BPDUs (IEEE Std 802.1d-1998).')
mstpPortRxRstBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 17), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortRxRstBpduCounter.setStatus('current')
if mibBuilder.loadTexts: mstpPortRxRstBpduCounter.setDescription('Received RST BPDUs IEEE Std 802.1w-2001.')
mstpPortRxMstBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 18), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortRxMstBpduCounter.setStatus('current')
if mibBuilder.loadTexts: mstpPortRxMstBpduCounter.setDescription('Received MST BPDUs IEEE Std 802.1s.')
mstpPortTxTcnBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 19), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortTxTcnBpduCounter.setStatus('current')
if mibBuilder.loadTexts: mstpPortTxTcnBpduCounter.setDescription('Transmitted Topology Change Notification (TCN) Messages.')
mstpPortTxCfgBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 20), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortTxCfgBpduCounter.setStatus('current')
if mibBuilder.loadTexts: mstpPortTxCfgBpduCounter.setDescription('Transmitted Configuration BPDUs (IEEE Std 802.1d-1998).')
mstpPortTxRstBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 21), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortTxRstBpduCounter.setStatus('current')
if mibBuilder.loadTexts: mstpPortTxRstBpduCounter.setDescription('Transmitted RST BPDUs IEEE Std 802.1w-2001.')
mstpPortTxMstBpduCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 11, 1, 22), BpduCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpPortTxMstBpduCounter.setStatus('current')
if mibBuilder.loadTexts: mstpPortTxMstBpduCounter.setDescription('Transmitted MST BPDUs IEEE Std 802.1s.')
mstpMapTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 20, 2, 12), )
if mibBuilder.loadTexts: mstpMapTable.setStatus('current')
if mibBuilder.loadTexts: mstpMapTable.setDescription('MST Configuration table (VID=>MSTID translation): allocates each and every possible VLAN to CST or a specific MSTI.')
mstpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 20, 2, 12, 1), ).setIndexNames((0, "FORCE10-MSTP-MIB", "mstpMapMSTiID"), (0, "FORCE10-MSTP-MIB", "mstpMapVlanRangeIndex"))
if mibBuilder.loadTexts: mstpMapEntry.setStatus('current')
if mibBuilder.loadTexts: mstpMapEntry.setDescription('MST Configuration table (VID=>MSTID translation): allocates each and every possible VLAN to CST or a specific MSTI.')
mstpMapMSTiID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 12, 1, 1), MstiInstanceIndex())
if mibBuilder.loadTexts: mstpMapMSTiID.setStatus('current')
if mibBuilder.loadTexts: mstpMapMSTiID.setDescription('.')
mstpMapVlanRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: mstpMapVlanRangeIndex.setStatus('current')
if mibBuilder.loadTexts: mstpMapVlanRangeIndex.setDescription('Signifies the index to the VLAN range entry in the table.')
mstpMapVlanMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 12, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpMapVlanMin.setStatus('current')
if mibBuilder.loadTexts: mstpMapVlanMin.setDescription('.')
mstpMapVlanMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 12, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpMapVlanMax.setStatus('current')
if mibBuilder.loadTexts: mstpMapVlanMax.setDescription('.')
mstpMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 12, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstpMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: mstpMapRowStatus.setDescription('The status of the row as per SNMP-v2.')
mstpXstTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13), )
if mibBuilder.loadTexts: mstpXstTable.setStatus('current')
if mibBuilder.loadTexts: mstpXstTable.setDescription('.')
mstpXstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1), ).setIndexNames((0, "FORCE10-MSTP-MIB", "mstpXstId"))
if mibBuilder.loadTexts: mstpXstEntry.setStatus('current')
if mibBuilder.loadTexts: mstpXstEntry.setDescription('.')
mstpXstId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 1), MstiOrCistInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstId.setStatus('current')
if mibBuilder.loadTexts: mstpXstId.setDescription('0 means CIST.')
mstpXstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpXstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: mstpXstBridgePriority.setDescription('Bridge priority, in steps of 4096.')
mstpXstBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstBridgeId.setStatus('current')
if mibBuilder.loadTexts: mstpXstBridgeId.setDescription('.')
mstpXstDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: mstpXstDesignatedRoot.setDescription('.')
mstpXstDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: mstpXstDesignatedBridge.setDescription('.')
mstpXstInternalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstInternalRootCost.setStatus('current')
if mibBuilder.loadTexts: mstpXstInternalRootCost.setDescription('.')
mstpXstRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 7), PortIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstRootPort.setStatus('current')
if mibBuilder.loadTexts: mstpXstRootPort.setDescription('.')
mstpXstMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 8), PortIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstMasterPort.setStatus('current')
if mibBuilder.loadTexts: mstpXstMasterPort.setDescription('Non zero value may not be in CIST.')
mstpXstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: mstpXstTimeSinceTopologyChange.setDescription('.')
mstpXstTopologyChangesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstTopologyChangesCount.setStatus('current')
if mibBuilder.loadTexts: mstpXstTopologyChangesCount.setDescription('.')
mstpXstTopologyChangeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 13, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstTopologyChangeFlag.setStatus('current')
if mibBuilder.loadTexts: mstpXstTopologyChangeFlag.setDescription('.')
mstpXstPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14), )
if mibBuilder.loadTexts: mstpXstPortTable.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortTable.setDescription('.')
mstpXstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1), ).setIndexNames((0, "FORCE10-MSTP-MIB", "mstpXstPortXstId"), (0, "FORCE10-MSTP-MIB", "mstpXstPortIndex"))
if mibBuilder.loadTexts: mstpXstPortEntry.setReference('.')
if mibBuilder.loadTexts: mstpXstPortEntry.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortEntry.setDescription('.')
mstpXstPortXstId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 1), MstiOrCistInstanceIndex())
if mibBuilder.loadTexts: mstpXstPortXstId.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortXstId.setDescription('0 means CIST.')
mstpXstPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 2), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortIndex.setDescription('The value of mstpPortIndex of the Port in mstpPortTable.')
mstpXstPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 3), ("forwarding", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortState.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortState.setDescription('.')
mstpXstPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("nonStp", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortRole.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortRole.setDescription('.')
mstpXstPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortDesignatedRoot.setDescription('.')
mstpXstPortExternalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortExternalRootCost.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortExternalRootCost.setDescription('.')
mstpXstPortRegionalBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortRegionalBridge.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortRegionalBridge.setDescription('.')
mstpXstPortInternalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortInternalRootCost.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortInternalRootCost.setDescription('.')
mstpXstPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortDesignatedBridge.setDescription('.')
mstpXstPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 14), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortDesignatedPort.setDescription('.')
mstpXstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpXstPortPriority.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortPriority.setDescription('Port priority, in steps of 16.')
mstpXstPortAdminInternalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstpXstPortAdminInternalPathCost.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortAdminInternalPathCost.setDescription('The value 0 means, that the cost will be selected automatically.')
mstpXstPortOperInternalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 20, 2, 14, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpXstPortOperInternalPathCost.setStatus('current')
if mibBuilder.loadTexts: mstpXstPortOperInternalPathCost.setDescription('.')
mstpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 20, 2, 0))
mstpNewRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6027, 20, 2, 0, 1)).setObjects(("FORCE10-MSTP-MIB", "mstpXstId"))
if mibBuilder.loadTexts: mstpNewRootBridge.setStatus('current')
if mibBuilder.loadTexts: mstpNewRootBridge.setDescription('The mstpNewRootBridge trap indicates that the sending agent has become the new root of the Spanning Tree in the CIST or in any MSTI; the trap is sent by a bridge soon after its election as the new root, e.g., upon expiration of the Topology Change Timer immediately subsequent to its election. Implementation of this trap is optional.')
mstpNewRootPort = NotificationType((1, 3, 6, 1, 4, 1, 6027, 20, 2, 0, 2)).setObjects(("FORCE10-MSTP-MIB", "mstpXstId"), ("FORCE10-MSTP-MIB", "mstpXstPortIndex"))
if mibBuilder.loadTexts: mstpNewRootPort.setStatus('current')
if mibBuilder.loadTexts: mstpNewRootPort.setDescription('The mstpNewRootPort trap indicates that the sending agent has changed the root Port of the Spanning Tree in the CIST or in any MSTI. If the instance has become a root one, the sending value of the parameter mstpXstPortIndex is equal to zero. The trap is sent by a bridge soon after its election as the new root Port, e.g., upon expiration of the Topology Change Timer immediately subsequent to its election. Implementation of this trap is optional.')
mstpTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 6027, 20, 2, 0, 3)).setObjects(("FORCE10-MSTP-MIB", "mstpXstId"), ("FORCE10-MSTP-MIB", "mstpXstPortIndex"), ("FORCE10-MSTP-MIB", "mstpXstPortState"))
if mibBuilder.loadTexts: mstpTopologyChange.setStatus('current')
if mibBuilder.loadTexts: mstpTopologyChange.setDescription('A mstpTopologyChange trap is sent by a bridge when any of its configured ports n any instance (CIST or MSTI) transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. The trap is not sent if a mstpNewRootBridge trap is sent for the same transition. Implementation of this trap is optional.')
mibBuilder.exportSymbols("FORCE10-MSTP-MIB", PortId=PortId, mstpPortTxCfgBpduCounter=mstpPortTxCfgBpduCounter, mstpXstBridgeId=mstpXstBridgeId, MstiInstanceIndex=MstiInstanceIndex, mstpGenHelloTime=mstpGenHelloTime, mstpXstPortRegionalBridge=mstpXstPortRegionalBridge, mstpGenExternalRootCost=mstpGenExternalRootCost, PYSNMP_MODULE_ID=f10Mstp, mstpXstPortEntry=mstpXstPortEntry, mstpPortTxRstBpduCounter=mstpPortTxRstBpduCounter, mstpPortTxMstBpduCounter=mstpPortTxMstBpduCounter, mstpGenBridgeHelloTime=mstpGenBridgeHelloTime, mstpGenBridgeMaxAge=mstpGenBridgeMaxAge, mstpGenCfgIdDigest=mstpGenCfgIdDigest, mstpGenMaxHops=mstpGenMaxHops, mstpGenCapable=mstpGenCapable, mstpXstTable=mstpXstTable, mstpPortOperEdge=mstpPortOperEdge, mstpXstPortOperInternalPathCost=mstpXstPortOperInternalPathCost, mstpXstPortIndex=mstpXstPortIndex, mstpMapMSTiID=mstpMapMSTiID, mstpGenMaxAge=mstpGenMaxAge, PortIndexOrZero=PortIndexOrZero, mstpGenPathCostDefault=mstpGenPathCostDefault, mstpGenCfgIdRevLevel=mstpGenCfgIdRevLevel, mstpGenForwardDelay=mstpGenForwardDelay, mstpXstId=mstpXstId, mstpXstBridgePriority=mstpXstBridgePriority, mstpXstPortState=mstpXstPortState, mstpPortEntry=mstpPortEntry, mstpXstInternalRootCost=mstpXstInternalRootCost, mstpGenMigrateTime=mstpGenMigrateTime, mstpXstPortInternalRootCost=mstpXstPortInternalRootCost, mstpPortTxTcnBpduCounter=mstpPortTxTcnBpduCounter, mstpPortAdminEdge=mstpPortAdminEdge, mstpPortAdminExternalPathCost=mstpPortAdminExternalPathCost, mstpMapEntry=mstpMapEntry, mstpXstTimeSinceTopologyChange=mstpXstTimeSinceTopologyChange, mstpPortAutoEdge=mstpPortAutoEdge, mstpPortAdminPointToPoint=mstpPortAdminPointToPoint, mstpGenForceVersion=mstpGenForceVersion, f10Mstp=f10Mstp, mstpPortTable=mstpPortTable, mstpPortAdminNonStp=mstpPortAdminNonStp, PortIndex=PortIndex, mstpMapVlanMax=mstpMapVlanMax, mstpXstDesignatedBridge=mstpXstDesignatedBridge, mstpTraps=mstpTraps, mstpXstPortAdminInternalPathCost=mstpXstPortAdminInternalPathCost, mstpPortUpTime=mstpPortUpTime, mstpXstPortPriority=mstpXstPortPriority, mstpXstTopologyChangesCount=mstpXstTopologyChangesCount, mstpXstTopologyChangeFlag=mstpXstTopologyChangeFlag, mstpNewRootPort=mstpNewRootPort, mstpPortRxCfgBpduCounter=mstpPortRxCfgBpduCounter, mstpPortRxRstBpduCounter=mstpPortRxRstBpduCounter, mstpTopologyChange=mstpTopologyChange, mstpPortIndex=mstpPortIndex, mstpPortRxMstBpduCounter=mstpPortRxMstBpduCounter, MstiOrCistInstanceIndex=MstiOrCistInstanceIndex, mstpXstRootPort=mstpXstRootPort, mstpXstMasterPort=mstpXstMasterPort, mstpMapRowStatus=mstpMapRowStatus, mstpGen=mstpGen, mstpXstDesignatedRoot=mstpXstDesignatedRoot, mstpPortHelloTime=mstpPortHelloTime, mstpPortRxTcnBpduCounter=mstpPortRxTcnBpduCounter, mstpGenCfgIdName=mstpGenCfgIdName, mstpPortProtocolMigration=mstpPortProtocolMigration, mstpGenCfgIdFmtSel=mstpGenCfgIdFmtSel, mstpGenHoldTime=mstpGenHoldTime, mstpPortOperMACEnable=mstpPortOperMACEnable, BpduCounter=BpduCounter, mstpPortAdminMACEnable=mstpPortAdminMACEnable, mstpXstPortTable=mstpXstPortTable, mstpXstPortDesignatedBridge=mstpXstPortDesignatedBridge, mstpGenReginalRoot=mstpGenReginalRoot, mstpXstEntry=mstpXstEntry, mstpPortOperPointToPoint=mstpPortOperPointToPoint, mstpMapVlanMin=mstpMapVlanMin, mstpMapVlanRangeIndex=mstpMapVlanRangeIndex, mstpXstPortDesignatedRoot=mstpXstPortDesignatedRoot, mstpMapTable=mstpMapTable, mstpPortOperExternalPathCost=mstpPortOperExternalPathCost, mstpXstPortDesignatedPort=mstpXstPortDesignatedPort, mstpXstPortRole=mstpXstPortRole, mstpGenBridgeForwardDelay=mstpGenBridgeForwardDelay, mstpXstPortXstId=mstpXstPortXstId, mstpNewRootBridge=mstpNewRootBridge, mstpXstPortExternalRootCost=mstpXstPortExternalRootCost)
