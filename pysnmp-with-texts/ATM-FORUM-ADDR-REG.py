#
# PySNMP MIB module ATM-FORUM-ADDR-REG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM-FORUM-ADDR-REG
# Produced by pysmi-0.3.4 at Wed May  1 11:31:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
atmfNetPrefixGroup, atmfAddressGroup, atmfAddressRegistrationAdminGroup, NetPrefix, AtmAddress = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "atmfNetPrefixGroup", "atmfAddressGroup", "atmfAddressRegistrationAdminGroup", "NetPrefix", "AtmAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ModuleIdentity, Integer32, Bits, IpAddress, ObjectIdentity, Unsigned32, MibIdentifier, Gauge32, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ModuleIdentity", "Integer32", "Bits", "IpAddress", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "iso", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmfNetPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 353, 2, 7, 1), )
if mibBuilder.loadTexts: atmfNetPrefixTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmfNetPrefixTable.setDescription('A table implemented by the user-side IME, containing the network-prefix(es) for ATM-layer addresses in effect on the user side of the UNI.')
atmfNetPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 2, 7, 1, 1), ).setIndexNames((0, "ATM-FORUM-ADDR-REG", "atmfNetPrefixPort"), (0, "ATM-FORUM-ADDR-REG", "atmfNetPrefixPrefix"))
if mibBuilder.loadTexts: atmfNetPrefixEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmfNetPrefixEntry.setDescription('Information about a single network-prefix for ATM-layer addresses in effect on the user-side IME. Note that the index variable atmNetPrefixPrefix is a variable-length string, and as such the rule for variable-length strings in section 4.1.6 of RFC 1212 applies.')
atmfNetPrefixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfNetPrefixPort.setStatus('mandatory')
if mibBuilder.loadTexts: atmfNetPrefixPort.setDescription('A unique value which identifies the UNI port for which the network prefix for ATM addresses is in effect. The value of 0 has the special meaning of identifying the local UNI.')
atmfNetPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 7, 1, 1, 2), NetPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfNetPrefixPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: atmfNetPrefixPrefix.setDescription('The network prefix for ATM addresses which is in effect on the user side of the ATM UNI port.')
atmfNetPrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfNetPrefixStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmfNetPrefixStatus.setDescription('An indication of the validity of the network prefix for ATM addresses on the user side of the UNI port. To configure a new network prefix in this table, the network-side IME must set the appropriate instance of this object to the value valid(1). To delete an existing network prefix in this table, the network-side IME must set the appropriate instance of this object to the value invalid(2). If circumstances occur on the user-side IME which cause a prefix to become invalid, the user-side IME modifies the value of the appropriate instance of this object to invalid(2). Whenever the value of this object for a particular prefix becomes invalid(2), the conceptual row for that prefix may be removed from the table at any time, either immediately or subsequently.')
atmfAddressTable = MibTable((1, 3, 6, 1, 4, 1, 353, 2, 6, 1), )
if mibBuilder.loadTexts: atmfAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressTable.setDescription('A table implemented by the network-side IME, containing the ATM-layer addresses in effect on the user side of the UNI.')
atmfAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 2, 6, 1, 1), ).setIndexNames((0, "ATM-FORUM-ADDR-REG", "atmfAddressPort"), (0, "ATM-FORUM-ADDR-REG", "atmfAddressAtmAddress"))
if mibBuilder.loadTexts: atmfAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressEntry.setDescription('Information about a single ATM-layer address in effect on the user-side IME. Note that the index variable atmAddressAtmAddress is a variable-length string, and as such the rule for variable-length strings in section 4.1.6 of RFC 1212 applies.')
atmfAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressPort.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressPort.setDescription('A unique value which identifies the UNI port for which the ATM address is in effect. The value of 0 has the special meaning of identifying the local UNI.')
atmfAddressAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 6, 1, 1, 2), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressAtmAddress.setDescription('The ATM address which is in effect on the user side of the ATM UNI port.')
atmfAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressStatus.setDescription('An indication of the validity of the ATM address at the user side of the UNI port. To configure a new address in this table, the user-side IME must set the appropriate instance of this object to the value valid(1). To delete an existing address in this table, the user-side IME must set the appropriate instance of this object to the value invalid(2). If circumstances occur on the network-side IME which cause an address to become invalid, the network-side IME modifies the value of the appropriate instance of this object to invalid(2). Whenever the value of this object for a particular address becomes invalid(2), the conceptual row for that address may be removed from the table at any time, either immediately or subsequently.')
atmfAddressOrgScope = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("localNetwork", 1), ("localNetworkPlusOne", 2), ("localNetworkPlusTwo", 3), ("siteMinusOne", 4), ("intraSite", 5), ("sitePlusOne", 6), ("organizationMinusOne", 7), ("intraOrganization", 8), ("organizationPlusOne", 9), ("communityMinusOne", 10), ("intraCommunity", 11), ("communityPlusOne", 12), ("regional", 13), ("interRegional", 14), ("global", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfAddressOrgScope.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressOrgScope.setDescription("This object indicates the organizational scope for the referenced address. The information of the referenced address shall not be distributed outside the indicated scope. If the user-side IME does not specify a value for the atmfAddressOrgScope object, the network shall set the value of this object to localNetwork(1), if the registered address is an ATM group address, or to global(15), if the registered address is an individual address. Refer to Annex 6.0 of ATM Forum UNI Signalling 4.0 for guidelines regarding the use of organizational scopes. This organization hierarchy may be mapped to ATM network's routing hierarchy such as PNNI's routing level and the mapping shall be configurable in nodes. Use of this object in a public network is for further study. The default values for organizational scope are localNetwork(1) for ATM group addresses, and global(15) for individual addresses.")
atmfAddressRegistrationAdminTable = MibTable((1, 3, 6, 1, 4, 1, 353, 2, 11, 1), )
if mibBuilder.loadTexts: atmfAddressRegistrationAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressRegistrationAdminTable.setDescription('A table of Address Registration administrative information for the ATM Interface.')
atmfAddressRegistrationAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 2, 11, 1, 1), ).setIndexNames((0, "ATM-FORUM-ADDR-REG", "atmfAddressRegistrationAdminIndex"))
if mibBuilder.loadTexts: atmfAddressRegistrationAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressRegistrationAdminEntry.setDescription('An entry in the table, containing Address Registration administrative information for the ATM Interface.')
atmfAddressRegistrationAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressRegistrationAdminIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressRegistrationAdminIndex.setDescription('The value of 0 which has the special meaning of identifying the ATM Interface over which this message was received.')
atmfAddressRegistrationAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressRegistrationAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressRegistrationAdminStatus.setDescription('An indication of whether or not Address Registration is supported on this ATM Interface. Supported(1) indicates that this ATM Interface supports address registration. Unsupported(2) indicates that this ATM Interface does not support address registration.')
mibBuilder.exportSymbols("ATM-FORUM-ADDR-REG", atmfAddressRegistrationAdminIndex=atmfAddressRegistrationAdminIndex, atmfAddressRegistrationAdminStatus=atmfAddressRegistrationAdminStatus, atmfNetPrefixPort=atmfNetPrefixPort, atmfAddressRegistrationAdminEntry=atmfAddressRegistrationAdminEntry, atmfAddressAtmAddress=atmfAddressAtmAddress, atmfNetPrefixEntry=atmfNetPrefixEntry, atmfAddressEntry=atmfAddressEntry, atmfAddressRegistrationAdminTable=atmfAddressRegistrationAdminTable, atmfNetPrefixTable=atmfNetPrefixTable, atmfNetPrefixStatus=atmfNetPrefixStatus, atmfAddressStatus=atmfAddressStatus, atmfAddressOrgScope=atmfAddressOrgScope, atmfAddressTable=atmfAddressTable, atmfNetPrefixPrefix=atmfNetPrefixPrefix, atmfAddressPort=atmfAddressPort)
