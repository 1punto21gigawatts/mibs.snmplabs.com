#
# PySNMP MIB module Wellfleet-RARP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-RARP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, Counter64, Counter32, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Integer32, MibIdentifier, TimeTicks, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Counter64", "Counter32", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Integer32", "MibIdentifier", "TimeTicks", "NotificationType", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfRarpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfRarpGroup")
wfRarp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 1))
wfRarpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRarpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete RARP.')
wfRarpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRarpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpDisable.setDescription('Enable/Disable Parameter indicates whether this RARP record is enabled or disabled.')
wfRarpNumNoMatches = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRarpNumNoMatches.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpNumNoMatches.setDescription('The number of RARP Requests dropped that failed Table Look UP')
wfRarpMapTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 2), )
if mibBuilder.loadTexts: wfRarpMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpMapTable.setDescription('List of configured RARP MAP Table entries')
wfRarpMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 2, 1), ).setIndexNames((0, "Wellfleet-RARP-MIB", "wfRarpMapMadr"))
if mibBuilder.loadTexts: wfRarpMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpMapEntry.setDescription('A description of an RARP map')
wfRarpMapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRarpMapDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpMapDelete.setDescription('Indicates whether this RARP Map record is to be deleted or created')
wfRarpMapMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRarpMapMadr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpMapMadr.setDescription('Mac Address in RARP Request pkts')
wfRarpMapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRarpMapIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpMapIpAddr.setDescription('IP Address of Requesting Station')
wfRarpIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 3), )
if mibBuilder.loadTexts: wfRarpIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpIntfTable.setDescription('List of configured RARP interfaces')
wfRarpIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 3, 1), ).setIndexNames((0, "Wellfleet-RARP-MIB", "wfRarpIntfCctno"))
if mibBuilder.loadTexts: wfRarpIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpIntfEntry.setDescription('A description of an RARP interface')
wfRarpIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRarpIntfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpIntfDelete.setDescription('Indicates whether this RARP intf record is to be deleted or created')
wfRarpIntfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRarpIntfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpIntfDisable.setDescription('Indicates whether this RARP intf record is to be enabled or disabled')
wfRarpIntfCctno = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRarpIntfCctno.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpIntfCctno.setDescription('Which Circuit rarp should run on')
wfRarpIntfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 9, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRarpIntfIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRarpIntfIpAddr.setDescription("RARP Server's IP Address on this circuit")
mibBuilder.exportSymbols("Wellfleet-RARP-MIB", wfRarpIntfIpAddr=wfRarpIntfIpAddr, wfRarpDelete=wfRarpDelete, wfRarpMapIpAddr=wfRarpMapIpAddr, wfRarpIntfTable=wfRarpIntfTable, wfRarpIntfCctno=wfRarpIntfCctno, wfRarpIntfDelete=wfRarpIntfDelete, wfRarpMapEntry=wfRarpMapEntry, wfRarpIntfEntry=wfRarpIntfEntry, wfRarpMapDelete=wfRarpMapDelete, wfRarpMapTable=wfRarpMapTable, wfRarp=wfRarp, wfRarpNumNoMatches=wfRarpNumNoMatches, wfRarpIntfDisable=wfRarpIntfDisable, wfRarpMapMadr=wfRarpMapMadr, wfRarpDisable=wfRarpDisable)
