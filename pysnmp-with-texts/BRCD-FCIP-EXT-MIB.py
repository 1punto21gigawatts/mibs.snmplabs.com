#
# PySNMP MIB module BRCD-FCIP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BRCD-FCIP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
bcsi, = mibBuilder.importSymbols("Brocade-REG-MIB", "bcsi")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Unsigned32, Bits, NotificationType, Integer32, MibIdentifier, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, mib_2, ObjectIdentity, Gauge32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Bits", "NotificationType", "Integer32", "MibIdentifier", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "mib-2", "ObjectIdentity", "Gauge32", "iso", "TimeTicks")
RowStatus, DisplayString, TimeStamp, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TimeStamp", "TextualConvention", "TruthValue")
fcipExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1588, 4))
fcipExtMIB.setRevisions(('2009-06-19 15:05', '2013-04-26 11:33',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fcipExtMIB.setRevisionsDescriptions(('Removed duplicate entry of fcipExtendedLinkTable', 'Modified description for fcipext table objects',))
if mibBuilder.loadTexts: fcipExtMIB.setLastUpdated('201304261133Z')
if mibBuilder.loadTexts: fcipExtMIB.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: fcipExtMIB.setContactInfo('Customer Support Group Brocade Communications Systems, 1745 Technology Drive, San Jose, CA 95110 U.S.A Tel: +1-408-392-6061 Fax: +1-408-392-6656 Email: support@Brocade.COM WEB: www.brocade.com')
if mibBuilder.loadTexts: fcipExtMIB.setDescription('The module defines management information specific to FCIP devices.')
class BrcdCompressionRatio(TextualConvention, Unsigned32):
    description = 'A number indicating a compression ratio over a set of bytes. The value is defined as a set of bytes. The value is defined as 1000 * bytes(compressed) / bytes(original) rounded to the next integer value. Note that compressed sets of bytes can be larger than the corresponding uncompressed ones. Therefore, the number can be greater than 1000.'
    status = 'current'
    displayHint = 'd'

fcipExtendedLinkTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 4, 1), )
if mibBuilder.loadTexts: fcipExtendedLinkTable.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkTable.setDescription('The stats of fcip tunnel compression, retransmission, packet loss, and latency details')
fcipExtendedLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1), ).setIndexNames((0, "BRCD-FCIP-EXT-MIB", "fcipExtendedLinkIfIndex"))
if mibBuilder.loadTexts: fcipExtendedLinkEntry.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkEntry.setDescription('A conceptual row of the FCIP Extended Link Table containing additional stats.')
fcipExtendedLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkIfIndex.setDescription('The ifIndex value of the virtual interface corresponding to the FCIP Tunnels running over TCP/IP.')
fcipExtendedLinkTcpRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkTcpRetransmits.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkTcpRetransmits.setDescription('Number of segments retransmitted for the tunnel.')
fcipExtendedLinkTcpDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkTcpDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkTcpDroppedPackets.setDescription('Number of TCP packets dropped in the tunnel. It is taken from TCPtransmits value.')
fcipExtendedLinkCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 4), BrcdCompressionRatio()).setUnits('compression ratio').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkCompressionRatio.setDescription('Compression ratio of the tunnel in thousands.')
fcipExtendedLinkTcpSmoothedRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 5), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkTcpSmoothedRTT.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkTcpSmoothedRTT.setDescription('Round trip time (latency) in milliseconds for tunnel')
fcipExtendedLinkRawBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkRawBytes.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkRawBytes.setDescription('Total number of raw bytes sent or received for the tunnel.')
fcipExtendedLinkCompressedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkCompressedBytes.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkCompressedBytes.setDescription('The total number of compressed bytes sent or received for the tunnel.')
fcipExtendedLinkConnectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkConnectedCount.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkConnectedCount.setDescription('TCP session connection count for the tunnel.')
fcipExtendedLinkRtxRtxTO = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkRtxRtxTO.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkRtxRtxTO.setDescription('Counter of retransmit packets due to timeout for the tunnel as Slow ReTx.')
fcipExtendedLinkRtxDupAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkRtxDupAck.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkRtxDupAck.setDescription('Counter of retransmit packets due to duplicate acknowledgement for the tunnel as Fast ReTx.')
fcipExtendedLinkDupAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkDupAck.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkDupAck.setDescription('Counter of duplicate acknowledgement packets for the tunnel.')
fcipExtendedLinkRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 12), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkRtt.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkRtt.setDescription('Round trip time in milliseconds for the tunnel.')
fcipExtendedLinkOoo = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkOoo.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkOoo.setDescription('Counter of TCP out-of-order frames for the tunnel.')
fcipExtendedLinkSlowStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcipExtendedLinkSlowStarts.setStatus('current')
if mibBuilder.loadTexts: fcipExtendedLinkSlowStarts.setDescription('Counter of slow starts for the tunnel.')
fcipConnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 4, 2), )
if mibBuilder.loadTexts: fcipConnStatsTable.setStatus('current')
if mibBuilder.loadTexts: fcipConnStatsTable.setDescription('The stats of fcip tunnel compression, retransmission, packet loss, and latency details')
fcipConnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1), ).setIndexNames((0, "BRCD-FCIP-EXT-MIB", "xfcipEntityId"), (0, "BRCD-FCIP-EXT-MIB", "xfcipLinkIndex"))
if mibBuilder.loadTexts: fcipConnStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fcipConnStatsEntry.setDescription('A conceptual row of the FCIP Extended Link Table containing additional stats.')
xfcipEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: xfcipEntityId.setReference('RFC 3821, Section 7.1, FCIP Special Frame Format')
if mibBuilder.loadTexts: xfcipEntityId.setStatus('current')
if mibBuilder.loadTexts: xfcipEntityId.setDescription('The FCIP entity identifier.')
xfcipLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfcipLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: xfcipLinkIfIndex.setDescription('The ifIndex value of the virtual interface corresponding to the FCIP TCP sessions.')
xfcipLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: xfcipLinkIndex.setStatus('current')
if mibBuilder.loadTexts: xfcipLinkIndex.setDescription('An arbitrary integer that uniquely identifies one FCIP link within an FCIP entity.')
xfcipExtendedLinkTcpRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfcipExtendedLinkTcpRetransmits.setStatus('current')
if mibBuilder.loadTexts: xfcipExtendedLinkTcpRetransmits.setDescription('Number of segments retransmitted.')
xfcipExtendedLinkTcpDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfcipExtendedLinkTcpDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: xfcipExtendedLinkTcpDroppedPackets.setDescription('Number of TCP packets dropped')
xfcipExtendedLinkCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 6), BrcdCompressionRatio()).setUnits('compression ratio').setMaxAccess("readonly")
if mibBuilder.loadTexts: xfcipExtendedLinkCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: xfcipExtendedLinkCompressionRatio.setDescription('Compression ratio in thousands.')
xfcipExtendedLinkTcpSmoothedRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 7), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: xfcipExtendedLinkTcpSmoothedRTT.setStatus('current')
if mibBuilder.loadTexts: xfcipExtendedLinkTcpSmoothedRTT.setDescription('Round trip time (latency) in milliseconds')
xfcipExtendedLinkRawBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfcipExtendedLinkRawBytes.setStatus('current')
if mibBuilder.loadTexts: xfcipExtendedLinkRawBytes.setDescription('Total number of raw bytes sent or received.')
xfcipExtendedLinkCompressedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfcipExtendedLinkCompressedBytes.setStatus('current')
if mibBuilder.loadTexts: xfcipExtendedLinkCompressedBytes.setDescription('The total number of compressed bytes sent or received')
mibBuilder.exportSymbols("BRCD-FCIP-EXT-MIB", xfcipExtendedLinkTcpDroppedPackets=xfcipExtendedLinkTcpDroppedPackets, fcipExtendedLinkTcpRetransmits=fcipExtendedLinkTcpRetransmits, fcipExtendedLinkEntry=fcipExtendedLinkEntry, PYSNMP_MODULE_ID=fcipExtMIB, fcipExtendedLinkOoo=fcipExtendedLinkOoo, fcipExtendedLinkTcpSmoothedRTT=fcipExtendedLinkTcpSmoothedRTT, xfcipEntityId=xfcipEntityId, xfcipExtendedLinkTcpSmoothedRTT=xfcipExtendedLinkTcpSmoothedRTT, fcipExtendedLinkRawBytes=fcipExtendedLinkRawBytes, fcipExtMIB=fcipExtMIB, fcipExtendedLinkRtxRtxTO=fcipExtendedLinkRtxRtxTO, fcipExtendedLinkCompressedBytes=fcipExtendedLinkCompressedBytes, fcipConnStatsEntry=fcipConnStatsEntry, xfcipLinkIfIndex=xfcipLinkIfIndex, fcipConnStatsTable=fcipConnStatsTable, BrcdCompressionRatio=BrcdCompressionRatio, xfcipExtendedLinkTcpRetransmits=xfcipExtendedLinkTcpRetransmits, xfcipExtendedLinkCompressedBytes=xfcipExtendedLinkCompressedBytes, fcipExtendedLinkTcpDroppedPackets=fcipExtendedLinkTcpDroppedPackets, fcipExtendedLinkRtxDupAck=fcipExtendedLinkRtxDupAck, xfcipLinkIndex=xfcipLinkIndex, xfcipExtendedLinkRawBytes=xfcipExtendedLinkRawBytes, fcipExtendedLinkIfIndex=fcipExtendedLinkIfIndex, fcipExtendedLinkCompressionRatio=fcipExtendedLinkCompressionRatio, fcipExtendedLinkSlowStarts=fcipExtendedLinkSlowStarts, fcipExtendedLinkConnectedCount=fcipExtendedLinkConnectedCount, xfcipExtendedLinkCompressionRatio=xfcipExtendedLinkCompressionRatio, fcipExtendedLinkTable=fcipExtendedLinkTable, fcipExtendedLinkRtt=fcipExtendedLinkRtt, fcipExtendedLinkDupAck=fcipExtendedLinkDupAck)
