#
# PySNMP MIB module OA-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OA-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
oacExpIMIp, = mibBuilder.importSymbols("ONEACCESS-GLOBAL-REG", "oacExpIMIp")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, IpAddress, Gauge32, NotificationType, iso, TimeTicks, Integer32, ObjectIdentity, ModuleIdentity, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "IpAddress", "Gauge32", "NotificationType", "iso", "TimeTicks", "Integer32", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
oacQOS = ModuleIdentity((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3))
if mibBuilder.loadTexts: oacQOS.setLastUpdated('0301201245Z')
if mibBuilder.loadTexts: oacQOS.setOrganization(' OneAccess ')
if mibBuilder.loadTexts: oacQOS.setContactInfo('Pascal KESTELOOT Postal: ONE ACCESS 28, rue de la redoute 92260 Fontenay aux roses FRANCE Tel: (+33) 01 41 87 70 54 Fax: (+33) 01 41 87 74 39 E-mail: pascal.kesteloot@oneaccess-net.com')
if mibBuilder.loadTexts: oacQOS.setDescription('')
class QosObjectType(TextualConvention, Integer32):
    description = 'QOS object types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))
    namedValues = NamedValues(("policymap", 1), ("classmap", 2), ("matchStatement", 3), ("queueing", 4), ("randomDetect", 5), ("police", 7), ("set", 8))

class TrafficDirection(TextualConvention, Integer32):
    description = 'A policy is configured for the input or output directions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("input", 1), ("output", 2))

class QosClassInfo(TextualConvention, Integer32):
    description = 'A classmap can be match all or match any.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("matchAll", 2), ("matchAny", 3))

class QosMatchInfo(TextualConvention, Integer32):
    description = 'A match can be match or match not.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("matchNot", 2))

class InterfaceType(TextualConvention, Integer32):
    description = 'The interface type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("mainInterface", 1), ("subInterface", 2))

class QueueingBandwidthUnits(TextualConvention, Integer32):
    description = 'Unit type for bandwidth.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("kbps", 1), ("percentage", 2), ("percentageRemaining", 3))

class PoliceAction(TextualConvention, Integer32):
    description = 'The available actions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("transmit", 1), ("setIpDSCP", 2), ("setIpPrecedence", 3), ("setQosGroup", 4), ("drop", 5), ("setAtmClp", 6), ("setDiscardClass", 7))

class SetFeatureType(TextualConvention, Bits):
    description = 'The available packet marking features.'
    status = 'current'
    namedValues = NamedValues(("ipDscp", 0), ("ipPrecedence", 1), ("qosGroupNumber", 2), ("atmClpBit", 3), ("discardClass", 4))

class WREDMechanism(TextualConvention, Integer32):
    description = 'WRED mechanism.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("precedence", 1), ("dscp", 2))

class QosQueueUnitType(TextualConvention, Integer32):
    description = 'Unit type for queue size.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("packets", 1), ("cells", 2), ("bytes", 3))

class QosQueueDepth(TextualConvention, Gauge32):
    description = 'Queue depth value.'
    status = 'current'

oacQosServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1), )
if mibBuilder.loadTexts: oacQosServicePolicyTable.setStatus('current')
if mibBuilder.loadTexts: oacQosServicePolicyTable.setDescription('This table describes the interfaces that have attached policies.')
oacQosServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"))
if mibBuilder.loadTexts: oacQosServicePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosServicePolicyEntry.setDescription('')
oacQosPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: oacQosPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: oacQosPolicyIndex.setDescription('Each policy has a distinct index.')
oacQosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosIfIndex.setStatus('current')
if mibBuilder.loadTexts: oacQosIfIndex.setDescription('The interface index.')
oacQosIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1, 3), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosIfType.setStatus('current')
if mibBuilder.loadTexts: oacQosIfType.setDescription('Interface type.')
oacQosPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1, 4), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: oacQosPolicyDirection.setDescription('Policy direction (input or output).')
oacQosInterfacePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 2), )
if mibBuilder.loadTexts: oacQosInterfacePolicyTable.setStatus('current')
if mibBuilder.loadTexts: oacQosInterfacePolicyTable.setDescription('This describes the service policies attached to the interfaces.')
oacQosInterfacePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OA-QOS-MIB", "oacQosPolicyDirection"))
if mibBuilder.loadTexts: oacQosInterfacePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosInterfacePolicyEntry.setDescription('Each entry is indexed by ifindex and direction.')
oacQosInterfacePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosInterfacePolicyIndex.setStatus('current')
if mibBuilder.loadTexts: oacQosInterfacePolicyIndex.setDescription('Index for policy, identical with oacQosPolicyIndex.')
oacQosObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3), )
if mibBuilder.loadTexts: oacQosObjectsTable.setStatus('current')
if mibBuilder.loadTexts: oacQosObjectsTable.setDescription('This tables describes the hierarchy of objects(policies, classmaps, actions, match statements). A policy can contain several classmaps, a classmap several match statements, etc. For each object there is also an index to the corresponding config table.')
oacQosObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosObjectsEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosObjectsEntry.setDescription('')
oacQosObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1, 1), Gauge32())
if mibBuilder.loadTexts: oacQosObjectsIndex.setStatus('current')
if mibBuilder.loadTexts: oacQosObjectsIndex.setDescription('Each object has and unique index.')
oacQosConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosConfigIndex.setStatus('current')
if mibBuilder.loadTexts: oacQosConfigIndex.setDescription('The index of the config. A config can be shared by several objects.')
oacQosObjectsType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1, 3), QosObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosObjectsType.setStatus('current')
if mibBuilder.loadTexts: oacQosObjectsType.setDescription('The type of the object: policymap, or classmap, or matchStatement, etc.')
oacQosParentObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosParentObjectsIndex.setStatus('current')
if mibBuilder.loadTexts: oacQosParentObjectsIndex.setDescription('The index of the parent object.')
oacQosPolicyMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 4), )
if mibBuilder.loadTexts: oacQosPolicyMapConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosPolicyMapConfigTable.setDescription('This Table specifies the policy maps configuration.')
oacQosPolicyMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 4, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosPolicyMapConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosPolicyMapConfigEntry.setDescription('')
oacQosPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: oacQosPolicyMapName.setDescription('Policy map name.')
oacQosClassMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 5), )
if mibBuilder.loadTexts: oacQosClassMapConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapConfigTable.setDescription('This Table specifies the classmaps configuration.')
oacQosClassMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 5, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosClassMapConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapConfigEntry.setDescription('')
oacQosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapName.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapName.setDescription('Name of class map.')
oacQosClassMapInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 5, 1, 2), QosClassInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapInfo.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapInfo.setDescription('Type of classmap: Match all or Match any.')
oacQosClassMapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6), )
if mibBuilder.loadTexts: oacQosClassMapStatsTable.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapStatsTable.setDescription('Statistics for classmaps.')
oacQosClassMapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosClassMapStatsEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapStatsEntry.setDescription('')
oacQosClassMapPreExecutePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecutePkt.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapPreExecutePkt.setDescription('Count of inbound packets before executing any policy.')
oacQosClassMapPreExecutePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecutePkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapPreExecutePkt64.setDescription('Count64 of inbound packets before executing any policy.')
oacQosClassMapPreExecuteByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecuteByte.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapPreExecuteByte.setDescription('Count of inbound bytes before executing any policy.')
oacQosClassMapPreExecuteByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecuteByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapPreExecuteByte64.setDescription('')
oacQosClassMapPreExecuteBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 5), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecuteBitRate.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapPreExecuteBitRate.setDescription('Bit rate of data before executing any policy.')
oacQosClassMapPostExecuteByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPostExecuteByte.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapPostExecuteByte.setDescription('Count of outbound bytes after applying policy.')
oacQosClassMapPostExecuteByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPostExecuteByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapPostExecuteByte64.setDescription('Count64 of outbound bytes after applying policy.')
oacQosClassMapPostExecuteBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 8), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPostExecuteBitRate.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapPostExecuteBitRate.setDescription('Rate of outbound bits after applying policy.')
oacQosClassMapDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapDropPkt.setDescription('Count of dropped packets.')
oacQosClassMapDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapDropPkt64.setDescription('Count64 of dropped packets.')
oacQosClassMapDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropByte.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapDropByte.setDescription('Count of dropped bytes.')
oacQosClassMapDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapDropByte64.setDescription('Count64 of dropped bytes.')
oacQosClassMapDropBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 13), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropBitRate.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapDropBitRate.setDescription('Rate of dropped bits.')
oacQosClassMapRemarkedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapRemarkedPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapRemarkedPkt.setDescription('Count of remarked packets.')
oacQosClassMapRemarkedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapRemarkedPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapRemarkedPkt64.setDescription('Count64 of remarked packets.')
oacQosClassMapRemarkedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapRemarkedByte.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapRemarkedByte.setDescription('Count of remarked bytes.')
oacQosClassMapRemarkedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapRemarkedByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosClassMapRemarkedByte64.setDescription('Count of remarked bytes.')
oacQosMatchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 7), )
if mibBuilder.loadTexts: oacQosMatchConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchConfigTable.setDescription('This table specifies the match statements configuration.')
oacQosMatchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 7, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosMatchConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchConfigEntry.setDescription('')
oacQosMatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchName.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchName.setDescription('The name of the match statement.')
oacQosMatchInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 7, 1, 2), QosMatchInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchInfo.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchInfo.setDescription('Match or Match not.')
oacQosMatchStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8), )
if mibBuilder.loadTexts: oacQosMatchStatsTable.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchStatsTable.setDescription('This table specifies the match statements statistics.')
oacQosMatchStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosMatchStatsEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchStatsEntry.setDescription('')
oacQosMatchPreExecutePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecutePkt.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchPreExecutePkt.setDescription('Count of inbound packets before executing any policy.')
oacQosMatchPreExecutePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecutePkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchPreExecutePkt64.setDescription('Count64 of inbound packets before executing any policy.')
oacQosMatchPreExecuteByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecuteByte.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchPreExecuteByte.setDescription('Count of inbound bytes before executing any policy.')
oacQosMatchPreExecuteByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecuteByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchPreExecuteByte64.setDescription('Count64 of inbound bytes before executing any policy.')
oacQosMatchPreExecuteBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 5), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecuteBitRate.setStatus('current')
if mibBuilder.loadTexts: oacQosMatchPreExecuteBitRate.setDescription('Input bit rate.')
oacQosSetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9), )
if mibBuilder.loadTexts: oacQosSetConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosSetConfigTable.setDescription('This table specifies Actions configuration.')
oacQosSetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosSetConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosSetConfigEntry.setDescription('')
oacQosSetConfigFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 1), SetFeatureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigFeature.setStatus('current')
if mibBuilder.loadTexts: oacQosSetConfigFeature.setDescription('')
oacQosSetConfigIpDSCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigIpDSCPValue.setStatus('current')
if mibBuilder.loadTexts: oacQosSetConfigIpDSCPValue.setDescription('The IP DSCP value.')
oacQosSetConfigIpPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigIpPrecedenceValue.setStatus('current')
if mibBuilder.loadTexts: oacQosSetConfigIpPrecedenceValue.setDescription('The IP Precedence value.')
oacQosSetConfigQosGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigQosGroupValue.setStatus('current')
if mibBuilder.loadTexts: oacQosSetConfigQosGroupValue.setDescription('The Qos Group value.')
oacQosSetConfigDiscardClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigDiscardClassValue.setStatus('current')
if mibBuilder.loadTexts: oacQosSetConfigDiscardClassValue.setDescription('')
oacQosPoliceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10), )
if mibBuilder.loadTexts: oacQosPoliceConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConfigTable.setDescription('This table specifies Traffic Conditioning configuration information')
oacQosPoliceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosPoliceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConfigEntry.setDescription('')
oacQosPoliceConfigCir = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2000000000))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigCir.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConfigCir.setDescription('Committed Information Rate.')
oacQosPoliceConfigCir64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 2), Counter64()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigCir64.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConfigCir64.setDescription('Committed Information Rate.')
oacQosPoliceConfigConformBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1000, 512000000))).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigConformBurstSize.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConfigConformBurstSize.setDescription('Committed Burst Size.')
oacQosPoliceConfigPir = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2000000000))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigPir.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConfigPir.setDescription('Peak Information Rate.')
oacQosPoliceConfigPeakBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1000, 512000000))).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigPeakBurstSize.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConfigPeakBurstSize.setDescription('Peak Burst Size.')
oacQosPoliceConfigConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 6), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigConformAction.setStatus('deprecated')
if mibBuilder.loadTexts: oacQosPoliceConfigConformAction.setDescription('')
oacQosPoliceConfigConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigConformSetValue.setStatus('deprecated')
if mibBuilder.loadTexts: oacQosPoliceConfigConformSetValue.setDescription('')
oacQosPoliceConfigExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 8), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigExceedAction.setStatus('deprecated')
if mibBuilder.loadTexts: oacQosPoliceConfigExceedAction.setDescription('')
oacQosPoliceConfigExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigExceedSetValue.setStatus('deprecated')
if mibBuilder.loadTexts: oacQosPoliceConfigExceedSetValue.setDescription('')
oacQosPoliceConfigViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 10), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigViolateAction.setStatus('deprecated')
if mibBuilder.loadTexts: oacQosPoliceConfigViolateAction.setDescription('')
oacQosPoliceConfigViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigViolateSetValue.setStatus('deprecated')
if mibBuilder.loadTexts: oacQosPoliceConfigViolateSetValue.setDescription('')
oacQosPoliceActionConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11), )
if mibBuilder.loadTexts: oacQosPoliceActionConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigTable.setDescription('This table specifies Traffic Conditioning Action configuration.')
oacQosPoliceActionConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"), (0, "OA-QOS-MIB", "oacQosPoliceActionConfigIndex"))
if mibBuilder.loadTexts: oacQosPoliceActionConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigEntry.setDescription('')
oacQosPoliceActionConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 1), Gauge32())
if mibBuilder.loadTexts: oacQosPoliceActionConfigIndex.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigIndex.setDescription('')
oacQosPoliceActionConfigConform = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 2), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigConform.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigConform.setDescription('Action taken when traffic does not exceed conform token bucket.')
oacQosPoliceActionConfigConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigConformSetValue.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigConformSetValue.setDescription('New value set for each conform packets. If Action action does not required a set value, this object is set to zero.')
oacQosPoliceActionConfigExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 4), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigExceed.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigExceed.setDescription('Action taken when traffic is between conform and exceed token buckets.')
oacQosPoliceActionConfigExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigExceedSetValue.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigExceedSetValue.setDescription('New value set for each exceed packets. If action does not required a set value, this object is set to zero.')
oacQosPoliceActionConfigViolate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 6), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigViolate.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigViolate.setDescription('Action taken when traffic exceeds conform token bucket.')
oacQosPoliceActionConfigViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigViolateSetValue.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceActionConfigViolateSetValue.setDescription('New value set for each violate packets. If action does not required a set value, this object is set to zero.')
oacQosPoliceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12), )
if mibBuilder.loadTexts: oacQosPoliceStatsTable.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceStatsTable.setDescription('This table specifies Traffic Conditioning Statistics information.')
oacQosPoliceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosPoliceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceStatsEntry.setDescription('')
oacQosPoliceConformPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConformPkt.setDescription('Count of conformed packets.')
oacQosPoliceConformPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConformPkt64.setDescription('Count64 of conformed packets.')
oacQosPoliceConformByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformByte.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConformByte.setDescription('Count of conformed bytes.')
oacQosPoliceConformByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConformByte64.setDescription('Count64 of conformed bytes.')
oacQosPoliceConformBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 5), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformBitRate.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceConformBitRate.setDescription('The conform traffic rate.')
oacQosPoliceExceedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceExceedPkt.setDescription('Count of exceeded packets.')
oacQosPoliceExceedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceExceedPkt64.setDescription('Count64 of exceeded packets.')
oacQosPoliceExceedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 8), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedByte.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceExceedByte.setDescription('Count of exceeded bytes.')
oacQosPoliceExceedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceExceedByte64.setDescription('Count64 of exceeded bytes.')
oacQosPoliceExceedBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 10), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedBitRate.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceExceedBitRate.setDescription('The exceed traffic rate.')
oacQosPoliceViolatePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolatePkt.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceViolatePkt.setDescription('Count of violated packets.')
oacQosPoliceViolatePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolatePkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceViolatePkt64.setDescription('Count64 of violated packets.')
oacQosPoliceViolateByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 13), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolateByte.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceViolateByte.setDescription('Count of violated bytes.')
oacQosPoliceViolateByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 14), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolateByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceViolateByte64.setDescription('Count64 of violated bytes.')
oacQosPoliceViolateBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 15), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolateBitRate.setStatus('current')
if mibBuilder.loadTexts: oacQosPoliceViolateBitRate.setDescription('The violate traffic rate.')
oacQosWREDConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13), )
if mibBuilder.loadTexts: oacQosWREDConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDConfigTable.setDescription('This table specifies the WRED configuration information')
oacQosWREDConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosWREDConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDConfigEntry.setDescription('')
oacQosWREDConfigExponentialWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDConfigExponentialWeight.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDConfigExponentialWeight.setDescription('The exponential weighting factor used to compute average queue size.')
oacQosWREDConfigDscpPrecQosGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13, 1, 2), WREDMechanism()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDConfigDscpPrecQosGroup.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDConfigDscpPrecQosGroup.setDescription('The WRED based mechanism.')
oacQosWREDConfigECNEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDConfigECNEnabled.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDConfigECNEnabled.setDescription('Indicate if Explicit Congestion Notification is enabled.')
oacQosWREDClassConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14), )
if mibBuilder.loadTexts: oacQosWREDClassConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDClassConfigTable.setDescription('This table specifies the WRED configuration information for each value.')
oacQosWREDClassConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"), (0, "OA-QOS-MIB", "oacQosWREDValue"))
if mibBuilder.loadTexts: oacQosWREDClassConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDClassConfigEntry.setDescription('')
oacQosWREDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: oacQosWREDValue.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDValue.setDescription('The DSCP, Precedence or QosGroup value.')
oacQosWREDConfigPktDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDConfigPktDropProb.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDConfigPktDropProb.setDescription('The Mark Probality Drop factor.')
oacQosWREDClassConfigThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 3), QosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDClassConfigThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDClassConfigThresholdUnit.setDescription('The unit to specify WRED thresholds.')
oacQosWREDClassConfigMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 4), QosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDClassConfigMinThreshold.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDClassConfigMinThreshold.setDescription('The minimum WRED threshold value.')
oacQosWREDClassConfigMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 5), QosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDClassConfigMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDClassConfigMaxThreshold.setDescription('The maximum WRED threshold value.')
oacQosWREDClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15), )
if mibBuilder.loadTexts: oacQosWREDClassStatsTable.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDClassStatsTable.setDescription('This table specifies the WRED statistics information.')
oacQosWREDClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"), (0, "OA-QOS-MIB", "oacQosWREDValue"))
if mibBuilder.loadTexts: oacQosWREDClassStatsEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDClassStatsEntry.setDescription('')
oacQosWREDAverageQueueSizeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 1), QosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDAverageQueueSizeUnits.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDAverageQueueSizeUnits.setDescription('The queue size unit type.')
oacQosWREDAverageQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 2), QosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDAverageQueueSize.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDAverageQueueSize.setDescription('The average queue size used by WRED.')
oacQosWREDRandomDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDRandomDropPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDRandomDropPkt.setDescription('Count of packets dropped ramdomly.')
oacQosWREDRandomDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDRandomDropPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDRandomDropPkt64.setDescription('Count64 of packets dropped ramdomly.')
oacQosWREDRandomDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDRandomDropByte.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDRandomDropByte.setDescription('Count of bytes dropped ramdomly.')
oacQosWREDRandomDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDRandomDropByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDRandomDropByte64.setDescription('Count64 of bytes dropped ramdomly.')
oacQosWREDTailDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTailDropPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDTailDropPkt.setDescription('Count of packets dropped when the number of packets exceeds the maximum threshold.')
oacQosWREDTailDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTailDropPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDTailDropPkt64.setDescription('Count64 of packets dropped when the number of packets exceeds the maximum threshold.')
oacQosWREDTailDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 9), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTailDropByte.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDTailDropByte.setDescription('Count of bytes dropped when the number of packets exceeds the maximum threshold.')
oacQosWREDTailDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTailDropByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDTailDropByte64.setDescription('Count64 of bytes dropped when the number of packets exceeds the maximum threshold.')
oacQosWREDTransmitPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTransmitPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDTransmitPkt.setDescription('Count of packets transmitted.')
oacQosWREDTransmitPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTransmitPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDTransmitPkt64.setDescription('Count64 of packets transmitted.')
oacQosWREDTransmitByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 13), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTransmitByte.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDTransmitByte.setDescription('Count of bytes transmitted.')
oacQosWREDTransmitByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 14), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTransmitByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDTransmitByte64.setDescription('Count64 of bytes transmitted.')
oacQosWREDECNMarkPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDECNMarkPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDECNMarkPkt.setDescription('Count of packets marked with ECN.')
oacQosWREDECNMarkPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDECNMarkPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDECNMarkPkt64.setDescription('Count64 of packets marked with ECN.')
oacQosWREDECNMarkByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 17), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDECNMarkByte.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDECNMarkByte.setDescription('Count of bytes marked with ECN.')
oacQosWREDECNMarkByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 18), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDECNMarkByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosWREDECNMarkByte64.setDescription('Count of bytes marked with ECN.')
oacQosQueueConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16), )
if mibBuilder.loadTexts: oacQosQueueConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigTable.setDescription('This table specifies Queue configuration information.')
oacQosQueueConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosQueueConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigEntry.setDescription('')
oacQosQueueConfigFlowBasedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedEnabled.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedEnabled.setDescription('Indicate if Flow-Based WFQ is enable.')
oacQosQueueConfigPriorityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigPriorityEnabled.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigPriorityEnabled.setDescription('Indicate if this class used priority queueing.')
oacQosQueueConfigBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigBandwidth.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigBandwidth.setDescription('Indicate the bandwidth configured to this class.')
oacQosQueueConfigBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 4), QueueingBandwidthUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigBandwidthUnits.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigBandwidthUnits.setDescription('Indicate the bandwidth unit.')
oacQosQueueConfigFlowBasedQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedQSize.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedQSize.setDescription('The maximum number of packets allowed for each Flow-Based WFQ queues.')
oacQosQueueConfigFlowBasedQNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedQNumber.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedQNumber.setDescription('The number of dynamic queues reserved for Flow-Based WFQ.')
oacQosQueueConfigPrioBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(32, 64000000))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigPrioBurstSize.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigPrioBurstSize.setDescription('')
oacQosQueueConfigQueueLimitUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 8), QosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigQueueLimitUnits.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigQueueLimitUnits.setDescription('The maximum number of packets allowed for all queues associated for this class.')
oacQosQueueConfigQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 9), QosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigQueueLimit.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueConfigQueueLimit.setDescription('The queue limit unit.')
oacQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17), )
if mibBuilder.loadTexts: oacQosQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueStatsTable.setDescription('This table specifies Queue statistics information.')
oacQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueStatsEntry.setDescription('')
oacQosQueueDiscardByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 1), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueDiscardByte.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueDiscardByte.setDescription('Count of bytes dropped by queueing.')
oacQosQueueDiscardByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 2), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueDiscardByte64.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueDiscardByte64.setDescription('Count64 of bytes dropped by queueing.')
oacQosQueueDiscardPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueDiscardPkt.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueDiscardPkt.setDescription('Count of packets dropped by queueing.')
oacQosQueueDiscardPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueDiscardPkt64.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueDiscardPkt64.setDescription('Count64 of packets dropped by queueing.')
oacQosQueueCurrentQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 5), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueCurrentQDepth.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueCurrentQDepth.setDescription('The current depth of the queue.')
oacQosQueueMaxQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 6), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueMaxQDepth.setStatus('current')
if mibBuilder.loadTexts: oacQosQueueMaxQDepth.setDescription('The maximum depth of the queue.')
mibBuilder.exportSymbols("OA-QOS-MIB", oacQosPoliceConformPkt=oacQosPoliceConformPkt, oacQosClassMapPostExecuteBitRate=oacQosClassMapPostExecuteBitRate, oacQosPoliceConfigTable=oacQosPoliceConfigTable, QueueingBandwidthUnits=QueueingBandwidthUnits, oacQosPoliceExceedByte64=oacQosPoliceExceedByte64, oacQosObjectsEntry=oacQosObjectsEntry, oacQosServicePolicyTable=oacQosServicePolicyTable, oacQosClassMapPreExecutePkt=oacQosClassMapPreExecutePkt, oacQosWREDConfigEntry=oacQosWREDConfigEntry, oacQosPoliceConfigPir=oacQosPoliceConfigPir, SetFeatureType=SetFeatureType, oacQosSetConfigEntry=oacQosSetConfigEntry, oacQosPolicyMapConfigEntry=oacQosPolicyMapConfigEntry, oacQosQueueConfigFlowBasedQSize=oacQosQueueConfigFlowBasedQSize, oacQosPoliceConfigEntry=oacQosPoliceConfigEntry, InterfaceType=InterfaceType, oacQosPoliceActionConfigViolate=oacQosPoliceActionConfigViolate, oacQosObjectsType=oacQosObjectsType, oacQosQueueDiscardByte=oacQosQueueDiscardByte, oacQosPoliceConfigConformSetValue=oacQosPoliceConfigConformSetValue, oacQosPoliceActionConfigExceedSetValue=oacQosPoliceActionConfigExceedSetValue, oacQosPoliceViolateByte=oacQosPoliceViolateByte, oacQosWREDTailDropByte=oacQosWREDTailDropByte, oacQosWREDConfigExponentialWeight=oacQosWREDConfigExponentialWeight, oacQosQueueConfigBandwidth=oacQosQueueConfigBandwidth, oacQosIfIndex=oacQosIfIndex, oacQosWREDClassConfigTable=oacQosWREDClassConfigTable, oacQosMatchName=oacQosMatchName, oacQosWREDTailDropPkt64=oacQosWREDTailDropPkt64, oacQosMatchStatsTable=oacQosMatchStatsTable, oacQosClassMapRemarkedByte64=oacQosClassMapRemarkedByte64, oacQosWREDClassConfigMinThreshold=oacQosWREDClassConfigMinThreshold, oacQosMatchPreExecutePkt64=oacQosMatchPreExecutePkt64, oacQosQueueConfigTable=oacQosQueueConfigTable, oacQosPoliceConfigPeakBurstSize=oacQosPoliceConfigPeakBurstSize, oacQosPoliceExceedBitRate=oacQosPoliceExceedBitRate, oacQosPoliceViolatePkt64=oacQosPoliceViolatePkt64, oacQosClassMapName=oacQosClassMapName, QosQueueUnitType=QosQueueUnitType, oacQosPolicyMapConfigTable=oacQosPolicyMapConfigTable, oacQosPoliceConfigViolateSetValue=oacQosPoliceConfigViolateSetValue, oacQosSetConfigIpDSCPValue=oacQosSetConfigIpDSCPValue, oacQosPoliceViolateByte64=oacQosPoliceViolateByte64, oacQosQueueDiscardByte64=oacQosQueueDiscardByte64, oacQosWREDRandomDropPkt64=oacQosWREDRandomDropPkt64, oacQosPoliceActionConfigEntry=oacQosPoliceActionConfigEntry, oacQosMatchConfigTable=oacQosMatchConfigTable, oacQosPolicyMapName=oacQosPolicyMapName, oacQosPoliceStatsTable=oacQosPoliceStatsTable, oacQosQueueConfigQueueLimitUnits=oacQosQueueConfigQueueLimitUnits, oacQosWREDAverageQueueSize=oacQosWREDAverageQueueSize, oacQosPoliceConformByte64=oacQosPoliceConformByte64, oacQosPoliceActionConfigTable=oacQosPoliceActionConfigTable, oacQosClassMapDropPkt64=oacQosClassMapDropPkt64, oacQosQueueStatsEntry=oacQosQueueStatsEntry, oacQosClassMapPreExecutePkt64=oacQosClassMapPreExecutePkt64, oacQosSetConfigQosGroupValue=oacQosSetConfigQosGroupValue, oacQosPoliceConformPkt64=oacQosPoliceConformPkt64, oacQosQueueConfigFlowBasedEnabled=oacQosQueueConfigFlowBasedEnabled, QosQueueDepth=QosQueueDepth, oacQosPolicyDirection=oacQosPolicyDirection, oacQosWREDTransmitByte64=oacQosWREDTransmitByte64, oacQosMatchStatsEntry=oacQosMatchStatsEntry, oacQosPoliceConfigCir64=oacQosPoliceConfigCir64, oacQosWREDTailDropByte64=oacQosWREDTailDropByte64, oacQosClassMapStatsEntry=oacQosClassMapStatsEntry, oacQosMatchInfo=oacQosMatchInfo, oacQosClassMapRemarkedPkt=oacQosClassMapRemarkedPkt, oacQosWREDTransmitPkt=oacQosWREDTransmitPkt, oacQosQueueConfigBandwidthUnits=oacQosQueueConfigBandwidthUnits, oacQosClassMapConfigEntry=oacQosClassMapConfigEntry, oacQosInterfacePolicyIndex=oacQosInterfacePolicyIndex, oacQosSetConfigFeature=oacQosSetConfigFeature, oacQosInterfacePolicyTable=oacQosInterfacePolicyTable, oacQosQueueConfigEntry=oacQosQueueConfigEntry, oacQosWREDConfigECNEnabled=oacQosWREDConfigECNEnabled, oacQosPoliceExceedByte=oacQosPoliceExceedByte, oacQosClassMapRemarkedByte=oacQosClassMapRemarkedByte, oacQosClassMapPreExecuteByte64=oacQosClassMapPreExecuteByte64, oacQosPoliceActionConfigIndex=oacQosPoliceActionConfigIndex, oacQosQueueCurrentQDepth=oacQosQueueCurrentQDepth, oacQosClassMapStatsTable=oacQosClassMapStatsTable, oacQosMatchPreExecuteBitRate=oacQosMatchPreExecuteBitRate, oacQosPoliceConformBitRate=oacQosPoliceConformBitRate, oacQosWREDECNMarkPkt64=oacQosWREDECNMarkPkt64, oacQosQueueDiscardPkt=oacQosQueueDiscardPkt, oacQosServicePolicyEntry=oacQosServicePolicyEntry, oacQosPoliceActionConfigExceed=oacQosPoliceActionConfigExceed, oacQosWREDECNMarkPkt=oacQosWREDECNMarkPkt, oacQosClassMapPostExecuteByte=oacQosClassMapPostExecuteByte, PYSNMP_MODULE_ID=oacQOS, oacQosMatchPreExecuteByte64=oacQosMatchPreExecuteByte64, oacQosPoliceConfigExceedSetValue=oacQosPoliceConfigExceedSetValue, QosClassInfo=QosClassInfo, oacQosQueueConfigQueueLimit=oacQosQueueConfigQueueLimit, oacQosWREDClassStatsEntry=oacQosWREDClassStatsEntry, oacQosPoliceConformByte=oacQosPoliceConformByte, oacQosParentObjectsIndex=oacQosParentObjectsIndex, oacQosQueueConfigFlowBasedQNumber=oacQosQueueConfigFlowBasedQNumber, oacQosClassMapDropByte64=oacQosClassMapDropByte64, oacQosWREDAverageQueueSizeUnits=oacQosWREDAverageQueueSizeUnits, oacQosClassMapDropBitRate=oacQosClassMapDropBitRate, oacQosSetConfigIpPrecedenceValue=oacQosSetConfigIpPrecedenceValue, oacQosQueueStatsTable=oacQosQueueStatsTable, oacQOS=oacQOS, oacQosWREDECNMarkByte=oacQosWREDECNMarkByte, oacQosPoliceConfigCir=oacQosPoliceConfigCir, oacQosPoliceViolatePkt=oacQosPoliceViolatePkt, oacQosObjectsTable=oacQosObjectsTable, oacQosClassMapInfo=oacQosClassMapInfo, oacQosObjectsIndex=oacQosObjectsIndex, oacQosPoliceConfigExceedAction=oacQosPoliceConfigExceedAction, oacQosWREDClassConfigEntry=oacQosWREDClassConfigEntry, oacQosPoliceConfigViolateAction=oacQosPoliceConfigViolateAction, oacQosClassMapDropPkt=oacQosClassMapDropPkt, oacQosClassMapPreExecuteByte=oacQosClassMapPreExecuteByte, oacQosWREDTransmitPkt64=oacQosWREDTransmitPkt64, oacQosWREDRandomDropByte=oacQosWREDRandomDropByte, oacQosWREDRandomDropByte64=oacQosWREDRandomDropByte64, oacQosWREDTailDropPkt=oacQosWREDTailDropPkt, oacQosMatchConfigEntry=oacQosMatchConfigEntry, oacQosQueueDiscardPkt64=oacQosQueueDiscardPkt64, oacQosQueueMaxQDepth=oacQosQueueMaxQDepth, oacQosPoliceExceedPkt64=oacQosPoliceExceedPkt64, oacQosInterfacePolicyEntry=oacQosInterfacePolicyEntry, oacQosWREDConfigTable=oacQosWREDConfigTable, oacQosWREDClassConfigMaxThreshold=oacQosWREDClassConfigMaxThreshold, oacQosWREDClassStatsTable=oacQosWREDClassStatsTable, oacQosWREDConfigPktDropProb=oacQosWREDConfigPktDropProb, oacQosClassMapConfigTable=oacQosClassMapConfigTable, oacQosQueueConfigPrioBurstSize=oacQosQueueConfigPrioBurstSize, oacQosPoliceConfigConformBurstSize=oacQosPoliceConfigConformBurstSize, oacQosConfigIndex=oacQosConfigIndex, PoliceAction=PoliceAction, oacQosWREDClassConfigThresholdUnit=oacQosWREDClassConfigThresholdUnit, oacQosQueueConfigPriorityEnabled=oacQosQueueConfigPriorityEnabled, oacQosWREDTransmitByte=oacQosWREDTransmitByte, oacQosPoliceActionConfigViolateSetValue=oacQosPoliceActionConfigViolateSetValue, oacQosPoliceExceedPkt=oacQosPoliceExceedPkt, oacQosPoliceActionConfigConformSetValue=oacQosPoliceActionConfigConformSetValue, oacQosPolicyIndex=oacQosPolicyIndex, oacQosWREDRandomDropPkt=oacQosWREDRandomDropPkt, oacQosSetConfigDiscardClassValue=oacQosSetConfigDiscardClassValue, QosMatchInfo=QosMatchInfo, oacQosPoliceViolateBitRate=oacQosPoliceViolateBitRate, oacQosWREDValue=oacQosWREDValue, oacQosWREDECNMarkByte64=oacQosWREDECNMarkByte64, WREDMechanism=WREDMechanism, oacQosClassMapRemarkedPkt64=oacQosClassMapRemarkedPkt64, TrafficDirection=TrafficDirection, oacQosClassMapDropByte=oacQosClassMapDropByte, oacQosPoliceConfigConformAction=oacQosPoliceConfigConformAction, oacQosPoliceActionConfigConform=oacQosPoliceActionConfigConform, QosObjectType=QosObjectType, oacQosMatchPreExecutePkt=oacQosMatchPreExecutePkt, oacQosPoliceStatsEntry=oacQosPoliceStatsEntry, oacQosClassMapPreExecuteBitRate=oacQosClassMapPreExecuteBitRate, oacQosSetConfigTable=oacQosSetConfigTable, oacQosClassMapPostExecuteByte64=oacQosClassMapPostExecuteByte64, oacQosIfType=oacQosIfType, oacQosWREDConfigDscpPrecQosGroup=oacQosWREDConfigDscpPrecQosGroup, oacQosMatchPreExecuteByte=oacQosMatchPreExecuteByte)
