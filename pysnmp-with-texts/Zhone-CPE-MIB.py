#
# PySNMP MIB module Zhone-CPE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Zhone-CPE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:52:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, IpAddress, Integer32, ObjectIdentity, Unsigned32, Bits, TimeTicks, Counter32, Gauge32, Counter64, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "IpAddress", "Integer32", "ObjectIdentity", "Unsigned32", "Bits", "TimeTicks", "Counter32", "Gauge32", "Counter64", "MibIdentifier", "iso")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
zhoneZAP, zhoneApon, zhoneGpon, zhoneRegPls, zhoneZplex, zhoneZmsProduct, zhoneRegMux, zhoneAtm, zhoneModules, zhoneRegCpe, zhoneVideo, zhoneRegWtn, zhoneWtn, zhoneMasterAgent, zhoneIma, zhoneVoip, zhoneClass5, sipCommonMIB, zhoneVoice, zhoneIsdn, zhoneSs7, zhoneWdm, zhoneVoiceStats, zhoneDs3Ext, efmOamMIB, zhoneShelf, zhoneSystem, zhoneInterfaceGroup, zhoneShelfSlotGroup, sipTC, zhoneIp, zhoneCes, efmCuMIB, zhoneInterfaceTranslation, zhoneRadio, zhoneLineTypes, zhoneRegMalc, zhoneVdsl, zhoneSubscriber, zhoneDsl, zhoneShelfIndex, zhoneConsole, zhoneDsx, zhoneZedge, zhoneTrapModules, zhoneGroups, zhoneCard, apsMIB, zhoneBonding, sipUAMIB, zhoneRegSechtor, zhoneGenWtn, zhoneSlotIndex, zhoneOcx, pktcIetfSigMib, zhonePpp, zhoneBridge, zhoneCpe, sechtor100, zhonePls, sechtor300, zhoneMalc, zhoneEnet, zhoneDrafts, zhoneSonet, zhoneShelfSlotCompliance = mibBuilder.importSymbols("Zhone", "zhoneZAP", "zhoneApon", "zhoneGpon", "zhoneRegPls", "zhoneZplex", "zhoneZmsProduct", "zhoneRegMux", "zhoneAtm", "zhoneModules", "zhoneRegCpe", "zhoneVideo", "zhoneRegWtn", "zhoneWtn", "zhoneMasterAgent", "zhoneIma", "zhoneVoip", "zhoneClass5", "sipCommonMIB", "zhoneVoice", "zhoneIsdn", "zhoneSs7", "zhoneWdm", "zhoneVoiceStats", "zhoneDs3Ext", "efmOamMIB", "zhoneShelf", "zhoneSystem", "zhoneInterfaceGroup", "zhoneShelfSlotGroup", "sipTC", "zhoneIp", "zhoneCes", "efmCuMIB", "zhoneInterfaceTranslation", "zhoneRadio", "zhoneLineTypes", "zhoneRegMalc", "zhoneVdsl", "zhoneSubscriber", "zhoneDsl", "zhoneShelfIndex", "zhoneConsole", "zhoneDsx", "zhoneZedge", "zhoneTrapModules", "zhoneGroups", "zhoneCard", "apsMIB", "zhoneBonding", "sipUAMIB", "zhoneRegSechtor", "zhoneGenWtn", "zhoneSlotIndex", "zhoneOcx", "pktcIetfSigMib", "zhonePpp", "zhoneBridge", "zhoneCpe", "sechtor100", "zhonePls", "sechtor300", "zhoneMalc", "zhoneEnet", "zhoneDrafts", "zhoneSonet", "zhoneShelfSlotCompliance")
ZhoneRowStatus, ZhoneAlarmSeverity, ZhoneEnabledFlag, ZhoneAdminString, ZhoneAdminState = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus", "ZhoneAlarmSeverity", "ZhoneEnabledFlag", "ZhoneAdminString", "ZhoneAdminState")
zhoneCpeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 118))
zhoneCpeMIB.setRevisions(('2014-05-05 11:09', '2014-04-18 18:44', '2014-04-22 15:49', '2014-03-21 11:35', '2014-03-13 16:36', '2014-03-10 11:27', '2014-03-07 13:15', '2014-03-05 11:38', '2014-02-24 13:07', '2014-02-03 12:52', '2014-01-24 15:31', '2013-12-16 08:17', '2013-12-04 13:35', '2013-11-18 16:19', '2013-09-24 14:35', '2013-08-19 14:47', '2013-08-07 10:54', '2013-07-25 13:40', '2013-07-18 08:54', '2013-06-27 23:26', '2013-06-24 11:43', '2013-06-23 23:58', '2013-06-06 18:55', '2013-06-06 11:26', '2013-06-06 10:03', '2013-06-04 23:14', '2013-05-15 09:35', '2013-04-22 12:46', '2013-04-11 14:16', '2013-03-18 11:51', '2013-03-01 14:17', '2013-01-11 23:10', '2012-12-18 10:18', '2013-01-02 18:30', '2012-11-19 12:29', '2012-10-31 06:49', '2012-09-24 10:48', '2012-08-05 23:50', '2012-07-12 14:37', '2012-07-03 09:57', '2012-06-21 12:02', '2012-06-20 09:52', '2012-06-12 11:57', '2012-05-20 23:49', '2012-05-09 16:26', '2012-04-30 09:52', '2012-04-25 10:24', '2012-04-20 22:45', '2012-04-12 16:15', '2012-03-28 10:52', '2012-03-26 09:58', '2012-03-19 10:43', '2012-02-13 15:49', '2012-01-28 10:47', '2011-11-11 15:05', '2011-09-23 14:04', '2011-09-08 14:16', '2011-07-12 15:17', '2011-07-05 14:15', '2011-06-16 11:18', '2011-06-03 01:04', '2011-05-23 09:25', '2011-05-18 00:15', '2011-04-27 10:14', '2011-04-12 15:36', '2011-03-28 10:07', '2011-03-01 10:29', '2011-02-18 14:51', '2011-02-03 10:48', '2011-01-19 14:20', '2011-01-20 12:01', '2011-01-12 14:01', '2010-12-17 10:02', '2010-12-09 12:51',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneCpeMIB.setRevisionsDescriptions(('Adding ProfileName field to zhoneCpeAutoCfgRule', 'Increased voip subscriber username size from 25 to 50.', 'Add fields to cpeServiceApplication and cpeCmd', 'Added a comment in the description for zhoneCpeSystemMgcpClientName.', 'Added cpe-cfg-global-settings profile.', 'Fix bugs in auto-cfg-rule', 'Add cpe service template objects to CpeCmd table', 'Added the following new fields to the zhoneCpeOnuModelInfoTable: zhoneCpeOnuSipSupported zhoneCpeOnuH248Supported zhoneCpeOnuMgcpSupported zhoneCpeOnuT1Supported zhoneCpeOnuSE1Supported zhoneCpeOnuNumberofPoePorts', 'Add auto-cfg-rule', 'Added cpe-lldp-med-policy-list and cpe-lldp-med-policy, as well as adding a field to cpe-eth-subscriber.', 'Fix indexes for *EntryIndexNext. Correct index for condDhcp table.', 'Add zhoneCpeCmd objects', 'Changed the range value for the following objects: 1. zhoneCpeSystemCommonPowerShutdownDelay 2. zhoneCpeSystemCommonPowerRestoreDelay ', 'Added field Permanent to zhoneCpeCondDhcpSrv', 'Changed the default values for the following: 1.zhoneCpeEthSubscriberPowerShed 2.zhoneCpeEthSubscriberPowerRange ', 'Add tftp download to onu model info table', 'Added the following to the zhoneCpeEthSubscriberTable: zhoneCpeEthSubscriberPowerShed zhoneCpeEthSubscriberPowerRange Added the following fields to the zhoneCpeSystemCommonTable: zhoneCpeSystemCommonPowerSupply zhoneCpeSystemCommonPowerShutdownDelay zhoneCpeSystemCommonPowerRestoreDelay ', 'Increased voip subscriber password size from 25 to 32.', "Removed default values for cpe-system-common's acs-username and acs-password.", 'Changed max value of warmLineTimer to 30000', 'Add cpe-cond-dhcp-srv and cpe-cond-dhcp-srv-list', 'Added range as 200..5000 and default value as 200 for WarmLineTimer.', '1. Added the following objects to the zhoneCpeVoipServerTable. zhoneCpeVoipMgcpClientAddressMode zhoneCpeVoipMgcpPersistentNotify 2. Added zhoneCpeSystemMgcpClientName to the zhoneCpeSystemTable. 3. Added zhoneCpeVoipSubscriberPhoneFollowsWan to the zhoneCpeVoipSubscriberTable.', "Set zhoneCpeIpServer dns-type default value from 'proxy' to 'default'", 'Changing 54g rate in zhoneCpeWlanAdvanced to auto instead of 1m.', 'Added hotLine,hotLineNumber, and warmLineTimer in cpe voip features profile', 'Added a new tpType for mgcp Added mgcp to the list zhoneCpeVoipServerSignallingProtocol', 'Add MGMT tpType', 'Added peak-burst-size field to the cpe-traffic-management profile', 'Added zhoneCpeVoipSipRegRetryTime to the zhoneCpeVoipServerTable.', 'Added the following new fields to the zhoneCpeSystemCommonTable: 1. zhoneCpeSystemCommonAdminPassword 2. zhoneCpeSystemCommonSupportPassword 3. zhoneCpeSystemCommonUserPassword', 'Split cpe-wlan into cpe-wlan and cpe-wlan-advanced', 'Add guided vlan/cos to cpe-connection', 'Add cpeDnsHost and cpeDnsHostList. Add fields to cpe-ip-server and cpe-system-common.', 'Added the following objects to the zhoneCpeOnuModelInfoTable: zhoneCpeOnuNumberOfWlanPorts zhoneCpeOnuModelInfoRg zhoneCpeOnuModelInfoRgVoip zhoneCpeOnuModelInfoRgPwe', 'Add tr69TerminationPoint to tpType', 'Changed the maximum length of zhoneCpePppoeUsername from 25 to 64.', 'Added zhoneCpeServiceApplicationTable.', 'Added range for zhoneCpePppoeRetryInterval.', 'Fixed defaut values for the objects in the following tables: 1. zhoneCpeInterfaceVlanTable. 2. zhoneCpeDhcpServerTable. 3. zhoneCpeStaticRouteTable. 4. zhoneCpePortFwdTable. 5. zhoneCpeWlanTable.', '1. Fixed the range limits for the objects in the following table: 1. zhoneCpeInterfaceVlanTable. 2. zhoneCpeWlanTable. 3. zhoneCpeDhcpServerTable. 4. zhoneCpeStaticRouteTable. 5. zhoneCpePortFwdTable. 2. Changed the name of zhoneCpePortForwardingProfileIndex to zhoneCpePortFwdListProfileIndex. 3. Changed zhoneCpeIpServerNat type from ZhoneEnabledFlag to INTEGER. 4. Moved 2 objects from zhoneCpeInterfaceVlanTable to zhoneCpeIpServerTable. 5. Added zhoneCpeConnectionRgMode.', 'Update the limits for the objects zhoneCpeWlanIndex, zhoneCpePortFwdListIndex, zhoneCpePortFwdEntryIndex.', 'Fix the lower index values for the objects in the zhoneCpeOnuModelInfoTable.', 'Added rtpDscp & SignalingDscp fields to cpeVoipServer Added DSCP field to cpePwe table.', 'Changed lower limit of zhoneCpeSystemCommonIndex to 1 Changed lower limit of zhoneCpeDhcpServerIndex to 1 Added the following new tables: 1. zhoneCpePppoeTable 2. zhoneCpeWlanSubscriberTable 3. zhoneCpeWlan 4. zhoneCpeStaticRouteList 5. zhoneCpeStaticRoute 6. zhoneCpePortFwdList 7. zhoneCpePortFwd', 'Made zhoneCpeInterfaceVlanIpAddress a quick access field.', '1. Changed the name of the object zhoneCpeInterfaceVlanConnectionType to zhoneCpeInterfaceVlanRgMode 2. Added a new object zhoneCpeInterfaceVlanIgmpFunction to the zhoneCpeInterfaceVlanTable. 3. Added default value for the object zhoneCpeDhcpServerLeaseTime. 4. Fixed descriptions for a few objects. 5. Fixed name mismatch for the objects in the zhoneCpeInterfaceVlanTable.', 'Added default value for zhoneCpeInterfaceTranslateSlanTpId. Added range for zhoneCpeDhcpServerIndex and zhoneCpeSystemCommonIndex.', 'Add new tpTypes and modelInfo column for RG-bridged.', 'Added zhoneCpeDhcpServerProfileIndex and zhoneCpePortForwardingProfileIndex objects to the zhoneCpeInterfaceVlanTable. Added ranges for the objects zhoneCpeSystemCommonProfileIndex zhoneCpeIpServerProfile zhoneCpeStaticRouteListProfileIndex', 'Removed zhoneCpeDhcpServerProfileIndex and zhoneCpePortForwardingProfileIndex objects from the zhoneCpeIpServerTable', 'Added new objects to the zhoneCpeIpServerTable Added the following new tables: zhoneCpeSystemTable zhoneCpeSystemCommon zhoneCpeInterfaceVlanTable zhoneCpeDhcpServer', 'Added the following 2 objects to the zhoneCpeVoipServerTable. 1. zhoneCpeVoipDtmfEventsPassingMethod 2. zhoneCpeVoipCasEventsPassingMethod', 'Added LineStatusAlarm and AlarmSeverity fields in cpeEthSubscriber, cpeRfSubscriber and cpePweSubscriber profiles.', 'add outboundServer and portId to voip server.', 'Added dscpToCos field to CpeConnection.', 'Changed the min value of zhoneCpeVoipServerProfileIndex to 1. Removed the default value.', 'Fix the enum value change error for the object zhoneCpeVoipCodecSelectionThirdOrder.', 'Changed the limits for zhoneCpeTpIndex.', 'Changed the default values in the zhoneCpePweTable for the following fields: 1.zhoneCpePweTimingMode 2.zhoneCpePweJitterBufMax 3.zhoneCpePweJitterBufDesired 4.zhoneCpePweChannelAssign', 'Changed zhoneCpeVideoAccessControlIndexNext as table.', 'Added Quick Access for the object zhoneCpeVideoAccessControlList. Added ranges for the object zhoneCpeGemPort. Changed one of the enum names for zhoneCpePweSignalling.', 'Changed zhoneCpeSipDialPlanIndexNext as table entry.', "Changed the default value of zhoneCpeVideoProfileIndex to 0. Added default value to the MIB object zhoneCpePweChannelAssign. Added description to the BIT's field objects in the zhoneCpeVoipFeaturesTable. Changed description for zhoneCpePweSubscriberNearEndPort and zhoneCpePweSubscriberFarEndPort.", 'Remove the MIB object zhoneCpeSipServerIndexNext', 'Changed the description for some fields in the zhoneCpePweTable. Changed the range for zhoneCpeVoipSubscriberDisplayName to 0 to 25. Changed the default values for the objects in the zhoneCpeConnectionTable. Changed the maximum value for the following objects to 1310720kbps 1.zhoneCpeTrafficManagementUpstreamSIR 2.zhoneCpeTrafficManagementUpstreamPIR 3.zhoneCpeTrafficManagementDownstreamSIR 4.zhoneCpeTrafficManagementDownstreamPIR', '1.Changed the lower limit for the object zhoneCpeVoipMgcTerminationIdBase to 0. 2.Added a new table zhoneCpeTrafficManagement. 3.Removed the zhoneCpePots profile and added the objects to the zhoneCpeVoipSubscriber profile. 4.Removed the zhoneCpeEth profile and added the objects to the zhoneCpeEthSubscriber and zhoneCpeTrafficManagement profile. 5.Removed 15 objects from the zhoneCpePwe profile. 6.Removed zhoneCpeCes profile and added the objects to the zhoneCpePwe and zhoneCpePweSubscriber profile. ', '1.Changed the default value of zhoneCpeIpServerNetmask to ffffff00. 2.Changed the default value of zhoneCpeVoipFeaturesAnnouncementType to reordertone. 3.Changed the MIB object zhoneCpePweLossPktClearPolicy name to zhoneCpePweLossPacketClearPolicy. 4.Changed the default value of zhoneCpePwePtypePayload to 96. 5.Changed the range of zhoneCpePwePtypeSignalling to 0 to 127. 6.Added zhoneCpeSipDialPlanIndexNext to the zhoneCpeSipDialPlanTable.', '1.Added a new table zhoneCpeRfSubscriberTable. 2.Changed the default value of the CpeIpServerProfileIndex to 1.', 'Object name correction for zhoneCpePweSignaling and zhoneCpeVoipServerSignalingProtocol', 'Move connection table from phyGPON (gponOnuConnection) to this mib (cpeConnection).', 'Added the following new tables: 1.zhoneCpeEthSubscriberTable 2.zhoneCpeEthTable 3.zhoneCpeVideoTable 4.zhoneCpeVideoAccessControlTable 5.zhoneCpePweSubscriberTable 6.zhoneCpePweTable 7.zhoneCpeCesTable 8.zhoneCpeOnuModelInfoTable Also added IndexNext as below: 1.zhoneCpeSipDialPlan 2.ZhoneCpeVoipServer 3.zhoneCpeIpServer 4.zhoneCpeVoipFeatures 5.zhoneCpeVoipMedia 6.zhoneCpePots 7.zhoneCpeEth 8.zhoneCpeVideo 9.zhoneCpeVideoAccessControl 10.zhoneCpePwe 11.zhoneCpeCes', 'Changed the storage label and profile label for the object zhoneCpeIpServer.', 'New MIB to support CPE voice and pseudo wire objects.',))
if mibBuilder.loadTexts: zhoneCpeMIB.setLastUpdated('201404221340Z')
if mibBuilder.loadTexts: zhoneCpeMIB.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhoneCpeMIB.setContactInfo('Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com ')
if mibBuilder.loadTexts: zhoneCpeMIB.setDescription('This is the Zhone CPE mib which contains SNMP objects for the CPE voice and pseudowire.')
class TpType(TextualConvention, Integer32):
    description = 'Valid termination points on CPE devices.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("physicalPathTerminationPointEthernetUNI", 1), ("interworkingVCCTerminationPoint", 2), ("mapperServiceProfile", 3), ("ipHostConfigData", 4), ("gemInterworkingTerminationPoint", 5), ("multicastGEMInterworkingTerminationPoint", 6), ("physicalPathTerminationPointxDSLUNIPartOne", 7), ("physicalPathTerminationPointVDSLUNI", 8), ("ethernetFlowTerminationPoint", 9), ("physicalPathTerminationPointUNI", 10), ("physicalPathTerminationPointRFvideoUNI", 11), ("physicalPathTerminationPointIPTVUNI", 12), ("h248VoiceTerminationPoint", 13), ("sipVoiceTerminationPoint", 14), ("sipPlarVoiceTerminationPoint", 15), ("pweTerminationPoint", 16), ("virtualEthernetInterfacePoint", 17), ("dot11TerminationPoint", 18), ("fiberLanTerminationPoint", 19), ("tr69TerminationPoint", 20), ("mgmtTerminationPoint", 21), ("mgcpVoiceTerminationPoint", 22))

class ZhoneCpeTemplateType(TextualConvention, Integer32):
    description = 'Specifies TemplateType as voip/pwe/wifi/data/video.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(668, 669, 670, 671, 672))
    namedValues = NamedValues(("voip", 668), ("pwe", 669), ("wifi", 670), ("data", 671), ("video", 672))

zhoneCpeObjectID = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1))
zhoneCpeSipDialPlan = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1))
if mibBuilder.loadTexts: zhoneCpeSipDialPlan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlan.setDescription('Cpe Sip Dial plan for the VoIP feature.')
zhoneCpeSipDialPlanIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 1), )
if mibBuilder.loadTexts: zhoneCpeSipDialPlanIndexTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanIndexTable.setDescription('Table of next available index values for each CPE SIP Dialplan group.')
zhoneCpeSipDialPlanIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 1, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeVoipServerIndex"))
if mibBuilder.loadTexts: zhoneCpeSipDialPlanIndexEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanIndexEntry.setDescription('Row in the zhoneCpeSipDialPlanIndexTable')
zhoneCpeSipDialPlanIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeSipDialPlanIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanIndexNext.setDescription('This represents the next available index value for SIP dial plan profile.')
zhoneCpeSipDialPlanTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 2), )
if mibBuilder.loadTexts: zhoneCpeSipDialPlanTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanTable.setDescription('Cpe Sip Dial plan table for the VoIP feature.')
zhoneCpeSipDialPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeSipServerIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeSipDialPlanIndex"))
if mibBuilder.loadTexts: zhoneCpeSipDialPlanEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanEntry.setDescription('Row in the CpeSipDialPlan table.')
zhoneCpeSipServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeSipServerIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipServerIndex.setDescription('This represents the SIP dial plan server index value.')
zhoneCpeSipDialPlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeSipDialPlanIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanIndex.setDescription('This represents the SIP dial plan index value.')
zhoneCpeSipDialPlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 2, 1, 3), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSipDialPlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeSipDialPlanFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("h248", 1), ("nsc", 2), ("vendorspecific", 3))).clone('h248')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSipDialPlanFormat.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanFormat.setDescription('DialPlanFormat defines the dial plan format standard that is supported in the ONT for VoIP.')
zhoneCpeSipDialPlanString = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSipDialPlanString.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanString.setDescription('SipDialPlan contains a dial plan used by the VoIP service.')
zhoneCpeVoipServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2))
if mibBuilder.loadTexts: zhoneCpeVoipServer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServer.setDescription('Cpe Voip Server for the VoIP feature.')
zhoneCpeVoipServerIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeVoipServerIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeVoipServerIndex when creating entries in the zhoneCpeVoipServerTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeVoipServerIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeVoipServerTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2), )
if mibBuilder.loadTexts: zhoneCpeVoipServerTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerTable.setDescription('Cpe Voip Server table for the VoIP feature.')
zhoneCpeVoipServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeVoipServerIndex"))
if mibBuilder.loadTexts: zhoneCpeVoipServerEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerEntry.setDescription('Row in the VoipServer table.')
zhoneCpeVoipServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeVoipServerIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerIndex.setDescription('This represents the CPE Voip Server Index value.')
zhoneCpeVoipServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeVoipProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipProfileName.setDescription('CPE Voip Server profile for the VoIP services for the dynamic bridging. This field is only writable upon creation and must be unique within its table. ')
zhoneCpeVoipPrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipPrimaryServer.setDescription('This attribute contains the name (IP address or resolved name) of the primary MGC or SIP proxy server that controls the signaling messages.')
zhoneCpeVoipSecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSecondaryServer.setDescription('This attribute contains the name (IP address or resolved name) of the secondary or backup MGC that controls the signalling messages.')
zhoneCpeVoipServerSignallingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sip", 1), ("sipplar", 2), ("h248", 3), ("mgcp", 4))).clone('h248')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipServerSignallingProtocol.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerSignallingProtocol.setDescription('This attribute specifies the VoIP signalling protocol to use.')
zhoneCpeVoipSipRegExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSipRegExpirationTime.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSipRegExpirationTime.setDescription('Sip Reg Expiration Time specifies the SIP registration expiration time in seconds. If its value is 0, the SIP agent does not add an expiration time to the registration requests and does not perform re-registration. The default value is 3600 seconds.')
zhoneCpeVoipSipReRegHeadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(360)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSipReRegHeadStartTime.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSipReRegHeadStartTime.setDescription('Sip ReReg Head Star Time specifies the time in seconds prior to timeout that causes the SIP agent to start the re-registration process. The default value is 360 seconds.')
zhoneCpeVoipSipDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSipDomain.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSipDomain.setDescription('This attribute contains the host or domain part of the SIP address of record for users connected to this ONT.')
zhoneCpeVoipSipRegistrar = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 10), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSipRegistrar.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSipRegistrar.setDescription('Sip Registrar points to a network address ME that contains the name (IP 25 address or resolved name) of the registrar server for SIP signalling messages.')
zhoneCpeVoipSoftSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 11), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSoftSwitch.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSoftSwitch.setDescription('Soft switch identifies the SIP gateway softswitch vendor. The format is four ASCII coded alphabetic characters [A..Z] as defined in ANSI T1.220. A 30 value of four null characters indicates no particular vendor.')
zhoneCpeVoipMgcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMgcVersion.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMgcVersion.setDescription('This integer attribute reports the version of the Megaco protocol in use.')
zhoneCpeVoipMgcMessageFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("long", 1), ("short", 2), ("binary", 3))).clone('long')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMgcMessageFormat.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMgcMessageFormat.setDescription('This attribute defines the message format.')
zhoneCpeVoipMgcMaximumRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMgcMaximumRetryTime.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMgcMaximumRetryTime.setDescription('This attribute specifies the maximum retry time for MGC transactions, in seconds. The default value 0 specifies vendor-specific implementation.')
zhoneCpeVoipMgcMaximumRetryAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMgcMaximumRetryAttempts.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMgcMaximumRetryAttempts.setDescription('This attribute specifies the maximum number of times a message is retransmitted to the MGC. The default value 0 specifies vendor specific implementation.')
zhoneCpeVoipMgcServiceChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMgcServiceChangeDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMgcServiceChangeDelay.setDescription('The attribute specifies the service status delay time for changes in line service status. This attribute is specified in seconds. The default value 0 specifies no delay.')
zhoneCpeVoipMgcTerminationIdBase = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMgcTerminationIdBase.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMgcTerminationIdBase.setDescription('The attribute specifies the base string for the H.248 physical termination id(s) for this ONT. This string is intended to uniquely identify an ONT. Vendor specific termination identifiers (i.e. port ids) are optionally added to this string to uniquely identify a termination on a specific ONT.')
zhoneCpeVoipReleaseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipReleaseTimer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipReleaseTimer.setDescription('This attribute contains a release timer defined in seconds. The value 0 specifies that the ONT is to use its internal default. The default value of this 45 attribute is 10 seconds.')
zhoneCpeVoipRohTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipRohTimer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipRohTimer.setDescription('This attribute defines the time in seconds for the receiver off hook condition before ROH tone is applied. The value 0 disables ROH timing. The default value is 15 seconds.')
zhoneCpeVoipDscpMark = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(46)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipDscpMark.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipDscpMark.setDescription('Diffserv code point to be used for outgoing RTP packets for this profile. The default value is expedited forwarding (EF) = 0x2E.')
zhoneCpeVoipPiggyBackEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 21), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipPiggyBackEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipPiggyBackEvents.setDescription('Enables or disables RTP piggyback events.')
zhoneCpeVoipOobToneEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 22), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipOobToneEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipOobToneEvents.setDescription('Enables or disables handling of tones via RTP tone events per RFC 4733.')
zhoneCpeVoipOobDtmfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 23), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipOobDtmfEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipOobDtmfEvents.setDescription('Enables or disables handling of DTMF via RTP DTMF events per RFC 4733.')
zhoneCpeVoipOobCasEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 24), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipOobCasEvents.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipOobCasEvents.setDescription('Enables or disables handling of CAS via RTP CAS events per RFC 4733.')
zhoneCpeVoipPartialDialTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(16000)).setUnits('milli seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipPartialDialTimeout.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipPartialDialTimeout.setDescription('This attribute defines the partial dial timeout for digit map processing in milliseconds. The default value is 16000 ms.')
zhoneCpeVoipCriticalDialTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4000)).setUnits('milli seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCriticalDialTimeout.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCriticalDialTimeout.setDescription('This attribute defines the critical dial timeout for digit map processing in milliseconds. The default value is 4000 ms.')
zhoneCpeVoipServerOutboundServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 27), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipServerOutboundServer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerOutboundServer.setDescription('This attribute contains the name (IP address or resolved name) of the outbound proxy server for SIP signalling messages.')
zhoneCpeVoipServerPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipServerPortId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerPortId.setDescription('This attribute specifies the TCP/UDP port number of the VoIP protocol. The default value -1 select the default port number for the VoIP protocol. It is 2944 for H.248 and 5060 for SIP. ')
zhoneCpeVoipDtmfEventsPassingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfc4733", 1), ("sipinfo", 2))).clone('rfc4733')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipDtmfEventsPassingMethod.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipDtmfEventsPassingMethod.setDescription('If zhoneCpeVoipOobDtmfEvents is disabled, dtmp digits are carried along the voice path. If zhoneCpeVoipOobDtmfEvents = enabled, we look at the dtmf-events-passing-method. If zhoneCpeVoipDtmfEventsPassingMethod = rfc4733, dtmf digits are carried in the RTP payload. If zhoneCpeVoipDtmfEventsPassingMethod = sip-info, dtmf digits are carried along the signalling path in the INFO messages.')
zhoneCpeVoipCasEventsPassingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfc4733", 1), ("sipinfo", 2))).clone('rfc4733')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCasEventsPassingMethod.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCasEventsPassingMethod.setDescription('If zhoneCpeVoipOobCasEvents is disabled, dtmp digits are carried along the voice path. If zhoneCpeVoipOobCasEvents = enabled, we look at the dtmf-events-passing-method. If zhoneCpeVoipCasEventsPassingMethod = rfc4733, dtmf digits are carried in the RTP payload. If zhoneCpeVoipCasEventsPassingMethod = sip-info, dtmf digits are carried along the signalling path in the INFO messages.')
zhoneCpeVoipRtpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)).clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipRtpDscp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipRtpDscp.setDescription('This parameter indicates DSCP value for cpe voip rtp traffic. Valid code values: <0-63> Differentiated services codepoint value af11 Mark packets with AF11 dscp (001010) af12 Mark packets with AF12 dscp (001100) af13 Mark packets with AF13 dscp (001110) af21 Mark packets with AF21 dscp (010010) af22 Mark packets with AF22 dscp (010100) af23 Mark packets with AF23 dscp (010110) af31 Mark packets with AF31 dscp (011010) af32 Mark packets with AF32 dscp (011100) af33 Mark packets with AF33 dscp (011110) af41 Mark packets with AF41 dscp (100010) af42 Mark packets with AF42 dscp (100100) af43 Mark packets with AF43 dscp (100110) cs1 Mark packets with CS1(precedence 1) dscp (001000) cs2 Mark packets with CS2(precedence 2) dscp (010000) cs3 Mark packets with CS3(precedence 3) dscp (011000) cs4 Mark packets with CS4(precedence 4) dscp (100000) cs5 Mark packets with CS5(precedence 5) dscp (101000) cs6 Mark packets with CS6(precedence 6) dscp (110000) cs7 Mark packets with CS7(precedence 7) dscp (111000) default Mark packets with default dscp (000000) ef Mark packets with EF dscp (101110) ')
zhoneCpeVoipSignalingDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)).clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSignalingDscp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSignalingDscp.setDescription('This parameter indicates DSCP value for cpe voip signaling traffic. Valid code values: <0-63> Differentiated services codepoint value af11 Mark packets with AF11 dscp (001010) af12 Mark packets with AF12 dscp (001100) af13 Mark packets with AF13 dscp (001110) af21 Mark packets with AF21 dscp (010010) af22 Mark packets with AF22 dscp (010100) af23 Mark packets with AF23 dscp (010110) af31 Mark packets with AF31 dscp (011010) af32 Mark packets with AF32 dscp (011100) af33 Mark packets with AF33 dscp (011110) af41 Mark packets with AF41 dscp (100010) af42 Mark packets with AF42 dscp (100100) af43 Mark packets with AF43 dscp (100110) cs1 Mark packets with CS1(precedence 1) dscp (001000) cs2 Mark packets with CS2(precedence 2) dscp (010000) cs3 Mark packets with CS3(precedence 3) dscp (011000) cs4 Mark packets with CS4(precedence 4) dscp (100000) cs5 Mark packets with CS5(precedence 5) dscp (101000) cs6 Mark packets with CS6(precedence 6) dscp (110000) cs7 Mark packets with CS7(precedence 7) dscp (111000) default Mark packets with default dscp (000000) ef Mark packets with EF dscp (101110) ')
zhoneCpeVoipSipRegRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSipRegRetryTime.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSipRegRetryTime.setDescription('Sip Reg Retry Time specifies the SIP registration retry time in seconds. The default value is 60 seconds.')
zhoneCpeVoipMgcpClientAddressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("ipBracketed", 2), ("domainName", 3))).clone('ip')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMgcpClientAddressMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMgcpClientAddressMode.setDescription('Ip and IpBracketed will cause the MGCP Client name to be the bound voice host IP address. Domain Name will allow the user to input any text string, usally a Domain Name.')
zhoneCpeVoipMgcpPersistentNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 2, 2, 1, 35), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMgcpPersistentNotify.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMgcpPersistentNotify.setDescription('When enabled, all switchhook events will be forwarded to the switch immediately without regards to what the switch has requested. When disabled, the event that the switch has requested will be forwarded.')
zhoneCpeIpTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 3), )
if mibBuilder.loadTexts: zhoneCpeIpTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpTable.setDescription('Cpe Ip table for the VoIP feature.')
zhoneCpeIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 3, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeIpServiceType"))
if mibBuilder.loadTexts: zhoneCpeIpEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpEntry.setDescription('Row in the CpeIp table.')
zhoneCpeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneCpeIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIfIndex.setDescription('This represents the CPE Ip index value.')
zhoneCpeIpServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("voip", 1), ("pwe", 2), ("wifi", 3))))
if mibBuilder.loadTexts: zhoneCpeIpServiceType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServiceType.setDescription('This represents the CPE Ip service types.')
zhoneCpeIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 3, 1, 3), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeHostIp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeHostIp.setDescription('The address used for IP host services, this attribute has default value 0.0.0.0.')
zhoneCpeIpServerProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerProfileIndex.setDescription('This attribute points to the cpe-ip-server profile associated with this host IP. When cpe-ip profile is missing, use the default cpe-ip-server profile with DHCP enabled.')
zhoneCpeIpServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4))
if mibBuilder.loadTexts: zhoneCpeIpServer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServer.setDescription('Cpe Ip Server for the VoIP feature.')
zhoneCpeIpServerIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeIpServerIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeIpServerIndex when creating entries in the zhoneCpeIpServerTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeIpServerIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeIpServerTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3), )
if mibBuilder.loadTexts: zhoneCpeIpServerTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerTable.setDescription('Cpe Ip Server table for the VoIP feature.')
zhoneCpeIpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIpServerIndex"))
if mibBuilder.loadTexts: zhoneCpeIpServerEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerEntry.setDescription('Row in the CpeIpServer table.')
zhoneCpeIpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeIpServerIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerIndex.setDescription('This represents the CPE Ip server index value.')
zhoneCpeIpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeIpServerProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerProfileName.setDescription('CPE Ip server profile for the VoIP services for the dynamic bridging. This field is only writable upon creation and must be unique within its table.')
zhoneCpeIpServerHostIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("static", 2))).clone('dhcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerHostIpOption.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerHostIpOption.setDescription('This attribute selects an IP related option.')
zhoneCpeIpServerNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 5), IpAddress().clone(hexValue="ffffff00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerNetmask.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerNetmask.setDescription('The subnet mask for IP host services.')
zhoneCpeIpServerGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerGateway.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerGateway.setDescription('The default gateway address used for IP host services, this attribute has the default value 0.0.0.0.')
zhoneCpeIpServerPrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerPrimaryDns.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerPrimaryDns.setDescription('This attribute specifies the primary DNS IP address. If this value is 0.0.0.0, no primary SIP DNS is defined. The default value is 0.0.0.0')
zhoneCpeIpServerSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerSecondaryDns.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerSecondaryDns.setDescription('This attribute specifies the secondary DNS IP address. If this value is 0.0.0.0, no secondary SIP DNS is defined. The default value is 0.0.0.0.')
zhoneCpeIpServerFirewallAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 9), Bits().clone(namedValues=NamedValues(("http", 0), ("ping", 1), ("snmp", 2), ("snmptrap", 3), ("ssh", 4), ("telnet", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerFirewallAccess.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerFirewallAccess.setDescription('Lists the protocols allowed on this interface. The firewall option must be enabled before these settings will take effect.')
zhoneCpeIpServerNat = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nat", 1), ("napt", 2), ("disabled", 3))).clone('nat')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerNat.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerNat.setDescription('When it is enabled, NAT/NAPT function is performed to translate between the public IP address and the private addresses. It is only supported on a WAN interface.')
zhoneCpeIpServerSecureForward = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 11), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerSecureForward.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerSecureForward.setDescription('When this mode is enabled, packets are not flooded to all ports. Instead, all packets are forwarded to the port that is designated as the uplink port. In this mode, users are prevented from directly communicating with each other, and broadcast frames are discarded.')
zhoneCpeIpServerIgmpFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("snooping", 2), ("proxy", 3), ("snoopingproxy", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerIgmpFunction.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerIgmpFunction.setDescription('Enable an Igmp snooping function.')
zhoneCpeIpServerDefaultIface = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeIpServerDefaultIface.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerDefaultIface.setDescription('When true, an internally generated packet (e.g., from SNMP trap, SNTP, etc.) is sent out through this interface if the destination IP address is not defined in the route table. ')
zhoneCpeIpServerDnsSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeIpServerDnsSrc.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerDnsSrc.setDescription('When true, the Interface is used by the DHCP Client to obtain DNS information.')
zhoneCpeIpServerDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("static", 2), ("proxy", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeIpServerDnsType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerDnsType.setDescription('Default - Get the DNS information from the WAN interface Static - The DNS information is manually provisioned Proxy - Enable interface to act as a proxy for DNS requests ')
zhoneCpeVoipFeatures = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5))
if mibBuilder.loadTexts: zhoneCpeVoipFeatures.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeatures.setDescription('Cpe Voip Features for the VoIP feature.')
zhoneCpeVoipFeaturesIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeVoipFeaturesIndex when creating entries in the zhoneCpeVoipFeaturesTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeVoipFeaturesIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeVoipFeaturesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2), )
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesTable.setDescription('Cpe Voip Features table for the VoIP feature.')
zhoneCpeVoipFeaturesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeVoipFeaturesIndex"))
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesEntry.setDescription('Row in the CpeVoipFeatures table.')
zhoneCpeVoipFeaturesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesIndex.setDescription('This represents the CPE Voip Features index value.')
zhoneCpeVoipFeaturesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeVoipFeaturesProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesProfileName.setDescription('CPE Voip Media profile for the dynamic bridging VoIP services. This field is only writable upon creation and must be unique within its table.')
zhoneCpeVoipFeaturesAnnouncementType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("silence", 1), ("reordertone", 2), ("fastbusy", 3), ("voice", 4), ("notapplicable", 5))).clone('reordertone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesAnnouncementType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesAnnouncementType.setDescription('This attribute specifies the treatment when a subscriber goes off hook but does not attempt a call.')
zhoneCpeVoipCidFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 5), Bits().clone(namedValues=NamedValues(("callingnumber", 0), ("callingname", 1), ("cidblocking", 2), ("cidnumber", 3), ("cidname", 4), ("anonymouscidblocking", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCidFeatures.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCidFeatures.setDescription('This attribute contains a bit map of caller ID features. By default all the bits are set.')
zhoneCpeVoipCallWaitingFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 6), Bits().clone(namedValues=NamedValues(("callwaiting", 0), ("cidannouncement", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCallWaitingFeatures.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCallWaitingFeatures.setDescription('This attribute contains a bit map of call waiting features. By default all the bits are set.')
zhoneCpeVoipCallProgressOrTransferFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 7), Bits().clone(namedValues=NamedValues(("threeway", 0), ("calltransfer", 1), ("callhold", 2), ("callpark", 3), ("donotdisturb", 4), ("flashonemergency", 5), ("emergencyhold", 6), ("sixway", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCallProgressOrTransferFeatures.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCallProgressOrTransferFeatures.setDescription('This attribute is a bit map of call processing features. By default all the bits are set.')
zhoneCpeVoipCallPresentationFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 8), Bits().clone(namedValues=NamedValues(("msgwaitsplashring", 0), ("msgwaitspecialdialtone", 1), ("msgwaitvisual", 2), ("callfwd", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCallPresentationFeatures.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCallPresentationFeatures.setDescription('This attribute is a bit map of call presentation features. By default all the bits are set.')
zhoneCpeVoipFeaturesHotLine = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("hot", 2), ("warm", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesHotLine.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesHotLine.setDescription('When the hotline is hot, the phone will immediately dial the Hotline number. When the hotline is warm, the phone wait for the period specified in warmline-timer in ms before automatically dial the hotline number. ')
zhoneCpeVoipFeaturesHotLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesHotLineNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesHotLineNumber.setDescription('The number this phone will automatically dial, if hotline or warmline feature is enabled.')
zhoneCpeVoipFeaturesWarmLineTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 5, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 30000)).clone(200)).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesWarmLineTimer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesWarmLineTimer.setDescription('The wait period before a warmline automcatically dial the hotline number.')
zhoneCpeVoipMedia = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6))
if mibBuilder.loadTexts: zhoneCpeVoipMedia.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMedia.setDescription('Cpe Voip Media for the VoIP feature.')
zhoneCpeVoipMediaIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeVoipMediaIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeVoipMediaIndex when creating entries in the zhoneCpeVoipMediaTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeVoipMediaIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeVoipMediaTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2), )
if mibBuilder.loadTexts: zhoneCpeVoipMediaTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaTable.setDescription('Cpe Voip Media table for the VoIP feature.')
zhoneCpeVoipMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeVoipMediaIndex"))
if mibBuilder.loadTexts: zhoneCpeVoipMediaEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaEntry.setDescription('Row in the CpeVoipMedia table.')
zhoneCpeVoipMediaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeVoipMediaIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaIndex.setDescription('This represents the CPE Voip Media index value.')
zhoneCpeVoipMediaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMediaRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeVoipMediaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMediaProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaProfileName.setDescription('CPE Voip Media profile for the dynamic bridging VoIP services. This field is only writable upon creation and must be unique within its table.')
zhoneCpeVoipMediaEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 4), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMediaEchoCancel.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaEchoCancel.setDescription('This attribute turns on and off echo cancellation.')
zhoneCpeVoipFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passthrough", 1), ("t38", 2))).clone('passthrough')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipFaxMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFaxMode.setDescription('This attribute selects the fax mode.')
zhoneCpeVoipCodecSelectionFirstOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("pcmu", 1), ("gsm", 2), ("g723", 3), ("dvi4eightKHz", 4), ("dvi4sixteenKHz", 5), ("lpc", 6), ("pcma", 7), ("g722", 8), ("l16twochannels", 9), ("l16onechannel", 10), ("qcelp", 11), ("cn", 12), ("mpa", 13), ("g728", 14), ("dvi411", 15), ("dvi422", 16), ("g729", 17))).clone('pcmu')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCodecSelectionFirstOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCodecSelectionFirstOrder.setDescription('This attribute specifies codec selection as defined by RFC 3551.')
zhoneCpeVoipPacketPeriodSelectionFirstOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(10)).setUnits('milli seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipPacketPeriodSelectionFirstOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipPacketPeriodSelectionFirstOrder.setDescription('This attribute specifies the packet period selection interval in milliseconds. The default value is 10. Valid values are 10..30 ms.')
zhoneCpeVoipSilenceSuppressionFirstOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 8), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSilenceSuppressionFirstOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSilenceSuppressionFirstOrder.setDescription('This attribute specifies whether silence suppression is on or off.')
zhoneCpeVoipCodecSelectionSecondOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("pcmu", 1), ("gsm", 2), ("g723", 3), ("dvi4eightKHz", 4), ("dvi4sixteenKHz", 5), ("lpc", 6), ("pcma", 7), ("g722", 8), ("l16twochannels", 9), ("l16onechannel", 10), ("qcelp", 11), ("cn", 12), ("mpa", 13), ("g728", 14), ("dvi411", 15), ("dvi422", 16), ("g729", 17))).clone('pcmu')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCodecSelectionSecondOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCodecSelectionSecondOrder.setDescription('This attribute specifies codec selection as defined by RFC 3551.')
zhoneCpeVoipPacketPeriodSelectionSecondOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(10)).setUnits('milli seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipPacketPeriodSelectionSecondOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipPacketPeriodSelectionSecondOrder.setDescription('This attribute specifies the packet period selection interval in milliseconds. The default value is 10. Valid values are 10..30 ms.')
zhoneCpeVoipSilenceSuppressionSecondOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 11), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSilenceSuppressionSecondOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSilenceSuppressionSecondOrder.setDescription('This attribute specifies whether silence suppression is on or off.')
zhoneCpeVoipCodecSelectionThirdOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("pcmu", 1), ("gsm", 2), ("g723", 3), ("dvi4eightKHz", 4), ("dvi4sixteenKHz", 5), ("lpc", 6), ("pcma", 7), ("g722", 8), ("l16twochannels", 9), ("l16onechannel", 10), ("qcelp", 11), ("cn", 12), ("mpa", 13), ("g728", 14), ("dvi411", 15), ("dvi422", 16), ("g729", 17))).clone('pcmu')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCodecSelectionThirdOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCodecSelectionThirdOrder.setDescription('This attribute specifies codec selection as defined by RFC 3551.')
zhoneCpeVoipPacketPeriodSelectionThirdOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(10)).setUnits('milli seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipPacketPeriodSelectionThirdOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipPacketPeriodSelectionThirdOrder.setDescription('This attribute specifies the packet period selection interval in milliseconds. The default value is 10. Valid values are 10..30 ms.')
zhoneCpeVoipSilenceSuppressionThirdOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 14), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSilenceSuppressionThirdOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSilenceSuppressionThirdOrder.setDescription('This attribute specifies whether silence suppression is on or off.')
zhoneCpeVoipCodecSelectionFourthOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("pcmu", 1), ("gsm", 2), ("g723", 3), ("dvi4eightKHz", 4), ("dvi4sixteenKHz", 5), ("lpc", 6), ("pcma", 7), ("g722", 8), ("l16twochannels", 9), ("l16onechannel", 10), ("qcelp", 11), ("cn", 12), ("mpa", 13), ("g728", 14), ("dvi411", 15), ("dvi422", 16), ("g729", 17))).clone('pcmu')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipCodecSelectionFourthOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipCodecSelectionFourthOrder.setDescription('This attribute specifies codec selection as defined by RFC 3551.')
zhoneCpeVoipPacketPeriodSelectionFourthOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(10)).setUnits('milli seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipPacketPeriodSelectionFourthOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipPacketPeriodSelectionFourthOrder.setDescription('This attribute specifies the packet period selection interval in milliseconds. The default value is 10. Valid values are 10..30 ms.')
zhoneCpeVoipSilenceSuppressionFourthOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 6, 2, 1, 17), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSilenceSuppressionFourthOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSilenceSuppressionFourthOrder.setDescription('This attribute specifies whether silence suppression is on or off.')
zhoneCpeVoipSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7), )
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberTable.setDescription('Cpe Voip Subscriber table for the VoIP feature.')
zhoneCpeVoipSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeVoipSubscriberPortNumber"))
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberEntry.setDescription('Row in the CpeVoipSubscriber table.')
zhoneCpeVoipSubscriberPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberPortNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberPortNumber.setDescription('This represents the CPE Voip Subscriber Port Number.')
zhoneCpeVoipSubscriberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeVoipSubscriberAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 3), ZhoneAdminState().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberAdminState.setDescription('This shows the admin state for the CpeVoipSubscriber.')
zhoneCpeVoipSubscriberDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 4), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberDialNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberDialNumber.setDescription('This attribute contains the dialing number to make the call.')
zhoneCpeVoipSubscriberDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberDisplayName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberDisplayName.setDescription('This ASCII string attribute defines the customer id used for the display attribute in outgoing SIP messages.')
zhoneCpeVoipSubscriberUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberUserName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberUserName.setDescription('This attribute contains the SIP user identification used for authentication.')
zhoneCpeVoipSubscriberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberPassword.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberPassword.setDescription('This attribute contains the SIP password used for authentication.')
zhoneCpeVoipSubscriberImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ohm600", 1), ("ohm900", 2), ("complex1", 3), ("complex2", 4), ("complex3", 5))).clone('ohm600')).setUnits('ohm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberImpedance.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberImpedance.setDescription('This attribute specifies the impedance for the POTS UNI.')
zhoneCpeVoipSubscriberRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 6))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberRxGain.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberRxGain.setDescription('This attribute specifies a gain value for the received signal in the form of a 2s complement number. Valid values are -120 (-12.0 dB) to 60 (+6.0 dB).')
zhoneCpeVoipSubscriberTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 6))).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberTxGain.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberTxGain.setDescription('This attribute specifies a gain value for the transmit signal in the form of a 2s complement number. Valid values are -120 (-12.0 dB) to 60 (+6.0 dB).')
zhoneCpeVoipSubscriberTransmissionPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fulltimeonhookxmit", 1), ("parttimeonhookxmit", 2))).clone('fulltimeonhookxmit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberTransmissionPath.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberTransmissionPath.setDescription('This attribute allows setting the POTS UNI either to full-time on-hook transmission or part-time on-hook transmission.')
zhoneCpeVoipSubscriberSignallingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("loopstart", 1), ("groundstart", 2), ("loopreversebattery", 3), ("coinfirst", 4), ("dialtonefirst", 5), ("multiparty", 6))).clone('loopstart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberSignallingCode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberSignallingCode.setDescription('This attribute specifies the POTS-side signaling.')
zhoneCpeVoipServerProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipServerProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerProfileIndex.setDescription('This attribute points to the associated cpe-voip-server profile.')
zhoneCpeVoipFeaturesProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesProfileIndex.setDescription('This attribute points to the associated cpe-voip-feature profile.')
zhoneCpeVoipMediaProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipMediaProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaProfileIndex.setDescription('This attribute points to the associated cpe-voip-media profile.')
zhoneCpeVoipSubscriberPhoneFollowsWan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 7, 1, 16), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberPhoneFollowsWan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberPhoneFollowsWan.setDescription('When enabled the phone will lose power any time the WAN is operation status of down.This will allow line monitoring equipment to detect loss of service.')
zhoneCpeEthSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8), )
if mibBuilder.loadTexts: zhoneCpeEthSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberTable.setDescription('Cpe Eth Subscriber table.')
zhoneCpeEthSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeEthSubscriberPortNumber"))
if mibBuilder.loadTexts: zhoneCpeEthSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberEntry.setDescription('Row in the CpeEthSubscriber table.')
zhoneCpeEthSubscriberPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPortNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPortNumber.setDescription('This represents the CPE Eth Subscriber Port Number.')
zhoneCpeEthSubscriberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeEthSubscriberAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 3), ZhoneAdminState().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberAdminState.setDescription('This attribute activates or deactivates the functions performed by the Ethernet port for this subscriber or put the port in test mode.')
zhoneCpeEthSubscriberLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 4), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberLoopback.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberLoopback.setDescription('This enables or disables Ethernet loopback.')
zhoneCpeEthSubscriberRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("tenMbps", 2), ("oneHundredMbps", 3), ("oneThousandMbps", 4))).clone('auto')).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberRate.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberRate.setDescription('This attribute sets the Ethernet port rate.')
zhoneCpeEthSubscriberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("full", 2), ("half", 3))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberDuplex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberDuplex.setDescription('This attribute sets the Ethernet port duplex.')
zhoneCpeEthSubscriberMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1518)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberMtu.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberMtu.setDescription('This attribute denotes the maximum frame size allowed across this interface.')
zhoneCpeEthSubscriberPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPortType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPortType.setDescription('This attribute specifies the Ethernet interface wiring.')
zhoneCpeEthSubscriberPauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('quanta').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPauseTime.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPauseTime.setDescription('This attribute allows the interface to ask the subscriber terminal to temporarily suspend sending data. Units are in pause quanta (1 pause quantum is 512 bit times of the particular implementation).')
zhoneCpeEthSubscriberMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridged", 1), ("routed", 2))).clone('bridged')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberMode.setDescription('This attribute specifies whether the Ethernet interface is bridged or derived from an IP router function.')
zhoneCpeEthSubscriberPowerFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 11), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPowerFeed.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPowerFeed.setDescription('This attribute controls whether power is provided to an external equipment over the Ethernet interface.')
zhoneCpeVideoProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoProfileIndex.setDescription('This object points to the associated video profile.')
zhoneCpeTrafficManagementProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementProfileIndex.setDescription('This object points to the associated Traffic Management profile. If there is no traffic control for the UNI, set it to 0.')
zhoneCpeEthSubscriberLineStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 14), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberLineStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberLineStatusAlarm.setDescription('This field is for enabling/disabling alarm reporting from this CPE UNI.')
zhoneCpeEthSubscriberAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 15), ZhoneAlarmSeverity().clone('major')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberAlarmSeverity.setDescription('This field is for specifying the severity level of all the alarms from this CPE UNI.')
zhoneCpeEthSubscriberPowerShed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 16), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPowerShed.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPowerShed.setDescription('When zhoneCpeSystemCommonPowerShutdownDelay is non-zero and the unit is operating on Battery Power during an AC power outage, this option controls the Enable/Disable state of each Ethernet port. Ports with Power Shedding State as Enabled will remain operational on Battery Power, while Disabled ports will be shut down to conserve battery power. ')
zhoneCpeEthSubscriberPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("low", 2), ("medium", 3), ("high", 4))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPowerRange.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberPowerRange.setDescription('Maximum PoE ( Power over ethernet ) Power allowed per port. When disabled, no PoE Power will be provided.')
zhoneCpeEthSubscriberLldpMedList = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 8, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeEthSubscriberLldpMedList.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberLldpMedList.setDescription('A list of cpe-lldp-med-policy profiles.')
zhoneCpeVideo = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9))
if mibBuilder.loadTexts: zhoneCpeVideo.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideo.setDescription('Cpe Video objects.')
zhoneCpeVideoIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeVideoIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeVideoIndex when creating entries in the zhoneCpeVideoTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeVideoIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeVideoTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2), )
if mibBuilder.loadTexts: zhoneCpeVideoTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoTable.setDescription('Cpe Video table.')
zhoneCpeVideoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeVideoIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeGemPort"), (0, "Zhone-CPE-MIB", "zhoneCpeVlan"))
if mibBuilder.loadTexts: zhoneCpeVideoEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoEntry.setDescription('Row in the Cpe Video table.')
zhoneCpeVideoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeVideoIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoIndex.setDescription('This represents the CPE Video Index.')
zhoneCpeGemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: zhoneCpeGemPort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeGemPort.setDescription('This represents the CPE GEM Port Index.')
zhoneCpeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: zhoneCpeVlan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVlan.setDescription('This represents the CPE Vlan Id.')
zhoneCpeVideoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 4), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeVideoProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 5), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoProfileName.setDescription('CPE Video profile for the dynamic bridging. This field is only writable upon creation and must be unique within its table.')
zhoneCpeVideoMaxSimultaneousGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoMaxSimultaneousGroups.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoMaxSimultaneousGroups.setDescription('This attribute specifies the maximum number of dynamic multicast groups that may be replicated to the client port at any one time. The default value 0 specifies that no administrative limit is to be imposed.')
zhoneCpeVideoMaxMulticastBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('bytes/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoMaxMulticastBandwidth.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoMaxMulticastBandwidth.setDescription('This attribute specifies the maximum imputed dynamic bandwidth, in bytes per second, that may be delivered to the client port at anyone time. The default value 0 specifies that no administrative limit is to be imposed.')
zhoneCpeVideoBandwidthEnforce = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoBandwidthEnforce.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoBandwidthEnforce.setDescription('The default value of this boolean attribute is false, and specifies that attempts to exceed the max multicast bandwidth be counted but honored. The value true specifies that such attempts be counted and denied. The imputed bandwidth value is taken from the dynamic access control list table, both for a new join request and for pre-existing groups.')
zhoneCpeVideoIgmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("version3", 3))).clone('version2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoIgmpVersion.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoIgmpVersion.setDescription('This attribute specifies the version of the IGMP to be supported.')
zhoneCpeVideoIgmpFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transparentsnooping", 1), ("snoopwithproxy", 2), ("proxy", 3))).clone('transparentsnooping')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoIgmpFunction.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoIgmpFunction.setDescription('This attribute enables an IGMP function - transparent IGMP snooping only, snooping with proxy reporting (SPR) and IGMP proxy. The function must be consistent with the capabilities specified by the other IGMP configuration attributes.')
zhoneCpeVideoImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 11), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoImmediateLeave.setDescription('This attribute enables or disables the immediate leave function.')
zhoneCpeVideoUpstreamIgmpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('messages/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoUpstreamIgmpRate.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoUpstreamIgmpRate.setDescription('This attribute limits the maximum rate of upstream IGMP traffic. Traffic in excess of this limit is silently discarded. The attribute value is specified in messages/second. The default value 0 imposes no rate limit on this traffic.')
zhoneCpeVideoRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoRobustness.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoRobustness.setDescription('This attribute allows tuning for possible packet loss in the network. The default value 0 causes the ONT to follow the IETF recommendation to copy the robustness value from query messages originating further upstream.')
zhoneCpeVideoAccessControlList = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 9, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlList.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlList.setDescription('This attribute points to a access control group list. The default value 0 indicates no control list is used.')
zhoneCpeVideoAccessControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10))
if mibBuilder.loadTexts: zhoneCpeVideoAccessControl.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControl.setDescription('Cpe Video Access Control objects.')
zhoneCpeVideoAccessControlIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 1), )
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlIndexTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlIndexTable.setDescription('Table of next available index values for CPE video access control profile.')
zhoneCpeVideoAccessControlIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 1, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeVideoAccessControlListIndex"))
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlIndexEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlIndexEntry.setDescription('Row in the zhoneCpeVideoAccessControlIndexTable.')
zhoneCpeVideoAccessControlIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlIndexNext.setDescription('This represents the next available index value for video access control profile. When 30 cpe-video-access-control profiles are configured this field wil give zero as next available index.')
zhoneCpeVideoAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2), )
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlTable.setDescription('Cpe Video Access Control table.')
zhoneCpeVideoAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeVideoAccessControlListIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeVideoAccessControlEntryIndex"))
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlEntry.setDescription('Row in the Cpe Video Access Control table.')
zhoneCpeVideoAccessControlListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlListIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlListIndex.setDescription('This represents the CPE Video Access Control List Index.')
zhoneCpeVideoAccessControlEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlEntryIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlEntryIndex.setDescription('This represents the CPE Video Access Control Entry Index.')
zhoneCpeVideoAccessControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 3), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeVideoAccessControlProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 4), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlProfileName.setDescription('CPE Video profile for the dynamic bridging. This field is only writable upon creation and must be unique within its table.')
zhoneCpeVideoAccessControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("alwayson", 2), ("periodic", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlType.setDescription('This attribute defines the video stream type.')
zhoneCpeVideoAccessControlSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlSrcIp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlSrcIp.setDescription('This is the source IP address. Default value is 0.0.0.0, it specifies that the source IP address is to be ignored.')
zhoneCpeVideoAccessControlDstIpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlDstIpStart.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlDstIpStart.setDescription('Destination IP address of the start of the multicast range. Default value is 0.0.0.0.')
zhoneCpeVideoAccessControlDstIpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlDstIpEnd.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlDstIpEnd.setDescription('Destination IP address of the end of the multicast range. Default value is 0.0.0.0.')
zhoneCpeVideoAccessControlImputedGroupBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 10, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('bytes/second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlImputedGroupBw.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlImputedGroupBw.setDescription('Expressed in bytes/sec, the imputed group bandwidth is used to decide whether or not to honor a join request in the presence of a max multicast bandwidth limit. The default value 0 effectively allows this table entry to avoid max bandwidth limitations.')
zhoneCpePweSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11), )
if mibBuilder.loadTexts: zhoneCpePweSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberTable.setDescription('Cpe Pwe Subscriber table.')
zhoneCpePweSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpePweSubscriberPortNumber"))
if mibBuilder.loadTexts: zhoneCpePweSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberEntry.setDescription('Row in the CpePweSubscriber table.')
zhoneCpePweSubscriberPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpePweSubscriberPortNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberPortNumber.setDescription('This represents the CPE Pwe Subscriber Port Number.')
zhoneCpePweSubscriberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpePweSubscriberAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 3), ZhoneAdminState().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberAdminState.setDescription('This attribute activates or deactivates the functions performed by the CES port for this subscriber or puts the port in test mode.')
zhoneCpePweSubscriberLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noloop", 1), ("payload", 2), ("line", 3), ("ponside", 4), ("cesside", 5))).clone('noloop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberLoopback.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberLoopback.setDescription('This attribute specifies and reports the loopback configuration of the physical interface.')
zhoneCpePweSubscriberNearEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(57000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberNearEndPort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberNearEndPort.setDescription('When the pseudowire service is transported via IP, this attribute specifies the port number of the near-end TCP/UDP service. The default value is 57000 + port number.')
zhoneCpePweSubscriberFarEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberFarEndIp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberFarEndIp.setDescription('When the pseudowire service is transported via IP, this attribute specifies the IP or resolved name of the far-end termination point.')
zhoneCpePweSubscriberFarEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(57000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberFarEndPort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberFarEndPort.setDescription('When the pseudowire service is transported via IP, this attribute specifies the port number of the far-end TCP/UDP service. The default value is 57000 + port number.')
zhoneCpePweSubscriberLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('feet').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberLineLength.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberLineLength.setDescription('This attribute specifies the length of the twisted pair cable from a DS1 physical UNI to the DSX-1 cross-connect point.')
zhoneCpePweProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweProfileIndex.setDescription('This attribute points to the associated PWE profile. 1 indicates a default profile is used.')
zhoneCpePweSubscriberLineStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 10), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberLineStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberLineStatusAlarm.setDescription('This field is for enabling/disabling alarm reporting from this CPE UNI.')
zhoneCpePweSubscriberAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 11, 1, 11), ZhoneAlarmSeverity().clone('major')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSubscriberAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberAlarmSeverity.setDescription('This field is for specifying the severity level of all the alarms from this CPE UNI.')
zhoneCpePwe = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12))
if mibBuilder.loadTexts: zhoneCpePwe.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePwe.setDescription('Cpe Pwe objects.')
zhoneCpePweIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpePweIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpePweIndex when creating entries in the zhoneCpePweTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpePweIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpePweTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2), )
if mibBuilder.loadTexts: zhoneCpePweTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweTable.setDescription('Cpe Pwe table.')
zhoneCpePweEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpePweIndex"))
if mibBuilder.loadTexts: zhoneCpePweEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweEntry.setDescription('Row in the CpePwe table.')
zhoneCpePweIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpePweIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweIndex.setDescription('This represents the CPE Pwe Index.')
zhoneCpePweRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpePweProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweProfileName.setDescription('CPE Pwe profile for the dynamic bridging. This field is only writable upon creation and must be unique within its table.')
zhoneCpePweLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1", 1), ("e1", 2), ("other", 3))).clone('e1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweLineType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweLineType.setDescription('This attribute specifies the line type (T1, E1 or other) used.')
zhoneCpePweEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2), ("hdb3", 3), ("b3zs", 4))).clone('hdb3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweEncoding.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweEncoding.setDescription('This attribute specifies the line coding scheme.')
zhoneCpePweDs1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shorthaulnopwr", 1), ("longhaulnopwr", 2), ("niulonghaulnopwr", 3), ("niulonghaulpwr", 4))).clone('shorthaulnopwr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweDs1Mode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweDs1Mode.setDescription('This attribute specifies the mode of a DS1.')
zhoneCpePweDs1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("extsuperframe", 1), ("superframe", 2), ("unframed", 3), ("g704", 4), ("jtg704", 5))).clone('unframed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweDs1Framing.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweDs1Framing.setDescription('This attribute specifies the DS1 framing structure.')
zhoneCpePweTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("udp", 2), ("mpls", 3))).clone('udp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweTransport.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweTransport.setDescription('The underlying transport for the Pseudowire service.')
zhoneCpePweServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unstructured", 1), ("octetalignedunstruct", 2), ("structured", 3))).clone('unstructured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweServiceType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweServiceType.setDescription('This attribute specifies the basic service type, either a transparent bit pipe or an encapsulation that recognizes the underlying structure of the payload.')
zhoneCpePweSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nosignalling", 1), ("inbandcas", 2), ("outofbandcas", 3))).clone('nosignalling')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSignalling.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSignalling.setDescription('This attribute specifies how CAS signalling is carried.')
zhoneCpePwePayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePwePayloadSize.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePwePayloadSize.setDescription("Number of payload bytes per packet. Valid only if service type = unstructured or unstructured octet-aligned. Valid choices depend on the TDM service, but must include the following. Other choices are at the vendor's discretion. DS1 192 DS1 200, required only if unstructured octet aligned service is supported E1 256 DS3 1024 E3 1024")
zhoneCpePwePayloadEncapsulationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nosignallingandNvalueis1", 1), ("nosignallingandNvalueis2to4", 2), ("nosignallingandNvalueisgreaterthan4", 3), ("ds1cas", 4), ("e1cas", 5))).clone('nosignallingandNvalueis1')).setUnits('number of frames').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePwePayloadEncapsulationDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePwePayloadEncapsulationDelay.setDescription('This represents number of 125 microsecond frames to be encapsulated in each pseudowire packet. Valid only if service type = structured. The minimum set of choices for various TDM services is listed below, and is affected by the possible presence of in-band signalling. Other choices are at the vendor discretion. NxDS0, no signalling, N = 1 64 (8 ms) required, 40 (5 ms) desired NxDS0, no signalling, N = 2..4 32 (4 ms) NxDS0, no signalling, N > 4 8 (1 ms) NxDS0 with DS1 CAS 24 (3 ms) NxDS0 with E1 CAS 16 (2 ms)')
zhoneCpePweTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("network", 1), ("differential", 2), ("adaptive", 3), ("loop", 4))).clone('adaptive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweTimingMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweTimingMode.setDescription('This attribute selects the timing mode of the TDM service. If RTP is used, this attribute must be set to be consistent with the value of the RTP time stamp mode attribute in the RTP parameters managed entity at the far end. 1 Network timing 2 Differential timing 3 Adaptive timing (default) 4 Loop timing: local TDM transmit clock derived from local TDM receive stream')
zhoneCpePweChannelAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 14), Bits().clone(namedValues=NamedValues(("channel0", 0), ("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4), ("channel5", 5), ("channel6", 6), ("channel7", 7), ("channel8", 8), ("channel9", 9), ("channel10", 10), ("channel11", 11), ("channel12", 12), ("channel13", 13), ("channel14", 14), ("channel15", 15), ("channel16", 16), ("channel17", 17), ("channel18", 18), ("channel19", 19), ("channel20", 20), ("channel21", 21), ("channel22", 22), ("channel23", 23), ("channel24", 24), ("channel25", 25), ("channel26", 26), ("channel27", 27), ("channel28", 28), ("channel29", 29), ("channel30", 30), ("channel31", 31)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweChannelAssign.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweChannelAssign.setDescription('If service type is structured, this attribute is a bit field indicating the 64kbps sub channels are used. This is not supported currently. The default value is channel0, but it might change later.')
zhoneCpePweClockReference = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweClockReference.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweClockReference.setDescription('This attribute specifies the frequency of the common timing reference, in multiples of 8 kHz. The default value is 1 (8 kHz).')
zhoneCpePweRtpTimeStampMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("absolute", 2), ("differential", 3))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweRtpTimeStampMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweRtpTimeStampMode.setDescription('This attribute determines the mode in which RTP timestamps are generated in the TDM to PSN direction.')
zhoneCpePwePtypePayload = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(96, 127)).clone(96)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePwePtypePayload.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePwePtypePayload.setDescription('This attribute specifies the RTP payload type for the payload channel in the TDM to PSN direction. Assignable PTYPEs lie in the dynamic range 96..127.')
zhoneCpePwePtypeSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePwePtypeSignalling.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePwePtypeSignalling.setDescription('This attribute specifies the RTP payload type direction for the signaling channel in the TDM to PSN. Assignable PTYPEs lie in the dynamic range 96..127. If signalling is not transported in its own channel, the value should be set to 0. So the valid values used are 0, 96-127.')
zhoneCpePweSSrcPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSSrcPayload.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSSrcPayload.setDescription('This attribute specifies the RTP synchronization source for the payload channel in the TDM to PSN direction.')
zhoneCpePweSSrcSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSSrcSignalling.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSSrcSignalling.setDescription('This attribute specifies the RTP synchronization source for the signaling channel in the TDM to PSN direction. If signalling is not transported in its own channel, this value should be set to 0.')
zhoneCpePweExpectedPTypePayload = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweExpectedPTypePayload.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweExpectedPTypePayload.setDescription('This attribute specifies the RTP payload type for the payload channel in the PSN to TDM direction. The received payload type may be used to detect malformed packets. To disable the check functions, set the value to its default value 0.')
zhoneCpePweExpectedPTypeSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweExpectedPTypeSignalling.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweExpectedPTypeSignalling.setDescription('This attribute specifies the RTP payload type for the signaling channel in the PSN to TDM direction. The received payload type may be used to detect malformed packets. To disable the check functions, set the value to its default value 0.')
zhoneCpePweExpectedSSrcPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweExpectedSSrcPayload.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweExpectedSSrcPayload.setDescription('This attribute specifies the RTP synchronization source in the PSN to TDM direction. The received SSRC may be used to detect misconnection (stray packets). To disable the check functions, set the value to its default value 0.')
zhoneCpePweExpectedSSrcSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweExpectedSSrcSignalling.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweExpectedSSrcSignalling.setDescription('This attribute specifies the RTP synchronization source for the signalling channel in the PSN to TDM direction. The received SSRC may be used to detect misconnection (stray packets). To disable the check functions, set the value to its default value 0.')
zhoneCpePweJitterBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(128)).setUnits('micro seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweJitterBufMax.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweJitterBufMax.setDescription("This attribute specifies the desired maximum depth of the playout buffer in the PSN to TDM direction. The value is expressed as a multiple of the 125 micro second frame rate. The value 0 selects the ONT's internal policy.")
zhoneCpePweJitterBufDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(64)).setUnits('micro seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweJitterBufDesired.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweJitterBufDesired.setDescription("This attribute specifies the desired nominal fill depth of the playout buffer in the PSN to TDM direction. The value is expressed as a multiple of the 125 micro second frame rate. The value 0 selects the ONT's internal policy.")
zhoneCpePweFillPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vendorspecific", 1), ("ais", 2), ("allones", 3), ("allzeros", 4), ("repeatprevdata", 5), ("ds1idle", 6))).clone('vendorspecific')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweFillPolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweFillPolicy.setDescription('This attribute defines the payload bit pattern to be applied toward the TDM service if no payload packet is available to play out. The default value 1 specifies that the ONT apply its internal policy, ie vendor-specific.')
zhoneCpePweMisconnectedDeclarePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweMisconnectedDeclarePolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweMisconnectedDeclarePolicy.setDescription("The alarm declaration policy attribute defines the anomaly rate that causes the corresponding alarm to be declared. It is an integer percentage between 1..100. If this density of anomalies occurs during the alarm onset soak interval, the alarm is declared. The default value 0 selects the ONT's internal policy.")
zhoneCpePweMisconnectedClearPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweMisconnectedClearPolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweMisconnectedClearPolicy.setDescription("The alarm clear policy attribute defines the anomaly rate that causes the correcponding alarm to be cleared. It is an integer percentage between 0..99. If no more than this density of anomalies occurs during the alarm clear soak interval, the alarm is cleared. The default value 255 selects the ONT's internal policy.")
zhoneCpePweLossPacketDeclarePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweLossPacketDeclarePolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweLossPacketDeclarePolicy.setDescription("The alarm declaration policy attribute defines the anomaly rate that causes the corresponding alarm to be declared. It is an integer percentage between 1..100. If this density of anomalies occurs during the alarm onset soak interval, the alarm is declared. The default value 0 selects the ONT's internal policy.")
zhoneCpePweLossPacketClearPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweLossPacketClearPolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweLossPacketClearPolicy.setDescription("The alarm clear policy attribute defines the anomaly rate that causes the correcponding alarm to be cleared. It is an integer percentage between 0..99. If no more than this density of anomalies occurs during the alarm clear soak interval, the alarm is cleared. The default value 255 selects the ONT's internal policy.")
zhoneCpePweOverrunUnderrunDeclarePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweOverrunUnderrunDeclarePolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweOverrunUnderrunDeclarePolicy.setDescription("The alarm declaration policy attribute defines the anomaly rate that causes the corresponding alarm to be declared. It is an integer percentage between 1..100. If this density of anomalies occurs during the alarm onset soak interval, the alarm is declared. The default value 0 selects the ONT's internal policy.")
zhoneCpePweOverrunUnderrunClearPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweOverrunUnderrunClearPolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweOverrunUnderrunClearPolicy.setDescription("The alarm clear policy attribute defines the anomaly rate that causes the correcponding alarm to be cleared. It is an integer percentage between 0..99. If no more than this density of anomalies occurs during the alarm clear soak interval, the alarm is cleared. The default value 255 selects the ONT's internal policy.")
zhoneCpePweMalformedDeclarePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweMalformedDeclarePolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweMalformedDeclarePolicy.setDescription("The alarm declaration policy attribute defines the anomaly rate that causes the corresponding alarm to be declared. It is an integer percentage between 1..100. If this density of anomalies occurs during the alarm onset soak interval, the alarm is declared. The default value 0 selects the ONT's internal policy.")
zhoneCpePweMalformedClearPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweMalformedClearPolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweMalformedClearPolicy.setDescription("The alarm clear policy attribute defines the anomaly rate that causes the correcponding alarm to be cleared. It is an integer percentage between 0..99. If no more than this density of anomalies occurs during the alarm clear soak interval, the alarm is cleared. The default value 255 selects the ONT's internal policy.")
zhoneCpePweRBitTransmitSetPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweRBitTransmitSetPolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweRBitTransmitSetPolicy.setDescription('This attribute defines the number of consecutive lost packets that causes the transmitted R bit to be set in the TDM to PSN direction, indicating lost packets to the far end. The default value 0 selects the ONT internal policy.')
zhoneCpePweRBitTransmitClearPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweRBitTransmitClearPolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweRBitTransmitClearPolicy.setDescription('This attribute defines the number of consecutive valid packets that causes the transmitted R bit to be cleared in the TDM to PSN direction, removing the remote failure indication to the far end. The default value 0 selects the ONT internal policy.')
zhoneCpePweRBitReceivePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nothing", 1), ("alarm", 2), ("idlechannel", 3))).clone('nothing')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweRBitReceivePolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweRBitReceivePolicy.setDescription('This attribute defines the action toward the Nx64 TDM interface when remote failure is indicated on packets received from the PSN.')
zhoneCpePweLBitReceivePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ais", 1), ("repeatlastpkt", 2), ("idlechannel", 3))).clone('ais')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweLBitReceivePolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweLBitReceivePolicy.setDescription('This attribute defines the action toward the TDM interface when far end TDM failure is indicated on packets received from the PSN.')
zhoneCpePweSesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweSesThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSesThreshold.setDescription('Number of lost, malformed or otherwise unusable packets expected in the PSN to TDM direction within a one-second interval that causes a severely errored second to be counted. Stray packets do not count toward a severely errored second, nor do packets whose L bit is set at the far end. The default value is 3.')
zhoneCpePweCdvTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(750)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweCdvTolerance.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweCdvTolerance.setDescription('This attribute represents the duration of user data that must be buffered by the CES interworking entity to offset packet delay variation. It is expressed in 10 microsecond increments. The default value for DS1 CES is 750 micro seconds; for DS3 CES, it is 1000 micro seconds.')
zhoneCpePweChannelAssociatedSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("base", 1), ("e1cas", 2), ("sfcas", 3), ("ds1esfcas", 4), ("j2cas", 5))).clone('base')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweChannelAssociatedSignalling.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweChannelAssociatedSignalling.setDescription('This attribute selects the signalling format. It applies to structured interfaces only.')
zhoneCpePweMplsTpType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("gem", 2))).clone('ethernet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweMplsTpType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweMplsTpType.setDescription('This attribute specifies the type of ANI-side termination for the MPLS Pseudowire.')
zhoneCpePweDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 12, 2, 1, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)).clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePweDscp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweDscp.setDescription('This parameter indicates DSCP value for cpe pwe traffic. Valid code values: <0-63> Differentiated services codepoint value af11 Mark packets with AF11 dscp (001010) af12 Mark packets with AF12 dscp (001100) af13 Mark packets with AF13 dscp (001110) af21 Mark packets with AF21 dscp (010010) af22 Mark packets with AF22 dscp (010100) af23 Mark packets with AF23 dscp (010110) af31 Mark packets with AF31 dscp (011010) af32 Mark packets with AF32 dscp (011100) af33 Mark packets with AF33 dscp (011110) af41 Mark packets with AF41 dscp (100010) af42 Mark packets with AF42 dscp (100100) af43 Mark packets with AF43 dscp (100110) cs1 Mark packets with CS1(precedence 1) dscp (001000) cs2 Mark packets with CS2(precedence 2) dscp (010000) cs3 Mark packets with CS3(precedence 3) dscp (011000) cs4 Mark packets with CS4(precedence 4) dscp (100000) cs5 Mark packets with CS5(precedence 5) dscp (101000) cs6 Mark packets with CS6(precedence 6) dscp (110000) cs7 Mark packets with CS7(precedence 7) dscp (111000) default Mark packets with default dscp (000000) ef Mark packets with EF dscp (101110) ')
zhoneCpeOnuModelInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13), )
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoTable.setDescription('Cpe Onu Model Info table.')
zhoneCpeOnuModelInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeOnuModelInfoIndex"))
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoEntry.setDescription('Row in the CpeOnuModelInfo table.')
zhoneCpeOnuModelInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoIndex.setDescription('This represents the CpeOnuModelInfo Index.')
zhoneCpeOnuModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 2), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuModelName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelName.setDescription('This repesents the Onu Model name.')
zhoneCpeOnuBatteryBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuBatteryBackup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuBatteryBackup.setDescription('This represents the Onu battery backup.')
zhoneCpeOnuSipPlarSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuSipPlarSupported.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuSipPlarSupported.setDescription('This represents whether SipPlar is supported on this ONU.')
zhoneCpeOnuEthSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuEthSlotNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuEthSlotNumber.setDescription('This represents the Onu ethernet slot number.')
zhoneCpeOnuNumberOfEthPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfEthPorts.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfEthPorts.setDescription('This represents the number of ethernet ports on an ONU.')
zhoneCpeOnuPotsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuPotsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuPotsSlotNumber.setDescription('This represents the Onu Pots Slot Number.')
zhoneCpeOnuNumberOfPotsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfPotsPorts.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfPotsPorts.setDescription('This represents the number of Pots ports on an ONU.')
zhoneCpeOnuRfVideoSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuRfVideoSlotNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuRfVideoSlotNumber.setDescription('This represents the Onu RfVideo slot number.')
zhoneCpeOnuNumberOfRfVideoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfRfVideoPorts.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfRfVideoPorts.setDescription('This represents the number of RfVideo ports.')
zhoneCpeOnuCesSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuCesSlotNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuCesSlotNumber.setDescription('This represents the Onu Ces slot number.')
zhoneCpeOnuNumberOfCesPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfCesPorts.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfCesPorts.setDescription('This represents the number of Ces ports on an ONU.')
zhoneCpeOnuModelInfoRGBridged = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoRGBridged.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoRGBridged.setDescription('If TRUE, layer 2 bridging can only be configured via a RG management interface such as SNMP, TR-69, CLI or Web UI. Otherwise, VoIP can be configured via OMCI as well.')
zhoneCpeOnuNumberOfWlanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfWlanPorts.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfWlanPorts.setDescription('This represents the number of Wlan ports on an ONU.')
zhoneCpeOnuModelInfoRg = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoRg.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoRg.setDescription('If TRUE, CPE is capable of providing RG (residential gateway) services.')
zhoneCpeOnuModelInfoRgVoip = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoRgVoip.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoRgVoip.setDescription('If TRUE, VoIP can only be configured via a RG management interface such as SNMP, TR-69, CLI or Web UI. Otherwise, VoIP can be configured via OMCI as well.')
zhoneCpeOnuModelInfoRgPwe = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoRgPwe.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoRgPwe.setDescription('If TRUE, PWE can only be configured via a RG management interface such as SNMP, TR-69, CLI or Web UI. Otherwise, PWE can be configured via OMCI as well.')
zhoneCpeOnuModelInfoTftpDnld = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoTftpDnld.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoTftpDnld.setDescription('If TRUE, then this model support software image download via TFTP. Otherwise, only OMCI downloads are supported.')
zhoneCpeOnuSipSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuSipSupported.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuSipSupported.setDescription('This represents whether Sip is supported on this ONU.')
zhoneCpeOnuH248Supported = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuH248Supported.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuH248Supported.setDescription('This represents whether H248 is supported on this ONU.')
zhoneCpeOnuMgcpSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuMgcpSupported.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuMgcpSupported.setDescription('This represents whether MGCP is supported on this ONU.')
zhoneCpeOnuT1Supported = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuT1Supported.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuT1Supported.setDescription('This represents whether T1 is supported on this ONU.')
zhoneCpeOnuE1Supported = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuE1Supported.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuE1Supported.setDescription('This represents whether E1 is supported on this ONU.')
zhoneCpeOnuNumberOfPoEPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 13, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfPoEPorts.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuNumberOfPoEPorts.setDescription('This represents the number of Power over Ethernet ports on an ONU.')
zhoneCpeConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14), )
if mibBuilder.loadTexts: zhoneCpeConnectionTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionTable.setDescription('This table stores information about the connection between a logical or physical interface on the managing device and a port on the CPE.')
zhoneCpeConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpePortIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeTpType"), (0, "Zhone-CPE-MIB", "zhoneCpeTpIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeVlanId"), (0, "Zhone-CPE-MIB", "zhoneCpeSlanId"))
if mibBuilder.loadTexts: zhoneCpeConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionEntry.setDescription('Row in the CPE Connection table.')
zhoneCpePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneCpePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortIfIndex.setDescription('ifIndex of the port on which this connection is based. For a GPON connection, this is the GEM port ifIndex.')
zhoneCpeTpType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 2), TpType())
if mibBuilder.loadTexts: zhoneCpeTpType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTpType.setDescription('TpType identifies the type of termination point associated with this MAC bridge port. ')
zhoneCpeTpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: zhoneCpeTpIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTpIndex.setDescription('TpIndex identifies the Index of termination point associated with this MAC bridge port.')
zhoneCpeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)))
if mibBuilder.loadTexts: zhoneCpeVlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVlanId.setDescription('The Virtual LAN Id for VLAN Tag Insertion.')
zhoneCpeSlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)))
if mibBuilder.loadTexts: zhoneCpeSlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSlanId.setDescription('The Secure LAN Id for SLAN Tag Insertion.')
zhoneCpeConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 6), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeConnectionVlanCos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionVlanCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionVlanCos.setDescription('The Class-Of-Service (COS) value used for VLAN Tag Insertion.')
zhoneCpeConnectionVlanTpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33024, 33024), ValueRangeConstraint(34984, 34984), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), )).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionVlanTpId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionVlanTpId.setDescription('The value of the tag protocol identifier that is being used for QinQ packets. (0x8100 is default.). Valid values are : 1. 33024 ( 0x8100 ) 2. 34984 ( 0x88A8 ) 3. 37120 ( 0x9100 ) 4. 37376 ( 0x9200 ) ')
zhoneCpeConnectionSlanCos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionSlanCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionSlanCos.setDescription('The Class-Of-Service (COS) value used for SLAN Tag Insertion.')
zhoneCpeConnectionSlanTpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33024, 33024), ValueRangeConstraint(34984, 34984), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), )).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionSlanTpId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionSlanTpId.setDescription('The value of the tag protocol identifier that is being used for QinQ packets. (0x8100 is default.). Valid values are: 1. 33024 ( 0x8100 ) 2. 34984 ( 0x88A8 ) 3. 37120 ( 0x9100 ) 4. 37376 ( 0x9200 )')
zhoneCpeConnectionTranslateVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateVlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateVlanId.setDescription('The Virtual LAN Id for VLAN Tag Insertion.')
zhoneCpeConnectionTranslateVlanCos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateVlanCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateVlanCos.setDescription('The Class-Of-Service (COS) value used for VLAN Tag Insertion.')
zhoneCpeConnectionTranslateVlanTpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33024, 33024), ValueRangeConstraint(34984, 34984), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), )).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateVlanTpId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateVlanTpId.setDescription('The value of the tag protocol identifier that is being used for QinQ packets. (0x8100 is default.). Valid values are: 1. 33024 ( 0x8100 ) 2. 34984 ( 0x88A8 ) 3. 37120 ( 0x9100 ) 4. 37376 ( 0x9200 )')
zhoneCpeConnectionTranslateSlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateSlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateSlanId.setDescription('The Secure LAN Id for SLAN Tag Insertion.')
zhoneCpeConnectionTranslateSlanCos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateSlanCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateSlanCos.setDescription('The Class-Of-Service (COS) value used for SLAN Tag Insertion.')
zhoneCpeConnectionTranslateSlanTpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33024, 33024), ValueRangeConstraint(34984, 34984), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), )).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateSlanTpId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionTranslateSlanTpId.setDescription('The value of the tag protocol identifier that is being used for QinQ packets. (0x8100 is default.). Valid values are: 1. 33024 ( 0x8100 ) 2. 34984 ( 0x88A8 ) 3. 37120 ( 0x9100 ) 4. 37376 ( 0x9200 )')
zhoneCpeConnectionFloodingGport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionFloodingGport.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionFloodingGport.setDescription('This is the downstream only GEM port for broadcast unknown MAC address packets.')
zhoneCpeConnectionVideoGport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionVideoGport.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionVideoGport.setDescription('This is the downstream only multicast GEM port for IPTV content streams.')
zhoneCpeConnectionDscpToCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionDscpToCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionDscpToCosProfileIndex.setDescription('Index of dscp-to-cos profile.')
zhoneCpeConnectionRgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("routed", 1), ("brouted", 2), ("rpppoe", 3), ("bpppoe", 4), ("bridged", 5), ("notApplicable", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionRgMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionRgMode.setDescription("Use to specify the RG service for a CPE. When creating or deleting a CPE connection, if the CPE does not support RG service then this object should not be provided. If a CPE does support RG service then this object must be provided. When reading this object, the value returned will be 'notApplicable'. This data is not preserved in the CPE connection profile.")
zhoneCpeConnectionGuidedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionGuidedVlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionGuidedVlanId.setDescription('The Guided VLAN Id for RG Services. A zero value means a guided vlan does not exist. If a guided vlan is used then uni-vlan and uni-slan values must be zero. ')
zhoneCpeConnectionGuidedCos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 14, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeConnectionGuidedCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionGuidedCos.setDescription('The Guided Class-Of-Service (COS) value used for RG SERVICES. A zero means a guided cos does not exist.')
zhoneCpeRfSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 15), )
if mibBuilder.loadTexts: zhoneCpeRfSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeRfSubscriberTable.setDescription('Cpe Rf Subscriber table.')
zhoneCpeRfSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 15, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeRfSubscriberPortNumber"))
if mibBuilder.loadTexts: zhoneCpeRfSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeRfSubscriberEntry.setDescription('Row in the Cpe Rf Subscriber table.')
zhoneCpeRfSubscriberPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeRfSubscriberPortNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeRfSubscriberPortNumber.setDescription('This represents the CPE Rf Subscriber port number.')
zhoneCpeRfSubscriberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 15, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeRfSubscriberRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeRfSubscriberRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeRfSubscriberAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 15, 1, 3), ZhoneAdminState().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeRfSubscriberAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeRfSubscriberAdminState.setDescription('This attribute activates or deactivates the functions performed by the RF port for this subscriber or put the port in test mode.')
zhoneCpeRfSubscriberLineStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 15, 1, 4), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeRfSubscriberLineStatusAlarm.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeRfSubscriberLineStatusAlarm.setDescription('This field is for enabling/disabling alarm reporting from this CPE UNI.')
zhoneCpeRfSubscriberAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 15, 1, 5), ZhoneAlarmSeverity().clone('major')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeRfSubscriberAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeRfSubscriberAlarmSeverity.setDescription('This field is for specifying the severity level of all the alarms from this CPE UNI.')
zhoneCpeTrafficManagement = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16))
if mibBuilder.loadTexts: zhoneCpeTrafficManagement.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagement.setDescription('Cpe Traffic Management objects.')
zhoneCpeTrafficManagementIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeTrafficManagementIndex when creating entries in the zhoneCpeTrafficManagementTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeTrafficManagementIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeTrafficManagementTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2), )
if mibBuilder.loadTexts: zhoneCpeTrafficManagementTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementTable.setDescription('Cpe Traffic Management table.')
zhoneCpeTrafficManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeTrafficManagementIndex"))
if mibBuilder.loadTexts: zhoneCpeTrafficManagementEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementEntry.setDescription('Row in the Cpe Traffic Management table.')
zhoneCpeTrafficManagementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeTrafficManagementIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementIndex.setDescription('This represents the CPE Traffic Management Index, values are from the range 1 to n.')
zhoneCpeTrafficManagementRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeTrafficManagementProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementProfileName.setDescription('CPE Traffic Management profile for the dynamic bridging. This field is only writable upon creation and must be unique within its table.')
zhoneCpeTrafficManagementUpstreamSIR = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1310720))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementUpstreamSIR.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementUpstreamSIR.setDescription('This attribute specifies the upstream sustained information rate. Unit is kbps.')
zhoneCpeTrafficManagementUpstreamPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1310720))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementUpstreamPIR.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementUpstreamPIR.setDescription('This attribute specifies the upstream peak information rate. Unit is kbps.')
zhoneCpeTrafficManagementUpstreamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementUpstreamPriority.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementUpstreamPriority.setDescription('Upstream Priority, currently the only used value range is 0-7.')
zhoneCpeTrafficManagementUpstreamWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementUpstreamWeight.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementUpstreamWeight.setDescription('Upstream Weight for weighted round robin scheduling, variable size is 1 byte, default 0.')
zhoneCpeTrafficManagementDownstreamSIR = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1310720))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementDownstreamSIR.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementDownstreamSIR.setDescription('This attribute specifies the downstream sustained information rate. Unit is kbps.')
zhoneCpeTrafficManagementDownstreamPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1310720))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementDownstreamPIR.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementDownstreamPIR.setDescription('This attribute specifies the downstream peak information rate. Unit is kbps.')
zhoneCpeTrafficManagementDownstreamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementDownstreamPriority.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementDownstreamPriority.setDescription('Downstream Priority, currently the only used value range is 0-7.')
zhoneCpeTrafficManagementDownstreamWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementDownstreamWeight.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementDownstreamWeight.setDescription('Downstream Weight for weighted round robin scheduling, variable size is 1 byte, default 0. ')
zhoneCpeTrafficManagementPeakBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 16, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512000))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeTrafficManagementPeakBurstSize.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementPeakBurstSize.setDescription('Peak burst/block size, in bytes. Default value 0 means use CPE system default.')
zhoneCpeSystemTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 17), )
if mibBuilder.loadTexts: zhoneCpeSystemTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemTable.setDescription('Cpe System table.')
zhoneCpeSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 17, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"))
if mibBuilder.loadTexts: zhoneCpeSystemEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemEntry.setDescription('Row in the Cpe System table.')
zhoneCpeSystemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 17, 1, 1), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeSystemCommonProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 17, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonProfileIndex.setDescription('This object points to the associated System Common profile.')
zhoneCpeSystemMgcpClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemMgcpClientName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemMgcpClientName.setDescription('User string used in accessing the call agent. This is a unique value. This is not a mandatory field, users can leave it empty as well.')
zhoneCpeSystemCommon = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18))
if mibBuilder.loadTexts: zhoneCpeSystemCommon.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommon.setDescription('Cpe System Common objects.')
zhoneCpeSystemCommonIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeSystemCommonIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeSystemCommonIndex when creating entries in the zhoneCpeSystemCommonTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeSystemCommonIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeSystemCommonTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2), )
if mibBuilder.loadTexts: zhoneCpeSystemCommonTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonTable.setDescription('Cpe System Common table.')
zhoneCpeSystemCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeSystemCommonIndex"))
if mibBuilder.loadTexts: zhoneCpeSystemCommonEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonEntry.setDescription('Row in the Cpe System Common table.')
zhoneCpeSystemCommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeSystemCommonIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonIndex.setDescription('This represents the CPE System Common index value.')
zhoneCpeSystemCommonRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeSystemCommonProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonProfileName.setDescription('CPE System Common profile. This field is only writable upon creation and must be unique within its table.')
zhoneCpeSystemCommonFirewall = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 4), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonFirewall.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonFirewall.setDescription('Enable/disable firewall. Enabling firewall can protect the CPE from unwanted instruction. When firewall is enabled, incoming connections can be selectively allowed through firewall access and port forwarding settings.')
zhoneCpeSystemCommonSyncCookieProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 5), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonSyncCookieProtection.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonSyncCookieProtection.setDescription('Protects against malicious attackers attempting to exploit TCP handshaking.')
zhoneCpeSystemCommonCrossVlanRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 6), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonCrossVlanRouting.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonCrossVlanRouting.setDescription('If enabled is selected, routing between VLANs is allowed. Enabled Route table lookups ignore the VLAN ID of the ingress and egress ports. If there is a match, the packet is routed out the interface specified in the Route table, regardless of which VLAN it is a member of. Cross VLAN Routing enabled is the default behavior. Disabled Packets will be forwarded to the configured Default Route for the VLAN that they arrived on, unless there is a Route Table match within that same VLAN. Routing of packets across VLANs is prevented, providing traffic isolation. ')
zhoneCpeStaticRouteListProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeStaticRouteListProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteListProfileIndex.setDescription('Address of the static-route-list profile associated with this CPE.')
zhoneCpeDnsHostListProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDnsHostListProfile.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostListProfile.setDescription('Index of the dns-host profile associated with this entry, or 0 if none.')
zhoneCpeSystemCommonTr69Inform = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 9), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonTr69Inform.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonTr69Inform.setDescription('Enable or Disable the generation of Inform messages to the ACS (Auto Configuration Server).')
zhoneCpeSystemCommonInformInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonInformInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonInformInterval.setDescription('Periodic interval (in seconds) at which Inform messages will be generated.')
zhoneCpeSystemCommonAcsUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonAcsUrl.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonAcsUrl.setDescription('URL for the CPE to connect to the ACS ')
zhoneCpeSystemCommonAcsUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonAcsUsername.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonAcsUsername.setDescription('User name required for access to the ACS')
zhoneCpeSystemCommonAcsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonAcsPassword.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonAcsPassword.setDescription('User password required for access to the ACS.')
zhoneCpeSystemCommonAdminPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonAdminPassword.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonAdminPassword.setDescription('Log-in password for user account admin.')
zhoneCpeSystemCommonSupportPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonSupportPassword.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonSupportPassword.setDescription('Log-in password for user account support.')
zhoneCpeSystemCommonUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonUserPassword.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonUserPassword.setDescription('Log-in password for user account.')
zhoneCpeSystemCommonPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonPowerSupply.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonPowerSupply.setDescription('The total watts the power supply plugged into the device can provide. Default value 0 means not specified.')
zhoneCpeSystemCommonPowerShutdownDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonPowerShutdownDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonPowerShutdownDelay.setDescription('Power shedding control. Shutdown delay in minutes. When the unit detects that it is running on battery power, it has the option to shut down all support but the voice over IP telephone service. Default value 0 means not specified.')
zhoneCpeSystemCommonPowerRestoreDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 18, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeSystemCommonPowerRestoreDelay.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonPowerRestoreDelay.setDescription('Power shedding control. Restore delay in minutes. When the unit detects that it is running on battery power, it has the option to shut down all support but the voice over IP telephone service. Default value 0 means not specified.')
zhoneCpeInterfaceVlanTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19), )
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTable.setDescription('Cpe Interface Vlan table.')
zhoneCpeInterfaceVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeTpType"), (0, "Zhone-CPE-MIB", "zhoneCpeTpIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeVlanId"), (0, "Zhone-CPE-MIB", "zhoneCpeSlanId"))
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanEntry.setDescription('Row in the Cpe Interface Vlan table.')
zhoneCpeInterfaceVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 1), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeInterfaceVlanRgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routed", 1), ("brouted", 2), ("routedpppoe", 3), ("bridgedpppoe", 4), ("bridged", 5))).clone('brouted')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanRgMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanRgMode.setDescription('Specifies the VLAN connection type of the interface.')
zhoneCpeInterfaceVlanTranslateVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateVlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateVlanId.setDescription('The Virtual LAN Id for VLAN Tag Insertion.')
zhoneCpeInterfaceVlanTranslateVlanCos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateVlanCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateVlanCos.setDescription('The Class-Of-Service (COS) value used for VLAN Tag Insertion.')
zhoneCpeInterfaceVlanTranslateSlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateSlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateSlanId.setDescription('The Secure LAN Id for SLAN Tag Insertion.')
zhoneCpeInterfaceVlanTranslateSlanCos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateSlanCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateSlanCos.setDescription('The Class-Of-Service (COS) value used for SLAN Tag Insertion.')
zhoneCpeInterfaceVlanTranslateSlanTpId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(33024, 33024), ValueRangeConstraint(34984, 34984), ValueRangeConstraint(37120, 37120), ValueRangeConstraint(37376, 37376), )).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateSlanTpId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanTranslateSlanTpId.setDescription('The value of the tag protocol identifier that is being used for QinQ packets. (0x8100 is default). Valid values are: 1. 33024 ( 0x8100 ) 2. 34984 ( 0x88A8 ) 3. 37120 ( 0x9100 ) 4. 37376 ( 0x9200 )')
zhoneCpeInterfaceVlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanIpAddress.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanIpAddress.setDescription('The address used for IP host services. Default is 0.0.0.0.')
zhoneCpeIpServerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeIpServerProfile.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerProfile.setDescription('The address of the cpe-ip-server profile associated with this host IP address. The value 0 indicates no associated cpe-ip-server profile.')
zhoneCpeDhcpServerProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDhcpServerProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerProfileIndex.setDescription('The address of the DHCP server profile associated with this interface. The value 0 indicates no associated cpe-dhcp-server profile.')
zhoneCpePortFwdListProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 19, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdListProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdListProfileIndex.setDescription('The address of the port fwd list profile associated with this interface. It is only supported on a WAN interface. The value 0 indicates no associated cpe-port-fwding profile.')
zhoneCpeDhcpServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20))
if mibBuilder.loadTexts: zhoneCpeDhcpServer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServer.setDescription('Cpe Dhcp Server objects.')
zhoneCpeDhcpServerIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeDhcpServerIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeDhcpServerIndex when creating entries in the zhoneCpeDhcpServerTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeDhcpServerIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeDhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2), )
if mibBuilder.loadTexts: zhoneCpeDhcpServerTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerTable.setDescription('Cpe Dhcp Server table.')
zhoneCpeDhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeDhcpServerIndex"))
if mibBuilder.loadTexts: zhoneCpeDhcpServerEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerEntry.setDescription('Row in the Cpe Dhcp Server table.')
zhoneCpeDhcpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeDhcpServerIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerIndex.setDescription('This represents the CPE DHCP server index value.')
zhoneCpeDhcpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDhcpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeDhcpServerProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDhcpServerProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerProfileName.setDescription('CPE DHCP Server profile. This field is only writable upon creation and must be unique within its table.')
zhoneCpeDhcpServerStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDhcpServerStartAddress.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerStartAddress.setDescription('First address in the pool to be assigned by the DHCP server. Default value is 0.0.0.0.')
zhoneCpeDhcpServerEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDhcpServerEndAddress.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerEndAddress.setDescription('Last address in the pool to be assigned by the DHCP server. Default value is 0.0.0.0.')
zhoneCpeDhcpServerLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDhcpServerLeaseTime.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerLeaseTime.setDescription('Lease time in seconds of client assigned addresses. A value of -1 indicates an infinite lease.')
zhoneCpeDhcpServerConditionalServerListProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 20, 2, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDhcpServerConditionalServerListProfile.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerConditionalServerListProfile.setDescription('Index of the dhcp-conditional-server-list profile associated with this entry, or 0 if none.')
zhoneCpePppoeTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 21), )
if mibBuilder.loadTexts: zhoneCpePppoeTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePppoeTable.setDescription('Cpe PPPOE table.')
zhoneCpePppoeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 21, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeTpType"), (0, "Zhone-CPE-MIB", "zhoneCpeTpIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeVlanId"), (0, "Zhone-CPE-MIB", "zhoneCpeSlanId"))
if mibBuilder.loadTexts: zhoneCpePppoeEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePppoeEntry.setDescription('Row in the Cpe PPPOE table.')
zhoneCpePppoeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 21, 1, 1), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePppoeRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePppoeRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpePppoeUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePppoeUsername.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePppoeUsername.setDescription('The login user name to be used for PPP authentication.')
zhoneCpePppoePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 21, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePppoePassword.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePppoePassword.setDescription('The login password to be used for PPP authentication.')
zhoneCpePppoeAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("pap", 2), ("chap", 3), ("mschap", 4))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePppoeAuthentication.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePppoeAuthentication.setDescription('The PPP authentication protocol to be used for PPP authentication.')
zhoneCpePppoeRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePppoeRetryInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePppoeRetryInterval.setDescription('Time in seconds before retrying connection.')
zhoneCpeWlanSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22), )
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberTable.setDescription('Cpe Wlan Subscriber table.')
zhoneCpeWlanSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeWlanSubscriberIndex"))
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberEntry.setDescription('Row in the Cpe Wlan Subscriber table.')
zhoneCpeWlanSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberIndex.setDescription('This represents the CPE WLAN subscriber index value.')
zhoneCpeWlanSubscriberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeWlanSubscriberAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 3), ZhoneAdminState().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberAdminState.setDescription('This attribute activates or deactivates the functions performed by the wireless LAN interface for this subscriber or put the interface in test mode. Values are Up, Down, Test.')
zhoneCpeWlanSubscriberSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberSsid.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberSsid.setDescription('The SSID assigned to the wireless LAN interface.')
zhoneCpeWlanSubscriberEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberEncryptKey.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberEncryptKey.setDescription('WEP 64-bit encryption key: 5 ASCII characters or 10 hexadecimal digits WEP 128-bit encryption key: 13 ASCII charactess or 26 hexadecimal digits WPA Passphrase: 64 characters.')
zhoneCpeWlanSubscriberDevicePin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberDevicePin.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberDevicePin.setDescription('Device pin is only applicable when WPS security method is enabled.')
zhoneCpeWlanSubscriberRadiusKey = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberRadiusKey.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberRadiusKey.setDescription('Remote Authentication Dial In User Server (RADIUS) authentication key. This field cannot contain a SPACE and is returned as a string of asterisks.')
zhoneCpeWlanProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanProfileIndex.setDescription('The address of cpe-wlan profile associated with this CPE.')
zhoneCpeAccessControlListProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAccessControlListProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAccessControlListProfileIndex.setDescription('The address of cpe-access-ctrl-list profile associated with this CPE.')
zhoneCpeWdsMacListProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWdsMacListProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWdsMacListProfileIndex.setDescription('The address of cpe-wds-mac-ctrl-list profile associated with this CPE.')
zhoneCpeWlanAdvProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 22, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvProfileIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvProfileIndex.setDescription('The address of cpe-wlan-advanced profile associated with this CPE.')
zhoneCpeWlan = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23))
if mibBuilder.loadTexts: zhoneCpeWlan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlan.setDescription('Cpe Wlan objects.')
zhoneCpeWlanIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeWlanIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeWlanIndex when creating entries in the zhoneCpeWlanTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeWlanIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeWlanTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2), )
if mibBuilder.loadTexts: zhoneCpeWlanTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanTable.setDescription('Cpe Wlan table.')
zhoneCpeWlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeWlanIndex"))
if mibBuilder.loadTexts: zhoneCpeWlanEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanEntry.setDescription('Row in the Cpe Wlan table.')
zhoneCpeWlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeWlanIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanIndex.setDescription('This represents the CPE WLAN index value.')
zhoneCpeWlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeWlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanProfileName.setDescription('This field is only writable upon creation and must be unique within its table.')
zhoneCpeWlanHideAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 4), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanHideAccessPoint.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanHideAccessPoint.setDescription("Enable or disable the suppression of the advertising of the access point's SSID. If enabled, clients will need to configure the SSID to associate.")
zhoneCpeWlanIsolateClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 5), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanIsolateClients.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanIsolateClients.setDescription('Isolate clients within the wireless network from communicating directly with each other.')
zhoneCpeWlanWmmAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 6), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanWmmAdvertise.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanWmmAdvertise.setDescription('WMM (Wireless Multi Media) provides a subset of the IEEE 802.11e QoS standard, which adds prioritization to wireless to optimize their performance. When multiple concurrent applications are on the wireless network each application may have different latency and throughput needs. WMM provides for this optimization, however WMM may provide slower.')
zhoneCpeWlanMcastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 7), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanMcastFwd.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanMcastFwd.setDescription('Wireless Multicast Forwarding enables the ability to send wireless packets to be intercepted by all nodes in the transmission range of the sender.')
zhoneCpeWlanMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanMaxClients.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanMaxClients.setDescription('The maximum number of wireless client devices that may be simultaneously connected to the wireless network.')
zhoneCpeWlanNetAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("open", 1), ("shared", 2), ("dot1x", 3), ("wpa", 4), ("wpapsk", 5), ("wpa2", 6), ("wpa2psk", 7), ("mixedwpa2wpa", 8), ("mixedwpa2wpapsk", 9))).clone('open')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanNetAuthentication.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanNetAuthentication.setDescription('Configure the network authentication method.')
zhoneCpeWlanWpaGroupRekeyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanWpaGroupRekeyInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanWpaGroupRekeyInterval.setDescription('Wpa Group Rekey Interval.')
zhoneCpeWlanWpaEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aes", 1), ("tkipaes", 2))).clone('aes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanWpaEncryption.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanWpaEncryption.setDescription('WPA encryption mode.')
zhoneCpeWlanWepEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 12), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanWepEncryption.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanWepEncryption.setDescription('WEP encryption mode.')
zhoneCpeWlanWepStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bit64", 1), ("bit128", 2))).clone('bit128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanWepStrength.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanWepStrength.setDescription('WEP encryption strength.')
zhoneCpeWlanRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanRadiusServerIp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanRadiusServerIp.setDescription('IP address of the Remote Authentication Dial In User Server (RADIUS) used for 802.1x authentication. Default is 0.0.0.0.')
zhoneCpeWlanRadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanRadiusPort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanRadiusPort.setDescription('UDP port to use for accessing the Remote Authentication Dial In User Server (RADIUS).')
zhoneCpeWlanWpa2PreAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 16), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanWpa2PreAuthentication.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanWpa2PreAuthentication.setDescription('Enable or disable WPA2 pre-authentication.')
zhoneCpeWlanNetReAuthenticationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 23, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(36000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanNetReAuthenticationInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanNetReAuthenticationInterval.setDescription('Configure the WPA2 network re-authentication time, in seconds.')
zhoneCpeStaticRouteList = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 24))
if mibBuilder.loadTexts: zhoneCpeStaticRouteList.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteList.setDescription('Cpe Static Route List objects.')
zhoneCpeStaticRouteListIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeStaticRouteListIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteListIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeStaticRouteListIndex when creating entries in the zhoneCpeStaticRouteListTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeStaticRouteListIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeStaticRouteListTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 24, 2), )
if mibBuilder.loadTexts: zhoneCpeStaticRouteListTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteListTable.setDescription('Cpe Static Route List table.')
zhoneCpeStaticRouteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 24, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeStaticRouteListIndex"))
if mibBuilder.loadTexts: zhoneCpeStaticRouteListEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteListEntry.setDescription('Row in the Cpe Static Route List table.')
zhoneCpeStaticRouteListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 24, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeStaticRouteListIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteListIndex.setDescription('This represents the CPE Static Route List index value.')
zhoneCpeStaticRouteListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 24, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeStaticRouteListRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteListRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeStaticRouteListProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 24, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeStaticRouteListProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteListProfileName.setDescription('CPE Static Route List profile. This field is only writable upon creation and must be unique within its table.')
zhoneCpeStaticRoute = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25))
if mibBuilder.loadTexts: zhoneCpeStaticRoute.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRoute.setDescription('Cpe Static Route Entry objects.')
zhoneCpeStaticRouteIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 1), )
if mibBuilder.loadTexts: zhoneCpeStaticRouteIndexTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteIndexTable.setDescription('Table of next available index values for CPE static route entry profile.')
zhoneCpeStaticRouteIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 1, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeStaticRouteListIndex"))
if mibBuilder.loadTexts: zhoneCpeStaticRouteIndexEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteIndexEntry.setDescription('Row in the zhoneCpeStaticRouteEntryIndexTable.')
zhoneCpeStaticRouteEntryIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeStaticRouteEntryIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteEntryIndexNext.setDescription('This represents the next available index value for the cpe static route entry profile.')
zhoneCpeStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 2), )
if mibBuilder.loadTexts: zhoneCpeStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteTable.setDescription('Cpe Static Route Entry table.')
zhoneCpeStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeStaticRouteListIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeStaticRouteEntryIndex"))
if mibBuilder.loadTexts: zhoneCpeStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteEntry.setDescription('Row in the Cpe Static Route Entry table.')
zhoneCpeStaticRouteEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeStaticRouteEntryIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteEntryIndex.setDescription('This represents the CPE Static Route Entry Entry Index.')
zhoneCpeStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeStaticRouteDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeStaticRouteDestinationIp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteDestinationIp.setDescription('The IP address of the destination network or host. Default is 0.0.0.0. ')
zhoneCpeStaticRouteNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 2, 1, 4), IpAddress().clone(hexValue="ffffff00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeStaticRouteNetmask.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteNetmask.setDescription('Destination subnet mask. A value of 0.0.0.0 indicates no destination subnet mask is specified. Default is 255.255.255.0.')
zhoneCpeStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeStaticRouteGateway.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteGateway.setDescription('Next hop IpAddress. Default value is 0.0.0.0.')
zhoneCpeStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 25, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeStaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteMetric.setDescription('Number of hops to reach the destination. A value of 0 indicates this metric is not used.')
zhoneCpePortFwdList = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 26))
if mibBuilder.loadTexts: zhoneCpePortFwdList.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdList.setDescription('Cpe Port Fwd List objects.')
zhoneCpePortFwdListIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpePortFwdListIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdListIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpePortFwdListIndex when creating entries in the zhoneCpePortFwdListTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpePortFwdListIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpePortFwdListTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 26, 2), )
if mibBuilder.loadTexts: zhoneCpePortFwdListTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdListTable.setDescription('Cpe Port Fwd List table.')
zhoneCpePortFwdListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 26, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpePortFwdListIndex"))
if mibBuilder.loadTexts: zhoneCpePortFwdListEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdListEntry.setDescription('Row in the Cpe Port Fwd List table.')
zhoneCpePortFwdListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 26, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpePortFwdListIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdListIndex.setDescription('This represents the CPE Port Fwd List index value.')
zhoneCpePortFwdListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 26, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdListRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdListRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpePortFwdListProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 26, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdListProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdListProfileName.setDescription('CPE Port Fwd List profile. This field is only writable upon creation and must be unique within its table.')
zhoneCpePortFwd = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27))
if mibBuilder.loadTexts: zhoneCpePortFwd.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwd.setDescription('Cpe Port Fwd Entry objects.')
zhoneCpePortFwdIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 1), )
if mibBuilder.loadTexts: zhoneCpePortFwdIndexTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdIndexTable.setDescription('Table of next available index values for CPE port fwd entry profile.')
zhoneCpePortFwdIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 1, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpePortFwdListIndex"))
if mibBuilder.loadTexts: zhoneCpePortFwdIndexEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdIndexEntry.setDescription('Row in the zhoneCpePortFwdEntryIndexTable.')
zhoneCpePortFwdEntryIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpePortFwdEntryIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdEntryIndexNext.setDescription('This represents the next available index value for the cpe port fwd entry profile.')
zhoneCpePortFwdTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2), )
if mibBuilder.loadTexts: zhoneCpePortFwdTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdTable.setDescription('Description.')
zhoneCpePortFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpePortFwdListIndex"), (0, "Zhone-CPE-MIB", "zhoneCpePortFwdEntryIndex"))
if mibBuilder.loadTexts: zhoneCpePortFwdEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdEntry.setDescription('Description.')
zhoneCpePortFwdEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpePortFwdEntryIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdEntryIndex.setDescription('This represents the CPE Port Fwd Entry Entry Index.')
zhoneCpePortFwdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpePortFwdType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dmz", 1), ("portrange", 2), ("portremap", 3))).clone('dmz')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdType.setDescription('portRange - Range indicates that any traffic on those ports will be sent to the private IP address. portRemap - Remap indicates that any traffic on those ports will be sent to the private IP address at the private port. dmz - When DMZ is chosen it is the only rule allowed on that interface. A DMZ rule is effectively the same as a rule with all ports included. Range rules are more secure than setting a DMZ rule, because Range rules allow ports or groups of ports to be opened up. ')
zhoneCpePortFwdPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdPortStart.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdPortStart.setDescription('Lowest value port number for the range.')
zhoneCpePortFwdPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdPortEnd.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdPortEnd.setDescription('Highest value port number for the range. This can be equal to port-start if there is only one port.')
zhoneCpePortFwdProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("tcp", 2), ("udp", 3), ("tcpudp", 4), ("icmp", 5), ("icmpv4", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdProtocol.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdProtocol.setDescription('Indicate which protocols to monitor for the port numbers.')
zhoneCpePortFwdPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdPrivatePort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdPrivatePort.setDescription('The port number with which to send the traffic.')
zhoneCpePortFwdPrivateIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 27, 2, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpePortFwdPrivateIp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdPrivateIp.setDescription('The port IP Address with which to send the traffic. The default value is 0.0.0.0.')
zhoneCpeServiceApplication = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28))
if mibBuilder.loadTexts: zhoneCpeServiceApplication.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplication.setDescription('CPE Service Application for CPEs.')
zhoneCpeServiceApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1), )
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTable.setDescription('Cpe Service Application table for CPEs.')
zhoneCpeServiceApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeServiceApplicationTemplateType"), (0, "Zhone-CPE-MIB", "zhoneCpeServiceApplicationTemplateId"), (0, "Zhone-CPE-MIB", "zhoneCpeIfIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeServiceApplicationVirtualConnection"), (0, "Zhone-CPE-MIB", "zhoneCpeServiceApplicationTpType"), (0, "Zhone-CPE-MIB", "zhoneCpeServiceApplicationTpIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeServiceApplicationVlan"), (0, "Zhone-CPE-MIB", "zhoneCpeServiceApplicationSlan"))
if mibBuilder.loadTexts: zhoneCpeServiceApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationEntry.setDescription('Row in the CpeServiceApplication table.')
zhoneCpeServiceApplicationTemplateType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1, 1), ZhoneCpeTemplateType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTemplateType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTemplateType.setDescription('This represents the Template type associated with the service. For example, VOIP, Data, Video, PWE etc.')
zhoneCpeServiceApplicationTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTemplateId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTemplateId.setDescription('This represents the Template id of the cpe service application. Template ID is maitntained by the device manager. Template ID is asigned based on the service application configured on the CPE.')
zhoneCpeServiceApplicationVirtualConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneCpeServiceApplicationVirtualConnection.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationVirtualConnection.setDescription('This represents the Virtual connection of the cpe service application. For example, in case of GPON CPE, GEM port is the virtual connection.')
zhoneCpeServiceApplicationTpType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1, 4), TpType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTpType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTpType.setDescription('This represents the Transport point (TP) in the CPE. For example, ethernet, pots etc.')
zhoneCpeServiceApplicationTpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTpIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationTpIndex.setDescription('This represents the Transport point (TP) Number associated with the transport point type.')
zhoneCpeServiceApplicationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1, 6), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeServiceApplicationRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeServiceApplicationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1, 7), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneCpeServiceApplicationVlan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationVlan.setDescription('This field consists of vlan-cos (high-order 2 bytes) and vlan-id (low-order 2 bytes).')
zhoneCpeServiceApplicationSlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 28, 1, 1, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneCpeServiceApplicationSlan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationSlan.setDescription('This field consists of vlan-cos (high-order 2 bytes) and vlan-id (low-order 2 bytes).')
zhoneCpeDnsHostList = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 29))
if mibBuilder.loadTexts: zhoneCpeDnsHostList.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostList.setDescription('Dns Host List Objects.')
zhoneCpeDnsHostListIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 29, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeDnsHostListIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostListIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeDnsHostListIndex when creating entries in the zhoneCpeDnsHostListTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeDnsHostListIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeDnsHostListTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 29, 2), )
if mibBuilder.loadTexts: zhoneCpeDnsHostListTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostListTable.setDescription('The table of DNS host lists.')
zhoneCpeDnsHostListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 29, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeDnsHostListIndex"))
if mibBuilder.loadTexts: zhoneCpeDnsHostListEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostListEntry.setDescription('Row in the zhoneCpeDnsHostList table.')
zhoneCpeDnsHostListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 29, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: zhoneCpeDnsHostListIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostListIndex.setDescription('Index number for the zhoneCpeDnsHostList table entry.')
zhoneCpeDnsHostListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 29, 2, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDnsHostListRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostListRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeDnsHostListProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 29, 2, 1, 4), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDnsHostListProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostListProfileName.setDescription('Profile name for this cpe-dns-host profile. This must be unique, and is writable only on creation.')
zhoneCpeDnsHost = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30))
if mibBuilder.loadTexts: zhoneCpeDnsHost.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHost.setDescription('Cpe Dns host objects.')
zhoneCpeDnsHostIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 1), )
if mibBuilder.loadTexts: zhoneCpeDnsHostIndexTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostIndexTable.setDescription('Table of next available values for Dns Host Entry index.')
zhoneCpeDnsHostIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 1, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeDnsHostListIndex"))
if mibBuilder.loadTexts: zhoneCpeDnsHostIndexEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostIndexEntry.setDescription('Row in the zhoneCpeDnsHostIndex table.')
zhoneCpeDnsHostIndexEntryIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeDnsHostIndexEntryIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostIndexEntryIndexNext.setDescription('Next available entry index for row in zhoneCpeDnsHostTable.')
zhoneCpeDnsHostTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 2), )
if mibBuilder.loadTexts: zhoneCpeDnsHostTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostTable.setDescription('The table of Cpe Dns Host entries.')
zhoneCpeDnsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeDnsHostListIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeDnsHostEntryIndex"))
if mibBuilder.loadTexts: zhoneCpeDnsHostEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostEntry.setDescription('A row in the Cpe Dns Host table.')
zhoneCpeDnsHostEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneCpeDnsHostEntryIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostEntryIndex.setDescription('Index for this entry within the CpeDnsHost list.')
zhoneCpeDnsHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 2, 1, 2), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDnsHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeDnsHostDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDnsHostDomainName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostDomainName.setDescription('The domain name assigned to the host IP address. ')
zhoneCpeDnsHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 30, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeDnsHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostIpAddress.setDescription('Host IP address.')
zhoneCpeWlanAdvanced = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31))
if mibBuilder.loadTexts: zhoneCpeWlanAdvanced.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvanced.setDescription('Cpe Wlan Advanced objects.')
zhoneCpeWlanAdvIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeWlanAdvIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeWlanIndex when creating entries in the zhoneCpeWlanTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeWlanIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeWlanAdvancedTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2), )
if mibBuilder.loadTexts: zhoneCpeWlanAdvancedTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvancedTable.setDescription('Cpe Wlan Advanced table.')
zhoneCpeWlanAdvancedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeWlanAdvIndex"))
if mibBuilder.loadTexts: zhoneCpeWlanAdvancedEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvancedEntry.setDescription('Row in the Cpe Wlan Advanced table.')
zhoneCpeWlanAdvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: zhoneCpeWlanAdvIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvIndex.setDescription('This represents the CPE WLAN Advanced index value.')
zhoneCpeWlanAdvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 2), ZhoneRowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeWlanAdvProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvProfileName.setDescription('This field is only writable upon creation and must be unique within its table.')
zhoneCpeWlanAdvChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("auto", 1), ("c1", 2), ("c2", 3), ("c3", 4), ("c4", 5), ("c5", 6), ("c6", 7), ("c7", 8), ("c8", 9), ("c9", 10), ("c10", 11), ("c11", 12), ("c12", 13), ("c13", 14))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvChannel.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvChannel.setDescription("Defines which channel to use, or 'auto' for automatic selection of a channel with low interference. 802.11b and 802.11g use channels to limit interference from other devices. ")
zhoneCpeWlanAdvAutoChanTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvAutoChanTimer.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvAutoChanTimer.setDescription('When configured for auto mode, this timer value specifies how often (in minutes) to re-analyze the spectrum to select a low interference channel. Note: auto channel rescan will only occur when there are no actively connected devices.')
zhoneCpeWlanAdvDot11nMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("disabled", 2))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvDot11nMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvDot11nMode.setDescription('802.11n MIMO EWC modes of operation. 802.11n improves data rates via MIMO (multiple-input, multiple-output) using spatial streams which each have a channel width of 40 MHz or 20 MHz. Usage of 802.11n in the 2.4 and 5GHz modes should depend on interference with other 802.11 or bluetooth systems on the same frequency. Enhanced Wireless Consortium (EWC) provides extra enhancements (adding the ability to define 20 MHz channels).')
zhoneCpeWlanAdvDot11nRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("auto", 1), ("use54g", 2), ("rate6dot5m", 3), ("rate13m", 4), ("rate19dot5m", 5), ("rate26m", 6), ("rate39m", 7), ("rate58dot5m", 9), ("rate65m", 10), ("rate78m", 11), ("rate104m", 12), ("rate117m", 13), ("rate130m", 14))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvDot11nRate.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvDot11nRate.setDescription('Supported 802.11n MIMO rates, in Mbps.')
zhoneCpeWlanAdvDot1nProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("disabled", 2))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvDot1nProtection.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvDot1nProtection.setDescription('802.11n MIMO protection modes.')
zhoneCpeWlanAdvDot1nClientOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 9), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvDot1nClientOnly.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvDot1nClientOnly.setDescription('Enable or disable the restriction of access to 802.11n clients, only. When enabled, prevent 802.11b/g clients from connecting.')
zhoneCpeWlanAdvRate54G = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("auto", 1), ("rate1m", 2), ("rate2m", 3), ("rate5dot5m", 4), ("rate6m", 5), ("rate9m", 6), ("rate11m", 7), ("rate12m", 8), ("rate18m", 9), ("rate24m", 10), ("rate36m", 11), ("rate48m", 12), ("rate54m", 13))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvRate54G.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvRate54G.setDescription('The rate when the radio is operating in 802.11g mode. This object only applies when the Multiple Input Multiple Output (MIMO) 802.11n Rate is set to use 54g.')
zhoneCpeWlanAdvMcastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("auto", 1), ("rate1m", 2), ("rate2m", 3), ("rate5dot5m", 4), ("rate6m", 5), ("rate9m", 6), ("rate11m", 7), ("rate12m", 8), ("rate18m", 9), ("rate24m", 10), ("rate36m", 11), ("rate48m", 12), ("rate54m", 13))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvMcastRate.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvMcastRate.setDescription('The rate for the multicast traffic.')
zhoneCpeWlanAdvBasicRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("all", 2), ("rate1n2", 3), ("stdrates", 4))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvBasicRate.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvBasicRate.setDescription('The rate when the radio is operating in basic 802.11b/g mode.')
zhoneCpeWlanAdvFragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346)).clone(2346)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvFragmentationThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvFragmentationThreshold.setDescription('The threshold at which the packets are fragmented.')
zhoneCpeWlanAdvRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347)).clone(2347)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvRtsThreshold.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvRtsThreshold.setDescription('The packet size of a request-to-send (RTS) transmission. A low threshold implies RTS packets are sent more frequently, thus requiring more bandwidth but ensuring packet transmission on a busy network.')
zhoneCpeWlanAdvDtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvDtimInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvDtimInterval.setDescription('The interval at which Delivery Traffic Indication Messages (DTIM) are generated. A DTIM message notifies a wireless client that a packet is waiting for transmission.')
zhoneCpeWlanAdvBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvBeaconInterval.setDescription('The interval at which Beacons are generated.')
zhoneCpeWlanAdvGlobalMaxClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvGlobalMaxClients.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvGlobalMaxClients.setDescription('The maximum number of wireless client devices that may be simultaneously connected to the radio. This value should include the sum total of all active SSIDs.')
zhoneCpeWlanAdvXpressTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 18), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvXpressTechnology.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvXpressTechnology.setDescription('Enable or disable the XPress(TM) Technology.')
zhoneCpeWlanAdvTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvTxPower.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvTxPower.setDescription('The percentage of total power that should be used for data transmissions.')
zhoneCpeWlanAdvWmm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 20), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvWmm.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvWmm.setDescription('Enable or disable Wifi Multimedia. When set to TRUE, audio, video and voice application data is prioritized over other network traffic.')
zhoneCpeWlanAdvWmmNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 21), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvWmmNoAck.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvWmmNoAck.setDescription('Enable or disable the suppression of acknowledgements for frames that do not require a QOS Acknowledgement. This avoids the unnecessary transmission of acknowledgements for highly time-critical data.')
zhoneCpeWlanAdvWmmApsd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 22), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvWmmApsd.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvWmmApsd.setDescription('Enable or disable the Automatic Power Save Delivery (APSD) power management method. This feature is useful for bi-directional applications, such as VoIp phones.')
zhoneCpeWlanAdvApMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accesspoint", 1), ("wirelessbridge", 2))).clone('accesspoint')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvApMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvApMode.setDescription('Wireless bridge modes of operation.')
zhoneCpeWlanAdvBridgeRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("enabledscan", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvBridgeRestrict.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvBridgeRestrict.setDescription('Wireless Bridge Restriction Modes of operation.')
zhoneCpeWlanAdvWps = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 25), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvWps.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvWps.setDescription('Enable or disable WiFi Protected Setup (WPS) security method. If WPS is enabled, the network authentication method, the data encryption, and network key should also be configured in order to authenticate to this wireless network. It is available for WPA-PSK, WPA2-PSK, Mixed WPA2/WPA-PSK and Open Network Authentication methods.')
zhoneCpeWlanAdvWpsAddClientMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pushbutton", 1), ("stapin", 2), ("appin", 3))).clone('pushbutton')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvWpsAddClientMethod.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvWpsAddClientMethod.setDescription('A client can be added via three different methods.')
zhoneCpeWlanAdvWpsApMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 31, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("unconfigured", 2))).clone('configured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeWlanAdvWpsApMode.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvWpsApMode.setDescription('If the provider is using an external registrar for security, select configured. The PIN for AP mode is specified by the registrar. Provide this PIN to the client. Issue Config AP to begin the registration process with the client.')
zhoneCpeCondDhcpSrvList = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 32))
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvList.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvList.setDescription('Conditional DHCP server list objects')
zhoneCpeCondiDhcpSrvListIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeCondiDhcpSrvListIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondiDhcpSrvListIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeCondDhcpSrvListIndex when creating entries in the zhoneCpeCondDhcpSrvListTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeCondDhcpSrvListIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeCondDhcpSrvListTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 32, 2), )
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListTable.setDescription('Table in which each entry is a list of conditional dhcp server rules.')
zhoneCpeCondDhcpSrvListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 32, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvListIndex"))
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListEntry.setDescription('Row in conditional DHCP server list table')
zhoneCpeCondDhcpSrvListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 32, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListIndex.setDescription('Index number for this cpe conditional dhcp server list. This is the number that goes into the cpe-dhcp-server record.')
zhoneCpeCondDhcpSrvListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 32, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeCondDhcpSrvListProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 32, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListProfileName.setDescription('Profile name for this cpe-cond-dhcp-srv-list profile. This must be unique, and is writable only on creation.')
zhoneCpeCondDhcpSrv = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33))
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrv.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrv.setDescription('Conditional DHCP server objects')
zhoneCpeCondDhcpSrvIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 1), )
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvIndexTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvIndexTable.setDescription('Table of next available indexes for each conditional DHCP server list.')
zhoneCpeCondDhcpSrvIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 1, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvListIndex"))
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvIndexEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvIndexEntry.setDescription('Row in the conditional DHCP server index table.')
zhoneCpeCondDhcpSrvIndexEntryIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvIndexEntryIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvIndexEntryIndexNext.setDescription('Next available index for a conditional DHCP server list.')
zhoneCpeCondDhcpSrvTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2), )
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvTable.setDescription('Table of conditional DHCP server data.')
zhoneCpeCondDhcpSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvListIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvEntryIndex"))
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvEntry.setDescription('Row inf the conditional DHCP server table')
zhoneCpeCondDhcpSrvEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvEntryIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvEntryIndex.setDescription('The entry index within the conditional DHCP server list')
zhoneCpeCondDhcpSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvRowStatus.setDescription('The row status for adding and deleting rows.')
zhoneCpeCondDhcpSrvAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 3), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvAdminState.setDescription('Enable/disable this rule. Disabling allows rule to be temporarily unavailable for testing or debug purposes.')
zhoneCpeCondDhcpSrvPriorityOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPriorityOrder.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPriorityOrder.setDescription('When multiple Conditional DHCP Rules are applied to the same physical port and an ingress packet matches more than one rule, the rule with the highest Priority will be applied. The default priority is for rules to be applied in the order created.')
zhoneCpeCondDhcpVciOui = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 5), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpVciOui.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpVciOui.setDescription('This field is for Vendor Class Identifier (Option 60) or Organizationally Unique Identifier. Conditional DHCP Rules classify ingress packets based on a matching OUI, or based on a matching DHCP Option 60 string value. OUI is the first 3 bytes of a MAC, separated by colons (e.g. 00:02:71). VCI is the text string included in the Option 60. When an attached device sends a DHCP Discover packet to request a dynamically assigned IP Address, it may include this Option 60 string to identify what type of device it is. ')
zhoneCpeCondDhcpSrvVciMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("prefix", 1), ("suffix", 2), ("substring", 3))).clone('prefix')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvVciMatch.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvVciMatch.setDescription('VCI, the Option 60 String included in the DHCP Discover packet, may be up to 255 characters long, while the vci-oui field supports a maximum of 32 characters. This configuration option specifies where to look in the entire Option 60 string for a match. Choices are at the beginning (Prefix), at the end (Suffix), or anywhere in the string (Substring). ')
zhoneCpeCondDhcpSrvStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvStartAddr.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvStartAddr.setDescription('Starting IP Address for the subnet range associated with this rule. Must be in the same subnet as the LAN IP Interface for this VLAN. Every Conditional DHCP Rule should have a unique range of IP Addresses within the LAN Subnet (non-overlapping). ')
zhoneCpeCondDhcpSrvEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvEndAddr.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvEndAddr.setDescription('Last ip address associated with this rule.')
zhoneCpeCondDhcpSrvWanVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvWanVlan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvWanVlan.setDescription('VLAN ID of the WAN interface that shall be used as the default forwarding path for all packets received with an IP address in this subnet. This feature enables automatic forwarding of packets sourced by a Conditional DHCP Client device to a different Default Gateway (based on the VLAN ID). ')
zhoneCpeCondDhcpSrvPortFwdRule = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 10), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPortFwdRule.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPortFwdRule.setDescription('When enabled, a Static Port Forwarding Firewall Rule will automatically be created for each client device assigned an IP Address based on this rule. ')
zhoneCpeCondDhcpSrvStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65501)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvStartPort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvStartPort.setDescription('WAN-side Port Number of the Port Forwarding Rule that will be automatically created for the Conditional DHCP client assigned the Starting IP Address defined for this rule. The WAN-side Port Number will increment by 1 for each new client device. ')
zhoneCpeCondDhcpSrvPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPrivatePort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPrivatePort.setDescription('The LAN-side Port Number of the Port Forwarding Rule that will be bound to the private IP Address assigned to each client. This Port Number is typically assigned based on the application that the Port Forwarding Rule will be used for. For example, if the Rule will be used to enable on-demand SSH connections to client devices with conditional IP Addresses, then the Private Port will be 22. ')
zhoneCpeCondDhcpSrvProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("both", 3))).clone('tcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvProtocol.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvProtocol.setDescription('Defines what type of packets will be allowed through the Static Port Forwarding Rule. ')
zhoneCpeCondDhcpSrvPriDns = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPriDns.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPriDns.setDescription('Defines the Option 6 Primary DNS IP Addresses that will be included in the DHCP Offer to Conditional DHCP client devices matching this rule. ')
zhoneCpeCondDhcpSrvSecDns = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 15), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvSecDns.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvSecDns.setDescription('Defines the Option 6 Secondary DNS IP Addresses that will be included in the DHCP Offer to Conditional DHCP client devices matching this rule. ')
zhoneCpeCondDhcpSrvPriNpt = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 16), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPriNpt.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPriNpt.setDescription('Defines the Option 42 Primary NTP IP Addresses that will be included in the DHCP Offer to Conditional DHCP client devices matching this rule. NOTE that Option 2 (Timezone Offset) will also be included in the DHCP Offer. The Option 2 value will be automatically populated by the ONT, based on what it was assigned on an uplink interface with DHCP client enabled. ')
zhoneCpeCondDhcpSrvSecNpt = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 17), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvSecNpt.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvSecNpt.setDescription('Defines the Option 42 Secondary NTP IP Addresses that will be included in the DHCP Offer to Conditional DHCP client devices matching this rule. ')
zhoneCpeCondDhcpSrvVsi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 18), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvVsi.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvVsi.setDescription('Vendor Specific Information (Option 43) is a user-configured text string of up to 32 characters with no restrictions on format or content. Required by some DHCP client devices for specific applications and/or boot up procedures. ')
zhoneCpeCondDhcpSrvPermanent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 33, 2, 1, 19), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPermanent.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvPermanent.setDescription('When enabled, IP Addresses are permanently bound to the MAC address of the device they are assigned to. DHCP Lease table will show permanent entries for each host.')
zhoneCpeCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34))
zhoneCpeCmdOperation = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 10, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 40, 41, 42, 60, 61, 70, 80))).clone(namedValues=NamedValues(("deleteSlot", 1), ("deletePort", 2), ("deleteCpe", 3), ("deleteUni", 4), ("deleteService", 5), ("moveSlotToSlot", 10), ("movePortToPort", 11), ("moveCpeToCpe", 12), ("moveUniToUni", 13), ("moveServiceToService", 15), ("cloneSlotToSlot", 20), ("clonePortToPort", 21), ("cloneCpeToCpe", 22), ("cloneUniToUni", 23), ("cloneServiceToService", 24), ("cloneCpeToSlot", 25), ("cloneCpeToPort", 26), ("applyCpeToSlot", 40), ("applyCpeToPort", 41), ("applyCpeToCpe", 42), ("createVirtualCpe", 60), ("deleteVirtualCpe", 61), ("applySvcToCpe", 70), ("removeSvcFromCpe", 80)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdOperation.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdOperation.setDescription('The Command operation to be performed. The command operation will determine which of the other zhoneCpeCmd objects will be used. The DELETE commands delete configuration. The MOVE commands copy configuration from source to destination. Source configuration is deleted. The CLONE commands copy configuration from source to destination. Source configuration is perserved. Destination configuration befor clone operation is deleted. The APPLY commands copy configuration from source to destination. Source configuration is perserved. Destination configuration prior to appy operation is preserved. ')
zhoneCpeCmdSrcIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSrcIfIndex.setDescription('Command SOURCE ifIndex. Using this object overwrites source shelf/slot/port/subPort objects. This object must be used for virtual CPEs.')
zhoneCpeCmdSrcShelf = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSrcShelf.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSrcShelf.setDescription('Command SOURCE shelf')
zhoneCpeCmdSrcSlot = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSrcSlot.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSrcSlot.setDescription('Command SOURCE slot')
zhoneCpeCmdSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSrcPort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSrcPort.setDescription('Command SOURCE port.')
zhoneCpeCmdSrcSubport = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSrcSubport.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSrcSubport.setDescription('Command SOURCE subPort.')
zhoneCpeCmdSrcTpType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 7), TpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSrcTpType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSrcTpType.setDescription('Command SOURCE tpType.')
zhoneCpeCmdSrcTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSrcTpIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSrcTpIndex.setDescription('Command SOURCE tpIndex')
zhoneCpeCmdDstIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdDstIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdDstIfIndex.setDescription('Command DESTINATION ifIndex. Using this object overwrites destination shelf/slot/port/subPort objects. This object must be used for virtual CPEs.')
zhoneCpeCmdDstShelf = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdDstShelf.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdDstShelf.setDescription('Command DESTINATION shelf')
zhoneCpeCmdDstSlot = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdDstSlot.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdDstSlot.setDescription('Command DESTINATION slot')
zhoneCpeCmdDstPort = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdDstPort.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdDstPort.setDescription('Command DESTINATION port.')
zhoneCpeCmdDstSubport = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdDstSubport.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdDstSubport.setDescription('Command DESTINATION subPort.')
zhoneCpeCmdDstTpType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 14), TpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdDstTpType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdDstTpType.setDescription('Command DESTINATION tpType.')
zhoneCpeCmdDstTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdDstTpIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdDstTpIndex.setDescription('Command DESTINATION tpIndex')
zhoneCpeCmdString = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 16), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdString.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdString.setDescription('General purpose string parameter. Used to specify names or other string values.')
zhoneCpeCmdSvcTemplateType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 17), ZhoneCpeTemplateType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateType.setDescription('Command cpe service template type.')
zhoneCpeCmdSvcTemplateId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateId.setDescription('Command cpe service template indentification.')
zhoneCpeCmdSvcTemplateIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateIfIndex.setDescription('Command cpe service template destintation CPE ifIndex.')
zhoneCpeCmdSvcTemplateVirtualConn = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateVirtualConn.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateVirtualConn.setDescription('Command cpe service template source CPE ifIndex. Also known as the virutal CPE ifIndex.')
zhoneCpeCmdSvcTemplateTpType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 21), TpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateTpType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateTpType.setDescription('Command cpe service tpType. A zero value means all TpTypes on the destination CPE.')
zhoneCpeCmdSvcTemplateTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateTpIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateTpIndex.setDescription('Command cpe service DESTINATION tpIndex. A zero value means all UNI ports of the destination CPE.')
zhoneCpeCmdSvcTemplateVlan = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateVlan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateVlan.setDescription('Command cpe service VLAN, consisting of vlan cos (high order 16 bits) and vlan ID (low order 16 bits).')
zhoneCpeCmdSvcTemplateSlan = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateSlan.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdSvcTemplateSlan.setDescription('Command cpe service SLAN, consisting of slan cos (high order 16 bits) and slan ID (low order 16 bits).')
zhoneCpeCmdOverrideTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdOverrideTpIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdOverrideTpIndex.setDescription('If set, use this as the uni number to which the service on the target CPE is applied.')
zhoneCpeCmdOverrideVlanId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdOverrideVlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdOverrideVlanId.setDescription('If set, use this vlanId on the destination CPE.')
zhoneCpeCmdOverrideVlanCos = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdOverrideVlanCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdOverrideVlanCos.setDescription('If set, use this value as the vlan cos on the destination CPE.')
zhoneCpeCmdOverrideSlanId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdOverrideSlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdOverrideSlanId.setDescription('If set, use this slanId on the destination CPE.')
zhoneCpeCmdOverrideSlanCos = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 34, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCmdOverrideSlanCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdOverrideSlanCos.setDescription('If set, use this slan cos on the destination CPE.')
zhoneCpeLldpMedPolicyList = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 35))
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyList.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyList.setDescription('Link Layer Discovery Protocol MED network policy list objects')
zhoneCpeLldpMedPolicyListIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListIndexNext.setDescription('This object contains an appropriate value to be used for the zhoneCpeLldpMedPolicyListIndex when creating entries in the zhoneCpeLldpMedPolicyListTable. The value 0 indicates that no unassigned entries are available. To obtain the zhoneCpeLldpMedPolicyListIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhoneCpeLldpMedPolicyListTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 35, 2), )
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListTable.setDescription('Table in which each entry is a list of LLDP-MED network policy rules.')
zhoneCpeLldpMedPolicyListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 35, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyListIndex"))
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListEntry.setDescription('Row in LLDP-MED network policy list table')
zhoneCpeLldpMedPolicyListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 35, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListIndex.setDescription('This represents the CPE LLDP-MED network policy index value.')
zhoneCpeLldpMedPolicyListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 35, 2, 1, 2), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeLldpMedPolicyListProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 35, 2, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListProfileName.setDescription('Profile name for this cpe-lldp-med-policy-list profile. This must be unique, and is writable only on creation.')
zhoneCpeLldpMedPolicy = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36))
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicy.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicy.setDescription('Link Layer Discover Protocol MED network policy objects')
zhoneCpeLldpMedPolicyIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 1), )
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyIndexTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyIndexTable.setDescription('Table of next available indexes for each LLDP-MED network policy.')
zhoneCpeLldpMedPolicyIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 1, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyListIndex"))
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyIndexEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyIndexEntry.setDescription('Row in the zhoneCpeLldpMedPolicyIndex table.')
zhoneCpeLldpMedPolicyIndexEntryIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyIndexEntryIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyIndexEntryIndexNext.setDescription('Next available entry index for row in zhoneCpeLldpMedPolicyTable.')
zhoneCpeLldpMedPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2), )
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyTable.setDescription('The table of Cpe Lldp Med Policy entries.')
zhoneCpeLldpMedPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyListIndex"), (0, "Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyEntryIndex"))
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyEntry.setDescription('A row in the Cpe Lldp Med Policy table.')
zhoneCpeLldpMedPolicyEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyEntryIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyEntryIndex.setDescription('The entry index within the LLDP-MED network policy list')
zhoneCpeLldpMedPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2, 1, 2), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyRowStatus.setDescription('Used to create, modify or delete an entry in this table.')
zhoneCpeLldpMedPolicyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2, 1, 3), ZhoneEnabledFlag().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyAdminState.setDescription('Enable/disable the network policy.')
zhoneCpeLldpMedPolicyAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("voice", 1), ("voicesignal", 2), ("guestvoice", 3), ("guestvoicesignal", 4), ("softphone", 5), ("videoconf", 6), ("videostreaming", 7), ("videosignal", 8))).clone('voice')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyAppType.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyAppType.setDescription('The media type that defines the primary function of the application for the policy advertised by an endpoint.')
zhoneCpeLldpMedPolicyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyVlanId.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyVlanId.setDescription('The VLAN ID of the application for the policy advertised by an endpoint.')
zhoneCpeLldpMedPolicyCos = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyCos.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyCos.setDescription('The Class-Of-Service of the application for the policy advertised by an endpoint.')
zhoneCpeLldpMedPolicyDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 36, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyDscp.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyDscp.setDescription('This parameter indicates DSCP value for cpe lldp med policy traffic. Valid code values: <0-63> Differentiated services codepoint value af11 Mark packets with AF11 dscp (001010) af12 Mark packets with AF12 dscp (001100) af13 Mark packets with AF13 dscp (001110) af21 Mark packets with AF21 dscp (010010) af22 Mark packets with AF22 dscp (010100) af23 Mark packets with AF23 dscp (010110) af31 Mark packets with AF31 dscp (011010) af32 Mark packets with AF32 dscp (011100) af33 Mark packets with AF33 dscp (011110) af41 Mark packets with AF41 dscp (100010) af42 Mark packets with AF42 dscp (100100) af43 Mark packets with AF43 dscp (100110) cs1 Mark packets with CS1(precedence 1) dscp (001000) cs2 Mark packets with CS2(precedence 2) dscp (010000) cs3 Mark packets with CS3(precedence 3) dscp (011000) cs4 Mark packets with CS4(precedence 4) dscp (100000) cs5 Mark packets with CS5(precedence 5) dscp (101000) cs6 Mark packets with CS6(precedence 6) dscp (110000) cs7 Mark packets with CS7(precedence 7) dscp (111000) default Mark packets with default dscp (000000) ef Mark packets with EF dscp (101110) ')
zhoneCpeAutoCfgRule = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37))
if mibBuilder.loadTexts: zhoneCpeAutoCfgRule.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRule.setDescription('Rule for selecting template to apply for CPE auto-configuration.')
zhoneCpeAutoCfgRuleIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleIndexNext.setDescription('Next available entry in zhoneCpeAutoCfgRuleTable.')
zhoneCpeAutoCfgRuleTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2), )
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleTable.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleTable.setDescription('Table of rules for selecting templates to apply in auto-configuration.')
zhoneCpeAutoCfgRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1), ).setIndexNames((0, "Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleIndex"))
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleEntry.setDescription('Row in the auto-config rule table.')
zhoneCpeAutoCfgRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleIndex.setDescription('This represents the index in the auto-cfg-rule table.')
zhoneCpeAutoCfgRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 2), ZhoneAdminState().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleAdminState.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleAdminState.setDescription('If down, this rule will not participate in rule matching.')
zhoneCpeAutoCfgRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRulePriority.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRulePriority.setDescription('1 is the lowest priority. When conflicting rules match, the one with the hightest priority is used.')
zhoneCpeAutoCfgRuleMatchExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleMatchExpression.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleMatchExpression.setDescription('Logical expression telling which CPEs should be configured according to this rule. elements are: keyword followed by value. Multiple elements can be connected with AND. Keywords are: model - specified model ID slot - specifies slot number or numbers olt - specifies GPON OLT number or numbers example: model 2426 AND slot 6 AND olt 1-4,7 In this example, apply to model 2426 discovered on olts 1, 2, 3, 4, or 7 on slot 6.')
zhoneCpeAutoCfgRuleServiceTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleServiceTemplate.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleServiceTemplate.setDescription('The ifIndex of the virtual ONU supplying the service template for this rule.')
zhoneCpeAutoCfgRuleTargetUni = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleTargetUni.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleTargetUni.setDescription("Which unis from the template should be applied by this rule. This consists of a uni type followed by one or more uni numbers, separated by commas, or with ranges indicated by '-'. The word 'all' may be used to indicate all ports of that type. example: eth 1-3 In this example, apply services on the provisioned ethernet port on the service template to ethernet ports 1, 2, and 3 of the matched CPE. If this field is blank, then the entire service template is applied to the CPE. ")
zhoneCpeAutoCfgRuleDeleteBeforeApply = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleDeleteBeforeApply.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleDeleteBeforeApply.setDescription('If true, any existing services on the target unis are removed prior to applying the service template. If the targetUni field is blank and this field is true, then all services on the CPE are removed before the service template is applied.')
zhoneCpeAutoCfgRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 8), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleRowStatus.setDescription('Use to create, modify, or delete a row in this table.')
zhoneCpeAutoCfgRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 37, 2, 1, 9), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleProfileName.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleProfileName.setDescription('The profile name of the rule.')
zhoneCpeCfgGlobalSettings = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 38))
if mibBuilder.loadTexts: zhoneCpeCfgGlobalSettings.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCfgGlobalSettings.setDescription('System-wide settings for CPE config.')
zhoneCpeCfgAutoAssign = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 38, 1), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCfgAutoAssign.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCfgAutoAssign.setDescription('Automatically assign ONU IDs to discovered ONU serial numbers.')
zhoneCpeCfgAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 38, 2), ZhoneEnabledFlag().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCfgAutoConfig.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCfgAutoConfig.setDescription('When an ONU is auto-assigned, provision that ONU based on the matching auto config rule.')
zhoneCpeCfgParamsStr = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 16, 1, 38, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCpeCfgParamsStr.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCfgParamsStr.setDescription('Spare field for temporary parameters.')
zhoneCpeSipDialPlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 36)).setObjects(("Zhone-CPE-MIB", "zhoneCpeSipDialPlanRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeSipDialPlanIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeSipDialPlanFormat"), ("Zhone-CPE-MIB", "zhoneCpeSipDialPlanString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeSipDialPlanGroup = zhoneCpeSipDialPlanGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSipDialPlanGroup.setDescription('Cpe Sip Dial Plan Table objects.')
zhoneCpeVoipServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 37)).setObjects(("Zhone-CPE-MIB", "zhoneCpeVoipServerRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeVoipProfileName"), ("Zhone-CPE-MIB", "zhoneCpeVoipPrimaryServer"), ("Zhone-CPE-MIB", "zhoneCpeVoipSecondaryServer"), ("Zhone-CPE-MIB", "zhoneCpeVoipSipRegExpirationTime"), ("Zhone-CPE-MIB", "zhoneCpeVoipSipReRegHeadStartTime"), ("Zhone-CPE-MIB", "zhoneCpeVoipSipDomain"), ("Zhone-CPE-MIB", "zhoneCpeVoipSipRegistrar"), ("Zhone-CPE-MIB", "zhoneCpeVoipSoftSwitch"), ("Zhone-CPE-MIB", "zhoneCpeVoipMgcVersion"), ("Zhone-CPE-MIB", "zhoneCpeVoipMgcMessageFormat"), ("Zhone-CPE-MIB", "zhoneCpeVoipMgcMaximumRetryTime"), ("Zhone-CPE-MIB", "zhoneCpeVoipMgcMaximumRetryAttempts"), ("Zhone-CPE-MIB", "zhoneCpeVoipMgcServiceChangeDelay"), ("Zhone-CPE-MIB", "zhoneCpeVoipMgcTerminationIdBase"), ("Zhone-CPE-MIB", "zhoneCpeVoipReleaseTimer"), ("Zhone-CPE-MIB", "zhoneCpeVoipRohTimer"), ("Zhone-CPE-MIB", "zhoneCpeVoipDscpMark"), ("Zhone-CPE-MIB", "zhoneCpeVoipPiggyBackEvents"), ("Zhone-CPE-MIB", "zhoneCpeVoipOobToneEvents"), ("Zhone-CPE-MIB", "zhoneCpeVoipOobDtmfEvents"), ("Zhone-CPE-MIB", "zhoneCpeVoipOobCasEvents"), ("Zhone-CPE-MIB", "zhoneCpeVoipPartialDialTimeout"), ("Zhone-CPE-MIB", "zhoneCpeVoipServerSignallingProtocol"), ("Zhone-CPE-MIB", "zhoneCpeVoipServerPortId"), ("Zhone-CPE-MIB", "zhoneCpeVoipServerOutboundServer"), ("Zhone-CPE-MIB", "zhoneCpeVoipCasEventsPassingMethod"), ("Zhone-CPE-MIB", "zhoneCpeVoipDtmfEventsPassingMethod"), ("Zhone-CPE-MIB", "zhoneCpeVoipCriticalDialTimeout"), ("Zhone-CPE-MIB", "zhoneCpeVoipServerIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesWarmLineTimer"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesHotLineNumber"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesHotLine"), ("Zhone-CPE-MIB", "zhoneCpeVoipMgcpPersistentNotify"), ("Zhone-CPE-MIB", "zhoneCpeVoipMgcpClientAddressMode"), ("Zhone-CPE-MIB", "zhoneCpeVoipSignalingDscp"), ("Zhone-CPE-MIB", "zhoneCpeVoipRtpDscp"), ("Zhone-CPE-MIB", "zhoneCpeVoipSipRegRetryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeVoipServerGroup = zhoneCpeVoipServerGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipServerGroup.setDescription('Cpe Voip Server Table objects.')
zhoneCpeIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 38)).setObjects(("Zhone-CPE-MIB", "zhoneCpeIpRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeHostIp"), ("Zhone-CPE-MIB", "zhoneCpeIpServerProfileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeIpGroup = zhoneCpeIpGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpGroup.setDescription('Cpe Ip Table objects.')
zhoneCpeIpServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 39)).setObjects(("Zhone-CPE-MIB", "zhoneCpeIpServerRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeIpServerProfileName"), ("Zhone-CPE-MIB", "zhoneCpeIpServerHostIpOption"), ("Zhone-CPE-MIB", "zhoneCpeIpServerNetmask"), ("Zhone-CPE-MIB", "zhoneCpeIpServerGateway"), ("Zhone-CPE-MIB", "zhoneCpeIpServerPrimaryDns"), ("Zhone-CPE-MIB", "zhoneCpeIpServerNat"), ("Zhone-CPE-MIB", "zhoneCpeIpServerFirewallAccess"), ("Zhone-CPE-MIB", "zhoneCpeIpServerIgmpFunction"), ("Zhone-CPE-MIB", "zhoneCpeIpServerSecureForward"), ("Zhone-CPE-MIB", "zhoneCpeIpServerDnsType"), ("Zhone-CPE-MIB", "zhoneCpeIpServerDnsSrc"), ("Zhone-CPE-MIB", "zhoneCpeIpServerDefaultIface"), ("Zhone-CPE-MIB", "zhoneCpeIpServerSecondaryDns"), ("Zhone-CPE-MIB", "zhoneCpeIpServerIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeIpServerGroup = zhoneCpeIpServerGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeIpServerGroup.setDescription('Cpe Ip Server objects.')
zhoneCpeVoipFeaturesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 40)).setObjects(("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesProfileName"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesAnnouncementType"), ("Zhone-CPE-MIB", "zhoneCpeVoipCidFeatures"), ("Zhone-CPE-MIB", "zhoneCpeVoipCallWaitingFeatures"), ("Zhone-CPE-MIB", "zhoneCpeVoipCallProgressOrTransferFeatures"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesWarmLineTimer"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesHotLineNumber"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesHotLine"), ("Zhone-CPE-MIB", "zhoneCpeVoipCallPresentationFeatures"), ("Zhone-CPE-MIB", "zhoneCpeVoipServerIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeVoipFeaturesGroup = zhoneCpeVoipFeaturesGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipFeaturesGroup.setDescription('Cpe Voip Features Table objects.')
zhoneCpeVoipMediaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 41)).setObjects(("Zhone-CPE-MIB", "zhoneCpeVoipMediaRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeVoipMediaProfileName"), ("Zhone-CPE-MIB", "zhoneCpeVoipMediaEchoCancel"), ("Zhone-CPE-MIB", "zhoneCpeVoipFaxMode"), ("Zhone-CPE-MIB", "zhoneCpeVoipCodecSelectionFirstOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipPacketPeriodSelectionFirstOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipSilenceSuppressionFirstOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipCodecSelectionSecondOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipPacketPeriodSelectionSecondOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipSilenceSuppressionSecondOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipCodecSelectionThirdOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipPacketPeriodSelectionThirdOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipSilenceSuppressionThirdOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipCodecSelectionFourthOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipPacketPeriodSelectionFourthOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipSilenceSuppressionFourthOrder"), ("Zhone-CPE-MIB", "zhoneCpeVoipMediaIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeVoipMediaGroup = zhoneCpeVoipMediaGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipMediaGroup.setDescription('Cpe Voip Media Table objects.')
zhoneCpeVoipSubscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 42)).setObjects(("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberAdminState"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberDialNumber"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberDisplayName"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberUserName"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberPassword"), ("Zhone-CPE-MIB", "zhoneCpeVoipServerProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeVoipFeaturesProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberPhoneFollowsWan"), ("Zhone-CPE-MIB", "zhoneCpeVoipMediaProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberImpedance"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberRxGain"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberTxGain"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberTransmissionPath"), ("Zhone-CPE-MIB", "zhoneCpeVoipSubscriberSignallingCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeVoipSubscriberGroup = zhoneCpeVoipSubscriberGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVoipSubscriberGroup.setDescription('Cpe Voip Subscriber Table objects.')
zhoneCpeEthSubscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 43)).setObjects(("Zhone-CPE-MIB", "zhoneCpeEthSubscriberRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberAdminState"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberLoopback"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberLineStatusAlarm"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberAlarmSeverity"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberPowerRange"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberPowerShed"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberLldpMedList"), ("Zhone-CPE-MIB", "zhoneCpeVideoProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberRate"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberDuplex"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberMtu"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberPortType"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberPauseTime"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberMode"), ("Zhone-CPE-MIB", "zhoneCpeEthSubscriberPowerFeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeEthSubscriberGroup = zhoneCpeEthSubscriberGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeEthSubscriberGroup.setDescription('Cpe Eth Subscriber Table objects.')
zhoneCpeVideoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 44)).setObjects(("Zhone-CPE-MIB", "zhoneCpeVideoRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeVideoProfileName"), ("Zhone-CPE-MIB", "zhoneCpeVideoMaxSimultaneousGroups"), ("Zhone-CPE-MIB", "zhoneCpeVideoMaxMulticastBandwidth"), ("Zhone-CPE-MIB", "zhoneCpeVideoBandwidthEnforce"), ("Zhone-CPE-MIB", "zhoneCpeVideoIgmpVersion"), ("Zhone-CPE-MIB", "zhoneCpeVideoIgmpFunction"), ("Zhone-CPE-MIB", "zhoneCpeVideoImmediateLeave"), ("Zhone-CPE-MIB", "zhoneCpeVideoUpstreamIgmpRate"), ("Zhone-CPE-MIB", "zhoneCpeVideoRobustness"), ("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlList"), ("Zhone-CPE-MIB", "zhoneCpeVideoIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeVideoGroup = zhoneCpeVideoGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoGroup.setDescription('Cpe Video Table objects.')
zhoneCpeVideoAccessControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 45)).setObjects(("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlProfileName"), ("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlType"), ("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlSrcIp"), ("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlDstIpStart"), ("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlDstIpEnd"), ("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlImputedGroupBw"), ("Zhone-CPE-MIB", "zhoneCpeVideoAccessControlIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeVideoAccessControlGroup = zhoneCpeVideoAccessControlGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeVideoAccessControlGroup.setDescription('Cpe Video Access Control List Table objects.')
zhoneCpePweSubscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 46)).setObjects(("Zhone-CPE-MIB", "zhoneCpePweSubscriberRowStatus"), ("Zhone-CPE-MIB", "zhoneCpePweSubscriberAdminState"), ("Zhone-CPE-MIB", "zhoneCpePweSubscriberLoopback"), ("Zhone-CPE-MIB", "zhoneCpePweSubscriberNearEndPort"), ("Zhone-CPE-MIB", "zhoneCpePweSubscriberFarEndIp"), ("Zhone-CPE-MIB", "zhoneCpePweSubscriberFarEndPort"), ("Zhone-CPE-MIB", "zhoneCpePweSubscriberAlarmSeverity"), ("Zhone-CPE-MIB", "zhoneCpePweSubscriberLineStatusAlarm"), ("Zhone-CPE-MIB", "zhoneCpePweProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpePweSubscriberLineLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpePweSubscriberGroup = zhoneCpePweSubscriberGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweSubscriberGroup.setDescription('Cpe Pwe Subscriber Table objects.')
zhoneCpePweGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 47)).setObjects(("Zhone-CPE-MIB", "zhoneCpePweRowStatus"), ("Zhone-CPE-MIB", "zhoneCpePweProfileName"), ("Zhone-CPE-MIB", "zhoneCpePweTransport"), ("Zhone-CPE-MIB", "zhoneCpePweServiceType"), ("Zhone-CPE-MIB", "zhoneCpePwePayloadSize"), ("Zhone-CPE-MIB", "zhoneCpePwePayloadEncapsulationDelay"), ("Zhone-CPE-MIB", "zhoneCpePweTimingMode"), ("Zhone-CPE-MIB", "zhoneCpePweChannelAssign"), ("Zhone-CPE-MIB", "zhoneCpePweClockReference"), ("Zhone-CPE-MIB", "zhoneCpePweRtpTimeStampMode"), ("Zhone-CPE-MIB", "zhoneCpePweJitterBufMax"), ("Zhone-CPE-MIB", "zhoneCpePweJitterBufDesired"), ("Zhone-CPE-MIB", "zhoneCpePweFillPolicy"), ("Zhone-CPE-MIB", "zhoneCpePweMisconnectedDeclarePolicy"), ("Zhone-CPE-MIB", "zhoneCpePweMisconnectedClearPolicy"), ("Zhone-CPE-MIB", "zhoneCpePweLossPacketDeclarePolicy"), ("Zhone-CPE-MIB", "zhoneCpePweOverrunUnderrunDeclarePolicy"), ("Zhone-CPE-MIB", "zhoneCpePweOverrunUnderrunClearPolicy"), ("Zhone-CPE-MIB", "zhoneCpePweMalformedDeclarePolicy"), ("Zhone-CPE-MIB", "zhoneCpePweMalformedClearPolicy"), ("Zhone-CPE-MIB", "zhoneCpePweRBitTransmitSetPolicy"), ("Zhone-CPE-MIB", "zhoneCpePweRBitTransmitClearPolicy"), ("Zhone-CPE-MIB", "zhoneCpePweRBitReceivePolicy"), ("Zhone-CPE-MIB", "zhoneCpePweLBitReceivePolicy"), ("Zhone-CPE-MIB", "zhoneCpePweSesThreshold"), ("Zhone-CPE-MIB", "zhoneCpePweCdvTolerance"), ("Zhone-CPE-MIB", "zhoneCpePweChannelAssociatedSignalling"), ("Zhone-CPE-MIB", "zhoneCpePweMplsTpType"), ("Zhone-CPE-MIB", "zhoneCpePweSSrcPayload"), ("Zhone-CPE-MIB", "zhoneCpePweSSrcSignalling"), ("Zhone-CPE-MIB", "zhoneCpePweExpectedSSrcPayload"), ("Zhone-CPE-MIB", "zhoneCpePweExpectedSSrcSignalling"), ("Zhone-CPE-MIB", "zhoneCpePwePtypePayload"), ("Zhone-CPE-MIB", "zhoneCpePwePtypeSignalling"), ("Zhone-CPE-MIB", "zhoneCpePweExpectedPTypePayload"), ("Zhone-CPE-MIB", "zhoneCpePweDs1Framing"), ("Zhone-CPE-MIB", "zhoneCpePweDs1Mode"), ("Zhone-CPE-MIB", "zhoneCpePweEncoding"), ("Zhone-CPE-MIB", "zhoneCpePweLineType"), ("Zhone-CPE-MIB", "zhoneCpePweIndexNext"), ("Zhone-CPE-MIB", "zhoneCpePweExpectedPTypeSignalling"), ("Zhone-CPE-MIB", "zhoneCpePweSignalling"), ("Zhone-CPE-MIB", "zhoneCpePweLossPacketClearPolicy"), ("Zhone-CPE-MIB", "zhoneCpePweDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpePweGroup = zhoneCpePweGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePweGroup.setDescription('Cpe Pwe Table objects.')
zhoneCpeOnuModelInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 48)).setObjects(("Zhone-CPE-MIB", "zhoneCpeOnuModelName"), ("Zhone-CPE-MIB", "zhoneCpeOnuBatteryBackup"), ("Zhone-CPE-MIB", "zhoneCpeOnuSipPlarSupported"), ("Zhone-CPE-MIB", "zhoneCpeOnuEthSlotNumber"), ("Zhone-CPE-MIB", "zhoneCpeOnuNumberOfEthPorts"), ("Zhone-CPE-MIB", "zhoneCpeOnuPotsSlotNumber"), ("Zhone-CPE-MIB", "zhoneCpeOnuNumberOfPotsPorts"), ("Zhone-CPE-MIB", "zhoneCpeOnuRfVideoSlotNumber"), ("Zhone-CPE-MIB", "zhoneCpeOnuNumberOfRfVideoPorts"), ("Zhone-CPE-MIB", "zhoneCpeOnuCesSlotNumber"), ("Zhone-CPE-MIB", "zhoneCpeOnuNumberOfCesPorts"), ("Zhone-CPE-MIB", "zhoneCpeOnuModelInfoRGBridged"), ("Zhone-CPE-MIB", "zhoneCpeOnuNumberOfWlanPorts"), ("Zhone-CPE-MIB", "zhoneCpeOnuModelInfoRg"), ("Zhone-CPE-MIB", "zhoneCpeOnuModelInfoRgVoip"), ("Zhone-CPE-MIB", "zhoneCpeOnuModelInfoRgPwe"), ("Zhone-CPE-MIB", "zhoneCpeOnuModelInfoTftpDnld"), ("Zhone-CPE-MIB", "zhoneCpeOnuSipSupported"), ("Zhone-CPE-MIB", "zhoneCpeOnuH248Supported"), ("Zhone-CPE-MIB", "zhoneCpeOnuMgcpSupported"), ("Zhone-CPE-MIB", "zhoneCpeOnuT1Supported"), ("Zhone-CPE-MIB", "zhoneCpeOnuE1Supported"), ("Zhone-CPE-MIB", "zhoneCpeOnuNumberOfPoEPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeOnuModelInfoGroup = zhoneCpeOnuModelInfoGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeOnuModelInfoGroup.setDescription('Cpe Onu ModelInfo Table objects.')
zhoneCpeConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 49)).setObjects(("Zhone-CPE-MIB", "zhoneCpeConnectionRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeConnectionVlanCos"), ("Zhone-CPE-MIB", "zhoneCpeConnectionSlanCos"), ("Zhone-CPE-MIB", "zhoneCpeConnectionVlanTpId"), ("Zhone-CPE-MIB", "zhoneCpeConnectionSlanTpId"), ("Zhone-CPE-MIB", "zhoneCpeConnectionTranslateVlanId"), ("Zhone-CPE-MIB", "zhoneCpeConnectionTranslateVlanCos"), ("Zhone-CPE-MIB", "zhoneCpeConnectionTranslateVlanTpId"), ("Zhone-CPE-MIB", "zhoneCpeConnectionTranslateSlanId"), ("Zhone-CPE-MIB", "zhoneCpeConnectionTranslateSlanCos"), ("Zhone-CPE-MIB", "zhoneCpeConnectionFloodingGport"), ("Zhone-CPE-MIB", "zhoneCpeConnectionDscpToCosProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeConnectionRgMode"), ("Zhone-CPE-MIB", "zhoneCpeConnectionGuidedCos"), ("Zhone-CPE-MIB", "zhoneCpeConnectionGuidedVlanId"), ("Zhone-CPE-MIB", "zhoneCpeConnectionVideoGport"), ("Zhone-CPE-MIB", "zhoneCpeConnectionTranslateSlanTpId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeConnectionGroup = zhoneCpeConnectionGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeConnectionGroup.setDescription('Cpe connection table objects')
zhoneCpeRfSubscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 50)).setObjects(("Zhone-CPE-MIB", "zhoneCpeRfSubscriberRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeRfSubscriberAdminState"), ("Zhone-CPE-MIB", "zhoneCpeRfSubscriberLineStatusAlarm"), ("Zhone-CPE-MIB", "zhoneCpeRfSubscriberAlarmSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeRfSubscriberGroup = zhoneCpeRfSubscriberGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeRfSubscriberGroup.setDescription('Cpe RF Subscriber table objects.')
zhoneCpeTrafficManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 51)).setObjects(("Zhone-CPE-MIB", "zhoneCpeTrafficManagementProfileName"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementUpstreamSIR"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementUpstreamPIR"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementUpstreamPriority"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementUpstreamWeight"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementDownstreamSIR"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementDownstreamPIR"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementDownstreamPriority"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementPeakBurstSize"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementDownstreamWeight"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeTrafficManagementRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeTrafficManagementGroup = zhoneCpeTrafficManagementGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeTrafficManagementGroup.setDescription('Cpe Traffic Management table objects.')
zhoneCpeSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 53)).setObjects(("Zhone-CPE-MIB", "zhoneCpeSystemRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeSystemMgcpClientName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeSystemGroup = zhoneCpeSystemGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemGroup.setDescription('Cpe System table objects.')
zhoneCpeSystemCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 54)).setObjects(("Zhone-CPE-MIB", "zhoneCpeSystemCommonProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonProfileName"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonFirewall"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonSyncCookieProtection"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonCrossVlanRouting"), ("Zhone-CPE-MIB", "zhoneCpeStaticRouteListProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonTr69Inform"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonInformInterval"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonAcsUrl"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonAcsUsername"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonUserPassword"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonSupportPassword"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonAdminPassword"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonPowerRestoreDelay"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonPowerShutdownDelay"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonPowerSupply"), ("Zhone-CPE-MIB", "zhoneCpeSystemCommonAcsPassword"), ("Zhone-CPE-MIB", "zhoneCpeDnsHostListProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeSystemCommonGroup = zhoneCpeSystemCommonGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeSystemCommonGroup.setDescription('Cpe Systen Common table objects.')
zhoneCpeInterfaceVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 55)).setObjects(("Zhone-CPE-MIB", "zhoneCpeInterfaceVlanRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeIpServerProfile"), ("Zhone-CPE-MIB", "zhoneCpeDhcpServerProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeInterfaceVlanRgMode"), ("Zhone-CPE-MIB", "zhoneCpeInterfaceVlanTranslateVlanId"), ("Zhone-CPE-MIB", "zhoneCpeInterfaceVlanTranslateVlanCos"), ("Zhone-CPE-MIB", "zhoneCpeInterfaceVlanTranslateSlanId"), ("Zhone-CPE-MIB", "zhoneCpeInterfaceVlanTranslateSlanCos"), ("Zhone-CPE-MIB", "zhoneCpeInterfaceVlanTranslateSlanTpId"), ("Zhone-CPE-MIB", "zhoneCpeInterfaceVlanIpAddress"), ("Zhone-CPE-MIB", "zhoneCpePortFwdListProfileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeInterfaceVlanGroup = zhoneCpeInterfaceVlanGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeInterfaceVlanGroup.setDescription('Cpe Interface Vlan table objects.')
zhoneCpeDhcpServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 56)).setObjects(("Zhone-CPE-MIB", "zhoneCpeDhcpServerIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeDhcpServerRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeDhcpServerProfileName"), ("Zhone-CPE-MIB", "zhoneCpeDhcpServerStartAddress"), ("Zhone-CPE-MIB", "zhoneCpeDhcpServerEndAddress"), ("Zhone-CPE-MIB", "zhoneCpeDhcpServerLeaseTime"), ("Zhone-CPE-MIB", "zhoneCpeDhcpServerConditionalServerListProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeDhcpServerGroup = zhoneCpeDhcpServerGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDhcpServerGroup.setDescription('Cpe Dhcp Server table objects.')
zhoneCpePppoeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 57)).setObjects(("Zhone-CPE-MIB", "zhoneCpePppoeRowStatus"), ("Zhone-CPE-MIB", "zhoneCpePppoeUsername"), ("Zhone-CPE-MIB", "zhoneCpePppoePassword"), ("Zhone-CPE-MIB", "zhoneCpePppoeAuthentication"), ("Zhone-CPE-MIB", "zhoneCpePppoeRetryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpePppoeGroup = zhoneCpePppoeGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePppoeGroup.setDescription('Cpe Pppoe table objects.')
zhoneCpeWlanSubscriberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 58)).setObjects(("Zhone-CPE-MIB", "zhoneCpeWlanSubscriberRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeWlanSubscriberAdminState"), ("Zhone-CPE-MIB", "zhoneCpeWlanSubscriberSsid"), ("Zhone-CPE-MIB", "zhoneCpeWlanSubscriberEncryptKey"), ("Zhone-CPE-MIB", "zhoneCpeWlanSubscriberDevicePin"), ("Zhone-CPE-MIB", "zhoneCpeWlanSubscriberRadiusKey"), ("Zhone-CPE-MIB", "zhoneCpeWlanProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeAccessControlListProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeWdsMacListProfileIndex"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvProfileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeWlanSubscriberGroup = zhoneCpeWlanSubscriberGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanSubscriberGroup.setDescription('Cpe Wlan Subscriber table objects.')
zhoneCpeWlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 59)).setObjects(("Zhone-CPE-MIB", "zhoneCpeWlanIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeWlanRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeWlanProfileName"), ("Zhone-CPE-MIB", "zhoneCpeWlanHideAccessPoint"), ("Zhone-CPE-MIB", "zhoneCpeWlanIsolateClients"), ("Zhone-CPE-MIB", "zhoneCpeWlanWmmAdvertise"), ("Zhone-CPE-MIB", "zhoneCpeWlanMcastFwd"), ("Zhone-CPE-MIB", "zhoneCpeWlanMaxClients"), ("Zhone-CPE-MIB", "zhoneCpeWlanNetAuthentication"), ("Zhone-CPE-MIB", "zhoneCpeWlanWpaGroupRekeyInterval"), ("Zhone-CPE-MIB", "zhoneCpeWlanWpaEncryption"), ("Zhone-CPE-MIB", "zhoneCpeWlanWepEncryption"), ("Zhone-CPE-MIB", "zhoneCpeWlanWepStrength"), ("Zhone-CPE-MIB", "zhoneCpeWlanRadiusServerIp"), ("Zhone-CPE-MIB", "zhoneCpeWlanRadiusPort"), ("Zhone-CPE-MIB", "zhoneCpeWlanWpa2PreAuthentication"), ("Zhone-CPE-MIB", "zhoneCpeWlanNetReAuthenticationInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeWlanGroup = zhoneCpeWlanGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanGroup.setDescription('Cpe Wlan table objects.')
zhoneCpeStaticRouteListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 60)).setObjects(("Zhone-CPE-MIB", "zhoneCpeStaticRouteListIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeStaticRouteListRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeStaticRouteListProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeStaticRouteListGroup = zhoneCpeStaticRouteListGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteListGroup.setDescription('Cpe Static Route List table objects.')
zhoneCpeStaticRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 61)).setObjects(("Zhone-CPE-MIB", "zhoneCpeStaticRouteRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeStaticRouteDestinationIp"), ("Zhone-CPE-MIB", "zhoneCpeStaticRouteNetmask"), ("Zhone-CPE-MIB", "zhoneCpeStaticRouteGateway"), ("Zhone-CPE-MIB", "zhoneCpeStaticRouteMetric"), ("Zhone-CPE-MIB", "zhoneCpeStaticRouteEntryIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeStaticRouteGroup = zhoneCpeStaticRouteGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeStaticRouteGroup.setDescription('Cpe Static Route table objects.')
zhoneCpePortFwdListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 62)).setObjects(("Zhone-CPE-MIB", "zhoneCpePortFwdListIndexNext"), ("Zhone-CPE-MIB", "zhoneCpePortFwdListRowStatus"), ("Zhone-CPE-MIB", "zhoneCpePortFwdListProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpePortFwdListGroup = zhoneCpePortFwdListGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdListGroup.setDescription('Cpe Port Fwd List table objects.')
zhoneCpePortFwdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 63)).setObjects(("Zhone-CPE-MIB", "zhoneCpePortFwdRowStatus"), ("Zhone-CPE-MIB", "zhoneCpePortFwdType"), ("Zhone-CPE-MIB", "zhoneCpePortFwdPortStart"), ("Zhone-CPE-MIB", "zhoneCpePortFwdPortEnd"), ("Zhone-CPE-MIB", "zhoneCpePortFwdProtocol"), ("Zhone-CPE-MIB", "zhoneCpePortFwdPrivatePort"), ("Zhone-CPE-MIB", "zhoneCpePortFwdPrivateIp"), ("Zhone-CPE-MIB", "zhoneCpePortFwdEntryIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpePortFwdGroup = zhoneCpePortFwdGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpePortFwdGroup.setDescription('Cpe Port Fwd table objects.')
zhoneCpeServiceApplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 64)).setObjects(("Zhone-CPE-MIB", "zhoneCpeServiceApplicationTemplateType"), ("Zhone-CPE-MIB", "zhoneCpeServiceApplicationTemplateId"), ("Zhone-CPE-MIB", "zhoneCpeServiceApplicationVirtualConnection"), ("Zhone-CPE-MIB", "zhoneCpeServiceApplicationTpType"), ("Zhone-CPE-MIB", "zhoneCpeServiceApplicationTpIndex"), ("Zhone-CPE-MIB", "zhoneCpeServiceApplicationRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeServiceApplicationVlan"), ("Zhone-CPE-MIB", "zhoneCpeServiceApplicationSlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeServiceApplicationGroup = zhoneCpeServiceApplicationGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeServiceApplicationGroup.setDescription('Description.')
zhoneCpeDnsHostListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 65)).setObjects(("Zhone-CPE-MIB", "zhoneCpeDnsHostListIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeDnsHostListRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeDnsHostListProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeDnsHostListGroup = zhoneCpeDnsHostListGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostListGroup.setDescription('Cpe Dns Host List objects')
zhoneCpeDnsHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 66)).setObjects(("Zhone-CPE-MIB", "zhoneCpeDnsHostIndexEntryIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeDnsHostRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeDnsHostDomainName"), ("Zhone-CPE-MIB", "zhoneCpeDnsHostIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeDnsHostGroup = zhoneCpeDnsHostGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeDnsHostGroup.setDescription('Cpe Dns Host Objects.')
zhoneCpeWlanAdvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 67)).setObjects(("Zhone-CPE-MIB", "zhoneCpeWlanAdvRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvProfileName"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvChannel"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvAutoChanTimer"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvDot11nMode"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvDot11nRate"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvDot1nProtection"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvDot1nClientOnly"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvRate54G"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvMcastRate"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvBasicRate"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvFragmentationThreshold"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvRtsThreshold"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvDtimInterval"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvBeaconInterval"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvGlobalMaxClients"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvXpressTechnology"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvTxPower"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvWmm"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvWmmNoAck"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvWmmApsd"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvApMode"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvBridgeRestrict"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvWps"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvWpsAddClientMethod"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvWpsApMode"), ("Zhone-CPE-MIB", "zhoneCpeWlanAdvIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeWlanAdvGroup = zhoneCpeWlanAdvGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeWlanAdvGroup.setDescription('Cpe Wlan Advanced table objects.')
zhoneCpeCondDhcpSrvListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 68)).setObjects(("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvListProfileName"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvIndexEntryIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeCondiDhcpSrvListIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeCondDhcpSrvListGroup = zhoneCpeCondDhcpSrvListGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvListGroup.setDescription('Cpe Conditional DHCP server list objects')
zhoneCpeCondDhcpSrvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 69)).setObjects(("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvAdminState"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvPriorityOrder"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpVciOui"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvVciMatch"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvStartAddr"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvEndAddr"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvWanVlan"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvPortFwdRule"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvStartPort"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvPrivatePort"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvProtocol"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvPriDns"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvSecDns"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvPriNpt"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvSecNpt"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvPermanent"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvVsi"), ("Zhone-CPE-MIB", "zhoneCpeCondDhcpSrvRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeCondDhcpSrvGroup = zhoneCpeCondDhcpSrvGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCondDhcpSrvGroup.setDescription('Cpe Conditional DHCP server objects')
zhoneCpeCmdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 70)).setObjects(("Zhone-CPE-MIB", "zhoneCpeCmdOperation"), ("Zhone-CPE-MIB", "zhoneCpeCmdSrcIfIndex"), ("Zhone-CPE-MIB", "zhoneCpeCmdSrcShelf"), ("Zhone-CPE-MIB", "zhoneCpeCmdSrcSlot"), ("Zhone-CPE-MIB", "zhoneCpeCmdSrcPort"), ("Zhone-CPE-MIB", "zhoneCpeCmdSrcSubport"), ("Zhone-CPE-MIB", "zhoneCpeCmdSrcTpType"), ("Zhone-CPE-MIB", "zhoneCpeCmdSrcTpIndex"), ("Zhone-CPE-MIB", "zhoneCpeCmdDstIfIndex"), ("Zhone-CPE-MIB", "zhoneCpeCmdDstShelf"), ("Zhone-CPE-MIB", "zhoneCpeCmdDstSlot"), ("Zhone-CPE-MIB", "zhoneCpeCmdDstPort"), ("Zhone-CPE-MIB", "zhoneCpeCmdDstSubport"), ("Zhone-CPE-MIB", "zhoneCpeCmdDstTpType"), ("Zhone-CPE-MIB", "zhoneCpeCmdDstTpIndex"), ("Zhone-CPE-MIB", "zhoneCpeCmdString"), ("Zhone-CPE-MIB", "zhoneCpeCmdSvcTemplateType"), ("Zhone-CPE-MIB", "zhoneCpeCmdSvcTemplateId"), ("Zhone-CPE-MIB", "zhoneCpeCmdSvcTemplateIfIndex"), ("Zhone-CPE-MIB", "zhoneCpeCmdSvcTemplateVirtualConn"), ("Zhone-CPE-MIB", "zhoneCpeCmdSvcTemplateTpType"), ("Zhone-CPE-MIB", "zhoneCpeCmdSvcTemplateTpIndex"), ("Zhone-CPE-MIB", "zhoneCpeCmdSvcTemplateVlan"), ("Zhone-CPE-MIB", "zhoneCpeCmdSvcTemplateSlan"), ("Zhone-CPE-MIB", "zhoneCpeCmdOverrideTpIndex"), ("Zhone-CPE-MIB", "zhoneCpeCmdOverrideVlanId"), ("Zhone-CPE-MIB", "zhoneCpeCmdOverrideVlanCos"), ("Zhone-CPE-MIB", "zhoneCpeCmdOverrideSlanId"), ("Zhone-CPE-MIB", "zhoneCpeCmdOverrideSlanCos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeCmdGroup = zhoneCpeCmdGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCmdGroup.setDescription('CPE command objects')
zhoneCpeLldpMedPolicyListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 71)).setObjects(("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyListIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyListRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyListProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeLldpMedPolicyListGroup = zhoneCpeLldpMedPolicyListGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyListGroup.setDescription('Cpe LLDP-MED network policy list objects')
zhoneCpeLldpMedPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 72)).setObjects(("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyIndexEntryIndexNext"), ("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyAdminState"), ("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyAppType"), ("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyVlanId"), ("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyCos"), ("Zhone-CPE-MIB", "zhoneCpeLldpMedPolicyDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeLldpMedPolicyGroup = zhoneCpeLldpMedPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeLldpMedPolicyGroup.setDescription('Cpe LLDP-MED network policy objects')
zhoneCpeAutoCfgRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 73)).setObjects(("Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleAdminState"), ("Zhone-CPE-MIB", "zhoneCpeAutoCfgRulePriority"), ("Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleMatchExpression"), ("Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleTargetUni"), ("Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleDeleteBeforeApply"), ("Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleRowStatus"), ("Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleProfileName"), ("Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleServiceTemplate"), ("Zhone-CPE-MIB", "zhoneCpeAutoCfgRuleIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeAutoCfgRuleGroup = zhoneCpeAutoCfgRuleGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeAutoCfgRuleGroup.setDescription('Description.')
zhoneCpeCfgGlobalSettingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 74)).setObjects(("Zhone-CPE-MIB", "zhoneCpeCfgAutoAssign"), ("Zhone-CPE-MIB", "zhoneCpeCfgAutoConfig"), ("Zhone-CPE-MIB", "zhoneCpeCfgParamsStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCpeCfgGlobalSettingsGroup = zhoneCpeCfgGlobalSettingsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCpeCfgGlobalSettingsGroup.setDescription('Description.')
mibBuilder.exportSymbols("Zhone-CPE-MIB", zhoneCpeOnuCesSlotNumber=zhoneCpeOnuCesSlotNumber, zhoneCpeIpRowStatus=zhoneCpeIpRowStatus, zhoneCpeVideoProfileName=zhoneCpeVideoProfileName, zhoneCpeWlanNetReAuthenticationInterval=zhoneCpeWlanNetReAuthenticationInterval, zhoneCpeInterfaceVlanIpAddress=zhoneCpeInterfaceVlanIpAddress, zhoneCpePweSubscriberLineLength=zhoneCpePweSubscriberLineLength, zhoneCpeCondDhcpSrvList=zhoneCpeCondDhcpSrvList, zhoneCpePweSSrcPayload=zhoneCpePweSSrcPayload, zhoneCpeServiceApplicationTemplateId=zhoneCpeServiceApplicationTemplateId, zhoneCpeServiceApplicationTemplateType=zhoneCpeServiceApplicationTemplateType, zhoneCpeStaticRouteListProfileName=zhoneCpeStaticRouteListProfileName, zhoneCpeVoipServerIndexNext=zhoneCpeVoipServerIndexNext, zhoneCpeConnectionGuidedVlanId=zhoneCpeConnectionGuidedVlanId, zhoneCpePweSubscriberRowStatus=zhoneCpePweSubscriberRowStatus, zhoneCpeConnectionEntry=zhoneCpeConnectionEntry, zhoneCpePppoeUsername=zhoneCpePppoeUsername, zhoneCpeAutoCfgRuleRowStatus=zhoneCpeAutoCfgRuleRowStatus, zhoneCpePweIndexNext=zhoneCpePweIndexNext, zhoneCpePweServiceType=zhoneCpePweServiceType, zhoneCpeCmdDstPort=zhoneCpeCmdDstPort, zhoneCpeVideoAccessControlIndexTable=zhoneCpeVideoAccessControlIndexTable, zhoneCpePweLineType=zhoneCpePweLineType, zhoneCpeLldpMedPolicyListIndex=zhoneCpeLldpMedPolicyListIndex, zhoneCpeAutoCfgRuleIndexNext=zhoneCpeAutoCfgRuleIndexNext, zhoneCpeAutoCfgRuleTargetUni=zhoneCpeAutoCfgRuleTargetUni, zhoneCpePweMplsTpType=zhoneCpePweMplsTpType, zhoneCpeVoipMgcMaximumRetryTime=zhoneCpeVoipMgcMaximumRetryTime, zhoneCpeOnuMgcpSupported=zhoneCpeOnuMgcpSupported, zhoneCpeSystemMgcpClientName=zhoneCpeSystemMgcpClientName, zhoneCpeCmdSrcSubport=zhoneCpeCmdSrcSubport, zhoneCpeTpIndex=zhoneCpeTpIndex, zhoneCpeDhcpServer=zhoneCpeDhcpServer, zhoneCpeSystemCommonUserPassword=zhoneCpeSystemCommonUserPassword, zhoneCpeCmdOverrideSlanCos=zhoneCpeCmdOverrideSlanCos, zhoneCpeServiceApplicationVlan=zhoneCpeServiceApplicationVlan, zhoneCpeSystemCommonPowerSupply=zhoneCpeSystemCommonPowerSupply, zhoneCpeWlanTable=zhoneCpeWlanTable, zhoneCpeWlanAdvWmm=zhoneCpeWlanAdvWmm, zhoneCpeCmdSrcPort=zhoneCpeCmdSrcPort, zhoneCpeVoipSubscriberEntry=zhoneCpeVoipSubscriberEntry, zhoneCpeLldpMedPolicyList=zhoneCpeLldpMedPolicyList, zhoneCpeTrafficManagementUpstreamSIR=zhoneCpeTrafficManagementUpstreamSIR, zhoneCpeDhcpServerTable=zhoneCpeDhcpServerTable, zhoneCpeVoipSilenceSuppressionThirdOrder=zhoneCpeVoipSilenceSuppressionThirdOrder, zhoneCpeWlanAdvProfileIndex=zhoneCpeWlanAdvProfileIndex, zhoneCpeTrafficManagementDownstreamWeight=zhoneCpeTrafficManagementDownstreamWeight, zhoneCpeRfSubscriberAlarmSeverity=zhoneCpeRfSubscriberAlarmSeverity, zhoneCpeVideoAccessControlDstIpStart=zhoneCpeVideoAccessControlDstIpStart, zhoneCpeConnectionSlanTpId=zhoneCpeConnectionSlanTpId, zhoneCpePppoeAuthentication=zhoneCpePppoeAuthentication, zhoneCpeLldpMedPolicyGroup=zhoneCpeLldpMedPolicyGroup, zhoneCpeIpServerIndexNext=zhoneCpeIpServerIndexNext, zhoneCpeEthSubscriberAlarmSeverity=zhoneCpeEthSubscriberAlarmSeverity, zhoneCpePweRtpTimeStampMode=zhoneCpePweRtpTimeStampMode, zhoneCpeWlanRadiusPort=zhoneCpeWlanRadiusPort, zhoneCpeSystemCommonIndex=zhoneCpeSystemCommonIndex, zhoneCpePortFwdEntryIndex=zhoneCpePortFwdEntryIndex, zhoneCpeRfSubscriberEntry=zhoneCpeRfSubscriberEntry, zhoneCpeStaticRouteMetric=zhoneCpeStaticRouteMetric, zhoneCpeVideoAccessControlType=zhoneCpeVideoAccessControlType, zhoneCpeCondDhcpSrvIndexEntry=zhoneCpeCondDhcpSrvIndexEntry, zhoneCpeServiceApplicationVirtualConnection=zhoneCpeServiceApplicationVirtualConnection, zhoneCpeDnsHostIpAddress=zhoneCpeDnsHostIpAddress, zhoneCpePweOverrunUnderrunClearPolicy=zhoneCpePweOverrunUnderrunClearPolicy, zhoneCpePweDscp=zhoneCpePweDscp, zhoneCpeVoipServerPortId=zhoneCpeVoipServerPortId, zhoneCpeVoipMedia=zhoneCpeVoipMedia, zhoneCpeCmdOverrideSlanId=zhoneCpeCmdOverrideSlanId, zhoneCpeVideoAccessControlEntryIndex=zhoneCpeVideoAccessControlEntryIndex, zhoneCpeSystemRowStatus=zhoneCpeSystemRowStatus, zhoneCpePweSSrcSignalling=zhoneCpePweSSrcSignalling, zhoneCpePweSubscriberAlarmSeverity=zhoneCpePweSubscriberAlarmSeverity, zhoneCpeSystemCommonProfileName=zhoneCpeSystemCommonProfileName, zhoneCpeVoipOobToneEvents=zhoneCpeVoipOobToneEvents, zhoneCpeSipDialPlanIndex=zhoneCpeSipDialPlanIndex, zhoneCpeVoipFeaturesWarmLineTimer=zhoneCpeVoipFeaturesWarmLineTimer, zhoneCpeVideoImmediateLeave=zhoneCpeVideoImmediateLeave, zhoneCpeConnectionTranslateVlanTpId=zhoneCpeConnectionTranslateVlanTpId, zhoneCpeCondDhcpVciOui=zhoneCpeCondDhcpVciOui, zhoneCpeVoipServer=zhoneCpeVoipServer, zhoneCpePweSubscriberTable=zhoneCpePweSubscriberTable, zhoneCpePweRBitTransmitSetPolicy=zhoneCpePweRBitTransmitSetPolicy, zhoneCpeCmdString=zhoneCpeCmdString, zhoneCpePweLossPacketDeclarePolicy=zhoneCpePweLossPacketDeclarePolicy, zhoneCpeCondiDhcpSrvListIndexNext=zhoneCpeCondiDhcpSrvListIndexNext, zhoneCpeIpServerFirewallAccess=zhoneCpeIpServerFirewallAccess, zhoneCpeOnuNumberOfRfVideoPorts=zhoneCpeOnuNumberOfRfVideoPorts, zhoneCpeRfSubscriberLineStatusAlarm=zhoneCpeRfSubscriberLineStatusAlarm, zhoneCpeEthSubscriberDuplex=zhoneCpeEthSubscriberDuplex, zhoneCpeWlanWpa2PreAuthentication=zhoneCpeWlanWpa2PreAuthentication, zhoneCpeCondDhcpSrvIndexTable=zhoneCpeCondDhcpSrvIndexTable, zhoneCpeVoipSubscriberImpedance=zhoneCpeVoipSubscriberImpedance, zhoneCpeCmdDstSlot=zhoneCpeCmdDstSlot, zhoneCpeEthSubscriberEntry=zhoneCpeEthSubscriberEntry, zhoneCpeCondDhcpSrvPriNpt=zhoneCpeCondDhcpSrvPriNpt, zhoneCpeTrafficManagementUpstreamPIR=zhoneCpeTrafficManagementUpstreamPIR, zhoneCpeIpServer=zhoneCpeIpServer, zhoneCpeWlanAdvBasicRate=zhoneCpeWlanAdvBasicRate, zhoneCpeVoipPiggyBackEvents=zhoneCpeVoipPiggyBackEvents, zhoneCpeAutoCfgRuleTable=zhoneCpeAutoCfgRuleTable, zhoneCpeCondDhcpSrvAdminState=zhoneCpeCondDhcpSrvAdminState, zhoneCpeVoipSubscriberPhoneFollowsWan=zhoneCpeVoipSubscriberPhoneFollowsWan, zhoneCpeWlan=zhoneCpeWlan, zhoneCpeWlanGroup=zhoneCpeWlanGroup, zhoneCpeWlanAdvFragmentationThreshold=zhoneCpeWlanAdvFragmentationThreshold, zhoneCpeCondDhcpSrvSecDns=zhoneCpeCondDhcpSrvSecDns, zhoneCpeDnsHostDomainName=zhoneCpeDnsHostDomainName, zhoneCpeCondDhcpSrvTable=zhoneCpeCondDhcpSrvTable, zhoneCpeVlan=zhoneCpeVlan, zhoneCpeServiceApplicationEntry=zhoneCpeServiceApplicationEntry, zhoneCpeStaticRouteEntryIndexNext=zhoneCpeStaticRouteEntryIndexNext, zhoneCpeCmdOverrideTpIndex=zhoneCpeCmdOverrideTpIndex, zhoneCpeDnsHostListIndexNext=zhoneCpeDnsHostListIndexNext, zhoneCpeDhcpServerProfileIndex=zhoneCpeDhcpServerProfileIndex, zhoneCpeSipDialPlan=zhoneCpeSipDialPlan, zhoneCpeVoipSubscriberTxGain=zhoneCpeVoipSubscriberTxGain, zhoneCpePweProfileIndex=zhoneCpePweProfileIndex, zhoneCpeSystemCommonRowStatus=zhoneCpeSystemCommonRowStatus, zhoneCpeAutoCfgRuleProfileName=zhoneCpeAutoCfgRuleProfileName, zhoneCpeLldpMedPolicyRowStatus=zhoneCpeLldpMedPolicyRowStatus, zhoneCpeStaticRouteDestinationIp=zhoneCpeStaticRouteDestinationIp, zhoneCpeVoipMediaIndex=zhoneCpeVoipMediaIndex, zhoneCpeVideoAccessControlEntry=zhoneCpeVideoAccessControlEntry, zhoneCpeVoipCallPresentationFeatures=zhoneCpeVoipCallPresentationFeatures, zhoneCpeVoipFeaturesProfileName=zhoneCpeVoipFeaturesProfileName, zhoneCpeTrafficManagementDownstreamSIR=zhoneCpeTrafficManagementDownstreamSIR, zhoneCpeEthSubscriberMode=zhoneCpeEthSubscriberMode, zhoneCpeSipDialPlanIndexEntry=zhoneCpeSipDialPlanIndexEntry, zhoneCpeVideoProfileIndex=zhoneCpeVideoProfileIndex, zhoneCpeSlanId=zhoneCpeSlanId, zhoneCpeVoipSilenceSuppressionSecondOrder=zhoneCpeVoipSilenceSuppressionSecondOrder, zhoneCpeIpServerProfileName=zhoneCpeIpServerProfileName, zhoneCpePweSubscriberFarEndIp=zhoneCpePweSubscriberFarEndIp, zhoneCpeVoipServerEntry=zhoneCpeVoipServerEntry, PYSNMP_MODULE_ID=zhoneCpeMIB, zhoneCpeTrafficManagementProfileIndex=zhoneCpeTrafficManagementProfileIndex, zhoneCpeVoipMediaEchoCancel=zhoneCpeVoipMediaEchoCancel, zhoneCpeEthSubscriberRate=zhoneCpeEthSubscriberRate, zhoneCpePwePayloadSize=zhoneCpePwePayloadSize, zhoneCpePwePtypeSignalling=zhoneCpePwePtypeSignalling, zhoneCpeStaticRouteListRowStatus=zhoneCpeStaticRouteListRowStatus, zhoneCpeStaticRouteGateway=zhoneCpeStaticRouteGateway, zhoneCpeVoipSubscriberTransmissionPath=zhoneCpeVoipSubscriberTransmissionPath, zhoneCpeVoipSubscriberRowStatus=zhoneCpeVoipSubscriberRowStatus, zhoneCpeSipServerIndex=zhoneCpeSipServerIndex, zhoneCpePweEntry=zhoneCpePweEntry, zhoneCpeAutoCfgRuleServiceTemplate=zhoneCpeAutoCfgRuleServiceTemplate, zhoneCpePweOverrunUnderrunDeclarePolicy=zhoneCpePweOverrunUnderrunDeclarePolicy, zhoneCpeOnuRfVideoSlotNumber=zhoneCpeOnuRfVideoSlotNumber, zhoneCpeWlanAdvChannel=zhoneCpeWlanAdvChannel, zhoneCpePweIndex=zhoneCpePweIndex, zhoneCpeDnsHostEntryIndex=zhoneCpeDnsHostEntryIndex, zhoneCpePweMisconnectedDeclarePolicy=zhoneCpePweMisconnectedDeclarePolicy, zhoneCpeVideoMaxSimultaneousGroups=zhoneCpeVideoMaxSimultaneousGroups, zhoneCpeCmdSrcTpType=zhoneCpeCmdSrcTpType, zhoneCpeVoipMgcServiceChangeDelay=zhoneCpeVoipMgcServiceChangeDelay, zhoneCpeDnsHostListRowStatus=zhoneCpeDnsHostListRowStatus, zhoneCpePortFwdTable=zhoneCpePortFwdTable, zhoneCpeCmdOverrideVlanCos=zhoneCpeCmdOverrideVlanCos, zhoneCpeVoipPacketPeriodSelectionThirdOrder=zhoneCpeVoipPacketPeriodSelectionThirdOrder, zhoneCpePortFwdListProfileIndex=zhoneCpePortFwdListProfileIndex, zhoneCpePortFwdIndexEntry=zhoneCpePortFwdIndexEntry, zhoneCpeWlanSubscriberEncryptKey=zhoneCpeWlanSubscriberEncryptKey, zhoneCpeIpServerSecureForward=zhoneCpeIpServerSecureForward, zhoneCpeVideoAccessControlDstIpEnd=zhoneCpeVideoAccessControlDstIpEnd, zhoneCpeWlanAdvDot1nClientOnly=zhoneCpeWlanAdvDot1nClientOnly, zhoneCpeStaticRouteList=zhoneCpeStaticRouteList, zhoneCpeOnuModelInfoRgPwe=zhoneCpeOnuModelInfoRgPwe, zhoneCpeVideoIgmpVersion=zhoneCpeVideoIgmpVersion, zhoneCpeVoipMediaProfileIndex=zhoneCpeVoipMediaProfileIndex, zhoneCpePortFwdRowStatus=zhoneCpePortFwdRowStatus, zhoneCpePppoeRetryInterval=zhoneCpePppoeRetryInterval, zhoneCpeOnuModelName=zhoneCpeOnuModelName, zhoneCpeConnectionGuidedCos=zhoneCpeConnectionGuidedCos, zhoneCpeCmd=zhoneCpeCmd, zhoneCpeConnectionGroup=zhoneCpeConnectionGroup, zhoneCpeDnsHostIndexTable=zhoneCpeDnsHostIndexTable, zhoneCpeCfgAutoConfig=zhoneCpeCfgAutoConfig, zhoneCpeSystemCommonAcsPassword=zhoneCpeSystemCommonAcsPassword, zhoneCpeWlanAdvWpsApMode=zhoneCpeWlanAdvWpsApMode, zhoneCpeCondDhcpSrvProtocol=zhoneCpeCondDhcpSrvProtocol, zhoneCpeLldpMedPolicy=zhoneCpeLldpMedPolicy, zhoneCpeTrafficManagementTable=zhoneCpeTrafficManagementTable, zhoneCpeVoipFeaturesIndexNext=zhoneCpeVoipFeaturesIndexNext, zhoneCpeVideoAccessControl=zhoneCpeVideoAccessControl, zhoneCpeIpServerSecondaryDns=zhoneCpeIpServerSecondaryDns, zhoneCpeSystemCommonPowerRestoreDelay=zhoneCpeSystemCommonPowerRestoreDelay, zhoneCpeDnsHostList=zhoneCpeDnsHostList, zhoneCpeVoipSipRegExpirationTime=zhoneCpeVoipSipRegExpirationTime, zhoneCpeOnuH248Supported=zhoneCpeOnuH248Supported, zhoneCpePppoeRowStatus=zhoneCpePppoeRowStatus, zhoneCpeVoipSoftSwitch=zhoneCpeVoipSoftSwitch, zhoneCpeInterfaceVlanTranslateSlanCos=zhoneCpeInterfaceVlanTranslateSlanCos, zhoneCpePweRBitReceivePolicy=zhoneCpePweRBitReceivePolicy, zhoneCpePweMalformedDeclarePolicy=zhoneCpePweMalformedDeclarePolicy, zhoneCpeLldpMedPolicyListIndexNext=zhoneCpeLldpMedPolicyListIndexNext, zhoneCpeIpServerNetmask=zhoneCpeIpServerNetmask, zhoneCpeWlanSubscriberIndex=zhoneCpeWlanSubscriberIndex, zhoneCpeSipDialPlanString=zhoneCpeSipDialPlanString, zhoneCpeCondDhcpSrvWanVlan=zhoneCpeCondDhcpSrvWanVlan, zhoneCpeOnuNumberOfEthPorts=zhoneCpeOnuNumberOfEthPorts, zhoneCpeInterfaceVlanTranslateSlanId=zhoneCpeInterfaceVlanTranslateSlanId, zhoneCpeTrafficManagementEntry=zhoneCpeTrafficManagementEntry, zhoneCpeWlanSubscriberGroup=zhoneCpeWlanSubscriberGroup, zhoneCpeIpServerGroup=zhoneCpeIpServerGroup, zhoneCpeOnuE1Supported=zhoneCpeOnuE1Supported, zhoneCpeWlanSubscriberRadiusKey=zhoneCpeWlanSubscriberRadiusKey, zhoneCpePortFwd=zhoneCpePortFwd, zhoneCpeWlanAdvWmmNoAck=zhoneCpeWlanAdvWmmNoAck, zhoneCpeLldpMedPolicyIndexEntryIndexNext=zhoneCpeLldpMedPolicyIndexEntryIndexNext, zhoneCpeWlanWpaGroupRekeyInterval=zhoneCpeWlanWpaGroupRekeyInterval, zhoneCpeStaticRouteEntryIndex=zhoneCpeStaticRouteEntryIndex, zhoneCpeOnuNumberOfPotsPorts=zhoneCpeOnuNumberOfPotsPorts, zhoneCpeCondDhcpSrvPrivatePort=zhoneCpeCondDhcpSrvPrivatePort, zhoneCpeIpServerIndex=zhoneCpeIpServerIndex, zhoneCpeOnuModelInfoTable=zhoneCpeOnuModelInfoTable, zhoneCpeStaticRouteListIndexNext=zhoneCpeStaticRouteListIndexNext, zhoneCpePweSubscriberLineStatusAlarm=zhoneCpePweSubscriberLineStatusAlarm, zhoneCpeConnectionFloodingGport=zhoneCpeConnectionFloodingGport, zhoneCpeIpServerNat=zhoneCpeIpServerNat, zhoneCpeWlanAdvDot11nRate=zhoneCpeWlanAdvDot11nRate, zhoneCpeVideoAccessControlIndexNext=zhoneCpeVideoAccessControlIndexNext, zhoneCpePortFwdListProfileName=zhoneCpePortFwdListProfileName, zhoneCpePweRBitTransmitClearPolicy=zhoneCpePweRBitTransmitClearPolicy, zhoneCpeDnsHostIndexEntryIndexNext=zhoneCpeDnsHostIndexEntryIndexNext, zhoneCpePortFwdPrivatePort=zhoneCpePortFwdPrivatePort, zhoneCpeOnuEthSlotNumber=zhoneCpeOnuEthSlotNumber, zhoneCpeAccessControlListProfileIndex=zhoneCpeAccessControlListProfileIndex, zhoneCpeWlanSubscriberDevicePin=zhoneCpeWlanSubscriberDevicePin, zhoneCpeConnectionDscpToCosProfileIndex=zhoneCpeConnectionDscpToCosProfileIndex, zhoneCpeSystemCommonEntry=zhoneCpeSystemCommonEntry, TpType=TpType, zhoneCpeVideoBandwidthEnforce=zhoneCpeVideoBandwidthEnforce, zhoneCpeConnectionRgMode=zhoneCpeConnectionRgMode, zhoneCpeWlanAdvAutoChanTimer=zhoneCpeWlanAdvAutoChanTimer, zhoneCpeVoipPacketPeriodSelectionSecondOrder=zhoneCpeVoipPacketPeriodSelectionSecondOrder, zhoneCpeDhcpServerConditionalServerListProfile=zhoneCpeDhcpServerConditionalServerListProfile, zhoneCpeVoipSubscriberDisplayName=zhoneCpeVoipSubscriberDisplayName, zhoneCpeVoipCriticalDialTimeout=zhoneCpeVoipCriticalDialTimeout, zhoneCpePweSubscriberGroup=zhoneCpePweSubscriberGroup, zhoneCpePweExpectedSSrcPayload=zhoneCpePweExpectedSSrcPayload, zhoneCpePweTransport=zhoneCpePweTransport, zhoneCpeConnectionTable=zhoneCpeConnectionTable, zhoneCpeVoipSipRegRetryTime=zhoneCpeVoipSipRegRetryTime, zhoneCpePwe=zhoneCpePwe, zhoneCpeWlanSubscriberAdminState=zhoneCpeWlanSubscriberAdminState, zhoneCpeInterfaceVlanTranslateSlanTpId=zhoneCpeInterfaceVlanTranslateSlanTpId, zhoneCpeSystemCommonAdminPassword=zhoneCpeSystemCommonAdminPassword, zhoneCpeCfgGlobalSettingsGroup=zhoneCpeCfgGlobalSettingsGroup, zhoneCpeVoipServerIndex=zhoneCpeVoipServerIndex, zhoneCpeSipDialPlanIndexNext=zhoneCpeSipDialPlanIndexNext, zhoneCpeWlanSubscriberRowStatus=zhoneCpeWlanSubscriberRowStatus, zhoneCpeEthSubscriberMtu=zhoneCpeEthSubscriberMtu, zhoneCpeVoipServerOutboundServer=zhoneCpeVoipServerOutboundServer)
mibBuilder.exportSymbols("Zhone-CPE-MIB", zhoneCpeCmdSvcTemplateId=zhoneCpeCmdSvcTemplateId, zhoneCpeWlanAdvWmmApsd=zhoneCpeWlanAdvWmmApsd, zhoneCpeVideoRowStatus=zhoneCpeVideoRowStatus, zhoneCpeSystemEntry=zhoneCpeSystemEntry, zhoneCpeLldpMedPolicyDscp=zhoneCpeLldpMedPolicyDscp, zhoneCpeVoipMgcMessageFormat=zhoneCpeVoipMgcMessageFormat, zhoneCpeWlanHideAccessPoint=zhoneCpeWlanHideAccessPoint, zhoneCpeCmdSvcTemplateSlan=zhoneCpeCmdSvcTemplateSlan, zhoneCpeVoipCodecSelectionThirdOrder=zhoneCpeVoipCodecSelectionThirdOrder, zhoneCpeWlanMaxClients=zhoneCpeWlanMaxClients, zhoneCpeStaticRouteIndexEntry=zhoneCpeStaticRouteIndexEntry, zhoneCpeCmdSrcIfIndex=zhoneCpeCmdSrcIfIndex, zhoneCpeIpEntry=zhoneCpeIpEntry, zhoneCpePortFwdListRowStatus=zhoneCpePortFwdListRowStatus, zhoneCpePweChannelAssign=zhoneCpePweChannelAssign, zhoneCpeWlanAdvMcastRate=zhoneCpeWlanAdvMcastRate, zhoneCpeDnsHostRowStatus=zhoneCpeDnsHostRowStatus, zhoneCpeVoipMgcMaximumRetryAttempts=zhoneCpeVoipMgcMaximumRetryAttempts, zhoneCpeWlanSubscriberSsid=zhoneCpeWlanSubscriberSsid, zhoneCpeEthSubscriberAdminState=zhoneCpeEthSubscriberAdminState, zhoneCpeCmdDstIfIndex=zhoneCpeCmdDstIfIndex, zhoneCpeWlanAdvBeaconInterval=zhoneCpeWlanAdvBeaconInterval, zhoneCpeDnsHostEntry=zhoneCpeDnsHostEntry, zhoneCpeVoipSubscriberGroup=zhoneCpeVoipSubscriberGroup, zhoneCpeInterfaceVlanRgMode=zhoneCpeInterfaceVlanRgMode, zhoneCpeOnuPotsSlotNumber=zhoneCpeOnuPotsSlotNumber, zhoneCpePppoeEntry=zhoneCpePppoeEntry, zhoneCpePweExpectedPTypePayload=zhoneCpePweExpectedPTypePayload, zhoneCpeVoipPacketPeriodSelectionFirstOrder=zhoneCpeVoipPacketPeriodSelectionFirstOrder, zhoneCpePortFwdListEntry=zhoneCpePortFwdListEntry, zhoneCpeVoipPacketPeriodSelectionFourthOrder=zhoneCpeVoipPacketPeriodSelectionFourthOrder, zhoneCpeCmdSvcTemplateVirtualConn=zhoneCpeCmdSvcTemplateVirtualConn, zhoneCpeWlanAdvApMode=zhoneCpeWlanAdvApMode, zhoneCpeVideoAccessControlGroup=zhoneCpeVideoAccessControlGroup, zhoneCpeSystemGroup=zhoneCpeSystemGroup, zhoneCpeInterfaceVlanTranslateVlanCos=zhoneCpeInterfaceVlanTranslateVlanCos, zhoneCpeRfSubscriberRowStatus=zhoneCpeRfSubscriberRowStatus, zhoneCpeCmdSrcShelf=zhoneCpeCmdSrcShelf, zhoneCpeStaticRouteEntry=zhoneCpeStaticRouteEntry, zhoneCpeDnsHostListEntry=zhoneCpeDnsHostListEntry, zhoneCpeStaticRouteIndexTable=zhoneCpeStaticRouteIndexTable, zhoneCpeOnuNumberOfCesPorts=zhoneCpeOnuNumberOfCesPorts, zhoneCpePwePayloadEncapsulationDelay=zhoneCpePwePayloadEncapsulationDelay, zhoneCpeIpServerPrimaryDns=zhoneCpeIpServerPrimaryDns, zhoneCpeOnuModelInfoIndex=zhoneCpeOnuModelInfoIndex, zhoneCpeEthSubscriberLoopback=zhoneCpeEthSubscriberLoopback, zhoneCpeVoipPartialDialTimeout=zhoneCpeVoipPartialDialTimeout, zhoneCpeVoipRtpDscp=zhoneCpeVoipRtpDscp, zhoneCpeLldpMedPolicyAdminState=zhoneCpeLldpMedPolicyAdminState, zhoneCpeSipDialPlanFormat=zhoneCpeSipDialPlanFormat, zhoneCpeCmdSvcTemplateVlan=zhoneCpeCmdSvcTemplateVlan, zhoneCpeVoipSipDomain=zhoneCpeVoipSipDomain, zhoneCpeHostIp=zhoneCpeHostIp, zhoneCpeVideoAccessControlIndexEntry=zhoneCpeVideoAccessControlIndexEntry, zhoneCpeCondDhcpSrvEntry=zhoneCpeCondDhcpSrvEntry, zhoneCpeCmdSvcTemplateTpType=zhoneCpeCmdSvcTemplateTpType, zhoneCpePortIfIndex=zhoneCpePortIfIndex, zhoneCpeConnectionSlanCos=zhoneCpeConnectionSlanCos, zhoneCpeVoipSipRegistrar=zhoneCpeVoipSipRegistrar, zhoneCpeStaticRouteListEntry=zhoneCpeStaticRouteListEntry, zhoneCpeEthSubscriberPowerRange=zhoneCpeEthSubscriberPowerRange, zhoneCpeWlanAdvRtsThreshold=zhoneCpeWlanAdvRtsThreshold, zhoneCpeSystemCommonIndexNext=zhoneCpeSystemCommonIndexNext, zhoneCpeConnectionTranslateSlanId=zhoneCpeConnectionTranslateSlanId, zhoneCpeIpServerHostIpOption=zhoneCpeIpServerHostIpOption, zhoneCpePweProfileName=zhoneCpePweProfileName, zhoneCpeLldpMedPolicyAppType=zhoneCpeLldpMedPolicyAppType, zhoneCpePweDs1Mode=zhoneCpePweDs1Mode, zhoneCpeVoipFeaturesHotLine=zhoneCpeVoipFeaturesHotLine, zhoneCpeSystemCommonTable=zhoneCpeSystemCommonTable, zhoneCpeDhcpServerRowStatus=zhoneCpeDhcpServerRowStatus, zhoneCpeEthSubscriberPauseTime=zhoneCpeEthSubscriberPauseTime, zhoneCpeServiceApplicationTable=zhoneCpeServiceApplicationTable, zhoneCpeAutoCfgRuleMatchExpression=zhoneCpeAutoCfgRuleMatchExpression, zhoneCpeVoipOobDtmfEvents=zhoneCpeVoipOobDtmfEvents, zhoneCpePppoePassword=zhoneCpePppoePassword, zhoneCpeCmdDstTpIndex=zhoneCpeCmdDstTpIndex, zhoneCpeLldpMedPolicyListEntry=zhoneCpeLldpMedPolicyListEntry, zhoneCpeWlanWmmAdvertise=zhoneCpeWlanWmmAdvertise, zhoneCpeDnsHost=zhoneCpeDnsHost, zhoneCpePweTimingMode=zhoneCpePweTimingMode, zhoneCpePortFwdPortStart=zhoneCpePortFwdPortStart, zhoneCpeVideoAccessControlListIndex=zhoneCpeVideoAccessControlListIndex, zhoneCpeStaticRouteNetmask=zhoneCpeStaticRouteNetmask, zhoneCpeTrafficManagementIndex=zhoneCpeTrafficManagementIndex, zhoneCpeSystemCommonGroup=zhoneCpeSystemCommonGroup, zhoneCpeMIB=zhoneCpeMIB, ZhoneCpeTemplateType=ZhoneCpeTemplateType, zhoneCpeCmdSrcSlot=zhoneCpeCmdSrcSlot, zhoneCpeCmdGroup=zhoneCpeCmdGroup, zhoneCpeVoipCodecSelectionFirstOrder=zhoneCpeVoipCodecSelectionFirstOrder, zhoneCpeVideoIndexNext=zhoneCpeVideoIndexNext, zhoneCpeSystemCommonSyncCookieProtection=zhoneCpeSystemCommonSyncCookieProtection, zhoneCpeVoipSubscriberPortNumber=zhoneCpeVoipSubscriberPortNumber, zhoneCpeSystemCommonAcsUsername=zhoneCpeSystemCommonAcsUsername, zhoneCpeVoipFeaturesIndex=zhoneCpeVoipFeaturesIndex, zhoneCpeVideoIndex=zhoneCpeVideoIndex, zhoneCpeCondDhcpSrvListTable=zhoneCpeCondDhcpSrvListTable, zhoneCpeVoipCasEventsPassingMethod=zhoneCpeVoipCasEventsPassingMethod, zhoneCpeEthSubscriberPortType=zhoneCpeEthSubscriberPortType, zhoneCpeLldpMedPolicyTable=zhoneCpeLldpMedPolicyTable, zhoneCpeLldpMedPolicyIndexEntry=zhoneCpeLldpMedPolicyIndexEntry, zhoneCpeWlanAdvIndex=zhoneCpeWlanAdvIndex, zhoneCpePortFwdList=zhoneCpePortFwdList, zhoneCpePortFwdListIndex=zhoneCpePortFwdListIndex, zhoneCpePortFwdGroup=zhoneCpePortFwdGroup, zhoneCpeVideoGroup=zhoneCpeVideoGroup, zhoneCpeServiceApplicationGroup=zhoneCpeServiceApplicationGroup, zhoneCpeLldpMedPolicyIndexTable=zhoneCpeLldpMedPolicyIndexTable, zhoneCpeWlanAdvGlobalMaxClients=zhoneCpeWlanAdvGlobalMaxClients, zhoneCpeIpTable=zhoneCpeIpTable, zhoneCpeWlanAdvRate54G=zhoneCpeWlanAdvRate54G, zhoneCpeCondDhcpSrvListGroup=zhoneCpeCondDhcpSrvListGroup, zhoneCpePortFwdType=zhoneCpePortFwdType, zhoneCpeCondDhcpSrvStartAddr=zhoneCpeCondDhcpSrvStartAddr, zhoneCpePweMisconnectedClearPolicy=zhoneCpePweMisconnectedClearPolicy, zhoneCpeEthSubscriberRowStatus=zhoneCpeEthSubscriberRowStatus, zhoneCpePweChannelAssociatedSignalling=zhoneCpePweChannelAssociatedSignalling, zhoneCpeWlanAdvIndexNext=zhoneCpeWlanAdvIndexNext, zhoneCpeSystemCommon=zhoneCpeSystemCommon, zhoneCpeCmdSvcTemplateTpIndex=zhoneCpeCmdSvcTemplateTpIndex, zhoneCpeTrafficManagement=zhoneCpeTrafficManagement, zhoneCpePweSubscriberPortNumber=zhoneCpePweSubscriberPortNumber, zhoneCpeCmdSvcTemplateIfIndex=zhoneCpeCmdSvcTemplateIfIndex, zhoneCpeVoipServerProfileIndex=zhoneCpeVoipServerProfileIndex, zhoneCpePweLBitReceivePolicy=zhoneCpePweLBitReceivePolicy, zhoneCpeVoipFeaturesTable=zhoneCpeVoipFeaturesTable, zhoneCpeWlanProfileName=zhoneCpeWlanProfileName, zhoneCpeVideoAccessControlRowStatus=zhoneCpeVideoAccessControlRowStatus, zhoneCpeDnsHostGroup=zhoneCpeDnsHostGroup, zhoneCpeSipDialPlanGroup=zhoneCpeSipDialPlanGroup, zhoneCpeTrafficManagementUpstreamPriority=zhoneCpeTrafficManagementUpstreamPriority, zhoneCpePweSubscriberEntry=zhoneCpePweSubscriberEntry, zhoneCpeWlanAdvDtimInterval=zhoneCpeWlanAdvDtimInterval, zhoneCpeSipDialPlanTable=zhoneCpeSipDialPlanTable, zhoneCpeDhcpServerLeaseTime=zhoneCpeDhcpServerLeaseTime, zhoneCpeEthSubscriberTable=zhoneCpeEthSubscriberTable, zhoneCpePortFwdEntryIndexNext=zhoneCpePortFwdEntryIndexNext, zhoneCpeCmdSvcTemplateType=zhoneCpeCmdSvcTemplateType, zhoneCpeVoipSubscriberSignallingCode=zhoneCpeVoipSubscriberSignallingCode, zhoneCpeSystemTable=zhoneCpeSystemTable, zhoneCpeWlanAdvWps=zhoneCpeWlanAdvWps, zhoneCpeCmdOverrideVlanId=zhoneCpeCmdOverrideVlanId, zhoneCpeWlanSubscriberTable=zhoneCpeWlanSubscriberTable, zhoneCpeDhcpServerGroup=zhoneCpeDhcpServerGroup, zhoneCpeVoipMediaEntry=zhoneCpeVoipMediaEntry, zhoneCpeCmdDstShelf=zhoneCpeCmdDstShelf, zhoneCpeEthSubscriberLineStatusAlarm=zhoneCpeEthSubscriberLineStatusAlarm, zhoneCpePweEncoding=zhoneCpePweEncoding, zhoneCpeWlanAdvancedTable=zhoneCpeWlanAdvancedTable, zhoneCpeVoipMgcVersion=zhoneCpeVoipMgcVersion, zhoneCpeServiceApplicationTpType=zhoneCpeServiceApplicationTpType, zhoneCpeIpServerProfile=zhoneCpeIpServerProfile, zhoneCpeStaticRouteListProfileIndex=zhoneCpeStaticRouteListProfileIndex, zhoneCpeSystemCommonProfileIndex=zhoneCpeSystemCommonProfileIndex, zhoneCpeSystemCommonAcsUrl=zhoneCpeSystemCommonAcsUrl, zhoneCpePortFwdIndexTable=zhoneCpePortFwdIndexTable, zhoneCpeAutoCfgRuleEntry=zhoneCpeAutoCfgRuleEntry, zhoneCpeIpServerDnsSrc=zhoneCpeIpServerDnsSrc, zhoneCpeVideoIgmpFunction=zhoneCpeVideoIgmpFunction, zhoneCpeWlanAdvXpressTechnology=zhoneCpeWlanAdvXpressTechnology, zhoneCpeCondDhcpSrvPriDns=zhoneCpeCondDhcpSrvPriDns, zhoneCpeVoipSipReRegHeadStartTime=zhoneCpeVoipSipReRegHeadStartTime, zhoneCpeVideoUpstreamIgmpRate=zhoneCpeVideoUpstreamIgmpRate, zhoneCpeVoipSilenceSuppressionFourthOrder=zhoneCpeVoipSilenceSuppressionFourthOrder, zhoneCpeVoipCallProgressOrTransferFeatures=zhoneCpeVoipCallProgressOrTransferFeatures, zhoneCpeWlanAdvProfileName=zhoneCpeWlanAdvProfileName, zhoneCpeVoipMgcpClientAddressMode=zhoneCpeVoipMgcpClientAddressMode, zhoneCpeDhcpServerEntry=zhoneCpeDhcpServerEntry, zhoneCpeOnuT1Supported=zhoneCpeOnuT1Supported, zhoneCpeWlanRowStatus=zhoneCpeWlanRowStatus, zhoneCpeSystemCommonSupportPassword=zhoneCpeSystemCommonSupportPassword, zhoneCpeIpServerProfileIndex=zhoneCpeIpServerProfileIndex, zhoneCpeConnectionVlanTpId=zhoneCpeConnectionVlanTpId, zhoneCpeCmdDstSubport=zhoneCpeCmdDstSubport, zhoneCpeCfgParamsStr=zhoneCpeCfgParamsStr, zhoneCpeCondDhcpSrvListRowStatus=zhoneCpeCondDhcpSrvListRowStatus, zhoneCpeWlanAdvDot11nMode=zhoneCpeWlanAdvDot11nMode, zhoneCpePweSubscriberLoopback=zhoneCpePweSubscriberLoopback, zhoneCpePwePtypePayload=zhoneCpePwePtypePayload, zhoneCpeDnsHostListGroup=zhoneCpeDnsHostListGroup, zhoneCpeCondDhcpSrvPortFwdRule=zhoneCpeCondDhcpSrvPortFwdRule, zhoneCpePweExpectedPTypeSignalling=zhoneCpePweExpectedPTypeSignalling, zhoneCpeConnectionVideoGport=zhoneCpeConnectionVideoGport, zhoneCpeWlanAdvDot1nProtection=zhoneCpeWlanAdvDot1nProtection, zhoneCpeCmdSrcTpIndex=zhoneCpeCmdSrcTpIndex, zhoneCpeLldpMedPolicyListTable=zhoneCpeLldpMedPolicyListTable, zhoneCpePweSubscriberFarEndPort=zhoneCpePweSubscriberFarEndPort, zhoneCpeVideoEntry=zhoneCpeVideoEntry, zhoneCpeIpServerIgmpFunction=zhoneCpeIpServerIgmpFunction, zhoneCpeSystemCommonCrossVlanRouting=zhoneCpeSystemCommonCrossVlanRouting, zhoneCpeDhcpServerEndAddress=zhoneCpeDhcpServerEndAddress, zhoneCpeOnuModelInfoGroup=zhoneCpeOnuModelInfoGroup, zhoneCpeSystemCommonInformInterval=zhoneCpeSystemCommonInformInterval, zhoneCpeCondDhcpSrv=zhoneCpeCondDhcpSrv, zhoneCpeDnsHostIndexEntry=zhoneCpeDnsHostIndexEntry, zhoneCpeAutoCfgRule=zhoneCpeAutoCfgRule, zhoneCpePweRowStatus=zhoneCpePweRowStatus, zhoneCpeServiceApplicationTpIndex=zhoneCpeServiceApplicationTpIndex, zhoneCpeWlanWepEncryption=zhoneCpeWlanWepEncryption, zhoneCpeVideoAccessControlSrcIp=zhoneCpeVideoAccessControlSrcIp, zhoneCpeTrafficManagementUpstreamWeight=zhoneCpeTrafficManagementUpstreamWeight, zhoneCpeVoipFeaturesHotLineNumber=zhoneCpeVoipFeaturesHotLineNumber, zhoneCpeSipDialPlanIndexTable=zhoneCpeSipDialPlanIndexTable, zhoneCpeCondDhcpSrvListIndex=zhoneCpeCondDhcpSrvListIndex, zhoneCpeEthSubscriberGroup=zhoneCpeEthSubscriberGroup, zhoneCpeInterfaceVlanGroup=zhoneCpeInterfaceVlanGroup, zhoneCpeVideoAccessControlTable=zhoneCpeVideoAccessControlTable, zhoneCpeVoipSubscriberUserName=zhoneCpeVoipSubscriberUserName, zhoneCpeStaticRouteListIndex=zhoneCpeStaticRouteListIndex, zhoneCpeCondDhcpSrvEntryIndex=zhoneCpeCondDhcpSrvEntryIndex, zhoneCpeVoipServerSignallingProtocol=zhoneCpeVoipServerSignallingProtocol, zhoneCpeVoipOobCasEvents=zhoneCpeVoipOobCasEvents, zhoneCpeOnuNumberOfPoEPorts=zhoneCpeOnuNumberOfPoEPorts, zhoneCpeVoipSilenceSuppressionFirstOrder=zhoneCpeVoipSilenceSuppressionFirstOrder, zhoneCpeVoipMgcpPersistentNotify=zhoneCpeVoipMgcpPersistentNotify, zhoneCpeStaticRoute=zhoneCpeStaticRoute, zhoneCpeStaticRouteTable=zhoneCpeStaticRouteTable, zhoneCpeCmdDstTpType=zhoneCpeCmdDstTpType, zhoneCpeWlanAdvGroup=zhoneCpeWlanAdvGroup, zhoneCpeWlanAdvanced=zhoneCpeWlanAdvanced, zhoneCpeOnuModelInfoEntry=zhoneCpeOnuModelInfoEntry, zhoneCpeDhcpServerIndexNext=zhoneCpeDhcpServerIndexNext, zhoneCpeWlanIndex=zhoneCpeWlanIndex, zhoneCpePweMalformedClearPolicy=zhoneCpePweMalformedClearPolicy, zhoneCpeCondDhcpSrvStartPort=zhoneCpeCondDhcpSrvStartPort, zhoneCpeCondDhcpSrvPermanent=zhoneCpeCondDhcpSrvPermanent, zhoneCpePortFwdEntry=zhoneCpePortFwdEntry, zhoneCpeOnuSipPlarSupported=zhoneCpeOnuSipPlarSupported, zhoneCpeDhcpServerProfileName=zhoneCpeDhcpServerProfileName, zhoneCpeVoipCidFeatures=zhoneCpeVoipCidFeatures, zhoneCpeVoipMgcTerminationIdBase=zhoneCpeVoipMgcTerminationIdBase, zhoneCpeWlanRadiusServerIp=zhoneCpeWlanRadiusServerIp, zhoneCpeTrafficManagementDownstreamPriority=zhoneCpeTrafficManagementDownstreamPriority, zhoneCpeVoipMediaRowStatus=zhoneCpeVoipMediaRowStatus, zhoneCpeCondDhcpSrvIndexEntryIndexNext=zhoneCpeCondDhcpSrvIndexEntryIndexNext, zhoneCpePortFwdPortEnd=zhoneCpePortFwdPortEnd, zhoneCpePweJitterBufDesired=zhoneCpePweJitterBufDesired, zhoneCpeVoipDscpMark=zhoneCpeVoipDscpMark, zhoneCpeWlanAdvRowStatus=zhoneCpeWlanAdvRowStatus, zhoneCpeCondDhcpSrvEndAddr=zhoneCpeCondDhcpSrvEndAddr, zhoneCpeStaticRouteGroup=zhoneCpeStaticRouteGroup, zhoneCpeConnectionTranslateVlanId=zhoneCpeConnectionTranslateVlanId, zhoneCpeInterfaceVlanRowStatus=zhoneCpeInterfaceVlanRowStatus, zhoneCpeOnuModelInfoRGBridged=zhoneCpeOnuModelInfoRGBridged, zhoneCpeLldpMedPolicyListProfileName=zhoneCpeLldpMedPolicyListProfileName, zhoneCpeVoipFeatures=zhoneCpeVoipFeatures, zhoneCpeVoipReleaseTimer=zhoneCpeVoipReleaseTimer, zhoneCpeVoipFeaturesEntry=zhoneCpeVoipFeaturesEntry, zhoneCpeCfgGlobalSettings=zhoneCpeCfgGlobalSettings, zhoneCpeVoipServerRowStatus=zhoneCpeVoipServerRowStatus, zhoneCpeSystemCommonTr69Inform=zhoneCpeSystemCommonTr69Inform, zhoneCpeCondDhcpSrvSecNpt=zhoneCpeCondDhcpSrvSecNpt, zhoneCpeInterfaceVlanTable=zhoneCpeInterfaceVlanTable)
mibBuilder.exportSymbols("Zhone-CPE-MIB", zhoneCpeTrafficManagementGroup=zhoneCpeTrafficManagementGroup, zhoneCpePweDs1Framing=zhoneCpePweDs1Framing, zhoneCpeWlanIsolateClients=zhoneCpeWlanIsolateClients, zhoneCpePweExpectedSSrcSignalling=zhoneCpePweExpectedSSrcSignalling, zhoneCpeLldpMedPolicyVlanId=zhoneCpeLldpMedPolicyVlanId, zhoneCpeDnsHostListProfile=zhoneCpeDnsHostListProfile, zhoneCpeEthSubscriberPowerFeed=zhoneCpeEthSubscriberPowerFeed, zhoneCpeCmdOperation=zhoneCpeCmdOperation, zhoneCpeVoipCallWaitingFeatures=zhoneCpeVoipCallWaitingFeatures, zhoneCpeDnsHostListTable=zhoneCpeDnsHostListTable, zhoneCpeIpServerEntry=zhoneCpeIpServerEntry, zhoneCpeVoipMediaTable=zhoneCpeVoipMediaTable, zhoneCpeIpServiceType=zhoneCpeIpServiceType, zhoneCpeDnsHostListIndex=zhoneCpeDnsHostListIndex, zhoneCpeVoipMediaGroup=zhoneCpeVoipMediaGroup, zhoneCpePortFwdProtocol=zhoneCpePortFwdProtocol, zhoneCpeCondDhcpSrvGroup=zhoneCpeCondDhcpSrvGroup, zhoneCpeConnectionTranslateVlanCos=zhoneCpeConnectionTranslateVlanCos, zhoneCpeVoipSecondaryServer=zhoneCpeVoipSecondaryServer, zhoneCpeLldpMedPolicyCos=zhoneCpeLldpMedPolicyCos, zhoneCpeSystemCommonFirewall=zhoneCpeSystemCommonFirewall, zhoneCpePweClockReference=zhoneCpePweClockReference, zhoneCpeRfSubscriberGroup=zhoneCpeRfSubscriberGroup, zhoneCpeWlanNetAuthentication=zhoneCpeWlanNetAuthentication, zhoneCpeDhcpServerStartAddress=zhoneCpeDhcpServerStartAddress, zhoneCpeVoipFeaturesRowStatus=zhoneCpeVoipFeaturesRowStatus, zhoneCpeAutoCfgRuleDeleteBeforeApply=zhoneCpeAutoCfgRuleDeleteBeforeApply, zhoneCpeStaticRouteListGroup=zhoneCpeStaticRouteListGroup, zhoneCpePortFwdPrivateIp=zhoneCpePortFwdPrivateIp, zhoneCpeVoipCodecSelectionFourthOrder=zhoneCpeVoipCodecSelectionFourthOrder, zhoneCpeOnuModelInfoTftpDnld=zhoneCpeOnuModelInfoTftpDnld, zhoneCpeWdsMacListProfileIndex=zhoneCpeWdsMacListProfileIndex, zhoneCpeSystemCommonPowerShutdownDelay=zhoneCpeSystemCommonPowerShutdownDelay, zhoneCpeVideoAccessControlImputedGroupBw=zhoneCpeVideoAccessControlImputedGroupBw, zhoneCpeServiceApplicationRowStatus=zhoneCpeServiceApplicationRowStatus, zhoneCpeEthSubscriberLldpMedList=zhoneCpeEthSubscriberLldpMedList, zhoneCpeTrafficManagementProfileName=zhoneCpeTrafficManagementProfileName, zhoneCpePweFillPolicy=zhoneCpePweFillPolicy, zhoneCpeTrafficManagementIndexNext=zhoneCpeTrafficManagementIndexNext, zhoneCpeIpServerDnsType=zhoneCpeIpServerDnsType, zhoneCpeSipDialPlanRowStatus=zhoneCpeSipDialPlanRowStatus, zhoneCpeWlanAdvWpsAddClientMethod=zhoneCpeWlanAdvWpsAddClientMethod, zhoneCpeOnuModelInfoRgVoip=zhoneCpeOnuModelInfoRgVoip, zhoneCpeTpType=zhoneCpeTpType, zhoneCpeAutoCfgRuleGroup=zhoneCpeAutoCfgRuleGroup, zhoneCpeCondDhcpSrvListEntry=zhoneCpeCondDhcpSrvListEntry, zhoneCpeVoipFeaturesAnnouncementType=zhoneCpeVoipFeaturesAnnouncementType, zhoneCpeConnectionTranslateSlanTpId=zhoneCpeConnectionTranslateSlanTpId, zhoneCpeLldpMedPolicyListGroup=zhoneCpeLldpMedPolicyListGroup, zhoneCpeIpGroup=zhoneCpeIpGroup, zhoneCpePppoeGroup=zhoneCpePppoeGroup, zhoneCpePortFwdListIndexNext=zhoneCpePortFwdListIndexNext, zhoneCpeCondDhcpSrvRowStatus=zhoneCpeCondDhcpSrvRowStatus, zhoneCpeTrafficManagementDownstreamPIR=zhoneCpeTrafficManagementDownstreamPIR, zhoneCpeVideoRobustness=zhoneCpeVideoRobustness, zhoneCpeCondDhcpSrvListProfileName=zhoneCpeCondDhcpSrvListProfileName, zhoneCpeCondDhcpSrvVciMatch=zhoneCpeCondDhcpSrvVciMatch, zhoneCpeVoipServerTable=zhoneCpeVoipServerTable, zhoneCpeCondDhcpSrvPriorityOrder=zhoneCpeCondDhcpSrvPriorityOrder, zhoneCpeVoipFaxMode=zhoneCpeVoipFaxMode, zhoneCpeDnsHostTable=zhoneCpeDnsHostTable, zhoneCpeVideoMaxMulticastBandwidth=zhoneCpeVideoMaxMulticastBandwidth, zhoneCpeVoipProfileName=zhoneCpeVoipProfileName, zhoneCpePweJitterBufMax=zhoneCpePweJitterBufMax, zhoneCpePweSignalling=zhoneCpePweSignalling, zhoneCpeRfSubscriberPortNumber=zhoneCpeRfSubscriberPortNumber, zhoneCpeAutoCfgRuleIndex=zhoneCpeAutoCfgRuleIndex, zhoneCpeEthSubscriberPortNumber=zhoneCpeEthSubscriberPortNumber, zhoneCpeOnuBatteryBackup=zhoneCpeOnuBatteryBackup, zhoneCpeTrafficManagementRowStatus=zhoneCpeTrafficManagementRowStatus, zhoneCpeVoipFeaturesGroup=zhoneCpeVoipFeaturesGroup, zhoneCpeConnectionTranslateSlanCos=zhoneCpeConnectionTranslateSlanCos, zhoneCpeDnsHostListProfileName=zhoneCpeDnsHostListProfileName, zhoneCpeIfIndex=zhoneCpeIfIndex, zhoneCpeWlanEntry=zhoneCpeWlanEntry, zhoneCpeIpServerTable=zhoneCpeIpServerTable, zhoneCpeWlanMcastFwd=zhoneCpeWlanMcastFwd, zhoneCpeCfgAutoAssign=zhoneCpeCfgAutoAssign, zhoneCpeAutoCfgRulePriority=zhoneCpeAutoCfgRulePriority, zhoneCpeVoipMediaProfileName=zhoneCpeVoipMediaProfileName, zhoneCpeIpServerDefaultIface=zhoneCpeIpServerDefaultIface, zhoneCpeVoipSubscriberPassword=zhoneCpeVoipSubscriberPassword, zhoneCpePweTable=zhoneCpePweTable, zhoneCpeVoipFeaturesProfileIndex=zhoneCpeVoipFeaturesProfileIndex, zhoneCpePweSubscriberNearEndPort=zhoneCpePweSubscriberNearEndPort, zhoneCpeCondDhcpSrvVsi=zhoneCpeCondDhcpSrvVsi, zhoneCpeInterfaceVlanTranslateVlanId=zhoneCpeInterfaceVlanTranslateVlanId, zhoneCpePweSubscriberAdminState=zhoneCpePweSubscriberAdminState, zhoneCpeVoipServerGroup=zhoneCpeVoipServerGroup, zhoneCpeVoipDtmfEventsPassingMethod=zhoneCpeVoipDtmfEventsPassingMethod, zhoneCpePweSesThreshold=zhoneCpePweSesThreshold, zhoneCpeWlanAdvancedEntry=zhoneCpeWlanAdvancedEntry, zhoneCpeTrafficManagementPeakBurstSize=zhoneCpeTrafficManagementPeakBurstSize, zhoneCpeSipDialPlanEntry=zhoneCpeSipDialPlanEntry, zhoneCpeVideoAccessControlList=zhoneCpeVideoAccessControlList, zhoneCpeVideo=zhoneCpeVideo, zhoneCpeWlanAdvTxPower=zhoneCpeWlanAdvTxPower, zhoneCpeVoipSubscriberDialNumber=zhoneCpeVoipSubscriberDialNumber, zhoneCpeServiceApplicationSlan=zhoneCpeServiceApplicationSlan, zhoneCpeIpServerGateway=zhoneCpeIpServerGateway, zhoneCpeVoipSignalingDscp=zhoneCpeVoipSignalingDscp, zhoneCpeAutoCfgRuleAdminState=zhoneCpeAutoCfgRuleAdminState, zhoneCpeWlanSubscriberEntry=zhoneCpeWlanSubscriberEntry, zhoneCpeIpServerRowStatus=zhoneCpeIpServerRowStatus, zhoneCpeVoipSubscriberTable=zhoneCpeVoipSubscriberTable, zhoneCpePortFwdListGroup=zhoneCpePortFwdListGroup, zhoneCpeConnectionVlanCos=zhoneCpeConnectionVlanCos, zhoneCpeVoipRohTimer=zhoneCpeVoipRohTimer, zhoneCpeOnuSipSupported=zhoneCpeOnuSipSupported, zhoneCpeWlanWepStrength=zhoneCpeWlanWepStrength, zhoneCpeConnectionRowStatus=zhoneCpeConnectionRowStatus, zhoneCpeLldpMedPolicyListRowStatus=zhoneCpeLldpMedPolicyListRowStatus, zhoneCpeRfSubscriberTable=zhoneCpeRfSubscriberTable, zhoneCpeVoipSubscriberRxGain=zhoneCpeVoipSubscriberRxGain, zhoneCpeWlanProfileIndex=zhoneCpeWlanProfileIndex, zhoneCpeWlanIndexNext=zhoneCpeWlanIndexNext, zhoneCpeEthSubscriberPowerShed=zhoneCpeEthSubscriberPowerShed, zhoneCpePortFwdListTable=zhoneCpePortFwdListTable, zhoneCpeOnuModelInfoRg=zhoneCpeOnuModelInfoRg, zhoneCpeVoipMediaIndexNext=zhoneCpeVoipMediaIndexNext, zhoneCpeLldpMedPolicyEntry=zhoneCpeLldpMedPolicyEntry, zhoneCpeVideoTable=zhoneCpeVideoTable, zhoneCpeVlanId=zhoneCpeVlanId, zhoneCpeGemPort=zhoneCpeGemPort, zhoneCpeDhcpServerIndex=zhoneCpeDhcpServerIndex, zhoneCpeVoipPrimaryServer=zhoneCpeVoipPrimaryServer, zhoneCpeWlanWpaEncryption=zhoneCpeWlanWpaEncryption, zhoneCpeLldpMedPolicyEntryIndex=zhoneCpeLldpMedPolicyEntryIndex, zhoneCpePppoeTable=zhoneCpePppoeTable, zhoneCpeWlanAdvBridgeRestrict=zhoneCpeWlanAdvBridgeRestrict, zhoneCpeStaticRouteRowStatus=zhoneCpeStaticRouteRowStatus, zhoneCpeOnuNumberOfWlanPorts=zhoneCpeOnuNumberOfWlanPorts, zhoneCpeStaticRouteListTable=zhoneCpeStaticRouteListTable, zhoneCpePweCdvTolerance=zhoneCpePweCdvTolerance, zhoneCpeObjectID=zhoneCpeObjectID, zhoneCpePweLossPacketClearPolicy=zhoneCpePweLossPacketClearPolicy, zhoneCpeVideoAccessControlProfileName=zhoneCpeVideoAccessControlProfileName, zhoneCpeVoipCodecSelectionSecondOrder=zhoneCpeVoipCodecSelectionSecondOrder, zhoneCpeVoipSubscriberAdminState=zhoneCpeVoipSubscriberAdminState, zhoneCpeServiceApplication=zhoneCpeServiceApplication, zhoneCpePweGroup=zhoneCpePweGroup, zhoneCpeRfSubscriberAdminState=zhoneCpeRfSubscriberAdminState, zhoneCpeInterfaceVlanEntry=zhoneCpeInterfaceVlanEntry)
