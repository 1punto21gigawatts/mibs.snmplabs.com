#
# PySNMP MIB module HH3C-NVGRE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-NVGRE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:28:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Unsigned32, NotificationType, ObjectIdentity, Gauge32, TimeTicks, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, iso, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "NotificationType", "ObjectIdentity", "Gauge32", "TimeTicks", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "iso", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "RowStatus")
hh3cNvgre = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 156))
hh3cNvgre.setRevisions(('2014-03-11 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cNvgre.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hh3cNvgre.setLastUpdated('201403110900Z')
if mibBuilder.loadTexts: hh3cNvgre.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cNvgre.setContactInfo('Platform Team Hangzhou H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cNvgre.setDescription('The NVGRE MIB.')
hh3cNvgreObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1))
hh3cNvgreScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 1))
hh3cNvgreNextNvgreID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreNextNvgreID.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreNextNvgreID.setDescription('Next available NVGRE ID(identifier), in the range of 4096 to 16777214. The invalid value 4294967295 indicates that no ID can be set.')
hh3cNvgreConfigured = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreConfigured.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreConfigured.setDescription('Number of currently configured NVGREs.')
hh3cNvgreTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2), )
if mibBuilder.loadTexts: hh3cNvgreTable.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTable.setDescription('A table for NVGRE parameters.')
hh3cNvgreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreID"))
if mibBuilder.loadTexts: hh3cNvgreEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreEntry.setDescription('Each entry represents the parameters of an NVGRE.')
hh3cNvgreID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cNvgreID.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreID.setDescription('The NVGRE ID, in the range of 4096 to 16777214.')
hh3cNvgreVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreVsiIndex.setDescription('VSI index. A unique index for the conceptual row identifying a VSI(Virtual Switch Instance) in the hh3cVsiTable.')
hh3cNvgreRemoteMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreRemoteMacCount.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreRemoteMacCount.setDescription('Remote MAC(Media Access Control) address count of this NVGRE.')
hh3cNvgreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreRowStatus.setDescription('Operation status of this table entry. When a row in this table is in active state, no objects in that row can be modified by the agent.')
hh3cNvgreTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3), )
if mibBuilder.loadTexts: hh3cNvgreTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelTable.setDescription('A table for NVGRE tunnel parameters.')
hh3cNvgreTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreID"), (0, "HH3C-NVGRE-MIB", "hh3cNvgreTunnelID"))
if mibBuilder.loadTexts: hh3cNvgreTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelEntry.setDescription('Each entry represents the parameters of an NVGRE tunnel.')
hh3cNvgreTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cNvgreTunnelID.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelID.setDescription('A unique index for tunnel.')
hh3cNvgreTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelRowStatus.setDescription('Operation status of this table entry.')
hh3cNvgreTunnelOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreTunnelOctets.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelOctets.setDescription('The number of octets that have been forwarded over the tunnel.')
hh3cNvgreTunnelPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreTunnelPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelPackets.setDescription('The number of packets that have been forwarded over the tunnel.')
hh3cNvgreTunnelBoundTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 4), )
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundTable.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundTable.setDescription('A table for the number of NVGREs to which the tunnel is bound.')
hh3cNvgreTunnelBoundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 4, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreTunnelID"))
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundEntry.setDescription('An entry represents the number of NVGREs to which a tunnel is bound.')
hh3cNvgreTunnelBoundNvgreNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundNvgreNum.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreTunnelBoundNvgreNum.setDescription('The number of NVGREs to which this tunnel is bound.')
hh3cNvgreMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5), )
if mibBuilder.loadTexts: hh3cNvgreMacTable.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreMacTable.setDescription('A table for NVGRE remote MAC addresses.')
hh3cNvgreMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreVsiIndex"), (0, "HH3C-NVGRE-MIB", "hh3cNvgreMacAddr"))
if mibBuilder.loadTexts: hh3cNvgreMacEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreMacEntry.setDescription('An NVGRE remote MAC address.')
hh3cNvgreMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cNvgreMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreMacAddr.setDescription('MAC address.')
hh3cNvgreMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreMacTunnelID.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreMacTunnelID.setDescription('A unique index for tunnel.')
hh3cNvgreMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selfLearned", 1), ("staticConfigured", 2), ("protocolLearned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNvgreMacType.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreMacType.setDescription('The type of an MAC address.')
hh3cNvgreStaticMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6), )
if mibBuilder.loadTexts: hh3cNvgreStaticMacTable.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreStaticMacTable.setDescription('A table for NVGRE static remote MAC addresses.')
hh3cNvgreStaticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6, 1), ).setIndexNames((0, "HH3C-NVGRE-MIB", "hh3cNvgreVsiIndex"), (0, "HH3C-NVGRE-MIB", "hh3cNvgreStaticMacAddr"))
if mibBuilder.loadTexts: hh3cNvgreStaticMacEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreStaticMacEntry.setDescription('An NVGRE static MAC address.')
hh3cNvgreStaticMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cNvgreStaticMacAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreStaticMacAddr.setDescription('Static MAC address.')
hh3cNvgreStaticMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreStaticMacTunnelID.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreStaticMacTunnelID.setDescription('A unique index for tunnel.')
hh3cNvgreStaticMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 156, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cNvgreStaticMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cNvgreStaticMacRowStatus.setDescription('Operation status of this table entry. When a row in this table is in active state, no objects in that row can be modified by the agent.')
mibBuilder.exportSymbols("HH3C-NVGRE-MIB", hh3cNvgreTunnelBoundEntry=hh3cNvgreTunnelBoundEntry, hh3cNvgreTunnelOctets=hh3cNvgreTunnelOctets, hh3cNvgreStaticMacRowStatus=hh3cNvgreStaticMacRowStatus, PYSNMP_MODULE_ID=hh3cNvgre, hh3cNvgreTunnelID=hh3cNvgreTunnelID, hh3cNvgreStaticMacAddr=hh3cNvgreStaticMacAddr, hh3cNvgreScalarGroup=hh3cNvgreScalarGroup, hh3cNvgreTunnelBoundNvgreNum=hh3cNvgreTunnelBoundNvgreNum, hh3cNvgreTunnelPackets=hh3cNvgreTunnelPackets, hh3cNvgreTunnelRowStatus=hh3cNvgreTunnelRowStatus, hh3cNvgreVsiIndex=hh3cNvgreVsiIndex, hh3cNvgreStaticMacTunnelID=hh3cNvgreStaticMacTunnelID, hh3cNvgreTunnelTable=hh3cNvgreTunnelTable, hh3cNvgreID=hh3cNvgreID, hh3cNvgreMacTunnelID=hh3cNvgreMacTunnelID, hh3cNvgreMacTable=hh3cNvgreMacTable, hh3cNvgreTunnelEntry=hh3cNvgreTunnelEntry, hh3cNvgreStaticMacTable=hh3cNvgreStaticMacTable, hh3cNvgreNextNvgreID=hh3cNvgreNextNvgreID, hh3cNvgreObjects=hh3cNvgreObjects, hh3cNvgreMacType=hh3cNvgreMacType, hh3cNvgreMacEntry=hh3cNvgreMacEntry, hh3cNvgreRemoteMacCount=hh3cNvgreRemoteMacCount, hh3cNvgreStaticMacEntry=hh3cNvgreStaticMacEntry, hh3cNvgreConfigured=hh3cNvgreConfigured, hh3cNvgreTunnelBoundTable=hh3cNvgreTunnelBoundTable, hh3cNvgre=hh3cNvgre, hh3cNvgreRowStatus=hh3cNvgreRowStatus, hh3cNvgreMacAddr=hh3cNvgreMacAddr, hh3cNvgreEntry=hh3cNvgreEntry, hh3cNvgreTable=hh3cNvgreTable)
