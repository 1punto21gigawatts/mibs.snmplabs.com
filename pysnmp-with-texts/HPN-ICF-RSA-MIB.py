#
# PySNMP MIB module HPN-ICF-RSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-RSA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:41:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, Integer32, Bits, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Unsigned32, NotificationType, Counter64, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Integer32", "Bits", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Unsigned32", "NotificationType", "Counter64", "MibIdentifier", "Gauge32")
RowStatus, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "DateAndTime")
hpnicfRSA = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23))
hpnicfRSA.setRevisions(('2004-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfRSA.setRevisionsDescriptions(('The initial revision of RSA module.',))
if mibBuilder.loadTexts: hpnicfRSA.setLastUpdated('200410100000Z')
if mibBuilder.loadTexts: hpnicfRSA.setOrganization('')
if mibBuilder.loadTexts: hpnicfRSA.setContactInfo('')
if mibBuilder.loadTexts: hpnicfRSA.setDescription('The HPN-ICF-RSA-MIB contains objects to Manage RSA configuration.')
class RSAKeyErrorCode(TextualConvention, Integer32):
    description = 'Indicates the reason that SSH peer public key fails to config or that SSH local key pair fails to create/refresh/destroy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("rsaSuccess", 1), ("rsaFailure", 2), ("rsaErrNoMemory", 3), ("rsaErrKeyNotReplaced", 4), ("rsaErrKeyBackup", 5), ("rsaErrKeySaved", 6), ("rsaErrKeyGenerate", 7), ("rsaErrKeyDestroy", 8), ("rsaErrHostEncKeyBackup", 9), ("rsaErrHostEncKeySave", 10), ("rsaErrHostEncKeyGenerate", 11), ("rsaErrHostEncKeyDestroy", 12), ("rsaErrHostSigKeyBackup", 13), ("rsaErrHostSigKeySave", 14), ("rsaErrHostSigKeyGenerate", 15), ("rsaErrHostSigKeyDestroy", 16), ("rsaErrServerKeyBackup", 17), ("rsaErrServerKeySave", 18), ("rsaErrServerKeyGenerate", 19), ("rsaErrServerKeyDestroy", 20), ("rsaErrPeerKeyNotReplaced", 21), ("rsaErrPeerKeyNumArriveMax", 22), ("rsaErrPeerKeyNotRemoved", 23), ("rsaErrPeerKeyNotExist", 24), ("rsaStatusKeyExist", 25), ("rsaStatusKeyNotExist", 26), ("rsaStatusKeyInvalid", 27), ("rsaStatusHostEncKeyExist", 28), ("rsaStatusHostEncKeyNotExist", 29), ("rsaStatusHostEncKeyInvalid", 30), ("rsaStatusHostSigKeyExist", 31), ("rsaStatusHostSigKeyNotExist", 32), ("rsaStatusHostSigKeyInvalid", 33), ("rsaStatusServerKeyExist", 34), ("rsaStatusServerKeyNotExist", 35), ("rsaStatusServerKeyInvalid", 36))

hpnicfRSAMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1))
hpnicfRSAPeerPublicKeyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 1), )
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyTable.setDescription('The (conceptual) RSA Peer Public Key Table')
hpnicfRSAPeerPublicKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-RSA-MIB", "hpnicfRSAPeerPublicKeyName"))
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyEntry.setDescription('An entry (conceptual row) in the RSA Peer Public Key Table.')
hpnicfRSAPeerPublicKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyName.setDescription('The RSA peer public key name.')
hpnicfRSAPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRSAPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerIpAddress.setDescription('Indicates the IP Address of RSA Peer machine.')
hpnicfRSAPeerFQDN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRSAPeerFQDN.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerFQDN.setDescription('The Full Qualified Domain Name of RSA Peer Machine')
hpnicfRSAPeerPublicKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyCode.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyCode.setDescription('The code of RSA peer public key.')
hpnicfRSAPeerPublicKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerPublicKeyStatus.setDescription('The status of this RSA peer public key entry. Support Active Status and CreateAndGo and Destroy Operation ')
hpnicfRSALocalKeyPairTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2), )
if mibBuilder.loadTexts: hpnicfRSALocalKeyPairTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalKeyPairTable.setDescription('The (conceptual)RSA local Key Pair Table.')
hpnicfRSALocalKeyPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-RSA-MIB", "hpnicfRSALocalKeyIndex"))
if mibBuilder.loadTexts: hpnicfRSALocalKeyPairEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalKeyPairEntry.setDescription('An entry (conceptual row) in the RSA local Key Pair Table.')
hpnicfRSALocalKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: hpnicfRSALocalKeyIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalKeyIndex.setDescription('The hpnicfRSALocalKeyPairTable Table can only exist one entry at most.')
hpnicfRSALocalHostKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRSALocalHostKeyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalHostKeyName.setDescription("Indicates RSA Host local public key name.Its value is composed of systemname, a underscore and the string of 'Host'")
hpnicfRSALocalHostKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRSALocalHostKeyCode.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalHostKeyCode.setDescription('Indicates the code of RSA Host local pkey that the length is between 512 and 2048 bits.')
hpnicfRSALocalHostKeyCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRSALocalHostKeyCreatedTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalHostKeyCreatedTime.setDescription('Indicates the created time of RSA local Host key.')
hpnicfRSALocalServerKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRSALocalServerKeyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalServerKeyName.setDescription("Indicates RSA Host local public key name.Its value is composed of systemname, a underscore and the string of 'Server'")
hpnicfRSALocalServerKeyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRSALocalServerKeyCode.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalServerKeyCode.setDescription('Indicates the code of RSA Host local pkey that the length is between 512 and 2048 bits.')
hpnicfRSALocalServerKeyCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRSALocalServerKeyCreatedTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalServerKeyCreatedTime.setDescription('Indicates the created time of RSA local Host key.')
hpnicfRSALocalKeyPairBits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRSALocalKeyPairBits.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalKeyPairBits.setDescription('The bits of RSA local key pair, ranging between 512 and 2048. By default, the value is 512.')
hpnicfRSALocalKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRSALocalKeyStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalKeyStatus.setDescription('The status column used for creating, deleting instances of the columnar objects in the hpnicfRSALocalKeyPairTable table.')
hpnicfRSAPeerKeyConfigFailReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 3), RSAKeyErrorCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfRSAPeerKeyConfigFailReason.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerKeyConfigFailReason.setDescription('The reason that RSA peer public key fails to config.')
hpnicfRSALocalKeyFailReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 1, 4), RSAKeyErrorCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfRSALocalKeyFailReason.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalKeyFailReason.setDescription('The reason that RSA local key pair fails to create, refresh and destroy.')
hpnicfRSANotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 2))
hpnicfRSALocalKeyPairOpeFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 2, 1)).setObjects(("HPN-ICF-RSA-MIB", "hpnicfRSALocalKeyFailReason"))
if mibBuilder.loadTexts: hpnicfRSALocalKeyPairOpeFail.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSALocalKeyPairOpeFail.setDescription('The trap is generated while the RSA local key pair fails to create, refresh and destory.')
hpnicfRSAPeerKeyConfigFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 23, 2, 2)).setObjects(("HPN-ICF-RSA-MIB", "hpnicfRSAPeerKeyConfigFailReason"))
if mibBuilder.loadTexts: hpnicfRSAPeerKeyConfigFail.setStatus('current')
if mibBuilder.loadTexts: hpnicfRSAPeerKeyConfigFail.setDescription('The trap is generated while the RSA peer public key fails to configure.')
mibBuilder.exportSymbols("HPN-ICF-RSA-MIB", hpnicfRSAPeerPublicKeyName=hpnicfRSAPeerPublicKeyName, hpnicfRSALocalKeyPairBits=hpnicfRSALocalKeyPairBits, hpnicfRSAPeerKeyConfigFailReason=hpnicfRSAPeerKeyConfigFailReason, hpnicfRSAMIBObjects=hpnicfRSAMIBObjects, hpnicfRSAPeerIpAddress=hpnicfRSAPeerIpAddress, hpnicfRSAPeerPublicKeyEntry=hpnicfRSAPeerPublicKeyEntry, hpnicfRSALocalKeyPairEntry=hpnicfRSALocalKeyPairEntry, hpnicfRSA=hpnicfRSA, hpnicfRSALocalServerKeyCreatedTime=hpnicfRSALocalServerKeyCreatedTime, hpnicfRSAPeerPublicKeyTable=hpnicfRSAPeerPublicKeyTable, hpnicfRSALocalServerKeyName=hpnicfRSALocalServerKeyName, hpnicfRSANotifications=hpnicfRSANotifications, hpnicfRSALocalKeyPairTable=hpnicfRSALocalKeyPairTable, hpnicfRSAPeerPublicKeyCode=hpnicfRSAPeerPublicKeyCode, hpnicfRSALocalKeyFailReason=hpnicfRSALocalKeyFailReason, hpnicfRSALocalKeyStatus=hpnicfRSALocalKeyStatus, RSAKeyErrorCode=RSAKeyErrorCode, hpnicfRSALocalKeyPairOpeFail=hpnicfRSALocalKeyPairOpeFail, hpnicfRSALocalKeyIndex=hpnicfRSALocalKeyIndex, hpnicfRSAPeerKeyConfigFail=hpnicfRSAPeerKeyConfigFail, hpnicfRSALocalHostKeyCode=hpnicfRSALocalHostKeyCode, hpnicfRSAPeerPublicKeyStatus=hpnicfRSAPeerPublicKeyStatus, hpnicfRSALocalHostKeyCreatedTime=hpnicfRSALocalHostKeyCreatedTime, hpnicfRSAPeerFQDN=hpnicfRSAPeerFQDN, hpnicfRSALocalServerKeyCode=hpnicfRSALocalServerKeyCode, PYSNMP_MODULE_ID=hpnicfRSA, hpnicfRSALocalHostKeyName=hpnicfRSALocalHostKeyName)
