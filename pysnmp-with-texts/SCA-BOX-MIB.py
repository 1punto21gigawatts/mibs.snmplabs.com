#
# PySNMP MIB module SCA-BOX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCA-BOX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Gauge32, Bits, Integer32, Counter32, iso, Counter64, TimeTicks, ObjectIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Gauge32", "Bits", "Integer32", "Counter32", "iso", "Counter64", "TimeTicks", "ObjectIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
box = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 3))
enclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 3, 1))
boards = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 3, 2))
led = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: led.setStatus('mandatory')
if mibBuilder.loadTexts: led.setDescription('ts-xxxx 0 : red off(0),red(1) 1 : green off(0),green(2) cs-xxxx 0 : fault off(0),red(1) 1 : master off(0),green(2) 2 : test1 off(0),yellow(4) 3 : test2 off(0),yellow(4) 4 : test3 off(0),yellow(4) 5 : test4 off(0),yellow(4) 6 : rx/tx off(0),green(2) se-xxxx 0 : fault off(0),red(1) 1 : power off(0),green(2) 2 : status1 off(0),red(1),green(2),yellow(4) 3 : status2 off(0),red(1),green(2),yellow(4) 4 : status3 off(0),red(1),green(2),yellow(4) 5 : status4 off(0),red(1),green(2),yellow(4) 6 : status5 off(0),red(1),green(2),yellow(4) Note. Lower 3 bits indicates off/color (off(0),red(1), green(2),yellow(4)), Higher 5 bits reserved for flash frequency.')
fan = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("fanFailure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan.setStatus('mandatory')
if mibBuilder.loadTexts: fan.setDescription('If this object returns 1 then a Fan has failed.')
power = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("power1Failure", 1), ("power2Failure", 2), ("power3Failure", 4), ("power4Failure", 8), ("power5Failure", 16), ("power6Failure", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power.setStatus('mandatory')
if mibBuilder.loadTexts: power.setDescription('If this object returns a non-zero value then one or more power supplies have failed.')
slots = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 14, 17))).clone(namedValues=NamedValues(("slot-2", 2), ("slot-5", 5), ("slot-14", 14), ("slot-17", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slots.setStatus('mandatory')
if mibBuilder.loadTexts: slots.setDescription('The number of slots in the enclosure.')
slotmap = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotmap.setStatus('mandatory')
if mibBuilder.loadTexts: slotmap.setDescription('A bitmap of the slots in which a card is present. Setting bit0 to 1 indicates that a card is present in slot 1, and so on.')
temperature = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("temperatureFailure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('mandatory')
if mibBuilder.loadTexts: temperature.setDescription('If this object returns 1 then a temperature sensor has detected an excessive temperature in the enclosure.')
fanNo = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNo.setStatus('mandatory')
if mibBuilder.loadTexts: fanNo.setDescription('Total number of fans supported.')
powerNo = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNo.setStatus('mandatory')
if mibBuilder.loadTexts: powerNo.setDescription('Total number of power supplies supported.')
temperatureNo = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureNo.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureNo.setDescription('A return value of 1 indicates that temperature sensors are supported in the enclosure.')
fanPresent = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanPresent.setStatus('mandatory')
if mibBuilder.loadTexts: fanPresent.setDescription('A bitmask of the fans that are present. Bit0 refers to fan 1, bit 1 to fan 2, etc.')
powerPresent = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerPresent.setStatus('mandatory')
if mibBuilder.loadTexts: powerPresent.setDescription('A bitmask of the power supples that are present. Bit0 refers to power supply 1, bit 1 to power supply 2, etc.')
temperaturePresent = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperaturePresent.setStatus('mandatory')
if mibBuilder.loadTexts: temperaturePresent.setDescription(' A return value of 1 indicates that temperature sensors are present in the enclosure.')
psuFail = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("psu1Failure", 1), ("psu2Failure", 2), ("psu3Failure", 3), ("psu4Failure", 4), ("psu5Failure", 5), ("psu6Failure", 6))))
if mibBuilder.loadTexts: psuFail.setStatus('mandatory')
if mibBuilder.loadTexts: psuFail.setDescription('This object returns a non-zero value in a trap according to the power supply number when a power supply have failed.')
slotmapFail = MibScalar((1, 3, 6, 1, 4, 1, 208, 3, 1, 14), Integer32())
if mibBuilder.loadTexts: slotmapFail.setStatus('mandatory')
if mibBuilder.loadTexts: slotmapFail.setDescription('This object returns a non-zero value in a trap according to the slot number when a card is enabled or disabled in the system center')
brdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 208, 3, 2, 1), )
if mibBuilder.loadTexts: brdInfoTable.setStatus('mandatory')
brdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1), ).setIndexNames((0, "SCA-BOX-MIB", "brdNumber1"))
if mibBuilder.loadTexts: brdInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brdInfoEntry.setDescription('Info from 32 bytes standard memory area.')
brdNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: brdNumber1.setDescription('Board Sequence number in enclosure (= slot number)')
cardType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardType.setStatus('mandatory')
if mibBuilder.loadTexts: cardType.setDescription('Unique 16 bit card type This ID is used for unique sw identification of the card. The list of possible return values is company private.')
pcbRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcbRevision.setStatus('mandatory')
if mibBuilder.loadTexts: pcbRevision.setDescription('PCB Revision number')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('mandatory')
if mibBuilder.loadTexts: macAddress.setDescription('The Base MAC-Address allocated for MAC Interfaces on the board.')
driverSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverSeq.setStatus('mandatory')
if mibBuilder.loadTexts: driverSeq.setDescription('Required driver sequence number (SW)')
product = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: product.setStatus('mandatory')
if mibBuilder.loadTexts: product.setDescription('Product Identification.')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: serialNumber.setDescription('Production serial number')
masterSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: masterSlave.setStatus('mandatory')
if mibBuilder.loadTexts: masterSlave.setDescription('The board backplane bus properties.')
ram = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ram.setStatus('mandatory')
shram = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shram.setStatus('mandatory')
eprom = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eprom.setStatus('mandatory')
e2prom = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e2prom.setStatus('mandatory')
flashprom = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashprom.setStatus('mandatory')
spec0 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spec0.setStatus('mandatory')
if mibBuilder.loadTexts: spec0.setDescription("Specific board info The purpose of this BYTE is to indicate special board hw-options. The definition of this byte is board specific. A System Center product with relevant information in this byte have a specifiation in the product manual's.")
spec1 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spec1.setStatus('mandatory')
if mibBuilder.loadTexts: spec1.setDescription("Specific board info The purpose of this BYTE is to indicate special board hw-options. The definition of this byte is board specific. A System Center product with relevant information in this byte have a specifiation in the product manual's.")
spec2 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spec2.setStatus('mandatory')
if mibBuilder.loadTexts: spec2.setDescription("Specific board info The purpose of this BYTE is to indicate special board hw-options. The definition of this byte is board specific. A System Center product with relevant information in this byte have a specifiation in the product manual's.")
spec3 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spec3.setStatus('mandatory')
if mibBuilder.loadTexts: spec3.setDescription("Specific board info The purpose of this BYTE is to indicate special board hw-options. The definition of this byte is board specific. A System Center product with relevant information in this byte have a specifiation in the product manual's.")
ipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipAddr.setDescription('IP Address to Manage Board in this slot')
nsap = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsap.setStatus('mandatory')
if mibBuilder.loadTexts: nsap.setDescription('NSAP to Manage Board in this slot')
brdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 208, 3, 2, 2), )
if mibBuilder.loadTexts: brdStatusTable.setStatus('mandatory')
brdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 3, 2, 2, 1), ).setIndexNames((0, "SCA-BOX-MIB", "brdNumber2"))
if mibBuilder.loadTexts: brdStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brdStatusEntry.setDescription('Status information from boards.')
brdNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: brdNumber2.setDescription('Board Sequence number in enclosure (= slot number)')
brdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: brdStatus.setDescription('Board Status byte. bit0 - reserved bit1 Card Failed bit2 - reserved bit3 - reserved bit4 Red component of Status LED (active low) bit5 Green component of Status LED (active low) bit6 - reserved bit7 - reserved')
brdLed = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdLed.setStatus('mandatory')
if mibBuilder.loadTexts: brdLed.setDescription('Depends on the card type. Note. Lower 3 bits indicates off/color (off(0),red(1), green(2),yellow(4)), Higher 5 bits reserved for flash frequency.')
brdPlugTable = MibTable((1, 3, 6, 1, 4, 1, 208, 3, 2, 3), )
if mibBuilder.loadTexts: brdPlugTable.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugTable.setDescription('Table of plugs (and the possibly attached pims) on the board')
brdPlugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1), ).setIndexNames((0, "SCA-BOX-MIB", "brdNumber3"), (0, "SCA-BOX-MIB", "brdPlugNumber"))
if mibBuilder.loadTexts: brdPlugEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugEntry.setDescription('Information about plugs on boards.')
brdNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdNumber3.setStatus('mandatory')
if mibBuilder.loadTexts: brdNumber3.setDescription('Board Sequence number in enclosure (= slot number)')
brdPlugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdPlugNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugNumber.setDescription('Plug Number - used to index plugs on board.')
brdPlugPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdPlugPosition.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugPosition.setDescription('Position/name of plug on board.')
brdPlugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAvailable", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdPlugStatus.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugStatus.setDescription('Availability of plug on this hardware revision')
brdPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdPlugType.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugType.setDescription('Type of plug')
brdPlugPimType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdPlugPimType.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugPimType.setDescription('Type of pim inserted in plug')
brdPlugPimLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdPlugPimLeds.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugPimLeds.setDescription('Status of LEDs on pim in plug')
brdPlugPimOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdPlugPimOptions.setStatus('mandatory')
if mibBuilder.loadTexts: brdPlugPimOptions.setDescription('Textual description of any options installed on pim in plug')
brdOptionTable = MibTable((1, 3, 6, 1, 4, 1, 208, 3, 2, 4), )
if mibBuilder.loadTexts: brdOptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: brdOptionTable.setDescription('Table of various possible board options. Options might be sub-boards or other kinds of hardware options.')
brdOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 3, 2, 4, 1), ).setIndexNames((0, "SCA-BOX-MIB", "brdNumber4"), (0, "SCA-BOX-MIB", "brdOptionNumber"))
if mibBuilder.loadTexts: brdOptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brdOptionEntry.setDescription('Information about board options.')
brdNumber4 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdNumber4.setStatus('mandatory')
if mibBuilder.loadTexts: brdNumber4.setDescription('Board Sequence number in enclosure (= slot number)')
brdOptionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdOptionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brdOptionNumber.setDescription('Option Number - used to index options on board. If options is visible on front panel, they must be sorted (top-most/left-most first).')
brdOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdOptionName.setStatus('mandatory')
if mibBuilder.loadTexts: brdOptionName.setDescription('Descriptive Name of option.')
brdOptionState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdOptionState.setStatus('mandatory')
if mibBuilder.loadTexts: brdOptionState.setDescription('Is the option installed ?')
brdSwitchSettingTable = MibTable((1, 3, 6, 1, 4, 1, 208, 3, 2, 5), )
if mibBuilder.loadTexts: brdSwitchSettingTable.setStatus('mandatory')
if mibBuilder.loadTexts: brdSwitchSettingTable.setDescription('Table of switch settings on the board.')
brdSwitchSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 3, 2, 5, 1), ).setIndexNames((0, "SCA-BOX-MIB", "brdNumber5"), (0, "SCA-BOX-MIB", "brdSwitchNumber"))
if mibBuilder.loadTexts: brdSwitchSettingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brdSwitchSettingEntry.setDescription('Information about Switch Setting')
brdNumber5 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdNumber5.setStatus('mandatory')
if mibBuilder.loadTexts: brdNumber5.setDescription('Board Sequence number in enclosure (= slot number)')
brdSwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdSwitchNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brdSwitchNumber.setDescription('Switch Number - used to index switches on board.')
brdSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdSwitchName.setStatus('mandatory')
if mibBuilder.loadTexts: brdSwitchName.setDescription('Descriptive Name - used to identify switch on board.')
brdSwitchSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 3, 2, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdSwitchSetting.setStatus('mandatory')
if mibBuilder.loadTexts: brdSwitchSetting.setDescription("Descriptive Name - used to describe switch setting on board. Eg. 'On', 'Off', 'Enabled', 'Disabled', '0', '01001100', 'A', 'B', 'C', 'Open', 'Closed', 'Inserted', 'Not inserted', etc.")
boxPowerFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 3) + (0,1)).setObjects(("SCA-BOX-MIB", "psuFail"))
if mibBuilder.loadTexts: boxPowerFailureEvent.setDescription('This trap is sent when a power supply failure has been detected. The variable indicates the failing power supply.')
boxFanFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 3) + (0,2))
if mibBuilder.loadTexts: boxFanFailureEvent.setDescription('This trap is sent when a fan failure has been detected.')
boxTempFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 3) + (0,3))
if mibBuilder.loadTexts: boxTempFailureEvent.setDescription('This trap is sent when a temperature sensor has detected excessive temperature in the enclosure.')
boxModuleInsertedEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 3) + (0,4)).setObjects(("SCA-BOX-MIB", "slotmapFail"))
if mibBuilder.loadTexts: boxModuleInsertedEvent.setDescription('This trap is sent when a module is inserted in the the enclosure. The variable slotmapFail indicates in which slot a module is inserted')
boxModuleRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 3) + (0,5)).setObjects(("SCA-BOX-MIB", "slotmapFail"))
if mibBuilder.loadTexts: boxModuleRemovedEvent.setDescription('This trap is sent when a module is removed in the the enclosure. The variable slotmapFail indicates in which slot a module is removed')
mibBuilder.exportSymbols("SCA-BOX-MIB", powerNo=powerNo, eprom=eprom, brdPlugPimOptions=brdPlugPimOptions, powerPresent=powerPresent, enclosure=enclosure, fanPresent=fanPresent, spec1=spec1, pcbRevision=pcbRevision, ipAddr=ipAddr, boxPowerFailureEvent=boxPowerFailureEvent, brdPlugPosition=brdPlugPosition, fanNo=fanNo, brdNumber1=brdNumber1, slotmapFail=slotmapFail, brdSwitchSetting=brdSwitchSetting, flashprom=flashprom, brdNumber4=brdNumber4, e2prom=e2prom, spec0=spec0, brdPlugStatus=brdPlugStatus, brdNumber3=brdNumber3, brdInfoEntry=brdInfoEntry, boxModuleRemovedEvent=boxModuleRemovedEvent, fan=fan, boxFanFailureEvent=boxFanFailureEvent, serialNumber=serialNumber, masterSlave=masterSlave, brdLed=brdLed, product=product, boxModuleInsertedEvent=boxModuleInsertedEvent, brdNumber5=brdNumber5, brdOptionState=brdOptionState, shram=shram, box=box, brdPlugTable=brdPlugTable, brdPlugPimLeds=brdPlugPimLeds, boards=boards, boxTempFailureEvent=boxTempFailureEvent, brdSwitchNumber=brdSwitchNumber, brdStatus=brdStatus, slots=slots, spec2=spec2, nsap=nsap, brdOptionName=brdOptionName, temperatureNo=temperatureNo, brdStatusEntry=brdStatusEntry, brdPlugNumber=brdPlugNumber, brdNumber2=brdNumber2, brdOptionTable=brdOptionTable, slotmap=slotmap, psuFail=psuFail, ram=ram, temperaturePresent=temperaturePresent, brdInfoTable=brdInfoTable, brdStatusTable=brdStatusTable, cardType=cardType, brdPlugType=brdPlugType, spec3=spec3, power=power, temperature=temperature, brdSwitchName=brdSwitchName, brdPlugPimType=brdPlugPimType, macAddress=macAddress, brdOptionNumber=brdOptionNumber, led=led, driverSeq=driverSeq, brdPlugEntry=brdPlugEntry, brdOptionEntry=brdOptionEntry, brdSwitchSettingEntry=brdSwitchSettingEntry, brdSwitchSettingTable=brdSwitchSettingTable)
