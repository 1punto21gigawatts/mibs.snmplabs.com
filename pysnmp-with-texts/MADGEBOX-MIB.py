#
# PySNMP MIB module MADGEBOX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MADGEBOX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:09:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ModuleIdentity, Counter64, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, enterprises, Bits, MibIdentifier, Integer32, IpAddress, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Counter64", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "enterprises", "Bits", "MibIdentifier", "Integer32", "IpAddress", "Unsigned32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

madge = MibIdentifier((1, 3, 6, 1, 4, 1, 494))
madgeBox = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 10))
madgeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 10, 1))
madgeSecure = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 10, 2))
madgeDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 10, 3))
madgeIP = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 10, 4))
madgeVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 10, 5))
madgeTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 10, 6))
madgeUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 10, 7))
madgeConfigIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigIPAddress.setDescription('The IP address of the device.')
madgeConfigIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigIPGateway.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigIPGateway.setDescription('The default IP gateway for the device.')
madgeConfigIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigIPSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigIPSubnetMask.setDescription('The IP subnet mask of the device.')
madgeConfigSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeConfigSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigSerialNumber.setDescription('The burnt-in identifier of the device. This is a unique number and in most cases maps directly to the base MAC address of the device')
madgeConfigMCodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeConfigMCodeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigMCodeVersion.setDescription('Microcode version of the device. Stored in the format :- first Byte - not used - microcode major version number - microcode minor version number last Byte - microcode debug version number.')
madgeConfigBCodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeConfigBCodeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigBCodeVersion.setDescription('Bootcode version of the device and the hardware version. Stored in the format :- High Byte - hardware version number - bootcode major version number - bootcode minor version number Low Byte - bootcode debug version number.')
madgeConfigMCodeFilename = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeConfigMCodeFilename.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigMCodeFilename.setDescription('Original filename for the microcode that has been downloaded to the device.')
madgeConfigDeviceHealth = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("degraded", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeConfigDeviceHealth.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigDeviceHealth.setDescription('Current health of the device Normal - everything is fine warning - something the user should be aware of degraded - the box is operating at reduced functionality critical - a major problem exists with the device.')
madgeConfigAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("normal", 1), ("reboot", 2), ("identify", 3), ("test", 4), ("erase-config", 5), ("erase-flash", 6), ("tftp-ip", 7), ("tftp-ipx", 8), ("rpl-ipx", 9), ("rpl-llc", 10), ("halt", 11), ("up-tftp-ip", 12), ("up-tftp-ipx", 13), ("snapshot", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigAdminStatus.setDescription('The desired operating mode of the device. The mode can be changed by setting this object. If the device does not support the action it will return a bad value error. The behaviour of these states is device specific and some of the states may latch until the state is returned to normal. normal - standard operating mode / can be used to cancel a download or return the device from any latching state. reboot - force the device to reboot. The device will reboot into the version of flash identified by madgeConfigDefaultFlashVersion. identify - force the device to identify itself by flashing lights. This state may latch. test - force the device to do a self test. This state may latch. erase-config - erase all configuration info erase-flash - erase the version of microcode stored in the flash bank identifed by madgeConfigEraseFlashVersion. tftp-ip - force the device to start a TFTP download over IP tftp-ipx - force the device to start a TFTP download over IPX rpl-ipx - force the device to start a RPL download over IPX rpl-llc - force the device to start a RPL download over LLC halt - force the defice to shutdown ready for power off up-tftp-ip - force the device to start a TFTP upload over IP up-tftp-ipx - force the device to start a TFTP upload over IPX snapshot - force the device to take a snapshot of its current configuration')
madgeConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigPassword.setDescription('The case insensitive password for the device. This password is used to authenticate all SNMP SET operations. Any GET operation on this object will return PUBLIC. If an attempt is made to set the password to a string greater than the maximum a BAD VALUE error will be returned')
madgeConfigLinkTest = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigLinkTest.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigLinkTest.setDescription('An object that can be written with any value to test whether a management station knows the correct device password')
madgeConfigOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("reboot", 2), ("identify", 3), ("test", 4), ("downloading", 5), ("uploading", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeConfigOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigOperStatus.setDescription('The current operating mode of the device. normal - standard operating mode reboot - the device is rebooting identify - the device is identifying itself test - the device is performing a self-test downloading - the device is performing a download uploading - the device is performing an upload NOTE:This variable is only available on devices that support version 1.2 or greater of the Box MIB')
madgeConfigEraseFlashVersion = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigEraseFlashVersion.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigEraseFlashVersion.setDescription('A valid version index for the bank of flash or a software component to erase when AdminStatus is set to erase-flash. NOTE:This variable is only available on devices that support version 1.2 or greater of the Box MIB')
madgeConfigDefaultFlashVersion = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigDefaultFlashVersion.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigDefaultFlashVersion.setDescription('The version index of the default flash bank that a device will reboot into when a standard reboot is performed. NOTE:This variable is only available on devices that support version 1.2 or greater of the Box MIB')
madgeConfigReadPassword = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigReadPassword.setStatus('optional')
if mibBuilder.loadTexts: madgeConfigReadPassword.setDescription('The case insensitive read password for the device. This password is used to authenticate all SNMP GET and GET-NEXT operations. Any GET operation on this object will return PUBLIC. If an attempt is made to set the password to a string greater than the maximum a BAD VALUE error will be returned')
madgeConfigSnapshotName = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigSnapshotName.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigSnapshotName.setDescription('This specifies the name under which to store a snapshot of the current configuration.')
madgeConfigDefaultSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigDefaultSnapshot.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigDefaultSnapshot.setDescription('This contains the version index of the snapshot that the device should take its configuration from on the next reboot.')
madgeConfigPasswordTableSize = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeConfigPasswordTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigPasswordTableSize.setDescription('The size of the password table in the device. This should be a static value. A value of zero indicates no table, and that only madgeConfigPassword can be used. This object must be supported if the password table is supported.')
madgeConfigPasswordTable = MibTable((1, 3, 6, 1, 4, 1, 494, 10, 1, 21), )
if mibBuilder.loadTexts: madgeConfigPasswordTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigPasswordTable.setDescription("A static table containing a list of passwords that can be used to manage the device. Reading this table is only sensible to see a description of each password and whether it's implemented. The first entry to this table mirrors the original madgeConfigPassword and madgeConfigReadPassword. This means that it will default to Public, and that it should never be a string of zero length. Trying to set as such will result in BAD VALUE.")
madgeConfigPasswordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 10, 1, 21, 1), ).setIndexNames((0, "MADGEBOX-MIB", "madgeConfigPasswordIndex"))
if mibBuilder.loadTexts: madgeConfigPasswordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigPasswordEntry.setDescription('An entry containing a password for the device, or not, plus a comment to remind the user which entries are what.')
madgeConfigPasswordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeConfigPasswordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigPasswordIndex.setDescription('Index into the password table')
madgeConfigPasswordRead = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 1, 21, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigPasswordRead.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigPasswordRead.setDescription('A case insensitive Read password for the device. Any GET operation on this object will return PUBLIC if this entry is used to store a password, and return a zero length string if no password is stored. If an attempt is made to set the password to a string greater than the maximum, a BAD VALUE error will be returned. If a SET is made with a zero length string, the Password is cleared. Note: for the special case of entry 1, the value is mirrored with madgeConfigReadPassword.')
madgeConfigPasswordWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 1, 21, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigPasswordWrite.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigPasswordWrite.setDescription('A case insensitive Write password for the device. Any GET operation on this object will return PUBLIC if this entry is used to store a password, and return a zero length string if no password is stored. If an attempt is made to set the password to a string greater than the maximum, a BAD VALUE error will be returned. If a SET is made with a zero length string, the Password is cleared. Note: for the special case of entry 1, the value is mirrored with madgeConfigPassword.')
madgeConfigPasswordComment = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 1, 21, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeConfigPasswordComment.setStatus('mandatory')
if mibBuilder.loadTexts: madgeConfigPasswordComment.setDescription('A comment that can be used by the user to remember which passwords are which.')
madgeSecureCurrentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureCurrentTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentTableSize.setDescription('The size of the current users table in the device. A size of zero indicates that the table is not supported.')
madgeSecureCurrentTimeout = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureCurrentTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentTimeout.setDescription('A time in seconds used to specify how long a management station will remain registered in the Current Users table if no requests are received from that management station. After this time the management station will be automatically removed from the table. Devices are not required to support the writable functionality for this variable.')
madgeSecureCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 494, 10, 2, 3), )
if mibBuilder.loadTexts: madgeSecureCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentTable.setDescription('A table containing an address for all managers that are currently communicating with this device over SNMP.')
madgeSecureCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 10, 2, 3, 1), ).setIndexNames((0, "MADGEBOX-MIB", "madgeSecureCurrentIndex"))
if mibBuilder.loadTexts: madgeSecureCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentEntry.setDescription('A entry containing an address for a manager that is currently communicating with this device over SNMP.')
madgeSecureCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentIndex.setDescription('Index into the table')
madgeSecureCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-used", 1), ("ip-address", 2), ("ipx-address", 3), ("mac-address", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureCurrentType.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentType.setDescription('Identifies the format of the data stored in madgeSecureCurrentAddress not-used - this table entry does not contain valid data ip-address - this table entry contains a valid ip address ipx-address - this table entry contains a valid ipx address mac-address - this table entry contains a valid mac address')
madgeSecureCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureCurrentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentAddress.setDescription('An address of a management station that is currently communicating with this device. The format of the address is determined by the associated entry in the madgeSecureCurrentType. For type ipx-address the format is <ipx network> <node address> = 10 bytes.')
madgeSecureCurrentUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureCurrentUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentUpdateTime.setDescription('The time in seconds since the management station identified by this table entry last accessed this device. The table entry will be removed by the device once this UpdateTime reaches the value specified in madgeSecureCurrentTimeout')
madgeSecureCurrentIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureCurrentIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureCurrentIPAddress.setDescription('If madgeSecureCurrentType is set to ip-address, this variable returns the madgeSecureCurrentAddress encoded as an IP Address, rather than an Octet String')
madgeSecureAllowedEnabled = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureAllowedEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureAllowedEnabled.setDescription('Enable / disable the allowed users feature. enabled - only management stations with an address in the AllowedTable will be allowed to get / set MIB variables in this device disabled - any management station is allowed to get / set MIB variables in this device')
madgeSecureAllowedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureAllowedTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureAllowedTableSize.setDescription('The size of the allowed users table in the device. A size of zero indicates that the table is not supported.')
madgeSecureAllowedTable = MibTable((1, 3, 6, 1, 4, 1, 494, 10, 2, 6), )
if mibBuilder.loadTexts: madgeSecureAllowedTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureAllowedTable.setDescription('A table containing an address for all managers that are allowed to get / set MIB variables in this device ')
madgeSecureAllowedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 10, 2, 6, 1), ).setIndexNames((0, "MADGEBOX-MIB", "madgeSecureAllowedIndex"))
if mibBuilder.loadTexts: madgeSecureAllowedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureAllowedEntry.setDescription('An entry containing an address for a manager that is allowed to get / set MIB variables in this device ')
madgeSecureAllowedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureAllowedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureAllowedIndex.setDescription('Index into the table')
madgeSecureAllowedType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-used", 1), ("ip-address", 2), ("ipx-address", 3), ("mac-address", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureAllowedType.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureAllowedType.setDescription('Identifies the format of the data stored in madgeSecureAllowedAddress not-used - this table entry does not contain valid data ip-address - this table entry contains a valid ip address ipx-address - this table entry contains a valid ipx address mac-address - this table entry contains a valid mac address')
madgeSecureAllowedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 6, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureAllowedAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureAllowedAddress.setDescription('An address of a management station that is allowed to get / set MIB variables in this device. The format of the address is determined by the associated entry in the madgeSecureAllowedType. For type ipx-address the format is <ipx network> <node address> = 10 bytes.')
madgeSecureAllowedIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureAllowedIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureAllowedIPAddress.setDescription('If madgeSecureAllowedType is set to ip-address, this variable is equivalent to madgeSecureAllowedAddress encoded as an IP Address, rather than an Octet String')
madgeSecureTrapDestEnabled = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureTrapDestEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureTrapDestEnabled.setDescription('Enable / disable the trap destination feature. enabled - any SNMP traps generated by this device will only be sent to management stations with an address in the madgeSecureTrapDestTable disabled - any SNMP traps generated by this device will be sent to all management stations currently known by this device.')
madgeSecureTrapDestTableSize = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureTrapDestTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureTrapDestTableSize.setDescription('The size of the trap destinations table in the device. A size of zero indicates that this table is not supported.')
madgeSecureTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 494, 10, 2, 9), )
if mibBuilder.loadTexts: madgeSecureTrapDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureTrapDestTable.setDescription('A table containing the address for all managers that are to receive SNMP traps generated by this device')
madgeSecureTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 10, 2, 9, 1), ).setIndexNames((0, "MADGEBOX-MIB", "madgeSecureTrapDestIndex"))
if mibBuilder.loadTexts: madgeSecureTrapDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureTrapDestEntry.setDescription('An entry containing the address for a manager that is to receive SNMP traps generated by this device')
madgeSecureTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeSecureTrapDestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureTrapDestIndex.setDescription('Index into the table')
madgeSecureTrapDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-used", 1), ("ip-address", 2), ("ipx-address", 3), ("mac-address", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureTrapDestType.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureTrapDestType.setDescription('Identifies the format of the data stored in madgeSecureTrapDestAddress not-used - this table entry does not contain valid data ip-address - this table entry contains a valid ip address ipx-address - this table entry contains a valid ipx address mac-address - this table entry contains a valid mac address')
madgeSecureTrapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 9, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureTrapDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureTrapDestAddress.setDescription('An address for a management station that is to receive any SNMP traps generated by this device. The format of the address is determined by the associated entry in the madgeSecureTrapDestType. For type ipx-address the format is <ipx network> <node address> = 10 bytes.')
madgeSecureTrapDestIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 2, 9, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeSecureTrapDestIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeSecureTrapDestIPAddress.setDescription('If madgeSecureTrapDestType is set to ip-address, this variable is equivalent to madgeSecureTrapDestAddress encoded as an IP Address, rather than an Octet String')
madgeDownloadIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeDownloadIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadIPAddress.setDescription('The IP address of the server to use for the download when using TFTP-IP')
madgeDownloadIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeDownloadIPGateway.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadIPGateway.setDescription('The IP gateway to be used to access the server. If this variable is zero then use the default gateway in madgeConfigIPGateway.')
madgeDownloadIPXAddress = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeDownloadIPXAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadIPXAddress.setDescription('The IPX address of the server to use for the download when using TFTP-IPX or RPL-IPX. The format of the address is <ipx network><node address><socket> = 12 bytes.')
madgeDownloadNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeDownloadNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadNodeAddress.setDescription('The Node address of the server to use for the download when using RPL-LLC ')
madgeDownloadFileName = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeDownloadFileName.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadFileName.setDescription('The filename of the microcode to download. The maximum length of this string is device specific. If a string that is too long is written to this variable BAD VALUE will be returned.')
madgeDownloadDestination = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeDownloadDestination.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadDestination.setDescription('The destination for the download. This will contain the madgeVersionIndex for the download destination.')
madgeDownloadState = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("idle", 1), ("tftp-waiting-ip", 2), ("tftp-running-ip", 3), ("tftp-waiting-ipx", 4), ("tftp-running-ipx", 5), ("waiting-xmodem", 6), ("running-xmodem", 7), ("rpl-waiting-ipx", 8), ("rpl-running-ipx", 9), ("rpl-waiting-llc", 10), ("rpl-running-llc", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeDownloadState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadState.setDescription('The current state of the download')
madgeDownloadFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107))).clone(namedValues=NamedValues(("no-error", 1), ("config-error", 2), ("busy", 3), ("timeout", 4), ("cancelled", 5), ("incompatible-file", 6), ("file-too-big", 7), ("protocol-error", 8), ("flash-write-error", 9), ("undefined-error", 100), ("file-not-found", 101), ("access-violation", 102), ("out-of-memory", 103), ("illegal-operation", 104), ("unknown-transfer-id", 105), ("file-already-exists", 106), ("no-such-user", 107)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeDownloadFailureCode.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadFailureCode.setDescription("While a download is in progress this will always be 'no-error'. After a download is complete this indicates the success or failure of the download. If it is anything other than 'no-error' then 'madgedownloadStatusText' will contain a textual description of the error. Error codes from 100 upwards are errors returned from a TFTP server. Errors below this are locally generated.")
madgeDownloadStatusText = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeDownloadStatusText.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadStatusText.setDescription('A display string describing the status of the download in progress, or the reason for failure of the last download. If FailureCode = no-error then StatusText may be empty.')
madgeDownloadSize = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeDownloadSize.setStatus('mandatory')
if mibBuilder.loadTexts: madgeDownloadSize.setDescription('While a download is in progress this indicates the number of bytes transferred so far. After the download is completed this remains at the final size downloaded.')
madgeIPCurrentAddress = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeIPCurrentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeIPCurrentAddress.setDescription('The IP address that is currently being used by this device. The IP address could have been obtained from madgeConfigIPAddress or by some other means indicated by madgeIPDiscoveryMethod')
madgeIPCurrentGateway = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 4, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeIPCurrentGateway.setStatus('mandatory')
if mibBuilder.loadTexts: madgeIPCurrentGateway.setDescription('The IP gateway that is currently being used by this device. The IP gateway could have been obtained from madgeConfigIPGateway or by some other means indicated by madgeIPDiscoveryMethod')
madgeIPCurrentSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeIPCurrentSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: madgeIPCurrentSubnetMask.setDescription('The IP Subnet Mask that is currently being used by this device. The IP Subnet Mask could have been obtained from madgeConfigIPSubnetMask or by some other means indicated by madgeIPDiscoveryMethod')
madgeIPDiscoveryMethod = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-discovered", 1), ("via-config", 2), ("via-bootp", 3), ("via-rarp", 4), ("via-dhcp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeIPDiscoveryMethod.setStatus('mandatory')
if mibBuilder.loadTexts: madgeIPDiscoveryMethod.setDescription('The source of the currently used IP address, gateway and subnet mask.')
madgeIPBootpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeIPBootpEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: madgeIPBootpEnabled.setDescription('Enable / Disable the use of BootP for IP address discovery')
madgeIPRarpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeIPRarpEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: madgeIPRarpEnabled.setDescription('Enable / Disable the use of RARP for IP address discovery')
madgeIPDHCPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeIPDHCPEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: madgeIPDHCPEnabled.setDescription('Enable / Disable the use of DHCP for IP address discovery')
madgeVersionTable = MibTable((1, 3, 6, 1, 4, 1, 494, 10, 5, 1), )
if mibBuilder.loadTexts: madgeVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeVersionTable.setDescription('A table containing version information for all hardware / software components in a device.')
madgeVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 10, 5, 1, 1), ).setIndexNames((0, "MADGEBOX-MIB", "madgeVersionIndex"))
if mibBuilder.loadTexts: madgeVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeVersionEntry.setDescription('An entry containing version information for a hardware / software component in a device.')
madgeVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: madgeVersionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: madgeVersionIndex.setDescription('Index into the table')
madgeVersionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeVersionDescription.setStatus('mandatory')
if mibBuilder.loadTexts: madgeVersionDescription.setDescription('A string containing a textual description for the component identified by this entry.')
madgeVersionLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeVersionLocation.setStatus('mandatory')
if mibBuilder.loadTexts: madgeVersionLocation.setDescription('A string containing a textual description of the location of the component identified by this entry. eg Flash Bank A Flash ROM Boot ROM Boot Bank A Base Hardware Hardware Module ')
madgeVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: madgeVersionNumber.setDescription('Version number for the component. Stored in the format :- first Byte - major version number - minor version number last Byte - debug version number.')
madgeVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 20))).clone(namedValues=NamedValues(("flash", 1), ("boot-fixed", 2), ("boot-updateable", 3), ("hardware-fixed", 4), ("hardware-upgradeable", 5), ("other", 6), ("sw-running", 7), ("sw-config", 8), ("sw-image", 9), ("unknown", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeVersionType.setStatus('mandatory')
if mibBuilder.loadTexts: madgeVersionType.setDescription('The type of object that this table entry contains version information for. flash : code image resident in flash OR the flash bank itself boot-fixed : the version of the fixed boot ROM. boot-updateable : the current version of boot ROM code where the code can be updated. hardware-fixed : Hardware that cannot be upgraded. hardware-upgradeable : a plug in card that can be changed. sw-running : code image that is currently running in RAM. sw-config : a configuration file. This item may be uploaded or downloaded, to configure the device. sw-image : a subcomponent of the entire software. Can be resident in flash or ram. These items should be placed in the version table following the version of which they are a subcomponent.')
madgeVersionCount = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeVersionCount.setStatus('mandatory')
if mibBuilder.loadTexts: madgeVersionCount.setDescription('The number of entries in the version table')
madgeTrapTable = MibTable((1, 3, 6, 1, 4, 1, 494, 10, 6, 1), )
if mibBuilder.loadTexts: madgeTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapTable.setDescription('A table containing information about all of the traps that can be generated by a device. Each trap can be enabled / disabled, and a count is kept to indicate the number of traps generated.')
madgeTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1), ).setIndexNames((0, "MADGEBOX-MIB", "madgeTrapIndex"))
if mibBuilder.loadTexts: madgeTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapEntry.setDescription('An entry containing information about a single trap.')
madgeTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: madgeTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapIndex.setDescription('Index into the table')
madgeTrapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapDescription.setDescription('A string containing a textual description for the trap identified by this entry.')
madgeTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeTrapEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapEnterprise.setDescription('The enterprise identifier for the type of object generating the trap.')
madgeTrapSpecificTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeTrapSpecificTrap.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapSpecificTrap.setDescription('Trap specific code to identify this trap.')
madgeTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapSeverity.setDescription('The severity of this particular trap')
madgeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapEnable.setDescription('The enable state of this particular trap.')
madgeTrapEnableDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeTrapEnableDefault.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapEnableDefault.setDescription('The default enable state for this particular trap When the device is reset or madgeTrapDefaultAll is set to reset.')
madgeTrapCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 10, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeTrapCounter.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapCounter.setDescription('A count of the number of times this trap has been generated since the device was started, or since madgeTrapResetCounters was set to reset.')
madgeTrapEnableAll = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeTrapEnableAll.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapEnableAll.setDescription('Enable / disable the generation of all traps by the device. When set to disabled - no traps are generated. When set to enabled - only traps with madgeTrapEnable = enabled are generated.')
madgeTrapResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2), ("resetting", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeTrapResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapResetCounters.setDescription("To reset all of the counters in the madgeTrap table set this variable to reset. During the reset the device will return 'resetting' in response to a GET request. When the reset is complete the device will return normal in response to a GET request.")
madgeTrapDefaultAll = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2), ("resetting", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeTrapDefaultAll.setStatus('mandatory')
if mibBuilder.loadTexts: madgeTrapDefaultAll.setDescription("To return all of the entries in the madgeTrap table to their default enable state set this variable to reset. During the reset the device will return 'resetting' in response to a GET request. When the reset is complete the device will return normal in response to a GET request.")
madgeTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeTrapMessage.setStatus('optional')
if mibBuilder.loadTexts: madgeTrapMessage.setDescription('A textual description for the current trap. This variable can be included in an SNMP TRAP to provide a complete reason for the TRAP.')
madgeUploadIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeUploadIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadIPAddress.setDescription('The IP address of the server to use for the upload when using TFTP-IP')
madgeUploadIPGateway = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeUploadIPGateway.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadIPGateway.setDescription('The IP gateway to be used to access the server. If this variable is zero then use the default gateway in madgeConfigIPGateway.')
madgeUploadIPXAddress = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeUploadIPXAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadIPXAddress.setDescription('The IPX address of the server to use for the upload when using TFTP-IPX. The format of the address is <ipx network><node address><socket> = 12 bytes.')
madgeUploadFileName = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeUploadFileName.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadFileName.setDescription('The filename under which to store the uploaded microcode. The maximum length of this string is device specific. If a string that is too long is written to this variable BAD VALUE will be returned.')
madgeUploadSource = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeUploadSource.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadSource.setDescription('The source for the upload. This will contain the madgeVersionIndex for the upload source.')
madgeUploadState = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("tftp-waiting-ip", 2), ("tftp-running-ip", 3), ("tftp-waiting-ipx", 4), ("tftp-running-ipx", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeUploadState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadState.setDescription('The current state of the Upload')
madgeUploadFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107))).clone(namedValues=NamedValues(("no-error", 1), ("config-error", 2), ("busy", 3), ("timeout", 4), ("cancelled", 5), ("incompatible-file", 6), ("file-too-big", 7), ("protocol-error", 8), ("flash-write-error", 9), ("undefined-error", 100), ("file-not-found", 101), ("access-violation", 102), ("out-of-memory", 103), ("illegal-operation", 104), ("unknown-transfer-id", 105), ("file-already-exists", 106), ("no-such-user", 107)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeUploadFailureCode.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadFailureCode.setDescription("While an upload is in progress this will always be 'no-error'. After an upload is complete this indicates the success or failure of the upload. If it is anything other than 'no-error' then 'madgeUploadStatusText' will contain a textual description of the error. Error codes from 100 upwards are errors returned from a TFTP server. Errors below this are locally generated.")
madgeUploadStatusText = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeUploadStatusText.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadStatusText.setDescription('A display string describing the status of the upload in progress, or the reason for failure of the last upload. If FailureCode = no-error then StatusText may be empty.')
madgeUploadSize = MibScalar((1, 3, 6, 1, 4, 1, 494, 10, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeUploadSize.setStatus('mandatory')
if mibBuilder.loadTexts: madgeUploadSize.setDescription('While an upload is in progress this indicates the number of bytes transferred so far. After the upload is completed this remains at the final size uploaded.')
mibBuilder.exportSymbols("MADGEBOX-MIB", madgeTrapDescription=madgeTrapDescription, madgeTrapResetCounters=madgeTrapResetCounters, madgeConfigMCodeVersion=madgeConfigMCodeVersion, madgeUploadState=madgeUploadState, madgeSecureAllowedIPAddress=madgeSecureAllowedIPAddress, madgeVersionDescription=madgeVersionDescription, MacAddress=MacAddress, madgeVersionIndex=madgeVersionIndex, madgeIPDHCPEnabled=madgeIPDHCPEnabled, madgeDownload=madgeDownload, madgeDownloadSize=madgeDownloadSize, madgeSecureTrapDestIndex=madgeSecureTrapDestIndex, madgeTrapEnable=madgeTrapEnable, madgeVersionNumber=madgeVersionNumber, madgeSecureTrapDestEnabled=madgeSecureTrapDestEnabled, madgeIPCurrentGateway=madgeIPCurrentGateway, madgeConfigSnapshotName=madgeConfigSnapshotName, madgeSecureTrapDestTable=madgeSecureTrapDestTable, madge=madge, madgeSecureCurrentType=madgeSecureCurrentType, madgeSecureTrapDestEntry=madgeSecureTrapDestEntry, madgeConfigPasswordWrite=madgeConfigPasswordWrite, madgeSecureAllowedEnabled=madgeSecureAllowedEnabled, madgeConfigBCodeVersion=madgeConfigBCodeVersion, madgeIPCurrentSubnetMask=madgeIPCurrentSubnetMask, madgeUploadIPXAddress=madgeUploadIPXAddress, madgeTrapSpecificTrap=madgeTrapSpecificTrap, madgeTrapIndex=madgeTrapIndex, madgeSecureAllowedIndex=madgeSecureAllowedIndex, madgeVersionCount=madgeVersionCount, madgeDownloadIPAddress=madgeDownloadIPAddress, DisplayString=DisplayString, madgeSecureAllowedTable=madgeSecureAllowedTable, madgeIPBootpEnabled=madgeIPBootpEnabled, madgeTrapEnableAll=madgeTrapEnableAll, madgeBox=madgeBox, madgeUploadSource=madgeUploadSource, madgeIP=madgeIP, madgeTrapEnterprise=madgeTrapEnterprise, madgeSecureAllowedTableSize=madgeSecureAllowedTableSize, madgeIPDiscoveryMethod=madgeIPDiscoveryMethod, madgeVersionLocation=madgeVersionLocation, madgeTrapEnableDefault=madgeTrapEnableDefault, madgeSecureTrapDestType=madgeSecureTrapDestType, madgeVersion=madgeVersion, madgeSecureCurrentIPAddress=madgeSecureCurrentIPAddress, madgeSecureAllowedType=madgeSecureAllowedType, madgeTrapCounter=madgeTrapCounter, madgeTrap=madgeTrap, madgeConfigPasswordTable=madgeConfigPasswordTable, madgeTrapSeverity=madgeTrapSeverity, madgeConfig=madgeConfig, madgeDownloadState=madgeDownloadState, madgeVersionEntry=madgeVersionEntry, madgeConfigPasswordRead=madgeConfigPasswordRead, madgeSecureCurrentTableSize=madgeSecureCurrentTableSize, madgeConfigReadPassword=madgeConfigReadPassword, madgeSecureCurrentIndex=madgeSecureCurrentIndex, madgeConfigIPAddress=madgeConfigIPAddress, madgeSecureCurrentEntry=madgeSecureCurrentEntry, madgeUploadStatusText=madgeUploadStatusText, madgeConfigIPSubnetMask=madgeConfigIPSubnetMask, madgeConfigPasswordEntry=madgeConfigPasswordEntry, madgeDownloadStatusText=madgeDownloadStatusText, madgeSecureTrapDestIPAddress=madgeSecureTrapDestIPAddress, madgeDownloadNodeAddress=madgeDownloadNodeAddress, madgeConfigDeviceHealth=madgeConfigDeviceHealth, madgeUploadSize=madgeUploadSize, madgeConfigDefaultSnapshot=madgeConfigDefaultSnapshot, madgeConfigDefaultFlashVersion=madgeConfigDefaultFlashVersion, madgeSecureCurrentTable=madgeSecureCurrentTable, madgeUploadIPGateway=madgeUploadIPGateway, madgeSecureTrapDestAddress=madgeSecureTrapDestAddress, madgeSecureAllowedAddress=madgeSecureAllowedAddress, madgeDownloadFailureCode=madgeDownloadFailureCode, madgeDownloadDestination=madgeDownloadDestination, madgeTrapTable=madgeTrapTable, madgeSecureCurrentUpdateTime=madgeSecureCurrentUpdateTime, madgeDownloadFileName=madgeDownloadFileName, madgeSecureCurrentAddress=madgeSecureCurrentAddress, madgeIPRarpEnabled=madgeIPRarpEnabled, madgeSecureTrapDestTableSize=madgeSecureTrapDestTableSize, madgeConfigAdminStatus=madgeConfigAdminStatus, madgeVersionTable=madgeVersionTable, madgeDownloadIPXAddress=madgeDownloadIPXAddress, madgeVersionType=madgeVersionType, madgeUploadFailureCode=madgeUploadFailureCode, madgeConfigPasswordIndex=madgeConfigPasswordIndex, madgeTrapEntry=madgeTrapEntry, madgeUploadFileName=madgeUploadFileName, madgeUploadIPAddress=madgeUploadIPAddress, madgeConfigOperStatus=madgeConfigOperStatus, madgeConfigIPGateway=madgeConfigIPGateway, madgeConfigLinkTest=madgeConfigLinkTest, madgeDownloadIPGateway=madgeDownloadIPGateway, madgeConfigMCodeFilename=madgeConfigMCodeFilename, madgeConfigSerialNumber=madgeConfigSerialNumber, madgeUpload=madgeUpload, madgeConfigPassword=madgeConfigPassword, madgeTrapDefaultAll=madgeTrapDefaultAll, madgeSecure=madgeSecure, madgeSecureAllowedEntry=madgeSecureAllowedEntry, madgeTrapMessage=madgeTrapMessage, madgeIPCurrentAddress=madgeIPCurrentAddress, madgeConfigPasswordComment=madgeConfigPasswordComment, madgeConfigEraseFlashVersion=madgeConfigEraseFlashVersion, madgeConfigPasswordTableSize=madgeConfigPasswordTableSize, madgeSecureCurrentTimeout=madgeSecureCurrentTimeout)
