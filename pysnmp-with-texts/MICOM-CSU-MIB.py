#
# PySNMP MIB module MICOM-CSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-CSU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, Bits, NotificationType, ObjectIdentity, IpAddress, MibIdentifier, Integer32, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Bits", "NotificationType", "ObjectIdentity", "IpAddress", "MibIdentifier", "Integer32", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_csu = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 29)).setLabel("micom-csu")
csu_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1)).setLabel("csu-configuration")
csu_status = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2)).setLabel("csu-status")
mcmT1E1CsuCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1), )
if mibBuilder.loadTexts: mcmT1E1CsuCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTable.setDescription('NAME = ; DESC = The T1/E1 CSU Configuration table.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmT1E1CsuCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1), ).setIndexNames((0, "MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmT1E1CsuCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 CSU Configuration \\ table.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CsuCfgifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgifIndex.setDescription('NAME = ; DESC = The T1E1 Csu Cfg interface index \\ value of the specifc entry.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1Csu", 1), ("e1Csu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CsuCfgLineType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgLineType.setDescription('NAME = ; DESC = The value of this object determines \\ whether the line is a T1 CSU or E1 CSU.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("ls-1ds0Times64K-64K", 1), ("ls-2ds0Times64K-128K", 2), ("ls-3ds0Times64K-192K", 3), ("ls-4ds0Times64K-256K", 4), ("ls-5ds0Times64K-320K", 5), ("ls-6ds0Times64K-384K", 6), ("ls-7ds0Times64K-448K", 7), ("ls-8ds0Times64K-512K", 8), ("ls-9ds0Times64K-576K", 9), ("ls-10ds0Times64K-640K", 10), ("ls-11ds0Times64K-704K", 11), ("ls-12ds0Times64K-768K", 12), ("ls-13ds0Times64K-832K", 13), ("ls-14ds0Times64K-896K", 14), ("ls-15ds0Times64K-960K", 15), ("ls-16ds0Times64K-1024K", 16), ("ls-17ds0Times64K-1088K", 17), ("ls-18ds0Times64K-1152K", 18), ("ls-19ds0Times64K-1216K", 19), ("ls-20ds0Times64K-1280K", 20), ("ls-21ds0Times64K-1344K", 21), ("ls-22ds0Times64K-1408K", 22), ("ls-23ds0Times64K-1472K", 23), ("ls-24ds0Times64K-1536K", 24), ("ls-25ds0Times64K-1600K", 25), ("ls-26ds0Times64K-1664K", 26), ("ls-27ds0Times64K-1728K", 27), ("ls-28ds0Times64K-1792K", 28), ("ls-29ds0Times64K-1856K", 29), ("ls-30ds0Times64K-1920K", 30), ("ls-1ds0Times56K-56K", 31), ("ls-2ds0Times56K-112K", 32), ("ls-3ds0Times56K-168K", 33), ("ls-4ds0Times56K-224K", 34), ("ls-5ds0Times56K-280K", 35), ("ls-6ds0Times56K-336K", 36), ("ls-7ds0Times56K-392K", 37), ("ls-8ds0Times56K-448K", 38), ("ls-9ds0Times56K-504K", 39), ("ls-10ds0Times56K-560K", 40), ("ls-11ds0Times56K-616K", 41), ("ls-12ds0Times56K-672K", 42), ("ls-13ds0Times56K-728K", 43), ("ls-14ds0Times56K-784K", 44), ("ls-15ds0Times56K-840K", 45), ("ls-16ds0Times56K-896K", 46), ("ls-17ds0Times56K-952K", 47), ("ls-18ds0Times56K-1008K", 48), ("ls-19ds0Times56K-1064K", 49), ("ls-20ds0Times56K-1120K", 50), ("ls-21ds0Times56K-1176K", 51), ("ls-22ds0Times56K-1232K", 52), ("ls-23ds0Times56K-1288K", 53), ("ls-24ds0Times56K-1344K", 54), ("ls-25ds0Times56K-1400K", 55), ("ls-26ds0Times56K-1456K", 56), ("ls-27ds0Times56K-1512K", 57), ("ls-28ds0Times56K-1568K", 58), ("ls-29ds0Times56K-1624K", 59), ("ls-30ds0Times56K-1680K", 60), ("idle", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CsuCfgLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgLineSpeed.setDescription('NAME = ; DESC = The value of this object indicates the T1/E1 CSU \\ total configured DS0 line speed.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("dist-0-133-feet", 1), ("dist-133-266-feet", 2), ("dist-266-399-feet", 3), ("dist-399-533-feet", 4), ("dist-533-655-feet", 5), ("neg-7pt5-db", 6), ("neg-15-db", 7), ("neg-22pt5-db", 8), ("ohm-75-normal", 9), ("ohm-120-normal", 10), ("ohm-75-protection-resistors", 11), ("ohm-120-protection-resistors", 12), ("ohm-75-high-return-loss-1-1pt15-step-up", 13), ("ohm-75-high-return-loss-1-1pt36-step-up", 14), ("ohm-120-high-return-loss-1-1pt36-step-up", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgLineBuildOut.setDescription('NAME = ; DESC = The value of this object selects the T1/E1 CSU \\ line build out. For a T1 CSU, the default value \\ is neg-7pt5-db (6). For an E1 CSU, the default \\ value is either ohm-75-normal (9) (an E1 CSU interface \\ with 2 BNC connectors) or ohm-120-normal (10) \\ (an E1 CSU interface with an RJ48 connector). \\ Note that the ranges of enumeration values 1-8 and \\ 9-15 apply uniquely to T1 and E1 interfaces; respectively.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTxIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxIdleCode.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxIdleCode.setDescription('NAME = ; DESC = The value of this object selects the T1/E1 CSU \\ transmit idle code. For a T1 CSU, the default value is \\ hex 0x7F. For an E1 CSU, the default value is hex 0x55.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTxRxClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalClockingSource", 1), ("externalClockingSource", 2))).clone('externalClockingSource')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxRxClkSource.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxRxClkSource.setDescription('NAME = ; DESC = The value of this object selects the T1/E1 CSU \\ line clocking source.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgDS0BasicRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("br64K-basicRate", 1), ("br56K-basicRate", 2))).clone('br64K-basicRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgDS0BasicRate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgDS0BasicRate.setDescription('NAME = ; DESC = The value of this object selects the T1/E1 CSU \\ line speed to be a multiple of the specified \\ basic rate. E.g., Line Speed 256K = 4 x 64K.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgLocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgLocalLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgLocalLoopback.setDescription('NAME = ; DESC = The value of this object selects the T1/E1 CSU \\ local loopback.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgRemoteLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgRemoteLoopback.setDescription('NAME = ; DESC = The value of this object selects the T1/E1 CSU \\ remote loopback.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgFramerLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgFramerLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgFramerLoopback.setDescription('NAME = ; DESC = The value of this object selects the T1/E1 CSU \\ framer loopback.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTrapEnable.setDescription('NAME = ; DESC = The value of this object selects whether the T1/E1 \\ CSU traps should be generated for this interface.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgFrameFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d4FramingMode", 1), ("esfFramingMode", 2))).clone('esfFramingMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgFrameFmt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgFrameFmt.setDescription('NAME = ; DESC = The value of this object selects the T1 CSU \\ frame format. \\ Note that for an E1 CSU interface, this object is not used.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTxRx0CodeSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable-b8zs", 1), ("enable-b8zs", 2))).clone('enable-b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxRx0CodeSuppress.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxRx0CodeSuppress.setDescription('NAME = ; DESC = The value of this object selects zero \\ code suppression for a T1 CSU interface. \\ Note that for an E1 CSU interface, this object is not used.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTxB7ZeroSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable-b7zs", 1), ("enable-b7zs", 2))).clone('disable-b7zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxB7ZeroSuppress.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxB7ZeroSuppress.setDescription('NAME = ; DESC = The value of this object selects bit 7 zero\\ suppression for a T1 CSU interface. Selects stuffing \\ bit 7 to 1 if 8 consecutive zeros occurred. \\ Note that for an E1 CSU interface, this object is not used.; HELP = b7zsDisable (1): no stuffing occurred. \\ b7zsEnable (2): bit 7 forced to a one in \\ channels with all zeros.; CAPABILITIES = ;')
mcmT1E1CsuCfgPayloadLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgPayloadLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgPayloadLoopback.setDescription('NAME = ; DESC = The value of this object selects the T1 CSU \\ payload loopback. \\ Note that for an E1 CSU interface, this object is not used.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTransmitLoopUp = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTransmitLoopUp.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTransmitLoopUp.setDescription('NAME = ; DESC = The value of this object selects the T1 CSU \\ transmit loop up. \\ Note that for an E1 CSU interface, this object is not used.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTransmitLoopDown = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTransmitLoopDown.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTransmitLoopDown.setDescription('NAME = ; DESC = The value of this object selects the T1 CSU \\ transmit loop down. \\ Note that for an E1 CSU interface, this object is not used.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTxRxHDB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxRxHDB3.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxRxHDB3.setDescription('NAME = ; DESC = The value of this object selects the E1 CSU HDB3. \\ Note that for a T1 CSU interface, this object is not used.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgTxRxCRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxRxCRC4.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgTxRxCRC4.setDescription('NAME = ; DESC = The value of this object selects the E1 CSU CRC4. \\ Note that for a T1 CSU interface, this object is not used.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCfgDS0Connection = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 83))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmT1E1CsuCfgDS0Connection.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCfgDS0Connection.setDescription("NAME = ; DESC = The value of this object selects the DS0 \\ channels for the T1/E1 CSU line connection. \\ Valid characters are decimal digits, comma \\ (','), and hyphen ('-').; HELP = Comma (',') is used as a delimiter between \\ individual channel selections. \\ e.g., 13,16 means DS0 channels 13 and 16. \\ Hyphen ('-') is used only in Set operations \\ to indicate a range of DS0 channels. \\ e.g., 2,5-8 means DS0 channels 2,5,6,7, and 8.; CAPABILITIES = ;")
mcmCsuCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2), )
if mibBuilder.loadTexts: mcmCsuCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgTable.setDescription('NAME = ; DESC = The 56K CSU Configuration table.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmCsuCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1), ).setIndexNames((0, "MICOM-CSU-MIB", "mcmCsuCfgifIndex"))
if mibBuilder.loadTexts: mcmCsuCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgEntry.setDescription('NAME = ; DESC = An entry in the 56K CSU Configuration \\ table.); HELP = ; CAPABILITIES = ;')
mcmCsuCfgifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuCfgifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgifIndex.setDescription('NAME = ; DESC = The 56k Csu Cfg interface index \\ value of the specifc entry.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dds-pri-4Wire-56k", 1), ("dds-sc-WithSecondaryChannel-72k", 2), ("cc-64k-ClearChannel-64k", 3), ("dds-pri-2Wire-56k", 4))).clone('dds-pri-4Wire-56k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgOperatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgOperatingMode.setDescription('NAME = ; DESC = The value of this object selects the 56K CSU \\ operating mode.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgClockingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalClock", 1), ("internalClock", 2))).clone('externalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgClockingSource.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgClockingSource.setDescription('NAME = ; DESC = The value of this object selects the 56K CSU \\ clocking source.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgTxOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitOutOfFrame", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgTxOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgTxOutOfFrame.setDescription('NAME = ; DESC = This object selects transmission of the 56K CSU \\ Out Of Frame sequence for DDS-PRI mode, or \\ transmission of Multiplexer Out Of Sync \\ sequence for DDS-SC mode.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgTxOutOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitOutOfService", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgTxOutOfService.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgTxOutOfService.setDescription('NAME = ; DESC = This object selects transmission of the 56K CSU \\ Out Of Service sequence for DDS-PRI mode, or \\ transmission of Abnormal Station Code \\ sequence for DDS-SC mode.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgTxControlModeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitControlModeIdle", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgTxControlModeIdle.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgTxControlModeIdle.setDescription('NAME = ; DESC = This object selects transmission of the 56K CSU \\ Control Mode Idle sequence.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgZeroSuppressDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("zeroSuppressionDisable", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgZeroSuppressDisable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgZeroSuppressDisable.setDescription('NAME = ; DESC = This object selects the 56K CSU disable \\ transmit Zero Suppression for DDS-PRI mode, \\ or transmission of all zeros for DDS-SC mode.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgTxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTransmitCondition", 1), ("transmitIdle", 2))).clone('normalTransmitCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgTxIdle.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgTxIdle.setDescription('NAME = ; DESC = This object selects transmission of the 56K CSU \\ All Marks (or 1s) of the Data Mode Idle sequence \\ for all the modes.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgCSULoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalReceiveCondition", 1), ("forceCSUtoLoopback", 2))).clone('normalReceiveCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgCSULoopback.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgCSULoopback.setDescription('NAME = ; DESC = This object selects the 56K CSU to force the CSU \\ to be in a loopback mode.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgFilterForceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalReceiveCondition", 1), ("filterForceEnable", 2))).clone('normalReceiveCondition')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgFilterForceEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgFilterForceEnable.setDescription('NAME = ; DESC = This object selects the 56K CSU to have \\ filter forcing enabled or not.; HELP = ; CAPABILITIES = ;')
mcmCsuCfgFilterForcingCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("fg90db-FilterGain", 1), ("fg84db-FilterGain", 2), ("fg78db-FilterGain", 3), ("fg72db-FilterGain", 4), ("fg66db-FilterGain", 5), ("fg60db-FilterGain", 6), ("fg54db-FilterGain", 7), ("fg48db-FilterGain", 8), ("fg42db-FilterGain", 9), ("fg36db-FilterGain", 10), ("fg30db-FilterGain", 11), ("fg24db-FilterGain", 12), ("fg18db-FilterGain", 13), ("fg12db-FilterGain", 14), ("fg6db-FilterGain", 15), ("fg0db-FilterGain", 16))).clone('fg0db-FilterGain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCsuCfgFilterForcingCntl.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuCfgFilterForcingCntl.setDescription('NAME = ; DESC = This object selects the 56K CSU filter \\ gain if filter force is enabled.; HELP = ; CAPABILITIES = ;')
mcmT1E1CsuCntlRegStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1), )
if mibBuilder.loadTexts: mcmT1E1CsuCntlRegStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCntlRegStatusTable.setDescription('NAME = ; DESC = The T1/E1 CSU Control Register Status \\ table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmT1E1CsuCntlRegStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1), ).setIndexNames((0, "MICOM-CSU-MIB", "mcmT1E1CSUStatusifIndex"))
if mibBuilder.loadTexts: mcmT1E1CsuCntlRegStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CsuCntlRegStatusEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 CSU Control Register \\ Status table.; HELP = ; CAPABILITIES = ;')
mcmT1E1CSUStatusifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusifIndex.setDescription('NAME = ; DESC = The T1E1 CSU Status interface index \\ value of the specifc entry.; HELP = ; CAPABILITIES = ;')
mcmT1E1CSUStatusCntlReg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg1.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg1.setDescription('NAME = ; DESC = The value of this object indicates RCR1, the \\ value of Receive Control Register 1 for a T1/E1 \\ CSU line type.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg2.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg2.setDescription('NAME = ; DESC = The value of this object indicates RCR2, the \\ value of Receive Control Register 2 for a T1/E1 \\ CSU line type.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg3.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg3.setDescription('NAME = ; DESC = The value of this object indicates TCR1, the \\ value of Transmit Control Register 1 for a T1/E1 \\ CSU line type.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg4.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg4.setDescription('NAME = ; DESC = The value of this object indicates TCR2, the \\ value of Transmit Control Register 2 for a T1/E1 \\ CSU line type.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg5 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg5.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg5.setDescription('NAME = ; DESC = The value of this object indicates CCR1, the \\ value of Common Control Register 1 for a T1/E1 \\ CSU line type.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg6 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg6.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg6.setDescription('NAME = ; DESC = The value of this object indicates CCR2, the \\ value of Common Control Register 2 for a T1/E1 \\ CSU line type.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg7 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg7.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg7.setDescription('NAME = ; DESC = The value of this object indicates CCR3, the \\ value of Common Control Register 3 for a T1/E1 \\ CSU line type.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg8 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg8.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg8.setDescription('NAME = ; DESC = The value of this object indicates LICR, the value of \\ the Line Interface Control Register for a T1 CSU line type.\\ The value of this object indicates CCR4, the value of \\ Common Control Register 4 for an E1 line type.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg9 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg9.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg9.setDescription('NAME = ; DESC = The value of this object indicates CCR5, the \\ value of Common Control Register 5 for an E1 CSU \\ line type. \\ Note that for a T1 CSU interface, this object is not used.; HELP = ; CAPABILITIES =;')
mcmT1E1CSUStatusCntlReg10 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg10.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1E1CSUStatusCntlReg10.setDescription('NAME = ; DESC = The value of this object indicates LICR, the \\ value of the Line Interface Control Register for \\ an E1 CSU line type. \\ Note that for a T1 CSU interface, this object is not used.; HELP = ; CAPABILITIES =;')
mcmT1CsuGenStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2), )
if mibBuilder.loadTexts: mcmT1CsuGenStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusTable.setDescription('NAME = ; DESC = The T1 CSU General Status and \\ Statistics table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmT1CsuGenStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1), ).setIndexNames((0, "MICOM-CSU-MIB", "mcmT1CsuGenStatusifIndex"))
if mibBuilder.loadTexts: mcmT1CsuGenStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusEntry.setDescription('NAME = ; DESC = An entry in the T1 CSU General \\ Status and Statistics table.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusifIndex.setDescription('NAME = ; DESC = The T1 CSU General Status interface \\ index value of the specifc entry.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("alarmMode", 2), ("testMode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusLineStatus.setDescription('NAME = ; DESC = The value of this object indicates the \\ T1 CSU line status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redAlarm", 1), ("noRedAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRedAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRedAlarm.setDescription('NAME = ; DESC = The value of this object indicates the \\ T1 CSU red alarm status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yellowAlarm", 1), ("noYellowAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusYellowAlarm.setDescription('NAME = ; DESC = The value of this object indicates the \\ T1 CSU yellow alarm status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusBlueAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blueAlarm", 1), ("noBlueAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusBlueAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusBlueAlarm.setDescription('NAME = ; DESC = The value of this object indicates the \\ T1 CSU blue alarm status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("plus2db-to-neg7pt5db", 1), ("neg7pt5db-to-neg15db", 2), ("neg15db-to-neg22pt5db", 3), ("lessThan-neg22pt5db", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxLevel.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU line receive level status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRxElasStrFull = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxElasStrFull.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxElasStrFull.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU receive elastic store full status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRxElasStrEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxElasStrEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxElasStrEmpty.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU receive elastic store empty status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRxPlsDensViolate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxPlsDensViolate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxPlsDensViolate.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU receive pulse density violation status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusTxPlsDensViolate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusTxPlsDensViolate.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusTxPlsDensViolate.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU transmit pulse density violation status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRxCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxCarrierLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxCarrierLoss.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU receive carrier loss status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRxSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxSyncLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxSyncLoss.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU receive loss of sync status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusLnCdViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusLnCdViolations.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusLnCdViolations.setDescription('NAME = ; DESC = The value of this object indicates the number \\ of T1 CSU line code violations. \\ Note that this is a 16-bit counter.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRxLoopUpCdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxLoopUpCdDetect.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxLoopUpCdDetect.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU receive loop up code status.; HELP = ; CAPABILITIES = ;')
mcmT1CsuGenStatusRxLoopDnCdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxLoopDnCdDetect.setStatus('mandatory')
if mibBuilder.loadTexts: mcmT1CsuGenStatusRxLoopDnCdDetect.setDescription('NAME = ; DESC = The value of this object indicates the T1 \\ CSU receive loop down code status.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3), )
if mibBuilder.loadTexts: mcmE1CsuGenStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusTable.setDescription('NAME = ; DESC = The E1 CSU General Status and \\ Statistics table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmE1CsuGenStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1), ).setIndexNames((0, "MICOM-CSU-MIB", "mcmE1CsuGenStatusifIndex"))
if mibBuilder.loadTexts: mcmE1CsuGenStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusEntry.setDescription('NAME = ; DESC = An entry in the E1 CSU General \\ Status and Statistics table.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusifIndex.setDescription('NAME = ; DESC = The E1 CSU General Status interface \\ index value of the specifc entry.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("alarmMode", 2), ("testMode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusLineStatus.setDescription('NAME = ; DESC = The value of this object indicates the \\ E1 CSU line status.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusRedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redAlarm", 1), ("noRedAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusRedAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusRedAlarm.setDescription('NAME = ; DESC = The value of this object indicates the \\ E1 CSU red alarm status. It includes both \\ receive carrier loss and receive loss of sync.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusRemoteAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteAlarm", 1), ("noRemoteAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusRemoteAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusRemoteAlarm.setDescription('NAME = ; DESC = The value of this object indicates the \\ E1 CSU remote alarm status. It includes both \\ receive remote alarm and receive distant MF \\ alarm.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusAISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aisAlarm", 1), ("noAISAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusAISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusAISAlarm.setDescription('NAME = ; DESC = The value of this object indicates the \\ E1 CSU AIS Alarm status.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusRxCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusRxCarrierLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusRxCarrierLoss.setDescription('NAME = ; DESC = The value of this object indicates the \\ E1 CSU receive carrier loss status.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusRxSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusRxSyncLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusRxSyncLoss.setDescription('NAME = ; DESC = The value of this object indicates the E1 \\ CSU receive loss of sync status.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusTxElasStrFull = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusTxElasStrFull.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusTxElasStrFull.setDescription('NAME = ; DESC = The value of this object indicates the E1 \\ CSU transmit elastic store full status. This \\ indicates that the E1 CSU transmit side \\ elastic store buffer fills and a frame is deleted.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusTxElasStrEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusTxElasStrEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusTxElasStrEmpty.setDescription('NAME = ; DESC = The value of this object indicates the E1 \\ CSU transmit elastic store empty status. This \\ indicates that the E1 CSU transmit side elastic \\ store buffer empties and a frame is repeated.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusRxElasStrFull = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusRxElasStrFull.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusRxElasStrFull.setDescription('NAME = ; DESC = The value of this object indicates the E1 \\ CSU receive elastic store full status. This \\ indicates that the E1 CSU receive side elastic \\ store buffer fills and a frame is deleted.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusRxElasStrEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusRxElasStrEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusRxElasStrEmpty.setDescription('NAME = ; DESC = The value of this object indicates the E1 \\ CSU receive elastic store empty status. This \\ indicates that the E1 CSU receive side elastic \\ store buffer empties and a frame is repeated.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusBpvOrLnCdViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusBpvOrLnCdViolations.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusBpvOrLnCdViolations.setDescription('NAME = ; DESC = The value of this object indicates the number \\ of E1 CSU line code violations. \\ Bipolar violation counts if HDB3 disabled, code \\ violation counts if HDB3 enabled. \\ Note that this is a 16-bit counter.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusFASErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusFASErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusFASErrors.setDescription('NAME = ; DESC = The value of this object indicates the number \\ of E1 CSU FAS error counts. FAS error counts \\ record word errors in the frame alignment \\ signal in timeslot 0. \\ Note that this is a 12-bit counter.; HELP = ; CAPABILITIES = ;')
mcmE1CsuGenStatusCRC4Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmE1CsuGenStatusCRC4Errors.setStatus('mandatory')
if mibBuilder.loadTexts: mcmE1CsuGenStatusCRC4Errors.setDescription('NAME = ; DESC = The value of this object indicates the number \\ of E1 CSU CRC4 error counts. This object \\ is only applicable when CRC4 is enabled. \\ Note that this is a 10-bit counter.; HELP = ; CAPABILITIES = ;')
mcmCsuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4), )
if mibBuilder.loadTexts: mcmCsuStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusTable.setDescription('NAME = ; DESC = The 56K CSU Status and Statistics table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmCsuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1), ).setIndexNames((0, "MICOM-CSU-MIB", "mcmCsuStatusifIndex"))
if mibBuilder.loadTexts: mcmCsuStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusEntry.setDescription('NAME = ; DESC = An entry in the 56K CSU Status \\ and Statistics table.; HELP = ; CAPABILITIES = ;')
mcmCsuStatusifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuStatusifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusifIndex.setDescription('NAME = ; DESC = The 56k CSU Status interface index \\ value of the specifc entry.; HELP = ; CAPABILITIES = ;')
mcmCsuStatusLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("linkDown", 2), ("testMode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuStatusLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusLineStatus.setDescription('NAME = ; DESC = The value of this object indicates the 56K \\ CSU line status.; HELP = ; CAPABILITIES = ;')
mcmCsuStatusRxLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuStatusRxLossOfSignal.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusRxLossOfSignal.setDescription('NAME = ; DESC = The value of this object indicates if the 56K \\ CSU receiver has lost signal.; HELP = ; CAPABILITIES = ;')
mcmCsuStatusFAWSync = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuStatusFAWSync.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusFAWSync.setDescription('NAME = ; DESC = The value of this object indicates the 56K \\ CSU DDS FAW Sync in DDS-SC or CC-64K.; HELP = ; CAPABILITIES = ;')
mcmCsuStatusLoopPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuStatusLoopPresent.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusLoopPresent.setDescription('NAME = ; DESC = The value of this object indicates if the 56K \\ CSU loop is currently present.; HELP = ; CAPABILITIES = ;')
mcmCsuStatusInsertLossLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("iL50pt5db-LL8pt5km", 7), ("iL44pt4db-LL7pt5km", 8), ("iL38pt4db-LL6pt4km", 9), ("iL32pt3db-LL5pt3km", 10), ("iL26pt0db-LL4pt2km", 11), ("iL19pt7db-LL3pt2km", 12), ("iL13pt6db-LL2pt1km", 13), ("iL7pt3db-LL1pt1km", 14), ("iL0db-LL0km", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuStatusInsertLossLineLength.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusInsertLossLineLength.setDescription('NAME = ; DESC = The value of this object indicates the 56K \\ CSU receiver Insertion loss (iL) in db, and \\ Line Length (LL) in kilometers.; HELP = ; CAPABILITIES = ;')
mcmCsuStatusRxSignalMag = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuStatusRxSignalMag.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusRxSignalMag.setDescription("NAME = ; DESC = The value of this object indicates the 56K \\ CSU receive signal magnitude expressed as \\ the 'receiver slicer level'. This value \\ is used in conjunction with the db Insertion \\ Loss ('iL' from InsertLossLineLength object) \\ to compute the signal magnitude as follows: \\ Nyquist frequency loop attn (in db) = \\ [(iL)**2 + 20log10(51/RxSignalMag)].; HELP = ; CAPABILITIES = ;")
mcmCsuStatusInvalidBPVcounts = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 29, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCsuStatusInvalidBPVcounts.setStatus('mandatory')
if mibBuilder.loadTexts: mcmCsuStatusInvalidBPVcounts.setDescription('NAME = ; DESC = The value of this object indicates the 56K \\ CSU invalid BPV (Bipolar Violation) count. \\ Note that this is an 8-bit counter.; HELP = ; CAPABILITIES = ;')
mcmT1CsuRedAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmT1CsuRedAlarmSet.setDescription('NAME = ; DESC = When a downstream node detects a loss of \\ synchronization in its receive pair of a \\ T1 line, it is in red alarm condition. \\ Severity Level: CRITICAL.; HELP = ;')
mcmT1CsuRedAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmT1CsuRedAlarmClear.setDescription('NAME = ; DESC = When a downstream node is back in \\ synchronization with its receive pair \\ of a T1 line. This trap clears the node \\ that has the Red Alarm condition. \\ Severity Level : INFORMATIVE.; HELP = ;')
mcmT1CsuYellowAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmT1CsuYellowAlarmSet.setDescription('NAME = ; DESC = When a downstream node detects a loss of \\ synchronization in its receive pair of a \\ T1 line, it is in red alarm condition. \\ In turn, it transmits a yellow alarm \\ signal upstream to the previous node. \\ Severity Level: MAJOR.; HELP = ;')
mcmT1CsuYellowAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmT1CsuYellowAlarmClear.setDescription('NAME = ; DESC = When a downstream node detects a loss of \\ synchronization in its receive pair of a \\ T1 line, it is in red alarm condition. \\ In turn, it transmits a yellow alarm \\ signal upstream to the previous node. \\ This trap clears the node that has the \\ Yellow Alarm condition.; Severity Level: INFORMATIVE.; HELP = ;')
mcmT1CsuBlueAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,5)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmT1CsuBlueAlarmSet.setDescription('NAME = ; DESC = When a downstream node detects a loss of \\ synchronization in its receive pair of a \\ T1 line, it is in red alarm condition. \\ In turn, it transmits a yellow alarm \\ signal upstream to the previous node \\ and a blue alarm signal downstream to \\ the next node.\\ Severity Level: MINOR.; HELP = ;')
mcmT1CsuBlueAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,6)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmT1CsuBlueAlarmClear.setDescription('NAME = ; DESC = When a downstream node detects a loss of \\ synchronization in its receive pair of a \\ T1 line, it is in red alarm condition. \\ In turn, it transmits a yellow alarm \\ signal upstream to the previous node \\ and a blue alarm signal downstream to \\ the next node. This trap clears the \\ node that has the Blue Alarm condition. \\ Severity Level: INFORMATIVE.; HELP = ;')
mcmE1CsuRedAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,7)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmE1CsuRedAlarmSet.setDescription('NAME = ; DESC = This trap is generated upon the occurrence \\ of an E1 CSU Red Alarm. A red alarm indicates that \\ an out-of-frame condition existed for the last 100 \\ milliseconds or longer. \\ Severity Level: CRITICAL.; HELP = ;')
mcmE1CsuRedAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,8)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmE1CsuRedAlarmClear.setDescription('NAME = ; DESC = This trap is generated upon the clearance \\ of an E1 CSU Red Alarm. A red alarm is cleared \\ when the out-of-frame condition has been absent \\ for 100 milliseconds. \\ Severity Level : INFORMATIVE.; HELP = ;')
mcmE1CsuRemoteAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,9)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmE1CsuRemoteAlarmSet.setDescription('NAME = ; DESC = This trap is generated upon the occurrence \\ of an E1 CSU Remote Alarm. \\ Severity Level: MAJOR.; HELP = ;')
mcmE1CsuRemoteAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,10)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmE1CsuRemoteAlarmClear.setDescription('NAME = ; DESC = This trap is generated upon the clearance \\ of an E1 CSU Remote Alarm. \\ Severity Level: INFORMATIVE.; HELP = ;')
mcmE1CsuAISAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,11)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmE1CsuAISAlarmSet.setDescription('NAME = ; DESC = This trap is generated upon the occurrence \\ of an E1 CSU AIS Alarm. The AIS (alarm indication \\ signal) alarm is detected as an all ones condition \\ on the E1 line persisting for 100ms or longer. \\ This indicates the E1 line is unavailable. \\ Severity Level: MINOR.; HELP = ;')
mcmE1CsuAISAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 29) + (0,12)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-CSU-MIB", "mcmT1E1CsuCfgifIndex"))
if mibBuilder.loadTexts: mcmE1CsuAISAlarmClear.setDescription('NAME = ; DESC = This trap is generated upon the clearance \\ of an E1 CSU AIS Alarm. \\ Severity Level: INFORMATIVE.; HELP = ;')
mibBuilder.exportSymbols("MICOM-CSU-MIB", mcmT1E1CSUStatusCntlReg8=mcmT1E1CSUStatusCntlReg8, mcmT1E1CSUStatusCntlReg10=mcmT1E1CSUStatusCntlReg10, mcmT1CsuGenStatusBlueAlarm=mcmT1CsuGenStatusBlueAlarm, csu_configuration=csu_configuration, mcmCsuCfgifIndex=mcmCsuCfgifIndex, mcmT1E1CsuCfgTxRx0CodeSuppress=mcmT1E1CsuCfgTxRx0CodeSuppress, mcmT1CsuGenStatusLineStatus=mcmT1CsuGenStatusLineStatus, mcmT1CsuGenStatusTxPlsDensViolate=mcmT1CsuGenStatusTxPlsDensViolate, mcmT1E1CSUStatusCntlReg7=mcmT1E1CSUStatusCntlReg7, mcmT1E1CsuCfgTxB7ZeroSuppress=mcmT1E1CsuCfgTxB7ZeroSuppress, mcmT1CsuBlueAlarmSet=mcmT1CsuBlueAlarmSet, mcmT1E1CsuCfgEntry=mcmT1E1CsuCfgEntry, mcmT1E1CsuCfgLineType=mcmT1E1CsuCfgLineType, mcmT1E1CsuCfgTable=mcmT1E1CsuCfgTable, mcmCsuCfgTable=mcmCsuCfgTable, mcmT1E1CsuCfgFrameFmt=mcmT1E1CsuCfgFrameFmt, mcmE1CsuGenStatusTxElasStrFull=mcmE1CsuGenStatusTxElasStrFull, mcmT1CsuGenStatusRedAlarm=mcmT1CsuGenStatusRedAlarm, mcmE1CsuGenStatusEntry=mcmE1CsuGenStatusEntry, mcmE1CsuGenStatusRxElasStrFull=mcmE1CsuGenStatusRxElasStrFull, mcmE1CsuGenStatusRemoteAlarm=mcmE1CsuGenStatusRemoteAlarm, mcmCsuStatusRxSignalMag=mcmCsuStatusRxSignalMag, mcmT1E1CSUStatusCntlReg5=mcmT1E1CSUStatusCntlReg5, mcmT1CsuGenStatusRxElasStrEmpty=mcmT1CsuGenStatusRxElasStrEmpty, mcmT1E1CsuCfgTxRxHDB3=mcmT1E1CsuCfgTxRxHDB3, mcmT1CsuYellowAlarmSet=mcmT1CsuYellowAlarmSet, mcmT1CsuGenStatusRxCarrierLoss=mcmT1CsuGenStatusRxCarrierLoss, mcmT1CsuGenStatusRxLoopUpCdDetect=mcmT1CsuGenStatusRxLoopUpCdDetect, mcmT1E1CsuCfgLocalLoopback=mcmT1E1CsuCfgLocalLoopback, mcmT1CsuGenStatusRxSyncLoss=mcmT1CsuGenStatusRxSyncLoss, mcmT1CsuRedAlarmSet=mcmT1CsuRedAlarmSet, mcmT1E1CsuCntlRegStatusTable=mcmT1E1CsuCntlRegStatusTable, mcmCsuCfgEntry=mcmCsuCfgEntry, mcmCsuStatusLoopPresent=mcmCsuStatusLoopPresent, mcmT1CsuGenStatusYellowAlarm=mcmT1CsuGenStatusYellowAlarm, mcmT1CsuGenStatusifIndex=mcmT1CsuGenStatusifIndex, mcmE1CsuGenStatusLineStatus=mcmE1CsuGenStatusLineStatus, mcmCsuStatusTable=mcmCsuStatusTable, mcmCsuCfgFilterForcingCntl=mcmCsuCfgFilterForcingCntl, mcmCsuStatusRxLossOfSignal=mcmCsuStatusRxLossOfSignal, mcmCsuCfgTxOutOfService=mcmCsuCfgTxOutOfService, mcmCsuCfgTxControlModeIdle=mcmCsuCfgTxControlModeIdle, mcmE1CsuGenStatusRxElasStrEmpty=mcmE1CsuGenStatusRxElasStrEmpty, mcmE1CsuRemoteAlarmSet=mcmE1CsuRemoteAlarmSet, mcmE1CsuRedAlarmSet=mcmE1CsuRedAlarmSet, mcmT1E1CsuCfgRemoteLoopback=mcmT1E1CsuCfgRemoteLoopback, mcmT1E1CsuCfgDS0BasicRate=mcmT1E1CsuCfgDS0BasicRate, mcmT1CsuGenStatusRxLoopDnCdDetect=mcmT1CsuGenStatusRxLoopDnCdDetect, mcmCsuCfgClockingSource=mcmCsuCfgClockingSource, micom_csu=micom_csu, mcmT1E1CsuCfgLineBuildOut=mcmT1E1CsuCfgLineBuildOut, mcmT1E1CsuCfgTransmitLoopUp=mcmT1E1CsuCfgTransmitLoopUp, mcmT1E1CsuCfgDS0Connection=mcmT1E1CsuCfgDS0Connection, mcmE1CsuAISAlarmSet=mcmE1CsuAISAlarmSet, mcmT1E1CsuCfgTxRxClkSource=mcmT1E1CsuCfgTxRxClkSource, mcmE1CsuAISAlarmClear=mcmE1CsuAISAlarmClear, mcmT1E1CSUStatusCntlReg9=mcmT1E1CSUStatusCntlReg9, mcmT1CsuGenStatusEntry=mcmT1CsuGenStatusEntry, mcmE1CsuGenStatusRedAlarm=mcmE1CsuGenStatusRedAlarm, mcmE1CsuGenStatusTxElasStrEmpty=mcmE1CsuGenStatusTxElasStrEmpty, mcmE1CsuGenStatusTable=mcmE1CsuGenStatusTable, mcmCsuStatusEntry=mcmCsuStatusEntry, mcmCsuCfgFilterForceEnable=mcmCsuCfgFilterForceEnable, mcmE1CsuGenStatusifIndex=mcmE1CsuGenStatusifIndex, mcmCsuCfgCSULoopback=mcmCsuCfgCSULoopback, mcmT1E1CSUStatusCntlReg1=mcmT1E1CSUStatusCntlReg1, mcmT1CsuGenStatusLnCdViolations=mcmT1CsuGenStatusLnCdViolations, mcmCsuStatusInsertLossLineLength=mcmCsuStatusInsertLossLineLength, mcmT1E1CSUStatusCntlReg4=mcmT1E1CSUStatusCntlReg4, mcmT1CsuYellowAlarmClear=mcmT1CsuYellowAlarmClear, mcmT1CsuBlueAlarmClear=mcmT1CsuBlueAlarmClear, csu_status=csu_status, mcmT1E1CsuCntlRegStatusEntry=mcmT1E1CsuCntlRegStatusEntry, mcmCsuCfgZeroSuppressDisable=mcmCsuCfgZeroSuppressDisable, mcmT1E1CSUStatusifIndex=mcmT1E1CSUStatusifIndex, mcmE1CsuGenStatusFASErrors=mcmE1CsuGenStatusFASErrors, mcmT1CsuGenStatusTable=mcmT1CsuGenStatusTable, mcmT1CsuGenStatusRxElasStrFull=mcmT1CsuGenStatusRxElasStrFull, mcmE1CsuGenStatusCRC4Errors=mcmE1CsuGenStatusCRC4Errors, mcmT1E1CsuCfgifIndex=mcmT1E1CsuCfgifIndex, mcmT1E1CsuCfgLineSpeed=mcmT1E1CsuCfgLineSpeed, mcmCsuStatusifIndex=mcmCsuStatusifIndex, mcmE1CsuGenStatusAISAlarm=mcmE1CsuGenStatusAISAlarm, mcmT1E1CsuCfgTxRxCRC4=mcmT1E1CsuCfgTxRxCRC4, mcmT1E1CSUStatusCntlReg2=mcmT1E1CSUStatusCntlReg2, mcmCsuCfgTxIdle=mcmCsuCfgTxIdle, mcmT1CsuGenStatusRxLevel=mcmT1CsuGenStatusRxLevel, mcmE1CsuRedAlarmClear=mcmE1CsuRedAlarmClear, mcmE1CsuGenStatusRxCarrierLoss=mcmE1CsuGenStatusRxCarrierLoss, mcmT1E1CSUStatusCntlReg6=mcmT1E1CSUStatusCntlReg6, mcmCsuStatusFAWSync=mcmCsuStatusFAWSync, mcmE1CsuGenStatusBpvOrLnCdViolations=mcmE1CsuGenStatusBpvOrLnCdViolations, mcmT1E1CsuCfgTransmitLoopDown=mcmT1E1CsuCfgTransmitLoopDown, mcmCsuCfgTxOutOfFrame=mcmCsuCfgTxOutOfFrame, mcmT1CsuGenStatusRxPlsDensViolate=mcmT1CsuGenStatusRxPlsDensViolate, mcmT1E1CsuCfgFramerLoopback=mcmT1E1CsuCfgFramerLoopback, mcmT1E1CsuCfgPayloadLoopback=mcmT1E1CsuCfgPayloadLoopback, mcmT1E1CsuCfgTxIdleCode=mcmT1E1CsuCfgTxIdleCode, mcmT1CsuRedAlarmClear=mcmT1CsuRedAlarmClear, mcmCsuStatusInvalidBPVcounts=mcmCsuStatusInvalidBPVcounts, mcmE1CsuGenStatusRxSyncLoss=mcmE1CsuGenStatusRxSyncLoss, mcmCsuCfgOperatingMode=mcmCsuCfgOperatingMode, mcmT1E1CsuCfgTrapEnable=mcmT1E1CsuCfgTrapEnable, mcmE1CsuRemoteAlarmClear=mcmE1CsuRemoteAlarmClear, mcmT1E1CSUStatusCntlReg3=mcmT1E1CSUStatusCntlReg3, mcmCsuStatusLineStatus=mcmCsuStatusLineStatus)
