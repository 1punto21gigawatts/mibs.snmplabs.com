#
# PySNMP MIB module CIENA-CES-ICL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-ICL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
cienaGlobalSeverity, cienaGlobalMacAddress = mibBuilder.importSymbols("CIENA-GLOBAL-MIB", "cienaGlobalSeverity", "cienaGlobalMacAddress")
cienaCesNotifications, cienaCesConfig = mibBuilder.importSymbols("CIENA-SMI", "cienaCesNotifications", "cienaCesConfig")
CienaStatsClear, CienaMacAddress, CienaGlobalState = mibBuilder.importSymbols("CIENA-TC", "CienaStatsClear", "CienaMacAddress", "CienaGlobalState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, IpAddress, Unsigned32, Bits, iso, Gauge32, Counter32, Integer32, ObjectIdentity, TimeTicks, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "IpAddress", "Unsigned32", "Bits", "iso", "Gauge32", "Counter32", "Integer32", "ObjectIdentity", "TimeTicks", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "MacAddress")
cienaCesIclMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32))
cienaCesIclMIB.setRevisions(('2013-11-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesIclMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: cienaCesIclMIB.setLastUpdated('201311070000Z')
if mibBuilder.loadTexts: cienaCesIclMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: cienaCesIclMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesIclMIB.setDescription('This MIB defines the managed objects for Inter-chassis Links')
cienaCesIclMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1))
cienaCesIcl = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1))
cienaCesIclMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 2))
cienaCesIclMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 2, 0))
cienaCesIclMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 3))
cienaCesIclMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 3, 1))
cienaCesIclMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 3, 2))
cienaCesIclTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1), )
if mibBuilder.loadTexts: cienaCesIclTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclTable.setDescription('The (conceptual) table listing all the Inter-chassis Links (ICLs).')
cienaCesIclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1), ).setIndexNames((0, "CIENA-CES-ICL-MIB", "cienaCesIclIndex"))
if mibBuilder.loadTexts: cienaCesIclEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclEntry.setDescription('An entry (conceptual row) in the cienaCesIclTable.')
cienaCesIclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclIndex.setDescription('ICL Index for this entry')
cienaCesIclName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclName.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclName.setDescription('This object specifies the name of the Inter-chassis link (ICL).')
cienaCesIclRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclRemoteMacAddress.setDescription('This object specifies the Inter-chassis link remote MAC address.')
cienaCesIclType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vlan", 1), ("mplsVs", 2), ("qinqVs", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclType.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclType.setDescription('This object specifies the Inter-chassis link type.')
cienaCesIclVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclVlan.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclVlan.setDescription('This object specifies the ICL VLAN. This is valid only if cienaCesIclType is vlan(1).')
cienaCesIclVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclVsName.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclVsName.setDescription('This object specifies the ICL VS. This is valid only if cienaCesIclType is vs(2).')
cienaCesIclCfmServicePrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclCfmServicePrimary.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclCfmServicePrimary.setDescription('This object specifies primary CFM service on the ICL.')
cienaCesIclCfmServiceSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclCfmServiceSecondary.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclCfmServiceSecondary.setDescription('This object specifies the name of the Inter-chassis link (ICL).')
cienaCesIclOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 9), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclOperState.setDescription('This object specifies the ICL operational state.')
cienaCesIclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 1), ("active", 2), ("failed", 3), ("down", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclStatus.setDescription('This object specifies the status of the ICL.')
cienaCesIclAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 11), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclAdminState.setDescription('This object specifies the admin state of the ICL.')
cienaCesIclCfmFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclCfmFault.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclCfmFault.setDescription('This object specifies if CFM fault is set on the ICL.')
cienaCesIclVplsFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclVplsFault.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclVplsFault.setDescription('This object specifies if VPLS fault is set on the ICL.')
cienaCesIclRxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclRxTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclRxTimeout.setDescription('This object specifies if Rx timeout fault is set on the ICL')
cienaCesIclIntervalMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclIntervalMismatch.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclIntervalMismatch.setDescription('This object specifies if interval mismatch fault is set on the ICL')
cienaCesIclHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclHeartbeatInterval.setDescription('This object specifies the ICL heartbeat interval. The range is 1 to 30s and the default is 1s.')
cienaCesIclUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclUpTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclUpTime.setDescription('This object specifies total time for which the ICL has been operationally down.')
cienaCesIclTotalDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclTotalDownTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclTotalDownTime.setDescription('This object specifies total time for which the ICL has been operationally down.')
cienaCesIclRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclRxFrames.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclRxFrames.setDescription('This object specifies the number of CICP frames received by the ICL.')
cienaCesIclTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclTxFrames.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclTxFrames.setDescription('This object specifies the number of CICP frames transmitted by the ICL.')
cienaCesIclRxUnknownFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclRxUnknownFrames.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclRxUnknownFrames.setDescription('This object specifies the number of unknown frames received by the ICL.')
cienaCesIclRxHtbtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclRxHtbtFrames.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclRxHtbtFrames.setDescription('This object specifies the number of Hearbeat frames received by the ICL.')
cienaCesIclTxHtbtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclTxHtbtFrames.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclTxHtbtFrames.setDescription('This object specifies the number of Hearbeat frames transmitted by the ICL.')
cienaCesIclTxFailedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclTxFailedFrames.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclTxFailedFrames.setDescription('This object specifies the number of failed to transmit frames.')
cienaCesIclNumberFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclNumberFailures.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclNumberFailures.setDescription('This object specifies the number of ICL failures.')
cienaCesIclRxConfigMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesIclRxConfigMismatch.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclRxConfigMismatch.setDescription('This object specifies the number of ICL config mismatch frames received.')
cienaCesIclStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 1, 32, 2, 0, 1)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"), ("CIENA-CES-ICL-MIB", "cienaCesIclIndex"), ("CIENA-CES-ICL-MIB", "cienaCesIclName"), ("CIENA-CES-ICL-MIB", "cienaCesIclAdminState"), ("CIENA-CES-ICL-MIB", "cienaCesIclOperState"))
if mibBuilder.loadTexts: cienaCesIclStateChange.setStatus('current')
if mibBuilder.loadTexts: cienaCesIclStateChange.setDescription('This notification is sent when ICL oper state changes. Var binding cienaCesIclIndex represents the ICL index.')
mibBuilder.exportSymbols("CIENA-CES-ICL-MIB", cienaCesIclMIBGroups=cienaCesIclMIBGroups, cienaCesIclStatus=cienaCesIclStatus, cienaCesIclRxUnknownFrames=cienaCesIclRxUnknownFrames, cienaCesIclVplsFault=cienaCesIclVplsFault, cienaCesIclCfmServicePrimary=cienaCesIclCfmServicePrimary, cienaCesIclRxTimeout=cienaCesIclRxTimeout, cienaCesIclRxHtbtFrames=cienaCesIclRxHtbtFrames, cienaCesIclIndex=cienaCesIclIndex, cienaCesIclAdminState=cienaCesIclAdminState, cienaCesIclTotalDownTime=cienaCesIclTotalDownTime, cienaCesIclCfmFault=cienaCesIclCfmFault, cienaCesIclRemoteMacAddress=cienaCesIclRemoteMacAddress, cienaCesIclEntry=cienaCesIclEntry, cienaCesIclMIBConformance=cienaCesIclMIBConformance, cienaCesIclMIB=cienaCesIclMIB, cienaCesIclRxFrames=cienaCesIclRxFrames, cienaCesIclIntervalMismatch=cienaCesIclIntervalMismatch, cienaCesIclOperState=cienaCesIclOperState, cienaCesIclMIBNotificationPrefix=cienaCesIclMIBNotificationPrefix, cienaCesIclVsName=cienaCesIclVsName, cienaCesIclTable=cienaCesIclTable, cienaCesIclCfmServiceSecondary=cienaCesIclCfmServiceSecondary, cienaCesIclMIBNotifications=cienaCesIclMIBNotifications, cienaCesIcl=cienaCesIcl, cienaCesIclTxFrames=cienaCesIclTxFrames, cienaCesIclNumberFailures=cienaCesIclNumberFailures, PYSNMP_MODULE_ID=cienaCesIclMIB, cienaCesIclMIBObjects=cienaCesIclMIBObjects, cienaCesIclHeartbeatInterval=cienaCesIclHeartbeatInterval, cienaCesIclVlan=cienaCesIclVlan, cienaCesIclUpTime=cienaCesIclUpTime, cienaCesIclTxHtbtFrames=cienaCesIclTxHtbtFrames, cienaCesIclTxFailedFrames=cienaCesIclTxFailedFrames, cienaCesIclName=cienaCesIclName, cienaCesIclType=cienaCesIclType, cienaCesIclRxConfigMismatch=cienaCesIclRxConfigMismatch, cienaCesIclStateChange=cienaCesIclStateChange, cienaCesIclMIBCompliances=cienaCesIclMIBCompliances)
