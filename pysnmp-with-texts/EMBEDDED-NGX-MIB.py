#
# PySNMP MIB module EMBEDDED-NGX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EMBEDDED-NGX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:02:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Counter32, MibIdentifier, ObjectIdentity, IpAddress, enterprises, Gauge32, Unsigned32, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Counter32", "MibIdentifier", "ObjectIdentity", "IpAddress", "enterprises", "Gauge32", "Unsigned32", "Counter64", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

sofaware = MibIdentifier((1, 3, 6, 1, 4, 1, 6983))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1))
swHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 1))
swStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 2))
swLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 3))
swFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 4))
swMem = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 5))
swAV = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 6))
swFW = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 7))
swWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 8))
swHA = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 9))
swGWType = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10))
swHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: swHardwareVersion.setDescription('Hardware version')
swHardwareType = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareType.setStatus('mandatory')
if mibBuilder.loadTexts: swHardwareType.setDescription('Gateway type')
swStorageConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 2, 1))
swStorageFirm = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 2, 2))
swStorageCF = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 2, 3))
swStorageConfigTotal = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStorageConfigTotal.setStatus('mandatory')
if mibBuilder.loadTexts: swStorageConfigTotal.setDescription('Total configuration space in megabytes')
swStorageConfigFree = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStorageConfigFree.setStatus('mandatory')
if mibBuilder.loadTexts: swStorageConfigFree.setDescription('Free configuration space in megabytes')
swStorageFirmTotal = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStorageFirmTotal.setStatus('mandatory')
if mibBuilder.loadTexts: swStorageFirmTotal.setDescription('Total firmware space in megabytes')
swStorageFirmFree = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStorageFirmFree.setStatus('mandatory')
if mibBuilder.loadTexts: swStorageFirmFree.setDescription('Free firmware space in megabytes')
swStorageCFTotal = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStorageCFTotal.setStatus('mandatory')
if mibBuilder.loadTexts: swStorageCFTotal.setDescription('Total storage card space in megabytes')
swStorageCFFree = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStorageCFFree.setStatus('mandatory')
if mibBuilder.loadTexts: swStorageCFFree.setDescription('Free storage card space in megabytes')
swLicenseMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLicenseMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swLicenseMacAddress.setDescription('Gateway primary MAC address')
swLicenseProductKey = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLicenseProductKey.setStatus('mandatory')
if mibBuilder.loadTexts: swLicenseProductKey.setDescription('Currently installed Product Key')
swLicenseProductName = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLicenseProductName.setStatus('mandatory')
if mibBuilder.loadTexts: swLicenseProductName.setDescription('Currently installed Product Key description')
swLicenseUsedNodes = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLicenseUsedNodes.setStatus('mandatory')
if mibBuilder.loadTexts: swLicenseUsedNodes.setDescription('Currently used nodes')
swFirmwareRunning = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareRunning.setStatus('mandatory')
if mibBuilder.loadTexts: swFirmwareRunning.setDescription('Currently running firmware version')
swFirmwarePrimary = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwarePrimary.setStatus('mandatory')
if mibBuilder.loadTexts: swFirmwarePrimary.setDescription('Primary firmware version')
swFirmwareBackup = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareBackup.setStatus('mandatory')
if mibBuilder.loadTexts: swFirmwareBackup.setDescription('Backup firmware version')
swFirmwareBootcodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareBootcodeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: swFirmwareBootcodeVersion.setDescription('Bootloader version')
swFirmwareDebugMode = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareDebugMode.setStatus('mandatory')
if mibBuilder.loadTexts: swFirmwareDebugMode.setDescription('Running in debug mode')
swMemRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 5, 1))
swMemDFA = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 5, 2))
swMemRamFree = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemRamFree.setStatus('mandatory')
if mibBuilder.loadTexts: swMemRamFree.setDescription('Amount of free RAM space in KB')
swMemRamTotal = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemRamTotal.setStatus('mandatory')
if mibBuilder.loadTexts: swMemRamTotal.setDescription('Total RAM space in KB')
swMemDfaFree = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemDfaFree.setStatus('mandatory')
if mibBuilder.loadTexts: swMemDfaFree.setDescription('Amount of free DFA space in KB')
swMemDfaTotal = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemDfaTotal.setStatus('mandatory')
if mibBuilder.loadTexts: swMemDfaTotal.setDescription('Total RAM space in KB')
swMemDfaTest = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 5, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemDfaTest.setStatus('mandatory')
if mibBuilder.loadTexts: swMemDfaTest.setDescription('DFA self test results')
swUserMemFree = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUserMemFree.setStatus('mandatory')
if mibBuilder.loadTexts: swUserMemFree.setDescription('User memory free in KB')
swKernelMemFree = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swKernelMemFree.setStatus('mandatory')
if mibBuilder.loadTexts: swKernelMemFree.setDescription('Kernel memory free in KB')
swFwMEMFree = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFwMEMFree.setStatus('mandatory')
if mibBuilder.loadTexts: swFwMEMFree.setDescription('Firewall memory free in KB')
swAvMain = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAvMain.setStatus('mandatory')
if mibBuilder.loadTexts: swAvMain.setDescription('Main antivirus database version')
swAvDaily = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAvDaily.setStatus('mandatory')
if mibBuilder.loadTexts: swAvDaily.setDescription('Daily antivirus database version')
swAvStatus = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAvStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swAvStatus.setDescription('VStream Antivirus engine status')
swAvNextUpdate = MibScalar((1, 3, 6, 1, 4, 1, 6983, 1, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAvNextUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: swAvNextUpdate.setDescription('VStream Antivirus next update')
swFwActiveComputersTable = MibTable((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1), )
if mibBuilder.loadTexts: swFwActiveComputersTable.setStatus('mandatory')
if mibBuilder.loadTexts: swFwActiveComputersTable.setDescription('Table for active computers')
swFwActiveComputerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1), ).setIndexNames((0, "EMBEDDED-NGX-MIB", "swActCompNetwork"))
if mibBuilder.loadTexts: swFwActiveComputerEntry.setStatus('mandatory')
swActCompNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompNetwork.setDescription('Network this host is connected to')
swActCompIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompIpAddress.setDescription('Host IP address')
swActCompMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompMac.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompMac.setDescription('Host MAC address')
swActCompType = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompType.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompType.setDescription('Host type')
swActCompName = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompName.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompName.setDescription('Host name if known')
swActCompLicense = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompLicense.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompLicense.setDescription('Host license status')
swActCompAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompAuthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompAuthStatus.setDescription('Host authentication status')
swActCompAuthUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompAuthUsername.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompAuthUsername.setDescription('Current Secure Hotspot username')
swActCompAuthSessionExpiresTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 7, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swActCompAuthSessionExpiresTime.setStatus('mandatory')
if mibBuilder.loadTexts: swActCompAuthSessionExpiresTime.setDescription('Expiration time for the current Hotspot session')
swWirelessStationsTable = MibTable((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1), )
if mibBuilder.loadTexts: swWirelessStationsTable.setStatus('mandatory')
if mibBuilder.loadTexts: swWirelessStationsTable.setDescription('Wireless Stations')
swWirelessStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1), ).setIndexNames((0, "EMBEDDED-NGX-MIB", "swWStationMac"))
if mibBuilder.loadTexts: swWirelessStationEntry.setStatus('mandatory')
swWStationMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationMac.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationMac.setDescription('Station MAC Address')
swWStationSignalDb = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationSignalDb.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationSignalDb.setDescription('Station signal strength in dB')
swWStationQos = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationQos.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationQos.setDescription('WMM mode')
swWStationXr = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationXr.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationXr.setDescription('Extended Range mode')
swWStationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationRate.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationRate.setDescription('Current transmission rate')
swWStationCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationCipher.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationCipher.setDescription('Current cipher')
swWStationRxFramesOk = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationRxFramesOk.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationRxFramesOk.setDescription('Count of frames received without error')
swWStationRxFramesManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationRxFramesManagement.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationRxFramesManagement.setDescription('Count of management frames received')
swWStationRxFramesControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationRxFramesControl.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationRxFramesControl.setDescription('Count of control frames received')
swWStationRxFramesErrorFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationRxFramesErrorFrame.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationRxFramesErrorFrame.setDescription('Count of frames received with error')
swWStationRxRetryRation = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationRxRetryRation.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationRxRetryRation.setDescription('Percentage of received retried frames')
swWStationRxDupRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationRxDupRatio.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationRxDupRatio.setDescription('Percentage of duplicate frames received')
swWStationTxFramesOk = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationTxFramesOk.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationTxFramesOk.setDescription('Count of frames transmitted successfully')
swWStationTxFramesManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationTxFramesManagement.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationTxFramesManagement.setDescription('Count of management frames transmitted')
swWStationTxFramesError = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationTxFramesError.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationTxFramesError.setDescription('Count of errors during frame transmission')
swWStationTxFailRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationTxFailRatio.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationTxFailRatio.setDescription('Failed frame rate in percentage')
swWStationTxPacketErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 8, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swWStationTxPacketErrorRatio.setStatus('mandatory')
if mibBuilder.loadTexts: swWStationTxPacketErrorRatio.setDescription('Packet error rate in percentage')
swVirtualIpTable = MibTable((1, 3, 6, 1, 4, 1, 6983, 1, 9, 1), )
if mibBuilder.loadTexts: swVirtualIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: swVirtualIpTable.setDescription('High Availability Virtual IP table')
swVirtualIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6983, 1, 9, 1, 1), ).setIndexNames((0, "EMBEDDED-NGX-MIB", "swVirtualIpAddr"))
if mibBuilder.loadTexts: swVirtualIpEntry.setStatus('mandatory')
swVirtualIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVirtualIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: swVirtualIpAddr.setDescription('High Availability Virtual IP')
swVirtualIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6983, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVirtualIpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swVirtualIpStatus.setDescription('High Availability Virtual IP')
SafeAtOffice205 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 7))
SafeAtOffice210 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 9))
SafeAtOffice225 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 11))
UTM1EdgeX = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 15))
SafeAtOffice405 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 16))
SafeAtOffice410 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 17))
SafeAtOffice425 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 18))
UTM1EdgeW = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 20))
SafeAtOffice500 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 21))
SafeAtOffice500P = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 22))
UTM_1X300 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 23)).setLabel("UTM-1X300")
UTM_1X400 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 24)).setLabel("UTM-1X400")
UTM_1X1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 6983, 1, 10, 25)).setLabel("UTM-1X1000")
mibBuilder.exportSymbols("EMBEDDED-NGX-MIB", swWStationRxDupRatio=swWStationRxDupRatio, swWStationSignalDb=swWStationSignalDb, swMemDfaTotal=swMemDfaTotal, swWStationCipher=swWStationCipher, products=products, swFirmwareRunning=swFirmwareRunning, swWStationXr=swWStationXr, swStorageConfigFree=swStorageConfigFree, swFirmwareBootcodeVersion=swFirmwareBootcodeVersion, swWStationTxFailRatio=swWStationTxFailRatio, swLicense=swLicense, UTM1EdgeW=UTM1EdgeW, swWirelessStationsTable=swWirelessStationsTable, swFW=swFW, swWStationRxFramesErrorFrame=swWStationRxFramesErrorFrame, swWStationRxRetryRation=swWStationRxRetryRation, swFirmwarePrimary=swFirmwarePrimary, swWStationRate=swWStationRate, swAV=swAV, swFwMEMFree=swFwMEMFree, swWStationMac=swWStationMac, swMemRAM=swMemRAM, swHardwareVersion=swHardwareVersion, swStorageFirmTotal=swStorageFirmTotal, swStorageFirmFree=swStorageFirmFree, swFwActiveComputerEntry=swFwActiveComputerEntry, swHardware=swHardware, SafeAtOffice425=SafeAtOffice425, UTM_1X300=UTM_1X300, swVirtualIpAddr=swVirtualIpAddr, swVirtualIpEntry=swVirtualIpEntry, SafeAtOffice210=SafeAtOffice210, swWStationTxPacketErrorRatio=swWStationTxPacketErrorRatio, swActCompName=swActCompName, swActCompAuthSessionExpiresTime=swActCompAuthSessionExpiresTime, swWStationTxFramesManagement=swWStationTxFramesManagement, swAvStatus=swAvStatus, UTM1EdgeX=UTM1EdgeX, sofaware=sofaware, swStorageConfig=swStorageConfig, swFirmwareDebugMode=swFirmwareDebugMode, swActCompMac=swActCompMac, swWStationTxFramesError=swWStationTxFramesError, swHardwareType=swHardwareType, swMemRamFree=swMemRamFree, swHA=swHA, swStorage=swStorage, swMemDfaFree=swMemDfaFree, swStorageCFTotal=swStorageCFTotal, swWStationQos=swWStationQos, swVirtualIpTable=swVirtualIpTable, swLicenseUsedNodes=swLicenseUsedNodes, SafeAtOffice225=SafeAtOffice225, swWStationRxFramesOk=swWStationRxFramesOk, swGWType=swGWType, swAvNextUpdate=swAvNextUpdate, swMem=swMem, swFirmware=swFirmware, swActCompNetwork=swActCompNetwork, swVirtualIpStatus=swVirtualIpStatus, SafeAtOffice410=SafeAtOffice410, swKernelMemFree=swKernelMemFree, swFwActiveComputersTable=swFwActiveComputersTable, swAvMain=swAvMain, swStorageConfigTotal=swStorageConfigTotal, swWirelessStationEntry=swWirelessStationEntry, SafeAtOffice205=SafeAtOffice205, swActCompType=swActCompType, swMemRamTotal=swMemRamTotal, swMemDfaTest=swMemDfaTest, swActCompLicense=swActCompLicense, swMemDFA=swMemDFA, swStorageCF=swStorageCF, swActCompAuthStatus=swActCompAuthStatus, swLicenseProductName=swLicenseProductName, DisplayString=DisplayString, swActCompIpAddress=swActCompIpAddress, swFirmwareBackup=swFirmwareBackup, swWStationRxFramesControl=swWStationRxFramesControl, swStorageCFFree=swStorageCFFree, SafeAtOffice500P=SafeAtOffice500P, swWStationRxFramesManagement=swWStationRxFramesManagement, swUserMemFree=swUserMemFree, swWStationTxFramesOk=swWStationTxFramesOk, UTM_1X400=UTM_1X400, swActCompAuthUsername=swActCompAuthUsername, UTM_1X1000=UTM_1X1000, SafeAtOffice500=SafeAtOffice500, SafeAtOffice405=SafeAtOffice405, swWireless=swWireless, swLicenseMacAddress=swLicenseMacAddress, swAvDaily=swAvDaily, swLicenseProductKey=swLicenseProductKey, swStorageFirm=swStorageFirm)
