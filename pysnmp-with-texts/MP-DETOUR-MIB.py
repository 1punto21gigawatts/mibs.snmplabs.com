#
# PySNMP MIB module MP-DETOUR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MP-DETOUR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, Counter64, NotificationType, TimeTicks, NotificationType, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, mgmt, Unsigned32, iso, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "Counter64", "NotificationType", "TimeTicks", "NotificationType", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "mgmt", "Unsigned32", "iso", "Counter32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
necProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1))
datax = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3))
mmpf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13))
mmn9110 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13, 1))
mmn9120 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13, 2))
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
datax_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3)).setLabel("datax-mib")
mmpf_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13)).setLabel("mmpf-mib")
mpDetour = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130))
mpDetourTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1), )
if mibBuilder.loadTexts: mpDetourTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourTable.setDescription('This is the table type object of Detour infomation')
mpDetourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1), ).setIndexNames((0, "MP-DETOUR-MIB", "mpDetourID"))
if mibBuilder.loadTexts: mpDetourEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourEntry.setDescription('This is the table entry of mpDetourTable.')
mpDetourID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDetourID.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourID.setDescription('This object is ifIndex of observation route.')
mpObservationIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpObservationIfindex.setStatus('mandatory')
if mibBuilder.loadTexts: mpObservationIfindex.setDescription('This object is ifIndex of observation route.')
mpObservationIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("atmpp", 1), ("vlan", 2), ("lis", 3), ("outband", 4), ("trunk", 5), ("ppp", 6), ("frpp", 7), ("vlantrap", 8), ("mplspp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpObservationIfType.setStatus('mandatory')
if mibBuilder.loadTexts: mpObservationIfType.setDescription('This object is interface type of observation route.')
mpObservationIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpObservationIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpObservationIfNumber.setDescription('This object is interface number of observation route.')
mpDetourIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDetourIfindex.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourIfindex.setDescription('This object is ifIndex of detour route.')
mpDetourIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("atmpp", 1), ("vlan", 2), ("lis", 3), ("outband", 4), ("trunk", 5), ("ppp", 6), ("frpp", 7), ("vlantrap", 8), ("mplspp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDetourIfType.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourIfType.setDescription('This object is interface type of detour route.')
mpDetourIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDetourIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourIfNumber.setDescription('This object is interface number of detour route.')
mpObservationAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpObservationAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpObservationAdminStatus.setDescription('The value of this object identifies the desired administer status of this observation route.')
mpObservationOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpObservationOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpObservationOperStatus.setDescription('The value of this object identifies the desired operational status of this observation route.')
mpDiscardIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDiscardIfindex.setStatus('mandatory')
if mibBuilder.loadTexts: mpDiscardIfindex.setDescription('This object is ifIndex of discard route.')
mpDiscardIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("atmpp", 1), ("vlan", 2), ("lis", 3), ("outband", 4), ("trunk", 5), ("ppp", 6), ("frpp", 7), ("vlantrap", 8), ("mplspp", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDiscardIfType.setStatus('mandatory')
if mibBuilder.loadTexts: mpDiscardIfType.setDescription('This object is interface type of discard route.')
mpDiscardIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDiscardIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpDiscardIfNumber.setDescription('This object is interface number of discard route.')
mpDetourAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpDetourAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourAdminStatus.setDescription('The value of this object identifies the desired administer status of this detour route.')
mpDetourOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDetourOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourOperStatus.setDescription('The value of this object identifies the desired operational status of this detour route.')
mpDiscardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpDiscardAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpDiscardAdminStatus.setDescription('The value of this object identifies the desired administer status of this discard route.')
mpDiscardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDiscardOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpDiscardOperStatus.setDescription('The value of this object identifies the desired operational status of this discard route.')
mpRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpRouteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpRouteStatus.setDescription('The value of this object identifies the desired operational status of this observe route.')
mpInhibitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpInhibitMode.setStatus('mandatory')
if mibBuilder.loadTexts: mpInhibitMode.setDescription('This object is inhibit mode data.')
mpWatchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpWatchMode.setStatus('mandatory')
if mibBuilder.loadTexts: mpWatchMode.setDescription('This object is watch mode data.')
mpDetourConfigChangeTimeStamp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 2))
mpDetourConfigLastChange = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDetourConfigLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourConfigLastChange.setDescription('This object indicates the the time which configuration of the Detour data is changed.')
mpDetourStatusTimeStamp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 3))
mpDetourStatusLastChange = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 130, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpDetourStatusLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: mpDetourStatusLastChange.setDescription('This object indicates the the time which configuration of the operational status is changed.')
mibBuilder.exportSymbols("MP-DETOUR-MIB", mmpf=mmpf, mpDetourTable=mpDetourTable, mpDetourIfType=mpDetourIfType, mpDetourConfigChangeTimeStamp=mpDetourConfigChangeTimeStamp, mpObservationIfNumber=mpObservationIfNumber, mpDetourConfigLastChange=mpDetourConfigLastChange, mpWatchMode=mpWatchMode, mpObservationAdminStatus=mpObservationAdminStatus, internet=internet, dod=dod, mpObservationIfType=mpObservationIfType, mmn9110=mmn9110, mpDiscardIfNumber=mpDiscardIfNumber, mpObservationOperStatus=mpObservationOperStatus, DisplayString=DisplayString, datax_mib=datax_mib, nec=nec, mpDetourID=mpDetourID, datax=datax, mpDetourIfNumber=mpDetourIfNumber, mpInhibitMode=mpInhibitMode, mmn9120=mmn9120, mpDiscardIfindex=mpDiscardIfindex, necProduct=necProduct, enterprises=enterprises, mmpf_mib=mmpf_mib, mpObservationIfindex=mpObservationIfindex, nec_mib=nec_mib, necProductDepend=necProductDepend, mpDetourStatusTimeStamp=mpDetourStatusTimeStamp, mpDetourIfindex=mpDetourIfindex, mpDetourEntry=mpDetourEntry, org=org, mpDetourAdminStatus=mpDetourAdminStatus, mpRouteStatus=mpRouteStatus, mpDetourOperStatus=mpDetourOperStatus, mpDiscardAdminStatus=mpDiscardAdminStatus, private=private, mpDiscardIfType=mpDiscardIfType, mpDiscardOperStatus=mpDiscardOperStatus, mpDetour=mpDetour, mpDetourStatusLastChange=mpDetourStatusLastChange)
