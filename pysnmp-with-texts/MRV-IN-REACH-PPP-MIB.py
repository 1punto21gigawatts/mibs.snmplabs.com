#
# PySNMP MIB module MRV-IN-REACH-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IN-REACH-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
mrvInReachProductDivision, = mibBuilder.importSymbols("MRV-IN-REACH-PRODUCT-DIVISION-MIB", "mrvInReachProductDivision")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Unsigned32, MibIdentifier, Counter32, TimeTicks, Integer32, iso, ModuleIdentity, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Unsigned32", "MibIdentifier", "Counter32", "TimeTicks", "Integer32", "iso", "ModuleIdentity", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22))
xPppBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 1))
xPppLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 2))
xPppIpcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 3))
xPppAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 4))
xPppIpxcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 5))
xPppConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 1, 1), )
if mibBuilder.loadTexts: xPppConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigEntry.setDescription('Management information about a particular PPP.')
xPppConfigOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigOpen.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigOpen.setDescription('Determines if PPP is configured on this port.')
xPppConfigActive = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigActive.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigActive.setDescription('Determines if LCP will actively open or wait passively.')
xPppConfigDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigDefaults.setDescription("Revert to factory default PPP parameters. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' sets PPP parameters to factory defaults.")
xPppConfigRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigRestartTimer.setDescription('The number of seconds waited before retransmitting during option negotiation.')
xPppConfigConfLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigConfLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigConfLimit.setDescription('Maximum number of times a configuration request will be sent to the peer without receiving a response.')
xPppConfigFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigFailLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigFailLimit.setDescription("Maximum number of times a peer's proposed option will be NAKed before REJECTing the option.")
xPppConfigPacketLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("raw", 2), ("interpreted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigPacketLogging.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigPacketLogging.setDescription('Determines the level of packet logging to accounting on this port.')
xPppConfigKATimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigKATimer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigKATimer.setDescription('Determines the number of seconds between transmission of LCP Echo Keepalive packets.')
xPppConfigKATimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigKATimeout.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigKATimeout.setDescription('Determines the number of seconds to wait to hear LCP Echo Replies to our Echo Request Keepalive packets before giving up and shutting down the link.')
xPppStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 1, 2), )
if mibBuilder.loadTexts: xPppStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppStatusTable.setDescription('A table containing basic PPP status info.')
xPppStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppStatusEntry.setDescription('Status information about a particular PPP.')
xPppStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppStatusState.setDescription('Displays whether PPP is enabled or disabled on this port.')
xPppLinkOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOpen", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLinkOpen.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLinkOpen.setDescription('Displays open status of the link.')
xPppHdlcRxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxTotalPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcRxTotalPkts.setDescription('Total of all packets received on PPP link.')
xPppHdlcTxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcTxTotalPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcTxTotalPkts.setDescription('Total of all packets transmitted on PPP link.')
xPppHdlcRxFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcRxFrameErrs.setDescription('Number of framing errors received on PPP link.')
xPppHdlcRxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxNoBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcRxNoBuffer.setDescription('Number of times a buffer was not available to receive packet into.')
xPppHdlcTxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcTxNoBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcTxNoBuffer.setDescription('Number of times a buffer was not available to transmit a packet from.')
xPppHdlcRxBadFcs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxBadFcs.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcRxBadFcs.setDescription('Number of packets received with a bad checksum.')
xPppHdlcVJDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcVJDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcVJDiscards.setDescription('Number of packets received that failed VJ decompression.')
xPppLcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 2, 1), )
if mibBuilder.loadTexts: xPppLcpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpConfigTable.setDescription('A table containing PPP LCP specific variables for this PPP implementation.')
xPppLcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppLcpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpConfigEntry.setDescription('Management information about a particular PPP LCP session.')
xPppLcpConfigAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppLcpConfigAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpConfigAuth.setDescription('Authentication protocol used for authenticating peers.')
xPppLcpConfigChapAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("chap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppLcpConfigChapAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpConfigChapAuth.setDescription('Authentication CHAP protocol used for authenticating peers.')
xPppLcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 2, 2), )
if mibBuilder.loadTexts: xPppLcpStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTable.setDescription('A table containing PPP LCP status info.')
xPppLcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppLcpStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusEntry.setDescription('Status information about a particular PPP LCP session.')
xPppLcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("open", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusState.setStatus('deprecated')
if mibBuilder.loadTexts: xPppLcpStatusState.setDescription('The current state of LCP.')
xPppLcpStatusRxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxAuth.setDescription('The authentication protocol currently in use from the peer to us.')
xPppLcpStatusTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxAuth.setDescription('The authentication protocol currently in use from us to the peer.')
xPppLcpStatusRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxConReq.setDescription('The count of LCP Configure Requests received from the peer.')
xPppLcpStatusTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxConReq.setDescription('The count of LCP Configure Requests transmitted to the peer.')
xPppLcpStatusRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxConNak.setDescription('The count of LCP Configure Naks received from the peer.')
xPppLcpStatusTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxConNak.setDescription('The count of LCP Configure Naks transmitted to the peer.')
xPppLcpStatusRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxConAck.setDescription('The count of LCP Configure Acks received from the peer.')
xPppLcpStatusTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxConAck.setDescription('The count of LCP Configure Acks transmitted to the peer.')
xPppLcpStatusRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxConRej.setDescription('The count of LCP Configure Rejects received from the peer.')
xPppLcpStatusTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxConRej.setDescription('The count of LCP Configure Rejects transmitted to the peer.')
xPppLcpStatusRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxTrmReq.setDescription('The count of LCP Terminate Requests received from the peer.')
xPppLcpStatusTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxTrmReq.setDescription('The count of LCP Terminate Requests transmitted to the peer.')
xPppLcpStatusRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxTrmAck.setDescription('The count of LCP Terminate Acks received from the peer.')
xPppLcpStatusTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxTrmAck.setDescription('The count of LCP Terminate Acks transmitted to the peer.')
xPppLcpStatusRxEcoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxEcoReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxEcoReq.setDescription('The count of LCP Echo Requests received from the peer.')
xPppLcpStatusTxEcoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxEcoReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxEcoReq.setDescription('The count of LCP Echo Requests transmitted to the peer.')
xPppLcpStatusRxEcoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxEcoRep.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxEcoRep.setDescription('The count of LCP Echo Reply received from the peer.')
xPppLcpStatusTxEcoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxEcoRep.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxEcoRep.setDescription('The count of LCP Echo Reply transmitted to the peer.')
xPppLcpStatusRxCodRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxCodRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxCodRej.setDescription('The count of LCP Code Rejects received from the peer.')
xPppLcpStatusTxCodRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxCodRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxCodRej.setDescription('The count of LCP Code Rejects transmitted to the peer.')
xPppLcpStatusRxProRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxProRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxProRej.setDescription('The count of LCP Protocol Rejects received from the peer.')
xPppLcpStatusTxProRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxProRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxProRej.setDescription('The count of LCP Protocol Rejects transmitted to the peer.')
xPppLcpStatusState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusState2.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusState2.setDescription('The current state of LCP.')
xPppIpcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 1), )
if mibBuilder.loadTexts: xPppIpcpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigTable.setDescription('A table containing PPP IPCPspecific variables for this PPP implementation.')
xPppIpcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigEntry.setDescription('Management information about a particular PPP IPCP session.')
xPppIpcpConfigLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigLocalAddress.setDescription('IP Address of the local PPP interface.')
xPppIpcpConfigRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigRemoteAddress.setDescription('IP Address of the peer PPP interface.')
xPppIpcpConfigVJCompSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigVJCompSlots.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigVJCompSlots.setDescription('Number of slots to be used by VJ compression.')
xPppIpcpConfigRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigRangeStart.setDescription('Start of acceptable address range in which the negotiated remote IP address must fall.')
xPppIpcpConfigRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigRangeEnd.setDescription('End of acceptable address range in which the negotiated remote IP address must fall.')
xPppIpcpConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigState.setDescription('Controls whether IPCP is allowed to run on this port.')
xPppIpcpConfigLocalRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeStart.setDescription('Start of acceptable address range in which the negotiated local IP address must fall.')
xPppIpcpConfigLocalRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeEnd.setDescription('End of acceptable address range in which the negotiated local IP address must fall.')
xPppIpcpConfigPppIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 9), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigPppIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigPppIpMask.setDescription("The subnet mask to use for a PPP operation on the port. Corresponds directly to the value labeled 'IP Mask:' in the PPP PORT IP CHARACTERISTICS display.")
xPppIpcpAsyncConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 2), )
if mibBuilder.loadTexts: xPppIpcpAsyncConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpAsyncConfigTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppIpcpAsyncConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpAsyncConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpAsyncConfigEntry.setDescription('Management information about a particular PPP Asynchronous LCP.')
xPppIpcpAsyncConfigBrdcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpAsyncConfigBrdcast.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpAsyncConfigBrdcast.setDescription('Determines whether to forward an IP Broadcast or not.')
xPppIpcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 3), )
if mibBuilder.loadTexts: xPppIpcpStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusTable.setDescription('A table containing basic PPP IPCP status info.')
xPppIpcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusEntry.setDescription('Status information about a particular PPP IPCP session.')
xPppIpcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("open", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusState.setStatus('deprecated')
if mibBuilder.loadTexts: xPppIpcpStatusState.setDescription('The current state of IPCP.')
xPppIpcpStatusLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusLocalAddress.setDescription('The IP Address currently being used by the local IPCP.')
xPppIpcpStatusRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusRemoteAddress.setDescription('The IP Address currently being used by the Remote IPCP.')
xPppIpcpRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxPkts.setDescription('Total number of IP packets received.')
xPppIpcpTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxPkts.setDescription('Total number of IP packets transmitted.')
xPppIpcpRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxConReq.setDescription('The count of IPCP Configure Requests received from the peer.')
xPppIpcpTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxConReq.setDescription('The count of IPCP Configure Requests transmitted to the peer.')
xPppIpcpRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxConNak.setDescription('The count of IPCP Configure Naks received from the peer.')
xPppIpcpTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxConNak.setDescription('The count of IPCP Configure Naks transmitted to the peer.')
xPppIpcpRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxConAck.setDescription('The count of IPCP Configure Acks received from the peer.')
xPppIpcpTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxConAck.setDescription('The count of IPCP Configure Acks transmitted to the peer.')
xPppIpcpRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxConRej.setDescription('The count of IPCP Configure Rejects received from the peer.')
xPppIpcpTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxConRej.setDescription('The count of IPCP Configure Rejects transmitted to the peer.')
xPppIpcpRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxTrmReq.setDescription('The count of IPCP Terminate Requests received from the peer.')
xPppIpcpTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxTrmReq.setDescription('The count of IPCP Terminate Requests transmitted to the peer.')
xPppIpcpRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxTrmAck.setDescription('The count of IPCP Terminate Acks received from the peer.')
xPppIpcpTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxTrmAck.setDescription('The count of IPCP Terminate Acks transmitted to the peer.')
xPppIpcpStatusState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusState2.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusState2.setDescription('The current state of IPCP.')
xPppPapPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 22, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppPapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: xPppPapPassword.setDescription('The password to use for PAP authentication.')
xPppAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 4, 2), )
if mibBuilder.loadTexts: xPppAuthConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthConfigTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppAuthConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthConfigEntry.setDescription('Management information about a particular PPP.')
xPppAuthChapChallengeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthChapChallengeTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthChapChallengeTimer.setDescription('Length of time in minutes between CHAP reauthentication challenges. A value of zero disables the timer.')
xPppAuthPapConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("kerberos", 3), ("radius", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthPapConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthPapConfigState.setDescription('Controls the type of Pap authentication required for this port, and whether it is combined with another authentication mechanism such as Radius.')
xPppAuthChapConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("radius", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthChapConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthChapConfigState.setDescription('Controls the type of Chap authentication required for this port, and whether it is combined with another authentication mechanism such as Radius.')
xPppAuthStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 4, 3), )
if mibBuilder.loadTexts: xPppAuthStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthStatusTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppAuthStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppAuthStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthStatusEntry.setDescription('Management information about a particular PPP.')
xPppPapStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("initial", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("reqSent", 5), ("ackRecv", 6), ("ackSent", 7), ("opened", 8), ("kerberosReqSent", 9), ("kerberosStopped", 10), ("kerberosAckRecv", 11), ("kerberosAckSent", 12), ("papKerberosOpened", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppPapStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppPapStatusState.setDescription('The current state of PAP.')
xPppChapStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("challengeWait", 2), ("challengeSent", 3), ("responseSent", 4), ("challengeSentResponseSent", 5), ("challengeSentAckRecv", 6), ("open", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppChapStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppChapStatusState.setDescription('The current state of CHAP.')
xPppChapPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 22, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppChapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: xPppChapPassword.setDescription('The password to use for CHAP authentication.')
xPppIpxcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 1), )
if mibBuilder.loadTexts: xPppIpxcpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpConfigTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppIpxcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpConfigEntry.setDescription('Management information about a particular PPP.')
xPppIpxcpCipxCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpxcpCipxCompression.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxCompression.setDescription('Controls whether CIPX compression will be negotiated on the interface.')
xPppIpxcpConfigRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpxcpConfigRemoteNode.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpConfigRemoteNode.setDescription('The IPX Node address which can be offered to the peer if it does not know a Node number but requires one.')
xPppIpxcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 2), )
if mibBuilder.loadTexts: xPppIpxcpStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpStatusTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppIpxcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpStatusEntry.setDescription('Management information about a particular PPP.')
xPppIpxcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpStatusState.setDescription('The current state of IPXCP.')
xPppIpxcpCipxInCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxInCompression.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxInCompression.setDescription('The current state of CIPX compression inbound.')
xPppIpxcpCipxOutCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxOutCompression.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxOutCompression.setDescription('The current state of CIPX compression outbound.')
xPppIpxcpCipxInSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxInSlots.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxInSlots.setDescription('The current number of CIPX compression inbound slots.')
xPppIpxcpCipxOutSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxOutSlots.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxOutSlots.setDescription('The current number of CIPX compression outbound slots.')
xPppIpxcpStatusRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpStatusRemoteNode.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpStatusRemoteNode.setDescription('The IPX Node address currently being used by the Remote IPX peer.')
xPppIpxcpCountersTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 3), )
if mibBuilder.loadTexts: xPppIpxcpCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCountersTable.setDescription('A table containing basic PPP IPXCP status info.')
xPppIpxcpCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCountersEntry.setDescription('Counter information about a particular PPP IPXCP session.')
xPppIpxcpRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxConReq.setDescription('The count of IPXCP Configure Requests received from the peer.')
xPppIpxcpTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxConReq.setDescription('The count of IPXCP Configure Requests transmitted to the peer.')
xPppIpxcpRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxConNak.setDescription('The count of IPXCP Configure Naks received from the peer.')
xPppIpxcpTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxConNak.setDescription('The count of IPXCP Configure Naks transmitted to the peer.')
xPppIpxcpRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxConAck.setDescription('The count of IPXCP Configure Acks received from the peer.')
xPppIpxcpTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxConAck.setDescription('The count of IPXCP Configure Acks transmitted to the peer.')
xPppIpxcpRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxConRej.setDescription('The count of IPXCP Configure Rejects received from the peer.')
xPppIpxcpTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxConRej.setDescription('The count of IPXCP Configure Rejects transmitted to the peer.')
xPppIpxcpRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxTrmReq.setDescription('The count of IPXCP Terminate Requests received from the peer.')
xPppIpxcpTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxTrmReq.setDescription('The count of IPXCP Terminate Requests transmitted to the peer.')
xPppIpxcpRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxTrmAck.setDescription('The count of IPXCP Terminate Acks received from the peer.')
xPppIpxcpTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxTrmAck.setDescription('The count of IPXCP Terminate Acks transmitted to the peer.')
mibBuilder.exportSymbols("MRV-IN-REACH-PPP-MIB", xPppHdlcTxTotalPkts=xPppHdlcTxTotalPkts, xPppIpxcp=xPppIpxcp, xPppIpxcpTxTrmReq=xPppIpxcpTxTrmReq, xPppLcpStatusRxConAck=xPppLcpStatusRxConAck, xPppLcpStatusTxConAck=xPppLcpStatusTxConAck, xPppHdlcRxTotalPkts=xPppHdlcRxTotalPkts, xPppLcpStatusTxTrmAck=xPppLcpStatusTxTrmAck, xPppIpxcpRxConRej=xPppIpxcpRxConRej, xPppIpcpConfigTable=xPppIpcpConfigTable, xPppIpxcpTxConNak=xPppIpxcpTxConNak, xPppLcpStatusRxConNak=xPppLcpStatusRxConNak, xPppIpxcpCipxInSlots=xPppIpxcpCipxInSlots, xPppLinkOpen=xPppLinkOpen, xPppLcpStatusState2=xPppLcpStatusState2, xPppConfigDefaults=xPppConfigDefaults, xPppIpcpTxTrmAck=xPppIpcpTxTrmAck, xPppIpxcpTxConReq=xPppIpxcpTxConReq, xPppLcpStatusRxCodRej=xPppLcpStatusRxCodRej, xPppIpcpConfigRangeEnd=xPppIpcpConfigRangeEnd, xPppLcpConfigTable=xPppLcpConfigTable, xPppAuthPapConfigState=xPppAuthPapConfigState, xPppAuthChapConfigState=xPppAuthChapConfigState, xPppLcpStatusTxEcoReq=xPppLcpStatusTxEcoReq, xPppIpxcpCipxInCompression=xPppIpxcpCipxInCompression, xPppIpcpConfigVJCompSlots=xPppIpcpConfigVJCompSlots, xPppStatusState=xPppStatusState, xPppIpcpConfigLocalRangeStart=xPppIpcpConfigLocalRangeStart, xPppLcpConfigChapAuth=xPppLcpConfigChapAuth, xPppIpxcpRxConReq=xPppIpxcpRxConReq, xPppIpcpTxPkts=xPppIpcpTxPkts, xPppConfigPacketLogging=xPppConfigPacketLogging, xPppIpcpStatusRemoteAddress=xPppIpcpStatusRemoteAddress, xPppAuthConfigEntry=xPppAuthConfigEntry, xPppIpxcpConfigTable=xPppIpxcpConfigTable, xPppConfigConfLimit=xPppConfigConfLimit, xPppLcpStatusTable=xPppLcpStatusTable, xPppIpxcpTxTrmAck=xPppIpxcpTxTrmAck, xPppIpxcpTxConRej=xPppIpxcpTxConRej, xPppIpcpStatusTable=xPppIpcpStatusTable, xPppIpxcpRxTrmAck=xPppIpxcpRxTrmAck, xPppIpxcpConfigRemoteNode=xPppIpxcpConfigRemoteNode, xPppLcpStatusRxTrmReq=xPppLcpStatusRxTrmReq, xPppLcpStatusTxConNak=xPppLcpStatusTxConNak, xPppStatusEntry=xPppStatusEntry, xPppIpxcpStatusTable=xPppIpxcpStatusTable, xPppIpcpStatusEntry=xPppIpcpStatusEntry, xPppIpxcpTxConAck=xPppIpxcpTxConAck, xPppIpcpRxConAck=xPppIpcpRxConAck, xPppIpxcpConfigEntry=xPppIpxcpConfigEntry, xPppLcpStatusTxEcoRep=xPppLcpStatusTxEcoRep, xPppIpcpRxConRej=xPppIpcpRxConRej, xPppLcpStatusRxEcoReq=xPppLcpStatusRxEcoReq, xPppPapStatusState=xPppPapStatusState, xPppIpcpRxPkts=xPppIpcpRxPkts, xPppIpxcpCountersEntry=xPppIpxcpCountersEntry, xPppIpcpConfigRangeStart=xPppIpcpConfigRangeStart, xPppLcpStatusEntry=xPppLcpStatusEntry, xPppIpcpTxConNak=xPppIpcpTxConNak, xPppIpxcpCountersTable=xPppIpxcpCountersTable, xPppIpcpAsyncConfigTable=xPppIpcpAsyncConfigTable, xPppLcpStatusState=xPppLcpStatusState, xPppIpcpAsyncConfigBrdcast=xPppIpcpAsyncConfigBrdcast, xPppIpxcpRxConAck=xPppIpxcpRxConAck, xPppChapPassword=xPppChapPassword, xPppIpxcpRxConNak=xPppIpxcpRxConNak, xPppLcpStatusTxConReq=xPppLcpStatusTxConReq, xPppLcpStatusTxCodRej=xPppLcpStatusTxCodRej, xPppConfigFailLimit=xPppConfigFailLimit, xPppLcpStatusRxConReq=xPppLcpStatusRxConReq, xPppIpxcpCipxOutCompression=xPppIpxcpCipxOutCompression, xPppIpcpStatusState=xPppIpcpStatusState, xPppIpcpConfigRemoteAddress=xPppIpcpConfigRemoteAddress, xPppBasic=xPppBasic, xPppLcpStatusTxAuth=xPppLcpStatusTxAuth, xPppAuth=xPppAuth, xPppIpxcpStatusEntry=xPppIpxcpStatusEntry, xPppIpcpConfigEntry=xPppIpcpConfigEntry, xPppStatusTable=xPppStatusTable, xPppHdlcRxNoBuffer=xPppHdlcRxNoBuffer, xPppLcpStatusTxTrmReq=xPppLcpStatusTxTrmReq, xPppAuthStatusEntry=xPppAuthStatusEntry, xPppLcpStatusTxProRej=xPppLcpStatusTxProRej, xPppIpcpStatusLocalAddress=xPppIpcpStatusLocalAddress, xPppIpcp=xPppIpcp, xPppIpcpTxConReq=xPppIpcpTxConReq, xPpp=xPpp, xPppIpcpRxTrmAck=xPppIpcpRxTrmAck, xPppConfigRestartTimer=xPppConfigRestartTimer, xPppIpxcpCipxOutSlots=xPppIpxcpCipxOutSlots, xPppIpxcpStatusRemoteNode=xPppIpxcpStatusRemoteNode, xPppIpcpStatusState2=xPppIpcpStatusState2, xPppLcpConfigAuth=xPppLcpConfigAuth, xPppIpcpConfigLocalRangeEnd=xPppIpcpConfigLocalRangeEnd, xPppLcpStatusRxEcoRep=xPppLcpStatusRxEcoRep, xPppLcpStatusRxConRej=xPppLcpStatusRxConRej, xPppHdlcTxNoBuffer=xPppHdlcTxNoBuffer, xPppConfigTable=xPppConfigTable, xPppAuthChapChallengeTimer=xPppAuthChapChallengeTimer, xPppLcpStatusTxConRej=xPppLcpStatusTxConRej, xPppIpcpAsyncConfigEntry=xPppIpcpAsyncConfigEntry, xPppLcpStatusRxTrmAck=xPppLcpStatusRxTrmAck, xPppIpcpRxConReq=xPppIpcpRxConReq, xPppPapPassword=xPppPapPassword, xPppHdlcRxFrameErrs=xPppHdlcRxFrameErrs, xPppLcpStatusRxAuth=xPppLcpStatusRxAuth, xPppChapStatusState=xPppChapStatusState, xPppIpcpConfigPppIpMask=xPppIpcpConfigPppIpMask, xPppConfigEntry=xPppConfigEntry, xPppIpcpRxConNak=xPppIpcpRxConNak, xPppHdlcVJDiscards=xPppHdlcVJDiscards, xPppIpxcpStatusState=xPppIpxcpStatusState, xPppAuthConfigTable=xPppAuthConfigTable, xPppIpcpConfigState=xPppIpcpConfigState, xPppIpcpTxConAck=xPppIpcpTxConAck, xPppIpcpTxConRej=xPppIpcpTxConRej, xPppIpcpRxTrmReq=xPppIpcpRxTrmReq, xPppLcpStatusRxProRej=xPppLcpStatusRxProRej, xPppIpcpTxTrmReq=xPppIpcpTxTrmReq, xPppConfigKATimeout=xPppConfigKATimeout, xPppConfigActive=xPppConfigActive, xPppIpcpConfigLocalAddress=xPppIpcpConfigLocalAddress, xPppConfigOpen=xPppConfigOpen, xPppIpxcpCipxCompression=xPppIpxcpCipxCompression, xPppLcp=xPppLcp, xPppLcpConfigEntry=xPppLcpConfigEntry, xPppConfigKATimer=xPppConfigKATimer, xPppIpxcpRxTrmReq=xPppIpxcpRxTrmReq, xPppHdlcRxBadFcs=xPppHdlcRxBadFcs, xPppAuthStatusTable=xPppAuthStatusTable)
