#
# PySNMP MIB module CISCO-MMAIL-DIAL-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MMAIL-DIAL-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cCallHistoryIndex, = mibBuilder.importSymbols("CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CvcGUid, = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcGUid")
callActiveIndex, AbsoluteCounter32, callActiveSetupTime = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "callActiveIndex", "AbsoluteCounter32", "callActiveSetupTime")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Integer32, Counter32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, ModuleIdentity, ObjectIdentity, Gauge32, iso, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Counter32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "ModuleIdentity", "ObjectIdentity", "Gauge32", "iso", "Unsigned32", "TimeTicks")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoMediaMailDialControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 102))
ciscoMediaMailDialControlMIB.setRevisions(('2002-02-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMediaMailDialControlMIB.setRevisionsDescriptions(('Fix for CSCdu86743 and CSCdu86778. The change include: - DEFVAL for cmmIpPeerCfgDeliStatNotification - Add dsnMdn option for cmmIpCallActiveNotification and cmmIpCallHistoryNotification - Object descriptor name change due to length exceeding 32. These are : cmmIpPeerCfgDeliStatNotification cmmIpCallHistoryAcceptMimeTypes cmmIpCallHistoryDiscdMimeTypes - All the lines exceed length 72 are being rewitten ',))
if mibBuilder.loadTexts: ciscoMediaMailDialControlMIB.setLastUpdated('200202250000Z')
if mibBuilder.loadTexts: ciscoMediaMailDialControlMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMediaMailDialControlMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice@cisco.com')
if mibBuilder.loadTexts: ciscoMediaMailDialControlMIB.setDescription('This MIB module enhances the IETF Dial Control MIB (RFC2128) for providing management of dial peers on both a circuit-switched telephony network, and a mail server on IP network. ')
class CmmImgResolution(TextualConvention, Integer32):
    reference = 'RFC2301: Section 4.5.2 Encoding and Resolution.'
    description = 'Represents possible image resolution in Media Mail. standard - standard resolution. fine - fine resolution. superFine - super fine resolution. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4))
    namedValues = NamedValues(("standard", 2), ("fine", 3), ("superFine", 4))

class CmmImgResolutionOrTransparent(TextualConvention, Integer32):
    reference = 'RFC2301: Section 4.5.2 Encoding and Resolution.'
    description = 'Represents possible image resolution and transparent mode. transparent - pass through mode. standard - standard resolution. fine - fine resolution. superFine - super fine resolution. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("transparent", 1), ("standard", 2), ("fine", 3), ("superFine", 4))

class CmmImgEncoding(TextualConvention, Integer32):
    reference = 'RFC2301: Section 1.3 Overview of this draft. ITU-T Rec. T.4 (MH - Modified Huffman). ITU-T Rec. T.4 (MR - Modified READ). ITU-T Rec. T.6 (MRR - Modified MR). '
    description = 'Represents possible image encoding types in Media Mail. modifiedHuffman - Modified Huffman (MH). modifiedREAD - Modified READ (MR). modifiedMR - Modified Modified READ (MMR). '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3, 4))
    namedValues = NamedValues(("modifiedHuffman", 2), ("modifiedREAD", 3), ("modifiedMR", 4))

class CmmImgEncodingOrTransparent(TextualConvention, Integer32):
    reference = 'RFC2301: Section 1.3 Overview of this draft. ITU-T Rec. T.4 (MH - Modified Huffman). ITU-T Rec. T.4 (MR - Modified READ). ITU-T Rec. T.6 (MRR - Modified MR). '
    description = 'Represents possible image encoding types and transparent mode. transparent - pass through mode. modifiedHuffman - Modified Huffman (MH). modifiedREAD - Modified READ (MR). modifiedMR - Modified Modified READ (MMR). '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("transparent", 1), ("modifiedHuffman", 2), ("modifiedREAD", 3), ("modifiedMR", 4))

class CmmFaxHeadingString(DisplayString):
    description = "The regular expression for the FAX heading at the top of cover page or text page. The regular expression syntax used in this object is the same as that used by the UNIX grep program. The embedded pattern substitutions are defined as follows: $p$ - translates to the page number as passed by FAX processing. $a$ - translates to human readable year-month-day that is defined in DateAndTime of SNMPv2-TC. $d$ - translates to the called party address. $s$ - translates to the calling party address. $t$ - translates to the time of transmission of the first FAX/image page. The human readable format is defined as year-month-day,hour:minutes:second in the DateAndTime of SNMPv2-TC. Example, 'Date:$a$' means replacing the heading of a FAX page with the the string and date substitution. 'From $s$ Broadcast Service' means replacing the heading of FAX page with the the string and calling party address substitution. 'Page:$p$' means replacing the heading of a FAX page with the string and page number substitution. "
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 80)

cmmdcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 102, 1))
cmmPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1))
cmmCallActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2))
cmmCallHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3))
cmmFaxGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4))
cmmIpPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1, 1), )
if mibBuilder.loadTexts: cmmIpPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: cmmIpPeerCfgTable.setDescription('The table contains the Media mail peer specific information that is required to accept mail connection or to which it will connect them via IP network with the specified session protocol in cmmIpPeerCfgSessionProtocol. ')
cmmIpPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cmmIpPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cmmIpPeerCfgEntry.setDescription("A single Media Mail specific Peer. One entry per media mail encapsulation. The entry is created when its associated 'mediaMailOverIp(139)' encapsulation ifEntry is created. This entry is deleted when its associated ifEntry is deleted. ")
cmmIpPeerCfgSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("smtp", 1))).clone('smtp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmIpPeerCfgSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cmmIpPeerCfgSessionProtocol.setDescription('The object specifies the session protocol to be used for sending/receiving media mail between local and remote mail sever via IP network. smtp - Simple Mail Transfer Protocol. ')
cmmIpPeerCfgSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmIpPeerCfgSessionTarget.setStatus('current')
if mibBuilder.loadTexts: cmmIpPeerCfgSessionTarget.setDescription('The object specifies the session target of the peer. Session Targets definitions: The session target has the syntax used by the IETF service location protocol. The syntax is as follows: mapping-type:type-specific-syntax The mapping-type specifies a scheme for mapping the matching dial string to a session target. The type-specific-syntax is exactly that, something that the particular mapping scheme can understand. For example, Session target mailto:+$d$@fax.cisco.com The valid Mapping type definitions for the peer are as follows: mailto - Syntax: mailto:w@x.y.z ')
cmmIpPeerCfgImgEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1, 1, 1, 3), CmmImgEncodingOrTransparent().clone('transparent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmIpPeerCfgImgEncodingType.setStatus('current')
if mibBuilder.loadTexts: cmmIpPeerCfgImgEncodingType.setDescription("This object specifies the image encoding conversion for outgoing mail connection to mail server. If the value of this object is transparent, it means 'pass through' without encoding conversion. ")
cmmIpPeerCfgImgResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1, 1, 1, 4), CmmImgResolutionOrTransparent().clone('transparent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmIpPeerCfgImgResolution.setStatus('current')
if mibBuilder.loadTexts: cmmIpPeerCfgImgResolution.setDescription("This object specifies the image resolution conversion for outgoing mail connection to mail server. If the value of this object is transparent, it means 'pass through' without resolution conversion. ")
cmmIpPeerCfgMsgDispoNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmIpPeerCfgMsgDispoNotification.setStatus('current')
if mibBuilder.loadTexts: cmmIpPeerCfgMsgDispoNotification.setDescription('This object specifies the Request of Message Disposition Notification. true - Request Message Disposition Notification. false - No Message Disposition Notification. ')
cmmIpPeerCfgDeliStatNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 1, 1, 1, 6), Bits().clone(namedValues=NamedValues(("success", 0), ("failure", 1), ("delayed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmIpPeerCfgDeliStatNotification.setStatus('current')
if mibBuilder.loadTexts: cmmIpPeerCfgDeliStatNotification.setDescription('This object specifies the Request of Delivery Status Notification. success - Request Notification if the media mail is successfully delivered to the recipient. failure - Request Notification if the media mail is failed to deliver to the recipient. delayed - Request Notification if the media mail is delayed to deliver to the recipient. ')
cmmIpCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1), )
if mibBuilder.loadTexts: cmmIpCallActiveTable.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveTable.setDescription('This table is the Media Mail over IP extension to the call active table of IETF Dial Control MIB. It contains Media Mail over IP call leg information. ')
cmmIpCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cmmIpCallActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveEntry.setDescription('The information regarding a single Media mail over IP call leg. The call leg entry is identified by using the same index objects that are used by Call Active table of IETF Dial Control MIB to identify the call. An entry of this table is created when its associated call active entry in the IETF Dial Control MIB is created and the call active entry contains information for the call establishment to the mail server peer on the IP network via a Media Mail over IP peer. The entry is deleted when its associated call active entry in the IETF Dial Control MIB is deleted. ')
cmmIpCallActiveConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveConnectionId.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveConnectionId.setDescription('The global call identifier for the gateway call.')
cmmIpCallActiveRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveRemoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveRemoteIPAddress.setDescription('Remote mail server IP address for the Media mail call. ')
cmmIpCallActiveSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("smtp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveSessionProtocol.setDescription('The object specifies the session protocol to be used for the media mail call between local and remote mail server via IP network. ')
cmmIpCallActiveSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveSessionTarget.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveSessionTarget.setDescription('The object specifies the session target of the peer that is used for the call. This object is set with the information in the call associated cmmIpPeerCfgSessionTarget object when the media mail call is connected. ')
cmmIpCallActiveMessageId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveMessageId.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveMessageId.setDescription('The global unique message identification of the Media mail. ')
cmmIpCallActiveAccountId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveAccountId.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveAccountId.setDescription('The Account ID of Media mail.')
cmmIpCallActiveImgEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 7), CmmImgEncoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveImgEncodingType.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveImgEncodingType.setDescription('The image encoding type of Media mail.')
cmmIpCallActiveImgResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 8), CmmImgResolution()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveImgResolution.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveImgResolution.setDescription('The image resolution of Media mail.')
cmmIpCallActiveAcceptMimeTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 9), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveAcceptMimeTypes.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveAcceptMimeTypes.setDescription('The number of accepted MIME types for the Media mail call. ')
cmmIpCallActiveDiscdMimeTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 10), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveDiscdMimeTypes.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveDiscdMimeTypes.setDescription('The number of discarded MIME types for the Media mail call. ')
cmmIpCallActiveNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("mdn", 2), ("dsn", 3), ("dsnMdn", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallActiveNotification.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallActiveNotification.setDescription('The notification type of the Media mail call. none - No notification. mdn - Message Disposition notification. dsn - Delivery Status notification. dsnMdn - Both Delivery Status and Message Disposition notification ')
cmmIpCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1), )
if mibBuilder.loadTexts: cmmIpCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryTable.setDescription('This table is the Media Mail extension to the call history table of IETF Dial Control MIB. It contains Media Mail call leg information about specific Media mail gateway call. ')
cmmIpCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cmmIpCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryEntry.setDescription('The information regarding a single Media Mail call leg. The call leg entry is identified by using the same index objects that are used by Call Active table of IETF Dial Control MIB to identify the call. An entry of this table is created when its associated call history entry in the IETF Dial Control MIB is created and the call history entry contains information for the call establishment to the mail server on the IP network via a Media Mail over IP peer. The entry is deleted when its associated call history entry in the IETF Dial Control MIB is deleted. ')
cmmIpCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryConnectionId.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryConnectionId.setDescription('The global call identifier for the gateway call.')
cmmIpCallHistoryRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryRemoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryRemoteIPAddress.setDescription('Remote mail server IP address for the media mail call. ')
cmmIpCallHistorySessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("smtp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistorySessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistorySessionProtocol.setDescription('The object specifies the session protocol to be used for the media mail call between local and remote mail server via IP network. ')
cmmIpCallHistorySessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistorySessionTarget.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistorySessionTarget.setDescription('The object specifies the session target of the peer that is used for the call. This object is set with the information in the call associated cmmIpPeerCfgSessionTarget object when the media mail call is connected. ')
cmmIpCallHistoryMessageId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryMessageId.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryMessageId.setDescription('The global unique message identification of the Media mail. ')
cmmIpCallHistoryAccountId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryAccountId.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryAccountId.setDescription('The Account ID of Media mail.')
cmmIpCallHistoryImgEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 7), CmmImgEncoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryImgEncodingType.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryImgEncodingType.setDescription('The image encoding type of Media mail.')
cmmIpCallHistoryImgResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 8), CmmImgResolution()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryImgResolution.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryImgResolution.setDescription('The image resolution of Media mail.')
cmmIpCallHistoryAcceptMimeTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 9), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryAcceptMimeTypes.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryAcceptMimeTypes.setDescription('The number of accepted MIME types for the Media mail call. ')
cmmIpCallHistoryDiscdMimeTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 10), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryDiscdMimeTypes.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryDiscdMimeTypes.setDescription('The number of discarded MIME types for the Media mail call. ')
cmmIpCallHistoryNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("mdn", 2), ("dsn", 3), ("dsnMdn", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmmIpCallHistoryNotification.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallHistoryNotification.setDescription('The notification type of the Media mail call. none - No notification. mdn - Message Disposition notification. dsn - Delivery Status notification. dsnMdn - Both Delivery Status and Message Disposition notification ')
cmmFaxCfgCalledSubscriberId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmFaxCfgCalledSubscriberId.setReference('ITU-T T30: Section 5.3.6.2.4 CSI coding format. ')
if mibBuilder.loadTexts: cmmFaxCfgCalledSubscriberId.setStatus('current')
if mibBuilder.loadTexts: cmmFaxCfgCalledSubscriberId.setDescription('The regular expression for the FAX called subscriber identification (CSI) coding format. $d$ in the regular expression substitute CSI with the destination number of the call. ')
cmmFaxCfgXmitSubscriberId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmFaxCfgXmitSubscriberId.setReference('ITU-T T30: Section 5.3.6.2.6 TSI coding format. ')
if mibBuilder.loadTexts: cmmFaxCfgXmitSubscriberId.setStatus('current')
if mibBuilder.loadTexts: cmmFaxCfgXmitSubscriberId.setDescription('The regular expression for the FAX Transmitting subscriber identification (TSI) coding format. $s$ in the regular expression substitute TSI with the caller ID of the call. ')
cmmFaxCfgRightHeadingString = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4, 3), CmmFaxHeadingString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmFaxCfgRightHeadingString.setStatus('current')
if mibBuilder.loadTexts: cmmFaxCfgRightHeadingString.setDescription('The regular expression for the FAX right heading at the top of cover page or text page. The default value of this object is an empty string. ')
cmmFaxCfgCenterHeadingString = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4, 4), CmmFaxHeadingString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmFaxCfgCenterHeadingString.setStatus('current')
if mibBuilder.loadTexts: cmmFaxCfgCenterHeadingString.setDescription('The regular expression for the FAX center heading at the top of cover page or text page. The default value of this object is an empty string. ')
cmmFaxCfgLeftHeadingString = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4, 5), CmmFaxHeadingString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmFaxCfgLeftHeadingString.setStatus('current')
if mibBuilder.loadTexts: cmmFaxCfgLeftHeadingString.setDescription('The regular expression for the FAX left heading at the top of cover page or text page. The default value of this object is an empty string. ')
cmmFaxCfgCovergPageControl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4, 6), Bits().clone(namedValues=NamedValues(("coverPageEnable", 0), ("coverPageCtlByEmail", 1), ("coverPageDetailEnable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmFaxCfgCovergPageControl.setStatus('current')
if mibBuilder.loadTexts: cmmFaxCfgCovergPageControl.setDescription('The object controls the generation of cover page of FAX. coverPageEnable - enable the managed system to generate the FAX cover page. coverPageCtlByEmail - allow email to control the FAX cover page generation. coverPageDetailEnable- enable the detailed mail header on the cover page. ')
cmmFaxCfgCovergPageComment = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmFaxCfgCovergPageComment.setStatus('current')
if mibBuilder.loadTexts: cmmFaxCfgCovergPageComment.setDescription('The object contains the comment on the FAX cover page. ')
cmmFaxCfgFaxProfile = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 102, 1, 4, 8), Bits().clone(namedValues=NamedValues(("profileS", 0), ("profileF", 1), ("profileJ", 2), ("profileC", 3), ("profileL", 4), ("profileM", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmmFaxCfgFaxProfile.setReference('RFC 2301: Section 2.2.4 New TIFF fields recommended for fax modes. ')
if mibBuilder.loadTexts: cmmFaxCfgFaxProfile.setStatus('current')
if mibBuilder.loadTexts: cmmFaxCfgFaxProfile.setDescription('The profile that applies to TIFF file for facsimile. The default value of this object is profileF. ')
cmmdcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 102, 3))
cmmdcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 102, 3, 1))
cmmdcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 102, 3, 2))
cmmdcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 102, 3, 1, 1)).setObjects(("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmdcPeerCfgGroup"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallGeneralGroup"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallImageGroup"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmdcMIBCompliance = cmmdcMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cmmdcMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO MMAIL DIAL CONTROL MIB')
cmmdcPeerCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 102, 3, 2, 1)).setObjects(("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpPeerCfgSessionProtocol"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpPeerCfgSessionTarget"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpPeerCfgImgEncodingType"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpPeerCfgImgResolution"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpPeerCfgMsgDispoNotification"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpPeerCfgDeliStatNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmdcPeerCfgGroup = cmmdcPeerCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cmmdcPeerCfgGroup.setDescription('A collection of objects providing the Media Mail Dial Control configuration capability. ')
cmmIpCallGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 102, 3, 2, 2)).setObjects(("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveConnectionId"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveRemoteIPAddress"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveSessionProtocol"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveSessionTarget"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveMessageId"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveAccountId"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveAcceptMimeTypes"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveDiscdMimeTypes"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveNotification"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryConnectionId"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryRemoteIPAddress"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistorySessionProtocol"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistorySessionTarget"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryMessageId"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryAccountId"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryAcceptMimeTypes"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryDiscdMimeTypes"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmIpCallGeneralGroup = cmmIpCallGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallGeneralGroup.setDescription('A collection of objects providing the General Media Mail Call capability. ')
cmmIpCallImageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 102, 3, 2, 3)).setObjects(("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveImgEncodingType"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallActiveImgResolution"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryImgEncodingType"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmIpCallHistoryImgResolution"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmIpCallImageGroup = cmmIpCallImageGroup.setStatus('current')
if mibBuilder.loadTexts: cmmIpCallImageGroup.setDescription('A collection of objects providing the Image related Media Mail Call capability. ')
cmmFaxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 102, 3, 2, 4)).setObjects(("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxCfgCalledSubscriberId"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxCfgXmitSubscriberId"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxCfgRightHeadingString"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxCfgCenterHeadingString"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxCfgLeftHeadingString"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxCfgCovergPageControl"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxCfgCovergPageComment"), ("CISCO-MMAIL-DIAL-CONTROL-MIB", "cmmFaxCfgFaxProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmmFaxGroup = cmmFaxGroup.setStatus('current')
if mibBuilder.loadTexts: cmmFaxGroup.setDescription('A collection of objects providing the general FAX configuration capability. ')
mibBuilder.exportSymbols("CISCO-MMAIL-DIAL-CONTROL-MIB", cmmIpCallGeneralGroup=cmmIpCallGeneralGroup, cmmIpCallHistoryConnectionId=cmmIpCallHistoryConnectionId, cmmIpPeerCfgSessionProtocol=cmmIpPeerCfgSessionProtocol, cmmIpCallHistoryImgResolution=cmmIpCallHistoryImgResolution, cmmIpCallImageGroup=cmmIpCallImageGroup, cmmIpPeerCfgImgResolution=cmmIpPeerCfgImgResolution, cmmFaxCfgCalledSubscriberId=cmmFaxCfgCalledSubscriberId, cmmFaxCfgCenterHeadingString=cmmFaxCfgCenterHeadingString, cmmIpCallActiveSessionTarget=cmmIpCallActiveSessionTarget, cmmFaxGeneralCfg=cmmFaxGeneralCfg, cmmIpCallHistoryRemoteIPAddress=cmmIpCallHistoryRemoteIPAddress, cmmdcMIBObjects=cmmdcMIBObjects, cmmIpCallActiveDiscdMimeTypes=cmmIpCallActiveDiscdMimeTypes, CmmImgResolution=CmmImgResolution, cmmIpCallActiveNotification=cmmIpCallActiveNotification, cmmFaxGroup=cmmFaxGroup, cmmIpPeerCfgSessionTarget=cmmIpPeerCfgSessionTarget, cmmIpCallActiveImgEncodingType=cmmIpCallActiveImgEncodingType, cmmIpCallHistorySessionTarget=cmmIpCallHistorySessionTarget, cmmIpCallHistoryEntry=cmmIpCallHistoryEntry, cmmIpCallActiveAccountId=cmmIpCallActiveAccountId, cmmFaxCfgRightHeadingString=cmmFaxCfgRightHeadingString, cmmFaxCfgCovergPageComment=cmmFaxCfgCovergPageComment, ciscoMediaMailDialControlMIB=ciscoMediaMailDialControlMIB, PYSNMP_MODULE_ID=ciscoMediaMailDialControlMIB, cmmIpCallActiveRemoteIPAddress=cmmIpCallActiveRemoteIPAddress, cmmIpCallActiveEntry=cmmIpCallActiveEntry, cmmIpCallActiveSessionProtocol=cmmIpCallActiveSessionProtocol, cmmIpCallHistoryAcceptMimeTypes=cmmIpCallHistoryAcceptMimeTypes, cmmIpCallHistorySessionProtocol=cmmIpCallHistorySessionProtocol, cmmPeer=cmmPeer, cmmFaxCfgLeftHeadingString=cmmFaxCfgLeftHeadingString, cmmIpPeerCfgDeliStatNotification=cmmIpPeerCfgDeliStatNotification, cmmCallActive=cmmCallActive, cmmIpCallActiveAcceptMimeTypes=cmmIpCallActiveAcceptMimeTypes, cmmFaxCfgCovergPageControl=cmmFaxCfgCovergPageControl, cmmdcMIBConformance=cmmdcMIBConformance, CmmImgEncoding=CmmImgEncoding, cmmFaxCfgFaxProfile=cmmFaxCfgFaxProfile, cmmIpPeerCfgEntry=cmmIpPeerCfgEntry, cmmIpCallHistoryDiscdMimeTypes=cmmIpCallHistoryDiscdMimeTypes, cmmdcPeerCfgGroup=cmmdcPeerCfgGroup, CmmImgEncodingOrTransparent=CmmImgEncodingOrTransparent, cmmIpCallHistoryImgEncodingType=cmmIpCallHistoryImgEncodingType, cmmIpPeerCfgTable=cmmIpPeerCfgTable, cmmdcMIBCompliances=cmmdcMIBCompliances, cmmIpPeerCfgMsgDispoNotification=cmmIpPeerCfgMsgDispoNotification, cmmIpPeerCfgImgEncodingType=cmmIpPeerCfgImgEncodingType, cmmIpCallHistoryTable=cmmIpCallHistoryTable, CmmImgResolutionOrTransparent=CmmImgResolutionOrTransparent, cmmFaxCfgXmitSubscriberId=cmmFaxCfgXmitSubscriberId, cmmdcMIBCompliance=cmmdcMIBCompliance, cmmIpCallActiveImgResolution=cmmIpCallActiveImgResolution, cmmIpCallActiveMessageId=cmmIpCallActiveMessageId, cmmdcMIBGroups=cmmdcMIBGroups, cmmIpCallHistoryAccountId=cmmIpCallHistoryAccountId, cmmCallHistory=cmmCallHistory, cmmIpCallActiveTable=cmmIpCallActiveTable, cmmIpCallHistoryNotification=cmmIpCallHistoryNotification, cmmIpCallActiveConnectionId=cmmIpCallActiveConnectionId, CmmFaxHeadingString=CmmFaxHeadingString, cmmIpCallHistoryMessageId=cmmIpCallHistoryMessageId)
