#
# PySNMP MIB module Unisphere-Data-L2TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-L2TP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:31:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, ModuleIdentity, IpAddress, iso, Integer32, Gauge32, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Counter32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "IpAddress", "iso", "Integer32", "Gauge32", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Counter32", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdEnable, = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdEnable")
usdL2tpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35))
usdL2tpMIB.setRevisions(('2001-10-17 14:51', '2001-10-17 13:55', '2001-06-18 20:00', '2000-02-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdL2tpMIB.setRevisionsDescriptions(('Added new objects usdL2tpSysConfigTunnelSwitchingEnabled, usdL2tpSysConfigControlRetransmissions, usdL2tpSysConfigTunnelIdleTimeout.', 'Added usdL2tpSysConfigReceiveDataSequencingIgnore.', 'Added usdL2tpSessionStatusLacTunneledIfIndex as long-term replacement for usdL2tpSessionStatusLacPppIfIndex. Added new objects usdL2tpTunnelStatusCumEstabTime, usdL2tpSessionStatusCumEstabTime, usdL2tpSessionStatPayLostPackets. Changed range of usdL2tpSysConfigDestructTimeout to 10-3600.', 'Initial revision, based in part on IETF L2TP Working Group draft-ietf-l2tpext-l2tp-mib-01.',))
if mibBuilder.loadTexts: usdL2tpMIB.setLastUpdated('200110171451Z')
if mibBuilder.loadTexts: usdL2tpMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdL2tpMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdL2tpMIB.setDescription('The L2TP MIB for the Unisphere Networks enterprise.')
class UsdL2tpTunnelId(TextualConvention, Integer32):
    description = 'An L2TP Tunnel ID. Implementation constraints may restrict the range of values actually used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class UsdL2tpSessionId(TextualConvention, Integer32):
    description = 'An L2TP Session ID. Implementation constraints may restrict the range of values actually used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class UsdL2tpAdminState(TextualConvention, Integer32):
    description = 'The administrative state exerted on L2TP tunnels sessions at some scope of control. enabled New tunnels/sessions may be instantiated. disabled All tunnels/sessions are terminated. drain No new tunnels/sessions may be instantiated, but any existing tunnels/sessions may persist until they expire by other means. The DESCRIPTION clause of an object defined to have this syntax must describe the scope of control that object exerts (e.g., all tunnels/sessions across the system, sessions within a single tunnel, etc.).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("enabled", 0), ("disabled", 1), ("drain", 2))

class UsdL2tpTransport(TextualConvention, Integer32):
    description = 'Transport type over which L2TP is carried.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("other", 0), ("udpIp", 1))

usdL2tpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 0))
usdL2tpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1))
usdL2tpTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 2))
usdL2tpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3))
usdL2tpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1))
usdL2tpDestination = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2))
usdL2tpTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3))
usdL2tpSession = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4))
usdL2tpTransport = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5))
usdL2tpSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 1))
usdL2tpSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2))
usdL2tpSysConfigAdminState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 1, 1), UsdL2tpAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2tpSysConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysConfigAdminState.setDescription('Exerts control over all L2TP tunnels/sessions in the system.')
usdL2tpSysConfigDestructTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2tpSysConfigDestructTimeout.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysConfigDestructTimeout.setDescription('The amount of time, in seconds, to preserve dynamic tunnels/sessions after they become inactive, e.g. to poll their statistics.')
usdL2tpSysConfigIpChecksumEnable = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 1, 3), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2tpSysConfigIpChecksumEnable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysConfigIpChecksumEnable.setDescription('Enable/disable IP checksumming for tunnels with UDP/IP transport.')
usdL2tpSysConfigTunnelSwitchingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 1, 4), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2tpSysConfigTunnelSwitchingEnabled.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysConfigTunnelSwitchingEnabled.setDescription('Tunnel switching enabled/disable.')
usdL2tpSysConfigControlRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 7)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2tpSysConfigControlRetransmissions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysConfigControlRetransmissions.setDescription('The number of retransmission retries allowed before control session goes down.')
usdL2tpSysConfigTunnelIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2tpSysConfigTunnelIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysConfigTunnelIdleTimeout.setDescription('Idle tunnel remains active for the specified amount of time; value 0 disables the timer i.e. tunnel becomes persistent.')
usdL2tpSysConfigReceiveDataSequencingIgnore = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 1, 7), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdL2tpSysConfigReceiveDataSequencingIgnore.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysConfigReceiveDataSequencingIgnore.setDescription('Enable/disable ignoring of receive sequencing of L2TP data packets.')
usdL2tpSysStatusProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusProtocolVersion.setDescription('Vector of supported L2TP protocol version and revision numbers. Supported versions are identified via a two octet pairing where the first octet indicates the version and the second octet contains the revision.')
usdL2tpSysStatusVendorName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusVendorName.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusVendorName.setDescription('Vendor name of the L2TP protocol stack.')
usdL2tpSysStatusFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusFirmwareRev.setDescription('Firmware revision for the L2TP protocol stack.')
usdL2tpSysStatusTotalDestinations = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusTotalDestinations.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusTotalDestinations.setDescription('Number of destination creations attempted.')
usdL2tpSysStatusFailedDestinations = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusFailedDestinations.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusFailedDestinations.setDescription('Number of destination creation attempts that failed.')
usdL2tpSysStatusActiveDestinations = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusActiveDestinations.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusActiveDestinations.setDescription('Number of destinations having at least one active tunnel.')
usdL2tpSysStatusTotalTunnels = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusTotalTunnels.setDescription('Number of tunnel creations attempted.')
usdL2tpSysStatusFailedTunnels = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusFailedTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusFailedTunnels.setDescription('Number of tunnel creation attempts that failed to reach the established state.')
usdL2tpSysStatusFailedTunnelAuthens = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusFailedTunnelAuthens.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusFailedTunnelAuthens.setDescription('Number of tunnel creation attempts that failed authentication.')
usdL2tpSysStatusActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusActiveTunnels.setDescription('Number of tunnels currently established.')
usdL2tpSysStatusTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusTotalSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusTotalSessions.setDescription('Number of session creations attempted.')
usdL2tpSysStatusFailedSessions = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusFailedSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusFailedSessions.setDescription('Number of session creation attempts that failed to reach the established state.')
usdL2tpSysStatusActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 1, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSysStatusActiveSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSysStatusActiveSessions.setDescription('Number of sessions currently established.')
usdL2tpDestConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 1))
usdL2tpDestStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2))
usdL2tpDestStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3))
usdL2tpDestConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 1, 2), )
if mibBuilder.loadTexts: usdL2tpDestConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestConfigTable.setDescription('The L2TP destination configuration table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2tpDestStatsTable.')
usdL2tpDestConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpDestConfigIfIndex"))
if mibBuilder.loadTexts: usdL2tpDestConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestConfigEntry.setDescription('Describes the configuration attributes of an L2TP destination.')
usdL2tpDestConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpDestConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestConfigIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpDestConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2tpDestConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestConfigRowStatus.setDescription('An implementation may choose not to support administrative configuration of tunnels.')
usdL2tpDestConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 1, 2, 1, 3), UsdL2tpAdminState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2tpDestConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestConfigAdminState.setDescription('The configured administrative state.')
usdL2tpDestStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1), )
if mibBuilder.loadTexts: usdL2tpDestStatusTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusTable.setDescription('The L2TP destination status table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2tpDestConfigTable.')
usdL2tpDestStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusIfIndex"))
if mibBuilder.loadTexts: usdL2tpDestStatusEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusEntry.setDescription('Describes the status attributes of an L2TP destination.')
usdL2tpDestStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpDestStatusIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpDestStatusTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 2), UsdL2tpTransport()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusTransport.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusTransport.setDescription('The underlying transport over which this L2TP destination is carried.')
usdL2tpDestStatusEffectiveAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 3), UsdL2tpAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusEffectiveAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusEffectiveAdminState.setDescription('The administrative state currently in effect. This could be the configured admin state for this destination, or an overriding admin state exerted from a higher hierarchical level (system).')
usdL2tpDestStatusTotalTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusTotalTunnels.setDescription('Number of tunnel creations attempted.')
usdL2tpDestStatusFailedTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusFailedTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusFailedTunnels.setDescription('Number of tunnel creation attempts that failed to reach the established state.')
usdL2tpDestStatusFailedTunnelAuthens = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusFailedTunnelAuthens.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusFailedTunnelAuthens.setDescription('Number of tunnel creation attempts that failed authentication.')
usdL2tpDestStatusActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusActiveTunnels.setDescription('Number of tunnels currently established.')
usdL2tpDestStatusTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusTotalSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusTotalSessions.setDescription('Number of session creations attempted.')
usdL2tpDestStatusFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusFailedSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusFailedSessions.setDescription('Number of session creation attempts that failed to reach the established state.')
usdL2tpDestStatusActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 2, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatusActiveSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatusActiveSessions.setDescription('Number of sessions currently established.')
usdL2tpDestStatTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1), )
if mibBuilder.loadTexts: usdL2tpDestStatTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatTable.setDescription('The L2TP destination statistics table. Describes the aggregate control and payload statistics for all L2TP tunnels configured on each destination. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2tpDestConfigTable.')
usdL2tpDestStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpDestStatIfIndex"))
if mibBuilder.loadTexts: usdL2tpDestStatEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatEntry.setDescription('Describes the aggregate L2TP control and payload statistics for all L2TP tunnels on an L2TP destination.')
usdL2tpDestStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpDestStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpDestStatCtlRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatCtlRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatCtlRecvOctets.setDescription('Number of control octets received.')
usdL2tpDestStatCtlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatCtlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatCtlRecvPackets.setDescription('Number of control packets received.')
usdL2tpDestStatCtlRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatCtlRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatCtlRecvErrors.setDescription('Number of control packets incurring reception errors.')
usdL2tpDestStatCtlRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatCtlRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatCtlRecvDiscards.setDescription('Number of control packets discarded after reception.')
usdL2tpDestStatCtlSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatCtlSendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatCtlSendOctets.setDescription('Number of control octets sent.')
usdL2tpDestStatCtlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatCtlSendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatCtlSendPackets.setDescription('Number of control packets sent.')
usdL2tpDestStatCtlSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatCtlSendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatCtlSendErrors.setDescription('Number of control packets incurring transmission errors.')
usdL2tpDestStatCtlSendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatCtlSendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatCtlSendDiscards.setDescription('Number of control packets discarded before transmission.')
usdL2tpDestStatPayRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatPayRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatPayRecvOctets.setDescription('Number of payload octets received.')
usdL2tpDestStatPayRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatPayRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatPayRecvPackets.setDescription('Number of payload packets received.')
usdL2tpDestStatPayRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatPayRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatPayRecvErrors.setDescription('Number of payload packets incurring reception errors.')
usdL2tpDestStatPayRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatPayRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatPayRecvDiscards.setDescription('Number of payload packets discarded after reception.')
usdL2tpDestStatPaySendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatPaySendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatPaySendOctets.setDescription('Number of payload octets sent.')
usdL2tpDestStatPaySendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatPaySendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatPaySendPackets.setDescription('Number of payload packets sent.')
usdL2tpDestStatPaySendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatPaySendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatPaySendErrors.setDescription('Number of payload packets incurring transmission errors.')
usdL2tpDestStatPaySendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpDestStatPaySendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpDestStatPaySendDiscards.setDescription('Number of payload packets discarded before transmission.')
usdL2tpTunnelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 1))
usdL2tpTunnelStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2))
usdL2tpTunnelStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3))
usdL2tpTunnelMap = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4))
usdL2tpTunnelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 1, 2), )
if mibBuilder.loadTexts: usdL2tpTunnelConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelConfigTable.setDescription('The L2TP tunnel configuration table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2tpTunnelStatsTable.')
usdL2tpTunnelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpTunnelConfigIfIndex"))
if mibBuilder.loadTexts: usdL2tpTunnelConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelConfigEntry.setDescription('Describes the configuration attributes of an L2TP tunnel.')
usdL2tpTunnelConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpTunnelConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelConfigIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpTunnelConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2tpTunnelConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelConfigRowStatus.setDescription('An implementation may choose not to support administrative configuration of tunnels.')
usdL2tpTunnelConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 1, 2, 1, 3), UsdL2tpAdminState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2tpTunnelConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelConfigAdminState.setDescription('The configured administrative state.')
usdL2tpTunnelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1), )
if mibBuilder.loadTexts: usdL2tpTunnelStatusTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusTable.setDescription('The L2TP tunnel status and statistics table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2tpTunnelConfigTable.')
usdL2tpTunnelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusIfIndex"))
if mibBuilder.loadTexts: usdL2tpTunnelStatusEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusEntry.setDescription('An L2TP tunnel interface stats entry.')
usdL2tpTunnelStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpTunnelStatusIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusIfIndex.setDescription('Same as the value of ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpTunnelStatusTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 2), UsdL2tpTransport()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusTransport.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusTransport.setDescription('The underlying transport over which this L2TP tunnel is carried.')
usdL2tpTunnelStatusLocalTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 3), UsdL2tpTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusLocalTunnelId.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusLocalTunnelId.setDescription('The local tunnel identifier.')
usdL2tpTunnelStatusRemoteTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 4), UsdL2tpTunnelId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteTunnelId.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteTunnelId.setDescription('The remote tunnel identifier.')
usdL2tpTunnelStatusEffectiveAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 5), UsdL2tpAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusEffectiveAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusEffectiveAdminState.setDescription('The administrative state currently in effect. This could be the configured admin state for this tunnel, or an overriding admin state exerted from a higher hierarchical level (system, destination).')
usdL2tpTunnelStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("connecting", 1), ("established", 2), ("disconnecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusState.setDescription('The current state of the tunnel.')
usdL2tpTunnelStatusInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusInitiated.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusInitiated.setDescription('Indicates whether the tunnel was initiated locally, or by the remote tunnel peer.')
usdL2tpTunnelStatusRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteHostName.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteHostName.setDescription('The host name obtained during the tunnel establishment phase (via the Host Name AVP) of the L2TP peer. If the tunnel is idle, this object should maintain its value from the last time it was connected, or a zero-length string if no name was previously known.')
usdL2tpTunnelStatusRemoteVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteVendorName.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteVendorName.setDescription("Identifies the vendor name of the peer's L2TP implementation. If the tunnel is idle, this object should maintain its value from the last time it was connected, of a zero-length string if no name was previously known.")
usdL2tpTunnelStatusRemoteFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteFirmwareRevision.setDescription("The tunnel peer's firmware revision number. If the tunnel is idle, this object should maintain its value from the last time it was connected, or a zero value if no revision was previously known.")
usdL2tpTunnelStatusRemoteProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteProtocolVersion.setDescription("The protocol version and revision of the tunnel peer's implementation. The first octet contains the protocol version. The second octet contains the protocol revision.")
usdL2tpTunnelStatusRemoteBearerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("digital", 1), ("analog", 2), ("digitalAnalog", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteBearerCapabilities.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteBearerCapabilities.setDescription("The Bearer Capabilities of the tunnel peer. If the tunnel is idle this object should maintain its value from the last time it was connected, or 'none' if not previously known.")
usdL2tpTunnelStatusRemoteFramingCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("sync", 1), ("async", 2), ("syncAsync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteFramingCapabilities.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRemoteFramingCapabilities.setDescription("The Framing Capabilities of the tunnel peer. If the tunnel is idle this object should maintain its value from the last time it was connected, or 'none' if not previously known.")
usdL2tpTunnelStatusRecvWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRecvWindowSize.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRecvWindowSize.setDescription('The receive window size.')
usdL2tpTunnelStatusSendWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusSendWindowSize.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusSendWindowSize.setDescription("The tunnel peer's receive window size.")
usdL2tpTunnelStatusSendQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusSendQueueDepth.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusSendQueueDepth.setDescription('Number of control packets on transmit queue.')
usdL2tpTunnelStatusRecvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRecvSeq.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRecvSeq.setDescription('The next sequence number expected in a received control packet.')
usdL2tpTunnelStatusRecvSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusRecvSeqAck.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusRecvSeqAck.setDescription('The last received sequence number that was acknowledged back to the tunnel peer.')
usdL2tpTunnelStatusSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusSendSeq.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusSendSeq.setDescription('The next sequence number to be sent in a transmitted control packet.')
usdL2tpTunnelStatusSendSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusSendSeqAck.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusSendSeqAck.setDescription('The send sequence number that the tunnel peer has acknowledged. The flow control state can be determined by subtracting the usdL2tpTunnelStatusSendSeq from usdL2tpTunnelStatusSendSeqAck and comparing this value to usdL2tpTunnelStatusSendWindowSize.')
usdL2tpTunnelStatusTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusTotalSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusTotalSessions.setDescription('The total number of sessions that this tunnel has successfully connected through to its tunnel peer since this tunnel was created, including those that have since terminated.')
usdL2tpTunnelStatusFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusFailedSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusFailedSessions.setDescription('The number of sessions that were initiated but failed to reach the established phase.')
usdL2tpTunnelStatusActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusActiveSessions.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusActiveSessions.setDescription('The current number of sessions in the established state.')
usdL2tpTunnelStatusLastResultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusLastResultCode.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusLastResultCode.setDescription('The last value of the result code as described in the Result Code AVP which caused the tunnel to disconnect.')
usdL2tpTunnelStatusLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusLastErrorCode.setDescription('The last value of the error code as described in the Result Code AVP which caused the tunnel to disconnect.')
usdL2tpTunnelStatusLastErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusLastErrorMessage.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusLastErrorMessage.setDescription('The last value of the optional message as described in the Result Code AVP which caused the tunnel to disconnect.')
usdL2tpTunnelStatusCumEstabTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 2, 1, 1, 27), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatusCumEstabTime.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatusCumEstabTime.setDescription('The cumulative time in seconds that this tunnel, since first being created, has spent in the established state (which may be punctuated by intervals outside the established state).')
usdL2tpTunnelStatTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1), )
if mibBuilder.loadTexts: usdL2tpTunnelStatTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatTable.setDescription('The L2TP tunnel statistics table. Describes the control and payload statistics for each L2TP tunnel. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2tpTunnelConfigTable.')
usdL2tpTunnelStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatIfIndex"))
if mibBuilder.loadTexts: usdL2tpTunnelStatEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatEntry.setDescription('Describes the L2TP control and payload statistics for an L2TP tunnel.')
usdL2tpTunnelStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpTunnelStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpTunnelStatCtlRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvOctets.setDescription('Number of control octets received.')
usdL2tpTunnelStatCtlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvPackets.setDescription('Number of control packets received.')
usdL2tpTunnelStatCtlRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvErrors.setDescription('Number of control packets incurring reception errors.')
usdL2tpTunnelStatCtlRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvDiscards.setDescription('Number of control packets discarded after reception.')
usdL2tpTunnelStatCtlSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendOctets.setDescription('Number of control octets sent.')
usdL2tpTunnelStatCtlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendPackets.setDescription('Number of control packets sent.')
usdL2tpTunnelStatCtlSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendErrors.setDescription('Number of control packets incurring transmission errors.')
usdL2tpTunnelStatCtlSendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendDiscards.setDescription('Number of control packets discarded before transmission.')
usdL2tpTunnelStatPayRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatPayRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatPayRecvOctets.setDescription('Number of payload octets received.')
usdL2tpTunnelStatPayRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatPayRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatPayRecvPackets.setDescription('Number of payload packets received.')
usdL2tpTunnelStatPayRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatPayRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatPayRecvErrors.setDescription('Number of payload packets incurring reception errors.')
usdL2tpTunnelStatPayRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatPayRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatPayRecvDiscards.setDescription('Number of payload packets discarded after reception.')
usdL2tpTunnelStatPaySendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatPaySendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatPaySendOctets.setDescription('Number of payload octets sent.')
usdL2tpTunnelStatPaySendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatPaySendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatPaySendPackets.setDescription('Number of payload packets sent.')
usdL2tpTunnelStatPaySendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatPaySendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatPaySendErrors.setDescription('Number of payload packets incurring transmission errors.')
usdL2tpTunnelStatPaySendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatPaySendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatPaySendDiscards.setDescription('Number of payload packets discarded before transmission.')
usdL2tpTunnelStatCtlRecvZLB = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvZLB.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvZLB.setDescription('Number of Zero Length Body control packet acknowledgement packets that were received.')
usdL2tpTunnelStatCtlRecvOutOfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvOutOfSequence.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvOutOfSequence.setDescription('Number of control packets not received in the correct sequence number order.')
usdL2tpTunnelStatCtlRecvOutOfWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvOutOfWindow.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlRecvOutOfWindow.setDescription('Number of control packets received outside the offered receive window.')
usdL2tpTunnelStatCtlSendZLB = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendZLB.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendZLB.setDescription('Number of Zero Length Body control packets sent.')
usdL2tpTunnelStatCtlSendRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendRetransmits.setStatus('current')
if mibBuilder.loadTexts: usdL2tpTunnelStatCtlSendRetransmits.setDescription('Number of control packet send retransmissions.')
usdL2tpMapTifSidToSifTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 1), )
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifTable.setDescription('Table of TunnelIf/SessionId -> SessionIf mappings.')
usdL2tpMapTifSidToSifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpMapTifSidToSifTunnelIfIndex"), (0, "Unisphere-Data-L2TP-MIB", "usdL2tpMapTifSidToSifLocalSessionId"))
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifEntry.setDescription('A mapping of TunnelIf/SessionId to SessionIf.')
usdL2tpMapTifSidToSifTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifTunnelIfIndex.setDescription('The ifIndex of a tunnel interface.')
usdL2tpMapTifSidToSifLocalSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 1, 1, 2), UsdL2tpSessionId())
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifLocalSessionId.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifLocalSessionId.setDescription('A local session ID on the associated tunnel interface.')
usdL2tpMapTifSidToSifSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTifSidToSifSessionIfIndex.setDescription("The ifIndex of the session interface identified by this entry's Tunnel ifIndex and local Session Id pair.")
usdL2tpMapTidToTifTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 2), )
if mibBuilder.loadTexts: usdL2tpMapTidToTifTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTidToTifTable.setDescription('Map L2TP tunnel IDs to tunnel interfaces.')
usdL2tpMapTidToTifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 2, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpMapTidToTifLocalTunnelId"))
if mibBuilder.loadTexts: usdL2tpMapTidToTifEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTidToTifEntry.setDescription('A mapping of L2TP tunnel ID to tunnel interface.')
usdL2tpMapTidToTifLocalTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 2, 1, 1), UsdL2tpTunnelId())
if mibBuilder.loadTexts: usdL2tpMapTidToTifLocalTunnelId.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTidToTifLocalTunnelId.setDescription('A local tunnel identifier.')
usdL2tpMapTidToTifIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 3, 4, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpMapTidToTifIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapTidToTifIfIndex.setDescription('The ifIndex of the tunnel interface having the associated tunnel identifier.')
usdL2tpSessionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 1))
usdL2tpSessionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2))
usdL2tpSessionStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3))
usdL2tpSessionConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 1, 2), )
if mibBuilder.loadTexts: usdL2tpSessionConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionConfigTable.setDescription('The L2TP session configuration table. Each entry in this table has a corresponding entry in the Interfaces MIB ifTable, and in usdL2tpSessionStatsTable.')
usdL2tpSessionConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpSessionConfigIfIndex"))
if mibBuilder.loadTexts: usdL2tpSessionConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionConfigEntry.setDescription('Describes the configuration attributes of an L2TP session.')
usdL2tpSessionConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpSessionConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionConfigIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpSessionConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2tpSessionConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionConfigRowStatus.setDescription('An implementation may choose not to support administrative configuration of tunnels.')
usdL2tpSessionConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 1, 2, 1, 3), UsdL2tpAdminState().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdL2tpSessionConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionConfigAdminState.setDescription('The configured administrative state.')
usdL2tpSessionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1), )
if mibBuilder.loadTexts: usdL2tpSessionStatusTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusTable.setDescription('The L2TP session status and statistics table.')
usdL2tpSessionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusIfIndex"))
if mibBuilder.loadTexts: usdL2tpSessionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusEntry.setDescription('An L2TP session interface status and statistics entry.')
usdL2tpSessionStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpSessionStatusIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusIfIndex.setDescription('The ifIndex of an L2TP session interface.')
usdL2tpSessionStatusLacPppIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusLacPppIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: usdL2tpSessionStatusLacPppIfIndex.setDescription('For pass-through PPP sessions (conventional LAC), the ifIndex of an associated local PPP interface through which the remote LAC client was connected. If unknown, this object contains a value of zero. For locally originated PPP sessions (LNS-like), this object has a value of zero. This object is deprecated in favor of usdL2tpSessionStatusLacTunneledIfIndex.')
usdL2tpSessionStatusLocalSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 3), UsdL2tpSessionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusLocalSessionId.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusLocalSessionId.setDescription('The local session ID for the session.')
usdL2tpSessionStatusRemoteSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 4), UsdL2tpSessionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusRemoteSessionId.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusRemoteSessionId.setDescription('The remote session ID for the session.')
usdL2tpSessionStatusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusUserName.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusUserName.setDescription('The peer session name on this interface, typically the login name of the remote user. If the user name is unknown this object will contain a zero-length string.')
usdL2tpSessionStatusEffectiveAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 6), UsdL2tpAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusEffectiveAdminState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusEffectiveAdminState.setDescription('The administrative state currently in effect. This could be the configured admin state for this session, or an overriding admin state exerted from a higher hierarchical level (system, destination, tunnel).')
usdL2tpSessionStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("connecting", 1), ("established", 2), ("disconnecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusState.setDescription('The current state of the session.')
usdL2tpSessionStatusCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("lacIncoming", 1), ("lnsIncoming", 2), ("lacOutgoing", 3), ("lnsOutgoing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusCallType.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusCallType.setDescription('The type of call and role this tunnel peer is providing for this session. For example, lacIncoming(1) indicates this tunnel peer is acting as a LAC and generated a Incoming-Call-Request to the tunnel peer (the LNS). Note that tunnel peers can be both LAC and LNS simultaneously.')
usdL2tpSessionStatusCallSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusCallSerialNumber.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusCallSerialNumber.setDescription('The serial number assigned to this session.')
usdL2tpSessionStatusTxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusTxConnectSpeed.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusTxConnectSpeed.setDescription('The last known transmit baud rate for this session.')
usdL2tpSessionStatusRxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusRxConnectSpeed.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusRxConnectSpeed.setDescription('The last known receive baud rate for this session.')
usdL2tpSessionStatusCallBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("digital", 1), ("analog", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusCallBearerType.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusCallBearerType.setDescription('The bearer type of this session.')
usdL2tpSessionStatusFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("sync", 1), ("async", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusFramingType.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusFramingType.setDescription('The framing type of this session.')
usdL2tpSessionStatusPhysChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusPhysChanId.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusPhysChanId.setDescription('The physical channel identifier for the session. For pass-through PPP sessions, typically the ifIndex of the access interface lying below the PPP interface identified by usdL2tpSessionStatusLacTunneledIfIndex.')
usdL2tpSessionStatusDnis = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusDnis.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusDnis.setDescription('The Dialed Number Information String that the LAC obtained from the network for the session. If no DNIS was provided, a zero-length string will be returned.')
usdL2tpSessionStatusClid = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusClid.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusClid.setDescription('The Calling Line ID that the LAC obtained from the network for the session. If no CLID was provided, a zero-length string will be returned.')
usdL2tpSessionStatusSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusSubAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusSubAddress.setDescription('The SubAddress that the LAC obtained from the network for the session. If no SubAddress was provided, a zero-length string will be returned.')
usdL2tpSessionStatusPrivateGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusPrivateGroupId.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusPrivateGroupId.setDescription('The Private Group Identifier used for this tunneled session. If no Private Group Identifier was provided, a zero-length string will be returned.')
usdL2tpSessionStatusProxyLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusProxyLcp.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusProxyLcp.setDescription('Indicates whether the LAC performed proxy LCP for this session.')
usdL2tpSessionStatusAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("pppChap", 1), ("pppPap", 2), ("pppMsChap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusAuthMethod.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusAuthMethod.setDescription("The proxy authentication method employed by the LAC for the session. If usdL2tpSessionProxyLcp is false(2) this object reports a value of 'none' and should be ignored.")
usdL2tpSessionStatusSequencingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("remote", 1), ("local", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusSequencingState.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusSequencingState.setDescription('Indicates which tunnel peers have requested payload sequencing.')
usdL2tpSessionStatusSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusSendSeq.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusSendSeq.setDescription('The next send sequence number.')
usdL2tpSessionStatusRecvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusRecvSeq.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusRecvSeq.setDescription('The next receive sequence number expected.')
usdL2tpSessionStatusLacTunneledIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 24), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusLacTunneledIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusLacTunneledIfIndex.setDescription('For pass-through remote client sessions (conventional LAC), the ifIndex of an associated local interface through which the remote LAC client was connected. If unknown, this object contains a value of zero. For locally originated sessions (LNS-like), this object has a value of zero.')
usdL2tpSessionStatusCumEstabTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 2, 1, 1, 25), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatusCumEstabTime.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatusCumEstabTime.setDescription('The cumulative time in seconds that this session, since first being created, has spent in the established state (which may be punctuated by intervals outside the established state).')
usdL2tpSessionStatTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1), )
if mibBuilder.loadTexts: usdL2tpSessionStatTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatTable.setDescription('The L2TP session statistics table.')
usdL2tpSessionStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatIfIndex"))
if mibBuilder.loadTexts: usdL2tpSessionStatEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatEntry.setDescription('An L2TP session interface statistics entry.')
usdL2tpSessionStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpSessionStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatIfIndex.setDescription('The ifIndex of an L2TP session interface.')
usdL2tpSessionStatPayRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPayRecvOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPayRecvOctets.setDescription('Number of payload octets received.')
usdL2tpSessionStatPayRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPayRecvPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPayRecvPackets.setDescription('Number of payload packets received.')
usdL2tpSessionStatPayRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPayRecvErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPayRecvErrors.setDescription('Number of payload packets incurring reception errors.')
usdL2tpSessionStatPayRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPayRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPayRecvDiscards.setDescription('Number of payload packets discarded after reception.')
usdL2tpSessionStatPaySendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPaySendOctets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPaySendOctets.setDescription('Number of payload octets sent.')
usdL2tpSessionStatPaySendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPaySendPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPaySendPackets.setDescription('Number of payload packets sent.')
usdL2tpSessionStatPaySendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPaySendErrors.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPaySendErrors.setDescription('Number of payload packets incurring transmission errors.')
usdL2tpSessionStatPaySendDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPaySendDiscards.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPaySendDiscards.setDescription('Number of payload packets discarded before transmission.')
usdL2tpSessionStatRecvOutOfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatRecvOutOfSequence.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatRecvOutOfSequence.setDescription('The number of packets received out of sequence.')
usdL2tpSessionStatResequencingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatResequencingTimeouts.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatResequencingTimeouts.setDescription('The number of reassembly timeouts that have occurred.')
usdL2tpSessionStatPayLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 4, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpSessionStatPayLostPackets.setStatus('current')
if mibBuilder.loadTexts: usdL2tpSessionStatPayLostPackets.setDescription('When sequence numbers are enabled, this value represents the estimated number of payload packets lost, based on observed gaps in sequence numbers. This estimate is subject to correction (decrement) upon receipt of out-of-sequence packets that fill previously observed gaps.')
usdL2tpTransportUdpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1))
usdL2tpUdpIpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 1))
usdL2tpUdpIpDestination = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 2))
usdL2tpUdpIpTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3))
usdL2tpUdpIpSession = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 4))
usdL2tpUdpIpDestTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: usdL2tpUdpIpDestTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpDestTable.setDescription('The L2TP UDP/IP destination table. Reports the UDP/IP characteristics of a L2TP UDP/IP destination. A L2TP UDP/IP destination is associated with a local router, a local IP address, and with a remote IP address for the L2TP peer. More specific UDP/IP detail per tunnel is reported in the usdL2tpUdpIpTunnelTable.')
usdL2tpUdpIpDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpDestIfIndex"))
if mibBuilder.loadTexts: usdL2tpUdpIpDestEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpDestEntry.setDescription('Describes the UDP/IP attributes of an L2TP destination.')
usdL2tpUdpIpDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpUdpIpDestIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpDestIfIndex.setDescription('Same value as ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpUdpIpDestRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpUdpIpDestRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpDestRouterIndex.setDescription('The index of an entry in the usdRouterTable for the local router with which this L2TP destination interface is associated.')
usdL2tpUdpIpDestLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpUdpIpDestLocalAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpDestLocalAddress.setDescription("This L2TP destination's local IP address.")
usdL2tpUdpIpDestRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpUdpIpDestRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpDestRemoteAddress.setDescription('The IP address of the remote L2TP endpoint.')
usdL2tpUdpIpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3, 1), )
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelTable.setDescription('The L2TP UDP/IP tunnel table. Reports the UDP/IP characteristics of L2TP UDP/IP tunnels. A L2TP UDP/IP tunnel is defined in terms of the local and remote IP addresses and UDP ports.')
usdL2tpUdpIpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpTunnelIfIndex"))
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelEntry.setDescription('An L2TP UDP/IP tunnel entry.')
usdL2tpUdpIpTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelIfIndex.setDescription('Same as the value of ifIndex for the corresponding entry in Interfaces MIB ifTable.')
usdL2tpUdpIpTunnelRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelRouterIndex.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelRouterIndex.setDescription('The index of an entry in the usdRouterTable for the local router with which this L2TP tunnel interface is associated.')
usdL2tpUdpIpTunnelLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelLocalAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelLocalAddress.setDescription('The local IP address for this UDP/IP tunnel.')
usdL2tpUdpIpTunnelLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelLocalPort.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelLocalPort.setDescription('The local UDP port for this UDP/IP tunnel.')
usdL2tpUdpIpTunnelRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelRemoteAddress.setDescription('The remote IP address for this UDP/IP tunnel.')
usdL2tpUdpIpTunnelRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 1, 5, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelRemotePort.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpTunnelRemotePort.setDescription('The remote UDP port for this UDP/IP tunnel.')
usdL2tpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1))
usdL2tpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 2))
usdL2tpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 2, 1)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpConfigGroup"), ("Unisphere-Data-L2TP-MIB", "usdL2tpStatusGroup"), ("Unisphere-Data-L2TP-MIB", "usdL2tpStatGroup"), ("Unisphere-Data-L2TP-MIB", "usdL2tpMapGroup"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpCompliance = usdL2tpCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdL2tpCompliance.setDescription('Obsolete compliance statement for SNMPv2 entities which implement the L2TP MIB. This statement became obsolete when usdL2tpTunnelStatusCumEstabTime, usdL2tpSessionStatusCumEstabTime and usdL2tpSessionStatPayLostPackets were added, and usdL2tpSessionStatusLacTunneledIfIndex replaced usdL2tpSessionStatusLacPppIfIndex.')
usdL2tpCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 2, 2)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpConfigGroup"), ("Unisphere-Data-L2TP-MIB", "usdL2tpStatusGroup2"), ("Unisphere-Data-L2TP-MIB", "usdL2tpStatGroup2"), ("Unisphere-Data-L2TP-MIB", "usdL2tpMapGroup"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpCompliance2 = usdL2tpCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdL2tpCompliance2.setDescription('Obsolete compliance statement for SNMPv2 entities which implement the L2TP MIB. This statement became obsolete when a new object was added to the configuration group.')
usdL2tpCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 2, 3)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpConfigGroup2"), ("Unisphere-Data-L2TP-MIB", "usdL2tpStatusGroup2"), ("Unisphere-Data-L2TP-MIB", "usdL2tpStatGroup2"), ("Unisphere-Data-L2TP-MIB", "usdL2tpMapGroup"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpCompliance3 = usdL2tpCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdL2tpCompliance3.setDescription('Obsolete compliance statement for SNMPv2 entities which implement the L2TP MIB. This statement became obsolete when a new objects were added to the configuration group.')
usdL2tpCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 2, 4)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpConfigGroup3"), ("Unisphere-Data-L2TP-MIB", "usdL2tpStatusGroup2"), ("Unisphere-Data-L2TP-MIB", "usdL2tpStatGroup2"), ("Unisphere-Data-L2TP-MIB", "usdL2tpMapGroup"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpCompliance4 = usdL2tpCompliance4.setStatus('current')
if mibBuilder.loadTexts: usdL2tpCompliance4.setDescription('The compliance statement for SNMPv2 entities which implement the L2TP MIB.')
usdL2tpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 1)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigDestructTimeout"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigIpChecksumEnable"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionConfigAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpConfigGroup = usdL2tpConfigGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdL2tpConfigGroup.setDescription('Obsolete collection of objects providing configuration information of the L2TP protocol, tunnels and sessions. This group became obsolete when usdL2tpSysConfigReceiveDataSequencingIgnore was added.')
usdL2tpStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 2)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusProtocolVersion"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusVendorName"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFirmwareRev"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusTotalDestinations"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFailedDestinations"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusActiveDestinations"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusTotalTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFailedTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFailedTunnelAuthens"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusActiveTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusTotalSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFailedSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusActiveSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusEffectiveAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusTotalTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusFailedTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusFailedTunnelAuthens"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusActiveTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusTotalSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusFailedSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusActiveSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusEffectiveAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusLocalTunnelId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteTunnelId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusInitiated"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteHostName"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteVendorName"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteFirmwareRevision"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteProtocolVersion"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteBearerCapabilities"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteFramingCapabilities"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRecvWindowSize"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusSendWindowSize"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusSendQueueDepth"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRecvSeq"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRecvSeqAck"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusSendSeq"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusSendSeqAck"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusTotalSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusFailedSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusActiveSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusLastResultCode"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusLastErrorCode"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusLastErrorMessage"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusLacPppIfIndex"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusLocalSessionId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusRemoteSessionId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusUserName"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusCallType"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusCallSerialNumber"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusTxConnectSpeed"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusRxConnectSpeed"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusCallBearerType"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusFramingType"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusPhysChanId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusDnis"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusClid"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusSubAddress"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusPrivateGroupId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusProxyLcp"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusAuthMethod"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusSequencingState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusSendSeq"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusRecvSeq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpStatusGroup = usdL2tpStatusGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdL2tpStatusGroup.setDescription('Obsolete collection of objects providing status of the L2TP protocol at the system, destination, tunnel, and session levels. This group became obsolete when new objects were added.')
usdL2tpStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 3)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlSendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlSendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlSendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlSendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPayRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPayRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPayRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPayRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPaySendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPaySendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPaySendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPaySendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPayRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPayRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPayRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPayRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPaySendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPaySendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPaySendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPaySendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvZLB"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvOutOfSequence"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvOutOfWindow"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendZLB"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendRetransmits"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPaySendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPaySendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPaySendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPaySendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatRecvOutOfSequence"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatResequencingTimeouts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpStatGroup = usdL2tpStatGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdL2tpStatGroup.setDescription('Obsolete collection of objects providing statistics of the L2TP protocol at the destination, tunnel, and session levels. This group became obsolete when new objects were added.')
usdL2tpMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 4)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpMapTifSidToSifSessionIfIndex"), ("Unisphere-Data-L2TP-MIB", "usdL2tpMapTidToTifIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpMapGroup = usdL2tpMapGroup.setStatus('current')
if mibBuilder.loadTexts: usdL2tpMapGroup.setDescription('A collection of objects providing mapping associations among L2TP components.')
usdL2tpUdpIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 5)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpDestRouterIndex"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpDestLocalAddress"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpDestRemoteAddress"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpTunnelRouterIndex"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpTunnelLocalAddress"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpTunnelLocalPort"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpTunnelRemoteAddress"), ("Unisphere-Data-L2TP-MIB", "usdL2tpUdpIpTunnelRemotePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpUdpIpGroup = usdL2tpUdpIpGroup.setStatus('current')
if mibBuilder.loadTexts: usdL2tpUdpIpGroup.setDescription('A collection of objects providing UDP/IP transport information for L2TP components.')
usdL2tpStatusGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 6)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusProtocolVersion"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusVendorName"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFirmwareRev"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusTotalDestinations"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFailedDestinations"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusActiveDestinations"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusTotalTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFailedTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFailedTunnelAuthens"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusActiveTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusTotalSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusFailedSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysStatusActiveSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusTransport"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusEffectiveAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusTotalTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusFailedTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusFailedTunnelAuthens"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusActiveTunnels"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusTotalSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusFailedSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatusActiveSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusTransport"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusLocalTunnelId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteTunnelId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusEffectiveAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusInitiated"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteHostName"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteVendorName"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteFirmwareRevision"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteProtocolVersion"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteBearerCapabilities"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRemoteFramingCapabilities"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRecvWindowSize"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusSendWindowSize"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusSendQueueDepth"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRecvSeq"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusRecvSeqAck"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusSendSeq"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusSendSeqAck"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusTotalSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusFailedSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusActiveSessions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusLastResultCode"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusLastErrorCode"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusLastErrorMessage"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatusCumEstabTime"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusLocalSessionId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusRemoteSessionId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusUserName"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusEffectiveAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusCallType"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusCallSerialNumber"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusTxConnectSpeed"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusRxConnectSpeed"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusCallBearerType"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusFramingType"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusPhysChanId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusDnis"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusClid"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusSubAddress"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusPrivateGroupId"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusProxyLcp"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusAuthMethod"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusSequencingState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusSendSeq"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusRecvSeq"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusLacTunneledIfIndex"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatusCumEstabTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpStatusGroup2 = usdL2tpStatusGroup2.setStatus('current')
if mibBuilder.loadTexts: usdL2tpStatusGroup2.setDescription('A collection of objects providing status of the L2TP protocol at the system, destination, tunnel, and session levels.')
usdL2tpStatGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 7)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlSendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlSendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlSendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatCtlSendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPayRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPayRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPayRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPayRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPaySendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPaySendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPaySendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestStatPaySendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPayRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPayRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPayRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPayRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPaySendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPaySendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPaySendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatPaySendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvZLB"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvOutOfSequence"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlRecvOutOfWindow"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendZLB"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelStatCtlSendRetransmits"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayRecvOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayRecvPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayRecvErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayRecvDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPaySendOctets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPaySendPackets"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPaySendErrors"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPaySendDiscards"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatRecvOutOfSequence"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatResequencingTimeouts"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionStatPayLostPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpStatGroup2 = usdL2tpStatGroup2.setStatus('current')
if mibBuilder.loadTexts: usdL2tpStatGroup2.setDescription('A collection of objects providing statistics of the L2TP protocol at the destination, tunnel, and session levels.')
usdL2tpConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 8)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigDestructTimeout"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigIpChecksumEnable"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigReceiveDataSequencingIgnore"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionConfigAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpConfigGroup2 = usdL2tpConfigGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdL2tpConfigGroup2.setDescription('Obsolete collection of objects providing configuration information of the L2TP protocol, tunnels and sessions. This group became obsolete when new objects were added.')
usdL2tpConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 35, 3, 1, 9)).setObjects(("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigDestructTimeout"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigIpChecksumEnable"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigTunnelSwitchingEnabled"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigControlRetransmissions"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigTunnelIdleTimeout"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSysConfigReceiveDataSequencingIgnore"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpDestConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpTunnelConfigAdminState"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionConfigRowStatus"), ("Unisphere-Data-L2TP-MIB", "usdL2tpSessionConfigAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdL2tpConfigGroup3 = usdL2tpConfigGroup3.setStatus('current')
if mibBuilder.loadTexts: usdL2tpConfigGroup3.setDescription('A collection of objects providing configuration information of the L2TP protocol, tunnels and sessions.')
mibBuilder.exportSymbols("Unisphere-Data-L2TP-MIB", usdL2tpSessionStatPayRecvDiscards=usdL2tpSessionStatPayRecvDiscards, usdL2tpTrapControl=usdL2tpTrapControl, usdL2tpSystem=usdL2tpSystem, usdL2tpDestStatCtlSendErrors=usdL2tpDestStatCtlSendErrors, usdL2tpTunnelStatusActiveSessions=usdL2tpTunnelStatusActiveSessions, usdL2tpStatGroup2=usdL2tpStatGroup2, usdL2tpSystemConfig=usdL2tpSystemConfig, usdL2tpTunnelStatCtlRecvOutOfWindow=usdL2tpTunnelStatCtlRecvOutOfWindow, usdL2tpSessionStatPayRecvPackets=usdL2tpSessionStatPayRecvPackets, usdL2tpDestStatPaySendDiscards=usdL2tpDestStatPaySendDiscards, usdL2tpSysStatusProtocolVersion=usdL2tpSysStatusProtocolVersion, usdL2tpTunnelStatusTable=usdL2tpTunnelStatusTable, usdL2tpMapTidToTifLocalTunnelId=usdL2tpMapTidToTifLocalTunnelId, usdL2tpSessionStatusProxyLcp=usdL2tpSessionStatusProxyLcp, usdL2tpConfigGroup=usdL2tpConfigGroup, usdL2tpDestination=usdL2tpDestination, usdL2tpTunnelStatusFailedSessions=usdL2tpTunnelStatusFailedSessions, usdL2tpUdpIpDestRouterIndex=usdL2tpUdpIpDestRouterIndex, usdL2tpUdpIpGroup=usdL2tpUdpIpGroup, usdL2tpTunnelStatPaySendErrors=usdL2tpTunnelStatPaySendErrors, usdL2tpSysStatusTotalDestinations=usdL2tpSysStatusTotalDestinations, usdL2tpSessionConfigEntry=usdL2tpSessionConfigEntry, usdL2tpTunnelStatusLocalTunnelId=usdL2tpTunnelStatusLocalTunnelId, usdL2tpMapTidToTifIfIndex=usdL2tpMapTidToTifIfIndex, usdL2tpSessionStatusPhysChanId=usdL2tpSessionStatusPhysChanId, usdL2tpMIB=usdL2tpMIB, usdL2tpDestStatIfIndex=usdL2tpDestStatIfIndex, usdL2tpDestStatEntry=usdL2tpDestStatEntry, usdL2tpDestStatCtlSendDiscards=usdL2tpDestStatCtlSendDiscards, usdL2tpTunnelStatCtlSendDiscards=usdL2tpTunnelStatCtlSendDiscards, usdL2tpStatGroup=usdL2tpStatGroup, usdL2tpConfigGroup3=usdL2tpConfigGroup3, usdL2tpDestStatusEntry=usdL2tpDestStatusEntry, usdL2tpSysStatusTotalSessions=usdL2tpSysStatusTotalSessions, usdL2tpMapTifSidToSifSessionIfIndex=usdL2tpMapTifSidToSifSessionIfIndex, usdL2tpTunnelStatPaySendOctets=usdL2tpTunnelStatPaySendOctets, usdL2tpTunnelStatusRemoteHostName=usdL2tpTunnelStatusRemoteHostName, usdL2tpSessionStatusCallSerialNumber=usdL2tpSessionStatusCallSerialNumber, UsdL2tpAdminState=UsdL2tpAdminState, usdL2tpDestStatCtlSendPackets=usdL2tpDestStatCtlSendPackets, usdL2tpTunnelStatusIfIndex=usdL2tpTunnelStatusIfIndex, usdL2tpDestStatusFailedTunnelAuthens=usdL2tpDestStatusFailedTunnelAuthens, usdL2tpSessionStatIfIndex=usdL2tpSessionStatIfIndex, usdL2tpUdpIpTunnelRemotePort=usdL2tpUdpIpTunnelRemotePort, usdL2tpSessionStatusLacPppIfIndex=usdL2tpSessionStatusLacPppIfIndex, usdL2tpDestStatusFailedSessions=usdL2tpDestStatusFailedSessions, UsdL2tpSessionId=UsdL2tpSessionId, usdL2tpSessionStatTable=usdL2tpSessionStatTable, usdL2tpTunnelStatCtlSendRetransmits=usdL2tpTunnelStatCtlSendRetransmits, usdL2tpUdpIpDestTable=usdL2tpUdpIpDestTable, usdL2tpUdpIpDestRemoteAddress=usdL2tpUdpIpDestRemoteAddress, usdL2tpSysStatusTotalTunnels=usdL2tpSysStatusTotalTunnels, usdL2tpStatusGroup=usdL2tpStatusGroup, usdL2tpSessionConfigTable=usdL2tpSessionConfigTable, usdL2tpSessionStatPaySendErrors=usdL2tpSessionStatPaySendErrors, usdL2tpDestStatistics=usdL2tpDestStatistics, usdL2tpUdpIpTunnelLocalPort=usdL2tpUdpIpTunnelLocalPort, usdL2tpTunnelStatIfIndex=usdL2tpTunnelStatIfIndex, usdL2tpTunnelStatCtlSendErrors=usdL2tpTunnelStatCtlSendErrors, usdL2tpTunnelStatCtlRecvPackets=usdL2tpTunnelStatCtlRecvPackets, usdL2tpTunnelStatCtlSendZLB=usdL2tpTunnelStatCtlSendZLB, usdL2tpSysStatusFailedDestinations=usdL2tpSysStatusFailedDestinations, usdL2tpDestConfigRowStatus=usdL2tpDestConfigRowStatus, usdL2tpSessionStatPaySendPackets=usdL2tpSessionStatPaySendPackets, usdL2tpTransport=usdL2tpTransport, usdL2tpSessionStatusUserName=usdL2tpSessionStatusUserName, usdL2tpMapGroup=usdL2tpMapGroup, usdL2tpTunnelConfigRowStatus=usdL2tpTunnelConfigRowStatus, usdL2tpTunnelStatCtlRecvDiscards=usdL2tpTunnelStatCtlRecvDiscards, usdL2tpTunnelStatusLastErrorCode=usdL2tpTunnelStatusLastErrorCode, usdL2tpDestConfigAdminState=usdL2tpDestConfigAdminState, usdL2tpUdpIpDestLocalAddress=usdL2tpUdpIpDestLocalAddress, usdL2tpSessionStatusTxConnectSpeed=usdL2tpSessionStatusTxConnectSpeed, usdL2tpTunnelStatusSendWindowSize=usdL2tpTunnelStatusSendWindowSize, usdL2tpSessionStatusFramingType=usdL2tpSessionStatusFramingType, usdL2tpUdpIpTunnelTable=usdL2tpUdpIpTunnelTable, usdL2tpTunnelConfigEntry=usdL2tpTunnelConfigEntry, usdL2tpTunnelConfigIfIndex=usdL2tpTunnelConfigIfIndex, usdL2tpSysConfigControlRetransmissions=usdL2tpSysConfigControlRetransmissions, usdL2tpTunnelStatTable=usdL2tpTunnelStatTable, usdL2tpTunnelStatus=usdL2tpTunnelStatus, usdL2tpSessionStatusIfIndex=usdL2tpSessionStatusIfIndex, usdL2tpSessionStatusLacTunneledIfIndex=usdL2tpSessionStatusLacTunneledIfIndex, usdL2tpTunnelStatistics=usdL2tpTunnelStatistics, usdL2tpUdpIpTunnelIfIndex=usdL2tpUdpIpTunnelIfIndex, UsdL2tpTunnelId=UsdL2tpTunnelId, usdL2tpCompliance2=usdL2tpCompliance2, usdL2tpDestStatPaySendOctets=usdL2tpDestStatPaySendOctets, usdL2tpTunnelStatusRemoteVendorName=usdL2tpTunnelStatusRemoteVendorName, usdL2tpTunnelStatusRemoteProtocolVersion=usdL2tpTunnelStatusRemoteProtocolVersion, usdL2tpTunnelConfig=usdL2tpTunnelConfig, usdL2tpSessionStatusPrivateGroupId=usdL2tpSessionStatusPrivateGroupId, usdL2tpSysConfigDestructTimeout=usdL2tpSysConfigDestructTimeout, usdL2tpSessionStatPaySendOctets=usdL2tpSessionStatPaySendOctets, usdL2tpTunnelStatPaySendDiscards=usdL2tpTunnelStatPaySendDiscards, usdL2tpDestStatCtlSendOctets=usdL2tpDestStatCtlSendOctets, usdL2tpTunnelStatusRecvWindowSize=usdL2tpTunnelStatusRecvWindowSize, usdL2tpDestStatCtlRecvDiscards=usdL2tpDestStatCtlRecvDiscards, usdL2tpSessionConfig=usdL2tpSessionConfig, usdL2tpTunnelStatCtlRecvZLB=usdL2tpTunnelStatCtlRecvZLB, usdL2tpSessionStatusEffectiveAdminState=usdL2tpSessionStatusEffectiveAdminState, usdL2tpDestConfigIfIndex=usdL2tpDestConfigIfIndex, usdL2tpSession=usdL2tpSession, usdL2tpTunnelStatusTransport=usdL2tpTunnelStatusTransport, usdL2tpMapTifSidToSifTable=usdL2tpMapTifSidToSifTable, usdL2tpSessionStatusCumEstabTime=usdL2tpSessionStatusCumEstabTime, usdL2tpConfigGroup2=usdL2tpConfigGroup2, usdL2tpUdpIpSystem=usdL2tpUdpIpSystem, usdL2tpSystemStatus=usdL2tpSystemStatus, usdL2tpSessionStatusRxConnectSpeed=usdL2tpSessionStatusRxConnectSpeed, usdL2tpTunnelStatusCumEstabTime=usdL2tpTunnelStatusCumEstabTime, usdL2tpTunnelStatusInitiated=usdL2tpTunnelStatusInitiated, usdL2tpTunnelStatusRemoteTunnelId=usdL2tpTunnelStatusRemoteTunnelId, usdL2tpTunnelStatCtlRecvErrors=usdL2tpTunnelStatCtlRecvErrors, usdL2tpSessionStatusCallType=usdL2tpSessionStatusCallType, usdL2tpDestStatCtlRecvPackets=usdL2tpDestStatCtlRecvPackets, usdL2tpSysConfigAdminState=usdL2tpSysConfigAdminState, usdL2tpCompliance3=usdL2tpCompliance3, usdL2tpSessionConfigIfIndex=usdL2tpSessionConfigIfIndex, usdL2tpDestStatPayRecvDiscards=usdL2tpDestStatPayRecvDiscards, usdL2tpTunnelConfigAdminState=usdL2tpTunnelConfigAdminState, usdL2tpTunnelStatusSendSeq=usdL2tpTunnelStatusSendSeq, usdL2tpTunnelConfigTable=usdL2tpTunnelConfigTable, usdL2tpTunnelStatCtlSendPackets=usdL2tpTunnelStatCtlSendPackets, usdL2tpUdpIpTunnelRouterIndex=usdL2tpUdpIpTunnelRouterIndex, usdL2tpDestStatusEffectiveAdminState=usdL2tpDestStatusEffectiveAdminState, usdL2tpDestStatusTotalSessions=usdL2tpDestStatusTotalSessions, usdL2tpStatusGroup2=usdL2tpStatusGroup2, usdL2tpSysConfigTunnelIdleTimeout=usdL2tpSysConfigTunnelIdleTimeout, usdL2tpDestStatPaySendErrors=usdL2tpDestStatPaySendErrors, usdL2tpTunnelMap=usdL2tpTunnelMap, usdL2tpTunnelStatusEntry=usdL2tpTunnelStatusEntry, usdL2tpMapTifSidToSifTunnelIfIndex=usdL2tpMapTifSidToSifTunnelIfIndex, usdL2tpDestStatusIfIndex=usdL2tpDestStatusIfIndex, usdL2tpSysStatusActiveTunnels=usdL2tpSysStatusActiveTunnels, usdL2tpMapTidToTifEntry=usdL2tpMapTidToTifEntry, usdL2tpSessionStatusState=usdL2tpSessionStatusState, usdL2tpSessionConfigRowStatus=usdL2tpSessionConfigRowStatus, usdL2tpSessionConfigAdminState=usdL2tpSessionConfigAdminState, usdL2tpUdpIpTunnel=usdL2tpUdpIpTunnel, usdL2tpDestStatTable=usdL2tpDestStatTable, usdL2tpTransportUdpIp=usdL2tpTransportUdpIp, usdL2tpTunnel=usdL2tpTunnel, usdL2tpSysStatusVendorName=usdL2tpSysStatusVendorName, usdL2tpSessionStatEntry=usdL2tpSessionStatEntry, usdL2tpSessionStatPaySendDiscards=usdL2tpSessionStatPaySendDiscards, usdL2tpDestStatPayRecvOctets=usdL2tpDestStatPayRecvOctets, usdL2tpSessionStatusSubAddress=usdL2tpSessionStatusSubAddress, usdL2tpTunnelStatusSendSeqAck=usdL2tpTunnelStatusSendSeqAck, usdL2tpMapTifSidToSifLocalSessionId=usdL2tpMapTifSidToSifLocalSessionId, usdL2tpCompliance4=usdL2tpCompliance4, usdL2tpSessionStatusCallBearerType=usdL2tpSessionStatusCallBearerType, usdL2tpTunnelStatPayRecvDiscards=usdL2tpTunnelStatPayRecvDiscards, usdL2tpGroups=usdL2tpGroups, usdL2tpTunnelStatCtlRecvOutOfSequence=usdL2tpTunnelStatCtlRecvOutOfSequence, usdL2tpSessionStatPayLostPackets=usdL2tpSessionStatPayLostPackets, usdL2tpUdpIpDestEntry=usdL2tpUdpIpDestEntry, usdL2tpSysStatusFailedTunnelAuthens=usdL2tpSysStatusFailedTunnelAuthens, usdL2tpSysStatusFirmwareRev=usdL2tpSysStatusFirmwareRev, usdL2tpSessionStatPayRecvErrors=usdL2tpSessionStatPayRecvErrors, usdL2tpDestConfig=usdL2tpDestConfig, usdL2tpDestConfigTable=usdL2tpDestConfigTable, usdL2tpDestStatusActiveSessions=usdL2tpDestStatusActiveSessions, usdL2tpCompliance=usdL2tpCompliance, usdL2tpCompliances=usdL2tpCompliances, usdL2tpSysStatusFailedTunnels=usdL2tpSysStatusFailedTunnels, usdL2tpDestStatusActiveTunnels=usdL2tpDestStatusActiveTunnels, usdL2tpDestStatCtlRecvErrors=usdL2tpDestStatCtlRecvErrors, usdL2tpTunnelStatusRemoteFirmwareRevision=usdL2tpTunnelStatusRemoteFirmwareRevision, usdL2tpObjects=usdL2tpObjects, usdL2tpTunnelStatusRemoteFramingCapabilities=usdL2tpTunnelStatusRemoteFramingCapabilities, usdL2tpDestStatus=usdL2tpDestStatus, usdL2tpSessionStatusClid=usdL2tpSessionStatusClid, usdL2tpTunnelStatPaySendPackets=usdL2tpTunnelStatPaySendPackets, usdL2tpDestStatusTransport=usdL2tpDestStatusTransport, usdL2tpSessionStatusRemoteSessionId=usdL2tpSessionStatusRemoteSessionId, usdL2tpSessionStatusDnis=usdL2tpSessionStatusDnis, usdL2tpTunnelStatusState=usdL2tpTunnelStatusState, usdL2tpTunnelStatCtlSendOctets=usdL2tpTunnelStatCtlSendOctets, usdL2tpDestStatPaySendPackets=usdL2tpDestStatPaySendPackets, usdL2tpTunnelStatusRecvSeq=usdL2tpTunnelStatusRecvSeq, usdL2tpTunnelStatCtlRecvOctets=usdL2tpTunnelStatCtlRecvOctets, usdL2tpTunnelStatPayRecvOctets=usdL2tpTunnelStatPayRecvOctets, usdL2tpSessionStatusSequencingState=usdL2tpSessionStatusSequencingState, usdL2tpUdpIpTunnelLocalAddress=usdL2tpUdpIpTunnelLocalAddress, usdL2tpSessionStatus=usdL2tpSessionStatus, usdL2tpSessionStatusAuthMethod=usdL2tpSessionStatusAuthMethod, usdL2tpTunnelStatusEffectiveAdminState=usdL2tpTunnelStatusEffectiveAdminState, usdL2tpSysConfigTunnelSwitchingEnabled=usdL2tpSysConfigTunnelSwitchingEnabled, usdL2tpMapTidToTifTable=usdL2tpMapTidToTifTable, usdL2tpDestStatPayRecvPackets=usdL2tpDestStatPayRecvPackets, usdL2tpTunnelStatusLastErrorMessage=usdL2tpTunnelStatusLastErrorMessage, usdL2tpTraps=usdL2tpTraps, usdL2tpSessionStatPayRecvOctets=usdL2tpSessionStatPayRecvOctets, usdL2tpSessionStatusTable=usdL2tpSessionStatusTable, usdL2tpDestStatPayRecvErrors=usdL2tpDestStatPayRecvErrors, usdL2tpTunnelStatEntry=usdL2tpTunnelStatEntry, usdL2tpUdpIpDestIfIndex=usdL2tpUdpIpDestIfIndex, usdL2tpSessionStatResequencingTimeouts=usdL2tpSessionStatResequencingTimeouts, usdL2tpSysStatusActiveDestinations=usdL2tpSysStatusActiveDestinations, usdL2tpMapTifSidToSifEntry=usdL2tpMapTifSidToSifEntry, PYSNMP_MODULE_ID=usdL2tpMIB, usdL2tpSysConfigIpChecksumEnable=usdL2tpSysConfigIpChecksumEnable, usdL2tpTunnelStatusRemoteBearerCapabilities=usdL2tpTunnelStatusRemoteBearerCapabilities, usdL2tpDestStatusTotalTunnels=usdL2tpDestStatusTotalTunnels, usdL2tpSessionStatistics=usdL2tpSessionStatistics, usdL2tpSessionStatusEntry=usdL2tpSessionStatusEntry, usdL2tpTunnelStatusSendQueueDepth=usdL2tpTunnelStatusSendQueueDepth, usdL2tpTunnelStatusRecvSeqAck=usdL2tpTunnelStatusRecvSeqAck, usdL2tpDestStatusFailedTunnels=usdL2tpDestStatusFailedTunnels, usdL2tpDestStatusTable=usdL2tpDestStatusTable, usdL2tpSysStatusActiveSessions=usdL2tpSysStatusActiveSessions, usdL2tpSessionStatusSendSeq=usdL2tpSessionStatusSendSeq, usdL2tpSessionStatusRecvSeq=usdL2tpSessionStatusRecvSeq, usdL2tpTunnelStatusLastResultCode=usdL2tpTunnelStatusLastResultCode, usdL2tpSessionStatusLocalSessionId=usdL2tpSessionStatusLocalSessionId, usdL2tpUdpIpSession=usdL2tpUdpIpSession, usdL2tpSessionStatRecvOutOfSequence=usdL2tpSessionStatRecvOutOfSequence, usdL2tpUdpIpTunnelRemoteAddress=usdL2tpUdpIpTunnelRemoteAddress, usdL2tpTunnelStatusTotalSessions=usdL2tpTunnelStatusTotalSessions, usdL2tpUdpIpDestination=usdL2tpUdpIpDestination, usdL2tpSysConfigReceiveDataSequencingIgnore=usdL2tpSysConfigReceiveDataSequencingIgnore, usdL2tpSysStatusFailedSessions=usdL2tpSysStatusFailedSessions, usdL2tpTunnelStatPayRecvErrors=usdL2tpTunnelStatPayRecvErrors, usdL2tpUdpIpTunnelEntry=usdL2tpUdpIpTunnelEntry, usdL2tpConformance=usdL2tpConformance, UsdL2tpTransport=UsdL2tpTransport, usdL2tpDestConfigEntry=usdL2tpDestConfigEntry, usdL2tpDestStatCtlRecvOctets=usdL2tpDestStatCtlRecvOctets, usdL2tpTunnelStatPayRecvPackets=usdL2tpTunnelStatPayRecvPackets)
